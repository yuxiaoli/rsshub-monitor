<?xml version="1.0" encoding="UTF-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>掘金 前端</title><link>https://juejin.cn/frontend</link><atom:link href="http://rsshub.rssforever.com/juejin/category/frontend" rel="self" type="application/rss+xml"></atom:link><description>掘金 前端 - Powered by RSSHub</description><generator>RSSHub</generator><webMaster>contact@rsshub.app (RSSHub)</webMaster><language>en</language><lastBuildDate>Wed, 19 Mar 2025 23:07:36 GMT</lastBuildDate><ttl>5</ttl><item><title>30天搭建消防安全培训小程序</title><description>&lt;h2 data-id=&quot;heading-0&quot;&gt;一、功能需求&lt;/h2&gt;
&lt;p&gt;搭建一款消防安全培训答题小程序，大体上实现功能如下：&lt;/p&gt;
&lt;p&gt;1.重要消防相关信息发布提醒；&lt;/p&gt;
&lt;p&gt;2.培训课程库播放，文档的，加视频的；&lt;/p&gt;
&lt;p&gt;3.题库、考试单选、多选、判断三类题 ；&lt;/p&gt;
&lt;p&gt;4.考试成绩查询、输出表单 ；&lt;/p&gt;
&lt;p&gt;5.单次培训：限时内完成，签到（手签名），限时内完成考试；&lt;/p&gt;
&lt;h2 data-id=&quot;heading-1&quot;&gt;二、项目结构&lt;/h2&gt;
&lt;p&gt;使用微信开发者工具创建一个新的小程序项目，项目结构大致如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-arduino&quot; lang=&quot;arduino&quot;&gt;pages
├── index           &lt;span class=&quot;hljs-comment&quot;&gt;// 首页，显示重要信息提醒&lt;/span&gt;
├── course          &lt;span class=&quot;hljs-comment&quot;&gt;// 培训课程库页面&lt;/span&gt;
├── exam            &lt;span class=&quot;hljs-comment&quot;&gt;// 考试页面&lt;/span&gt;
├── result          &lt;span class=&quot;hljs-comment&quot;&gt;// 考试成绩查询页面&lt;/span&gt;
├── signin          &lt;span class=&quot;hljs-comment&quot;&gt;// 单次培训签到页面&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 data-id=&quot;heading-2&quot;&gt;三、关键代码&lt;/h2&gt;
&lt;p&gt;实现一个基本的消防安全培训答题小程序，包含重要信息发布、培训课程库、题库考试、成绩查询和单次培训签到等功能。以下是一个消防安全培训答题小程序的实现思路及部分代码：&lt;/p&gt;
&lt;p&gt;app.json&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-json&quot; lang=&quot;json&quot;&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;pages&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;pages/index/index&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;pages/course/course&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;pages/exam/exam&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;pages/result/result&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;pages/signin/signin&quot;&lt;/span&gt;
    &lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;window&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;backgroundTextStyle&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;light&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;navigationBarBackgroundColor&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;#fff&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;navigationBarTitleText&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;消防安全培训答题小程序&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;navigationBarTextStyle&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;black&quot;&lt;/span&gt;
    &lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pages/index/index.wxml&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ini&quot; lang=&quot;ini&quot;&gt;&amp;lt;view &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;view &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;notice&quot;&lt;/span&gt; wx:for=&lt;span class=&quot;hljs-string&quot;&gt;&quot;{{notices}}&quot;&lt;/span&gt; wx:key=&lt;span class=&quot;hljs-string&quot;&gt;&quot;*this&quot;&lt;/span&gt;&amp;gt;{{item}}&amp;lt;/view&amp;gt;
    &amp;lt;button &lt;span class=&quot;hljs-attr&quot;&gt;bindtap&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;goToCourse&quot;&lt;/span&gt;&amp;gt;进入培训课程库&amp;lt;/button&amp;gt;
    &amp;lt;button &lt;span class=&quot;hljs-attr&quot;&gt;bindtap&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;goToSignin&quot;&lt;/span&gt;&amp;gt;参加单次培训&amp;lt;/button&amp;gt;
&amp;lt;/view&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pages/index/index.js&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-css&quot; lang=&quot;css&quot;&gt;Page({
    data: {
        notices: [&lt;span class=&quot;hljs-string&quot;&gt;&quot;近期将开展消防安全培训，请及时参加！&quot;&lt;/span&gt;]
    },
    goToCourse() {
        wx&lt;span class=&quot;hljs-selector-class&quot;&gt;.navigateTo&lt;/span&gt;({
            url: &lt;span class=&quot;hljs-string&quot;&gt;&#39;/pages/course/course&#39;&lt;/span&gt;
        });
    },
    goToSignin() {
        wx&lt;span class=&quot;hljs-selector-class&quot;&gt;.navigateTo&lt;/span&gt;({
            url: &lt;span class=&quot;hljs-string&quot;&gt;&#39;/pages/signin/signin&#39;&lt;/span&gt;
        });
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pages/course/course.wxml&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-xml&quot; lang=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;doc-item&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;wx:for&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;{{documents}}&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;wx:key&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;*this&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;text&lt;/span&gt;&amp;gt;&lt;/span&gt;{{item.title}}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;text&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;bindtap&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;openDoc&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;data-url&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;{{item.url}}&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;查看文档&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;view&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;video&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;{{videoUrl}}&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;controls&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;view&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pages/course/course.js&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-php&quot; lang=&quot;php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Page&lt;/span&gt;({
    &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: {
        &lt;span class=&quot;hljs-attr&quot;&gt;documents&lt;/span&gt;: [
            { &lt;span class=&quot;hljs-attr&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;消防知识手册&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;https://example.com/fire_manual.pdf&quot;&lt;/span&gt; },
            { &lt;span class=&quot;hljs-attr&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;消防应急预案&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;https://example.com/fire_plan.pdf&quot;&lt;/span&gt; }
        ],
        &lt;span class=&quot;hljs-attr&quot;&gt;videoUrl&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;https://example.com/fire_video.mp4&quot;&lt;/span&gt;
    },
    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;openDoc&lt;/span&gt;(e) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; url = e.currentTarget.dataset.url;
        wx.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;downloadFile&lt;/span&gt;({
            &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: url,
            &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;: function (res) {
                &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; filePath = res.tempFilePath;
                wx.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;openDocument&lt;/span&gt;({
                    &lt;span class=&quot;hljs-attr&quot;&gt;filePath&lt;/span&gt;: filePath,
                    &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;: function (res) {
                        console.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;打开文档成功&#39;&lt;/span&gt;);
                    }
                });
            }
        });
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pages/exam/exam.wxml&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-xml&quot; lang=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;wx:for&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;{{questions}}&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;wx:key&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;index&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;view&lt;/span&gt;&amp;gt;&lt;/span&gt;{{item.question}}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;view&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;wx:if&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;{{item.type === &#39;single&#39;}}&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;wx:for&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;{{item.options}}&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;wx:key&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;*this&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;radio-group&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;bindchange&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;onSingleAnswerChange&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;data-index&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;{{index}}&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;radio&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;{{item}}&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;{{item}}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;radio&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;radio-group&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;view&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;wx:if&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;{{item.type === &#39;multiple&#39;}}&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;wx:for&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;{{item.options}}&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;wx:key&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;*this&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;checkbox-group&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;bindchange&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;onMultipleAnswerChange&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;data-index&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;{{index}}&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;checkbox&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;{{item}}&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;{{item}}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;checkbox&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;checkbox-group&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;view&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;wx:if&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;{{item.type === &#39;judge&#39;}}&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;radio-group&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;bindchange&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;onJudgeAnswerChange&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;data-index&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;{{index}}&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;radio&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;正确&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;radio&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;radio&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;错误&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;radio&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;radio-group&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;view&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;view&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;bindtap&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;submitExam&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;提交考试&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;view&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pages/exam/exam.js&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ini&quot; lang=&quot;ini&quot;&gt;Page({
    data: {
        questions: &lt;span class=&quot;hljs-section&quot;&gt;[
            {
                question: &quot;以下哪种灭火器适用于扑灭电器火灾？&quot;,
                type: &quot;single&quot;,
                options: [&quot;泡沫灭火器&quot;, &quot;二氧化碳灭火器&quot;, &quot;水基型灭火器&quot;]&lt;/span&gt;,
                answer: &quot;二氧化碳灭火器&quot;
            },
            {
                question: &quot;消防设施包括以下哪些？&quot;,
                type: &quot;multiple&quot;,
                options: &lt;span class=&quot;hljs-section&quot;&gt;[&quot;灭火器&quot;, &quot;消火栓&quot;, &quot;应急照明&quot;]&lt;/span&gt;,
                answer: &lt;span class=&quot;hljs-section&quot;&gt;[&quot;灭火器&quot;, &quot;消火栓&quot;, &quot;应急照明&quot;]&lt;/span&gt;
            },
            {
                question: &quot;火灾发生时，应尽快乘坐电梯逃生。&quot;,
                type: &quot;judge&quot;,
                answer: &quot;false&quot;
            }
        ],
        userAnswers: &lt;span class=&quot;hljs-section&quot;&gt;[]&lt;/span&gt;
    },
    onSingleAnswerChange(e) {
        const &lt;span class=&quot;hljs-attr&quot;&gt;index&lt;/span&gt; = e.currentTarget.dataset.index&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
        const &lt;span class=&quot;hljs-attr&quot;&gt;answer&lt;/span&gt; = e.detail.value&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
        const &lt;span class=&quot;hljs-attr&quot;&gt;userAnswers&lt;/span&gt; = this.data.userAnswers&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
        userAnswers&lt;span class=&quot;hljs-section&quot;&gt;[index]&lt;/span&gt; = answer&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
        this.setData({
            userAnswers
        })&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    },
    onMultipleAnswerChange(e) {
        const &lt;span class=&quot;hljs-attr&quot;&gt;index&lt;/span&gt; = e.currentTarget.dataset.index&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
        const &lt;span class=&quot;hljs-attr&quot;&gt;answer&lt;/span&gt; = e.detail.value&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
        const &lt;span class=&quot;hljs-attr&quot;&gt;userAnswers&lt;/span&gt; = this.data.userAnswers&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
        userAnswers&lt;span class=&quot;hljs-section&quot;&gt;[index]&lt;/span&gt; = answer&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
        this.setData({
            userAnswers
        })&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    },
    onJudgeAnswerChange(e) {
        const &lt;span class=&quot;hljs-attr&quot;&gt;index&lt;/span&gt; = e.currentTarget.dataset.index&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
        const &lt;span class=&quot;hljs-attr&quot;&gt;answer&lt;/span&gt; = e.detail.value&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
        const &lt;span class=&quot;hljs-attr&quot;&gt;userAnswers&lt;/span&gt; = this.data.userAnswers&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
        userAnswers&lt;span class=&quot;hljs-section&quot;&gt;[index]&lt;/span&gt; = answer&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
        this.setData({
            userAnswers
        })&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    },
    submitExam() {
        const { questions, userAnswers } = this.data&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
        let &lt;span class=&quot;hljs-attr&quot;&gt;score&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
        for (let &lt;span class=&quot;hljs-attr&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;; i &amp;lt; questions.length; i++) {&lt;/span&gt;
            const &lt;span class=&quot;hljs-attr&quot;&gt;question&lt;/span&gt; = questions[i]&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
            const &lt;span class=&quot;hljs-attr&quot;&gt;userAnswer&lt;/span&gt; = userAnswers[i]&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
            if (Array.isArray(question.answer)) {
                if (userAnswer.sort().toString() === question.answer.sort().toString()) {
                    score++&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
                }
            } else {
                if (&lt;span class=&quot;hljs-attr&quot;&gt;userAnswer&lt;/span&gt; === question.answer) {
                    score++&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
                }
            }
        }
        wx.setStorageSync(&#39;examScore&#39;, score)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
        wx.navigateTo({
            url: &#39;/pages/result/result&#39;
        })&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    }
})&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pages/result/result.wxml&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-xml&quot; lang=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;view&lt;/span&gt;&amp;gt;&lt;/span&gt;您的考试成绩是：{{score}} 分&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;view&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;bindtap&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;exportResult&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;导出成绩表单&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;view&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pages/result/result.js&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Page&lt;/span&gt;({
    &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: {
        &lt;span class=&quot;hljs-attr&quot;&gt;score&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
    },
    &lt;span class=&quot;hljs-title function_&quot;&gt;onLoad&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; score = wx.&lt;span class=&quot;hljs-title function_&quot;&gt;getStorageSync&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;examScore&#39;&lt;/span&gt;);
        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;setData&lt;/span&gt;({
            score
        });
    },
    &lt;span class=&quot;hljs-title function_&quot;&gt;exportResult&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
        &lt;span class=&quot;hljs-comment&quot;&gt;// 这里可以实现导出表单的逻辑，如生成 PDF 等&lt;/span&gt;
        wx.&lt;span class=&quot;hljs-title function_&quot;&gt;showToast&lt;/span&gt;({
            &lt;span class=&quot;hljs-attr&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;导出功能待实现&#39;&lt;/span&gt;,
            &lt;span class=&quot;hljs-attr&quot;&gt;icon&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;none&#39;&lt;/span&gt;
        });
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pages/signin/signin.wxml&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ini&quot; lang=&quot;ini&quot;&gt;&amp;lt;view &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;canvas &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;signCanvas&quot;&lt;/span&gt; style=&lt;span class=&quot;hljs-string&quot;&gt;&quot;width: 300px; height: 200px;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/canvas&amp;gt;
    &amp;lt;button &lt;span class=&quot;hljs-attr&quot;&gt;bindtap&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;saveSignature&quot;&lt;/span&gt;&amp;gt;保存签名&amp;lt;/button&amp;gt;
    &amp;lt;button &lt;span class=&quot;hljs-attr&quot;&gt;bindtap&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;startExam&quot;&lt;/span&gt;&amp;gt;开始考试&amp;lt;/button&amp;gt;
&amp;lt;/view&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pages/signin/signin.js&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Page&lt;/span&gt;({
    &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: {
        &lt;span class=&quot;hljs-attr&quot;&gt;signature&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;&#39;&lt;/span&gt;
    },
    &lt;span class=&quot;hljs-title function_&quot;&gt;onLoad&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ctx = wx.&lt;span class=&quot;hljs-title function_&quot;&gt;createCanvasContext&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;signCanvas&#39;&lt;/span&gt;);
        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;setData&lt;/span&gt;({
            ctx
        });
    },
    &lt;span class=&quot;hljs-title function_&quot;&gt;saveSignature&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ctx = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;ctx&lt;/span&gt;;
        ctx.&lt;span class=&quot;hljs-title function_&quot;&gt;draw&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {
            wx.&lt;span class=&quot;hljs-title function_&quot;&gt;canvasToTempFilePath&lt;/span&gt;({
                &lt;span class=&quot;hljs-attr&quot;&gt;canvasId&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;signCanvas&#39;&lt;/span&gt;,
                &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;res&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
                    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; signature = res.&lt;span class=&quot;hljs-property&quot;&gt;tempFilePath&lt;/span&gt;;
                    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;setData&lt;/span&gt;({
                        signature
                    });
                    wx.&lt;span class=&quot;hljs-title function_&quot;&gt;showToast&lt;/span&gt;({
                        &lt;span class=&quot;hljs-attr&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;签名保存成功&#39;&lt;/span&gt;,
                        &lt;span class=&quot;hljs-attr&quot;&gt;icon&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;success&#39;&lt;/span&gt;
                    });
                }
            });
        });
    },
    &lt;span class=&quot;hljs-title function_&quot;&gt;startExam&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;signature&lt;/span&gt;) {
            wx.&lt;span class=&quot;hljs-title function_&quot;&gt;navigateTo&lt;/span&gt;({
                &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;/pages/exam/exam&#39;&lt;/span&gt;
            });
        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
            wx.&lt;span class=&quot;hljs-title function_&quot;&gt;showToast&lt;/span&gt;({
                &lt;span class=&quot;hljs-attr&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;请先完成签名&#39;&lt;/span&gt;,
                &lt;span class=&quot;hljs-attr&quot;&gt;icon&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;none&#39;&lt;/span&gt;
            });
        }
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/e693fd4f1a4344a29d8a61cbd36fa00b~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5aeR6IuP5rSb6KiA:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1743006146&amp;amp;x-signature=pR3qXcyeU9WqFeFiZNGBw9K05LA%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;</description><link>https://juejin.cn/post/7483409820243820583</link><guid isPermaLink="false">https://juejin.cn/post/7483409820243820583</guid><pubDate>Wed, 19 Mar 2025 16:22:26 GMT</pubDate><author>姑苏洛言</author><category>前端</category></item><item><title>🤯 一行代码，优雅的终结 React Context 嵌套地狱！</title><description>&lt;h2 data-id=&quot;heading-0&quot;&gt;什么是 Context 嵌套地狱？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;React Context 嵌套地狱是指 React Context Provider 的多层嵌套&lt;/strong&gt;，如下图所示，类似于前端问题中的 &lt;strong&gt;回调地狱&lt;/strong&gt; 一样，越来越多的 Context 会导致嵌套层数越来越大，导致代码阅读性极差。&lt;/p&gt;
&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/dac8fbad0c29444c9290ca28746c452a~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXVycGh5Q2hlbg==:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1743005691&amp;amp;x-signature=AFaRDV4uVwFLAgU6I4ezmav%2Bnrs%3D&quot; width=&quot;100%&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
&lt;h2 data-id=&quot;heading-1&quot;&gt;为什么会写出 Context 嵌套地狱这种代码？&lt;/h2&gt;
&lt;p&gt;Context 是 React 的上下文状态管理 API，允许我们跨组件实现状态透传，从而达到状态共享的目的。但是 Context 存在性能问题，就是 &lt;strong&gt;当 Context 包含多个状态属性时，当修改了其中的状态，由于 React 的 re-render 特性， 所有依赖该 Context 的组件都会重新渲染，即使某些组件所依赖该 Context 的状态值并没有变&lt;/strong&gt;。代码示例如下所示：&lt;/p&gt;
&lt;p&gt;定义 Context（context.ts）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-tsx&quot; lang=&quot;tsx&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { createContext } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;react&#39;&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;AppContext&lt;/span&gt; = createContext&amp;lt;{
  &lt;span class=&quot;hljs-attr&quot;&gt;theme&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;dark&#39;&lt;/span&gt; | &lt;span class=&quot;hljs-string&quot;&gt;&#39;light&#39;&lt;/span&gt;,
&amp;nbsp; &lt;span class=&quot;hljs-attr&quot;&gt;count&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;number&lt;/span&gt;,
&amp;nbsp; &lt;span class=&quot;hljs-attr&quot;&gt;increase&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt;
}&amp;gt;({
&amp;nbsp; &lt;span class=&quot;hljs-attr&quot;&gt;theme&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;dark&#39;&lt;/span&gt;,
&amp;nbsp; &lt;span class=&quot;hljs-attr&quot;&gt;count&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,
&amp;nbsp; &lt;span class=&quot;hljs-title function_&quot;&gt;increase&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {}
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;提供和消费 Context（page.tsx）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-tsx&quot; lang=&quot;tsx&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { use, useState } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;react&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { &lt;span class=&quot;hljs-title class_&quot;&gt;AppContext&lt;/span&gt; } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;./context&quot;&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;App&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
&amp;nbsp; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [count, setCount] = &lt;span class=&quot;hljs-title function_&quot;&gt;useState&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)
&amp;nbsp; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [theme, setTheme] = useState&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&#39;dark&#39;&lt;/span&gt; | &lt;span class=&quot;hljs-string&quot;&gt;&#39;light&#39;&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;dark&#39;&lt;/span&gt;)
&amp;nbsp; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (
&amp;nbsp; &amp;nbsp; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;AppContext.Provider&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;count&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;theme&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;increase:&lt;/span&gt; () =&amp;gt;&lt;/span&gt; setCount(count + 1) }}&amp;gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Header&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Button&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&amp;nbsp; &amp;nbsp; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;AppContext.Provider&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&amp;nbsp; )
}

&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Header&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
&amp;nbsp; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { theme } = &lt;span class=&quot;hljs-title function_&quot;&gt;use&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;AppContext&lt;/span&gt;)
&amp;nbsp; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Header rendered&#39;&lt;/span&gt;)
&amp;nbsp; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (
&amp;nbsp; &amp;nbsp; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{theme}&lt;/span&gt;&amp;gt;&lt;/span&gt;Header rendered, cur theme: {theme}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&amp;nbsp; )
}

&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Button&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
&amp;nbsp; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { count, increase } = &lt;span class=&quot;hljs-title function_&quot;&gt;use&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;AppContext&lt;/span&gt;)
&amp;nbsp; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Button rendered&#39;&lt;/span&gt;)
&amp;nbsp; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (
&amp;nbsp; &amp;nbsp; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{increase}&lt;/span&gt;&amp;gt;&lt;/span&gt;you click me {count} times.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&amp;nbsp; )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面代码中，每次点击 Button 修改 AppContext 中的 &lt;code&gt;{ count: 0}&lt;/code&gt; 状态，即使 Header 并没有消费 count，但也都会重新渲染一遍，这是因为 Header 组件消费（订阅）了 AppContext，React 会更新订阅了该 context 的组件。当状态 &lt;code&gt;count&lt;/code&gt; 改变时，触发 re-render，传入子组件中的 “context” 状态也都是新的对象，触发 context 的订阅更新。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/0623732b34ef4f92bd234f3ff0a17416~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXVycGh5Q2hlbg==:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1743005691&amp;amp;x-signature=QWFhR75oBNWRzgjyWNBSc2t82qk%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;那么如何解决呢？关键在于状态是否改变，我们要让不需要更新的组件的状态保持不变。为此我们 &lt;strong&gt;需要将 context 拆分到各自独立的&amp;nbsp;&lt;code&gt;Provider&lt;/code&gt;&amp;nbsp;组件中，当状态在各自的 Provider 中发生改变时，React 会自上而下进行更新，并且只会将消费了这个 context 的组件进行重新渲染，相当于做到了状态隔离。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;示例代码如下：&lt;/p&gt;
&lt;p&gt;（1）拆分 context（context.ts）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ts&quot; lang=&quot;ts&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { createContext } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;react&#39;&lt;/span&gt;

&lt;span class=&quot;hljs-comment&quot;&gt;// 定义 CounterContext&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CounterContext&lt;/span&gt; = createContext&amp;lt;{
&amp;nbsp; &lt;span class=&quot;hljs-attr&quot;&gt;count&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;number&lt;/span&gt;,
&amp;nbsp; &lt;span class=&quot;hljs-attr&quot;&gt;increase&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt;
}&amp;gt;({
&amp;nbsp; &lt;span class=&quot;hljs-attr&quot;&gt;count&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,
&amp;nbsp; &lt;span class=&quot;hljs-title function_&quot;&gt;increase&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {}
})

&lt;span class=&quot;hljs-comment&quot;&gt;// 定义 ThemeContext&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Theme&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&#39;dark&#39;&lt;/span&gt; | &lt;span class=&quot;hljs-string&quot;&gt;&#39;light&#39;&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ThemeContext&lt;/span&gt; = createContext&amp;lt;{
&amp;nbsp; &lt;span class=&quot;hljs-attr&quot;&gt;theme&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Theme&lt;/span&gt;,
&amp;nbsp; &lt;span class=&quot;hljs-attr&quot;&gt;toggle&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt;
}&amp;gt;({ &lt;span class=&quot;hljs-attr&quot;&gt;theme&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;dark&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;toggle&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {} })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（2）拆分 Provider，状态隔离：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-tsx&quot; lang=&quot;tsx&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { use, useState } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;react&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { &lt;span class=&quot;hljs-title class_&quot;&gt;CounterContext&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Theme&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;ThemeContext&lt;/span&gt; } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;./context&quot;&lt;/span&gt;

&lt;span class=&quot;hljs-comment&quot;&gt;// 提供 ThemeContext&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ThemeContextProvider&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;{ children } : { children ?: React.ReactNode }&lt;/span&gt;) {
&amp;nbsp; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [theme, setTheme] = useState&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;Theme&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;dark&#39;&lt;/span&gt;)
&amp;nbsp; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;toggle&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setTheme&lt;/span&gt;(theme === &lt;span class=&quot;hljs-string&quot;&gt;&#39;dark&#39;&lt;/span&gt; ? &lt;span class=&quot;hljs-string&quot;&gt;&#39;light&#39;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&#39;dark&#39;&lt;/span&gt;)
&amp;nbsp; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (
&amp;nbsp; &amp;nbsp; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ThemeContext.Provider&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;theme&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;toggle&lt;/span&gt; }}&amp;gt;&lt;/span&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; {children}
&amp;nbsp; &amp;nbsp; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ThemeContext.Provider&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&amp;nbsp; )
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 提供 CounterContext&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;CounterContextProvider&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;{ children } : { children ?: React.ReactNode }&lt;/span&gt;) {
&amp;nbsp; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [count, setCount] = &lt;span class=&quot;hljs-title function_&quot;&gt;useState&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)
&amp;nbsp; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increase&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setCount&lt;/span&gt;(count + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)
&amp;nbsp; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (
&amp;nbsp; &amp;nbsp; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;CounterContext.Provider&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;count&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;increase&lt;/span&gt; }}&amp;gt;&lt;/span&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; {children}
&amp;nbsp; &amp;nbsp; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;CounterContext.Provider&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&amp;nbsp; )
}

&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;App&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
&amp;nbsp; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (
&amp;nbsp; &amp;nbsp; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ThemeContextProvider&lt;/span&gt;&amp;gt;&lt;/span&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;CounterContextProvider&lt;/span&gt;&amp;gt;&lt;/span&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Header&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Button&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;CounterContextProvider&lt;/span&gt;&amp;gt;&lt;/span&gt;
&amp;nbsp; &amp;nbsp; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ThemeContextProvider&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&amp;nbsp; )
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 消费 ThemeContext&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Header&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
&amp;nbsp; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { theme, toggle } = &lt;span class=&quot;hljs-title function_&quot;&gt;use&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;ThemeContext&lt;/span&gt;)
&amp;nbsp; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Header rendered&#39;&lt;/span&gt;)
&amp;nbsp; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (
&amp;nbsp; &amp;nbsp; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{theme}&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{toggle}&lt;/span&gt;&amp;gt;&lt;/span&gt;Header rendered, cur theme: {theme}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&amp;nbsp; )
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 消费 CounterContext&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Button&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
&amp;nbsp; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { count, increase } = &lt;span class=&quot;hljs-title function_&quot;&gt;use&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;CounterContext&lt;/span&gt;)
&amp;nbsp; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Button rendered&#39;&lt;/span&gt;)
&amp;nbsp; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (
&amp;nbsp; &amp;nbsp; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{increase}&lt;/span&gt;&amp;gt;&lt;/span&gt;you click me {count} times.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&amp;nbsp; )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后随着 context 越来越多，嵌套层数也会越来越大，这就形成了 Context 嵌套地狱问题。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-tsx&quot; lang=&quot;tsx&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Page&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
&amp;nbsp; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (
&amp;nbsp; &amp;nbsp; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ThemeContextProvider&lt;/span&gt;&amp;gt;&lt;/span&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;CounterContextProvider&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;OtherContextProvider&lt;/span&gt;&amp;gt;&lt;/span&gt;
          // ... 更多嵌套 context
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;App&lt;/span&gt; /&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;OtherContextProvider&lt;/span&gt;&amp;gt;&lt;/span&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;CounterContextProvider&lt;/span&gt;&amp;gt;&lt;/span&gt;
&amp;nbsp; &amp;nbsp; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ThemeContextProvider&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&amp;nbsp; )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;备注：这里解决 context 的 re-render 问题的方案还有 &lt;code&gt;memo&lt;/code&gt;、&lt;code&gt;useMemo&lt;/code&gt; 等，就不列举了，一方面是本文重点在于介绍嵌套地狱，&lt;del&gt;另一方面在于众所周知 React 哲学之一就是能不上优化相关的 hooks 就不上，提高代码可维护性和阅读性。&lt;/del&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 data-id=&quot;heading-2&quot;&gt;一行代码优雅的解决 Context 嵌套地狱&lt;/h2&gt;
&lt;p&gt;我们 &lt;strong&gt;观察上面多层嵌套的组件形式，可以看到其实就是从最上层组件一直往里塞子组件，子组件里再塞子组件，就是不断创建子组件套娃的过程。&lt;/strong&gt; 有什么可以手动往组件中嵌入子组件的方法？答案是 &lt;code&gt;React.cloneElement&lt;/code&gt;，它用于克隆一个已有的 React 元素（&lt;code&gt;ReactElement&lt;/code&gt;），并可以为其添加新的&amp;nbsp;&lt;code&gt;props&lt;/code&gt;&amp;nbsp;或修改现有的&amp;nbsp;&lt;code&gt;props&lt;/code&gt;，并可以添加子组件。&lt;/p&gt;
&lt;p&gt;下面是 &lt;code&gt;React.cloneElement&lt;/code&gt; 方法定义：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ts&quot; lang=&quot;ts&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;cloneElement&lt;/span&gt;(element, [props], [...children])
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;element&lt;/code&gt;: 被克隆的 React 元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;props&lt;/code&gt;: 可选参数，一个对象，包含要添加到克隆元素的新属性或要覆盖的现有属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;children&lt;/code&gt;: 可选参数，新的子元素(组件)，会替换原先的子元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么原来的多层嵌套代码就可以被打平了：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-tsx&quot; lang=&quot;tsx&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Page&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
&amp;nbsp; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; comp1 = &lt;span class=&quot;hljs-title class_&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;cloneElement&lt;/span&gt;(&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;OtherContextProvider&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;, {}, &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Header&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Button&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;)
&amp;nbsp; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; comp2 = &lt;span class=&quot;hljs-title class_&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;cloneElement&lt;/span&gt;(&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;CounterContextProvider&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;, {}, comp1)
&amp;nbsp; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; comp3 = &lt;span class=&quot;hljs-title class_&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;cloneElement&lt;/span&gt;(&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ThemeContextProvider&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;, {}, comp2)
&amp;nbsp; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; comp3
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看出，上面的代码可以用 &lt;code&gt;reduceRight&lt;/code&gt; 方法优化：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-tsx&quot; lang=&quot;tsx&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Page&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
&amp;nbsp; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [
&amp;nbsp; &amp;nbsp; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ThemeContextProvider&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;,
&amp;nbsp; &amp;nbsp; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;CounterContextProvider&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;,
&amp;nbsp; &amp;nbsp; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;OtherContextProvider&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;,
&amp;nbsp; &amp;nbsp; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Header&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Button&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&amp;nbsp; ].&lt;span class=&quot;hljs-title function_&quot;&gt;reduceRight&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;pre, cur&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;cloneElement&lt;/span&gt;(pre, {}, cur))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们继续封装得到 MultiProviders 函数，终于点题了！这个方法核心只有简单一行代码，这就是解决方案 🎉🎉🎉！&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-tsx&quot; lang=&quot;tsx&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**
&amp;nbsp;* 封装多层 Provider
&amp;nbsp;*
&amp;nbsp;* &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;providers&lt;/span&gt;
&amp;nbsp;* &lt;span class=&quot;hljs-doctag&quot;&gt;@returns&lt;/span&gt; 组件树
&amp;nbsp;*/&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MultiProvidersPropsType&lt;/span&gt; = { &lt;span class=&quot;hljs-attr&quot;&gt;providers&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;ReactElement&lt;/span&gt;[], &lt;span class=&quot;hljs-attr&quot;&gt;children&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;ReactNode&lt;/span&gt;}
&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MultiProviders&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;{ providers, children } : MultiProvidersPropsType&lt;/span&gt;) {
&amp;nbsp; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
&amp;nbsp; &amp;nbsp; { providers.reduceRight((pre, cur) =&amp;gt; React.cloneElement(cur, {}, pre), children) }
&amp;nbsp; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;)
}

&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Page&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
&amp;nbsp; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (
&amp;nbsp; &amp;nbsp; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;MultiProviders&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;providers&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{[&lt;/span&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;&lt;span class=&quot;hljs-attr&quot;&gt;ThemeContextProvider&lt;/span&gt; /&amp;gt;&lt;/span&gt;,
&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;CounterContextProvider&lt;/span&gt; /&amp;gt;&lt;/span&gt;,
&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;OtherContextProvider&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&amp;nbsp; &amp;nbsp; ]}&amp;gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;App&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&amp;nbsp; &amp;nbsp; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;MultiProviders&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&amp;nbsp; )
}

&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;App&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
&amp;nbsp; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
&amp;nbsp; &amp;nbsp; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Header&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&amp;nbsp; &amp;nbsp; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Button&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&amp;nbsp; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;它的特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;代码结构清晰，无嵌套结构&lt;/li&gt;
&lt;li&gt;拆分 context，状态隔离，避免非必要渲染&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 data-id=&quot;heading-3&quot;&gt;总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;总体思路：多个状态合并到一个 Context 管理会导致非必要更新问题 =&amp;gt; 拆分 Context、Provider 避免非必要更新 =&amp;gt; 存在嵌套地狱问题 =&amp;gt; 组件的嵌套实际上是子孙组件的不断创建 =&amp;gt; &lt;code&gt;React.cloneElement&lt;/code&gt; + &lt;code&gt;reduceRight&lt;/code&gt; 循环创建子孙组件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当然了，如果是较为复杂的状态管理，最直接的解决方式是不使用 Context，根据具体情况可使用 &lt;code&gt;React.useReducer&lt;/code&gt; 和 Redux/Mobx/Valtio/Jotai/Zustand 等状态管理库。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Freact.dev%2Flearn%2Fpassing-data-deeply-with-context&quot; target=&quot;_blank&quot; title=&quot;https://react.dev/learn/passing-data-deeply-with-context&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;react.dev/learn/passi…&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fdev.to%2Falfredosalzillo%2Fthe-react-context-hell-7p4&quot; target=&quot;_blank&quot; title=&quot;https://dev.to/alfredosalzillo/the-react-context-hell-7p4&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;dev.to/alfredosalz…&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Freact.dev%2Freference%2Freact%2FcloneElement%23cloneelement&quot; target=&quot;_blank&quot; title=&quot;https://react.dev/reference/react/cloneElement#cloneelement&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;react.dev/reference/r…&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><link>https://juejin.cn/post/7483406014390763574</link><guid isPermaLink="false">https://juejin.cn/post/7483406014390763574</guid><pubDate>Wed, 19 Mar 2025 15:48:31 GMT</pubDate><author>MurphyChen</author><category>前端</category><category>React.js</category></item><item><title>JavaScript 调度：setTimeout 和 setInterval</title><description>&lt;h4 data-id=&quot;heading-0&quot;&gt;&lt;strong&gt;一、基础语法与核心差异&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1. &lt;code&gt;setTimeout&lt;/code&gt;：单次延迟执行&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; timerId = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(callback, delay, arg1, arg2, ...);  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;• &lt;strong&gt;功能&lt;/strong&gt;：在指定延迟（毫秒）后执行一次回调函数。&lt;br&gt;
• &lt;strong&gt;取消方法&lt;/strong&gt;：&lt;code&gt;clearTimeout(timerId)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. &lt;code&gt;setInterval&lt;/code&gt;：循环重复执行&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; intervalId = &lt;span class=&quot;hljs-built_in&quot;&gt;setInterval&lt;/span&gt;(callback, interval, arg1, arg2, ...);  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;• &lt;strong&gt;功能&lt;/strong&gt;：每隔固定时间重复执行回调函数。&lt;br&gt;
• &lt;strong&gt;取消方法&lt;/strong&gt;：&lt;code&gt;clearInterval(intervalId)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;核心差异&lt;/strong&gt;：&lt;br&gt;
• &lt;code&gt;setTimeout&lt;/code&gt;：&lt;strong&gt;单次触发&lt;/strong&gt;，适合延迟任务或递归实现循环。&lt;br&gt;
• &lt;code&gt;setInterval&lt;/code&gt;：&lt;strong&gt;固定间隔触发&lt;/strong&gt;，适合周期性任务（需注意累积问题）。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 data-id=&quot;heading-1&quot;&gt;&lt;strong&gt;二、实战技巧与经典问题&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 data-id=&quot;heading-2&quot;&gt;&lt;strong&gt;1. 用&lt;code&gt;setTimeout&lt;/code&gt;模拟&lt;code&gt;setInterval&lt;/code&gt;&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;由于&lt;code&gt;setInterval&lt;/code&gt;可能因回调执行时间过长导致&lt;strong&gt;任务堆积&lt;/strong&gt;，更安全的做法是递归调用&lt;code&gt;setTimeout&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;safeInterval&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;callback, interval&lt;/span&gt;) {  
  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; timerId = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;  
  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;execute&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {  
    &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;();  
    timerId = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(execute, interval); &lt;span class=&quot;hljs-comment&quot;&gt;// 递归调用  &lt;/span&gt;
  }  
  timerId = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(execute, interval);  
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;clearTimeout&lt;/span&gt;(timerId); &lt;span class=&quot;hljs-comment&quot;&gt;// 返回清除函数  &lt;/span&gt;
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此方法确保每次回调执行完毕后再重新计时，避免任务重叠。&lt;/p&gt;
&lt;h5 data-id=&quot;heading-3&quot;&gt;&lt;strong&gt;2. 事件循环与时间精度问题&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;JavaScript是单线程的，定时器的回调会被推入任务队列，&lt;strong&gt;实际执行时间可能晚于预期&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Start&quot;&lt;/span&gt;);  
&lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Timeout&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);  
&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;End&quot;&lt;/span&gt;);  
&lt;span class=&quot;hljs-comment&quot;&gt;// 输出顺序：Start → End → Timeout  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;即使延迟设为0，回调仍需等待主线程空闲。&lt;/p&gt;
&lt;h5 data-id=&quot;heading-4&quot;&gt;&lt;strong&gt;3. 内存泄漏：忘记清除定时器&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;未及时调用&lt;code&gt;clearTimeout&lt;/code&gt;或&lt;code&gt;clearInterval&lt;/code&gt;会导致回调持续引用外部变量，&lt;strong&gt;内存无法释放&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;startPolling&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {  
  &lt;span class=&quot;hljs-built_in&quot;&gt;setInterval&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {  
    &lt;span class=&quot;hljs-title function_&quot;&gt;fetchData&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// 持续运行，即使组件已销毁  &lt;/span&gt;
  }, &lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;解决方案&lt;/strong&gt;：在组件卸载或条件变更时主动清除定时器。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 data-id=&quot;heading-5&quot;&gt;&lt;strong&gt;三、高级应用场景&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 data-id=&quot;heading-6&quot;&gt;&lt;strong&gt;1. 节流（Throttling）与防抖（Debouncing）&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;• &lt;strong&gt;防抖&lt;/strong&gt;：连续事件中只执行最后一次：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;debounce&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;func, delay&lt;/span&gt;) {  
  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; timerId;  
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;...args&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {  
    &lt;span class=&quot;hljs-built_in&quot;&gt;clearTimeout&lt;/span&gt;(timerId);  
    timerId = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func&lt;/span&gt;(...args), delay);  
  };  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;• &lt;strong&gt;节流&lt;/strong&gt;：固定时间内只执行一次：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;throttle&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;func, interval&lt;/span&gt;) {  
  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; lastTime = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;  
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;...args&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {  
    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; now = &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;now&lt;/span&gt;();  
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (now - lastTime &amp;gt;= interval) {  
      &lt;span class=&quot;hljs-title function_&quot;&gt;func&lt;/span&gt;(...args);  
      lastTime = now;  
    }  
  };  
}  
&lt;/code&gt;&lt;/pre&gt;</description><link>https://juejin.cn/post/7483409820243656743</link><guid isPermaLink="false">https://juejin.cn/post/7483409820243656743</guid><pubDate>Wed, 19 Mar 2025 15:08:52 GMT</pubDate><author>烛阴</author><category>前端</category><category>JavaScript</category></item><item><title>Cursor AI 用于大型项目</title><description>&lt;h2 data-id=&quot;heading-0&quot;&gt;Cursor AI 用于大型项目&lt;/h2&gt;
&lt;p&gt;随着“vibe”编码的流行，许多开发者认为 Cursor 和 Claude 仅适用于原型开发。虽然 Cursor 在编写新代码方面表现出色，但在结构化代码、标准化、重构和维护大型项目方面也非常有效。这非常令人兴奋，因为你可以以 5-30 倍的速度构建软件。&lt;/p&gt;
&lt;p&gt;这篇指南分享了我使用 Cursor 的工作流程以及如何将其用于大型项目。作为背景，在 Stream，我们为超过十亿终端用户提供聊天、活动提要和视频服务，代码量约为 80 万行 Go 代码。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-1&quot;&gt;Cursor – 编辑、测试循环&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fgetstream.io%2Fchat%2Fsolutions%2Fai-integration%2F&quot; target=&quot;_blank&quot; title=&quot;https://getstream.io/chat/solutions/ai-integration/&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;高效使用 AI&lt;/a&gt;的关键是良好的编辑和测试循环。通常，你希望 AI 编写代码、编写测试，然后执行此测试并修复发现的任何错误。只有在 AI 完成这些步骤后，我才会开始审查。&lt;/p&gt;
&lt;p&gt;让我们来看看这个编辑循环的基础。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-2&quot;&gt;步骤 1 - Cursor 设置/代理模式&lt;/h3&gt;
&lt;p&gt;你需要使用代理模式（cmd + I）+ Claude 3.7 sonnet。（注意左下角的小下拉菜单）。代理模式将持续调用 Claude，直到目标实现。因此，它将搜索文件、查找更多上下文、运行测试、安装软件包等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/8504d50598dd42d58d57003526daf2e0~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5aSq5YeJ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1743000873&amp;amp;x-signature=p%2F%2FS%2FLmtvk5bBvdL5glGOdtW1tE%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h3 data-id=&quot;heading-3&quot;&gt;步骤 2 - AI 文档&lt;/h3&gt;
&lt;p&gt;上上面的例子有点过于简单。通常情况下，你会想要一个文档文件夹，让AI 在你的代码库上执行常见任务。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何编写测试？&lt;/li&gt;
&lt;li&gt;如何设置新的数据库模型并应用迁移？&lt;/li&gt;
&lt;li&gt;如何创建新的控制器(controller)/状态层(state)等？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们为 AI 单独维护一个文档文件夹，大概是这样的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/1b17b17eecfe4f7d808bfa1d36b0b341~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5aSq5YeJ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1743000873&amp;amp;x-signature=ydOZKvYqfbRUAC3rOkIcPQquGQA%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;这和你项目结构非常相似。但我们会单独保留 AI 文档，这样当 AI 出现错误时，可以轻松地对其进行纠正&lt;/p&gt;
&lt;h3 data-id=&quot;heading-4&quot;&gt;步骤 3 - 在设置中启用 Yolo 模式&lt;/h3&gt;
&lt;p&gt;你需要启用 Yolo 模式，Cursor 就能在 Yolo 模式下自动运行测试，而无需每次都等待你的确认，同时你可以通过自定义命令列表来限制它的行为，确保只执行你信任的操作&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/ed15ed3722b847a5a5bd8ba96c29ed55~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5aSq5YeJ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1743000873&amp;amp;x-signature=%2FqdqE8DIqk6iwDfc3ISVYeohmeQ%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h3 data-id=&quot;heading-5&quot;&gt;步骤 4 - Cursor/Claude 运行测试&lt;/h3&gt;
&lt;p&gt;告诉 Cursor 运行测试。因为它会运行测试，所以能够检测出在生成代码时犯的错误&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/c457787b40f644f193d53b9b65de6bce~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5aSq5YeJ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1743000873&amp;amp;x-signature=2M3aX8FHf0PxMjKTV2U%2FdITX9qc%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;当然，AI 并不完美；它会遗漏一些东西，但通过这个测试循环，结果比仅仅生成代码要好得多。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-6&quot;&gt;针对前端/其他平台&lt;/h3&gt;
&lt;p&gt;我主要使用 Cursor 进行 前端和Python开发 开发，你可以去 [Cursor MCP](&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fcursor.directory%2Fmcp&quot; target=&quot;_blank&quot; title=&quot;https://cursor.directory/mcp&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;cursor.directory/mcp&lt;/a&gt;.)查找需要的MCP 工具；如果不知道cursor mcp是什么的，可以自行搜索。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/95f779cf629948f6b072542a7872b8a1~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5aSq5YeJ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1743000873&amp;amp;x-signature=VQ8Zzx8Kygsmx%2BdFBqYkJec0F%2B8%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/3152c6487ee44eccbd508d5a4bb5a43d~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5aSq5YeJ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1743000873&amp;amp;x-signature=bIkRG69nj3d6EHnSm97SVrtlcfM%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h2 data-id=&quot;heading-7&quot;&gt;Cursor - 项目文件&lt;/h2&gt;
&lt;p&gt;编辑/测试循环是有效使用 Cursor 的关键。另一个重要的工作流程是创建项目文件。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-8&quot;&gt;项目步骤&lt;/h3&gt;
&lt;p&gt;以下是创建消息书签/提醒的项目文件示例&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/08480fd3d2ed40b2b2cb5cfa3078bf5b~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5aSq5YeJ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1743000873&amp;amp;x-signature=XruJ88vldAIE0yripatO8U6Kow8%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;注意每个步骤如何引用相关文档。你也可以使用 cursor 规则来做到这一点，但我大多数时候更喜欢手动指定正确的文档。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-9&quot;&gt;项目验证检查&lt;/h3&gt;
&lt;p&gt;现在有了这个项目文件，可以使用 AI 来检查你的规格说明是否存在问题。我们的项目检查文件会审查模型，看看指令是否清楚地说明了主键。对于控制器步骤，它会要求你澄清所需的权限。所以，你可以用 AI 来验证给 AI 的指令，这有点疯狂。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-10&quot;&gt;生成项目文件&lt;/h3&gt;
&lt;p&gt;当然，你也可以使用 AI 生成你的项目描述。你给它一个示例项目描述文件，并要求它为不同的功能生成类似的东西。目前，Grok 可能是最好的模型。你还可以将其与 deepsearch 结合使用，以进一步说明白你的项目需求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;快速集成 LLM！&lt;/strong&gt; 我们的 UI 组件非常适合任何 AI 聊天机器人界面，开箱即用。今天就试试，明天就上线！&lt;/p&gt;
&lt;h3 data-id=&quot;heading-11&quot;&gt;Git 是你的检查点 - 再次尝试&lt;/h3&gt;
&lt;p&gt;Cursor 有一个内置的检查点系统，但我更喜欢不使用它。Git 对我来说更好。要重置你的工作区，你可以使用：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-shell&quot; lang=&quot;shell&quot;&gt;git stash --include-untracked # 存储所有更改，包括未跟踪的内容
git stash pop # 恢复最后一个存储
git clean -fd # 删除所有未提交的文件（小心使用）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因此，如果 Claude 偏离轨道，只需重置并重试。这也是你保留项目文件的原因。它使得使用不同的文档/最佳实践重新开始变得非常容易。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-12&quot;&gt;其他 Cursor &amp;amp; Claude 提示&lt;/h2&gt;
&lt;p&gt;当使用 Cursor 时，我们了解到采取特定步骤并应用某些提示可以显著提高 Cursor 生成的输出质量。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-13&quot;&gt;限制 Cursor Composer 窗口中的步骤&lt;/h3&gt;
&lt;p&gt;有时，我会在单个 composer 窗口中运行 5-7 个步骤。对话持续时间越长，Claude 就越有可能忘记部分指令。因此，有时创建一个新的 cursor 代理窗口。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-14&quot;&gt;Cursor 设置提示&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在 Cursor 设置中，你可以添加文档。这对于不常用的软件包特别有用，Claude 默认对这些软件包了解不多&lt;/li&gt;
&lt;li&gt;MCP 与线性或其他工具的集成非常酷&lt;/li&gt;
&lt;li&gt;/ 添加打开文件到上下文非常方便&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/a6e7f04b6dda4a818155411b771d675c~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5aSq5YeJ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1743000873&amp;amp;x-signature=VrdWak1vZxlBRKQ43xl6LRIKBp4%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h3 data-id=&quot;heading-15&quot;&gt;Goland&lt;/h3&gt;
&lt;p&gt;Cursor 在其 AI 功能方面非常出色。我并排运行 Goland 进行调试、重构和一般编辑器设计。你可能还需要这样做，例如 iOS/Android 开发等，那里很难/不可能完全替代具有强大工具的编辑器。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-16&quot;&gt;Cursor 工具&lt;/h3&gt;
&lt;p&gt;有一个很酷的 cursor 工具项目 &lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Feastlondoner%2Fcursor-tools&quot; target=&quot;_blank&quot; title=&quot;https://github.com/eastlondoner/cursor-tools&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;github.com/eastlondone…&lt;/a&gt; 由 @EastlondonDev 开发。Cursor 工具支持浏览器使用、大型上下文窗口、文档和计划功能。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-17&quot;&gt;Cursor 规则&lt;/h3&gt;
&lt;p&gt;你可以在设置中向 Cursor 添加规则，这使你可以自动包含文档。例如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/086baa91f29742219fffe04c09f926d2~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5aSq5YeJ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1743000873&amp;amp;x-signature=FPEs%2FZBjYYm0N040rqK5JnyVtLg%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;有一个常见 cursor 规则的目录。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-18&quot;&gt;代码标准化&lt;/h3&gt;
&lt;p&gt;它几乎感觉像人类，因为如果你使用混乱的名称、重复的实现等，AI 会感到困惑。因此，你需要拥有干净、标准化的代码，以获得最高的 AI 成功率。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-19&quot;&gt;检查一切&lt;/h3&gt;
&lt;p&gt;如果你将工作分配给初级工程师，你会仔细检查一切。你应该以类似的方式对待 AI，并了解代码的每一部分。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-20&quot;&gt;重构、文档和搜索&lt;/h2&gt;
&lt;p&gt;这不仅仅是代码生成。你还可以使用 Cursor &amp;amp; Claude 进行文档、搜索和重构。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/115f023eb2c24ccc95063a965fc3d9f2~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5aSq5YeJ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1743000873&amp;amp;x-signature=A1Cf3Hddt8As3H7iBkUl5YzTsGQ%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h3 data-id=&quot;heading-21&quot;&gt;重构示例&lt;/h3&gt;
&lt;p&gt;你可以对数百个文件进行复杂调整。如果是简单的更改，我仍然更喜欢 Goland 的重构工具。但对于复杂的更改，这可以节省数天的工作。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-22&quot;&gt;搜索和文档&lt;/h3&gt;
&lt;p&gt;每个大型代码库最终都会有难以理解的部分。你可以要求 Cursor 为你编写文档以帮助解释它。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/257b1b3a61374a5b87042ffd696c743d~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5aSq5YeJ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1743000873&amp;amp;x-signature=TxKIs0csb7WMzYYyH%2FidY2aUbWs%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h3 data-id=&quot;heading-23&quot;&gt;技术和理解&lt;/h3&gt;
&lt;p&gt;当你遇到代码库中某些不理解的底层技术时，你也可以将其用作 Google/Stackoverflow 的替代品。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/db63c685e2f7462c8e6a180ec5e483cf~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5aSq5YeJ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1743000873&amp;amp;x-signature=iXzZdJ3Pe08mVu2rS%2F7aO2jQ3Dc%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h2 data-id=&quot;heading-24&quot;&gt;结论&lt;/h2&gt;
&lt;p&gt;Cursor 是一个很棒的工具，不仅适用于原型开发，还适用于维护大型项目。要有效使用它：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置生成/测试/运行测试循环。这样 AI 自我纠正&lt;/li&gt;
&lt;li&gt;创建项目计划，并让 AI 检查和改进此计划&lt;/li&gt;
&lt;li&gt;微调你的 Cursor 设置并习惯不同的工作流程&lt;/li&gt;
&lt;li&gt;这不仅仅是代码生成。你可以重构、创建文档并将其用作强大的搜索引擎&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过正确的设置，你可以提高 5-30 倍的工作效率。我特别喜欢的是，作为一名工程师，你可以更多地专注于更难的问题，而 AI 生成所有基础内容。我希望这篇指南能有所帮助。如果你有更多提示，请在 X 上与 Stream 分享，我会将它们添加到文章中。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-25&quot;&gt;最后&lt;/h2&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fgetstream.io%2Fblog%2Fcursor-ai-large-projects%2F%3Fref%3Ddailydev&quot; target=&quot;_blank&quot; title=&quot;https://getstream.io/blog/cursor-ai-large-projects/?ref=dailydev&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;getstream.io/blog/cursor…&lt;/a&gt;&lt;/p&gt;</description><link>https://juejin.cn/post/7483372573587324954</link><guid isPermaLink="false">https://juejin.cn/post/7483372573587324954</guid><pubDate>Wed, 19 Mar 2025 14:54:34 GMT</pubDate><author>太凉</author><category>前端</category><category>Cursor</category></item><item><title>SvelteKit 最新中文文档教程（6）—— 状态管理</title><description>&lt;h2 data-id=&quot;heading-0&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fsvelte.yayujs.com&quot; target=&quot;_blank&quot; title=&quot;https://svelte.yayujs.com&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;Svelte&lt;/a&gt;，一个语法简洁、入门容易，面向未来的前端框架。&lt;/p&gt;
&lt;p&gt;从 Svelte 诞生之初，就备受开发者的喜爱，根据统计，&lt;strong&gt;从 2019 年到 2024 年，连续 6 年一直是开发者最感兴趣的前端框架 No.1&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/29d1318f55a143c4a3210e0fa7f15861~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5Ya05769:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742996177&amp;amp;x-signature=Jhl1eparbF%2Fr1vaITeISZO72kfI%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;Svelte 以其独特的编译时优化机制著称，具有&lt;strong&gt;轻量级&lt;/strong&gt;、&lt;strong&gt;高性能&lt;/strong&gt;、&lt;strong&gt;易上手&lt;/strong&gt;等特性，&lt;strong&gt;非常适合构建轻量级 Web 项目&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;为了帮助大家学习 Svelte，我同时搭建了 Svelte 最新的&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fsvelte.yayujs.com&quot; target=&quot;_blank&quot; title=&quot;https://svelte.yayujs.com&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;中文文档&lt;/a&gt;站点。&lt;/p&gt;
&lt;p&gt;如果需要进阶学习，也可以入手我的小册&lt;a href=&quot;https://s.juejin.cn/ds/iycmvygA/&quot; target=&quot;_blank&quot; title=&quot;https://s.juejin.cn/ds/iycmvygA/&quot;&gt;《Svelte 开发指南》&lt;/a&gt;，语法篇、实战篇、原理篇三大篇章带你系统掌握 Svelte！&lt;/p&gt;
&lt;p&gt;欢迎围观我的&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fyayujs.com&quot; target=&quot;_blank&quot; title=&quot;https://yayujs.com&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;“网页版朋友圈”&lt;/a&gt;、加入&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fwww.yuque.com%2Fyayu%2Fnice-people%2Fxou8qr&quot; target=&quot;_blank&quot; title=&quot;https://www.yuque.com/yayu/nice-people/xou8qr&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;“冴羽·成长陪伴社群”&lt;/a&gt;，踏上&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Ft.zsxq.com%2FDfGhx&quot; target=&quot;_blank&quot; title=&quot;https://t.zsxq.com/DfGhx&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;“前端大佬成长之路”&lt;/a&gt;。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-1&quot;&gt;状态管理&lt;/h2&gt;
&lt;p&gt;如果您习惯于构建仅客户端的应用程序，在跨服务端和客户端的应用中进行状态管理可能会让人感到望而生畏。本节提供了一些避免常见陷阱的建议。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-2&quot;&gt;避免在服务端共享状态&lt;/h2&gt;
&lt;p&gt;浏览器是&lt;em&gt;有状态的&lt;/em&gt; — 状态在用户与应用程序交互时存储在内存中。相反，服务端是&lt;em&gt;无状态的&lt;/em&gt; — 响应的内容完全取决于请求的内容。&lt;/p&gt;
&lt;p&gt;从概念上来说是这样的。实际上，服务端通常是长期运行的，并由多个用户共享。因此，避免在共享变量中存储数据非常重要。例如，考虑以下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-js&quot; lang=&quot;js&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// @errors: 7034 7005&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;/// file: +page.server.js&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; user;

&lt;span class=&quot;hljs-comment&quot;&gt;/** &lt;span class=&quot;hljs-doctag&quot;&gt;@type&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;import(&#39;./$types&#39;).PageServerLoad&lt;/span&gt;} */&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;load&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; { user };
}

&lt;span class=&quot;hljs-comment&quot;&gt;/** &lt;span class=&quot;hljs-doctag&quot;&gt;@satisfies&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;import(&#39;./$types&#39;).Actions&lt;/span&gt;} */&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; actions = {
&lt;span class=&quot;hljs-attr&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; ({ request }) =&amp;gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; data = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; request.&lt;span class=&quot;hljs-title function_&quot;&gt;formData&lt;/span&gt;();

&lt;span class=&quot;hljs-comment&quot;&gt;// 永远不要这样做！&lt;/span&gt;
user = {
&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: data.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;name&#39;&lt;/span&gt;),
&lt;span class=&quot;hljs-attr&quot;&gt;embarrassingSecret&lt;/span&gt;: data.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;secret&#39;&lt;/span&gt;)
};
}
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;user&lt;/code&gt; 变量被所有连接到这个服务器的人共享。如果 Alice 提交了一个尴尬的秘密，而 Bob 在她之后访问页面，Bob 就会知道 Alice 的秘密。此外，当 Alice 当天晚些时候返回网站时，服务器可能已经重启，丢失了她的数据。&lt;/p&gt;
&lt;p&gt;相反，您应该使用 &lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fsvelte.yayujs.com%2Fdocs%2Fkit%2Fload%23Cookies&quot; target=&quot;_blank&quot; title=&quot;https://svelte.yayujs.com/docs/kit/load#Cookies&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;&lt;code&gt;cookies&lt;/code&gt;&lt;/a&gt; 对用户进行&lt;em&gt;认证&lt;/em&gt;，并将数据持久化到数据库中。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-3&quot;&gt;load 函数中不要有副作用&lt;/h2&gt;
&lt;p&gt;出于同样的原因，您的 &lt;code&gt;load&lt;/code&gt; 函数应该是&lt;em&gt;纯函数&lt;/em&gt; — 没有副作用（除了偶尔的 &lt;code&gt;console.log(...)&lt;/code&gt;）。例如，您可能会想在 &lt;code&gt;load&lt;/code&gt; 函数中写入 store 或全局状态，以便在组件中使用这个值：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-js&quot; lang=&quot;js&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/// file: +page.js&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// @filename: ambient.d.ts&lt;/span&gt;
declare &lt;span class=&quot;hljs-variable language_&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;$lib/user&#39;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;user&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;set&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value: any&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; };
}

&lt;span class=&quot;hljs-comment&quot;&gt;// @filename: index.js&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// ---cut---&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { user } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;$lib/user&#39;&lt;/span&gt;;

&lt;span class=&quot;hljs-comment&quot;&gt;/** &lt;span class=&quot;hljs-doctag&quot;&gt;@type&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;import(&#39;./$types&#39;).PageLoad&lt;/span&gt;} */&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;load&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;{ fetch }&lt;/span&gt;) {
&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; response = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;/api/user&#39;&lt;/span&gt;);

&lt;span class=&quot;hljs-comment&quot;&gt;// 永远不要这样做！&lt;/span&gt;
user.&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; response.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;与前面的例子一样，这将一个用户的信息放在了&lt;em&gt;所有&lt;/em&gt;用户共享的地方。相反，应该直接返回数据...&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-js&quot; lang=&quot;js&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/// file: +page.js&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;/** &lt;span class=&quot;hljs-doctag&quot;&gt;@type&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;import(&#39;./$types&#39;).PageServerLoad&lt;/span&gt;} */&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;load&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;{ fetch }&lt;/span&gt;) {
&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; response = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;/api/user&#39;&lt;/span&gt;);

+++&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {
&lt;span class=&quot;hljs-attr&quot;&gt;user&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; response.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;()
};+++
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;...然后将它传递给需要它的组件，或使用 &lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fsvelte.yayujs.com%2Fdocs%2Fkit%2Fload%23page.data&quot; target=&quot;_blank&quot; title=&quot;https://svelte.yayujs.com/docs/kit/load#page.data&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;&lt;code&gt;page.data&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果您不使用 SSR，那么就不会有意外将一个用户数据暴露给另一个用户的风险。但您仍然应该避免在 &lt;code&gt;load&lt;/code&gt; 函数中产生副作用 — 这样您的应用程序会更容易理解。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-4&quot;&gt;使用带上下文的状态和 stores&lt;/h2&gt;
&lt;p&gt;您可能会疑惑，如果我们不能使用全局状态，我们如何使用 &lt;code&gt;page.data&lt;/code&gt; 和其他 &lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fsvelte.yayujs.com%2Fdocs%2Fkit%2F%24app-state&quot; target=&quot;_blank&quot; title=&quot;https://svelte.yayujs.com/docs/kit/$app-state&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;app 状态&lt;/a&gt;（或 &lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fsvelte.yayujs.com%2Fdocs%2Fkit%2F%24app-stores&quot; target=&quot;_blank&quot; title=&quot;https://svelte.yayujs.com/docs/kit/$app-stores&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;app stores&lt;/a&gt;）。答案是 app 状态和 app stores 在服务端使用 Svelte 的 &lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fsvelte.yayujs.com%2Ftutorial%2Fsvelte%2Fcontext-api&quot; target=&quot;_blank&quot; title=&quot;https://svelte.yayujs.com/tutorial/svelte/context-api&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;context API&lt;/a&gt; — 状态（或 store）通过 &lt;code&gt;setContext&lt;/code&gt; 附加到组件树上，当您订阅时，通过 &lt;code&gt;getContext&lt;/code&gt; 检索它。我们可以用同样的方式处理我们自己的状态：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-svelte&quot; lang=&quot;svelte&quot;&gt;&amp;lt;!--- file: src/routes/+layout.svelte ---&amp;gt;
&amp;lt;script&amp;gt;
import { setContext } from &#39;svelte&#39;;

/** @type {{ data: import(&#39;./$types&#39;).LayoutData }} */
let { data } = $props();

// 将引用我们状态的函数
// 传递给上下文，供子组件访问
setContext(&#39;user&#39;, () =&amp;gt; data.user);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-svelte&quot; lang=&quot;svelte&quot;&gt;&amp;lt;!--- file: src/routes/user/+page.svelte ---&amp;gt;
&amp;lt;script&amp;gt;
import { getContext } from &#39;svelte&#39;;

// 从上下文中获取 user store
const user = getContext(&#39;user&#39;);
&amp;lt;/script&amp;gt;

&amp;lt;p&amp;gt;Welcome {user().name}&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;[!NOTE] 我们传递一个函数到 &lt;code&gt;setContext&lt;/code&gt; 以保持跨边界的响应性。在&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fsvelte.yayujs.com%2Fdocs%2Fsvelte%2F%24state%23Passing-state-into-functions&quot; target=&quot;_blank&quot; title=&quot;https://svelte.yayujs.com/docs/svelte/$state#Passing-state-into-functions&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;这里&lt;/a&gt;阅读更多相关信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;[!LEGACY]
您也可以使用 &lt;code&gt;svelte/store&lt;/code&gt; 中的 stores 来实现这一点，但在使用 Svelte 5 时，建议使用通用响应性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在通过 SSR 渲染页面时，在更深层次的页面或组件中更新基于上下文的状态值不会影响父组件中的值，因为在状态值更新时父组件已经被渲染完成。&lt;/p&gt;
&lt;p&gt;相比之下，在客户端（当启用 CSR 时，这是默认设置）这个值会被传播，层级更高的组件、页面和布局会对新值作出反应。因此，为了避免在水合过程中状态更新时值&quot;闪烁&quot;，通常建议将状态向下传递给组件，而不是向上传递。&lt;/p&gt;
&lt;p&gt;如果您不使用 SSR（并且可以保证将来也不需要使用 SSR），那么您可以安全地将状态保存在共享模块中，而无需使用 context API。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-5&quot;&gt;组件和页面状态会被保留&lt;/h2&gt;
&lt;p&gt;当您在应用程序中导航时，SvelteKit 会复用现有的布局和页面组件。例如，如果您有这样的路由...&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-svelte&quot; lang=&quot;svelte&quot;&gt;&amp;lt;!--- file: src/routes/blog/[slug]/+page.svelte ---&amp;gt;
&amp;lt;script&amp;gt;
/** @type {{ data: import(&#39;./$types&#39;).PageData }} */
let { data } = $props();

// 这段代码有 BUG！
const wordCount = data.content.split(&#39; &#39;).length;
const estimatedReadingTime = wordCount / 250;
&amp;lt;/script&amp;gt;

&amp;lt;header&amp;gt;
&amp;lt;h1&amp;gt;{data.title}&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Reading time: {Math.round(estimatedReadingTime)} minutes&amp;lt;/p&amp;gt;
&amp;lt;/header&amp;gt;

&amp;lt;div&amp;gt;{@html data.content}&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;...那么从 &lt;code&gt;/blog/my-short-post&lt;/code&gt; 导航到 &lt;code&gt;/blog/my-long-post&lt;/code&gt; 不会导致布局、页面和其他组件被销毁和重新创建。相反，&lt;code&gt;data&lt;/code&gt; 属性（以及 &lt;code&gt;data.title&lt;/code&gt; 和 &lt;code&gt;data.content&lt;/code&gt;）将会更新（就像任何其他 Svelte 组件一样），而且因为代码不会重新运行，像 &lt;code&gt;onMount&lt;/code&gt; 和 &lt;code&gt;onDestroy&lt;/code&gt; 这样的生命周期方法不会重新运行，&lt;code&gt;estimatedReadingTime&lt;/code&gt; 也不会重新计算。&lt;/p&gt;
&lt;p&gt;相反，我们需要使这个值变成&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fsvelte.yayujs.com%2Ftutorial%2Fsvelte%2Fstate&quot; target=&quot;_blank&quot; title=&quot;https://svelte.yayujs.com/tutorial/svelte/state&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;&lt;em&gt;响应式&lt;/em&gt;&lt;/a&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-svelte&quot; lang=&quot;svelte&quot;&gt;/// file: src/routes/blog/[slug]/+page.svelte
&amp;lt;script&amp;gt;
/** @type {{ data: import(&#39;./$types&#39;).PageData }} */
let { data } = $props();

+++let wordCount = $derived(data.content.split(&#39; &#39;).length);
let estimatedReadingTime = $derived(wordCount / 250);+++
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;[!NOTE] 如果您需要在导航后重新运行 &lt;code&gt;onMount&lt;/code&gt; 和 &lt;code&gt;onDestroy&lt;/code&gt; 中的代码，您可以分别使用 &lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fsvelte.yayujs.com%2Fdocs%2Fkit%2F%24app-navigation%23afterNavigate&quot; target=&quot;_blank&quot; title=&quot;https://svelte.yayujs.com/docs/kit/$app-navigation#afterNavigate&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;afterNavigate&lt;/a&gt; 和 &lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fsvelte.yayujs.com%2Fdocs%2Fkit%2F%24app-navigation%23beforeNavigate&quot; target=&quot;_blank&quot; title=&quot;https://svelte.yayujs.com/docs/kit/$app-navigation#beforeNavigate&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;beforeNavigate&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;像这样复用组件意味着侧边栏滚动状态等会被保留，您可以轻松地在变化的值之间实现动画效果。如果您确实需要在导航时完全销毁并重新挂载一个组件，您可以使用这种模式：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-svelte&quot; lang=&quot;svelte&quot;&gt;&amp;lt;script&amp;gt;
import { page } from &#39;$app/state&#39;;
&amp;lt;/script&amp;gt;

{#key page.url.pathname}
&amp;lt;BlogPost title={data.title} content={data.title} /&amp;gt;
{/key}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 data-id=&quot;heading-6&quot;&gt;在 URL 中存储状态&lt;/h2&gt;
&lt;p&gt;如果您有需要让状态能够在页面重新加载后依然保持，比如表格上的过滤器或排序规则，URL 搜索参数（如 &lt;code&gt;?sort=price&amp;amp;order=ascending&lt;/code&gt;）是存储它们的好地方。您可以把它们放在 &lt;code&gt;&amp;lt;a href=&quot;...&quot;&amp;gt;&lt;/code&gt; 或 &lt;code&gt;&amp;lt;form action=&quot;...&quot;&amp;gt;&lt;/code&gt; 属性中，或通过 &lt;code&gt;goto(&#39;?key=value&#39;)&lt;/code&gt; 以编程的方式设置它们。它们可以在 &lt;code&gt;load&lt;/code&gt; 函数中通过 &lt;code&gt;url&lt;/code&gt; 参数访问，在组件中通过 &lt;code&gt;page.url.searchParams&lt;/code&gt; 访问。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-7&quot;&gt;在快照中存储临时状态&lt;/h2&gt;
&lt;p&gt;某些 UI 状态，比如&quot;列表是否展开？&quot;，是可以丢弃的 — 如果用户导航离开或刷新页面，状态丢失并不要紧。在某些情况下，您&lt;em&gt;确实&lt;/em&gt;希望在用户导航到另一个页面并返回时数据能够保持，但将状态存储在 URL 或数据库中会显得过度。对于这种情况，SvelteKit 提供了 &lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fsvelte.yayujs.com%2Fdocs%2Fkit%2Fsnapshots&quot; target=&quot;_blank&quot; title=&quot;https://svelte.yayujs.com/docs/kit/snapshots&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;快照&lt;/a&gt;，让您可以将组件状态与历史记录条目关联起来。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-8&quot;&gt;Svelte 中文文档&lt;/h2&gt;
&lt;p&gt;点击查看中文文档 - &lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fsvelte.yayujs.com%2Fdocs%2Fkit%2Fstate-management&quot; target=&quot;_blank&quot; title=&quot;https://svelte.yayujs.com/docs/kit/state-management&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;SvelteKit 状态管理&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;系统学习 Svelte，欢迎入手小册&lt;a href=&quot;https://s.juejin.cn/ds/iycmvygA/&quot; target=&quot;_blank&quot; title=&quot;https://s.juejin.cn/ds/iycmvygA/&quot;&gt;《Svelte 开发指南》&lt;/a&gt;。语法篇、实战篇、原理篇三大篇章带你系统掌握 Svelte！&lt;/p&gt;
&lt;p&gt;此外我还写过 &lt;a href=&quot;https://juejin.cn/column/7035531575974592520&quot; target=&quot;_blank&quot; title=&quot;https://juejin.cn/column/7035531575974592520&quot;&gt;JavaScript 系列&lt;/a&gt;、&lt;a href=&quot;https://juejin.cn/column/7029490086710345742&quot; target=&quot;_blank&quot; title=&quot;https://juejin.cn/column/7029490086710345742&quot;&gt;TypeScript 系列&lt;/a&gt;、&lt;a href=&quot;https://juejin.cn/column/7142674773930147853&quot; target=&quot;_blank&quot; title=&quot;https://juejin.cn/column/7142674773930147853&quot;&gt;React 系列&lt;/a&gt;、&lt;a href=&quot;https://juejin.cn/column/7343569488744611849&quot; target=&quot;_blank&quot; title=&quot;https://juejin.cn/column/7343569488744611849&quot;&gt;Next.js 系列&lt;/a&gt;、&lt;a href=&quot;https://juejin.cn/column/7039526067891077151&quot; target=&quot;_blank&quot; title=&quot;https://juejin.cn/column/7039526067891077151&quot;&gt;冴羽答读者问&lt;/a&gt;等 14 个系列文章， 全系列文章目录：&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2FBlog&quot; target=&quot;_blank&quot; title=&quot;https://github.com/mqyqingfeng/Blog&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;github.com/mqyqingfeng…&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;欢迎围观我的&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fyayujs.com&quot; target=&quot;_blank&quot; title=&quot;https://yayujs.com&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;“网页版朋友圈”&lt;/a&gt;、加入&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fwww.yuque.com%2Fyayu%2Fnice-people%2Fxou8qr&quot; target=&quot;_blank&quot; title=&quot;https://www.yuque.com/yayu/nice-people/xou8qr&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;“冴羽·成长陪伴社群”&lt;/a&gt;，踏上&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Ft.zsxq.com%2FDfGhx&quot; target=&quot;_blank&quot; title=&quot;https://t.zsxq.com/DfGhx&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;“前端大佬成长之路”&lt;/a&gt;。&lt;/p&gt;</description><link>https://juejin.cn/post/7483331279658270770</link><guid isPermaLink="false">https://juejin.cn/post/7483331279658270770</guid><pubDate>Wed, 19 Mar 2025 13:36:17 GMT</pubDate><author>冴羽</author><category>前端</category><category>JavaScript</category><category>Svelte</category></item><item><title>刷刷题37（vue3的优化点）</title><description>&lt;h4 data-id=&quot;heading-0&quot;&gt;1. ‌&lt;strong&gt;Vue3 响应式原理中，Proxy 和 Reflect 是如何配合使用的？为何要结合 Reflect？&lt;/strong&gt; ‌&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;‌&lt;strong&gt;Proxy&lt;/strong&gt;‌ 用于拦截对象操作（如&amp;nbsp;&lt;code&gt;get&lt;/code&gt;、&lt;code&gt;set&lt;/code&gt;、&lt;code&gt;deleteProperty&lt;/code&gt;），‌&lt;strong&gt;Reflect&lt;/strong&gt;‌ 提供默认行为的方法（如&amp;nbsp;&lt;code&gt;Reflect.get&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;‌&lt;strong&gt;配合方式&lt;/strong&gt;‌：在 Proxy 的&amp;nbsp;&lt;code&gt;get&lt;/code&gt;/&lt;code&gt;set&lt;/code&gt;&amp;nbsp;等陷阱中，通过&amp;nbsp;&lt;code&gt;Reflect&lt;/code&gt;&amp;nbsp;执行原始操作，确保代理对象行为与原始对象一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; proxy = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Proxy&lt;/span&gt;(target, {
  &lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;target, key, receiver&lt;/span&gt;) {
    &lt;span class=&quot;hljs-title function_&quot;&gt;track&lt;/span&gt;(target, key); &lt;span class=&quot;hljs-comment&quot;&gt;// 依赖收集&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Reflect&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(target, key, receiver); &lt;span class=&quot;hljs-comment&quot;&gt;// 保持 this 正确指向&lt;/span&gt;
  },
  &lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;target, key, value, receiver&lt;/span&gt;) {
    &lt;span class=&quot;hljs-title function_&quot;&gt;trigger&lt;/span&gt;(target, key); &lt;span class=&quot;hljs-comment&quot;&gt;// 触发更新&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Reflect&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;(target, key, value, receiver);
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;‌&lt;strong&gt;为何用 Reflect&lt;/strong&gt;‌：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免直接操作目标对象导致&amp;nbsp;&lt;code&gt;this&lt;/code&gt;&amp;nbsp;指向错误（例如访问对象方法时，&lt;code&gt;this&lt;/code&gt;&amp;nbsp;应指向代理对象而非原对象）。&lt;/li&gt;
&lt;li&gt;兼容性更好，Reflect 方法返回布尔值（如&amp;nbsp;&lt;code&gt;Reflect.set&lt;/code&gt;&amp;nbsp;返回是否设置成功），方便错误处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-1&quot;&gt;2. ‌&lt;strong&gt;Vue3 的“静态节点提升”和“PatchFlag”如何优化 diff 算法？&lt;/strong&gt; ‌&lt;/h4&gt;
&lt;p&gt;‌&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;‌&lt;strong&gt;静态节点提升（Static Node Hoisting）&lt;/strong&gt; ‌：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译阶段将静态节点（无动态绑定的元素）提取到渲染函数外，生成一次后复用，避免 diff 时重复比较。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‌&lt;strong&gt;PatchFlag&lt;/strong&gt;‌：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在编译时为动态节点添加标记（如&amp;nbsp;&lt;code&gt;1&lt;/code&gt;&amp;nbsp;表示文本动态，&lt;code&gt;8&lt;/code&gt;&amp;nbsp;表示 props 动态），diff 时仅对比带标记的部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‌&lt;strong&gt;协同优化&lt;/strong&gt;‌：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态节点直接跳过 diff，动态节点通过 PatchFlag 缩小对比范围，整体复杂度从 O(n) 降低到接近 O(1) 的动态部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-2&quot;&gt;3. ‌&lt;strong&gt;如何实现 Vue 自定义渲染器（如渲染到 Canvas）？&lt;/strong&gt; ‌&lt;/h4&gt;
&lt;p&gt;‌&lt;strong&gt;步骤&lt;/strong&gt;‌：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用&amp;nbsp;&lt;code&gt;createRenderer&lt;/code&gt;&amp;nbsp;创建渲染器，提供自定义的&amp;nbsp;&lt;code&gt;createElement&lt;/code&gt;、&lt;code&gt;patchProp&lt;/code&gt;、&lt;code&gt;insert&lt;/code&gt;&amp;nbsp;等方法：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-typescript&quot; lang=&quot;typescript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { createRenderer } = &lt;span class=&quot;hljs-title class_&quot;&gt;Vue&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; renderer = &lt;span class=&quot;hljs-title function_&quot;&gt;createRenderer&lt;/span&gt;({
  &lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;/* 创建 Canvas 元素 */&lt;/span&gt; },
  &lt;span class=&quot;hljs-title function_&quot;&gt;patchProp&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;el, key, prev, next&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;/* 更新属性 */&lt;/span&gt; },
  &lt;span class=&quot;hljs-title function_&quot;&gt;insert&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;el, parent&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;/* 插入到 Canvas 层级 */&lt;/span&gt; }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在组件中使用&amp;nbsp;&lt;code&gt;renderer.createApp&lt;/code&gt;&amp;nbsp;替代默认的&amp;nbsp;&lt;code&gt;createApp&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ini&quot; lang=&quot;ini&quot;&gt;const &lt;span class=&quot;hljs-attr&quot;&gt;app&lt;/span&gt; = renderer.createApp(RootComponent)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
app.mount(&#39;&lt;span class=&quot;hljs-comment&quot;&gt;#canvas-container&#39;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;实现 Canvas 渲染逻辑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用&amp;nbsp;&lt;code&gt;requestAnimationFrame&lt;/code&gt;&amp;nbsp;批量更新，避免频繁重绘。&lt;/li&gt;
&lt;li&gt;将虚拟节点映射为 Canvas 的绘制指令（如&amp;nbsp;&lt;code&gt;drawRect&lt;/code&gt;、&lt;code&gt;drawText&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 data-id=&quot;heading-3&quot;&gt;4. ‌&lt;strong&gt;Composition API 中如何避免“响应式数据滥用”？&lt;/strong&gt; ‌&lt;/h4&gt;
&lt;p&gt;‌&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;‌&lt;strong&gt;合理选择 API&lt;/strong&gt;‌：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reactive&lt;/code&gt;：深响应式对象，适合复杂数据结构（如嵌套对象）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ref&lt;/code&gt;：包装基本类型，通过&amp;nbsp;&lt;code&gt;.value&lt;/code&gt;&amp;nbsp;访问，适用于独立值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shallowRef&lt;/code&gt;/&lt;code&gt;shallowReactive&lt;/code&gt;：浅层响应式，避免深层递归带来的性能损耗。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‌&lt;strong&gt;优化场景&lt;/strong&gt;‌：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大数组或只读数据：使用&amp;nbsp;&lt;code&gt;shallowRef&lt;/code&gt;&amp;nbsp;或&amp;nbsp;&lt;code&gt;markRaw&lt;/code&gt;&amp;nbsp;跳过代理。&lt;/li&gt;
&lt;li&gt;频繁更新的数据：使用&amp;nbsp;&lt;code&gt;ref&lt;/code&gt;&amp;nbsp;替代&amp;nbsp;&lt;code&gt;reactive&lt;/code&gt;，减少 Proxy 层级。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-4&quot;&gt;5. ‌&lt;strong&gt;高性能长列表滚动加载如何结合 Vue 和 Intersection Observer？&lt;/strong&gt; ‌&lt;/h4&gt;
&lt;p&gt;‌
‌&lt;strong&gt;关键思路&lt;/strong&gt;‌：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;‌&lt;strong&gt;虚拟列表&lt;/strong&gt;‌：仅渲染可见区域的 DOM 元素，通过&amp;nbsp;&lt;code&gt;transform&lt;/code&gt;&amp;nbsp;偏移模拟滚动。&lt;/li&gt;
&lt;li&gt;‌&lt;strong&gt;Intersection Observer&lt;/strong&gt;‌ 监听元素是否进入视口，动态加载数据：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-scss&quot; lang=&quot;scss&quot;&gt;const observer = new &lt;span class=&quot;hljs-built_in&quot;&gt;IntersectionObserver&lt;/span&gt;((entries) =&amp;gt; {
  if (entries.isIntersecting) {
    &lt;span class=&quot;hljs-built_in&quot;&gt;loadMore&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// 加载下一页数据&lt;/span&gt;
  }
});
observer&lt;span class=&quot;hljs-selector-class&quot;&gt;.observe&lt;/span&gt;(loaderRef.value); &lt;span class=&quot;hljs-comment&quot;&gt;// 监听“加载更多”元素&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;‌&lt;strong&gt;响应式优化&lt;/strong&gt;‌：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&amp;nbsp;&lt;code&gt;shallowRef&lt;/code&gt;&amp;nbsp;存储列表数据，避免深响应式开销。&lt;/li&gt;
&lt;li&gt;用&amp;nbsp;&lt;code&gt;v-memo&lt;/code&gt;（Vue3.2+）缓存已渲染的列表项，避免重复渲染。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 data-id=&quot;heading-5&quot;&gt;5. ‌&lt;strong&gt;Vue3 中 v-model 的自定义实现及 .sync 替代方案&lt;/strong&gt;‌&lt;/h4&gt;
&lt;p&gt;‌&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;‌&lt;strong&gt;v-model 原理&lt;/strong&gt;‌：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认绑定&amp;nbsp;&lt;code&gt;modelValue&lt;/code&gt;&amp;nbsp;prop 和&amp;nbsp;&lt;code&gt;update:modelValue&lt;/code&gt;&amp;nbsp;事件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-xml&quot; lang=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- 自定义组件 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Child&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;:modelValue&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt; @&lt;span class=&quot;hljs-attr&quot;&gt;update:modelValue&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;value = $event&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;‌&lt;strong&gt;等价语法&lt;/strong&gt;‌：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-vbnet&quot; lang=&quot;vbnet&quot;&gt;// 组件内部
&lt;span class=&quot;hljs-symbol&quot;&gt;props:&lt;/span&gt; [&lt;span class=&quot;hljs-comment&quot;&gt;&#39;modelValue&#39;],&lt;/span&gt;
&lt;span class=&quot;hljs-symbol&quot;&gt;emits:&lt;/span&gt; [&lt;span class=&quot;hljs-comment&quot;&gt;&#39;update:modelValue&#39;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;‌&lt;strong&gt;替代 .sync&lt;/strong&gt;‌：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vue3 移除了&amp;nbsp;&lt;code&gt;.sync&lt;/code&gt;，改用&amp;nbsp;&lt;code&gt;v-model:propName&lt;/code&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-xml&quot; lang=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Child&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;:title&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;pageTitle&quot;&lt;/span&gt; @&lt;span class=&quot;hljs-attr&quot;&gt;update:title&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;pageTitle = $event&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- 简写为 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Child&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;v-model:title&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;pageTitle&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;</description><link>https://juejin.cn/post/7483406014390222902</link><guid isPermaLink="false">https://juejin.cn/post/7483406014390222902</guid><pubDate>Wed, 19 Mar 2025 12:38:07 GMT</pubDate><author>拉不动的猪</author><category>前端</category><category>JavaScript</category><category>面试</category></item><item><title>刷刷题39（同一组件中的不同的标签页如何实现通信）</title><description>&lt;h3 data-id=&quot;heading-0&quot;&gt;实现组件内双标签页通信的常用方法&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-1&quot;&gt;1.&amp;nbsp;&lt;em&gt;‌&lt;strong&gt;LocalStorage + storage 事件&lt;/strong&gt;‌&lt;/em&gt;‌&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 标签页A发送数据&lt;/span&gt;
&lt;span class=&quot;hljs-variable language_&quot;&gt;localStorage&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;setItem&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;tabMsg&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;({ &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;update&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;新内容&#39;&lt;/span&gt; }));

&lt;span class=&quot;hljs-comment&quot;&gt;// 标签页B监听变化&lt;/span&gt;
&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;storage&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (event.&lt;span class=&quot;hljs-property&quot;&gt;key&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&#39;tabMsg&#39;&lt;/span&gt;) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; msg = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(event.&lt;span class=&quot;hljs-property&quot;&gt;newValue&lt;/span&gt;);
    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;收到消息:&#39;&lt;/span&gt;, msg.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;);
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;‌&lt;strong&gt;特点&lt;/strong&gt;‌&lt;/em&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持跨标签页通信，但&lt;em&gt;‌&lt;strong&gt;不会在当前触发页触发事件&lt;/strong&gt;‌&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;数据存储容量约5MB，适用于简单状态同步（如用户登录态）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-2&quot;&gt;2.&amp;nbsp;&lt;em&gt;‌&lt;strong&gt;BroadcastChannel API&lt;/strong&gt;‌&lt;/em&gt;‌&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ini&quot; lang=&quot;ini&quot;&gt;// 两标签页均执行（需同源）
const &lt;span class=&quot;hljs-attr&quot;&gt;channel&lt;/span&gt; = new BroadcastChannel(&lt;span class=&quot;hljs-string&quot;&gt;&#39;tab-channel&#39;&lt;/span&gt;)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;

// 标签页A发送消息
channel.postMessage({ action: &#39;sync&#39;, value: 123 })&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;

// 标签页B接收消息
&lt;span class=&quot;hljs-attr&quot;&gt;channel.onmessage&lt;/span&gt; = (e) =&amp;gt; {
  if (&lt;span class=&quot;hljs-attr&quot;&gt;e.data.action&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&#39;sync&#39;&lt;/span&gt;) {
    console.log(&#39;同步数据:&#39;, e.data.value)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
  }
}&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;‌&lt;strong&gt;优势&lt;/strong&gt;‌&lt;/em&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持&lt;em&gt;‌&lt;strong&gt;双向实时通信&lt;/strong&gt;‌&lt;/em&gt;，传输效率高于LocalStorage&lt;/li&gt;
&lt;li&gt;可创建多个独立频道，适用于复杂交互场景（如协同编辑）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-3&quot;&gt;3.&amp;nbsp;&lt;em&gt;‌&lt;strong&gt;SharedWorker 共享线程&lt;/strong&gt;‌&lt;/em&gt;‌&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ini&quot; lang=&quot;ini&quot;&gt;// 共享线程脚本（shared-worker.js）
&lt;span class=&quot;hljs-attr&quot;&gt;onconnect&lt;/span&gt; = (e) =&amp;gt; {
  const &lt;span class=&quot;hljs-attr&quot;&gt;port&lt;/span&gt; = e.ports&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;hljs-attr&quot;&gt;port.onmessage&lt;/span&gt; = (msg) =&amp;gt; {
    // 向所有连接端口广播消息
    port.postMessage(`转发: ${msg.data}`)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
  }&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
}&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;

// 标签页A/B连接线程
const &lt;span class=&quot;hljs-attr&quot;&gt;worker&lt;/span&gt; = new SharedWorker(&lt;span class=&quot;hljs-string&quot;&gt;&#39;shared-worker.js&#39;&lt;/span&gt;)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
worker.port.start()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
worker.port.postMessage(&#39;来自标签页A&#39;)&lt;span class=&quot;hljs-comment&quot;&gt;; &lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;worker.port.onmessage&lt;/span&gt; = (e) =&amp;gt; {
  console.log(&#39;收到广播:&#39;, e.data)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
}&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;‌&lt;strong&gt;适用场景&lt;/strong&gt;‌&lt;/em&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要&lt;em&gt;‌&lt;strong&gt;长时间维持连接&lt;/strong&gt;‌&lt;/em&gt;的复杂通信（如聊天室、实时协作）&lt;/li&gt;
&lt;li&gt;需处理浏览器兼容性问题（部分移动端浏览器支持较差）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-4&quot;&gt;4.&amp;nbsp;&lt;em&gt;‌&lt;strong&gt;Window.postMessage 跨窗口通信&lt;/strong&gt;‌&lt;/em&gt;‌&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 标签页A（父窗口）打开标签页B&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; childWindow = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;tabB.html&#39;&lt;/span&gt;);

&lt;span class=&quot;hljs-comment&quot;&gt;// 向子窗口发送消息&lt;/span&gt;
childWindow.&lt;span class=&quot;hljs-title function_&quot;&gt;postMessage&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;用户ID: 1001&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&#39;https://yourdomain.com&#39;&lt;/span&gt;);

&lt;span class=&quot;hljs-comment&quot;&gt;// 标签页B接收消息&lt;/span&gt;
&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;message&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (e.&lt;span class=&quot;hljs-property&quot;&gt;origin&lt;/span&gt; !== &lt;span class=&quot;hljs-string&quot;&gt;&#39;https://yourdomain.com&#39;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;父窗口消息:&#39;&lt;/span&gt;, e.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;注意事项&lt;/strong&gt;‌&lt;/em&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必须验证&lt;code&gt;origin&lt;/code&gt;防止跨站攻击&lt;/li&gt;
&lt;li&gt;适合&lt;em&gt;‌&lt;strong&gt;跨域通信&lt;/strong&gt;‌&lt;/em&gt;，但需明确窗口引用关系&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-id=&quot;heading-5&quot;&gt;方法对比与选型建议&lt;/h3&gt;








































&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;方法&lt;/th&gt;&lt;th&gt;实时性&lt;/th&gt;&lt;th&gt;数据复杂度&lt;/th&gt;&lt;th&gt;跨域支持&lt;/th&gt;&lt;th&gt;适用场景示例&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;LocalStorage&lt;/td&gt;&lt;td&gt;中等&lt;/td&gt;&lt;td&gt;简单键值对&lt;/td&gt;&lt;td&gt;同源&lt;/td&gt;&lt;td&gt;主题切换、用户状态同步‌58&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;BroadcastChannel&lt;/td&gt;&lt;td&gt;高&lt;/td&gt;&lt;td&gt;结构化数据&lt;/td&gt;&lt;td&gt;同源&lt;/td&gt;&lt;td&gt;实时表单协同、多Tab操作日志‌68&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SharedWorker&lt;/td&gt;&lt;td&gt;高&lt;/td&gt;&lt;td&gt;复杂数据流&lt;/td&gt;&lt;td&gt;同源&lt;/td&gt;&lt;td&gt;股票行情同步、多Tab数据计算‌6&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Window.postMessage&lt;/td&gt;&lt;td&gt;高&lt;/td&gt;&lt;td&gt;结构化数据&lt;/td&gt;&lt;td&gt;支持&lt;/td&gt;&lt;td&gt;跨域单点登录、跨应用通信‌46&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</description><link>https://juejin.cn/post/7483365598904352809</link><guid isPermaLink="false">https://juejin.cn/post/7483365598904352809</guid><pubDate>Wed, 19 Mar 2025 12:36:57 GMT</pubDate><author>拉不动的猪</author><category>前端</category><category>面试</category><category>JavaScript</category></item><item><title>面试题整合——html篇</title><description>&lt;h2 data-id=&quot;heading-0&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;下面介绍九个面试时碰到的关于html的面试题。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-1&quot;&gt;&lt;strong&gt;1. 行内元素和块级元素的特点&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-2&quot;&gt;&lt;strong&gt;行内元素（inline elements）&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;特点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不能设置 &lt;code&gt;width&lt;/code&gt;、&lt;code&gt;height&lt;/code&gt;，大小由内容决定。&lt;/li&gt;
&lt;li&gt;默认不会换行，多个行内元素在同一行显示。&lt;/li&gt;
&lt;li&gt;只能包裹文本或其他行内元素，不能包含块级元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;常见的行内元素：&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-3&quot;&gt;&lt;strong&gt;块级元素（block elements）&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;特点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;独占一行，默认宽度 &lt;code&gt;100%&lt;/code&gt;（除 &lt;code&gt;div&lt;/code&gt; 外）。&lt;/li&gt;
&lt;li&gt;可以设置 &lt;code&gt;width&lt;/code&gt;、&lt;code&gt;height&lt;/code&gt;，可以包含块级和行内元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;常见的块级元素：&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;h1&amp;gt;~&amp;lt;h6&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-4&quot;&gt;&lt;strong&gt;2. HTML5 新特性&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-5&quot;&gt;&lt;strong&gt;结构语义化标签&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt; 提升 SEO 和可读性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-6&quot;&gt;&lt;strong&gt;表单增强&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;input type=&quot;email | number | date | range&quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; 提供自动补全&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;output&amp;gt;&lt;/code&gt; 用于显示计算结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-7&quot;&gt;&lt;strong&gt;多媒体支持&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; 直接播放音频和视频。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; 画布绘图。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-8&quot;&gt;&lt;strong&gt;本地存储&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;localStorage&lt;/code&gt;：长期存储，数据不随浏览器关闭而丢失。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sessionStorage&lt;/code&gt;：仅会话存储，浏览器关闭即丢失。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-9&quot;&gt;&lt;strong&gt;WebSockets&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;实现&lt;strong&gt;实时通信&lt;/strong&gt;（如 Web 聊天、推送）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-10&quot;&gt;&lt;strong&gt;Geolocation API&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;获取用户地理位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-11&quot;&gt;&lt;strong&gt;3. 浮动（float）及清除浮动&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-12&quot;&gt;&lt;strong&gt;浮动的作用&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt; 使元素脱离文档流，常用于布局（如文字环绕图片）。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;hljs language-css&quot; lang=&quot;css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;img&lt;/span&gt; {
  &lt;span class=&quot;hljs-attribute&quot;&gt;float&lt;/span&gt;: left;
  &lt;span class=&quot;hljs-attribute&quot;&gt;margin-right&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10px&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-13&quot;&gt;&lt;strong&gt;如何清除浮动&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;详细见上篇文章：&lt;a href=&quot;https://juejin.cn/post/7482988000948584484&quot; target=&quot;_blank&quot; title=&quot;https://juejin.cn/post/7482988000948584484&quot;&gt;简单介绍清除浮动解决高度塌陷的四种方法✍🏻&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-14&quot;&gt;&lt;strong&gt;4. 网页端适配方案&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;流式布局&lt;/strong&gt;：使用 &lt;code&gt;width: %&lt;/code&gt; 使内容适应不同屏幕。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;媒体查询（Media Query）&lt;/strong&gt; ：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-css&quot; lang=&quot;css&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;@media&lt;/span&gt; (&lt;span class=&quot;hljs-attribute&quot;&gt;max-width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;600px&lt;/span&gt;) {
  &lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; {
    &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: lightblue;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;弹性布局（flexbox/grid）&lt;/strong&gt; ：使用 &lt;code&gt;display: flex&lt;/code&gt; 适配不同屏幕。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;rem/vw/vh&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-css&quot; lang=&quot;css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;html&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;16px&lt;/span&gt;; }
&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1rem&lt;/span&gt;; } &lt;span class=&quot;hljs-comment&quot;&gt;/* 适应不同设备 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-15&quot;&gt;&lt;strong&gt;5. 盒子模型&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;标准盒模型&lt;/strong&gt;：&lt;code&gt;width = content + padding + border + margin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IE 盒模型（&lt;code&gt;box-sizing: border-box;&lt;/code&gt;）&lt;/strong&gt; ：&lt;code&gt;width = content + padding + border&lt;/code&gt;（更方便布局）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-16&quot;&gt;&lt;strong&gt;6. 重排（Reflow）和重绘（Repaint）&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;重排（Reflow）&lt;/strong&gt; ：涉及 DOM 结构变化（影响布局）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;触发：添加/删除元素、&lt;code&gt;width&lt;/code&gt;、&lt;code&gt;height&lt;/code&gt;、&lt;code&gt;position&lt;/code&gt; 变化。&lt;/li&gt;
&lt;li&gt;解决方案：减少 DOM 操作、使用 &lt;code&gt;display: none&lt;/code&gt; 批量修改后再显示。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;重绘（Repaint）&lt;/strong&gt; ：仅涉及视觉更新（不影响布局）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;触发：&lt;code&gt;color&lt;/code&gt;、&lt;code&gt;background&lt;/code&gt; 变化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-17&quot;&gt;&lt;strong&gt;7. Float 布局&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;float: left/right&lt;/code&gt; 让元素左右浮动。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要清除浮动，避免父元素高度塌陷。&lt;/li&gt;
&lt;li&gt;影响后续元素的排版。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;hljs language-css&quot; lang=&quot;css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.container&lt;/span&gt; {
  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;500px&lt;/span&gt;;
}
&lt;span class=&quot;hljs-selector-class&quot;&gt;.left&lt;/span&gt; {
  &lt;span class=&quot;hljs-attribute&quot;&gt;float&lt;/span&gt;: left;
  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200px&lt;/span&gt;;
}
&lt;span class=&quot;hljs-selector-class&quot;&gt;.right&lt;/span&gt; {
  &lt;span class=&quot;hljs-attribute&quot;&gt;float&lt;/span&gt;: right;
  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200px&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-18&quot;&gt;&lt;strong&gt;8. Flex 布局&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;display: flex&lt;/code&gt; 让子元素可以自动调整布局，适用于&lt;strong&gt;响应式开发&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;hljs language-css&quot; lang=&quot;css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.container&lt;/span&gt; {
  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;
  &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;: space-between;
  &lt;span class=&quot;hljs-attribute&quot;&gt;align-items&lt;/span&gt;: center;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-19&quot;&gt;&lt;strong&gt;常见属性&lt;/strong&gt;&lt;/h4&gt;

























&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;属性&lt;/th&gt;&lt;th&gt;作用&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;flex-direction&lt;/code&gt;&lt;/td&gt;&lt;td&gt;方向（&lt;code&gt;row&lt;/code&gt;、&lt;code&gt;column&lt;/code&gt;）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;justify-content&lt;/code&gt;&lt;/td&gt;&lt;td&gt;主轴对齐方式（&lt;code&gt;center&lt;/code&gt;、&lt;code&gt;space-between&lt;/code&gt;、&lt;code&gt;space-around&lt;/code&gt;）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;align-items&lt;/code&gt;&lt;/td&gt;&lt;td&gt;交叉轴对齐方式（&lt;code&gt;stretch&lt;/code&gt;、&lt;code&gt;center&lt;/code&gt;）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;flex-wrap&lt;/code&gt;&lt;/td&gt;&lt;td&gt;是否换行（&lt;code&gt;nowrap&lt;/code&gt;、&lt;code&gt;wrap&lt;/code&gt;）&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-20&quot;&gt;&lt;strong&gt;9. Canvas&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; 是 HTML5 提供的 2D 画布，用于绘制图形、动画、数据可视化。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ini&quot; lang=&quot;ini&quot;&gt;&amp;lt;canvas &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myCanvas&quot;&lt;/span&gt; width=&lt;span class=&quot;hljs-string&quot;&gt;&quot;400&quot;&lt;/span&gt; height=&lt;span class=&quot;hljs-string&quot;&gt;&quot;400&quot;&lt;/span&gt;&amp;gt;&amp;lt;/canvas&amp;gt;
&amp;lt;script&amp;gt;
  const &lt;span class=&quot;hljs-attr&quot;&gt;canvas&lt;/span&gt; = document.getElementById(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myCanvas&quot;&lt;/span&gt;)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
  const &lt;span class=&quot;hljs-attr&quot;&gt;ctx&lt;/span&gt; = canvas.getContext(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2d&quot;&lt;/span&gt;)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;hljs-attr&quot;&gt;ctx.fillStyle&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
  ctx.fillRect(50, 50, 100, 100)&lt;span class=&quot;hljs-comment&quot;&gt;; // 绘制红色方块&lt;/span&gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-21&quot;&gt;&lt;strong&gt;Canvas API&lt;/strong&gt;&lt;/h4&gt;

































&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;方法&lt;/th&gt;&lt;th&gt;作用&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;fillRect(x, y, width, height)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;绘制矩形&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;strokeRect(x, y, width, height)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;绘制边框矩形&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;beginPath()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;开始路径&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;moveTo(x, y)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;移动画笔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;lineTo(x, y)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;画线&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;arc(x, y, r, start, end)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;画圆&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/7008dca14ea44fef97eb384e5a82aa0f~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgQXBoYXNpYQ==:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742988360&amp;amp;x-signature=aLCk9HKrZgyHBPAH9fhiynShzzg%3D&quot; alt=&quot;猫抓爱心.gif&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;</description><link>https://juejin.cn/post/7483349447029391395</link><guid isPermaLink="false">https://juejin.cn/post/7483349447029391395</guid><pubDate>Wed, 19 Mar 2025 11:26:00 GMT</pubDate><author>Aphasia</author><category>前端</category><category>面试</category><category>HTML</category></item><item><title>成为谷歌开发者专家，也成为儿时心中的侠客</title><description>&lt;blockquote&gt;
&lt;p&gt;💰&amp;nbsp;点进来就是赚到知识点！&lt;strong&gt;本文带你目击 GDE 的精神力量&lt;/strong&gt;，&lt;em&gt;点赞&lt;/em&gt;、&lt;em&gt;收藏&lt;/em&gt;、&lt;em&gt;评论&lt;/em&gt;更能促进消化吸收！&lt;/p&gt;
&lt;p&gt;⚠️&amp;nbsp;转载请联系作者取得授权。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/435ff0e7be4b4b189019c94de327cfe6~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgSmF4TmV4dA==:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742987581&amp;amp;x-signature=lgR25TWOZS7bhwCUUSMEXlWV7wM%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h2 data-id=&quot;heading-0&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;梦想终于开花结果！我现在是一名 Web 方向的谷歌开发者专家喽！&lt;/p&gt;
&lt;p&gt;在实现这个目标的难忘旅程里，我收获了许多宝贵的快乐，也经历了不少迷茫的时刻。经过不断地向外探寻、向内自省，我的视野比以往更清晰，也重拾了精神力量 💪🏻。&lt;/p&gt;
&lt;p&gt;我将用这篇文章来纪念这一阶段的所见所得、所感所悟，读完之后，你会惊异于「成为谷歌开发者专家」这件事，竟然对个人成长有着如此非凡的推动力！&lt;/p&gt;
&lt;p&gt;那么，就请播放一首 OneRepublic 的 《Counting Stars》，听我慢慢道来吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/d776e7b4e081446b904c1f6e6162de88~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgSmF4TmV4dA==:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742987581&amp;amp;x-signature=2WZhKNiOr59%2FxrBzOWvy2ERLi6c%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h2 data-id=&quot;heading-1&quot;&gt;我的 GDE 时间线&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;2023 年 3 月，我提交了申请成为「谷歌开发者专家」的报名表。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;按照 &lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fdevelopers.google.com%2Fcommunity%2Fexperts&quot; target=&quot;_blank&quot; title=&quot;https://developers.google.com/community/experts&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;Google 官方的定义&lt;/a&gt;，谷歌开发者专家（Google Developer Experts，简称 GDE）是一群技术专家和思想领袖，他们经验丰富、具有社交影响力，构成了一个全球范围的技术社区。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2023 年 10 月，我放弃了申请。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我发现我迷茫了。我知道 GDE 是什么，但我说不清我是什么。我想成为什么样的人？我想做成什么样的事？成为 GDE 之后，我就会不一样了吗？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2024 年 7 月，一个机缘巧合，让我重整旗鼓，重新开始备战 GDE。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;彼时，我参加了 Gemma Hackathon，和队友用 Web 技术开发全栈功能、宣讲我们的创意和思路。我感觉到，编程和分享的乐趣又重新注入到了我的心里。虽然没有完全消除迷茫，但这份纯粹的快乐让我又有了融入 GDE 的冲劲儿。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2025 年 3 月，我通过了资质审核和面试，正式成为了一名 Web GDE。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/e90562d81fd4473fbe5fefd39cc772ed~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgSmF4TmV4dA==:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742987581&amp;amp;x-signature=ug290NcY6YHNBcpForYRzdbDA54%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h2 data-id=&quot;heading-2&quot;&gt;为什么想成为 GDE&lt;/h2&gt;
&lt;p&gt;我非常向往融入这样一群人，他们作为 GDE 具有这样的共同特质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;专业：你需要对某个方向的 Google 技术有持续性的深耕，达到一定的专业水准。&lt;/li&gt;
&lt;li&gt;热爱：你需要有饱满的热情、充足的动力，去钻研、去探索技术。&lt;/li&gt;
&lt;li&gt;分享：你需要乐于把技术经验和思想分享给其他人，共同建设开发者社区。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在我最初提交申请时，我就已经明白，成为 GDE 的&lt;strong&gt;最通顺逻辑&lt;/strong&gt;是「我具备这些特质，所以我和 GDE 互相匹配」，而不是「为了成为 GDE，我必须刻意培养这些特质」。我热爱 Web 开发，笃信它的能量和价值；我有强烈的表达欲和分享欲，也非常享受输出内容的过程。这些都是我的快乐源泉。似乎 GDE 天然就很能吸引我，而我也很自然地能从 GDE 中找到归属感。&lt;/p&gt;
&lt;p&gt;比如，GDE 对与社区影响力有比较具体的、量化的要求：你需要具有一定数量、一定规模的公开演讲和文章产出。就我而言，每年的 I/O Extended、DevFest，我都会主动贡献主题演讲；我更新技术文章的频率基本保持在双周更甚至周更。无论我是否申请 GDE，我一直都在要求自己做出积极、优质的社区贡献。&lt;/p&gt;
&lt;p&gt;所以成为 GDE 并不是一个结果，而是对我正在做的社区贡献的一种认可，同时也将会是下个阶段里我对自己更高的要求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/d1c1b8a3b74f48c78c71bafcd3bf6ad1~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgSmF4TmV4dA==:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742987581&amp;amp;x-signature=rowi26xFkH7AxdA9%2BBhQBxGRHaU%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h2 data-id=&quot;heading-3&quot;&gt;寻找原动力的根源&lt;/h2&gt;
&lt;p&gt;现在回头看看，我大概是在小时候就种下了这些特质的种子。小时候，我非常崇拜古装剧里的大侠，钦佩他们武功盖世、乐善好施，最潇洒、最酷的姿态莫过于「事了拂衣去，深藏功与名」。于是我总喜欢用床单当披风，模仿他们行侠仗义的样子。也许就是在这里，崇尚纯粹、不计回报的侠客内核在我身上生根发芽，并引导着我以侠客的步法穿行过一个个人生阶段。&lt;/p&gt;
&lt;p&gt;大学时期，我担任了一个自由街舞团体的“二代掌门”，和队友们一起将技巧和经验倾囊相授给对街舞感兴趣的新人，传递跳舞的快乐；工作后，我被蓬勃发展的 Web 技术生态迷住了，从社区中汲取知识和经验，也把我踩过的坑、发现的窍门分享给他人，生怕再多一个人因相同原因产生重复劳动。&lt;/p&gt;
&lt;p&gt;后来我结识了许多来自谷歌开发者社区（Google Developer Group，简称 GDG）、掘金社区、开源社的朋友。他们对编程技术和开源精神怀有纯粹而诚挚的热爱。他们的投入与贡献，远超我现在达到的程度。他们的光芒投射到了我的身上，而我也看到他们身上映出了我自己的样子。&lt;/p&gt;
&lt;p&gt;慢慢地，我开始觉察到了自己的特质。这是一个缓慢的渐悟过程。而一个醍醐灌顶式的顿悟，则发生于 GDE 面试过程中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/80274f52b1b34b99a19694bbeeec050f~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgSmF4TmV4dA==:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742987581&amp;amp;x-signature=3x%2BfTqH4UZRWdA5TqYX%2FYiJwGiI%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h2 data-id=&quot;heading-4&quot;&gt;再回首，豁然开朗&lt;/h2&gt;
&lt;p&gt;我的面试官是 François Beaufort，迄今为止已经在 Chrome 团队工作了 12 年，目前主要负责 WebGPU 方面的工作。面试前我很紧张，在我心里，这必然是一场严苛的考试。没想到的是，François 非常亲切随和，像聊天一样和我交换想法，全程气氛非常轻松愉悦，完全不像我经历过的那些森严的求职面试。我感到我不是求职时被挑挑拣拣的牛马，而是在和 François 平等交流。&lt;/p&gt;
&lt;p&gt;而最打动我的，是 François 说自己是”a guy who loves Web technologies”。这句话一下子就激荡起了我胸中的巨大共鸣。而在此之前，我从未亲耳听过有人如此热烈、真诚地表达出对 Web 开发者这一身份的自我认同。&lt;/p&gt;
&lt;p&gt;François 让我看到了更多可能性：你是可以十几年如一日热爱 Web 技术的；你是可以非常开心地做自己喜欢的工作的；你是可以以自己是个 Web 开发者而自豪的；你是可以不用担心前端已死的……&lt;/p&gt;
&lt;p&gt;如果说，在面试之前，我是在渐悟中慢慢认识自己，那么在面试后，我是彻底而坚定地明确了一个信念：作为 Web 开发者，作为社区建设者，我热爱的、坚持的都是有价值的。我想起了小时候模仿过的大侠，想起他（她）们的碧血丹心、无私忘我。我蓦然发现，原来那披风我从未脱下过，原来那侠义精神已经铸成了我的人生信条，原来那些侠客没有消失，他们就是 GDG、掘金、开源社中的每一个人……&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/33fda7be797848619fca6c8162ebfd3c~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgSmF4TmV4dA==:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742987581&amp;amp;x-signature=kexNTMXEsOO0OW3Y0Q%2BUJNbT%2BkU%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h2 data-id=&quot;heading-5&quot;&gt;结语&lt;/h2&gt;
&lt;p&gt;电影《一代宗师》里这么讲：”习武之人有三个阶段，见自己、见天地、见众生。“ 我所习之武术就是 Web 技术。现在，我也是一位 GDE 侠客了，我在混沌中看清了我自己，看清了脚下的路。我会非常坚定、非常认真地奉行技术人的侠义之道 —— 开源精神，以一己之微光照亮开发者社区的天地和众生。&lt;/p&gt;
&lt;p&gt;“此一行，吾将如鸟上青天、鱼入大海。”&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;📣&amp;nbsp;我是 &lt;a href=&quot;https://juejin.cn/user/1134351730353207/columns&quot; target=&quot;_blank&quot; title=&quot;https://juejin.cn/user/1134351730353207/columns&quot;&gt;Jax&lt;/a&gt;，在畅游 Web 技术海洋的又一年，我仍然是坚定不移的 JavaScript 迷弟，Web 技术带给我太多乐趣。如果你也和我一样，欢迎&lt;em&gt;关注&lt;/em&gt;、&lt;em&gt;私聊&lt;/em&gt;！&lt;/p&gt;
&lt;/blockquote&gt;</description><link>https://juejin.cn/post/7483365598904123433</link><guid isPermaLink="false">https://juejin.cn/post/7483365598904123433</guid><pubDate>Wed, 19 Mar 2025 11:13:02 GMT</pubDate><author>JaxNext</author><category>前端</category><category>程序员</category><category>开源</category></item><item><title>express中间件</title><description>&lt;p&gt;&lt;img src=&quot;https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/3a2e8faa15dd4d4888367acbafcc2672~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bCP6bG85Ya75bmy:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742988631&amp;amp;x-signature=pSbvq4yVheUNYV0LAUFkWgNjvcY%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
&lt;strong&gt;什么是中间件&lt;/strong&gt;：&lt;code&gt;app.get(&quot;/news/:id&quot;, (req, res) =&amp;gt; {});&lt;/code&gt;中的&lt;code&gt;(req,res)=&amp;gt;{}&lt;/code&gt;就是一个express中间件&lt;/p&gt;
&lt;p&gt;当匹配到请求后，交给第一个处理函数来处理（给第三个参数next）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-js&quot; lang=&quot;js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; express = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;express&quot;&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; app = &lt;span class=&quot;hljs-title function_&quot;&gt;express&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// 创建一个express应用&lt;/span&gt;
&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(process.&lt;span class=&quot;hljs-property&quot;&gt;env&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;NODE_ENV&lt;/span&gt;);

app.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;/news&quot;&lt;/span&gt;,
    &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;req, res, next&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;handler1&quot;&lt;/span&gt;);
        &lt;span class=&quot;hljs-title function_&quot;&gt;next&lt;/span&gt;();
    },
    &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;req, res, next&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;handler2&quot;&lt;/span&gt;);
        &lt;span class=&quot;hljs-title function_&quot;&gt;next&lt;/span&gt;();
    }
);

app.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/news&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;req, res, next&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;handler3&quot;&lt;/span&gt;);
    &lt;span class=&quot;hljs-title function_&quot;&gt;next&lt;/span&gt;();
});

&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; port = &lt;span class=&quot;hljs-number&quot;&gt;5008&lt;/span&gt;;
app.&lt;span class=&quot;hljs-title function_&quot;&gt;listen&lt;/span&gt;(port, &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {
    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`server listen on &lt;span class=&quot;hljs-subst&quot;&gt;${port}&lt;/span&gt;`&lt;/span&gt;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;但是客户端得到的会是404&lt;/strong&gt;：因为在上边的代码中，最后一个请求之后没有请求了，但是后边也没有end，所有服务器响应没有结束会返回404&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中间件处理的细节
&lt;ul&gt;
&lt;li&gt;如果后续没有了中间件，express发现如果没有结束，会响应404&lt;/li&gt;
&lt;li&gt;如果中间件发生了错误，不会停止服务器，相当于调用了next（错误对象），寻找后续的错误处理中间件，如果没有后续的中间件，服务器会响应500。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;处理错误的中间件&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-js&quot; lang=&quot;js&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;exports&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, req, res, next&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; errObj = err &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt; ? err.&lt;span class=&quot;hljs-property&quot;&gt;message&lt;/span&gt; : err;
        &lt;span class=&quot;hljs-comment&quot;&gt;// 发生了错误&lt;/span&gt;
        res.&lt;span class=&quot;hljs-title function_&quot;&gt;status&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;(getMsg.&lt;span class=&quot;hljs-title function_&quot;&gt;getErr&lt;/span&gt;(errObj));
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        &lt;span class=&quot;hljs-title function_&quot;&gt;next&lt;/span&gt;();
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;使用&lt;/strong&gt;：&lt;code&gt;app.use(&quot;/news&quot;,require(&quot;处理错误的中间件的路径&quot;))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以匹配: /news 、/news/abc、 /news/ab/asd&lt;/p&gt;
&lt;p&gt;不能匹配：/n、/a、/、/newsabc&lt;/p&gt;
&lt;p&gt;中间件可以获取到请求的基地址&lt;code&gt;req.baseUrl&lt;/code&gt; 比如上边例子的基地址为&lt;code&gt;/news&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给静态资源&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-js&quot; lang=&quot;js&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;exports&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;req, res, next&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (req.&lt;span class=&quot;hljs-property&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;startsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/api&quot;&lt;/span&gt;)) {
        &lt;span class=&quot;hljs-comment&quot;&gt;// 说明你请求的是 api 接口&lt;/span&gt;
        &lt;span class=&quot;hljs-title function_&quot;&gt;next&lt;/span&gt;();
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        &lt;span class=&quot;hljs-comment&quot;&gt;// 说明你想要的是静态资源&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;) {
            res.&lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;静态资源&quot;&lt;/span&gt;);
        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;hljs-title function_&quot;&gt;next&lt;/span&gt;();
        }
    }
};
&lt;/code&gt;&lt;/pre&gt;</description><link>https://juejin.cn/post/7483346320872095794</link><guid isPermaLink="false">https://juejin.cn/post/7483346320872095794</guid><pubDate>Wed, 19 Mar 2025 10:30:47 GMT</pubDate><author>小鱼冻干</author><category>前端</category><category>Node.js</category><category>MySQL</category></item><item><title>Vue3组合式API从原理到实战终极指南</title><description>&lt;h2 data-id=&quot;heading-0&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;在Vue3从发布到今天，组合式API已成为现代前端开发的标杆设计模式。本文通过真实项目场景，深度解析组合式API的核心特性，配以完整代码示例，助你彻底掌握企业级Vue应用开发精髓。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-1&quot;&gt;一、为什么组合式API是Vue3的革命性升级？&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-2&quot;&gt;1.1 选项式API的痛点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;代码碎片化&lt;/strong&gt;：数据在&lt;code&gt;data&lt;/code&gt;，方法在&lt;code&gt;methods&lt;/code&gt;，计算属性在&lt;code&gt;computed&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;逻辑耦合&lt;/strong&gt;：1000行组件中找关联逻辑如同&quot;大海捞针&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;复用困难&lt;/strong&gt;：Mixins存在命名冲突和来源不清晰问题&lt;/p&gt;
&lt;p&gt;// 传统Options API（用户管理组件）export default {  data() {     return {       users: [],      filters: {},      pagination: {}    }  },  methods: {    fetchUsers() {/* 30行代码 &lt;em&gt;/},    deleteUser() {/&lt;/em&gt; 20行代码 &lt;em&gt;/},    exportReport() {/&lt;/em&gt; 15行代码 &lt;em&gt;/}  },  computed: {    filteredUsers() {/&lt;/em&gt; 依赖users和filters &lt;em&gt;/}  },  watch: {    filters: {/&lt;/em&gt; 复杂监听逻辑 */}  }}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-id=&quot;heading-3&quot;&gt;1.2 组合式API的三大优势&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;逻辑聚合&lt;/strong&gt;：按功能而非选项组织代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;完美复用&lt;/strong&gt;：函数式封装实现&quot;即插即用&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;类型支持&lt;/strong&gt;：天然适配TypeScript&lt;/p&gt;
&lt;p&gt;// 使用组合式API重构import { useUserFetch } from &#39;./composables/userFetch&#39;import { useTableFilter } from &#39;./composables/tableFilter&#39; export default {  setup() {    const { users, fetchUsers } = useUserFetch()    const { filteredData, filters } = useTableFilter(users)        return { users, filteredData, filters, fetchUsers }  }}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/f4c5a105fcfd4eb8837a917f357105f1~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5qCR5LiK5pyJ5Y-q56iL5bqP54y_:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983514&amp;amp;x-signature=2QyFuNUZtCAzKeJOg%2B6BcamYjoM%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h2 data-id=&quot;heading-4&quot;&gt;二、组合式API核心机制深度剖析（附完整代码）&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-5&quot;&gt;2.1 setup函数：新世界的入口&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-xml&quot; lang=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; @&lt;span class=&quot;hljs-attr&quot;&gt;click&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;increment&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;{{ count }}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;setup&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 编译器宏语法糖（无需显式返回）import { ref } from &#39;vue&#39; const count = ref(0)const increment = () =&amp;gt; count.value++&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-6&quot;&gt;关键细节：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;执行时机&lt;/strong&gt;：在&lt;code&gt;beforeCreate&lt;/code&gt;之前&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;参数解析&lt;/strong&gt;：&lt;code&gt;props&lt;/code&gt;是响应式的，不要解构！&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Context对象&lt;/strong&gt;：包含&lt;code&gt;attrs&lt;/code&gt;/&lt;code&gt;slots&lt;/code&gt;/&lt;code&gt;emit&lt;/code&gt;等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-id=&quot;heading-7&quot;&gt;2.2 ref() vs reactive() 选择指南&lt;/h3&gt;
&lt;p&gt;场景&lt;/p&gt;
&lt;p&gt;推荐方案&lt;/p&gt;
&lt;p&gt;原因&lt;/p&gt;
&lt;p&gt;基础类型数据&lt;/p&gt;
&lt;p&gt;ref()&lt;/p&gt;
&lt;p&gt;自动解包，模版使用更方便&lt;/p&gt;
&lt;p&gt;复杂对象/数组&lt;/p&gt;
&lt;p&gt;reactive()&lt;/p&gt;
&lt;p&gt;深层响应式，性能更优&lt;/p&gt;
&lt;p&gt;第三方类实例&lt;/p&gt;
&lt;p&gt;reactive()&lt;/p&gt;
&lt;p&gt;保持原型链方法&lt;/p&gt;
&lt;p&gt;跨组件状态共享&lt;/p&gt;
&lt;p&gt;ref() + provide/inject&lt;/p&gt;
&lt;p&gt;响应式追踪更可靠&lt;/p&gt;
&lt;h4 data-id=&quot;heading-8&quot;&gt;ref的底层原理&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-csharp&quot; lang=&quot;csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;myRef&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt; {  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;value&lt;/span&gt;()&lt;/span&gt; {      track(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&#39;value&#39;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// 依赖收集      return value    },    set value(newVal) {      value = newVal      trigger(this, &#39;value&#39;) // 触发更新    }  }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 data-id=&quot;heading-9&quot;&gt;三、高级实战技巧&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-10&quot;&gt;3.1 通用数据请求封装&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-vbnet&quot; lang=&quot;vbnet&quot;&gt;// useFetch.jsexport &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; useFetch = (url) =&amp;gt; {  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; data = ref(null)  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;error&lt;/span&gt; = ref(null)  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; loading = ref(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)   &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; fetchData = &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; () =&amp;gt; {    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {      loading.value = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; response = &lt;span class=&quot;hljs-built_in&quot;&gt;await&lt;/span&gt; axios.&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;(url)      data.value = response.data    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (err) {      &lt;span class=&quot;hljs-keyword&quot;&gt;error&lt;/span&gt;.value = err    } &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt; {      loading.value = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;    }  }   onMounted(fetchData)   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; { data, &lt;span class=&quot;hljs-keyword&quot;&gt;error&lt;/span&gt;, loading, retry: fetchData }} // 组件中使用&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { data: posts } = useFetch(&lt;span class=&quot;hljs-comment&quot;&gt;&#39;/api/posts&#39;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-11&quot;&gt;3.2 防抖搜索实战&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-matlab&quot; lang=&quot;matlab&quot;&gt;// useDebounceSearch.jsexport &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;useDebounceSearch&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(callback, delay = 500)&lt;/span&gt; {  &lt;span class=&quot;hljs-title&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;searchQuery&lt;/span&gt; = &lt;span class=&quot;hljs-title&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&#39;&#39;)&lt;/span&gt;  &lt;span class=&quot;hljs-title&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;timeoutId&lt;/span&gt; = &lt;span class=&quot;hljs-title&quot;&gt;null&lt;/span&gt;   &lt;span class=&quot;hljs-title&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(searchQuery, (newVal)&lt;/span&gt; =&amp;gt; {    &lt;span class=&quot;hljs-title&quot;&gt;clearTimeout&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(timeoutId)&lt;/span&gt;    &lt;span class=&quot;hljs-title&quot;&gt;timeoutId&lt;/span&gt; = &lt;span class=&quot;hljs-title&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(()&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(newVal)&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;delay&lt;/span&gt;)  })   &lt;span class=&quot;hljs-title&quot;&gt;return&lt;/span&gt; { &lt;span class=&quot;hljs-title&quot;&gt;searchQuery&lt;/span&gt; }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 data-id=&quot;heading-12&quot;&gt;四、性能优化最佳实践&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-13&quot;&gt;4.1 计算属性缓存策略&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-vbnet&quot; lang=&quot;vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; filteredList = computed(() =&amp;gt; {  // 通过闭包缓存中间结果  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; cache = {}  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (filterKey) =&amp;gt; {    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(cache[filterKey]) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; cache[filterKey]    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; cache[filterKey] = heavyCompute()  }})
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-14&quot;&gt;4.2 watchEffect() 的高级用法&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ini&quot; lang=&quot;ini&quot;&gt;// 立即执行+自动追踪依赖watchEffect(() =&amp;gt; {  const &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt; = fetchData(params.value)  console.log(&lt;span class=&quot;hljs-string&quot;&gt;&#39;依赖自动追踪:&#39;&lt;/span&gt;, data)}, {  flush: &lt;span class=&quot;hljs-string&quot;&gt;&#39;post&#39;&lt;/span&gt;, // DOM更新后执行  &lt;span class=&quot;hljs-literal&quot;&gt;on&lt;/span&gt;Track(e) { /* 调试追踪 */ }}) 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-15&quot;&gt;4.3 内存泄漏防范&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ini&quot; lang=&quot;ini&quot;&gt;// 定时器示例onMounted(() =&amp;gt; {  const &lt;span class=&quot;hljs-attr&quot;&gt;timer&lt;/span&gt; = setInterval(() =&amp;gt; {...}, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;)  &lt;span class=&quot;hljs-literal&quot;&gt;on&lt;/span&gt;Unmounted(() =&amp;gt; clearInterval(timer))})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 data-id=&quot;heading-16&quot;&gt;五、TypeScript终极适配方案&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-sql&quot; lang=&quot;sql&quot;&gt;interface &lt;span class=&quot;hljs-keyword&quot;&gt;User&lt;/span&gt; {  id: number  name: string} &lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt; 带类型的refconst &lt;span class=&quot;hljs-keyword&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;({ id: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, name: &lt;span class=&quot;hljs-string&quot;&gt;&#39;John&#39;&lt;/span&gt; }) &lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt; 组合函数类型定义export &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; useCounter(): {  count: &lt;span class=&quot;hljs-keyword&quot;&gt;Ref&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;number&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;  increment: () &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; void} {  &lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt; 实现...}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 data-id=&quot;heading-17&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;通过本篇文章的解析，相信你已经掌握了Vue3组合式API的核心精髓。建议结合&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fvuejs.org%2Fguide%2Fextras%2Fcomposition-api-faq.html%3Fspm%3Da2ty_o01.29997169.0.0.3d4d51713a5O0h&quot; target=&quot;_blank&quot; title=&quot;https://vuejs.org/guide/extras/composition-api-faq.html?spm=a2ty_o01.29997169.0.0.3d4d51713a5O0h&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;官方文档&lt;/a&gt; 和&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fwww.vuemastery.com%2F%3Fspm%3Da2ty_o01.29997169.0.0.3d4d51713a5O0h&quot; target=&quot;_blank&quot; title=&quot;https://www.vuemastery.com/?spm=a2ty_o01.29997169.0.0.3d4d51713a5O0h&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;Vue Mastery课程&lt;/a&gt; 进行系统化学习。欢迎在评论区分享您的实战经验！&lt;/p&gt;
&lt;h3 data-id=&quot;heading-18&quot;&gt;行业拓展&lt;/h3&gt;
&lt;p&gt;分享一个面向研发人群使用的前后端分离的低代码软件——&lt;a href=&quot;https://link.juejin.cn/?target=http%3A%2F%2Fwww.jnpfsoft.com%2F%3Ffrom%3Dxl&quot; target=&quot;_blank&quot; title=&quot;http://www.jnpfsoft.com/?from=xl&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;JNPF&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;基于 Java Boot/.Net Core双引擎，它适配国产化，支持主流数据库和操作系统，提供五十几种高频预制组件，内置了&lt;a href=&quot;https://link.juejin.cn/?target=http%3A%2F%2Fwww.jnpfsoft.com%2F%3Ffrom%3Dxl&quot; target=&quot;_blank&quot; title=&quot;http://www.jnpfsoft.com/?from=xl&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;常用的后台管理系统使用场景和实用模版&lt;/a&gt;，通过简单的拖拉拽操作，开发者能够高效完成软件开发，提高开发效率，减少代码编写工作。&lt;/p&gt;
&lt;p&gt;JNPF基于SpringBoot+Vue.js，提供了一个适合所有水平用户的低代码学习平台，无论是有经验的开发者还是编程新手，都可以在这里找到适合自己的学习路径。&lt;/p&gt;
&lt;p&gt;此外，JNPF支持全源码交付，完全支持根据公司、项目需求、业务需求进行二次改造开发或内网部署，具备多角色门户、登录认证、组织管理、角色授权、表单设计、流程设计、页面配置、报表设计、门户配置、代码生成工具等开箱即用的在线服务。&lt;/p&gt;</description><link>https://juejin.cn/post/7483345232954163238</link><guid isPermaLink="false">https://juejin.cn/post/7483345232954163238</guid><pubDate>Wed, 19 Mar 2025 10:05:14 GMT</pubDate><author>树上有只程序猿</author><category>前端</category></item><item><title>如何优化 React 组件？</title><description>&lt;h2 data-id=&quot;heading-0&quot;&gt;一、前言&lt;/h2&gt;
&lt;p&gt;该篇主要分享在 React 组件开发中，如何进行性能优化，会从三个维度进行分析。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;优化目的：分析到底是在优化什么？&lt;/li&gt;
&lt;li&gt;渲染机制：哪些机制会触发重新渲染？&lt;/li&gt;
&lt;li&gt;相关案例：分享一些的性能优化的技巧&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 data-id=&quot;heading-1&quot;&gt;二、优化目的&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-2&quot;&gt;2.1 为什么交互会卡顿？&lt;/h3&gt;
&lt;p&gt;下面这个例子，在页面打开时会执行一个运算量非常大的任务。用户在输入时，会出现卡住的感觉。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/3d8be47cb02e4f70af685ac19cbc1ef4~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ5p-Q5Lq65Li2:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983508&amp;amp;x-signature=OOS2AuJfQT8TJhqPM%2Fpz5dGaLfQ%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;来看一下性能分析图，该计算任务占用了 600 多毫秒的时间。导致这段时间内浏览器是没办法响应用户任何操作的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/c12257f499974ead94403b41f2231152~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ5p-Q5Lq65Li2:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983508&amp;amp;x-signature=%2BZEs0LX70ku7JVPe6OSN6Mgy1rw%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;原因是：主线程采用事件循环（Event Loop）机制来处理任务。&lt;strong&gt;当主线程被长时间（CPU密集型任务）占用时，任务队列中的任务（如用户输入、动画、网络请求回调等）无法及时得到处理&lt;/strong&gt;，导致这些任务被延迟执行。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-3&quot;&gt;2.2 React 卡顿的根因&lt;/h3&gt;
&lt;p&gt;现在知道了长时间的 CPU 密集型任务会导致卡顿时，那我们来分析一下，React 本身是怎么导致交互卡顿的。&lt;/p&gt;
&lt;p&gt;这里我们通过一个 demo 来演示&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-tsx&quot; lang=&quot;tsx&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ListItem&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;FC&lt;/span&gt;&amp;lt;{ &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;number&lt;/span&gt; }&amp;gt; = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;{ value }&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (
    &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;list-item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;Item {value}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  );
};

&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;App&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [items, setItems] = &lt;span class=&quot;hljs-title function_&quot;&gt;useState&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;({ &lt;span class=&quot;hljs-attr&quot;&gt;length&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt; }, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_, i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {
        &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: i,
      };
    });
  });

  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (
    &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;app&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;大量组件渲染性能演示&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;controls&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;组件数量: {items.length}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;
          &lt;span class=&quot;hljs-attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {
            setItems([...items, { value: items.length + 1 }]);
          }}
        &amp;gt;
          添加一条数据
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;list-container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
        {items.map((item) =&amp;gt; (
          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ListItem&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{item.value}&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{item.value}&lt;/span&gt; /&amp;gt;&lt;/span&gt;
        ))}
      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;先来看首次渲染 10 w 个组件，React 框架本身的执行逻辑需要 600 ms+（主要是创建 Fiber 树的过程）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/784e1219c1f44bebaf165653d7953af9~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ5p-Q5Lq65Li2:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983508&amp;amp;x-signature=TMRBYFISLmyo0F%2FdyHsFyUq1vQM%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;上面的代码 demo，如果不主动去优化，每次点击“添加一条数据” 都会触发 500 ms+ 的一个执行耗时，这个时间内浏览器将无法及时响应用户的操作（遍历 Fiber 树进行更新的计算）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/f0f74adadad44a4aabd08384ab8811ad~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ5p-Q5Lq65Li2:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983508&amp;amp;x-signature=epzLoZxXnoecePnSMOqV2PozTCA%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果给 ListItem 加上 React.memo，耗时将会缩减到 100 ms +（主要是因为 Fiber 遍历过程中跳过了大部门的计算）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/c18e722380c64e47a9c541e03eda5654~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ5p-Q5Lq65Li2:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983508&amp;amp;x-signature=V4CsLhZnokuyenrhIlHuEhib0M8%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以使用 React 框架，造成用户交互卡顿的根因是：状态更新时，大量 Fiber 的计算导致主线程一直被占用（因为 React 会从根节点开始全量的遍历），导致浏览器无法及时响应用户的操作。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-4&quot;&gt;2.3 优化思路&lt;/h3&gt;
&lt;p&gt;核心优化思路就是&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;减少渲染的次数：减少这种大量的递归计算的触发&lt;/li&gt;
&lt;li&gt;控制更新粒度：跳过一些不必要的递归&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 data-id=&quot;heading-5&quot;&gt;三、渲染机制&lt;/h2&gt;
&lt;p&gt;首先需要知道，哪些机制会让组件重新渲染。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-6&quot;&gt;1.1 setState&lt;/h3&gt;
&lt;p&gt;当组件内部通过 &lt;code&gt;setState&lt;/code&gt; 更新状态时，会触发整体的重新渲染。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/c642f65ec0d54d4f997d8c3e914c0897~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ5p-Q5Lq65Li2:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983508&amp;amp;x-signature=FaHgXDfSQH60K4KkZgvYmAaZNvA%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h3 data-id=&quot;heading-7&quot;&gt;2. &lt;strong&gt;父组件重新渲染&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;即使子组件的 state 未变化，父组件的重新渲染也会导致所有子组件重新渲染。这是因为 React 默认以组件树为单位进行更新。子组件的 props 变化本质上是父组件重新渲染的结果，而非直接原因。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/199b19b3503a45f3a559a96a93e5ce9c~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ5p-Q5Lq65Li2:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983508&amp;amp;x-signature=cijV87Nx1QIR6ISxKImn4M8A1ek%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h3 data-id=&quot;heading-8&quot;&gt;3. &lt;strong&gt;Context 变化&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;当组件通过 &lt;code&gt;useContext&lt;/code&gt; 订阅的 Context 值变化时，所有依赖该 Context 的组件会重新渲染。即使组件仅使用 Context 中的部分数据，只要 Context 整体更新，所有订阅组件都会重新渲染。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/dbeacb47d41545238495061e2f89e5bf~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ5p-Q5Lq65Li2:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983508&amp;amp;x-signature=e0AT9ioGJKFZqrxm%2BNhLVuETmO8%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h3 data-id=&quot;heading-9&quot;&gt;4. &lt;strong&gt;forceUpdate&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;通过类组件的 &lt;code&gt;forceUpdate()&lt;/code&gt; 方法或自定义 Hook（如 &lt;code&gt;useForceUpdate&lt;/code&gt;）可强制触发重新渲染，但通常不推荐使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/fcd38068191a4ada8d890e988dbf1ba1~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ5p-Q5Lq65Li2:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983508&amp;amp;x-signature=MHgTE5wEaL7ZFTXL5oBp22762Cs%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h3 data-id=&quot;heading-10&quot;&gt;5. &lt;strong&gt;Hooks 内部变化&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Hooks 的状态或依赖变化可能触发重新渲染，例如：&lt;br&gt;
• &lt;code&gt;useEffect&lt;/code&gt; 依赖项变化后的副作用执行可能导致父组件状态更新。&lt;br&gt;
• 自定义 Hooks 中状态变化会传播到宿主组件。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-11&quot;&gt;四、具体方案&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-12&quot;&gt;4.1 减少更新&lt;/h3&gt;
&lt;p&gt;重新渲染的根源是因为触发了状态的更新。下面的案例，它忽略了 idNumber 并不需要渲染，只是在提交请求时才会用到。这样用户在修改 idNumber 时就会造成不必要的更新。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/89a677d3939549eb8815bc06be3b2108~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ5p-Q5Lq65Li2:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983508&amp;amp;x-signature=bwfAjwQD6GiYXTuZGYHGmXw1nD8%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以像不需要渲染，但需要频繁修改的数据，可以用 let 变量或者 ref 进行保存。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/409a92e56ac74225ae8c4df80b91e189~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ5p-Q5Lq65Li2:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983508&amp;amp;x-signature=y9ti%2FUegvqIiOUUzoBx2KzTr5Nk%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;还有一个注意点是，在 react 18 版本之前，异步任务（setTimeout、promise）下的 setState 是没有批处理优化的。下面的代码，调用两次 setState 都会触发组件的重新渲染。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/b9455681124846db8a44ad566c3f89b3~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ5p-Q5Lq65Li2:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983508&amp;amp;x-signature=97QAcFUqUvY6Z6mjDmwiOcrwu%2Fw%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;比较好的办法就是，通过 useReducer 将 state 合并&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/4a73f789cc2946159f71fbf6a695d1cd~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ5p-Q5Lq65Li2:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983508&amp;amp;x-signature=%2B4ShMtsbWN0dyQhfpfaCUKQkDZQ%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h3 data-id=&quot;heading-13&quot;&gt;4.2 合理使用 Memo&lt;/h3&gt;
&lt;p&gt;函数组件使用 Memo（类组件使用 shouldComponentUpdate 来跳过不必要的更新），配合一些比较的方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/970d6e3be4e445f9b681d2dd1cb97ab2~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ5p-Q5Lq65Li2:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983508&amp;amp;x-signature=e5st48mQXRRvxjaErc4BaiWXncc%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;关于逻辑计算的 memo，除非它真的非常耗时，不然不建议使用 useMemo 去进行优化，因为可能适得其反。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/859c1d27f9be4a75ab7758271305b02a~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ5p-Q5Lq65Li2:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983508&amp;amp;x-signature=nOMYYM5QJW7%2FpQLFTCS%2F5n00cqo%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h3 data-id=&quot;heading-14&quot;&gt;4.3 传参优化&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;函数参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面的代码，每次 count 更新都会导致子组件更新，因为每次渲染都会创建一个新的匿名函数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/12bb3a18a07c4039a08c307fd87baeb6~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ5p-Q5Lq65Li2:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983508&amp;amp;x-signature=90oQNlFZRyfuyZXgFdUXbRkFi1I%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;需要对函数参数进行优化，通过 useCallback 固定函数的引用地址。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/89945f017df54a08a59f876c41bb8eac~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ5p-Q5Lq65Li2:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983508&amp;amp;x-signature=zhd0mE%2FYUhximEH9TbZrSnKncwg%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对象参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面的案例中，每次更新 num，都会导致 themeContext.Provider 下面消费了 context 组件全部重新更新。因为每次渲染，都会重新创建一个新的对象传递给 value。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/6832022178f0422481169c159c33ec0a~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ5p-Q5Lq65Li2:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983508&amp;amp;x-signature=GHKF50PczBFWWYw4uWV0p3M0mj8%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;需要通过 useMemo 进行优化&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/723114b22488483f946df4c1bf8aa149~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ5p-Q5Lq65Li2:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983508&amp;amp;x-signature=wG58AU7Ros9hU05rlDveGIUI6ok%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h3 data-id=&quot;heading-15&quot;&gt;4.4 长列表优化&lt;/h3&gt;
&lt;p&gt;虚拟列表的核心思想是仅渲染可视区域内的列表项，而非一次性渲染所有列表项。这能显著减少 DOM 节点数量，提升性能。你可以使用 &lt;code&gt;react-virtualized&lt;/code&gt; 或者 &lt;code&gt;react-window&lt;/code&gt; 这类库来实现虚拟列表。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/1ae7c27b1a0245a4bf481e5385ed6f11~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ5p-Q5Lq65Li2:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983508&amp;amp;x-signature=mWi3jMXZPMyy4OnZnVv%2FtqsoS%2BY%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h3 data-id=&quot;heading-16&quot;&gt;4.5 Context 注意事项&lt;/h3&gt;
&lt;p&gt;在下面案例中，无论是 theme 更新，还是 num 更新，都会导致另外一个组件被迫更新。原因是当 &lt;code&gt;Provider&lt;/code&gt; 的 &lt;code&gt;value&lt;/code&gt; 属性发生变化时，React 都会将这个变化广播给所有订阅了该 Context 的组件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/76f8f764951846fdaf79f7186f8146a6~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ5p-Q5Lq65Li2:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983508&amp;amp;x-signature=xhkBCe95SD%2BIuYjIHDKHUz%2F06bY%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;有两个解决办法，一是尽可能将 Context 拆分的更细。二是使用 Zustand 这样的第三方库。&lt;/p&gt;
&lt;p&gt;还有就是，避免消费组件获取 Provider 的层级太深，因为通过 useContext 获取值，它是一个向上不断查询的过程，过深的组件层级会造成不必要的性能浪费。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/ae2cda4ea26f4a15a9034f44a1a6f490~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ5p-Q5Lq65Li2:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983508&amp;amp;x-signature=czhEdKbcLWNvHo9kRnJ8RNk3aaU%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h2 data-id=&quot;heading-17&quot;&gt;五、总结&lt;/h2&gt;
&lt;p&gt;React 渲染时会进行大量的 Fiber 计算逻辑。减少状态的更新，控制更新的粒度是 React 优化的核心。平时多多注意编码的习惯，会大大提升应用的性能。&lt;/p&gt;</description><link>https://juejin.cn/post/7483345232954146854</link><guid isPermaLink="false">https://juejin.cn/post/7483345232954146854</guid><pubDate>Wed, 19 Mar 2025 10:05:08 GMT</pubDate><author>唐某人丶</author><category>前端</category><category>前端框架</category><category>React.js</category></item><item><title>如何用AI工具设计出令人惊艳的页面（附截图）</title><description>&lt;p&gt;话不多说，先贴最终实现的效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/148a0116a77c43348e39f32f3701335a~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg55m-5oWV5aSn5LiJ6KeS:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983163&amp;amp;x-signature=MKKeSnAkbC0BJnfVW6axfAHiga4%3D&quot; alt=&quot;161742371872_.pic.jpg&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/84da60547a8c44ccaadddbe0cc217185~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg55m-5oWV5aSn5LiJ6KeS:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983163&amp;amp;x-signature=wmCy9r7%2B2njCAfkzuiNj5halzwk%3D&quot; alt=&quot;171742371873_.pic.jpg&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/699a831bb65945db9229f35a27ca9c65~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg55m-5oWV5aSn5LiJ6KeS:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983163&amp;amp;x-signature=jInhZOwmNsi0crLqYPw5jOMMccU%3D&quot; alt=&quot;181742371873_.pic.jpg&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/4d1e9be7520a4166bfc5cecb9bdd331c~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg55m-5oWV5aSn5LiJ6KeS:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983163&amp;amp;x-signature=lDWvJLimarxR00L%2F9RlsIBzhZ0w%3D&quot; alt=&quot;191742371874_.pic.jpg&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/34415e416acc43c486d4dc65ca52ed75~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg55m-5oWV5aSn5LiJ6KeS:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983163&amp;amp;x-signature=n2pWCjK3sGlAHA6YEJS1QZlF0NM%3D&quot; alt=&quot;201742371874_.pic.jpg&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h2 data-id=&quot;heading-0&quot;&gt;AI 驱动的 UI 代码生成工具&lt;/h2&gt;
&lt;p&gt;在这里推荐几个主流的 UI 代码生成网站：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fv0.dev&quot; target=&quot;_blank&quot; title=&quot;https://v0.dev&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;v0.dev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Freaddy.ai&quot; target=&quot;_blank&quot; title=&quot;https://readdy.ai&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;readdy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Flovable.dev&quot; target=&quot;_blank&quot; title=&quot;https://lovable.dev&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;lovable&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上述网站都能&lt;strong&gt;通过简单的文本提示和截图快速生成高质量的代码&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;本人使用比较多的是 &lt;code&gt;v0.dev&lt;/code&gt; 和 &lt;code&gt;readdy&lt;/code&gt;，&lt;code&gt;v0.dev&lt;/code&gt; 生成 React 代码，而 &lt;code&gt;readdy&lt;/code&gt; 更为强大可以在新建项目时指定技术栈。如果是开发微信小程序之类的项目，强烈推荐使用 &lt;code&gt;readdy&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/1cefe578f43b4e458da2393adf2e030a~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg55m-5oWV5aSn5LiJ6KeS:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983163&amp;amp;x-signature=ZyU%2Fi16zg4v8nPyNLln%2BiL9oMoU%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;以下是三个 AI 设计/开发工具的对比分析：&lt;/p&gt;









































&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;对比维度&lt;/strong&gt;&lt;/th&gt;&lt;th&gt;&lt;strong&gt;v0.dev&lt;/strong&gt;&lt;/th&gt;&lt;th&gt;&lt;strong&gt;Readdy&lt;/strong&gt;&lt;/th&gt;&lt;th&gt;&lt;strong&gt;Lovable&lt;/strong&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;核心功能&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;生成 React 前端代码，支持通过提示词或图像优化界面设计&lt;/td&gt;&lt;td&gt;生成 Figma 级设计稿+前端代码，支持自然语言对话优化&lt;/td&gt;&lt;td&gt;通过对话生成全栈 Web 应用，支持无代码开发和一键部署&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;技术栈&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;React、TypeScript、Tailwind CSS&lt;/td&gt;&lt;td&gt;支持多种前端框架（如 React/Vue），生成响应式代码&lt;/td&gt;&lt;td&gt;生成 React 代码，但提供可编辑的代码所有权&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;快速构建高保真网页 UI 组件，适合前端开发者和设计师协作&lt;/td&gt;&lt;td&gt;从产品需求到设计+代码的全链路生成，适合产品团队和创业者&lt;/td&gt;&lt;td&gt;无代码经验者创建网站/应用，快速验证想法&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;独特优势&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;1. 支持图像驱动的设计优化&lt;br&gt;2. 与 Vercel 生态深度集成&lt;/td&gt;&lt;td&gt;1. Figma 级设计质量&lt;br&gt;2. 实时协作与版本控制&lt;/td&gt;&lt;td&gt;1. 代码完全归属用户&lt;br&gt;2. 一键部署到云端&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;输出形式&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;可编辑的 React 组件代码+实时预览&lt;/td&gt;&lt;td&gt;设计效果预览 + 前端代码（不可编辑）&lt;/td&gt;&lt;td&gt;完整的 Web 应用（前端+后端基础逻辑）&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 data-id=&quot;heading-1&quot;&gt;实际使用经验&lt;/h3&gt;
&lt;p&gt;就我的使用经验来说，v0.dev 和 Readdy 生成的代码通常是项目的部分组件代码，下载后需要集成到现有项目中。这两个工具适合已经搭建好架构的前端项目。而 Lovable 则可以实现完整应用的无代码开发，适合从零开始的项目。&lt;/p&gt;
&lt;p&gt;附带一些截图：&lt;/p&gt;
&lt;p&gt;v0.dev：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/9c4481da880042a29fa1ffa31ebd391d~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg55m-5oWV5aSn5LiJ6KeS:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983163&amp;amp;x-signature=feQGjzxLSYF5fpQi5CH7eEDq7mM%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;readdy：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/3ea09c6295764139bc7f92b50be2f68f~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg55m-5oWV5aSn5LiJ6KeS:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983163&amp;amp;x-signature=de7vltc4zDz%2F7b0JyqUEauvRYEE%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;lovable：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/d98cdbdc3fd841589d5c24907e7204c8~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg55m-5oWV5aSn5LiJ6KeS:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742983163&amp;amp;x-signature=JFQbMZ3aCxcyc4Sg3Lq5vwzlsMo%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h2 data-id=&quot;heading-2&quot;&gt;AI 增强型 IDE&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-3&quot;&gt;推荐使用：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Cursor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Trae&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;Cursor&lt;/code&gt; 和 &lt;code&gt;Trea&lt;/code&gt; 都是基于 AI 驱动的代码编辑器，基于 &lt;code&gt;VS Code&lt;/code&gt; 二次开发，支持自然语言生成代码和错误修复。&lt;/p&gt;
&lt;p&gt;主要特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内置强大的代码生成和补全功能&lt;/li&gt;
&lt;li&gt;支持自然语言代码重构和优化&lt;/li&gt;
&lt;li&gt;智能错误修复和代码解释&lt;/li&gt;
&lt;li&gt;与 GPT-4 模型深度集成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果对上面网站生成的效果不满意，就可以让 AI IDE 使用 &lt;code&gt;Tailwind CSS&lt;/code&gt; 优化 UI 效果。这里贴下我日常使用的 &lt;code&gt;prompt&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;优化整体页面设计和视觉效果，符合 IOS 设计规范，技术栈为：TailwindCSS
页面调整为 xx 布局，xxx 色系，整体风格年轻化
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-4&quot;&gt;提示词技巧&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;明确指定技术栈和设计规范&lt;/li&gt;
&lt;li&gt;描述具体的布局和视觉需求&lt;/li&gt;
&lt;li&gt;指定响应式行为&lt;/li&gt;
&lt;li&gt;提供参考示例或截图&lt;/li&gt;
&lt;li&gt;说明交互需求和状态变化&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 data-id=&quot;heading-5&quot;&gt;AI 时代下 Tailwind CSS 技术栈的必要性&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-6&quot;&gt;友好的结构化特性&lt;/h3&gt;
&lt;p&gt;Tailwind CSS 的原子化类名（如&lt;code&gt;p-4&lt;/code&gt;、&lt;code&gt;text-blue-500&lt;/code&gt;）具有高度结构化特征，这种&lt;strong&gt;语义明确、可组合性强的语法&lt;/strong&gt;天然适配 AI 的代码生成逻辑。&lt;/p&gt;
&lt;p&gt;而使用原生 CSS 时，元素样式可能受全局、祖先级元素、多种选择器等层级的样式规则影响，这对 LLM 而言意味着具体信息分散在项目的多个角落，需要消费、理解更多上下文才能推导出正确的结果。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-html&quot; lang=&quot;html&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- Tailwind CSS (AI友好) --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;p-4 bg-blue-500 rounded-lg shadow-md hover:bg-blue-600&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text-xl font-bold text-white&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;标题&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- 传统CSS (AI理解挑战更大) --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;card&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;card-title&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;标题&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-7&quot;&gt;代码维护性&lt;/h3&gt;
&lt;p&gt;AI 生成的 Tailwind 代码天然具备低耦合性，类名的原子化特性使得样式修改不会引发连锁反应，符合&quot;长期可维护性&quot;要求。这种特性也使得迭代和调整更加容易，无需担心破坏现有样式。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-8&quot;&gt;工具链整合&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;v0.dev&lt;/code&gt;、&lt;code&gt;Readdy&lt;/code&gt; 等主流 AI 代码生成平台都选择了 &lt;code&gt;Tailwind CSS&lt;/code&gt; 作为默认样式方案，这种深度整合进一步强化了 &lt;code&gt;Tailwind&lt;/code&gt; 在 AI 开发生态中的地位。这些工具通常能生成高质量、符合最佳实践的 Tailwind 代码，减少了手动调整的需要。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-9&quot;&gt;实际效果和总结&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;：只要结合使用 &lt;code&gt;AI IDE&lt;/code&gt; 和 &lt;code&gt;v0.dev&lt;/code&gt;、&lt;code&gt;readdy&lt;/code&gt; 等网站就能实现不俗的效果&lt;/p&gt;
&lt;p&gt;打个小小的广告：微信搜索「&lt;strong&gt;情感投票站&lt;/strong&gt;」亲身体验下 AI 设计出来的效果样式！&lt;/p&gt;
&lt;p&gt;「&lt;strong&gt;情感投票站&lt;/strong&gt;」小程序的后端服务代码 90% 都是 AI 实现的 😂&lt;/p&gt;</description><link>https://juejin.cn/post/7483134727820886051</link><guid isPermaLink="false">https://juejin.cn/post/7483134727820886051</guid><pubDate>Wed, 19 Mar 2025 09:59:23 GMT</pubDate><author>百慕大三角</author><category>前端</category><category>AI 编程</category><category>Trae</category></item><item><title>vue2使用el-cascader在table中下拉框不跟随滚动问题</title><description>&lt;blockquote&gt;
&lt;p&gt;在vue2中 ，使用 element 中的 级联选择器的时候， 当把级联选择器当插槽放入table中的时候，且这个组件是出现在 el-drawer 抽屉里面的情况下， 这时候如果有纵向滚动条，滚动的时候， el-cascader下拉框不跟随滚动， 这个问题解决了好久，使用别的库的下拉框， 点击的时候下拉框要么有层级问题，要么不显示。针对这一问题进行一次总结。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 data-id=&quot;heading-0&quot;&gt;场景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;步长： 点击按钮， 打开 抽屉， 抽屉中显示一个 el-table 表格， 表格中 动态添加 el-cascader 级联选择器&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 data-id=&quot;heading-1&quot;&gt;代码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;代码中主要看 el-cascader 组件即可， v-model 绑定的值还没写，属于后续内容，这里只展示这个问题的解决方案，这里主要利用的就是在子组件上 配置 ref mySelect2， 父组件侦听滚动事件。 解决方案代码在下面。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-js&quot; lang=&quot;js&quot;&gt;&amp;lt;template&amp;gt;
  &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;el-table&lt;/span&gt;
      &lt;span class=&quot;hljs-attr&quot;&gt;:data&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;tableData&quot;&lt;/span&gt;
      &lt;span class=&quot;hljs-attr&quot;&gt;:span-method&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;objectSpanMethod&quot;&lt;/span&gt;
      &lt;span class=&quot;hljs-attr&quot;&gt;border&lt;/span&gt;
      &lt;span class=&quot;hljs-attr&quot;&gt;stripe&lt;/span&gt;
      &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;compare-table&quot;&lt;/span&gt;
      &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;margin-top: 20px&quot;&lt;/span&gt;
      &lt;span class=&quot;hljs-attr&quot;&gt;tooltip-effect&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;dark&quot;&lt;/span&gt;
      &lt;span class=&quot;hljs-attr&quot;&gt;:cell-style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;cellStyleHandler&quot;&lt;/span&gt;
      &lt;span class=&quot;hljs-attr&quot;&gt;:cell-class-name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;cellStyleHandler2&quot;&lt;/span&gt;
      &amp;gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;el-table-column&lt;/span&gt;
        &lt;span class=&quot;hljs-attr&quot;&gt;v-for&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;item in columns&quot;&lt;/span&gt;
        &lt;span class=&quot;hljs-attr&quot;&gt;:key&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;item.label&quot;&lt;/span&gt;
        &lt;span class=&quot;hljs-attr&quot;&gt;:prop&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;item.prop&quot;&lt;/span&gt;
        &lt;span class=&quot;hljs-attr&quot;&gt;:width&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;item?.width&quot;&lt;/span&gt;
        &lt;span class=&quot;hljs-attr&quot;&gt;min-width&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;230&quot;&lt;/span&gt;
        &lt;span class=&quot;hljs-attr&quot;&gt;:label&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;item.label&quot;&lt;/span&gt;
        &lt;span class=&quot;hljs-attr&quot;&gt;show-overflow-tooltip&lt;/span&gt;
        &lt;span class=&quot;hljs-attr&quot;&gt;align&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;center&quot;&lt;/span&gt;
      &amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;slot-scope&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;scope&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;v-if&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;renderOtherSlot(scope, item)&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
              {{  scope.row[item.prop].value ? &#39;否&#39; : &#39;是&#39;}}
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;v-else-if&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;renderSlot(scope) === &#39;RENDER&#39;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;v-if&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;scope.row.slot&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;el-select&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;mySelect1&quot;&lt;/span&gt; @&lt;span class=&quot;hljs-attr&quot;&gt;change&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;(value)=&amp;gt;changeHandler(scope, item,value)&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;v-model&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;scope.row[scope.column.property].source[scope.row.slot]&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;multiple&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;collapse-tags&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;placeholder&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;请选择&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;el-option&lt;/span&gt;
                    &lt;span class=&quot;hljs-attr&quot;&gt;v-for&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;item in returnOptions(scope, item)&quot;&lt;/span&gt;
                    &lt;span class=&quot;hljs-attr&quot;&gt;:key&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;item.label&quot;&lt;/span&gt;
                    &lt;span class=&quot;hljs-attr&quot;&gt;:label&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;item.value&quot;&lt;/span&gt;
                    &lt;span class=&quot;hljs-attr&quot;&gt;:value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;item.label&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;el-option&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;el-select&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;slot-class&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;v-else&lt;/span&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;el-tooltip&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;effect&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;dark&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1%&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;placement&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;top&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;:disabled&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;el-icon--left&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;v-if&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;renderCompare(scope,2)&quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;svg-icon&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;icon-class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;compare_big&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;el-icon--left&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;v-if&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;renderCompare(scope,1)&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;svg-icon&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;icon-class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;compare_small&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;el-tooltip&lt;/span&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ellipsis-reset&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;
                  {{renderCompareValue(scope, item) ?? &#39;-&#39;}}
                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;v-else&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;v-if&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;decideSlot(scope, item)&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;el-cascader&lt;/span&gt; 
                &lt;span class=&quot;hljs-attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;mySelect2&quot;&lt;/span&gt; 
                &lt;span class=&quot;hljs-attr&quot;&gt;:options&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;returnOptions(scope, item)&quot;&lt;/span&gt;
                &lt;span class=&quot;hljs-attr&quot;&gt;collapse-tags&lt;/span&gt;
                &lt;span class=&quot;hljs-attr&quot;&gt;size&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;mini&quot;&lt;/span&gt;
                &lt;span class=&quot;hljs-attr&quot;&gt;filterable&lt;/span&gt;
                &lt;span class=&quot;hljs-attr&quot;&gt;:props&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;{ multiple: true }&quot;&lt;/span&gt;
                @&lt;span class=&quot;hljs-attr&quot;&gt;change&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;cascaderChangeHandler&quot;&lt;/span&gt;
                @&lt;span class=&quot;hljs-attr&quot;&gt;visible-change&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;visibleChange&quot;&lt;/span&gt;
                &lt;span class=&quot;hljs-attr&quot;&gt;clearable&lt;/span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;v-else&lt;/span&gt;&amp;gt;&lt;/span&gt;
              {{renderSlot(scope, item)}}
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;el-table-column&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;el-table&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&amp;lt;/template&amp;gt;

&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { &lt;span class=&quot;hljs-variable constant_&quot;&gt;UNIT_ENUM&lt;/span&gt; } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;@/views/flow-direction/const&#39;&lt;/span&gt;;

&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; {
  &lt;span class=&quot;hljs-attr&quot;&gt;props&lt;/span&gt;: {
    &lt;span class=&quot;hljs-attr&quot;&gt;columns&lt;/span&gt;: {
      &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;,
      &lt;span class=&quot;hljs-attr&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; []
    },
    &lt;span class=&quot;hljs-attr&quot;&gt;basisData&lt;/span&gt;: {
      &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;,
      &lt;span class=&quot;hljs-attr&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; []
    },
    &lt;span class=&quot;hljs-attr&quot;&gt;getAnalysisReuslt&lt;/span&gt;: {
      &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;,
      &lt;span class=&quot;hljs-attr&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {}
    }
  },
  &lt;span class=&quot;hljs-title function_&quot;&gt;data&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {
        &lt;span class=&quot;hljs-attr&quot;&gt;form&lt;/span&gt;: {
        },
        &lt;span class=&quot;hljs-attr&quot;&gt;rules&lt;/span&gt;: {
        },
        &lt;span class=&quot;hljs-attr&quot;&gt;arrSort&lt;/span&gt;: [],
        &lt;span class=&quot;hljs-attr&quot;&gt;tableData&lt;/span&gt;: [
          &lt;span class=&quot;hljs-comment&quot;&gt;// compareType 类别， content 对比内容 , effect 对比结果&lt;/span&gt;
          {&lt;span class=&quot;hljs-attr&quot;&gt;compareType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;结果指标&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;segmentNames&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;管段名称&#39;&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;slot&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;selectSegmentCodes&#39;&lt;/span&gt;},
          {&lt;span class=&quot;hljs-attr&quot;&gt;compareType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;结果指标&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;stationNames&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;站场名称&#39;&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;slot&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;selectStationCodes&#39;&lt;/span&gt;},
          {&lt;span class=&quot;hljs-attr&quot;&gt;compareType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;结果指标&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;segmentNum&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;建管段数量&#39;&lt;/span&gt;},
          {&lt;span class=&quot;hljs-attr&quot;&gt;compareType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;结果指标&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;segmentUseLength&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;管道投产里程&#39;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;`(&lt;span class=&quot;hljs-subst&quot;&gt;${UNIT_ENUM.KM}&lt;/span&gt;)`&lt;/span&gt;},
          &lt;span class=&quot;hljs-comment&quot;&gt;// {compareType: &#39;结果指标&#39;,type:&#39;totalDemand&#39;,content:&#39;总需求&#39;},&lt;/span&gt;
          {&lt;span class=&quot;hljs-attr&quot;&gt;compareType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;结果指标&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;stationNum&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;建站数量&#39;&lt;/span&gt;},
          {&lt;span class=&quot;hljs-attr&quot;&gt;compareType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;结果指标&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;loadRatio&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;平均负荷率&#39;&lt;/span&gt;},
          {&lt;span class=&quot;hljs-attr&quot;&gt;compareType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;结果指标&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;power&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;年功率&#39;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;`(&lt;span class=&quot;hljs-subst&quot;&gt;${UNIT_ENUM.POWER}&lt;/span&gt;)`&lt;/span&gt; },
          {&lt;span class=&quot;hljs-attr&quot;&gt;compareType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;结果指标&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;stationInvestment&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;站场投资&#39;&lt;/span&gt;  + &lt;span class=&quot;hljs-string&quot;&gt;`(&lt;span class=&quot;hljs-subst&quot;&gt;${UNIT_ENUM.TEM_PRICE}&lt;/span&gt;)`&lt;/span&gt; },
          {&lt;span class=&quot;hljs-attr&quot;&gt;compareType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;结果指标&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;segmentInvestment&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;管道投资&#39;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;`(&lt;span class=&quot;hljs-subst&quot;&gt;${UNIT_ENUM.TEM_PRICE}&lt;/span&gt;)`&lt;/span&gt; },
          {&lt;span class=&quot;hljs-attr&quot;&gt;compareType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;结果指标&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;buildCost&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;建设费用&#39;&lt;/span&gt;  + &lt;span class=&quot;hljs-string&quot;&gt;`(&lt;span class=&quot;hljs-subst&quot;&gt;${UNIT_ENUM.TEM_PRICE}&lt;/span&gt;)`&lt;/span&gt; },
          {&lt;span class=&quot;hljs-attr&quot;&gt;compareType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;结果指标&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;operatingCost&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;运行费用&#39;&lt;/span&gt;  + &lt;span class=&quot;hljs-string&quot;&gt;`(&lt;span class=&quot;hljs-subst&quot;&gt;${UNIT_ENUM.TEM_PRICE}&lt;/span&gt;)`&lt;/span&gt; },
          {&lt;span class=&quot;hljs-attr&quot;&gt;compareType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;结果指标&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;presentCost&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;费用现值&#39;&lt;/span&gt;  + &lt;span class=&quot;hljs-string&quot;&gt;`(&lt;span class=&quot;hljs-subst&quot;&gt;${UNIT_ENUM.TEM_PRICE}&lt;/span&gt;)`&lt;/span&gt; },
          {&lt;span class=&quot;hljs-attr&quot;&gt;compareType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;结果指标&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;turnoverEnergyConsumption&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;单位周转量能耗&#39;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;`(&lt;span class=&quot;hljs-subst&quot;&gt;${UNIT_ENUM.UNIT_REVOLVE}&lt;/span&gt;)`&lt;/span&gt;},

          {&lt;span class=&quot;hljs-attr&quot;&gt;compareType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;全局约束条件&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;loadRationRelaxMax&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;负荷率松弛上限值&#39;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;`(&lt;span class=&quot;hljs-subst&quot;&gt;${UNIT_ENUM.PERCENT}&lt;/span&gt;)`&lt;/span&gt;},
          {&lt;span class=&quot;hljs-attr&quot;&gt;compareType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;全局约束条件&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;energyTarget&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;能耗目标值&#39;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;`(&lt;span class=&quot;hljs-subst&quot;&gt;${UNIT_ENUM.COST}&lt;/span&gt;)`&lt;/span&gt;},
          {&lt;span class=&quot;hljs-attr&quot;&gt;compareType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;全局约束条件&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;turnoverTarget&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;周转量目标值&#39;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;`(&lt;span class=&quot;hljs-subst&quot;&gt;${UNIT_ENUM.REVOLVE}&lt;/span&gt;/天)`&lt;/span&gt;},
          {&lt;span class=&quot;hljs-attr&quot;&gt;compareType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;全局约束条件&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;costTarget&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;供气成本目标值&#39;&lt;/span&gt;  + &lt;span class=&quot;hljs-string&quot;&gt;`(&lt;span class=&quot;hljs-subst&quot;&gt;${UNIT_ENUM.TEM_PRICE}&lt;/span&gt;)`&lt;/span&gt; },

          {&lt;span class=&quot;hljs-attr&quot;&gt;compareType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;优化目标权重&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;minimumTotalTurnover&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;最小总周转量&#39;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;`(&lt;span class=&quot;hljs-subst&quot;&gt;${UNIT_ENUM.PERCENT}&lt;/span&gt;)`&lt;/span&gt;},
          {&lt;span class=&quot;hljs-attr&quot;&gt;compareType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;优化目标权重&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;optimalLoadRatio&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;最优负荷率&#39;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;`(&lt;span class=&quot;hljs-subst&quot;&gt;${UNIT_ENUM.PERCENT}&lt;/span&gt;)`&lt;/span&gt;},
          {&lt;span class=&quot;hljs-attr&quot;&gt;compareType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;优化目标权重&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;minimumReceptionCost&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;最小接气成本&#39;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;`(&lt;span class=&quot;hljs-subst&quot;&gt;${UNIT_ENUM.PERCENT}&lt;/span&gt;)`&lt;/span&gt;},
          {&lt;span class=&quot;hljs-attr&quot;&gt;compareType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;优化目标权重&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;minimumEnergy&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;最低能耗&#39;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;`(&lt;span class=&quot;hljs-subst&quot;&gt;${UNIT_ENUM.PERCENT}&lt;/span&gt;)`&lt;/span&gt;},

          {&lt;span class=&quot;hljs-attr&quot;&gt;compareType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;模型计算配置&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;maxRunTime&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;计算终止时长(s)&#39;&lt;/span&gt;},
          {&lt;span class=&quot;hljs-attr&quot;&gt;compareType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;模型计算配置&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;convergencePrecision&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;压力误差(%)&#39;&lt;/span&gt;},
          {&lt;span class=&quot;hljs-attr&quot;&gt;compareType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;模型计算配置&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;isWaterConservancy&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;模型计算配置&#39;&lt;/span&gt;},
          
          {&lt;span class=&quot;hljs-attr&quot;&gt;compareType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;推荐排序&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;sort&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&#39;经济评价指标&#39;&lt;/span&gt;},
        ]
    };
  },
  &lt;span class=&quot;hljs-comment&quot;&gt;// 数据重置&lt;/span&gt;
  &lt;span class=&quot;hljs-title function_&quot;&gt;created&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;arrSort&lt;/span&gt; = []
    &lt;span class=&quot;hljs-comment&quot;&gt;// 改造数据源&lt;/span&gt;
    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;basisData&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { modelName, constraints, executeConfig, optimizeTargetWeight, basIndicators} = item 
      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;arrSort&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(modelName) 
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; currentObj = { ...constraints, ...executeConfig, ...optimizeTargetWeight, ...basIndicators}
      &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(currentObj).&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;big&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{
        &lt;span class=&quot;hljs-comment&quot;&gt;// 循环，对照数据，找到 tableData 展示 数据中的对应项， 进行赋值。&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; showCurrent = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;tableData&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;small&lt;/span&gt;)=&amp;gt;&lt;/span&gt;small.&lt;span class=&quot;hljs-property&quot;&gt;type&lt;/span&gt; === big)
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(showCurrent){
          &lt;span class=&quot;hljs-comment&quot;&gt;// 响应式复制， 给当前列 复制 value 对象&lt;/span&gt;
          &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.$set(showCurrent, modelName, { &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: currentObj[big], &lt;span class=&quot;hljs-attr&quot;&gt;source&lt;/span&gt;: currentObj})
        }
      })
    })
    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; denominator = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;tableData&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;=&amp;gt;&lt;/span&gt;item.&lt;span class=&quot;hljs-property&quot;&gt;type&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&#39;presentCost&#39;&lt;/span&gt;)[&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;arrSort&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]].&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;// 第一层循环当前数据、第二层 找到当前列对应的数据， 与第一列对应的数据进行对比， 给当前列数据显示对象 复制对比结果&lt;/span&gt;
    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;tableData&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{
      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;arrSort&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;it,index&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; compare = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;arrSort&lt;/span&gt;[index]
        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; compareValue = item[compare]?.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt; ?? &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// 当前列的值&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; currentValue = item[&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;arrSort&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]]?.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt; ?? &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// 第一列需要对比的值&lt;/span&gt;
        &lt;span class=&quot;hljs-comment&quot;&gt;// 如果 需要对比的值为 null  或者当前列的值为 null  则不对比&lt;/span&gt;
        &lt;span class=&quot;hljs-comment&quot;&gt;// 找到第一列的 费用现值， 需要用作分母的， 这里判定 如果分母是 0 ， 则不渲染箭头&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(item.&lt;span class=&quot;hljs-property&quot;&gt;type&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&#39;sort&#39;&lt;/span&gt; &amp;amp;&amp;amp; denominator === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;){
          item[compare].&lt;span class=&quot;hljs-property&quot;&gt;effect&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
        }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(currentValue === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || compareValue === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;){ item[compare].&lt;span class=&quot;hljs-property&quot;&gt;effect&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; }  
        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{
          item[compare].&lt;span class=&quot;hljs-property&quot;&gt;effect&lt;/span&gt; = compareValue &amp;gt; currentValue ? &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; : compareValue &amp;lt; currentValue ? &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;
        }
      })
    })
  },
  &lt;span class=&quot;hljs-title function_&quot;&gt;mounted&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
  },
  &lt;span class=&quot;hljs-attr&quot;&gt;methods&lt;/span&gt;: {
    &lt;span class=&quot;hljs-title function_&quot;&gt;changeHandler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;scope, item, selectValue&lt;/span&gt;){
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { row, column } = scope
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { property } = column
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { type } = row
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; current = {  &lt;span class=&quot;hljs-attr&quot;&gt;modelId&lt;/span&gt;: item.&lt;span class=&quot;hljs-property&quot;&gt;modelId&lt;/span&gt; }
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(type === &lt;span class=&quot;hljs-string&quot;&gt;&quot;stationNames&quot;&lt;/span&gt;){
        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;ceasfd&#39;&lt;/span&gt;,row[property].&lt;span class=&quot;hljs-property&quot;&gt;source&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;selectSegmentCodes&lt;/span&gt;)
        current.&lt;span class=&quot;hljs-property&quot;&gt;selectStationCodes&lt;/span&gt; = selectValue
        current.&lt;span class=&quot;hljs-property&quot;&gt;selectSegmentCodes&lt;/span&gt; = row[property].&lt;span class=&quot;hljs-property&quot;&gt;source&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;selectSegmentCodes&lt;/span&gt;
      }
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(type === &lt;span class=&quot;hljs-string&quot;&gt;&quot;segmentNames&quot;&lt;/span&gt;){
        current.&lt;span class=&quot;hljs-property&quot;&gt;selectSegmentCodes&lt;/span&gt; = selectValue
      }
      &lt;span class=&quot;hljs-comment&quot;&gt;// 触发页面更新&lt;/span&gt;
      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getAnalysisReuslt&lt;/span&gt;(current)
    },
    &lt;span class=&quot;hljs-title function_&quot;&gt;cascaderChangeHandler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value&lt;/span&gt;){
      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;value&#39;&lt;/span&gt;,value);
    },
    &lt;span class=&quot;hljs-title function_&quot;&gt;visibleChange&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value&lt;/span&gt;){
      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;visibleChange&#39;&lt;/span&gt;,value);
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!value) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; container = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;.el-cascader__dropdown&#39;&lt;/span&gt;);

        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (container) {
          &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;83&#39;&lt;/span&gt;,container);
          container.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;opacity&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; 
        }
    },
    &lt;span class=&quot;hljs-comment&quot;&gt;// 渲染对比的值&lt;/span&gt;
    &lt;span class=&quot;hljs-title function_&quot;&gt;renderCompareValue&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data, item&lt;/span&gt;){
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { row, &lt;span class=&quot;hljs-attr&quot;&gt;column&lt;/span&gt;:{ label } } = data 
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { type, slot } = row
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; value = row[label]?.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(type === &lt;span class=&quot;hljs-string&quot;&gt;&#39;sort&#39;&lt;/span&gt; &amp;amp;&amp;amp;  value){
        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; current = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;tableData&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;=&amp;gt;&lt;/span&gt;item.&lt;span class=&quot;hljs-property&quot;&gt;type&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&#39;presentCost&#39;&lt;/span&gt;)
        &lt;span class=&quot;hljs-comment&quot;&gt;// 计算百分比 使用当前列的费用现值 / 第一列的费用现值 * 100%   第一列的 label 为 this.arrSort[0] 当前 label 为 lable&lt;/span&gt;
        &lt;span class=&quot;hljs-comment&quot;&gt;// 如果 分母是 0 ， 则不计算&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; denominator = current[&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;arrSort&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]].&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;// 分母&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; molecule = current[label].&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(denominator === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;-&#39;&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value + &lt;span class=&quot;hljs-string&quot;&gt;`(&lt;span class=&quot;hljs-subst&quot;&gt;${(molecule / denominator * &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;).toFixed(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)}&lt;/span&gt;%)`&lt;/span&gt; 
      }
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(slot){
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;renderNames&lt;/span&gt;(row[item.&lt;span class=&quot;hljs-property&quot;&gt;label&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;source&lt;/span&gt;, slot, value)
      }
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value ?? &lt;span class=&quot;hljs-string&quot;&gt;&#39;-&#39;&lt;/span&gt;
    },
    &lt;span class=&quot;hljs-title function_&quot;&gt;renderCompare&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data,num&lt;/span&gt;){
      &lt;span class=&quot;hljs-comment&quot;&gt;// 渲染箭头方向&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { row, &lt;span class=&quot;hljs-attr&quot;&gt;column&lt;/span&gt;:{ label } } = data 
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; row[label]?.&lt;span class=&quot;hljs-property&quot;&gt;effect&lt;/span&gt; === num
    },
    &lt;span class=&quot;hljs-comment&quot;&gt;// 判定第一列的模型内容&lt;/span&gt;
    &lt;span class=&quot;hljs-title function_&quot;&gt;decideSlot&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;scope, item&lt;/span&gt;){
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { row, column } = scope
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { property } = column
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(row.&lt;span class=&quot;hljs-property&quot;&gt;slot&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; row[property] === &lt;span class=&quot;hljs-string&quot;&gt;&#39;object&#39;&lt;/span&gt; &amp;amp;&amp;amp; item){
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
      }
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
    },
    &lt;span class=&quot;hljs-comment&quot;&gt;// 返回下拉列表 &lt;/span&gt;
    &lt;span class=&quot;hljs-title function_&quot;&gt;returnOptions&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;scope, item&lt;/span&gt;){
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { row, column } = scope
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { property } = column
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { type } = row
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(type === &lt;span class=&quot;hljs-string&quot;&gt;&quot;stationNames&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; row[property].&lt;span class=&quot;hljs-property&quot;&gt;source&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&#39;stations&#39;&lt;/span&gt;]
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(type === &lt;span class=&quot;hljs-string&quot;&gt;&quot;segmentNames&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; row[property].&lt;span class=&quot;hljs-property&quot;&gt;source&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&#39;segments&#39;&lt;/span&gt;]
    },
    &lt;span class=&quot;hljs-comment&quot;&gt;// 渲染绑定的值&lt;/span&gt;
    &lt;span class=&quot;hljs-title function_&quot;&gt;returnSelectValue&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;scope, item&lt;/span&gt;){
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { row, column } = scope
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { property } = column
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { type } = row
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(type === &lt;span class=&quot;hljs-string&quot;&gt;&quot;stationNames&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; row[property].&lt;span class=&quot;hljs-property&quot;&gt;source&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&#39;selectStationCodes&#39;&lt;/span&gt;]
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(type === &lt;span class=&quot;hljs-string&quot;&gt;&quot;segmentNames&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; row[property].&lt;span class=&quot;hljs-property&quot;&gt;source&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&#39;selectSegmentCodes&#39;&lt;/span&gt;]
    },
    &lt;span class=&quot;hljs-title function_&quot;&gt;renderSlot&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;scope, item&lt;/span&gt;){
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { row, column } = scope
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { property } = column
      &lt;span class=&quot;hljs-comment&quot;&gt;// 排除第一列， 第二列之后的使用 箭头插槽渲染&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arr = [...&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;arrSort&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;(property)){
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;RENDER&#39;&lt;/span&gt;
      }
      &lt;span class=&quot;hljs-comment&quot;&gt;// 值是对象的，标识不是类别 和 对比内容， 直接返回 value &lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; value = row[property]?.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(row.&lt;span class=&quot;hljs-property&quot;&gt;type&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&#39;sort&#39;&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; row[property] === &lt;span class=&quot;hljs-string&quot;&gt;&#39;object&#39;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value ? &lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${value}&lt;/span&gt;(100%)`&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&#39;-&#39;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// 渲染第一列， 经济评价指标的百分比&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(row.&lt;span class=&quot;hljs-property&quot;&gt;slot&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; row[property] === &lt;span class=&quot;hljs-string&quot;&gt;&#39;object&#39;&lt;/span&gt; &amp;amp;&amp;amp; item){
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;renderNames&lt;/span&gt;(row[item.&lt;span class=&quot;hljs-property&quot;&gt;label&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;source&lt;/span&gt;,row.&lt;span class=&quot;hljs-property&quot;&gt;slot&lt;/span&gt;, value)
      }
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; row[property] === &lt;span class=&quot;hljs-string&quot;&gt;&#39;object&#39;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value ?? &lt;span class=&quot;hljs-string&quot;&gt;&#39;-&#39;&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; row[property]  &lt;span class=&quot;hljs-comment&quot;&gt;// 返回前两列的固定label&lt;/span&gt;
    },
    &lt;span class=&quot;hljs-comment&quot;&gt;// 渲染不需要对比的值&lt;/span&gt;
    &lt;span class=&quot;hljs-title function_&quot;&gt;renderOtherSlot&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;scope, item&lt;/span&gt;){
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { row, &lt;span class=&quot;hljs-attr&quot;&gt;column&lt;/span&gt;: { property } } = scope
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(row.&lt;span class=&quot;hljs-property&quot;&gt;type&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&quot;isWaterConservancy&quot;&lt;/span&gt; &amp;amp;&amp;amp; property !== &lt;span class=&quot;hljs-string&quot;&gt;&#39;compareType&#39;&lt;/span&gt; &amp;amp;&amp;amp; property !== &lt;span class=&quot;hljs-string&quot;&gt;&#39;content&#39;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
    },
    &lt;span class=&quot;hljs-comment&quot;&gt;// 合并渲染管段数量以及站场数量&lt;/span&gt;
    &lt;span class=&quot;hljs-title function_&quot;&gt;renderNames&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj,key,value&lt;/span&gt;){
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(value === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || value === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;-&#39;&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(value === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value
      &lt;span class=&quot;hljs-comment&quot;&gt;// console.log(&#39;obj&#39;,obj[key]);&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${value}&lt;/span&gt;(&lt;span class=&quot;hljs-subst&quot;&gt;${obj[key]}&lt;/span&gt;)`&lt;/span&gt;
    },
    &lt;span class=&quot;hljs-comment&quot;&gt;// 设置斑马线样式&lt;/span&gt;
    &lt;span class=&quot;hljs-title function_&quot;&gt;cellStyleHandler2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;{row, column, rowIndex, columnIndex}&lt;/span&gt;){
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(columnIndex === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;cell-reset&#39;&lt;/span&gt;
    },
    &lt;span class=&quot;hljs-title function_&quot;&gt;cellStyleHandler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;{row, column, rowIndex, columnIndex}&lt;/span&gt;){
      &lt;span class=&quot;hljs-comment&quot;&gt;// 设置第一列的样式&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(columnIndex === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;){
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {
          &lt;span class=&quot;hljs-attr&quot;&gt;backgroundColor&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;#fff&quot;&lt;/span&gt;
        }
      }
    },
    &lt;span class=&quot;hljs-title function_&quot;&gt;objectSpanMethod&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;{ row, column, rowIndex, columnIndex }&lt;/span&gt;) {
      &lt;span class=&quot;hljs-comment&quot;&gt;// columnIndex 为当前列的索引， 我们只合并第一列， compareType 为当前列的值 rowIndex 为当前列的行数，  rowspan 是我们要合并多少行， 这里拿第一个 switch 的条件距离，rowspan 11 表示合并11行， colspan 表示 显示1列。 那么我们在想要合并11行的话， 就在第 11 行 合并即可， 其他 10行的 行跨度 和 列跨度 都返回0 即可。&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { compareType, content } = row
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (columnIndex === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {
          &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt;(compareType){
            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;结果指标&quot;&lt;/span&gt;:
              &lt;span class=&quot;hljs-comment&quot;&gt;// console.log(&#39;data&#39;, row, column, rowIndex, rowIndex % 11, &#39;---&#39;,columnIndex);&lt;/span&gt;
              &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (rowIndex % &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {
                  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {
                    &lt;span class=&quot;hljs-attr&quot;&gt;rowspan&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;// 行跨度&lt;/span&gt;
                    &lt;span class=&quot;hljs-attr&quot;&gt;colspan&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// 列跨度&lt;/span&gt;
                  };
                } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {
                  &lt;span class=&quot;hljs-attr&quot;&gt;rowspan&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,
                  &lt;span class=&quot;hljs-attr&quot;&gt;colspan&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
                };
              }
            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;全局约束条件&quot;&lt;/span&gt;:
              &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (rowIndex % &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {
                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {
                  &lt;span class=&quot;hljs-attr&quot;&gt;rowspan&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,
                  &lt;span class=&quot;hljs-attr&quot;&gt;colspan&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;
                };
              } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {
                  &lt;span class=&quot;hljs-attr&quot;&gt;rowspan&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,
                  &lt;span class=&quot;hljs-attr&quot;&gt;colspan&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
                };
              }
            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;优化目标权重&quot;&lt;/span&gt;: 
              &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (rowIndex % &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {
                  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {
                    &lt;span class=&quot;hljs-attr&quot;&gt;rowspan&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,
                    &lt;span class=&quot;hljs-attr&quot;&gt;colspan&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;
                  };
              } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {
                  &lt;span class=&quot;hljs-attr&quot;&gt;rowspan&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,
                  &lt;span class=&quot;hljs-attr&quot;&gt;colspan&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
                };
              }
            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;模型计算配置&quot;&lt;/span&gt;:
              &lt;span class=&quot;hljs-comment&quot;&gt;// console.log(&#39;data&#39;, row, column, rowIndex, rowIndex % 20, &#39;---&#39;,columnIndex);&lt;/span&gt;
              &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (rowIndex % &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {
                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {
                      &lt;span class=&quot;hljs-attr&quot;&gt;rowspan&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,
                      &lt;span class=&quot;hljs-attr&quot;&gt;colspan&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;
                    };
              } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {
                  &lt;span class=&quot;hljs-attr&quot;&gt;rowspan&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,
                  &lt;span class=&quot;hljs-attr&quot;&gt;colspan&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
                };
              }
            &lt;span class=&quot;hljs-attr&quot;&gt;default&lt;/span&gt;: 
              &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {
                &lt;span class=&quot;hljs-attr&quot;&gt;rowspan&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,
                &lt;span class=&quot;hljs-attr&quot;&gt;colspan&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;
              }
          }
        }
      }
  },
};
&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;scss&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;scoped&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;css&quot;&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;@/views/flow-direction/model-manage/compare-model/compare.scss&quot;&lt;/span&gt;;
&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 data-id=&quot;heading-2&quot;&gt;问题&lt;/h2&gt;
&lt;p&gt;页面当中高度不够， 内部容器出现了滚动条
&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/906115e099374774985b1461d27a112a~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgY29kZV9Cbw==:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742982696&amp;amp;x-signature=N%2FfUPRagHtPBmQ7THEnZlxxpMU4%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
滚动的时候下拉框并没有跟随滚动
&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/3a50cfedf8fe4826b0e5c7d7f17e68bb~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgY29kZV9Cbw==:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742982696&amp;amp;x-signature=cOacVNwBUYsXybP2Xrruws5X0qY%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h2 data-id=&quot;heading-3&quot;&gt;解决方案&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;父组件， 需要滚动的容器上添加 scroll 事件， 滚动的时候通过ref 获取子组件当中的 级联选择器， 配置每一个选择器的 item.dropDownVisible = false; 属性 ， 这样就能完成在滚动的时候动态隐藏下拉框了。&lt;/li&gt;
&lt;li&gt;这里面还有一个是 mySelect1 的 ref， 这个是 select 下拉框， 他也有同样的问题， 后续我业务上会把这个也替换成级联选择器。 select 这个问题的解决方案就是使用 item?.blur() 方法即可， 滚动的时候， 控制器失焦，让其隐藏即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-js&quot; lang=&quot;js&quot;&gt;&amp;lt;template&amp;gt;
  &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;el-drawer&lt;/span&gt;
    &lt;span class=&quot;hljs-attr&quot;&gt;:visible.sync&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;visible&quot;&lt;/span&gt;
    &lt;span class=&quot;hljs-attr&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;结果对比&quot;&lt;/span&gt;
    &lt;span class=&quot;hljs-attr&quot;&gt;:size&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;820&quot;&lt;/span&gt;
    &lt;span class=&quot;hljs-attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;drawer&quot;&lt;/span&gt;
    &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;flow-drawer&quot;&lt;/span&gt;
    @&lt;span class=&quot;hljs-attr&quot;&gt;close&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;() =&amp;gt; { visible = false }&quot;&lt;/span&gt;
  &amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;drawer-container&quot;&lt;/span&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;v-loading&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;loading&quot;&lt;/span&gt; @&lt;span class=&quot;hljs-attr&quot;&gt;scroll&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;scrollHandler&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;v-if&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;basisData.length !== 0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;AnalysisCompare&lt;/span&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;AnalysisCompare&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;:key&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;analysisKey&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;:getAnalysisReuslt&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;getAnalysisReuslt&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;v-if&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;modelType === 3&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;:columns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;analysisColumns&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;:basisData&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;basisData&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;BasisCompare&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;v-else&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;:columns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;basisColumns&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;:basisData&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;basisData&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;el-empty&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;v-else&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;description&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;暂无数据&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;el-empty&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;demo-drawer__footer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;el-button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;v-if&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;basisColumns.length !== 0&quot;&lt;/span&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;:disabled&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;loading&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;primary&quot;&lt;/span&gt; @&lt;span class=&quot;hljs-attr&quot;&gt;click&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;exportHandler&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;:loading&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;btnLoading&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;导出&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;el-button&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;el-button&lt;/span&gt; @&lt;span class=&quot;hljs-attr&quot;&gt;click&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;()=&amp;gt;{ visible = false }&quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;关闭&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;el-button&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;el-drawer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&amp;lt;/template&amp;gt;

&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BasisCompare&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;./BasisCompare&#39;&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;AnalysisCompare&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;./AnalysisCompare.vue&#39;&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { modelContrastApi, exportModelContrastApi, exportModelContrastAnalsisApi } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;@/flow-api/model&#39;&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { downloadFile } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;@/views/flow-direction/basic-data/utils&#39;&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { testData } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;@/建设方案结果对比返回结果格式&#39;&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; {
  &lt;span class=&quot;hljs-attr&quot;&gt;components&lt;/span&gt;: {
    &lt;span class=&quot;hljs-title class_&quot;&gt;BasisCompare&lt;/span&gt;,
    &lt;span class=&quot;hljs-title class_&quot;&gt;AnalysisCompare&lt;/span&gt;
  },
  &lt;span class=&quot;hljs-attr&quot;&gt;props&lt;/span&gt;:{
    &lt;span class=&quot;hljs-comment&quot;&gt;// 需要对比的两条数据&lt;/span&gt;
    &lt;span class=&quot;hljs-attr&quot;&gt;row&lt;/span&gt;: {
      &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;,
      &lt;span class=&quot;hljs-attr&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; []
    },
    &lt;span class=&quot;hljs-attr&quot;&gt;analysisCatchList&lt;/span&gt;: {
      &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Map&lt;/span&gt;,
      &lt;span class=&quot;hljs-attr&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Map&lt;/span&gt;()
    },
    &lt;span class=&quot;hljs-attr&quot;&gt;setAnalysisCatchList&lt;/span&gt;: {
      &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;,
      &lt;span class=&quot;hljs-attr&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {}
    }
  },
  &lt;span class=&quot;hljs-title function_&quot;&gt;data&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {
      &lt;span class=&quot;hljs-attr&quot;&gt;visible&lt;/span&gt;:&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,
      &lt;span class=&quot;hljs-attr&quot;&gt;loading&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,
      &lt;span class=&quot;hljs-attr&quot;&gt;btnLoading&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,
      &lt;span class=&quot;hljs-attr&quot;&gt;basisData&lt;/span&gt;: [],
      &lt;span class=&quot;hljs-attr&quot;&gt;analysisKey&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,
      &lt;span class=&quot;hljs-attr&quot;&gt;modelType&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,
      &lt;span class=&quot;hljs-attr&quot;&gt;basisColumns&lt;/span&gt;: [
        { &lt;span class=&quot;hljs-attr&quot;&gt;label&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;类别&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;prop&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;compareType&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;140&lt;/span&gt; },
        { &lt;span class=&quot;hljs-attr&quot;&gt;label&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;对比内容&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;prop&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;content&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;220&lt;/span&gt; },
      ],
      &lt;span class=&quot;hljs-attr&quot;&gt;analysisColumns&lt;/span&gt;: [],
      &lt;span class=&quot;hljs-attr&quot;&gt;analysisSelects&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// 当前选中的 站场和管段队列&lt;/span&gt;
    };
  },
  &lt;span class=&quot;hljs-attr&quot;&gt;watch&lt;/span&gt;:{
  },
  &lt;span class=&quot;hljs-title function_&quot;&gt;mounted&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
  },
  &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;created&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 建设方案场景单独处理&lt;/span&gt;
    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;modelType&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;row&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;modelType&lt;/span&gt;)
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;modelType&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;){
      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;initAnalysisReuslt&lt;/span&gt;()
    }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{
      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getBasicResult&lt;/span&gt;()
    }
  },
  &lt;span class=&quot;hljs-attr&quot;&gt;methods&lt;/span&gt;: {
    &lt;span class=&quot;hljs-title function_&quot;&gt;scrollHandler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;modelType&lt;/span&gt; !== &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;
      &lt;span class=&quot;hljs-comment&quot;&gt;// 滚动的时候 隐藏下拉框， 防止下拉框不跟随滚动&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { mySelect1 = [], mySelect2 = [] } = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;$refs&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;AnalysisCompare&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;$refs&lt;/span&gt; || {}
      &lt;span class=&quot;hljs-comment&quot;&gt;// if(mySelect1.length !== 0){&lt;/span&gt;
      &lt;span class=&quot;hljs-comment&quot;&gt;//   mySelect1.map((item)=&amp;gt;{item?.blur()})&lt;/span&gt;
      &lt;span class=&quot;hljs-comment&quot;&gt;// }&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(mySelect1.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; !== &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;){
        mySelect1.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{
          item.&lt;span class=&quot;hljs-property&quot;&gt;dropDownVisible&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;
        })
      }
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(mySelect2.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; !== &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;){
        mySelect2.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{
          item.&lt;span class=&quot;hljs-property&quot;&gt;dropDownVisible&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;
        })
      }
    },  
    &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;exportHandler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){
      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;warningTip&lt;/span&gt;()
      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;btnLoading&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result = {}
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;modelType&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;){
        &lt;span class=&quot;hljs-comment&quot;&gt;// 建设方案&lt;/span&gt;
        result = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;exportModelContrastAnalsisApi&lt;/span&gt;({
          &lt;span class=&quot;hljs-attr&quot;&gt;modelIds&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;row&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;=&amp;gt;&lt;/span&gt;item.&lt;span class=&quot;hljs-property&quot;&gt;modelId&lt;/span&gt;),
          &lt;span class=&quot;hljs-attr&quot;&gt;modelSelects&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;analysisSelects&lt;/span&gt;
        })
      }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{
        result = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;exportModelContrastApi&lt;/span&gt;({
          &lt;span class=&quot;hljs-attr&quot;&gt;modelId&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;row&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;modelId&lt;/span&gt;,
          &lt;span class=&quot;hljs-attr&quot;&gt;contrastId&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;row&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;modelId&lt;/span&gt;
        })
      }
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(result?.&lt;span class=&quot;hljs-property&quot;&gt;status&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;){
        &lt;span class=&quot;hljs-title function_&quot;&gt;downloadFile&lt;/span&gt;(result.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&#39;结果对比数据&#39;&lt;/span&gt;)
      }
      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;btnLoading&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
    },
    &lt;span class=&quot;hljs-comment&quot;&gt;// 子组件触发父组件更新， 子组件下拉框选择以后从新拉取数据&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getAnalysisReuslt&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;res = &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;&lt;/span&gt;){
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(res){
        &lt;span class=&quot;hljs-comment&quot;&gt;// 将选中项加入缓存&lt;/span&gt;
        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;setAnalysisCatchList&lt;/span&gt;(res)
        &lt;span class=&quot;hljs-comment&quot;&gt;// 从选中的站场队列当中， 拿出当前需要更新的这一列模型的数据， 从新赋值选中项&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;analysisSelects&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;=&amp;gt;&lt;/span&gt;item.&lt;span class=&quot;hljs-property&quot;&gt;modelId&lt;/span&gt; === res.&lt;span class=&quot;hljs-property&quot;&gt;modelId&lt;/span&gt;)
        &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;(obj, res)
        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { selectSegmentCodes, selectStationCodes} = obj 
        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arr1 = selectSegmentCodes || []
        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arr2 = selectStationCodes || []
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(arr1.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; arr2.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;){
          &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.$message({
            &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;warning&#39;&lt;/span&gt;,
            &lt;span class=&quot;hljs-attr&quot;&gt;message&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;请至少选择一个站场或管段&#39;&lt;/span&gt;
          })
          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;
        }
      }
      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;loading&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;hljs-comment&quot;&gt;// 结果对比的时候 还是把全部的模型都传过去&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; result = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;modelContrastApi&lt;/span&gt;({
        &lt;span class=&quot;hljs-attr&quot;&gt;modelIds&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;row&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;=&amp;gt;&lt;/span&gt;item.&lt;span class=&quot;hljs-property&quot;&gt;modelId&lt;/span&gt;),
        &lt;span class=&quot;hljs-attr&quot;&gt;modelSelects&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;analysisSelects&lt;/span&gt; || []
      })
      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;loading&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { data, code  } = result
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(code === &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;){
        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;basisData&lt;/span&gt; = data
        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;analysisColumns&lt;/span&gt; = [...&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;basisColumns&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;(data.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;=&amp;gt;&lt;/span&gt;{
          &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { modelName,modelId }  =  item
          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {
            &lt;span class=&quot;hljs-attr&quot;&gt;label&lt;/span&gt;: modelName,
            &lt;span class=&quot;hljs-attr&quot;&gt;modelId&lt;/span&gt;: modelId,
            &lt;span class=&quot;hljs-attr&quot;&gt;prop&lt;/span&gt;: modelName,
          }
        }))
        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;analysisKey&lt;/span&gt;++
      }
    },
    &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;initAnalysisReuslt&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){
      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;this.&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;analysisCatchList&lt;/span&gt;)
      &lt;span class=&quot;hljs-comment&quot;&gt;// 如果 缓存当中 analysisCatchList 的值都是 null 的话， 则默认选择全部， 不需要携带 modelSelects 参数， 如果有的话 则 1 是携带参数 2 是同步子组件中 下拉框的选中项&lt;/span&gt;
      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;loading&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; result = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;modelContrastApi&lt;/span&gt;({
        &lt;span class=&quot;hljs-attr&quot;&gt;modelIds&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;row&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;=&amp;gt;&lt;/span&gt;item.&lt;span class=&quot;hljs-property&quot;&gt;modelId&lt;/span&gt;)
      })
      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;loading&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { data, code  } = testData
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(code === &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;){
        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;basisData&lt;/span&gt; = data
        &lt;span class=&quot;hljs-comment&quot;&gt;// 初始化选中项， 存储的队列中没有的话， 则默认选择全部&lt;/span&gt;
        &lt;span class=&quot;hljs-comment&quot;&gt;// this.basisData[0].basIndicators.segments = [{key:&#39;ABC&#39;, value:&#39;测试&#39;}]&lt;/span&gt;
        &lt;span class=&quot;hljs-comment&quot;&gt;// this.basisData[0].basIndicators.selectSegmentCodes = [&#39;ABC&#39;]&lt;/span&gt;
        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;analysisSelects&lt;/span&gt; = data.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;=&amp;gt;&lt;/span&gt;{
          &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { modelId, &lt;span class=&quot;hljs-attr&quot;&gt;basIndicators&lt;/span&gt;: {selectSegmentCodes, selectStationCodes} } = item
          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {
            modelId,
            selectSegmentCodes,
            selectStationCodes
          }
        })
        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;analysisColumns&lt;/span&gt; = [...&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;basisColumns&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;(data.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;=&amp;gt;&lt;/span&gt;{
          &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { modelName,modelId }  =  item
          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {
            &lt;span class=&quot;hljs-attr&quot;&gt;label&lt;/span&gt;: modelName,
            &lt;span class=&quot;hljs-attr&quot;&gt;modelId&lt;/span&gt;: modelId,
            &lt;span class=&quot;hljs-attr&quot;&gt;prop&lt;/span&gt;: modelName,
          }
        }))
      }
    },
    &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getBasicResult&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){
      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;loading&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;hljs-comment&quot;&gt;// 请求拿到数据以后， 处理表头 modelContrastApi&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; result = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;modelContrastApi&lt;/span&gt;({
        &lt;span class=&quot;hljs-attr&quot;&gt;modelId&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;row&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;modelId&lt;/span&gt;,
        &lt;span class=&quot;hljs-attr&quot;&gt;contrastId&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;row&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;modelId&lt;/span&gt;
      })
      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;loading&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { code , data } = result
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(code === &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;){
        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;basisData&lt;/span&gt; = data
        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;basisColumns&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;basisColumns&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;(data.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;=&amp;gt;&lt;/span&gt;{
          &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { modelName,modelId }  =  item
          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {
            &lt;span class=&quot;hljs-attr&quot;&gt;label&lt;/span&gt;: modelName,
            &lt;span class=&quot;hljs-attr&quot;&gt;modelId&lt;/span&gt;: modelId,
            &lt;span class=&quot;hljs-attr&quot;&gt;prop&lt;/span&gt;: modelName,
          }
        }))
      }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{
        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;basisColumns&lt;/span&gt; = []
      }
    }
  },
};
&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;scss&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;scoped&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;css&quot;&gt;
&lt;span class=&quot;hljs-selector-class&quot;&gt;.drawer-container&lt;/span&gt;{
  &lt;span class=&quot;hljs-attribute&quot;&gt;max-height&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;calc&lt;/span&gt;( &lt;span class=&quot;hljs-number&quot;&gt;100vh&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;120px&lt;/span&gt; );
  &lt;span class=&quot;hljs-attribute&quot;&gt;box-sizing&lt;/span&gt;: border-box;
  &lt;span class=&quot;hljs-attribute&quot;&gt;overflow-y&lt;/span&gt;: auto;
  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#FFF&lt;/span&gt;;
  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20px&lt;/span&gt;;
}
&lt;span class=&quot;hljs-selector-class&quot;&gt;.demo-drawer__footer&lt;/span&gt;{
  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;64px&lt;/span&gt;;
  &lt;span class=&quot;hljs-attribute&quot;&gt;border-top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt; solid &lt;span class=&quot;hljs-number&quot;&gt;#E8E8E8&lt;/span&gt;;
  &lt;span class=&quot;hljs-attribute&quot;&gt;box-sizing&lt;/span&gt;: border-box;
  &lt;span class=&quot;hljs-attribute&quot;&gt;padding-right&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20px&lt;/span&gt;;
  &lt;span class=&quot;hljs-attribute&quot;&gt;padding-top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;16px&lt;/span&gt;;
  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: inline-flex;
  &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;: end;
  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: absolute;
  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;
  &lt;span class=&quot;hljs-attribute&quot;&gt;bottom&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;
}
&lt;span class=&quot;hljs-selector-class&quot;&gt;.form-container&lt;/span&gt;{
  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;
  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20px&lt;/span&gt;;
  &lt;span class=&quot;hljs-attribute&quot;&gt;box-sizing&lt;/span&gt;: border-box;
}
::v-deep .el-drawer__header{
  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;56px&lt;/span&gt;;
  &lt;span class=&quot;hljs-attribute&quot;&gt;margin-bottom&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;
  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;12px&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20px&lt;/span&gt;;
  &lt;span class=&quot;hljs-attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;16px&lt;/span&gt;;
  &lt;span class=&quot;hljs-attribute&quot;&gt;border-bottom&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt; solid &lt;span class=&quot;hljs-number&quot;&gt;#E8E8E8&lt;/span&gt;;
  &lt;span class=&quot;hljs-attribute&quot;&gt;box-sizing&lt;/span&gt;: border-box;
  &lt;span class=&quot;hljs-attribute&quot;&gt;font-style&lt;/span&gt;: normal;
  &lt;span class=&quot;hljs-attribute&quot;&gt;font-weight&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;;
  &lt;span class=&quot;hljs-attribute&quot;&gt;line-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;22px&lt;/span&gt;;
}
::v-deep .el-form--label-top .el-form-item__label{
  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
}
::v-deep  input::-webkit-outer-spin-button,
::v-deep  input::-webkit-inner-spin-button {
        -webkit-appearance: none;
}
::v-deep  input[type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;number&quot;&lt;/span&gt;]{
    -moz-appearance: textfield;
}
::v-deep button{
  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;32px&lt;/span&gt;
}
&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;</description><link>https://juejin.cn/post/7483329945122799652</link><guid isPermaLink="false">https://juejin.cn/post/7483329945122799652</guid><pubDate>Wed, 19 Mar 2025 09:51:37 GMT</pubDate><author>code_Bo</author><category>前端</category><category>Vue.js</category><category>Element</category></item><item><title>🔥 Vue2 vs Vue3 的 h 函数终极指南：从入门到源码级深度解析</title><description>&lt;p&gt;大家好，我是鱼樱！！！&lt;/p&gt;
&lt;p&gt;关注公众号&lt;code&gt;【鱼樱AI实验室】&lt;/code&gt;持续每天分享更多前端和AI辅助前端编码新知识~~喜欢的就一起学反正开源至上，无所谓被诋毁被喷被质疑文章没有价值~~~坚持自己观点&lt;/p&gt;
&lt;p&gt;一个城市淘汰的自由职业-农村前端程序员（虽然不靠代码挣钱，写文章就是为爱发电），兼职远程上班目前！！！热心坚持分享~~~&lt;/p&gt;
&lt;h2 data-id=&quot;heading-0&quot;&gt;📜 目录&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://juejin.cn/post/7482957797770166307#-%E4%BB%80%E4%B9%88%E6%98%AF-h-%E5%87%BD%E6%95%B0&quot; title=&quot;#-%E4%BB%80%E4%B9%88%E6%98%AF-h-%E5%87%BD%E6%95%B0&quot;&gt;什么是 h 函数？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://juejin.cn/post/7482957797770166307#-%E6%A0%B8%E5%BF%83%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86&quot; title=&quot;#-%E6%A0%B8%E5%BF%83%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86&quot;&gt;核心作用与原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://juejin.cn/post/7482957797770166307#-vue2-vs-vue3-%E7%94%A8%E6%B3%95%E5%AF%B9%E6%AF%94&quot; title=&quot;#-vue2-vs-vue3-%E7%94%A8%E6%B3%95%E5%AF%B9%E6%AF%94&quot;&gt;Vue2 vs Vue3 用法对比&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://juejin.cn/post/7482957797770166307#-%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B%E5%AF%B9%E6%AF%94&quot; title=&quot;#-%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B%E5%AF%B9%E6%AF%94&quot;&gt;实战案例对比&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://juejin.cn/post/7482957797770166307#-%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90&quot; title=&quot;#-%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90&quot;&gt;底层原理与源码分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://juejin.cn/post/7482957797770166307#-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9&quot; title=&quot;#-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9&quot;&gt;最佳实践与注意事项&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 data-id=&quot;heading-1&quot;&gt;🌟 什么是 h 函数？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;h 函数（Hyperscript）&lt;/strong&gt; 是 Vue 中用于创建虚拟 DOM 节点的核心函数。它是模板编译的底层实现，能直接操作虚拟 DOM，适用于需要极致灵活性的场景。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-2&quot;&gt;核心特点：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;声明式渲染&lt;/strong&gt;：比直接操作 DOM 更高效&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态构建能力&lt;/strong&gt;：可在 JavaScript 中直接构造复杂 UI 逻辑&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模板的替代方案&lt;/strong&gt;：当模板语法无法满足需求时的终极武器&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 data-id=&quot;heading-3&quot;&gt;🧠 核心作用与原理&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-4&quot;&gt;核心作用&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;创建虚拟 DOM 节点（VNode）&lt;/li&gt;
&lt;li&gt;实现模板的底层渲染逻辑&lt;/li&gt;
&lt;li&gt;支持 JSX 和自定义渲染逻辑&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 data-id=&quot;heading-5&quot;&gt;实现原理&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-bash&quot; lang=&quot;bash&quot;&gt;模板/JSX → 编译 → h 函数调用 → 虚拟 DOM → 真实 DOM
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-6&quot;&gt;虚拟 DOM 优化：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Vue2&lt;/strong&gt;：全量对比虚拟 DOM&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vue3&lt;/strong&gt;：静态标记 + 靶向更新（性能提升 200%）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 data-id=&quot;heading-7&quot;&gt;⚔️ Vue2 vs Vue3 用法对比&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-8&quot;&gt;参数结构对比&lt;/h3&gt;



































&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;特性&lt;/th&gt;&lt;th&gt;Vue2&lt;/th&gt;&lt;th&gt;Vue3&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;导入方式&lt;/td&gt;&lt;td&gt;自动注入&lt;/td&gt;&lt;td&gt;需要显式导入&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;参数结构&lt;/td&gt;&lt;td&gt;&lt;code&gt;h(tag, data, children)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;h(tag, props, children)&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;事件监听&lt;/td&gt;&lt;td&gt;&lt;code&gt;on: { click: handler }&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;onClick: handler&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Props 传递&lt;/td&gt;&lt;td&gt;&lt;code&gt;props: { ... }&lt;/code&gt;&lt;/td&gt;&lt;td&gt;直接作为对象属性&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;默认插槽&lt;/td&gt;&lt;td&gt;&lt;code&gt;this.$slots.default&lt;/code&gt;&lt;/td&gt;&lt;td&gt;通过 &lt;code&gt;slots.default()&lt;/code&gt; 访问&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;hr&gt;
&lt;h2 data-id=&quot;heading-9&quot;&gt;💻 实战案例对比&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-10&quot;&gt;案例 1：基础按钮组件&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-11&quot;&gt;Vue2 实现&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; {
  &lt;span class=&quot;hljs-title function_&quot;&gt;render&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;h&lt;/span&gt;) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// dom&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;h&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;button&#39;&lt;/span&gt;, {
      &lt;span class=&quot;hljs-comment&quot;&gt;// attr&lt;/span&gt;
      &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;btn&#39;&lt;/span&gt;,
      &lt;span class=&quot;hljs-comment&quot;&gt;// 事件&lt;/span&gt;
      &lt;span class=&quot;hljs-attr&quot;&gt;on&lt;/span&gt;: {
        &lt;span class=&quot;hljs-attr&quot;&gt;click&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;handleClick&lt;/span&gt;
      }
      &lt;span class=&quot;hljs-comment&quot;&gt;// 获取默认插槽的内容&lt;/span&gt;
    }, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;$slots&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;default&lt;/span&gt;)
  },
  &lt;span class=&quot;hljs-attr&quot;&gt;methods&lt;/span&gt;: {
    &lt;span class=&quot;hljs-title function_&quot;&gt;handleClick&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Vue2 按钮点击!&#39;&lt;/span&gt;)
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-12&quot;&gt;Vue3 实现&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { h } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;vue&#39;&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; {
  &lt;span class=&quot;hljs-title function_&quot;&gt;setup&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;handleClick&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {
      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Vue3 按钮点击!&#39;&lt;/span&gt;)
    }

    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;h&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;button&#39;&lt;/span&gt;, {
      &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;btn&#39;&lt;/span&gt;,
      &lt;span class=&quot;hljs-attr&quot;&gt;onClick&lt;/span&gt;: handleClick
    }, slots.&lt;span class=&quot;hljs-property&quot;&gt;default&lt;/span&gt;?.())
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-13&quot;&gt;案例 2：动态列表渲染&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-14&quot;&gt;Vue2 实现&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;render&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;h&lt;/span&gt;) {
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;h&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;ul&#39;&lt;/span&gt;, 
    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; 
      &lt;span class=&quot;hljs-title function_&quot;&gt;h&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;li&#39;&lt;/span&gt;, { &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt;: item.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt; }, item.&lt;span class=&quot;hljs-property&quot;&gt;text&lt;/span&gt;)
    )
  )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-15&quot;&gt;Vue3 实现&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { h } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;vue&#39;&lt;/span&gt;

&lt;span class=&quot;hljs-title function_&quot;&gt;setup&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;h&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;ul&#39;&lt;/span&gt;, 
    items.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-title function_&quot;&gt;h&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;li&#39;&lt;/span&gt;, { &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt;: item.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt; }, item.&lt;span class=&quot;hljs-property&quot;&gt;text&lt;/span&gt;)
    )
  )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 data-id=&quot;heading-16&quot;&gt;🔍 底层原理与源码分析&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-17&quot;&gt;Vue2 实现原理&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 简化版 h 函数实现&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;h&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;tag, data, children&lt;/span&gt;) {
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {
    &lt;span class=&quot;hljs-attr&quot;&gt;__v_isVNode&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,
    tag,
    data,
    children,
    &lt;span class=&quot;hljs-comment&quot;&gt;// ...其他属性&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-18&quot;&gt;Vue3 优化实现&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Vue3 的 createVNode 函数&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;createVNode&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;type, props, children&lt;/span&gt;) {
  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; vnode = {
    &lt;span class=&quot;hljs-attr&quot;&gt;__v_isVNode&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,
    type,
    props,
    children,
    &lt;span class=&quot;hljs-attr&quot;&gt;shapeFlag&lt;/span&gt;: &lt;span class=&quot;hljs-title function_&quot;&gt;getShapeFlag&lt;/span&gt;(type),
    &lt;span class=&quot;hljs-comment&quot;&gt;// ...新增 patchFlag 进行靶向更新&lt;/span&gt;
  }
  &lt;span class=&quot;hljs-comment&quot;&gt;// 静态节点标记优化&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;isStaticVNode&lt;/span&gt;(vnode)) {
    vnode.&lt;span class=&quot;hljs-property&quot;&gt;patchFlag&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;PatchFlags&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;STABLE&lt;/span&gt;
  }
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; vnode
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 data-id=&quot;heading-19&quot;&gt;🚀 最佳实践与注意事项&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-20&quot;&gt;最佳实践&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;优先使用模板&lt;/strong&gt;：90% 场景下模板更合适&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;合理使用 JSX&lt;/strong&gt;：复杂逻辑时更直观&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存静态节点&lt;/strong&gt;：利用 Vue3 的静态提升特性&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 data-id=&quot;heading-21&quot;&gt;常见陷阱&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-markdown&quot; lang=&quot;markdown&quot;&gt;&lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; 🚫 Vue2 中忘记写 &lt;span class=&quot;hljs-code&quot;&gt;`this.$slots`&lt;/span&gt;
&lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; 🚫 Vue3 中未正确导入 h 函数
&lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; 🚫 错误处理事件绑定语法（&lt;span class=&quot;hljs-code&quot;&gt;`onClick`&lt;/span&gt; vs &lt;span class=&quot;hljs-code&quot;&gt;`on:click`&lt;/span&gt;）
&lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; 🚫 忘记添加 &lt;span class=&quot;hljs-code&quot;&gt;`key`&lt;/span&gt; 属性导致渲染异常
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 data-id=&quot;heading-22&quot;&gt;📌 总结&lt;/h2&gt;






























&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;维度&lt;/th&gt;&lt;th&gt;Vue2&lt;/th&gt;&lt;th&gt;Vue3&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;性能&lt;/td&gt;&lt;td&gt;中等&lt;/td&gt;&lt;td&gt;优化后提升 200%&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;语法简洁性&lt;/td&gt;&lt;td&gt;较传统&lt;/td&gt;&lt;td&gt;更现代化&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;类型支持&lt;/td&gt;&lt;td&gt;有限&lt;/td&gt;&lt;td&gt;完美 TS 支持&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;扩展能力&lt;/td&gt;&lt;td&gt;普通&lt;/td&gt;&lt;td&gt;支持自定义渲染器&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;掌握 h 函数的使用，你将获得：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;🔧 更强大的动态组件构建能力&lt;/li&gt;
&lt;li&gt;🚤 更精细的性能优化手段&lt;/li&gt;
&lt;li&gt;🧩 更深入理解 Vue 的渲染机制&lt;/li&gt;
&lt;/ul&gt;</description><link>https://juejin.cn/post/7482957797770166307</link><guid isPermaLink="false">https://juejin.cn/post/7482957797770166307</guid><pubDate>Tue, 18 Mar 2025 15:09:48 GMT</pubDate><author>鱼樱前端</author><category>前端</category><category>Vue.js</category></item><item><title>💯 铜三铁四，我收集整理了这些大厂面试场景题 （一）</title><description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fwww.codecrack.cn%2Fzh&quot; target=&quot;_blank&quot; title=&quot;https://www.codecrack.cn/zh&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;面试导航&lt;/a&gt; 是一个专注于前、后端技术学习和面试准备的 &lt;strong&gt;免费&lt;/strong&gt; 学习平台，提供系统化的技术栈学习，深入讲解每个知识点的核心原理，帮助开发者构建全面的技术体系。平台还收录了大量真实的校招与社招面经，帮助你快速掌握面试技巧，提升求职竞争力。如果你想加入我们的交流群，欢迎通过微信联系：&lt;code&gt;yunmz777&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/72503b79d6cb401bbc2338c834ad774a~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTW9tZW50:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742913974&amp;amp;x-signature=q8Z%2FJuYXH%2F8XYAvRaw4r%2F%2F0mY7c%3D&quot; alt=&quot;20250310220634&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h2 data-id=&quot;heading-0&quot;&gt;并发请求来不及写数据库怎么办&lt;/h2&gt;
&lt;p&gt;在并发请求时，如果写数据库操作来不及执行，可以考虑以下几种解决方案：&lt;/p&gt;
&lt;h4 data-id=&quot;heading-1&quot;&gt;1. &lt;strong&gt;使用队列（Queue）&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;将所有的数据库写入操作放入队列中，按顺序依次处理，避免数据库操作被并发请求压垮。&lt;/p&gt;
&lt;h5 data-id=&quot;heading-2&quot;&gt;解决方案：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将写入数据库的请求加入到队列中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每次从队列中取出一个请求，执行数据库操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;strong&gt;异步任务&lt;/strong&gt; 或 &lt;strong&gt;队列系统&lt;/strong&gt;（如 &lt;strong&gt;RabbitMQ&lt;/strong&gt;、&lt;strong&gt;Redis Queue&lt;/strong&gt; 等）来确保数据库操作按顺序执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-3&quot;&gt;2. &lt;strong&gt;批量处理&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;将多个数据库操作合并成一个批量操作进行写入，减少数据库写入次数，从而提升性能。&lt;/p&gt;
&lt;h5 data-id=&quot;heading-4&quot;&gt;解决方案：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将多个并发请求的数据收集到一起，在适当的时机批量插入数据库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以使用 &lt;strong&gt;事务&lt;/strong&gt; 来保证批量写入的原子性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-5&quot;&gt;3. &lt;strong&gt;数据库写入优化&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;通过优化数据库的写入性能，减少每次写入的延迟。可以使用以下方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据库索引优化&lt;/strong&gt;：避免频繁更新索引，提高写入速度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;异步写入&lt;/strong&gt;：如果数据库操作不要求立即生效，可以将写入操作异步化，允许系统继续处理其他请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;缓存写入&lt;/strong&gt;：可以将数据缓存到内存（如 Redis），然后定期或在后台批量写入数据库。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-6&quot;&gt;4. &lt;strong&gt;分布式锁&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;如果并发请求对同一资源进行修改，可以使用 &lt;strong&gt;分布式锁&lt;/strong&gt;（如 &lt;strong&gt;RedLock&lt;/strong&gt;）来确保只有一个请求在某个时刻能写入数据库，避免竞态条件。&lt;/p&gt;
&lt;h5 data-id=&quot;heading-7&quot;&gt;解决方案：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;在操作数据库时，使用分布式锁，保证每次只有一个请求能够访问数据库写入操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-8&quot;&gt;总结：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;strong&gt;队列&lt;/strong&gt; 和 &lt;strong&gt;批量处理&lt;/strong&gt; 解决并发写入问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 &lt;strong&gt;数据库写入优化&lt;/strong&gt; 和 &lt;strong&gt;异步操作&lt;/strong&gt; 提升性能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果涉及同一资源，可以使用 &lt;strong&gt;分布式锁&lt;/strong&gt; 来确保写操作不会冲突。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 data-id=&quot;heading-9&quot;&gt;客户跟你抱怨网页太慢，你怎么用客户电脑定位问题？&lt;/h2&gt;
&lt;p&gt;当客户抱怨网页太慢时，你需要用客户的电脑进行排查，找出具体的性能瓶颈。你可以按照以下步骤进行分析：&lt;/p&gt;
&lt;h3 data-id=&quot;heading-10&quot;&gt;&lt;strong&gt;1. 了解具体问题&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;首先，和客户沟通，获取更多细节：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;网页是整体慢，还是特定页面或功能慢？&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;是在所有设备和网络环境下都慢，还是只在客户的电脑上慢？&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;是首次加载慢，还是每次都慢？&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;具体慢在哪里？是页面打开慢、加载资源慢、交互延迟，还是某些按钮点击无响应？&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些信息能帮助你缩小排查范围。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-11&quot;&gt;&lt;strong&gt;2. 用开发者工具（F12）进行性能分析&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在客户的浏览器（Chrome、Edge、Firefox）中打开 &lt;strong&gt;开发者工具&lt;/strong&gt;（按 &lt;code&gt;F12&lt;/code&gt; 或 &lt;code&gt;Ctrl + Shift + I&lt;/code&gt;），然后检查以下几个关键点：&lt;/p&gt;
&lt;h4 data-id=&quot;heading-12&quot;&gt;&lt;strong&gt;（1）网络（Network）面板&lt;/strong&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;让客户刷新页面（&lt;code&gt;Ctrl + R&lt;/code&gt; 或 &lt;code&gt;F5&lt;/code&gt;）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看 &lt;strong&gt;“DOMContentLoaded”&lt;/strong&gt; 和 &lt;strong&gt;“Load”&lt;/strong&gt; 时间：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DOMContentLoaded&lt;/code&gt; 代表 HTML 和同步 JavaScript 解析完成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Load&lt;/code&gt; 代表所有资源（图片、CSS、JS 等）加载完成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 &lt;strong&gt;“DOMContentLoaded”&lt;/strong&gt; 非常慢，说明 HTML 或者 JavaScript 解析有问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 &lt;strong&gt;“Load”&lt;/strong&gt; 时间很长，可能是资源加载过多、CDN 问题、服务器响应慢等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;检查加载资源&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;找出 &lt;strong&gt;加载时间最长的资源&lt;/strong&gt;，可能是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;某个图片/视频太大，导致加载过慢。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;某个 API 请求慢，导致数据获取延迟。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;某个 JS 或 CSS 资源加载太久，影响渲染。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;检查是否有失败的请求&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;404、500、504 错误可能影响页面加载速度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 data-id=&quot;heading-13&quot;&gt;&lt;strong&gt;（2）性能（Performance）面板&lt;/strong&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;录制页面加载情况&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;点击 &lt;code&gt;Record&lt;/code&gt;，然后刷新页面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看 &lt;strong&gt;主线程（Main Thread）&lt;/strong&gt; 是否有长时间的任务阻塞页面交互。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;检查渲染阻塞&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;过多的 JavaScript 执行可能会导致渲染卡顿。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 data-id=&quot;heading-14&quot;&gt;&lt;strong&gt;（3）JavaScript Profiler&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;code&gt;Performance&lt;/code&gt; 里检查 &lt;strong&gt;脚本执行是否占用过多时间&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;过多的 JS 可能会导致浏览器 &lt;strong&gt;主线程阻塞&lt;/strong&gt;，影响页面交互流畅度。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-id=&quot;heading-15&quot;&gt;&lt;strong&gt;3. 运行 Chrome Lighthouse 进行优化分析&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;code&gt;开发者工具 -&amp;gt; Lighthouse&lt;/code&gt; 选项卡中，选择 &lt;code&gt;Performance&lt;/code&gt; 进行评测。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分析得分，看看是否有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;服务器响应时间过长&lt;/strong&gt;（TTFB 高）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;图片优化不足&lt;/strong&gt;（未使用 WebP）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;过大的 JS 或 CSS 资源&lt;/strong&gt;（未压缩）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;阻塞渲染的资源&lt;/strong&gt;（JS、CSS 影响首屏渲染）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-16&quot;&gt;&lt;strong&gt;4. 检查客户电脑和网络&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-17&quot;&gt;&lt;strong&gt;（1）检查网络速度&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;让客户 &lt;strong&gt;测试网络&lt;/strong&gt;（如 &lt;code&gt;speedtest.net&lt;/code&gt;），检查：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;带宽是否够快？&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;延迟是否过高？&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;是否是 WiFi 连接问题？&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;是否有其他设备占用大量带宽？&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-18&quot;&gt;&lt;strong&gt;（2）检查 DNS 解析&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;让客户 &lt;code&gt;ping&lt;/code&gt; 网站：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-sh&quot; lang=&quot;sh&quot;&gt;ping example.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果延迟高，可能是 &lt;strong&gt;DNS 解析慢&lt;/strong&gt;，建议换 &lt;strong&gt;Google DNS（8.8.8.8）&lt;/strong&gt; 或 &lt;strong&gt;Cloudflare DNS（1.1.1.1）&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;也可以 &lt;code&gt;nslookup&lt;/code&gt; 或 &lt;code&gt;tracert&lt;/code&gt; 进行进一步排查：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-sh&quot; lang=&quot;sh&quot;&gt;nslookup example.com
tracert example.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-19&quot;&gt;&lt;strong&gt;（3）检查 CPU、内存、磁盘&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;如果客户电脑很慢&lt;/strong&gt;，可能是 CPU 或 内存使用率过高：
&lt;ol&gt;
&lt;li&gt;打开 &lt;code&gt;任务管理器（Ctrl + Shift + Esc）&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;查看 &lt;strong&gt;CPU、内存、磁盘占用&lt;/strong&gt;，是否有异常进程。&lt;/li&gt;
&lt;li&gt;关闭不必要的后台程序。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-20&quot;&gt;&lt;strong&gt;5. 服务器端排查&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;如果本地检查没问题，可能是服务器问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;服务器响应时间（TTFB）是否过高？&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CDN 访问是否正常？&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API 响应时间是否太长？&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库查询是否耗时过长？&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以让客户在终端运行：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-sh&quot; lang=&quot;sh&quot;&gt;curl -o /dev/null -s -w &lt;span class=&quot;hljs-string&quot;&gt;&quot;%{time_total}\n&quot;&lt;/span&gt; https://example.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;看看总响应时间是否过长。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-21&quot;&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;如果客户电脑网页加载慢，应该按照以下步骤排查：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;和客户确认具体问题（网页整体慢？交互慢？资源加载慢？）&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用 F12 开发者工具分析&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Network&lt;/code&gt; 面板检查 &lt;strong&gt;资源加载&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Performance&lt;/code&gt; 面板检查 &lt;strong&gt;渲染阻塞&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Lighthouse&lt;/code&gt; 评测优化建议&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;检查客户网络&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;speedtest&lt;/code&gt; 进行网络测速&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ping&lt;/code&gt; 检测延迟&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nslookup&lt;/code&gt; 和 &lt;code&gt;tracert&lt;/code&gt; 追踪域名解析&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;检查客户电脑&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任务管理器查看 &lt;strong&gt;CPU、内存、磁盘占用&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;服务器端检查&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;服务器响应是否正常&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;API 响应时间是否过长&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;是否有数据库性能问题&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过这个流程，能有效定位问题并给客户提供优化方案！&lt;/p&gt;
&lt;h2 data-id=&quot;heading-22&quot;&gt;控制请求并发的数量，例如有8个请求需要发送，如何控制同时只能并行发送两个请求&lt;/h2&gt;
&lt;p&gt;控制请求并发数量，确保一次只能并行发送指定数量的请求（例如同时只并行发送两个请求），可以使用多种方法。这里有几种常见的解决方案：&lt;/p&gt;
&lt;h4 data-id=&quot;heading-23&quot;&gt;1. &lt;strong&gt;使用 Promise 和 async/await 控制并发&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;我们可以使用 &lt;strong&gt;&lt;code&gt;async/await&lt;/code&gt;&lt;/strong&gt; 和 &lt;strong&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/strong&gt; 来控制并发请求的数量，使用 &lt;strong&gt;&lt;code&gt;for&lt;/code&gt; 循环&lt;/strong&gt; 或 &lt;strong&gt;&lt;code&gt;map&lt;/code&gt;&lt;/strong&gt; 来逐步发送请求，并确保在每次请求完成后再开始下一个请求。&lt;/p&gt;
&lt;h5 data-id=&quot;heading-24&quot;&gt;示例代码：&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sendRequests&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;requests, maxConcurrency&lt;/span&gt;) {
  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; index = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;

  &lt;span class=&quot;hljs-comment&quot;&gt;// 控制并发请求的函数&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;handleRequest&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (index &amp;gt;= requests.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;

    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; currentIndex = index++; &lt;span class=&quot;hljs-comment&quot;&gt;// 获取当前请求索引&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; requests[currentIndex](); &lt;span class=&quot;hljs-comment&quot;&gt;// 等待当前请求完成&lt;/span&gt;
    &lt;span class=&quot;hljs-title function_&quot;&gt;handleRequest&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// 发起下一个请求&lt;/span&gt;
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;// 初始化最大并发请求数量&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; concurrencyPromises = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;(
    { &lt;span class=&quot;hljs-attr&quot;&gt;length&lt;/span&gt;: maxConcurrency },
    handleRequest
  );

  &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;(concurrencyPromises); &lt;span class=&quot;hljs-comment&quot;&gt;// 等待所有并发请求完成&lt;/span&gt;
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 示例：模拟 8 个请求，最多并发 2 个&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; requests = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;(
  { &lt;span class=&quot;hljs-attr&quot;&gt;length&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; },
  &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_, i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`Request &lt;span class=&quot;hljs-subst&quot;&gt;${i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}&lt;/span&gt; started`&lt;/span&gt;);
      &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {
        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`Request &lt;span class=&quot;hljs-subst&quot;&gt;${i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}&lt;/span&gt; finished`&lt;/span&gt;);
        &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;();
      }, &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 随机延时模拟请求&lt;/span&gt;
    })
);

&lt;span class=&quot;hljs-title function_&quot;&gt;sendRequests&lt;/span&gt;(requests, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 data-id=&quot;heading-25&quot;&gt;解释：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;requests&lt;/code&gt;&lt;/strong&gt; 是一个包含 8 个请求的数组，每个请求用一个返回 &lt;code&gt;Promise&lt;/code&gt; 的函数表示。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;maxConcurrency&lt;/code&gt;&lt;/strong&gt; 控制并发请求的数量（本例中是 2）。&lt;/li&gt;
&lt;li&gt;使用 &lt;strong&gt;&lt;code&gt;handleRequest&lt;/code&gt;&lt;/strong&gt; 函数逐个处理请求，确保同一时间内只会有最多 2 个请求在并发执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-26&quot;&gt;2. &lt;strong&gt;使用队列控制并发&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;通过使用一个 &lt;strong&gt;队列&lt;/strong&gt; 来控制请求的发送。每次发送请求时，从队列中取出一个任务并执行，同时控制并发数量。&lt;/p&gt;
&lt;h5 data-id=&quot;heading-27&quot;&gt;示例代码：&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;controlConcurrency&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;requests, maxConcurrency&lt;/span&gt;) {
  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; queue = [...requests]; &lt;span class=&quot;hljs-comment&quot;&gt;// 请求队列&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; running = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// 当前并发数&lt;/span&gt;

  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;processQueue&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (queue.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; running &amp;lt; maxConcurrency) {
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; request = queue.&lt;span class=&quot;hljs-title function_&quot;&gt;shift&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// 从队列中取出请求&lt;/span&gt;
      running++;
      &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;request&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// 执行请求&lt;/span&gt;
      running--;
      &lt;span class=&quot;hljs-title function_&quot;&gt;processQueue&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// 递归调用，继续处理队列中的请求&lt;/span&gt;
    }
  };

  &lt;span class=&quot;hljs-title function_&quot;&gt;processQueue&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// 初始化请求队列处理&lt;/span&gt;
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 示例：模拟 8 个请求，最多并发 2 个&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; requests = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;(
  { &lt;span class=&quot;hljs-attr&quot;&gt;length&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; },
  &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_, i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`Request &lt;span class=&quot;hljs-subst&quot;&gt;${i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}&lt;/span&gt; started`&lt;/span&gt;);
      &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {
        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`Request &lt;span class=&quot;hljs-subst&quot;&gt;${i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}&lt;/span&gt; finished`&lt;/span&gt;);
        &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;();
      }, &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 随机延时模拟请求&lt;/span&gt;
    })
);

&lt;span class=&quot;hljs-title function_&quot;&gt;controlConcurrency&lt;/span&gt;(requests, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 data-id=&quot;heading-28&quot;&gt;解释：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/strong&gt; 存储所有待请求的任务，每次从队列中取出一个任务并执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;running&lt;/code&gt;&lt;/strong&gt; 控制当前正在执行的请求数量，确保并发数不会超过 &lt;code&gt;maxConcurrency&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;当并发数低于最大限制时，自动从队列中获取新的任务并执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-29&quot;&gt;3. &lt;strong&gt;使用第三方库（如 &lt;code&gt;p-limit&lt;/code&gt;）&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;使用第三方库，如 &lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fp-limit&quot; target=&quot;_blank&quot; title=&quot;https://www.npmjs.com/package/p-limit&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;p-limit&lt;/a&gt;，可以方便地控制并发数量，限制同时运行的 Promise 数量。&lt;/p&gt;
&lt;h5 data-id=&quot;heading-30&quot;&gt;示例代码：&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-bash&quot; lang=&quot;bash&quot;&gt;npm install p-limit
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; pLimit = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;p-limit&quot;&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; limit = &lt;span class=&quot;hljs-title function_&quot;&gt;pLimit&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 设置最大并发数量为 2&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; requests = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;(
  { &lt;span class=&quot;hljs-attr&quot;&gt;length&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; },
  &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_, i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`Request &lt;span class=&quot;hljs-subst&quot;&gt;${i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}&lt;/span&gt; started`&lt;/span&gt;);
      &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {
        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`Request &lt;span class=&quot;hljs-subst&quot;&gt;${i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}&lt;/span&gt; finished`&lt;/span&gt;);
        &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;();
      }, &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 随机延时模拟请求&lt;/span&gt;
    })
);

&lt;span class=&quot;hljs-comment&quot;&gt;// 使用 p-limit 限制并发&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; limitedRequests = requests.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;request&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;limit&lt;/span&gt;(request));

&lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;(limitedRequests).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;All requests completed&quot;&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 data-id=&quot;heading-31&quot;&gt;解释：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;p-limit&lt;/code&gt;&lt;/strong&gt; 库让你可以创建一个限制并发数的函数。每个请求都被包装在 &lt;code&gt;limit()&lt;/code&gt; 中，最大并发数为 2。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;Promise.all()&lt;/code&gt; 来等待所有请求完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-32&quot;&gt;总结：&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;使用 &lt;code&gt;async/await&lt;/code&gt; 和 &lt;code&gt;Promise&lt;/code&gt;&lt;/strong&gt;：逐个发起请求，确保每次只有 &lt;code&gt;maxConcurrency&lt;/code&gt; 个并发请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用队列&lt;/strong&gt;：通过队列来管理请求，确保在并发数限制下按顺序发起请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用第三方库（如 &lt;code&gt;p-limit&lt;/code&gt;）&lt;/strong&gt;：使用库来简化并发控制，限制同时运行的 Promise 数量。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些方法都能有效控制并发请求的数量，避免一次性发送过多请求导致性能问题。根据你的需求选择最适合的方式。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-33&quot;&gt;埋点mdn还没加载出来，怎么对页面之前的操作进行一个记录？&lt;/h2&gt;
&lt;p&gt;如果在页面加载过程中，埋点的 &lt;strong&gt;MDN&lt;/strong&gt; 相关脚本（如 JavaScript 或分析工具）尚未加载完成，你可以通过以下几种方式来对页面之前的操作进行记录：&lt;/p&gt;
&lt;h4 data-id=&quot;heading-34&quot;&gt;1. &lt;strong&gt;使用本地存储（LocalStorage 或 SessionStorage）&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;在 MDN 脚本加载之前，可以将用户的操作记录到 &lt;strong&gt;&lt;code&gt;localStorage&lt;/code&gt;&lt;/strong&gt; 或 &lt;strong&gt;&lt;code&gt;sessionStorage&lt;/code&gt;&lt;/strong&gt; 中，等到 MDN 脚本加载完成后再将这些记录发送到服务器或分析工具。&lt;/p&gt;
&lt;h5 data-id=&quot;heading-35&quot;&gt;方案：&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;在用户执行的操作时，记录到 &lt;code&gt;localStorage&lt;/code&gt; 或 &lt;code&gt;sessionStorage&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;等 MDN 脚本加载完成后，再从存储中获取数据并进行提交。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 data-id=&quot;heading-36&quot;&gt;示例：&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 用户操作时记录到 sessionStorage&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;trackAction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;action&lt;/span&gt;) {
  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; actions = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(sessionStorage.&lt;span class=&quot;hljs-title function_&quot;&gt;getItem&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;actions&quot;&lt;/span&gt;)) || [];
  actions.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(action);
  sessionStorage.&lt;span class=&quot;hljs-title function_&quot;&gt;setItem&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;actions&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(actions));
}

&lt;span class=&quot;hljs-comment&quot;&gt;// MDN 脚本加载完成后处理操作记录&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;processStoredActions&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; actions = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(sessionStorage.&lt;span class=&quot;hljs-title function_&quot;&gt;getItem&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;actions&quot;&lt;/span&gt;));
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (actions) {
    actions.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;action&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
      &lt;span class=&quot;hljs-comment&quot;&gt;// 向埋点工具发送数据&lt;/span&gt;
      &lt;span class=&quot;hljs-title function_&quot;&gt;sendToAnalytics&lt;/span&gt;(action);
    });
  }
  sessionStorage.&lt;span class=&quot;hljs-title function_&quot;&gt;removeItem&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;actions&quot;&lt;/span&gt;);
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 模拟发送数据到分析工具&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sendToAnalytics&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;action&lt;/span&gt;) {
  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sending action to analytics:&quot;&lt;/span&gt;, action);
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 示例：用户点击按钮&lt;/span&gt;
&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;btn&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
  &lt;span class=&quot;hljs-title function_&quot;&gt;trackAction&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Button Clicked&quot;&lt;/span&gt;);
});

&lt;span class=&quot;hljs-comment&quot;&gt;// 假设 MDN 脚本加载完毕时，调用 processStoredActions&lt;/span&gt;
&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;load&quot;&lt;/span&gt;, processStoredActions);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-37&quot;&gt;2. &lt;strong&gt;使用队列（Queue）&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;在 MDN 脚本加载前，将所有操作放入一个队列中，等脚本加载完成后再统一发送请求。&lt;/p&gt;
&lt;h5 data-id=&quot;heading-38&quot;&gt;方案：&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;将用户的操作推入一个队列中。&lt;/li&gt;
&lt;li&gt;等 MDN 脚本加载完成后，遍历队列并发送操作记录。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 data-id=&quot;heading-39&quot;&gt;示例：&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 创建一个操作队列&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; actionQueue = [];

&lt;span class=&quot;hljs-comment&quot;&gt;// 用户操作时推送到队列&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;trackAction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;action&lt;/span&gt;) {
  actionQueue.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(action);
}

&lt;span class=&quot;hljs-comment&quot;&gt;// MDN 脚本加载完成后处理操作队列&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;processQueue&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
  actionQueue.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;action&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 向埋点工具发送数据&lt;/span&gt;
    &lt;span class=&quot;hljs-title function_&quot;&gt;sendToAnalytics&lt;/span&gt;(action);
  });
  actionQueue.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// 清空队列&lt;/span&gt;
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 模拟发送数据到分析工具&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sendToAnalytics&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;action&lt;/span&gt;) {
  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sending action to analytics:&quot;&lt;/span&gt;, action);
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 示例：用户点击按钮&lt;/span&gt;
&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;btn&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
  &lt;span class=&quot;hljs-title function_&quot;&gt;trackAction&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Button Clicked&quot;&lt;/span&gt;);
});

&lt;span class=&quot;hljs-comment&quot;&gt;// MDN 脚本加载完毕时，调用 processQueue&lt;/span&gt;
&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;load&quot;&lt;/span&gt;, processQueue);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-40&quot;&gt;3. &lt;strong&gt;使用 &lt;code&gt;setTimeout&lt;/code&gt; 或 &lt;code&gt;setInterval&lt;/code&gt; 检测 MDN 脚本加载&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;你可以定期检查 MDN 埋点脚本是否已经加载完成，加载完成后立即发送存储的操作记录。&lt;/p&gt;
&lt;h5 data-id=&quot;heading-41&quot;&gt;方案：&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;使用 &lt;strong&gt;&lt;code&gt;setTimeout&lt;/code&gt;&lt;/strong&gt; 或 &lt;strong&gt;&lt;code&gt;setInterval&lt;/code&gt;&lt;/strong&gt; 定期检查 MDN 脚本是否已加载。&lt;/li&gt;
&lt;li&gt;如果加载完成，将之前的操作记录发送到 MDN。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 data-id=&quot;heading-42&quot;&gt;示例：&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; mdnLoaded = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; actionQueue = [];

&lt;span class=&quot;hljs-comment&quot;&gt;// 检查 MDN 脚本是否加载&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;checkMDNScript&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;mdnAnalytics&lt;/span&gt; !== &lt;span class=&quot;hljs-string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 假设 mdnAnalytics 是埋点工具的对象&lt;/span&gt;
    mdnLoaded = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;
    &lt;span class=&quot;hljs-title function_&quot;&gt;processQueue&lt;/span&gt;();
  }
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 用户操作时推送到队列&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;trackAction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;action&lt;/span&gt;) {
  actionQueue.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(action);
}

&lt;span class=&quot;hljs-comment&quot;&gt;// MDN 脚本加载完毕后处理操作队列&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;processQueue&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (mdnLoaded) {
    actionQueue.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;action&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
      &lt;span class=&quot;hljs-title function_&quot;&gt;sendToAnalytics&lt;/span&gt;(action);
    });
    actionQueue.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// 清空队列&lt;/span&gt;
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(checkMDNScript, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 每100ms检测一次&lt;/span&gt;
  }
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 模拟发送数据到分析工具&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sendToAnalytics&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;action&lt;/span&gt;) {
  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sending action to analytics:&quot;&lt;/span&gt;, action);
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 示例：用户点击按钮&lt;/span&gt;
&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;btn&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
  &lt;span class=&quot;hljs-title function_&quot;&gt;trackAction&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Button Clicked&quot;&lt;/span&gt;);
});

&lt;span class=&quot;hljs-comment&quot;&gt;// 初始化检测 MDN 脚本&lt;/span&gt;
&lt;span class=&quot;hljs-title function_&quot;&gt;checkMDNScript&lt;/span&gt;();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-43&quot;&gt;4. &lt;strong&gt;将用户操作缓存在全局变量中&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;可以将用户的操作存储在全局变量中，并在 MDN 脚本加载完成后处理这些数据。&lt;/p&gt;
&lt;h5 data-id=&quot;heading-44&quot;&gt;方案：&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;定义一个全局变量来存储用户的操作。&lt;/li&gt;
&lt;li&gt;在 MDN 脚本加载后，遍历全局变量中的操作记录，发送数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 data-id=&quot;heading-45&quot;&gt;示例：&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 存储用户操作&lt;/span&gt;
&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;userActions&lt;/span&gt; = [];

&lt;span class=&quot;hljs-comment&quot;&gt;// 用户操作时记录到全局变量&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;trackAction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;action&lt;/span&gt;) {
  &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;userActions&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(action);
}

&lt;span class=&quot;hljs-comment&quot;&gt;// MDN 脚本加载完成后处理操作记录&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;processUserActions&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;userActions&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;userActions&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {
    &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;userActions&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;action&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
      &lt;span class=&quot;hljs-title function_&quot;&gt;sendToAnalytics&lt;/span&gt;(action);
    });
    &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;userActions&lt;/span&gt; = []; &lt;span class=&quot;hljs-comment&quot;&gt;// 清空记录&lt;/span&gt;
  }
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 模拟发送数据到分析工具&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sendToAnalytics&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;action&lt;/span&gt;) {
  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sending action to analytics:&quot;&lt;/span&gt;, action);
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 示例：用户点击按钮&lt;/span&gt;
&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;btn&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
  &lt;span class=&quot;hljs-title function_&quot;&gt;trackAction&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Button Clicked&quot;&lt;/span&gt;);
});

&lt;span class=&quot;hljs-comment&quot;&gt;// 模拟MDN脚本加载完成时调用&lt;/span&gt;
&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;load&quot;&lt;/span&gt;, processUserActions);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-46&quot;&gt;总结：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;队列/缓存&lt;/strong&gt;：在 MDN 脚本加载前将用户操作存储起来，脚本加载完成后再发送数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;检查加载状态&lt;/strong&gt;：使用 &lt;code&gt;setInterval&lt;/code&gt; 或 &lt;code&gt;setTimeout&lt;/code&gt; 监控 MDN 脚本加载状态，确保脚本加载完成后处理缓存的请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些方法都能确保在 MDN 脚本加载完成之前，用户的操作不会丢失，并能够及时进行埋点记录。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-47&quot;&gt;秒杀按钮倒计时如何更精准&lt;/h2&gt;
&lt;p&gt;为了确保 &lt;strong&gt;秒杀按钮倒计时&lt;/strong&gt; 更加精准，避免由于 JavaScript 执行延迟等问题引起的误差，通常的做法是基于 &lt;strong&gt;服务器时间&lt;/strong&gt; 来计算倒计时。下面是一个完整的实现思路以及具体的代码示例。&lt;/p&gt;
&lt;h4 data-id=&quot;heading-48&quot;&gt;&lt;strong&gt;实现思路：&lt;/strong&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;获取服务器时间&lt;/strong&gt;：服务器时间比本地时间更为准确，因此应该在前端获取服务器的时间戳，并根据服务器时间计算倒计时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;前端倒计时计算&lt;/strong&gt;：根据服务器返回的时间戳，计算当前时间与目标时间（如秒杀结束时间）之间的差异，并更新前端显示。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;同步更新&lt;/strong&gt;：每秒钟更新时间，确保倒计时更新实时并且精确。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 data-id=&quot;heading-49&quot;&gt;&lt;strong&gt;具体实现步骤：&lt;/strong&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;获取服务器时间戳&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;通过向服务器发送请求，获取当前的服务器时间戳。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;计算倒计时&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;计算当前时间与活动结束时间的差值，并显示剩余时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更新倒计时&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;每秒更新一次倒计时，并根据剩余时间动态更新按钮状态（比如显示 &quot;即将开始&quot; 或 &quot;已结束&quot;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 data-id=&quot;heading-50&quot;&gt;&lt;strong&gt;完整的示例代码：&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 data-id=&quot;heading-51&quot;&gt;&lt;strong&gt;前端代码：&lt;/strong&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-html&quot; lang=&quot;html&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!DOCTYPE &lt;span class=&quot;hljs-keyword&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;zh&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;秒杀倒计时&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;css&quot;&gt;
      &lt;span class=&quot;hljs-selector-class&quot;&gt;.countdown&lt;/span&gt; {
        &lt;span class=&quot;hljs-attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20px&lt;/span&gt;;
        &lt;span class=&quot;hljs-attribute&quot;&gt;font-weight&lt;/span&gt;: bold;
      }

      &lt;span class=&quot;hljs-selector-class&quot;&gt;.btn&lt;/span&gt; {
        &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20px&lt;/span&gt;;
        &lt;span class=&quot;hljs-attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;16px&lt;/span&gt;;
        &lt;span class=&quot;hljs-attribute&quot;&gt;cursor&lt;/span&gt;: pointer;
      }

      &lt;span class=&quot;hljs-selector-class&quot;&gt;.disabled&lt;/span&gt; {
        &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#ccc&lt;/span&gt;;
        &lt;span class=&quot;hljs-attribute&quot;&gt;cursor&lt;/span&gt;: not-allowed;
      }

      &lt;span class=&quot;hljs-selector-class&quot;&gt;.active&lt;/span&gt; {
        &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#ff4d4f&lt;/span&gt;;
        &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: white;
      }
    &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;秒杀倒计时&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;剩余时间：&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;countdown&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;countdown&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;seckillBtn&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;btn disabled&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;disabled&lt;/span&gt;&amp;gt;&lt;/span&gt;立即抢购&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;
      &lt;span class=&quot;hljs-comment&quot;&gt;// 目标秒杀结束时间（假设目标时间是2023年12月31日 23:59:59）&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; endTime = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2023-12-31T23:59:59&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;getTime&lt;/span&gt;();

      &lt;span class=&quot;hljs-comment&quot;&gt;// 获取服务器时间&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getServerTime&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
          &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; response = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/api/server-time&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 替换为实际的服务器 API 地址&lt;/span&gt;
          &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; data = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; response.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;();
          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; data.&lt;span class=&quot;hljs-property&quot;&gt;timestamp&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// 服务器时间返回的是秒，需要转换为毫秒&lt;/span&gt;
        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (error) {
          &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;获取服务器时间失败:&quot;&lt;/span&gt;, error);
          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;now&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// 如果失败，使用本地时间&lt;/span&gt;
        }
      }

      &lt;span class=&quot;hljs-comment&quot;&gt;// 更新倒计时&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;updateCountdown&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;serverTime&lt;/span&gt;) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; currentTime = serverTime || &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;now&lt;/span&gt;();
        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; remainingTime = endTime - currentTime;

        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (remainingTime &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {
          &lt;span class=&quot;hljs-comment&quot;&gt;// 秒杀结束&lt;/span&gt;
          &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;countdown&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;textContent&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;秒杀结束&quot;&lt;/span&gt;;
          &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;seckillBtn&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;disabled&quot;&lt;/span&gt;);
          &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;seckillBtn&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;disabled&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;
        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
          &lt;span class=&quot;hljs-comment&quot;&gt;// 计算剩余时间（天、小时、分钟、秒）&lt;/span&gt;
          &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; days = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(remainingTime / (&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;));
          &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; hours = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(
            (remainingTime % (&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;)) / (&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;)
          );
          &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; minutes = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(
            (remainingTime % (&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;)) / (&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;)
          );
          &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; seconds = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;((remainingTime % (&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;)) / &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);

          &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;countdown&quot;&lt;/span&gt;
          ).&lt;span class=&quot;hljs-property&quot;&gt;textContent&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${days}&lt;/span&gt;天 &lt;span class=&quot;hljs-subst&quot;&gt;${hours}&lt;/span&gt;小时 &lt;span class=&quot;hljs-subst&quot;&gt;${minutes}&lt;/span&gt;分钟 &lt;span class=&quot;hljs-subst&quot;&gt;${seconds}&lt;/span&gt;秒`&lt;/span&gt;;

          &lt;span class=&quot;hljs-comment&quot;&gt;// 每秒更新倒计时&lt;/span&gt;
          &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;updateCountdown&lt;/span&gt;(serverTime + &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;), &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);
        }
      }

      &lt;span class=&quot;hljs-comment&quot;&gt;// 启动倒计时&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;startCountdown&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; serverTime = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getServerTime&lt;/span&gt;();
        &lt;span class=&quot;hljs-title function_&quot;&gt;updateCountdown&lt;/span&gt;(serverTime);
      }

      &lt;span class=&quot;hljs-comment&quot;&gt;// 启动倒计时&lt;/span&gt;
      &lt;span class=&quot;hljs-title function_&quot;&gt;startCountdown&lt;/span&gt;();

      &lt;span class=&quot;hljs-comment&quot;&gt;// 启动秒杀按钮（例如：秒杀开始时启用）&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;enableSeckillButton&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
        &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;seckillBtn&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;remove&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;disabled&quot;&lt;/span&gt;);
        &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;seckillBtn&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;disabled&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;
      }

      &lt;span class=&quot;hljs-comment&quot;&gt;// 假设秒杀在倒计时结束后立即启动&lt;/span&gt;
      &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(enableSeckillButton, endTime - &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;now&lt;/span&gt;());
    &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-52&quot;&gt;&lt;strong&gt;解释：&lt;/strong&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;服务器时间获取&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们通过 &lt;code&gt;fetch&lt;/code&gt; 向服务器发送请求，获取服务器当前的时间戳。服务器时间比客户端时间更准确，因此我们根据服务器时间来计算倒计时。&lt;/li&gt;
&lt;li&gt;服务器返回的时间戳是以秒为单位的，所以在前端需要乘以 &lt;code&gt;1000&lt;/code&gt; 转换为毫秒。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;倒计时计算&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算从当前时间到目标结束时间之间的剩余时间。&lt;/li&gt;
&lt;li&gt;根据剩余时间，我们计算出 &lt;strong&gt;天数、小时数、分钟数、秒数&lt;/strong&gt;，并更新显示。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;更新按钮状态&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在倒计时结束后，我们禁用秒杀按钮，并将按钮的文本更改为 &quot;秒杀结束&quot;。&lt;/li&gt;
&lt;li&gt;在秒杀开始时，我们启用秒杀按钮，并将其文本设置为 &quot;立即抢购&quot;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;倒计时更新&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每秒钟更新一次倒计时，保证显示实时的剩余时间。通过 &lt;code&gt;setTimeout&lt;/code&gt; 每秒调用一次更新函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;模拟秒杀开始&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在倒计时结束后，通过 &lt;code&gt;setTimeout&lt;/code&gt; 启用秒杀按钮，模拟秒杀开始的场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 data-id=&quot;heading-53&quot;&gt;&lt;strong&gt;为什么使用服务器时间：&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;客户端时间不准&lt;/strong&gt;：用户的设备时间可能与服务器时间不同，且受到时区、手动更改等因素的影响。通过获取服务器时间，我们确保倒计时的准确性，避免用户通过修改本地时间来操控倒计时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务器时间一致性&lt;/strong&gt;：所有用户的倒计时将从一个统一的标准时间开始，避免不同用户看到不同的倒计时结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种方式确保了倒计时的准确性，并且在秒杀活动中能精准地控制按钮的启用和禁用。&lt;/p&gt;</description><link>https://juejin.cn/post/7482968613865029672</link><guid isPermaLink="false">https://juejin.cn/post/7482968613865029672</guid><pubDate>Tue, 18 Mar 2025 14:45:56 GMT</pubDate><author>Moment</author><category>前端</category><category>后端</category><category>面试</category></item><item><title>🧠前端面试高频考题---promise，从五个方面搞定它🛠️</title><description>&lt;h2 data-id=&quot;heading-0&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;在面试之中关于&lt;code&gt;promise&lt;/code&gt;经常被问起！这也许是因为我们的js充满了异步函数，而&lt;code&gt;promise&lt;/code&gt;是用来处理异步操作的重要方案，所以今天让我们来全面的学习一下🚀🚀🚀&lt;/p&gt;
&lt;h2 data-id=&quot;heading-1&quot;&gt;介绍&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Promise&lt;/code&gt; 是 JavaScript 异步编程的重要知识点，既是面试常客，也是高频考点。接下来让我们从 &lt;strong&gt;核心概念&lt;/strong&gt;、&lt;strong&gt;API 详解&lt;/strong&gt;、&lt;strong&gt;手写实现&lt;/strong&gt;、&lt;strong&gt;经典面试题&lt;/strong&gt;、&lt;strong&gt;实践例题&lt;/strong&gt; 五个角度拿下&lt;code&gt;promise&lt;/code&gt;。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-2&quot;&gt;1.核心概念&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-3&quot;&gt;1.promise是什么？&lt;/h3&gt;
&lt;p&gt;简单来说就是一种异步编程的模式，用于处理异步操作且可以避免出现&lt;strong&gt;回调地狱&lt;/strong&gt;的问题，它表示一个异步操作，这个操作可能完成也可能失败，并将结果，错误通过状态机制传递。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-4&quot;&gt;2.promise的三种状态&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;pending&lt;/code&gt;（待定）&lt;/strong&gt; ：初始状态，异步操作尚未完成。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;fulfilled&lt;/code&gt;（已完成）&lt;/strong&gt; ：异步操作成功，调用 &lt;code&gt;.then()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;rejected&lt;/code&gt;（已拒绝）&lt;/strong&gt; ：异步操作失败，调用 &lt;code&gt;.catch()&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;⚠️ &lt;code&gt;Promise&lt;/code&gt; 状态一旦从 &lt;code&gt;pending&lt;/code&gt; 转变为 &lt;code&gt;fulfilled&lt;/code&gt; 或 &lt;code&gt;rejected&lt;/code&gt;，就&lt;strong&gt;不可逆&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;✅&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你可以将 Promise 视为一个容器，用于封装未来的值（异步操作的结果）。通过 .then() 方法可以处理 fulfilled 的结果，通过 .catch() 方法可以捕获 rejected 的错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 data-id=&quot;heading-5&quot;&gt;Promise API详解&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-6&quot;&gt;✅ &lt;strong&gt;1. &lt;code&gt;Promise.prototype.then()&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;接收两个回调函数（&lt;code&gt;onFulfilled&lt;/code&gt;，&lt;code&gt;onRejected&lt;/code&gt;），分别处理成功和失败，&lt;code&gt;onFulfilled&lt;/code&gt;的值就是Promise 被 resolved 时返回的对象，同样的&lt;code&gt;onRejected&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.then()&lt;/code&gt; 返回一个新的 &lt;code&gt;Promise&lt;/code&gt;，因此可链式调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;⚠️ &lt;code&gt;.then()&lt;/code&gt; 中若没有返回值，默认返回 &lt;code&gt;undefined&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-js&quot; lang=&quot;js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetchData&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 模拟网络请求，1 秒后返回结果&lt;/span&gt;
    &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; success = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// 假设请求成功&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (success) {
        &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Data fetched successfully&quot;&lt;/span&gt;);
      } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Failed to fetch data&quot;&lt;/span&gt;);
      }
    }, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);
  });
}

&lt;span class=&quot;hljs-title function_&quot;&gt;fetchData&lt;/span&gt;()
  .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(
    &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Success:&quot;&lt;/span&gt;, result); &lt;span class=&quot;hljs-comment&quot;&gt;// 处理成功的回调&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Processed data&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// 返回一个新的promise对象&lt;/span&gt;
    },
    &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;error&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Error:&quot;&lt;/span&gt;, error); &lt;span class=&quot;hljs-comment&quot;&gt;// 处理失败的回调&lt;/span&gt;
    }
  )
  .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;processedResult&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Processed Result:&quot;&lt;/span&gt;, processedResult); &lt;span class=&quot;hljs-comment&quot;&gt;// 处理上一个 then 返回的结果&lt;/span&gt;
  })
  .&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Caught Error:&quot;&lt;/span&gt;, err); &lt;span class=&quot;hljs-comment&quot;&gt;// 捕获整个链中的错误&lt;/span&gt;
  });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在上面的例子中我们给.then传了两个回调函数，一个处理成功 一个处理失败，但一般情况下我们更喜欢使用.catch()来处理promise的失败情况。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;⚠️ 还有一个值得注意的是&lt;code&gt;.then()&lt;/code&gt; 中无论你返回什么，都会被包装成一个 &lt;code&gt;Promise&lt;/code&gt; 对象，就比如你返回一个普通值也会被包装成Promise.resolve()，这保证了&lt;code&gt;promise&lt;/code&gt;的链式调用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 data-id=&quot;heading-7&quot;&gt;✅ &lt;strong&gt;2. &lt;code&gt;Promise.prototype.catch()&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;专门捕获 &lt;code&gt;Promise&lt;/code&gt; 中的异常或 &lt;code&gt;.then()&lt;/code&gt; 的失败回调。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这没什么好讲的，我们可以在链式中使用&lt;code&gt;.catch()&lt;/code&gt;来捕获失败或异常同样的&lt;code&gt;.catch()&lt;/code&gt;的返回始终是一个promise对象，默认为underfined。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-8&quot;&gt;✅ &lt;strong&gt;3. &lt;code&gt;Promise.prototype.finally()&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;无论 &lt;code&gt;Promise&lt;/code&gt; 成功或失败，&lt;code&gt;finally()&lt;/code&gt; 都会执行。&lt;/li&gt;
&lt;li&gt;通常用于&lt;strong&gt;资源释放&lt;/strong&gt;、&lt;strong&gt;加载动画关闭&lt;/strong&gt;等场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-id=&quot;heading-9&quot;&gt;✅ &lt;strong&gt;4. &lt;code&gt;Promise.all()&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;接收一个 &lt;code&gt;Promise&lt;/code&gt; 数组，&lt;strong&gt;全部成功&lt;/strong&gt;时才会进入 &lt;code&gt;.then()&lt;/code&gt;；任意一个失败，立即进入 &lt;code&gt;.catch()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;适用于&lt;strong&gt;所有任务必须成功&lt;/strong&gt;的场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-js&quot; lang=&quot;js&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;([
  &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;任务1完成&quot;&lt;/span&gt;),
  &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;任务2完成&quot;&lt;/span&gt;),
  &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;任务3失败&quot;&lt;/span&gt;)
])
  .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;// 不会执行&lt;/span&gt;
  .&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;error&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// 输出：&quot;任务3失败&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;promise.all()&lt;/code&gt;在实际的应用场景很多，比如在处理并发异步任务的时候，我们在项目中经常需要同时请求多个接口的数据，例如在查看你的掘金个人主页的时候需要同时获取你的信息，你的文章数据等。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getUserInfo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://jsonplaceholder.typicode.com/users/1&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;res&lt;/span&gt; =&amp;gt;&lt;/span&gt; res.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;());
}

&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getPosts&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://jsonplaceholder.typicode.com/posts&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;res&lt;/span&gt; =&amp;gt;&lt;/span&gt; res.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;());
}

&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getComments&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://jsonplaceholder.typicode.com/comments&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;res&lt;/span&gt; =&amp;gt;&lt;/span&gt; res.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;());
}

&lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;([&lt;span class=&quot;hljs-title function_&quot;&gt;getUserInfo&lt;/span&gt;(), &lt;span class=&quot;hljs-title function_&quot;&gt;getPosts&lt;/span&gt;(), &lt;span class=&quot;hljs-title function_&quot;&gt;getComments&lt;/span&gt;()])
  .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;[user, posts, comments]&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;用户信息:&quot;&lt;/span&gt;, user);
    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;文章数据:&quot;&lt;/span&gt;, posts);
    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;评论数据:&quot;&lt;/span&gt;, comments);
  })
  .&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;error&lt;/span&gt; =&amp;gt;&lt;/span&gt; {
    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;某个请求失败：&quot;&lt;/span&gt;, error);
  });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其还常用于加载多个静态资源&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-js&quot; lang=&quot;js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;loadImage&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;src&lt;/span&gt;) {
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; img = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Image&lt;/span&gt;();
    img.&lt;span class=&quot;hljs-property&quot;&gt;src&lt;/span&gt; = src;
    img.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${src}&lt;/span&gt; 加载成功`&lt;/span&gt;);
    img.&lt;span class=&quot;hljs-property&quot;&gt;onerror&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${src}&lt;/span&gt; 加载失败`&lt;/span&gt;);
  });
}

&lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;([
  &lt;span class=&quot;hljs-title function_&quot;&gt;loadImage&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;image1.jpg&#39;&lt;/span&gt;),
  &lt;span class=&quot;hljs-title function_&quot;&gt;loadImage&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;image2.jpg&#39;&lt;/span&gt;),
  &lt;span class=&quot;hljs-title function_&quot;&gt;loadImage&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;image3.jpg&#39;&lt;/span&gt;)
])
.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;results&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;全部图片加载成功：&quot;&lt;/span&gt;, results))
.&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;error&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;某张图片加载失败：&quot;&lt;/span&gt;, error));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例如并行加载多张图片，其可以提高页面的性能，&lt;code&gt;promise.all()&lt;/code&gt;确保所有的图片加载完成了以后才会.then()操作非常适合轮播图，和懒加载等场景！&lt;/p&gt;
&lt;h3 data-id=&quot;heading-10&quot;&gt;✅ &lt;strong&gt;5. &lt;code&gt;Promise.race()&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;接收一个 &lt;code&gt;Promise&lt;/code&gt; 数组，&lt;strong&gt;第一个完成&lt;/strong&gt;的 &lt;code&gt;Promise&lt;/code&gt;（无论成功或失败）就决定最终结果。&lt;/li&gt;
&lt;li&gt;常用于&lt;strong&gt;请求超时控制&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-js&quot; lang=&quot;js&quot;&gt;
&lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;race&lt;/span&gt;([
  &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;请求成功&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;)), &lt;span class=&quot;hljs-comment&quot;&gt;// 请求成功的时间改为1秒&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;请求超时&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;// 超时时间保持为2秒&lt;/span&gt;
])
.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;// 输出：&quot;请求成功&quot;&lt;/span&gt;
  .&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;error&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里我们设置的在一秒时间内完成了请求就会输出请求成功，但要是由于网络延迟、服务器响应慢等原因未能在1秒内完成，且两秒后还没完成就会输出请求超时。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-11&quot;&gt;✅ &lt;strong&gt;6. &lt;code&gt;Promise.allSettled()&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;接收一个 &lt;code&gt;Promise&lt;/code&gt; 数组，&lt;strong&gt;无论成功或失败&lt;/strong&gt;都会将所有结果返回。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个结果对象包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{ status: &quot;fulfilled&quot;, value: 数据 }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{ status: &quot;rejected&quot;, reason: 错误信息 }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;就例如我们在批量删除时，即使有几项删除失败，其他仍可以删除成功。相同的其还经常应用在备份数据，用户并行操作等。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-12&quot;&gt;Promise 经典面试题&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-13&quot;&gt;1.与event loop结合考察执行顺序&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Promise&lt;/code&gt; 的 &lt;code&gt;.then()&lt;/code&gt; 属于&lt;strong&gt;微任务&lt;/strong&gt;，在当前同步代码执行完毕后执行。
具体的关于event loop的介绍可以看我这篇文章：&lt;a href=&quot;https://juejin.cn/post/7479766671503163407&quot; target=&quot;_blank&quot; title=&quot;https://juejin.cn/post/7479766671503163407&quot;&gt;envent Loop&lt;/a&gt;&lt;/p&gt;
&lt;h3 data-id=&quot;heading-14&quot;&gt;2. Promise 链式调用中的返回值&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-js&quot; lang=&quot;js&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)
  .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)
  .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;出错了&quot;&lt;/span&gt;); })
  .&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;err&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(err.&lt;span class=&quot;hljs-property&quot;&gt;message&lt;/span&gt;))
  .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;继续执行&quot;&lt;/span&gt;, x));
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;答案：
出错了
继续执行 &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;
执行过程分析：
首先&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;会传到第一个.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;()中然后返回一个&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;进入第二个.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;()中，其抛出了一个错误，被&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;捕获并输出：出错了，因其没有设置返回值默认返回underfined,underfined传入下一个then输出：继续执行 underfined
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-15&quot;&gt;3. 手写 Promise 实现(高频）&lt;/h3&gt;
&lt;p&gt;首先我们先整理一下思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;状态（State）&lt;/strong&gt; ：一个 &lt;code&gt;Promise&lt;/code&gt; 对象有三种可能的状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pending&lt;/code&gt;（等待中）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fulfilled&lt;/code&gt;（已完成/成功）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rejected&lt;/code&gt;（已拒绝/失败）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;函数参数&lt;/strong&gt;：&lt;code&gt;resolve&lt;/code&gt; 和 &lt;code&gt;reject&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;resolve&lt;/code&gt;：异步操作成功后调用，将promise的状态变为&lt;code&gt;fulfilled&lt;/code&gt;并将异步操作的结果传递给 &lt;code&gt;.then()&lt;/code&gt; 方法中的成功回调。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reject&lt;/code&gt;:异步操作失败后调用，将promise的状态变为&lt;code&gt;rejected&lt;/code&gt;将异步操作失败的原因传递给&lt;code&gt;.catch()&lt;/code&gt;方法。
3.&lt;strong&gt;链式调用&lt;/strong&gt;：&lt;code&gt;.then()&lt;/code&gt;要返回一个新的promise对象以支持链式调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-kotlin&quot; lang=&quot;kotlin&quot;&gt;手写代码

&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyPromise&lt;/span&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;constructor&lt;/span&gt;(executor) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.status = &lt;span class=&quot;hljs-string&quot;&gt;&quot;pending&quot;&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// 初始状态&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.value = undefined;   &lt;span class=&quot;hljs-comment&quot;&gt;// 成功的值&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.reason = undefined;  &lt;span class=&quot;hljs-comment&quot;&gt;// 失败的原因&lt;/span&gt;

    &lt;span class=&quot;hljs-comment&quot;&gt;// 用于存储回调函数，确保异步情况也能调用&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.onFulfilledCallbacks = [];
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.onRejectedCallbacks = [];

    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; resolve = (value) =&amp;gt; {
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.status === &lt;span class=&quot;hljs-string&quot;&gt;&quot;pending&quot;&lt;/span&gt;) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.status = &lt;span class=&quot;hljs-string&quot;&gt;&quot;fulfilled&quot;&lt;/span&gt;;
        &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.value = value;

        &lt;span class=&quot;hljs-comment&quot;&gt;// 执行所有成功回调&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.onFulfilledCallbacks.forEach(fn =&amp;gt; fn());
      }
    };

    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; reject = (reason) =&amp;gt; {
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.status === &lt;span class=&quot;hljs-string&quot;&gt;&quot;pending&quot;&lt;/span&gt;) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.status = &lt;span class=&quot;hljs-string&quot;&gt;&quot;rejected&quot;&lt;/span&gt;;
        &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.reason = reason;

        &lt;span class=&quot;hljs-comment&quot;&gt;// 执行所有失败回调&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.onRejectedCallbacks.forEach(fn =&amp;gt; fn());
      }
    };

    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
      executor(resolve, reject); &lt;span class=&quot;hljs-comment&quot;&gt;// 立即执行传入的执行器函数&lt;/span&gt;
    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (error) {
      reject(error); &lt;span class=&quot;hljs-comment&quot;&gt;// 捕获同步错误&lt;/span&gt;
    }
  }

  then(onFulfilled, onRejected) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; new MyPromise((resolve, reject) =&amp;gt; {
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.status === &lt;span class=&quot;hljs-string&quot;&gt;&quot;fulfilled&quot;&lt;/span&gt;) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
          &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; result = onFulfilled(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.value);
          resolve(result); &lt;span class=&quot;hljs-comment&quot;&gt;// 将结果传递给下一个 then&lt;/span&gt;
        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (error) {
          reject(error);
        }
      }

      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.status === &lt;span class=&quot;hljs-string&quot;&gt;&quot;rejected&quot;&lt;/span&gt;) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
          &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; result = onRejected(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.reason);
          resolve(result); &lt;span class=&quot;hljs-comment&quot;&gt;// 继续执行下一个 then（如果有返回值）&lt;/span&gt;
        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (error) {
          reject(error);
        }
      }

      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.status === &lt;span class=&quot;hljs-string&quot;&gt;&quot;pending&quot;&lt;/span&gt;) {
        &lt;span class=&quot;hljs-comment&quot;&gt;// 异步情况，存储回调&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.onFulfilledCallbacks.push(() =&amp;gt; {
          &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; result = onFulfilled(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.value);
            resolve(result);
          } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (error) {
            reject(error);
          }
        });

        &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.onRejectedCallbacks.push(() =&amp;gt; {
          &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; result = onRejected(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.reason);
            resolve(result);
          } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (error) {
            reject(error);
          }
        });
      }
    });
  }

  &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(onRejected) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.then(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, onRejected);
  }

  &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt;(callback) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.then(
      value =&amp;gt; {
        callback();
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value;
      },
      reason =&amp;gt; {
        callback();
        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; reason;
      }
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 data-id=&quot;heading-16&quot;&gt;经典面试题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Promise&lt;/code&gt; 的状态一旦变更，是否可以再改变？&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;如何使用 &lt;code&gt;Promise.race()&lt;/code&gt; 实现请求超时控制？&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Promise 和 &lt;code&gt;async/await&lt;/code&gt; 有什么异同？&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 data-id=&quot;heading-17&quot;&gt;🎯 总结&lt;/h2&gt;
&lt;p&gt;✅ &lt;code&gt;Promise&lt;/code&gt; 的三种状态及其不可逆性&lt;br&gt;
✅ &lt;code&gt;Promise&lt;/code&gt; 链式调用原理&lt;br&gt;
✅ &lt;code&gt;.then()&lt;/code&gt;、&lt;code&gt;.catch()&lt;/code&gt;、&lt;code&gt;.finally()&lt;/code&gt; 的执行顺序&lt;br&gt;
✅ &lt;code&gt;Promise.all()&lt;/code&gt; vs &lt;code&gt;Promise.race()&lt;/code&gt; vs &lt;code&gt;Promise.any()&lt;/code&gt;&lt;br&gt;
✅ &lt;code&gt;Promise&lt;/code&gt; 与 &lt;code&gt;async/await&lt;/code&gt; 的区别&lt;br&gt;
✅ &lt;code&gt;Promise&lt;/code&gt; 与 &lt;code&gt;setTimeout&lt;/code&gt;（微任务 vs 宏任务）&lt;br&gt;
✅ 手写 &lt;code&gt;Promise&lt;/code&gt; 实现&lt;/p&gt;</description><link>https://juejin.cn/post/7482950748927803429</link><guid isPermaLink="false">https://juejin.cn/post/7482950748927803429</guid><pubDate>Tue, 18 Mar 2025 12:49:50 GMT</pubDate><author>狂炫一碗大米饭</author><category>前端</category><category>面试</category><category>JavaScript</category></item><item><title>随笔之 react 接入 @xterm 的踩坑记录</title><description>&lt;h2 data-id=&quot;heading-0&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近公司有一个在 web 上调用终端的需求。我们使用的技术栈 react + ts，调研了一下决定用 xterm 这个库来实现。做的过程中踩了一些坑，稍作整理分享一下。&lt;/p&gt;
&lt;p&gt;看一下最终的效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/255b3c5ecf7c46f089934e89ce961016~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgaW1vbw==:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742904178&amp;amp;x-signature=LK17Vm7fSxs8Si6TOG61PMmnJ2w%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h2 data-id=&quot;heading-1&quot;&gt;错误理解重灾区&lt;/h2&gt;
&lt;p&gt;在开始之前，你是否遇到了这些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一片空白&lt;/li&gt;
&lt;li&gt;编辑器最前面出现了一个框&lt;/li&gt;
&lt;li&gt;无法删除，删除就报错&lt;/li&gt;
&lt;li&gt;光标莫名跑到最前方，覆盖最前方的字符&lt;/li&gt;
&lt;li&gt;很奇怪的换行，在中间部分折断了&lt;/li&gt;
&lt;li&gt;接收到的消息没法正常处理和展示&lt;/li&gt;
&lt;li&gt;不能输入数字&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以必须要说清楚几个错误点，否则要折腾很久&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、引入组件就开干&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要额外引入css...否则你会看到莫名其妙的样式&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/156622fc9c2f49608c6fb421cd2c2678~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgaW1vbw==:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742904178&amp;amp;x-signature=aKGj0pU9phvQcqWGgo5a6t152X8%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;二 &lt;strong&gt;、直接将其当做一个 input 来&lt;/strong&gt; &lt;strong&gt;交互&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;绝大部分同学看到这个终端需求的第一个想法一定是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;找一个库，它提供一个类似输入框一样的组件，只是稍作封装&lt;/li&gt;
&lt;li&gt;这个输入框负责输入、记录、回车后 ws 发送消息&lt;/li&gt;
&lt;li&gt;ws 接收到消息时显示响应&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但实际上完全不是！！！差的非常远，官方也不推荐这种使用方案。如果按这种方案做，会遇到相当多的问题，说多了都是泪。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/dfb59ba5c7db4a079e0c53fc90ec345f~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgaW1vbw==:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742904178&amp;amp;x-signature=oNinK1lVTbcncTlbEOZVxDDzgBE%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;正确的做法应该是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户按下键盘，&lt;strong&gt;不管按什么都立刻传给后端，也就是每按一下就传到后端一下&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;后端使用 pty，并且也直接传到对应服务器&lt;/li&gt;
&lt;li&gt;绑定 ws 的 onmessage，后端向前端推送消息时，立刻更新终端&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样就 ok 了，不需要考虑什么删除、换行、组合键等等一系列操作。如果按这种思路，能躲开大多数的坑。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果迫不得已需要按刚才那种错误观点来做，可以参考这篇文章，需要做很多额外处理，非必须情况还是不推荐的&lt;a href=&quot;https://juejin.cn/post/7081565139187138590?searchId=20250312194727414C9627377E3C282D40&quot; target=&quot;_blank&quot; title=&quot;https://juejin.cn/post/7081565139187138590?searchId=20250312194727414C9627377E3C282D40&quot;&gt;juejin.cn/post/708156…&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;三、将其当做普通的标签来调长宽大小&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一旦按这种想法，你会发现诡异的换行，莫名的覆盖，删除可以删掉前面的提示等等一系列坑。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果想调长宽的样式，必须要后端同时来支持。&lt;/strong&gt; 这可太新鲜了，最开始完全没想到。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/f60098924fa44dadbb20bcf25bb01b27~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgaW1vbw==:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742904178&amp;amp;x-signature=1ho8k20%2F1XLCwiU3u7uRYrtpXAY%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;最大的几个坑就是这里，搞清楚以后就容易了。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-2&quot;&gt;步骤&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;引入&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-js&quot; lang=&quot;js&quot;&gt;npm i @xterm/xterm

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { &lt;span class=&quot;hljs-title class_&quot;&gt;Terminal&lt;/span&gt; } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;@xterm/xterm&#39;&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;@xterm/xterm/css/xterm.css&#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;放一个容器供注入&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-html&quot; lang=&quot;html&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{terminalDomRef}&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;初始化终端&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-js&quot; lang=&quot;js&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; terminalDomRef = useRef&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;HTMLDivElement&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);

  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;initTerminal&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (termRef.&lt;span class=&quot;hljs-property&quot;&gt;current&lt;/span&gt;) {
      termRef.&lt;span class=&quot;hljs-property&quot;&gt;current&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;dispose&lt;/span&gt;();
    }

    termRef.&lt;span class=&quot;hljs-property&quot;&gt;current&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Terminal&lt;/span&gt;(options);
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (terminalDomRef.&lt;span class=&quot;hljs-property&quot;&gt;current&lt;/span&gt;) {
      termRef.&lt;span class=&quot;hljs-property&quot;&gt;current&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(terminalDomRef.&lt;span class=&quot;hljs-property&quot;&gt;current&lt;/span&gt;);
      termRef.&lt;span class=&quot;hljs-property&quot;&gt;current&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;loadAddon&lt;/span&gt;(fitAddon.&lt;span class=&quot;hljs-property&quot;&gt;current&lt;/span&gt;);
    }
  }
  
  &lt;span class=&quot;hljs-title function_&quot;&gt;useEffect&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {
    &lt;span class=&quot;hljs-title function_&quot;&gt;initTerminal&lt;/span&gt;();
  }, [])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;到这一步就可以看到完整的终端了，不过只是终端的 dom，我们还需要考虑连接 websocket 部分。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这一部分有个插件，但是我最开始没发现，所以没有使用，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;初始化 websocket&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-js&quot; lang=&quot;js&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;initSocket&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
      &lt;span class=&quot;hljs-comment&quot;&gt;// 这里我做了封装，具体情况具体改造，只要连接上就行&lt;/span&gt;
      wsRef.&lt;span class=&quot;hljs-property&quot;&gt;current&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wss&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;xxxx&#39;&lt;/span&gt;});

      wsRef.&lt;span class=&quot;hljs-property&quot;&gt;current&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;onopen&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {
        &lt;span class=&quot;hljs-title function_&quot;&gt;setLogStatus&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;success&#39;&lt;/span&gt;);
        &lt;span class=&quot;hljs-title function_&quot;&gt;resetTerminal&lt;/span&gt;();
      };

      wsRef.&lt;span class=&quot;hljs-property&quot;&gt;current&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;onmessage&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!termRef.&lt;span class=&quot;hljs-property&quot;&gt;current&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
          &lt;span class=&quot;hljs-comment&quot;&gt;// 对象/数字，数字没法输入的同学可以看这里的逻辑&lt;/span&gt;
          &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; data = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(event.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;);
          termRef.&lt;span class=&quot;hljs-property&quot;&gt;current&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(data.&lt;span class=&quot;hljs-property&quot;&gt;output&lt;/span&gt; || &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(data));
        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; {
          &lt;span class=&quot;hljs-comment&quot;&gt;// 字符串&lt;/span&gt;
          termRef.&lt;span class=&quot;hljs-property&quot;&gt;current&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(event.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;);
        }
      };
      
    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (error) {
      &lt;span class=&quot;hljs-title class_&quot;&gt;Message&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;连接终端失败&#39;&lt;/span&gt;);
    }
  };
  
  &lt;span class=&quot;hljs-title function_&quot;&gt;useEffect&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {
    &lt;span class=&quot;hljs-title function_&quot;&gt;initSocket&lt;/span&gt;();
  })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时，只要后端&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fblog.csdn.net%2Fqq_51287641%2Farticle%2Fdetails%2F126959389&quot; target=&quot;_blank&quot; title=&quot;https://blog.csdn.net/qq_51287641/article/details/126959389&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;按部就班&lt;/a&gt;，那你的终端已经可以正常读写了。但我们还需要考虑一下样式问题，当该终端的长宽发生变化时，页面会变的非常诡异，主要原因是后端的行数、列数没有匹配上，所以我们修改长宽时，要计算出对应的行数、列数并告知后端。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-js&quot; lang=&quot;js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; fitAddon = useRef&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;FitAddon&lt;/span&gt;&amp;gt;();

&lt;span class=&quot;hljs-comment&quot;&gt;// initTerminal 时&lt;/span&gt;
{
    ...
    fitAddon.&lt;span class=&quot;hljs-property&quot;&gt;current&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FitAddon&lt;/span&gt;();      
    termRef.&lt;span class=&quot;hljs-property&quot;&gt;current&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;loadAddon&lt;/span&gt;(fitAddon.&lt;span class=&quot;hljs-property&quot;&gt;current&lt;/span&gt;);
    ...
}
    
&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; resize = debounce ( &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;  &lt;span class=&quot;hljs-title function_&quot;&gt;onResize&lt;/span&gt; () { fitAddon. current ?. fit ();  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { cols } = termRef. current !;  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; windowHeight = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt; . innerHeight ;  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; rows = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt; . floor (windowHeight / &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt; ); &lt;span class=&quot;hljs-comment&quot;&gt;// 这个需要自己看下自己每行多高  termRef. current ?. resize (cols, rows); wsRef. current ?. send ( JSON . stringify ({ type : &#39;resize&#39; , cols, rows })); }, 500 );&lt;/span&gt;

  &lt;span class=&quot;hljs-title function_&quot;&gt;useEffect&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {
    &lt;span class=&quot;hljs-title function_&quot;&gt;initTerminal&lt;/span&gt;();
    &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;resize&#39;&lt;/span&gt;, resize);

    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (termRef.&lt;span class=&quot;hljs-property&quot;&gt;current&lt;/span&gt;) {
        termRef.&lt;span class=&quot;hljs-property&quot;&gt;current&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;dispose&lt;/span&gt;();
      }
      &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;removeEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;resize&#39;&lt;/span&gt;, resize);
    };
  }, []);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;至此，大功告成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/4361caec20b443c0b9fd939d0dffb9be~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgaW1vbw==:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742904178&amp;amp;x-signature=BWkQtOhZYRrvLRD57K3I%2Fkz6QXk%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 data-id=&quot;heading-3&quot;&gt;其他&lt;/h2&gt;
&lt;p&gt;做的过程中主要参考了这两篇文章&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fblog.csdn.net%2Fqq_51287641%2Farticle%2Fdetails%2F126959389&quot; target=&quot;_blank&quot; title=&quot;https://blog.csdn.net/qq_51287641/article/details/126959389&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;blog.csdn.net/qq_51287641…&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/6918911964009725959?searchId=20250312172442D0FFE11380B4041DCD28&quot; target=&quot;_blank&quot; title=&quot;https://juejin.cn/post/6918911964009725959?searchId=20250312172442D0FFE11380B4041DCD28&quot;&gt;juejin.cn/post/691891…&lt;/a&gt;&lt;/p&gt;</description><link>https://juejin.cn/post/7482950748927557669</link><guid isPermaLink="false">https://juejin.cn/post/7482950748927557669</guid><pubDate>Tue, 18 Mar 2025 12:02:59 GMT</pubDate><author>imoo</author><category>前端</category></item><item><title>TypeScript 系列：类型更安全的 antd `useForm`</title><description>&lt;h2 data-id=&quot;heading-0&quot;&gt;🤔 问题&lt;/h2&gt;
&lt;p&gt;今天遇到一个 bug，大概是这样一个 Antd 的搜索表单，点击重置其他下拉框都可以清空，唯独“请选择用户”无法清空。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/c3d29530a0124902a5019fdb3e93187e~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTGVnZW5kODBz:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742949454&amp;amp;x-signature=jeW4e4frcC2sI7kWhvsG1ygjDDU%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;Bug 代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-tsx&quot; lang=&quot;tsx&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;handleReset&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {
    history.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;({ &lt;span class=&quot;hljs-attr&quot;&gt;search&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;&#39;&lt;/span&gt; });

    form.&lt;span class=&quot;hljs-title function_&quot;&gt;setFieldValue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;modelId&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;);
    form.&lt;span class=&quot;hljs-title function_&quot;&gt;setFieldValue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;useId&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;);
    form.&lt;span class=&quot;hljs-title function_&quot;&gt;setFieldValue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;apiKeyId&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;);

    &lt;span class=&quot;hljs-title function_&quot;&gt;handleSearch&lt;/span&gt;(form.&lt;span class=&quot;hljs-title function_&quot;&gt;getFieldsValue&lt;/span&gt;());
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;🕵️‍♂️ 调试了较长时间，发现是拼写问题 &lt;code&gt;userId&lt;/code&gt; ✅ 而非 &lt;code&gt;useId&lt;/code&gt; ❌！归根结底是 &lt;code&gt;form.setFieldValue&lt;/code&gt; 类型不够安全。为了避免将来再出现类似“低级”问题，重写该函数。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-1&quot;&gt;🔧 解决&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-tsx&quot; lang=&quot;tsx&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// hooks/useForm.ts&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { &lt;span class=&quot;hljs-title class_&quot;&gt;Form&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;FormInstance&lt;/span&gt; } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;antd&#39;&lt;/span&gt;;

&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; useForm&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;Values&lt;/span&gt;&amp;gt;() {
  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [form] = &lt;span class=&quot;hljs-title class_&quot;&gt;Form&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;useForm&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;Values&lt;/span&gt;&amp;gt;();

  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {
    ...form,
    setFieldValue&amp;lt;K &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; keyof &lt;span class=&quot;hljs-title class_&quot;&gt;Values&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: K, &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Values&lt;/span&gt;[K]) {
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; form.&lt;span class=&quot;hljs-title function_&quot;&gt;setFieldValue&lt;/span&gt;(name &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;, value);
    },
  };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述 &lt;code&gt;useForm&lt;/code&gt; 对 &lt;code&gt;setFieldValue&lt;/code&gt; 的入参做了强类型校验，如果传入非预期字段将报错，从而规避书写错误。&lt;/p&gt;
&lt;p&gt;代码具体说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;技巧：可以通过 TS 的 &lt;code&gt;keyof T&lt;/code&gt; 获取类型 &lt;code&gt;T&lt;/code&gt; 的所有 &lt;code&gt;key&lt;/code&gt; 组成的联合类型，通过 &lt;code&gt;T[K]&lt;/code&gt; 可获取 &lt;code&gt;value&lt;/code&gt; 组成的联合类型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;useForm&lt;/code&gt; 函数虽然没有接受参数，但是接受了泛型 &lt;code&gt;Values&lt;/code&gt;，它将被 &lt;code&gt;setFieldValue&lt;/code&gt; 的入参使用，将用其 &lt;code&gt;key&lt;/code&gt; 和 &lt;code&gt;value&lt;/code&gt; 当做入参类型而不是 antd 的 &lt;code&gt;NamePath&lt;/code&gt;（&lt;code&gt;number | string | (string | number)[]&lt;/code&gt;）从而达到强化其类型的目的。即同时对 &lt;code&gt;key&lt;/code&gt; 和 &lt;code&gt;value&lt;/code&gt; 都做了强类型约束。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用：&lt;/p&gt;
&lt;p&gt;假设我们表单类型如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ts&quot; lang=&quot;ts&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;IFormValues&lt;/span&gt; = {
  userId?: &lt;span class=&quot;hljs-built_in&quot;&gt;number&lt;/span&gt;;
  apiKeyId?: &lt;span class=&quot;hljs-built_in&quot;&gt;number&lt;/span&gt;;
  modelId?: &lt;span class=&quot;hljs-built_in&quot;&gt;number&lt;/span&gt;;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;调用处只需修改一行换成我们实现的 &lt;code&gt;useForm&lt;/code&gt; 即可。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-tsx&quot; lang=&quot;tsx&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// const [form] = Form.useForm&amp;lt;IFormValues&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; form = useForm&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;IFormValues&lt;/span&gt;&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在我们试一试：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ts&quot; lang=&quot;ts&quot;&gt;form.&lt;span class=&quot;hljs-title function_&quot;&gt;setFieldValue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;useId&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// key TS 类型报错&lt;/span&gt;
form.&lt;span class=&quot;hljs-title function_&quot;&gt;setFieldValue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;userId&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// value 导致 TS 类型报错&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;类型“&quot;useId&quot;”的参数不能赋给类型“keyof IFormValues”的参数。ts(2345)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/9f3f6e321b784bdebb677db75bea36f1~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTGVnZW5kODBz:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742949454&amp;amp;x-signature=nWVVCSIX2PlH940%2F6CIVFnsEqsA%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h2 data-id=&quot;heading-2&quot;&gt;🌌 总结&lt;/h2&gt;
&lt;p&gt;修复 bug 不是终点，我们需要想着如何通过工具避免才是正道。TS 正是最好用工具之一。&lt;/p&gt;</description><link>https://juejin.cn/post/7482971279008841767</link><guid isPermaLink="false">https://juejin.cn/post/7482971279008841767</guid><pubDate>Tue, 18 Mar 2025 09:29:03 GMT</pubDate><author>Legend80s</author><category>前端</category><category>TypeScript</category></item><item><title>3.3、HarmonyOS Next 切换按钮（Toggle）</title><description>&lt;p&gt;&lt;code&gt;Toggle&lt;/code&gt; 组件提供状态按钮样式，勾选框样式及开关样式，一般用于两种状态之间的切换&lt;/p&gt;
&lt;h2 data-id=&quot;heading-0&quot;&gt;创建切换按钮&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-1&quot;&gt;创建不包含子组件的Toggle&lt;/h3&gt;
&lt;p&gt;当 &lt;code&gt;ToggleType&lt;/code&gt; 为 &lt;code&gt;Checkbox&lt;/code&gt;
&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/de1c59a16beb43659a67e6186bbe6343~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgSVTkuZDmiYs=:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742871865&amp;amp;x-signature=XTx%2FgqbOkDdsbluuTgwPgLEjE5c%3D&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ts&quot; lang=&quot;ts&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Row&lt;/span&gt;() {
&lt;span class=&quot;hljs-title class_&quot;&gt;Toggle&lt;/span&gt;({ &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;ToggleType&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Checkbox&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;isOn&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; })
    &lt;span class=&quot;hljs-title class_&quot;&gt;Toggle&lt;/span&gt;({ &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;ToggleType&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Checkbox&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;isOn&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; })
}.&lt;span class=&quot;hljs-title function_&quot;&gt;margin&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当 &lt;code&gt;ToggleType&lt;/code&gt; 为 &lt;code&gt;Switch&lt;/code&gt;
&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/856fb694b39f423a827ffca74057179e~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgSVTkuZDmiYs=:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742871865&amp;amp;x-signature=I518%2BfOSXcLqWGtwtnGo4XeIfMM%3D&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ts&quot; lang=&quot;ts&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Row&lt;/span&gt;() {
   &lt;span class=&quot;hljs-title class_&quot;&gt;Toggle&lt;/span&gt;({ &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;ToggleType&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Switch&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;isOn&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; })
   &lt;span class=&quot;hljs-title class_&quot;&gt;Toggle&lt;/span&gt;({ &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;ToggleType&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Switch&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;isOn&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; })
 }.&lt;span class=&quot;hljs-title function_&quot;&gt;margin&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;})
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-2&quot;&gt;创建包含子组件的Toggle&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/c4da52134a65486fbfa83c08d486d548~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgSVTkuZDmiYs=:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742871865&amp;amp;x-signature=r%2BFFGBS1Fh9k%2FOtwoI7LcmU24I4%3D&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ts&quot; lang=&quot;ts&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Row&lt;/span&gt;() {
   &lt;span class=&quot;hljs-title class_&quot;&gt;Toggle&lt;/span&gt;({ &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;ToggleType&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Button&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;isOn&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; }) {
     &lt;span class=&quot;hljs-title class_&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;status button&#39;&lt;/span&gt;)
       .&lt;span class=&quot;hljs-title function_&quot;&gt;fontColor&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;#182431&#39;&lt;/span&gt;)
       .&lt;span class=&quot;hljs-title function_&quot;&gt;fontSize&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;)
   }.&lt;span class=&quot;hljs-title function_&quot;&gt;width&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)
   &lt;span class=&quot;hljs-title class_&quot;&gt;Toggle&lt;/span&gt;({ &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;ToggleType&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Button&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;isOn&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; }) {
     &lt;span class=&quot;hljs-title class_&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;status button&#39;&lt;/span&gt;)
       .&lt;span class=&quot;hljs-title function_&quot;&gt;fontColor&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;#182431&#39;&lt;/span&gt;)
       .&lt;span class=&quot;hljs-title function_&quot;&gt;fontSize&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;)
   }.&lt;span class=&quot;hljs-title function_&quot;&gt;width&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)
 }.&lt;span class=&quot;hljs-title function_&quot;&gt;margin&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 data-id=&quot;heading-3&quot;&gt;自定义样式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;selectedColor&lt;/code&gt; 属性设置 &lt;code&gt;Toggle&lt;/code&gt; 打开选中后的背景颜色。
&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/efa083d1d4694175853b5ceefd22e437~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgSVTkuZDmiYs=:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742871865&amp;amp;x-signature=hCU7s1IYXmeJJ3Ayx6l1gph0KJE%3D&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ts&quot; lang=&quot;ts&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Toggle&lt;/span&gt;({ &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;ToggleType&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Button&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;isOn&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; }) {
&lt;span class=&quot;hljs-title class_&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;status button&#39;&lt;/span&gt;)
    .&lt;span class=&quot;hljs-title function_&quot;&gt;fontColor&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;#182431&#39;&lt;/span&gt;)
    .&lt;span class=&quot;hljs-title function_&quot;&gt;fontSize&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;)
}.&lt;span class=&quot;hljs-title function_&quot;&gt;width&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;selectedColor&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Color&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Pink&lt;/span&gt;)

&lt;span class=&quot;hljs-title class_&quot;&gt;Toggle&lt;/span&gt;({ &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;ToggleType&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Checkbox&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;isOn&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; })
  .&lt;span class=&quot;hljs-title function_&quot;&gt;selectedColor&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Color&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Pink&lt;/span&gt;)
  
&lt;span class=&quot;hljs-title class_&quot;&gt;Toggle&lt;/span&gt;({ &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;ToggleType&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Switch&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;isOn&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; })
  .&lt;span class=&quot;hljs-title function_&quot;&gt;selectedColor&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Color&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Pink&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;switchPointColor&lt;/code&gt; 属性设置 &lt;code&gt;Switch&lt;/code&gt; 类型的圆形滑块颜色，仅对 &lt;code&gt;type&lt;/code&gt; 为 &lt;code&gt;ToggleType.Switch&lt;/code&gt; 生效。
&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/79264a10d63c43819b877d3554da7a4d~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgSVTkuZDmiYs=:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742871865&amp;amp;x-signature=x8rTiBztw4MeRnc0kbs64Aj0tRg%3D&quot; alt=&quot;在这里插入图片描述&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 data-id=&quot;heading-4&quot;&gt;添加事件&lt;/h2&gt;
&lt;p&gt;除支持通用事件外，&lt;code&gt;Toggle&lt;/code&gt; 通常用于选中和取消选中后触发某些操作，可以绑定 &lt;code&gt;onChange&lt;/code&gt; 事件来响应操作后的自定义行为&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ts&quot; lang=&quot;ts&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Toggle&lt;/span&gt;({ &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;ToggleType&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Switch&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;isOn&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; })
  .&lt;span class=&quot;hljs-title function_&quot;&gt;onChange&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;isOn: &lt;span class=&quot;hljs-built_in&quot;&gt;boolean&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(isOn) {
        &lt;span class=&quot;hljs-comment&quot;&gt;// 需要执行的操作&lt;/span&gt;
      }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fblog.csdn.net%2Flujianfeiccie2009%2Farticle%2Fdetails%2F137230658&quot; target=&quot;_blank&quot; title=&quot;https://blog.csdn.net/lujianfeiccie2009/article/details/137230658&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;上一篇 3.2、单选框（Radio）&lt;/a&gt;
&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fblog.csdn.net%2Flujianfeiccie2009%2Farticle%2Fdetails%2F137502838&quot; target=&quot;_blank&quot; title=&quot;https://blog.csdn.net/lujianfeiccie2009/article/details/137502838&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;下一篇 3.4、进度条（Progress）&lt;/a&gt;&lt;/p&gt;</description><link>https://juejin.cn/post/7482660918045966346</link><guid isPermaLink="false">https://juejin.cn/post/7482660918045966346</guid><pubDate>Tue, 18 Mar 2025 03:04:26 GMT</pubDate><author>IT乐手</author><category>前端</category><category>HarmonyOS</category></item></channel></rss>