<?xml version="1.0" encoding="UTF-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>logrocket-Dev</title><link>https://blog.logrocket.com/</link><atom:link href="http://rsshub.henry.wang/logrocket/dev" rel="self" type="application/rss+xml"></atom:link><description>logrocket-Dev - Powered by RSSHub</description><generator>RSSHub</generator><webMaster>contact@rsshub.app (RSSHub)</webMaster><language>en</language><lastBuildDate>Tue, 25 Mar 2025 00:38:37 GMT</lastBuildDate><ttl>14</ttl><item><title>How to manage JavaScript closures in React</title><description>&lt;aside&gt;
            &lt;div class=&quot;sticky&quot;&gt;
                                
&lt;div class=&quot;toc-container&quot; id=&quot;post-toc&quot;&gt;
    &lt;/div&gt;
                &lt;!-- Sidebar gutter ad --&gt;
                
            &lt;/div&gt;
        &lt;/aside&gt;
        &lt;div id=&quot;the-content-container&quot;&gt;
            
&lt;div class=&quot;lr-content&quot;&gt;
    &lt;!-- TEMP: .article-post is only used for adinserter to hook into --&gt;
    &lt;div class=&quot;article-post&quot;&gt;&lt;/div&gt;
    &lt;p&gt;The proper handling of JavaScript closures is essential to any JavaScript project.&lt;/p&gt;
&lt;p&gt;In React projects specifically, closures can manifest themselves in ways that are not always readily apparent.&lt;/p&gt;
&lt;p&gt;In this article, I will explain what closures are and provide examples of how to manage them. We’ll also cover a real-life example that I handled with my professional job and the production application we support.&lt;/p&gt;
&lt;p&gt;I’ll be referencing my sample project on GitHub throughout the article.&lt;/p&gt;
&lt;p&gt;What are JavaScript closures?&lt;/p&gt;
&lt;p&gt;A JavaScript closure is the relationship between a JavaScript function and references to its surrounding state. In JavaScript, state values have “scope” — which defines how accessible a value is. The more general concept of reference access is also called “lexical scope.” There are three main levels of scope in JavaScript:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Global scope — Values are available everywhere&lt;/li&gt;
&lt;li&gt;Function scope — Values are only available within a specific function&lt;/li&gt;
&lt;li&gt;Block scope — Values are only available within a block of code (typically surrounded by braces: &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is an example of scope in code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Global Scope
let globalValue = &quot;available anywhere&quot;;

// Function Scope
function yourFunction() { 
  // var1 and var2 are only accessible in this function
  let var1 = &quot;hello&quot;;
  let var2 = &quot;world&quot;;

  console.log(var1);
  console.log(var2);
}

// Block Scope
if(globalValue = &quot;available anywhere&quot;) {
  // variables defined here are only accssible inside this conditional
  let b1 = &quot;block 1&quot;;
  let b2 = &quot;block 2&quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the example code above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;globalValue&lt;/code&gt; — Can be reached anywhere in the program&lt;/li&gt;
&lt;li&gt;&lt;code&gt;var1&lt;/code&gt; and &lt;code&gt;var2&lt;/code&gt; — Can only be reached inside &lt;code&gt;yourFunction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b1&lt;/code&gt; and &lt;code&gt;b2&lt;/code&gt; — Can only be accessed when &lt;code&gt;globalValue&lt;/code&gt; = “available anywhere”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Closures happen when you make variables available inside or outside of their normal scope. This can be seen in the following example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function start() {
  // variable created inside function
  const firstName = &quot;John&quot;;

  // function inside the start function which has access to firstName
  function displayFirstName() {
    // displayFirstName creates a closure
    console.log(firstName);
  }
  // should print &quot;John&quot; to the console
  displayName();
}
start();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In JavaScript projects, closures can cause issues where some values are accessible and others are not. When working with React specifically, this often happens when handling events or local state within components.&lt;/p&gt;
&lt;p&gt;If you’d like a more in-depth review of closures in general, I recommend checking out our article on JavaScript closures, higher-order functions, and currying.&lt;/p&gt;
&lt;p&gt;Closures in React&lt;/p&gt;
&lt;p&gt;React projects usually encounter closure issues with managing state. In React applications, you can manage state local to a component with &lt;code&gt;useState&lt;/code&gt; . You can also leverage tools for centralized state management like Redux, or React Context for state management that goes across multiple components in a project.&lt;/p&gt;
&lt;p&gt;Controlling the state of a component or multiple components requires the understanding of what values are accessible and where. When managing state in a React project, you may encounter frustrating closure issues where inconsistent changes can occur.&lt;/p&gt;

&lt;p&gt;To better explain the concepts of closures in React, I’ll show an example using the built-in &lt;code&gt;setTimeout&lt;/code&gt; function. After that example in the following section, I will cover a real world production issue I had to resolve with closures. In all of these examples, you can follow along with my sample project.&lt;/p&gt;
&lt;p&gt;Consider an application that takes in an input and does an async action. Usually you would see this with a form, or something that would take in client inputs and then pass them over to an API to do something. We can simplify this with a &lt;code&gt;setTimeout&lt;/code&gt; in a component like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const SetTimeoutIssue = () =&amp;gt; {
    const [count, setCount] = useState(0);
    const handleClick = () =&amp;gt; {
        setCount(count + 1);
        // This will always show the value of count at the time the timeout was set
        setTimeout(() =&amp;gt; {
            console.log(&#39;Current count (Issue):&#39;, count);
            alert(`Current count (Issue): ${count}`);
        }, 2000);
    };
    return (
        &amp;lt;div className=&quot;p-4 bg-black rounded shadow&quot;&amp;gt;
            &amp;lt;h2 className=&quot;text-xl font-bold mb-4&quot;&amp;gt;setTimeout Issue&amp;lt;/h2&amp;gt;
            &amp;lt;p className=&quot;mb-4&quot;&amp;gt;Current count: {count}&amp;lt;/p&amp;gt;
            &amp;lt;button
                onClick={handleClick}
                className=&quot;bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600&quot;
            &amp;gt;
                Increment and Check After 2s
            &amp;lt;/button&amp;gt;
            &amp;lt;div className=&quot;mt-4 p-4 bg-gray-100 rounded&quot;&amp;gt;
                &amp;lt;p className=&quot;text-black&quot;&amp;gt;
                    Expected: Alert shows the updated count
                &amp;lt;/p&amp;gt;
                &amp;lt;p className=&quot;text-black&quot;&amp;gt;
                    Actual: Alert shows the count from when setTimeout was
                    called
                &amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    );
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This looks like something that should not have issues. The user clicks a button and a counter value is incremented and then shown in an alert modal. Where the issue happens is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    const handleClick = () =&amp;gt; {
        setCount(count + 1);
        // This will always show the value of count at the time the timeout was set
        setTimeout(() =&amp;gt; {
            console.log(&#39;Current count (Issue):&#39;, count);
            alert(`Current count (Issue): ${count}`);
        }, 2000);
    };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;count&lt;/code&gt; value is captured by the &lt;code&gt;setTimeout&lt;/code&gt; function call in a closure. If you took this example and attempted to click the button multiple times in rapid succession you would see something like this:&lt;/p&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://paper-attachments.dropboxusercontent.com/s_D15B793FFA9B9209C709E6AC9819358A039445AD57FF536A5B6435F7257CC96A_1739982123165_Screen+Shot+2025-02-19+at+11.21.44+AM.jpg&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;In that screenshot, the Current Count: 1 indicates that the &lt;code&gt;count&lt;/code&gt; value is actually “1.” Since the &lt;code&gt;setTimeout&lt;/code&gt; created a closure and locked the value to the initial 0, the modal shows 0.&lt;/p&gt;
&lt;p&gt;To resolve this issue, we can use the &lt;code&gt;useRef&lt;/code&gt; Hook to create a reference that always has the latest value across re-renders. With React state management, issues can occur where a re-render pulls data from a previous state.&lt;/p&gt;
&lt;p&gt;If you just use &lt;code&gt;useState&lt;/code&gt; Hooks without a lot of complexity, you generally can get away with the standard getting and setting state. However, closures in particular data can have issues persisting as updates occur. Consider a refactor of our original component like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const SetTimeoutSolution = () =&amp;gt; {
    const [count, setCount] = useState(0);
    const countRef = useRef(count);
    // Keep the ref in sync with the state
    countRef.current = count;
    const handleClickWithRef = () =&amp;gt; {
        setCount(count + 1);
        // Using ref to get the latest value
        setTimeout(() =&amp;gt; {
            console.log(&#39;Current count (Solution with Ref):&#39;, countRef.current);
            alert(`Current count (Solution with Ref): ${countRef.current}`);
        }, 2000);
    };
    return (
        &amp;lt;div className=&quot;p-4 bg-black rounded shadow&quot;&amp;gt;
            &amp;lt;h2 className=&quot;text-xl font-bold mb-4&quot;&amp;gt;setTimeout Solution&amp;lt;/h2&amp;gt;
            &amp;lt;p className=&quot;mb-4&quot;&amp;gt;Current count: {count}&amp;lt;/p&amp;gt;
            &amp;lt;div className=&quot;space-y-4&quot;&amp;gt;
                &amp;lt;div&amp;gt;
                    &amp;lt;button
                        onClick={handleClickWithRef}
                        className=&quot;bg-green-500 text-black px-4 py-2 rounded hover:bg-green-600&quot;
                    &amp;gt;
                        Increment and Check After 2s
                    &amp;lt;/button&amp;gt;
                    &amp;lt;div className=&quot;mt-4 p-4 bg-gray-100 rounded&quot;&amp;gt;
                        &amp;lt;p className=&quot;text-black&quot;&amp;gt;
                            Expected: Alert shows the updated count
                        &amp;lt;/p&amp;gt;
                        &amp;lt;p className=&quot;text-black&quot;&amp;gt;
                            Actual: Alert shows the updated count
                        &amp;lt;/p&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    );
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The difference in the code from the original issue is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    const [count, setCount] = useState(0);
    const countRef = useRef(count);
    // Keep the ref in sync with the state
    countRef.current = count;

    const handleClickWithRef = () =&amp;gt; {
        setCount(count + 1);
        // Using ref to get the latest value
        setTimeout(() =&amp;gt; {
            console.log(&#39;Current count (Solution with Ref):&#39;, countRef.current);
            alert(`Current count (Solution with Ref): ${countRef.current}`);
        }, 2000);
    };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll notice that we are using the &lt;code&gt;countRef&lt;/code&gt; value, which references the actual state value for &lt;code&gt;count&lt;/code&gt;. The reference persists across re-renders and thus resolves this closure issue. If you’d like more information on useRef, I recommend reviewing the LogRocket’s guide to React Refs.&lt;/p&gt;
&lt;p&gt;A real-world example of JavaScript closures: SignalR reference leaks in callbacks&lt;/p&gt;
&lt;p&gt;In my professional role, I am a tech lead of a product team that manages an application used nationally by my company. This application handles real-time updates of data that reside in different queues. These queues are shown visually on a page with multiple tabs (one tab per queue). The page will receive messages from Azure’s SignalR service when the data is changed by backend processes. The messages received indicate how to either update the data or move it to a different queue.&lt;/p&gt;
&lt;p&gt;My team encountered an issue where this whole process was generating multiple errors. Basically, some updates seemed to be occurring correctly, while others were missed or incorrect. This was very frustrating for our users. It was also very difficult to debug as the SignalR service operates in real time, and requires triggering messages to be sent from the server to the client.&lt;/p&gt;
&lt;p&gt;Initially, I thought that this had to be something on our backend. I walked through the backend processes that generate the SignalR messages with the devs on my team. When it became apparent that the messages were being sent correctly, I switched over to looking at the frontend project.&lt;/p&gt;
&lt;p&gt;In a deep dive of the code, I found that the issue was basically a closure problem. We were using the SignalR client package from Microsoft, and the event handler that was receiving the messages was incorrectly acting on old state.&lt;/p&gt;

&lt;p&gt;For the solution to my problem, I refactored the message handler and also used the &lt;code&gt;useRef&lt;/code&gt; hook that I had mentioned before. If you’re following along on my sample project, I’m referring to the &lt;code&gt;SignalRIssue&lt;/code&gt; and &lt;code&gt;SignalRSolution&lt;/code&gt; components.&lt;/p&gt;
&lt;p&gt;Consider the original SignalRIssue component:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import React, { useState, useEffect } from &#39;react&#39;;
import { ValueLocation, MoveMessage } from &#39;../types/message&#39;;
import { createMockHub, createInitialValues } from &#39;../utils/mockHub&#39;;
import ValueList from &#39;./ValueList&#39;;
import MessageDisplay from &#39;./MessageDisplay&#39;;

const SignalRIssue: React.FC = () =&amp;gt; {
    const [tabAValues, setTabAValues] = useState&amp;lt;ValueLocation[]&amp;gt;(() =&amp;gt;
        createInitialValues()
    );
    const [tabBValues, setTabBValues] = useState&amp;lt;ValueLocation[]&amp;gt;([]);
    const [activeTab, setActiveTab] = useState&amp;lt;&#39;A&#39; | &#39;B&#39;&amp;gt;(&#39;A&#39;);
    const [lastMove, setLastMove] = useState&amp;lt;MoveMessage | null&amp;gt;(null);
    useEffect(() =&amp;gt; {
        const hub = createMockHub();
        hub.on(&#39;message&#39;, (data: MoveMessage) =&amp;gt; {
            // The closure captures these initial arrays and will always reference
            // their initial values throughout the component&#39;s lifecycle
            if (data.targetTab === &#39;A&#39;) {
                // Remove from B (but using stale B state)
                setTabBValues(tabBValues.filter((v) =&amp;gt; v.value !== data.value));
                // Add to A (but using stale A state)
                setTabAValues([
                    ...tabAValues,
                    {
                        tab: &#39;A&#39;,
                        value: data.value,
                    },
                ]);
            } else {
                // Remove from A (but using stale A state)
                setTabAValues(tabAValues.filter((v) =&amp;gt; v.value !== data.value));
                // Add to B (but using stale B state)
                setTabBValues([
                    ...tabBValues,
                    {
                        tab: &#39;B&#39;,
                        value: data.value,
                    },
                ]);
            }
            setLastMove(data);
        });
        hub.start();
        return () =&amp;gt; {
            hub.stop();
        };
    }, []); // Empty dependency array creates the closure issue

    return (
        &amp;lt;div className=&quot;p-4 bg-black rounded shadow&quot;&amp;gt;
            &amp;lt;h2 className=&quot;text-xl font-bold mb-4&quot;&amp;gt;SignalR Issue&amp;lt;/h2&amp;gt;
            &amp;lt;div className=&quot;min-h-screen w-full flex items-center justify-center py-8&quot;&amp;gt;
                &amp;lt;div className=&quot;max-w-2xl w-full mx-4&quot;&amp;gt;
                    &amp;lt;div className=&quot;bg-gray-800 rounded-lg shadow-xl overflow-hidden&quot;&amp;gt;
                        &amp;lt;MessageDisplay message={lastMove} /&amp;gt;
                        &amp;lt;div className=&quot;border-b border-gray-700&quot;&amp;gt;
                            &amp;lt;div className=&quot;flex&quot;&amp;gt;
                                &amp;lt;button
                                    onClick={() =&amp;gt; setActiveTab(&#39;A&#39;)}
                                    className={`px-6 py-3 text-sm font-medium flex-1 ${
                                        activeTab === &#39;A&#39;
                                            ? &#39;border-b-2 border-purple-500 text-purple-400 bg-purple-900/20&#39;
                                            : &#39;text-gray-400 hover:text-purple-300 hover:bg-purple-900/10&#39;
                                    }`}
                                &amp;gt;
                                    Tab A ({tabAValues.length})
                                &amp;lt;/button&amp;gt;
                                &amp;lt;button
                                    onClick={() =&amp;gt; setActiveTab(&#39;B&#39;)}
                                    className={`px-6 py-3 text-sm font-medium flex-1 ${
                                        activeTab === &#39;B&#39;
                                            ? &#39;border-b-2 border-emerald-500 text-emerald-400 bg-emerald-900/20&#39;
                                            : &#39;text-gray-400 hover:text-emerald-300 hover:bg-emerald-900/10&#39;
                                    }`}
                                &amp;gt;
                                    Tab B ({tabBValues.length})
                                &amp;lt;/button&amp;gt;
                            &amp;lt;/div&amp;gt;
                        &amp;lt;/div&amp;gt;
                        {activeTab === &#39;A&#39; ? (
                            &amp;lt;ValueList values={tabAValues} tab={activeTab} /&amp;gt;
                        ) : (
                            &amp;lt;ValueList values={tabBValues} tab={activeTab} /&amp;gt;
                        )}
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div className=&quot;mt-4 p-4 bg-yellow-900 rounded-lg border border-yellow-700&quot;&amp;gt;
                        &amp;lt;h3 className=&quot;text-sm font-medium text-yellow-300&quot;&amp;gt;
                            Issue Explained
                        &amp;lt;/h3&amp;gt;
                        &amp;lt;p className=&quot;mt-2 text-sm text-yellow-200&quot;&amp;gt;
                            This component demonstrates the closure issue where
                            the event handler captures the initial state values
                            and doesn&#39;t see updates. Watch as values may
                            duplicate or disappear due to stale state
                            references.
                        &amp;lt;/p&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    );
};
export default SignalRIssue;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The component basically loads, connects to a hub (here I’ve created a mock version of the SignalR connection) and then acts when messages are received. In my mocked SignalR client, I have it using &lt;code&gt;setInterval&lt;/code&gt; and randomly moving values from one tab to another:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import { MoveMessage, ValueLocation } from &#39;../types/message&#39;;
export const createInitialValues = (): ValueLocation[] =&amp;gt; {
    return Array.from({ length: 5 }, (_, index) =&amp;gt; ({
        value: index + 1,
        tab: &#39;A&#39;,
    }));
};
export const createMockHub = () =&amp;gt; {
    return {
        on: (eventName: string, callback: (data: MoveMessage) =&amp;gt; void) =&amp;gt; {
            // Simulate value movements every 2 seconds
            const interval = setInterval(() =&amp;gt; {
                // Randomly select a value (1-5) and a target tab
                const value = Math.floor(Math.random() * 5) + 1;
                const targetTab = Math.random() &amp;gt; 0.5 ? &#39;A&#39; : &#39;B&#39;;
                callback({
                    type: &#39;move&#39;,
                    value,
                    targetTab,
                    timestamp: Date.now(),
                });
            }, 2000);
            return () =&amp;gt; clearInterval(interval);
        },
        start: () =&amp;gt; Promise.resolve(),
        stop: () =&amp;gt; Promise.resolve(),
    };
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you ran my sample component, you would see odd behavior like this:&lt;/p&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://paper-attachments.dropboxusercontent.com/s_D15B793FFA9B9209C709E6AC9819358A039445AD57FF536A5B6435F7257CC96A_1739983423021_Screen+Shot+2025-02-19+at+11.43.33+AM.jpg&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;There should only be one occurrence of &lt;code&gt;Value1&lt;/code&gt; and &lt;code&gt;Value5&lt;/code&gt; in that list. Instead, there are multiple, and it looks like nothing is being moved over to Tab B.&lt;/p&gt;
&lt;p&gt;Looking at the code, you can see the closure issue here:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        hub.on(&#39;message&#39;, (data: MoveMessage) =&amp;gt; {
            // The closure captures these initial arrays and will always reference
            // their initial values throughout the component&#39;s lifecycle
            if (data.targetTab === &#39;A&#39;) {
                // Remove from B (but using stale B state)
                setTabBValues(tabBValues.filter((v) =&amp;gt; v.value !== data.value));
                // Add to A (but using stale A state)
                setTabAValues([
                    ...tabAValues,
                    {
                        tab: &#39;A&#39;,
                        value: data.value,
                    },
                ]);
            } else {
                // Remove from A (but using stale A state)
                setTabAValues(tabAValues.filter((v) =&amp;gt; v.value !== data.value));
                // Add to B (but using stale B state)
                setTabBValues([
                    ...tabBValues,
                    {
                        tab: &#39;B&#39;,
                        value: data.value,
                    },
                ]);
            }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The message handler is operating directly on the stale state when updating values. When the handler receives the messages, it’s operating on a point in the state change that is older vs. the actual value that should persist across re-renders.&lt;/p&gt;
&lt;p&gt;To resolve this situation, you can do what I did in the &lt;code&gt;setTimeout&lt;/code&gt; example and go back to the &lt;code&gt;useRef&lt;/code&gt; Hook:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    const [tabAValues, setTabAValues] = useState&amp;lt;ValueLocation[]&amp;gt;(() =&amp;gt;
        createInitialValues()
    );
    const [tabBValues, setTabBValues] = useState&amp;lt;ValueLocation[]&amp;gt;([]);
    const [activeTab, setActiveTab] = useState&amp;lt;&#39;A&#39; | &#39;B&#39;&amp;gt;(&#39;A&#39;);
    const [lastMove, setLastMove] = useState&amp;lt;MoveMessage | null&amp;gt;(null);

    // Create refs to maintain latest state values
    const tabAValuesRef = useRef(tabAValues);
    const tabBValuesRef = useRef(tabBValues);

    // Keep refs in sync with current state
    tabAValuesRef.current = tabAValues;
    tabBValuesRef.current = tabBValues;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then in the message handler, you look for values from the reference vs. a stale read of the components state by looking at the &lt;code&gt;.current&lt;/code&gt; values:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    useEffect(() =&amp;gt; {
        const hub = createMockHub();
        hub.on(&#39;message&#39;, (data: MoveMessage) =&amp;gt; {
            // Use refs to access current state values
            const valueInA = tabAValuesRef.current.find(
                (v) =&amp;gt; v.value === data.value
            );
            if (data.targetTab === &#39;A&#39;) {
                if (!valueInA) {
                    // Value should move to A
                    const valueInB = tabBValuesRef.current.find(
                        (v) =&amp;gt; v.value === data.value
                    );
                    if (valueInB) {
                        // Use functional updates to ensure clean state transitions
                        setTabBValues((prev) =&amp;gt;
                            prev.filter((v) =&amp;gt; v.value !== data.value)
                        );
                        setTabAValues((prev) =&amp;gt; [
                            ...prev,
                            {
                                tab: &#39;A&#39;,
                                value: data.value,
                            },
                        ]);
                    }
                }
            } else {
                if (valueInA) {
                    // Value should move to B
                    setTabAValues((prev) =&amp;gt;
                        prev.filter((v) =&amp;gt; v.value !== data.value)
                    );
                    setTabBValues((prev) =&amp;gt; [
                        ...prev,
                        {
                            tab: &#39;B&#39;,
                            value: data.value,
                        },
                    ]);
                }
            }
            setLastMove(data);
        });
        hub.start();
        return () =&amp;gt; {
            hub.stop();
        };
    }, []); // Empty dependency array is fine now because we&#39;re using refs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you notice, I also made a comment about “functional updates.”&lt;/p&gt;
&lt;p&gt;In React, a “functional update” takes in the state’s previous value and acts on that instead of directly modifying the state. This ensures that you can basically do an update in the components lifecycle on the latest value vs. attempting to act on something that may be missed in a re-render. The &lt;code&gt;useRef&lt;/code&gt; usage should cover this, but this is an important additional point when dealing with closures.&lt;/p&gt;
&lt;p&gt;With the resolved code written, you should now see something like this where the values correctly pass back and forth between the tabs:&lt;/p&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://paper-attachments.dropboxusercontent.com/s_D15B793FFA9B9209C709E6AC9819358A039445AD57FF536A5B6435F7257CC96A_1739984125126_Screen+Shot+2025-02-19+at+11.55.13+AM.jpg&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;When I worked on a resolution to the production issue I mentioned, I went through a fairly exhaustive set of steps debugging the backend processes first and working my way up to the frontend.&lt;/p&gt;
&lt;p&gt;Closure issues can often be frustrating, because on the surface it appears that the updates are handled correctly. The biggest takeaway I had with this issue was to incrementally follow the state as it is passed through a process. To correctly figure out my team’s closure issue, I did both step debugging and walked through the data change at each step.&lt;/p&gt;
&lt;p&gt;With SignalR, this can be difficult because you need something to trigger the update to receive it on the client side. Ultimately, I recommend tracing through a process before jumping straight into a solution when you see issues like this.&lt;/p&gt;
&lt;p&gt;Conclusion&lt;/p&gt;
&lt;p&gt;In this article you learned how to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define closures both generally and in React JavaScript&lt;/li&gt;
&lt;li&gt;Manage closures with concepts of scope&lt;/li&gt;
&lt;li&gt;Work with closures in a simple example in JavaScript’s &lt;code&gt;setTimeout&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;Work with closures in a real-world example with connection callbacks in Azure’s SignalR service&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I mentioned throughout the article, closures can be frustrating at times (especially when dealing with production). The best thing I have found is to understand how your application is managing state, and then trace processes on that state when seeing issues.&lt;/p&gt;
&lt;p&gt;I hope this article has helped you to understand closures, and how you can work with them in React specifically. Thanks for reading my post!&lt;/p&gt;
&lt;!-- CONTENT END 1 --&gt;
&lt;/div&gt;
            &lt;style&gt;
    .share-icon.share-twitter span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-twitter.svg&quot;);
    }

    .share-icon.share-reddit span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-reddit.svg&quot;);
    }

    .share-icon.share-linkedin span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-linkedin.svg&quot;);
    }

    .share-icon.share-facebook span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-facebook.svg&quot;);
    }
&lt;/style&gt;

&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon sd-sharing&quot;&gt;&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;&lt;div class=&quot;sd-content&quot;&gt;&lt;ul&gt;&lt;li class=&quot;share-twitter&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-twitter-202525&quot; class=&quot;share-twitter sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/how-to-manage-javascript-closures-in-react-2/?share=twitter&quot; target=&quot;_blank&quot; title=&quot;Click to share on Twitter&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Twitter (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-reddit&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;&quot; class=&quot;share-reddit sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/how-to-manage-javascript-closures-in-react-2/?share=reddit&quot; target=&quot;_blank&quot; title=&quot;Click to share on Reddit&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Reddit (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-linkedin&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-linkedin-202525&quot; class=&quot;share-linkedin sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/how-to-manage-javascript-closures-in-react-2/?share=linkedin&quot; target=&quot;_blank&quot; title=&quot;Click to share on LinkedIn&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on LinkedIn (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-facebook&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-facebook-202525&quot; class=&quot;share-facebook sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/how-to-manage-javascript-closures-in-react-2/?share=facebook&quot; target=&quot;_blank&quot; title=&quot;Click to share on Facebook&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Facebook (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-end&quot;&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;            &lt;ul id=&quot;post-tags&quot;&gt;
            &lt;li&gt;
        &lt;a rel=&quot;tag&quot; href=&quot;https://blog.logrocket.com/tag/javascript/&quot;&gt;#javascript&lt;/a&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
            &lt;div class=&quot;post-popup&quot; data-popup-name=&quot;dev-cab&quot;&gt;
    &lt;i data-popup-dismiss=&quot;&quot; class=&quot;fa-solid fa-xmark post-popup__exit&quot;&gt;&lt;/i&gt;
    &lt;div class=&quot;post-popup__page active&quot;&gt;
        &lt;p class=&quot;post-popup__title&quot;&gt;Would you be interested in joining LogRocket&#39;s developer community? &lt;/p&gt;
        &lt;div class=&quot;post-popup__buttons&quot;&gt;
            &lt;button data-popup-next=&quot;&quot; class=&quot;lr-button&quot;&gt;Yea&lt;/button&gt;
            &lt;button data-popup-dismiss=&quot;&quot; class=&quot;lr-button&quot;&gt;No Thanks&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;post-popup__page&quot;&gt;
        &lt;p&gt;
            Join LogRocket’s Content Advisory Board. You’ll help inform the type of
            content we create and get access to exclusive meetups, social accreditation,
            and swag.
        &lt;/p&gt;
        &lt;a data-popup-dismiss=&quot;&quot; class=&quot;lr-button&quot; target=&quot;__blank&quot; href=&quot;https://lp.logrocket.com/blg/content-advisory-board-signup&quot;&gt;Sign up now&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
        &lt;/div&gt;
    </description><link>https://blog.logrocket.com/how-to-manage-javascript-closures-in-react-2/</link><guid isPermaLink="false">https://blog.logrocket.com/how-to-manage-javascript-closures-in-react-2/</guid><pubDate>Sun, 23 Mar 2025 16:00:00 GMT</pubDate><author>Tanishka Kashikar</author></item><item><title>How to use the array filter() method in JavaScript</title><description>&lt;aside&gt;
            &lt;div class=&quot;sticky&quot;&gt;
                                
&lt;div class=&quot;toc-container&quot; id=&quot;post-toc&quot;&gt;
            &lt;div class=&quot;toc-header&quot;&gt;
            &lt;span class=&quot;toc-title&quot;&gt;
                Table of contents            &lt;/span&gt;
            &lt;i class=&quot;fa fa-chevron-down toc-collapse&quot;&gt;&lt;/i&gt;
            &lt;i class=&quot;hide fa fa-chevron-up toc-expand&quot;&gt;&lt;/i&gt;
        &lt;/div&gt;
        
&lt;ul data-toc-name=&quot;root&quot; class=&quot;toc&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/array-filter-method-javascript/#syntax-parameters&quot;&gt;Syntax and parameters of the array &lt;code&gt;filter()&lt;/code&gt;method&lt;/a&gt;
        &lt;ul data-toc-name=&quot;syntax-parameters&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/array-filter-method-javascript/#how-array-filter-method-works&quot;&gt;How the array &lt;code&gt;filter()&lt;/code&gt; method works&lt;/a&gt;
        &lt;ul data-toc-name=&quot;how-array-filter-method-works&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/array-filter-method-javascript/#practical-use-cases&quot;&gt;Practical use cases of the &lt;code&gt;array&lt;/code&gt; &lt;code&gt;filter()&lt;/code&gt; method&lt;/a&gt;
        &lt;ul data-toc-name=&quot;practical-use-cases&quot; class=&quot;toc-subheading&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/array-filter-method-javascript/#basicfiltering&quot;&gt;&lt;strong&gt;Basic&lt;/strong&gt; &lt;strong&gt;f&lt;/strong&gt;iltering&lt;/a&gt;
        &lt;ul data-toc-name=&quot;basicfiltering&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/array-filter-method-javascript/#searchinginanarray&quot;&gt;&lt;strong&gt;Searching in an&lt;/strong&gt; &lt;strong&gt;a&lt;/strong&gt;rray&lt;/a&gt;
        &lt;ul data-toc-name=&quot;searchinginanarray&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/array-filter-method-javascript/#filteringobjectsbyspecificproperties&quot;&gt;&lt;strong&gt;Filtering&lt;/strong&gt; &lt;strong&gt;o&lt;/strong&gt;bjects by &lt;strong&gt;s&lt;/strong&gt;pecific &lt;strong&gt;p&lt;/strong&gt;roperties&lt;/a&gt;
        &lt;ul data-toc-name=&quot;filteringobjectsbyspecificproperties&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/array-filter-method-javascript/#filteringinvaliddata&quot;&gt;&lt;strong&gt;Filtering&lt;/strong&gt; &lt;strong&gt;i&lt;/strong&gt;nvalid &lt;strong&gt;d&lt;/strong&gt;ata&lt;/a&gt;
        &lt;ul data-toc-name=&quot;filteringinvaliddata&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/array-filter-method-javascript/#filteringofduplicatevalues&quot;&gt;&lt;strong&gt;Filtering of&lt;/strong&gt; &lt;strong&gt;d&lt;/strong&gt;uplicate &lt;strong&gt;v&lt;/strong&gt;alues&lt;/a&gt;
        &lt;ul data-toc-name=&quot;filteringofduplicatevalues&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/array-filter-method-javascript/#advanced-techniques&quot;&gt;Advanced techniques: Chaining &lt;code&gt;filter()&lt;/code&gt; with other array methods&lt;/a&gt;
        &lt;ul data-toc-name=&quot;advanced-techniques&quot; class=&quot;toc-subheading&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/array-filter-method-javascript/#chainingfilterwithmap&quot;&gt;&lt;strong&gt;Chaining&lt;/strong&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;strong&gt;with&lt;/strong&gt; &lt;code&gt;map()&lt;/code&gt;&lt;/a&gt;
        &lt;ul data-toc-name=&quot;chainingfilterwithmap&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/array-filter-method-javascript/#chainingfilterwithreduce&quot;&gt;&lt;strong&gt;Chaining&lt;/strong&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;strong&gt;with&lt;/strong&gt; &lt;code&gt;reduce()&lt;/code&gt;&lt;/a&gt;
        &lt;ul data-toc-name=&quot;chainingfilterwithreduce&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/array-filter-method-javascript/#best-practices-efficient-filtering-logic&quot;&gt;Best practices for writing efficient filtering logic&lt;/a&gt;
        &lt;ul data-toc-name=&quot;best-practices-efficient-filtering-logic&quot; class=&quot;toc-subheading&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/array-filter-method-javascript/#optimizeyourcallback&quot;&gt;&lt;strong&gt;Optimize&lt;/strong&gt; &lt;strong&gt;y&lt;/strong&gt;our &lt;strong&gt;c&lt;/strong&gt;allback&lt;/a&gt;
        &lt;ul data-toc-name=&quot;optimizeyourcallback&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/array-filter-method-javascript/#makeuseofarrowfunctions&quot;&gt;&lt;strong&gt;Make use of&lt;/strong&gt; &lt;strong&gt;a&lt;/strong&gt;rrow &lt;strong&gt;f&lt;/strong&gt;unctions&lt;/a&gt;
        &lt;ul data-toc-name=&quot;makeuseofarrowfunctions&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/array-filter-method-javascript/#breakdowncomplexchains&quot;&gt;&lt;strong&gt;Break&lt;/strong&gt; &lt;strong&gt;d&lt;/strong&gt;own &lt;strong&gt;c&lt;/strong&gt;omplex &lt;strong&gt;c&lt;/strong&gt;hains&lt;/a&gt;
        &lt;ul data-toc-name=&quot;breakdowncomplexchains&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/array-filter-method-javascript/#maintainimmutability&quot;&gt;&lt;strong&gt;Maintain&lt;/strong&gt; &lt;strong&gt;i&lt;/strong&gt;mmutability&lt;/a&gt;
        &lt;ul data-toc-name=&quot;maintainimmutability&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/array-filter-method-javascript/#considerperformanceimplications&quot;&gt;&lt;strong&gt;Consider&lt;/strong&gt; &lt;strong&gt;p&lt;/strong&gt;erformance &lt;strong&gt;i&lt;/strong&gt;mplications&lt;/a&gt;
        &lt;ul data-toc-name=&quot;considerperformanceimplications&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/array-filter-method-javascript/#conclusion&quot;&gt;Conclusion&lt;/a&gt;
        &lt;ul data-toc-name=&quot;conclusion&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/div&gt;
                &lt;!-- Sidebar gutter ad --&gt;
                
            &lt;/div&gt;
        &lt;/aside&gt;
        &lt;div id=&quot;the-content-container&quot;&gt;
            
&lt;div class=&quot;lr-content&quot;&gt;
    &lt;!-- TEMP: .article-post is only used for adinserter to hook into --&gt;
    &lt;div class=&quot;article-post&quot;&gt;&lt;/div&gt;
    
&lt;p&gt;The array &lt;code&gt;filter()&lt;/code&gt; method does exactly what its name suggests; it filters an array based on a given condition, returning a new array that contains only the elements that meet the specified condition.&lt;/p&gt;
&lt;img fetchpriority=&quot;high&quot; decoding=&quot;async&quot; width=&quot;895&quot; height=&quot;597&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/featured-image-array-filter-javascript.png&quot; class=&quot;attachment-full size-full wp-post-image&quot; alt=&quot;array filter method javascript&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/featured-image-array-filter-javascript.png 895w, https://blog.logrocket.com/wp-content/uploads/2025/03/featured-image-array-filter-javascript.png?resize=300,200 300w, https://blog.logrocket.com/wp-content/uploads/2025/03/featured-image-array-filter-javascript.png?resize=768,512 768w&quot; sizes=&quot;(max-width: 895px) 100vw, 895px&quot; data-attachment-id=&quot;202344&quot; data-permalink=&quot;https://blog.logrocket.com/array-filter-method-javascript/attachment/featured-image-array-filter-javascript/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/featured-image-array-filter-javascript.png&quot; data-orig-size=&quot;895,597&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;featured-image-array-filter-javascript&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/featured-image-array-filter-javascript.png?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/featured-image-array-filter-javascript.png?w=895&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;p&gt;In this article, we will learn how the array &lt;code&gt;filter()&lt;/code&gt; method works, practical use cases, advanced techniques, and best practices to help you write efficient filtering logic.&lt;/p&gt;
&lt;h2 id=&quot;syntax-parameters&quot;&gt;Syntax and parameters of the array &lt;code&gt;filter()&lt;/code&gt;method&lt;/h2&gt;
&lt;p&gt;The array &lt;code&gt;filter()&lt;/code&gt; method is defined using this format:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;const newArray = originalArray.filter(callbackFunction(element,index, array),thisArg);
&lt;/pre&gt;
&lt;p&gt;The method takes in the following parameters and arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;callbackFunction&lt;/code&gt;&lt;/strong&gt;&amp;nbsp;&lt;strong&gt;—&lt;/strong&gt; Defines the rule for filtering. It is invoked once for each element in the array:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;element&lt;/code&gt;&lt;/strong&gt; — The current element being processed&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;index&lt;/code&gt; (optional)&lt;/strong&gt; — The index of the current element. It starts counting from 0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;strong&gt;array&lt;/strong&gt;&lt;/code&gt; &lt;strong&gt;(optional)&lt;/strong&gt; — The original array to be filtered&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Return&lt;/strong&gt; &lt;strong&gt;—&lt;/strong&gt; The &lt;code&gt;callbackFunction&lt;/code&gt; returns a Boolean value. If &lt;code&gt;true&lt;/code&gt;, the element is included in the new array&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;thisArg&lt;/code&gt; (optional)&lt;/strong&gt; — A value to use as &lt;code&gt;this&lt;/code&gt; inside the &lt;code&gt;callbackFunction&lt;/code&gt;. This parameter is ignored if the callback is an arrow function, as arrow functions don’t have &lt;code&gt;this&lt;/code&gt; binding&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Return value&lt;/strong&gt; &lt;strong&gt;—&lt;/strong&gt; The &lt;code&gt;filter()&lt;/code&gt; method returns a new array containing only the elements that satisfy the filtering condition&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: If no element passes the condition, it will return an empty array.&lt;/p&gt;
&lt;h2 id=&quot;how-array-filter-method-works&quot;&gt;How the array &lt;code&gt;filter()&lt;/code&gt; method works&lt;/h2&gt;
&lt;p&gt;To understand the step-by-step process of how the array &lt;code&gt;filter()&lt;/code&gt; method works, let’s look at an example scenario without the filter method, vs. with the filter method.&lt;/p&gt;
&lt;p&gt;Assume that we have an array of words and only want to get the words longer than five characters from the array. Without &lt;code&gt;filter()&lt;/code&gt;, we would traditionally use a &lt;code&gt;for&lt;/code&gt; loop like this:&lt;/p&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; data-attachment-id=&quot;202345&quot; data-permalink=&quot;https://blog.logrocket.com/array-filter-method-javascript/attachment/1_without-array-filter-method/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/1_without-array-filter-method.png&quot; data-orig-size=&quot;895,371&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;1_without-array-filter-method&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/1_without-array-filter-method.png?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/1_without-array-filter-method.png?w=895&quot; class=&quot;aligncenter size-full wp-image-202345&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/1_without-array-filter-method.png&quot; alt=&quot;life without the array filter method&quot; width=&quot;895&quot; height=&quot;371&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/1_without-array-filter-method.png 895w, https://blog.logrocket.com/wp-content/uploads/2025/03/1_without-array-filter-method.png?resize=300,124 300w, https://blog.logrocket.com/wp-content/uploads/2025/03/1_without-array-filter-method.png?resize=768,318 768w&quot; sizes=&quot;(max-width: 895px) 100vw, 895px&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;With the &lt;code&gt;for&lt;/code&gt; loop, we had to take an extra step by manually iterating through the array and adding each matching value individually.&lt;/p&gt;
&lt;p&gt;Now, let’s simplify this process using the &lt;code&gt;filter()&lt;/code&gt; method:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; data-attachment-id=&quot;202346&quot; data-permalink=&quot;https://blog.logrocket.com/array-filter-method-javascript/attachment/2_using-the-arra-yfilter-method/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/2_using-the-arra-yfilter-method.png&quot; data-orig-size=&quot;895,197&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;2_using-the-arra-yfilter-method&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/2_using-the-arra-yfilter-method.png?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/2_using-the-arra-yfilter-method.png?w=895&quot; class=&quot;aligncenter size-full wp-image-202346&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/2_using-the-arra-yfilter-method.png&quot; alt=&quot;using the array filter method&quot; width=&quot;895&quot; height=&quot;197&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/2_using-the-arra-yfilter-method.png 895w, https://blog.logrocket.com/wp-content/uploads/2025/03/2_using-the-arra-yfilter-method.png?resize=300,66 300w, https://blog.logrocket.com/wp-content/uploads/2025/03/2_using-the-arra-yfilter-method.png?resize=768,169 768w&quot; sizes=&quot;auto, (max-width: 895px) 100vw, 895px&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;filter()&lt;/code&gt; method itself is an iterative method, so it does not require the additional step of using a &lt;code&gt;for&lt;/code&gt; loop, and based on the result from the callback function, each element from the array is automatically added to a new array.&lt;/p&gt;
&lt;p&gt;It’s important to note that this method is designed specifically for arrays. To use it with other JavaScript data types, they must first be converted into an array.&lt;/p&gt;
&lt;h2 id=&quot;practical-use-cases&quot;&gt;Practical use cases of the &lt;code&gt;array&lt;/code&gt; &lt;code&gt;filter()&lt;/code&gt; method&lt;/h2&gt;
&lt;p&gt;This method can be implemented in solving logic problems in real-world applications and solutions. Here are some examples that are most commonly used:&lt;/p&gt;
&lt;h3 id=&quot;basicfiltering&quot;&gt;&lt;strong&gt;Basic&lt;/strong&gt; &lt;strong&gt;f&lt;/strong&gt;iltering&lt;/h3&gt;
&lt;p&gt;Let’s consider an example where we want to filter out a list of product prices to find those above a certain threshold.&lt;/p&gt;
&lt;p&gt;To solve this effectively, we can use an &lt;a href=&quot;https://blog.logrocket.com/javascript-arrow-functions/&quot;&gt;arrow function&lt;/a&gt; to define the filtering condition concisely inside the filter method:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;const productPrices = [15.99, 25.50, 10.00, 30.75, 5.49, 22.00];
const expensiveProducts = productPrices.filter(price =&amp;gt; price &amp;gt; 20);

console.log(expensiveProducts)
// Result: [25.5, 30.75, 22]
&lt;/pre&gt;
&lt;h3 id=&quot;searchinginanarray&quot;&gt;&lt;strong&gt;Searching in an&lt;/strong&gt; &lt;strong&gt;a&lt;/strong&gt;rray&lt;/h3&gt;
&lt;p&gt;One of the most common use cases for the &lt;code&gt;filter()&lt;/code&gt; method is implementing a search feature. It can be used to filter a list of names based on a search query, returning only the items that match.&lt;/p&gt;
&lt;p&gt;To ensure case-insensitive matching, it’s best to convert both the search query and the array elements to lowercase before filtering:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;const names = [&#39;John&#39;, &#39;Alice&#39;, &#39;Jonathan&#39;, &#39;Bob&#39;, &#39;Joanna&#39;];
const searchQuery = &#39;jo&#39;;
const searchResults = names.filter(name =&amp;gt; 
  name.toLowerCase().includes(searchQuery.toLowerCase())
);

console.log(searchResults)
// Result: [&#39;John&#39;, &#39;Jonathan&#39;, &#39;Joanna&#39;]
&lt;/pre&gt;
&lt;h3 id=&quot;filteringobjectsbyspecificproperties&quot;&gt;&lt;strong&gt;Filtering&lt;/strong&gt; &lt;strong&gt;o&lt;/strong&gt;bjects by &lt;strong&gt;s&lt;/strong&gt;pecific &lt;strong&gt;p&lt;/strong&gt;roperties&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;filter()&lt;/code&gt; method can be used on arrays of objects, allowing you to filter them based on specific property values.&lt;/p&gt;
&lt;p&gt;Let’s consider a content platform where each post is represented as an object with properties like &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt;, and &lt;code&gt;tags&lt;/code&gt;. If you want to display only the posts that are tagged as &lt;code&gt;&quot;tech&quot;&lt;/code&gt;, you can use the &lt;code&gt;filter()&lt;/code&gt; method to extract only those posts:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;const posts = [
  { id: 1, title: &#39;AI Breakthrough&#39;, tags: [&#39;tech&#39;, &#39;science&#39;]},
  { id: 2, title: &#39;Travel Guide&#39;, tags: [&#39;lifestyle&#39;] },
  { id: 3, title: &#39;New JavaScript Framework&#39;, tags: [&#39;tech&#39;] },
];
const techPosts = posts.filter(post =&amp;gt; post.tags.includes(&#39;tech&#39;))

console.log(techPosts)
// Result: [
//   { id: 1, title: &#39;AI Breakthrough&#39;, tags: [ &#39;tech&#39;, &#39;science&#39; ] },
//   { id: 3, title: &#39;New JavaScript Framework&#39;, tags: [ &#39;tech&#39; ] }
// ]
&lt;/pre&gt;
&lt;h3 id=&quot;filteringinvaliddata&quot;&gt;&lt;strong&gt;Filtering&lt;/strong&gt; &lt;strong&gt;i&lt;/strong&gt;nvalid &lt;strong&gt;d&lt;/strong&gt;ata&lt;/h3&gt;
&lt;p&gt;When working with raw data, it’s common to encounter invalid values or edge cases that must be removed before further processing. Instead of manually checking and cleaning the data, we can use the &lt;code&gt;filter()&lt;/code&gt; method to do this efficiently:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;const rawData = [&quot;Hello&quot;, &quot;&quot;, 42, null, undefined, &quot;JavaScript&quot;];
const cleanData = rawData.filter(item =&amp;gt; item !== null &amp;amp;&amp;amp; item !== undefined &amp;amp;&amp;amp; item !== &#39;&#39;);

console.log(cleanData);
//Result: [ &#39;Hello&#39;, 42, &#39;JavaScript&#39; ]
&lt;/pre&gt;
&lt;p&gt;A simpler alternative to filter out unwanted values is using &lt;code&gt;Boolean&lt;/code&gt; as the callback function. This removes all falsy values, including &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;&quot;&quot;&lt;/code&gt; (empty strings), and &lt;code&gt;NaN&lt;/code&gt; (Not a Number):&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;const cleanData = rawData.filter(Boolean);
&lt;/pre&gt;
&lt;h3 id=&quot;filteringofduplicatevalues&quot;&gt;&lt;strong&gt;Filtering of&lt;/strong&gt; &lt;strong&gt;d&lt;/strong&gt;uplicate &lt;strong&gt;v&lt;/strong&gt;alues&lt;/h3&gt;
&lt;p&gt;When working with arrays, duplicates can often exist. Whether it’s from user input or an external source, we need a way to remove them efficiently. This can be done by combining the &lt;code&gt;filter()&lt;/code&gt; method with the &lt;code&gt;indexOf()&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;const duplicates = [1, 2, 2, 3, 4, 4, 5];
const uniqueValues = duplicates.filter((item, index, arr) =&amp;gt; 
  arr.indexOf(item) === index
//Compares the first occurrence index with the current index
);

console.log(uniqueValues)
// Result: [1, 2, 3, 4, 5]
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;indexOf(item)&lt;/code&gt; finds the first index of the element in the array. By comparing the current index to this first index, we ensure only the first occurrence of each item is kept in the array.&lt;/p&gt;

&lt;p&gt;This method works well for arrays of primitive values (numbers, strings). It doesn’t handle deduplication for objects, as each object reference is unique.&lt;/p&gt;
&lt;h2 id=&quot;advanced-techniques&quot;&gt;Advanced techniques: Chaining &lt;code&gt;filter()&lt;/code&gt; with other array methods&lt;/h2&gt;
&lt;p&gt;Now that we have a solid understanding of how the &lt;code&gt;filter()&lt;/code&gt; method works, we can take it a step further by combining it with other &lt;a href=&quot;https://blog.logrocket.com/javascript-array-methods/&quot;&gt;array methods&lt;/a&gt; like &lt;code&gt;map()&lt;/code&gt; and &lt;code&gt;reduce()&lt;/code&gt; using chaining.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.logrocket.com/optional-chaining-and-nullish-coalescing-in-javascript/&quot;&gt;Chaining in JavaScript&lt;/a&gt; is a method that allows multiple functions to be linked together, with each function passing its output as the input to the next. This works because many JavaScript methods return an object, enabling consecutive method calls in a seamless flow.&lt;/p&gt;
&lt;p&gt;By chaining array methods, we can efficiently perform complex transformations while keeping the code concise and readable.&lt;/p&gt;
&lt;p&gt;Before diving into chaining, let’s quickly review how these methods work individually:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;strong&gt;filter()&lt;/strong&gt;&lt;/code&gt; – Narrows down the array by selecting only elements that meet a specific condition&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/strong&gt; – Transforms each element in an array and returns a new array with modified values&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;reduce()&lt;/code&gt;&lt;/strong&gt; – Aggregates array values into a single result (such as sum, average, count)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s explore how these methods can be combined for advanced use cases.&lt;/p&gt;
&lt;h3 id=&quot;chainingfilterwithmap&quot;&gt;&lt;strong&gt;Chaining&lt;/strong&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;strong&gt;with&lt;/strong&gt; &lt;code&gt;map()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;A common use case for chaining &lt;code&gt;filter()&lt;/code&gt; and &lt;code&gt;map()&lt;/code&gt; is refining &lt;a href=&quot;https://blog.logrocket.com/chrome-devtools-api-mocking/&quot;&gt;API response data&lt;/a&gt;. Often, the responses contain irregularities, such as empty values or invalid entries. By combining these methods, we can filter out invalid or unwanted data and transform the remaining data into a structured format.&lt;/p&gt;
&lt;p&gt;In a content management system (CMS), it is common to retrieve a list of articles via an API that may include entries with missing titles or those still in draft status. To ensure that only published articles with valid titles are displayed to users, we can chain these methods:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;const dummyData = [
  { id: 1, title: &#39;  JavaScript Guide  &#39;, status: &#39;DRAFT&#39; },
  { id: 2, title: &#39;React Basics&#39;, status: &#39;PUBLISHED&#39; },
  { id: 3, title: &#39;  &#39;, status: &#39;PUBLISHED&#39; }, // Invalid title
];

const publishedArticles = dummyData
  .filter(item =&amp;gt; item.title.trim() !== &#39;&#39; &amp;amp;&amp;amp; item.status === &#39;PUBLISHED&#39;) 
// Remove empty titles and drafts
  .map(item =&amp;gt; ({
    ...item, // Copy all values from the original array
    title: item.title.trim().toLowerCase(), // Normalize title
  }));

console.log(publishedArticles);
// Result: [{ id: 2, title: &#39;react basics&#39;, status: &#39;PUBLISHED&#39; }]
&lt;/pre&gt;
&lt;h3 id=&quot;chainingfilterwithreduce&quot;&gt;&lt;strong&gt;Chaining&lt;/strong&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;strong&gt;with&lt;/strong&gt; &lt;code&gt;reduce()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;These array methods can be useful when we need to filter specific elements and then accumulate the result.&lt;/p&gt;
&lt;p&gt;For example, consider an &lt;a href=&quot;https://blog.logrocket.com/product-management/leader-spotlight-steve-wertz/&quot;&gt;ecommerce&lt;/a&gt; platform where we have a list of products, but not all of them are currently in stock.&lt;/p&gt;
&lt;p&gt;We want to calculate the total value of all available products by filtering out out-of-stock items and adding up the prices of the remaining products:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;const products = [
  { name: &#39;Laptop&#39;, price: 1000, inStock: true },
  { name: &#39;Phone&#39;, price: 500, inStock: false },
  { name: &#39;Tablet&#39;, price: 750, inStock: true },
]

const totalStockValue = products
  .filter((product) =&amp;gt; product.inStock) // Keep only in-stock products
  .reduce((sum, product) =&amp;gt; sum + product.price, 0) // Add up prices

console.log(totalStockValue)
// Result: 1750
&lt;/pre&gt;
&lt;h2 id=&quot;best-practices-efficient-filtering-logic&quot;&gt;Best practices for writing efficient filtering logic&lt;/h2&gt;
&lt;p&gt;While the &lt;code&gt;filter()&lt;/code&gt; method is incredibly simple to use, following the few best practices listed below can help ensure your code is both efficient and easy to maintain.&lt;/p&gt;
&lt;h3 id=&quot;optimizeyourcallback&quot;&gt;&lt;strong&gt;Optimize&lt;/strong&gt; &lt;strong&gt;y&lt;/strong&gt;our &lt;strong&gt;c&lt;/strong&gt;allback&lt;/h3&gt;
&lt;p&gt;Keep the logic inside your callback simple by avoiding heavy computations or complex calculations. Precompute values when possible, and use built-in functions for better performance.&lt;/p&gt;
&lt;h3 id=&quot;makeuseofarrowfunctions&quot;&gt;&lt;strong&gt;Make use of&lt;/strong&gt; &lt;strong&gt;a&lt;/strong&gt;rrow &lt;strong&gt;f&lt;/strong&gt;unctions&lt;/h3&gt;
&lt;p&gt;This keeps your code concise, readable, and reduces boilerplate.&lt;/p&gt;

&lt;h3 id=&quot;breakdowncomplexchains&quot;&gt;&lt;strong&gt;Break&lt;/strong&gt; &lt;strong&gt;d&lt;/strong&gt;own &lt;strong&gt;c&lt;/strong&gt;omplex &lt;strong&gt;c&lt;/strong&gt;hains&lt;/h3&gt;
&lt;p&gt;It’s good to chain methods like &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;map()&lt;/code&gt;, and &lt;code&gt;reduce()&lt;/code&gt; since it avoids reusing intermediate variables. However, deep nesting might become too unreadable. You could consider splitting them into name-oriented functions such that your code will be easier to read.&lt;/p&gt;
&lt;h3 id=&quot;maintainimmutability&quot;&gt;&lt;strong&gt;Maintain&lt;/strong&gt; &lt;strong&gt;i&lt;/strong&gt;mmutability&lt;/h3&gt;
&lt;p&gt;When transforming objects, be cautious not to mistakenly mutate your data. Use the spread operator &lt;code&gt;...&lt;/code&gt; to create new objects, ensuring your original data remains unchanged.&lt;/p&gt;
&lt;h3 id=&quot;considerperformanceimplications&quot;&gt;&lt;strong&gt;Consider&lt;/strong&gt; &lt;strong&gt;p&lt;/strong&gt;erformance &lt;strong&gt;i&lt;/strong&gt;mplications&lt;/h3&gt;
&lt;p&gt;For very large datasets, for-loops can sometimes outperform &lt;code&gt;filter()&lt;/code&gt;. Although &lt;code&gt;filter()&lt;/code&gt; is concise and readable, in performance-sensitive contexts, an optimized loop might be the better choice.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this article, we‘ve discussed the array &lt;code&gt;filter()&lt;/code&gt; method, from its basic syntax and use cases to more advanced techniques like chaining with &lt;code&gt;map()&lt;/code&gt; and &lt;code&gt;reduce()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By understanding and applying the best practices outlined here, you can write cleaner, more efficient, and more maintainable code.&lt;/p&gt;
&lt;p&gt;I hope this tutorial was useful to you! If you have any questions, feel free to reach out to me on &lt;a href=&quot;https://x.com/abiolaEsther_&quot;&gt;X&lt;/a&gt;. Happy coding!&lt;/p&gt;


&lt;/div&gt;
            &lt;style&gt;
    .share-icon.share-twitter span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-twitter.svg&quot;);
    }

    .share-icon.share-reddit span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-reddit.svg&quot;);
    }

    .share-icon.share-linkedin span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-linkedin.svg&quot;);
    }

    .share-icon.share-facebook span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-facebook.svg&quot;);
    }
&lt;/style&gt;

&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon sd-sharing&quot;&gt;&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;&lt;div class=&quot;sd-content&quot;&gt;&lt;ul&gt;&lt;li class=&quot;share-twitter&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-twitter-202343&quot; class=&quot;share-twitter sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/array-filter-method-javascript/?share=twitter&quot; target=&quot;_blank&quot; title=&quot;Click to share on Twitter&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Twitter (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-reddit&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;&quot; class=&quot;share-reddit sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/array-filter-method-javascript/?share=reddit&quot; target=&quot;_blank&quot; title=&quot;Click to share on Reddit&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Reddit (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-linkedin&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-linkedin-202343&quot; class=&quot;share-linkedin sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/array-filter-method-javascript/?share=linkedin&quot; target=&quot;_blank&quot; title=&quot;Click to share on LinkedIn&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on LinkedIn (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-facebook&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-facebook-202343&quot; class=&quot;share-facebook sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/array-filter-method-javascript/?share=facebook&quot; target=&quot;_blank&quot; title=&quot;Click to share on Facebook&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Facebook (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-end&quot;&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;            &lt;ul id=&quot;post-tags&quot;&gt;
            &lt;li&gt;
        &lt;a rel=&quot;tag&quot; href=&quot;https://blog.logrocket.com/tag/javascript/&quot;&gt;#javascript&lt;/a&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
            &lt;div class=&quot;post-popup&quot; data-popup-name=&quot;dev-cab&quot;&gt;
    &lt;i data-popup-dismiss=&quot;&quot; class=&quot;fa-solid fa-xmark post-popup__exit&quot;&gt;&lt;/i&gt;
    &lt;div class=&quot;post-popup__page active&quot;&gt;
        &lt;p class=&quot;post-popup__title&quot;&gt;Hey there, want to help make our blog better? &lt;/p&gt;
        &lt;div class=&quot;post-popup__buttons&quot;&gt;
            &lt;button data-popup-next=&quot;&quot; class=&quot;lr-button&quot;&gt;Yea&lt;/button&gt;
            &lt;button data-popup-dismiss=&quot;&quot; class=&quot;lr-button&quot;&gt;No Thanks&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;post-popup__page&quot;&gt;
        &lt;p&gt;
            Join LogRocket’s Content Advisory Board. You’ll help inform the type of
            content we create and get access to exclusive meetups, social accreditation,
            and swag.
        &lt;/p&gt;
        &lt;a data-popup-dismiss=&quot;&quot; class=&quot;lr-button&quot; target=&quot;__blank&quot; href=&quot;https://lp.logrocket.com/blg/content-advisory-board-signup&quot;&gt;Sign up now&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
        &lt;/div&gt;
    </description><link>https://blog.logrocket.com/array-filter-method-javascript/</link><guid isPermaLink="false">https://blog.logrocket.com/array-filter-method-javascript/</guid><pubDate>Sun, 23 Mar 2025 16:00:00 GMT</pubDate><author>Abiola Farounbi</author></item><item><title>CSS vertical alignment: Best practices and examples</title><description>&lt;aside&gt;
            &lt;div class=&quot;sticky&quot;&gt;
                                
&lt;div class=&quot;toc-container&quot; id=&quot;post-toc&quot;&gt;
            &lt;div class=&quot;toc-header&quot;&gt;
            &lt;span class=&quot;toc-title&quot;&gt;
                Table of contents            &lt;/span&gt;
            &lt;i class=&quot;fa fa-chevron-down toc-collapse&quot;&gt;&lt;/i&gt;
            &lt;i class=&quot;hide fa fa-chevron-up toc-expand&quot;&gt;&lt;/i&gt;
        &lt;/div&gt;
        
&lt;ul data-toc-name=&quot;root&quot; class=&quot;toc&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/css-vertical-alignment/#definition&quot;&gt;What is CSS vertical alignment?&lt;/a&gt;
        &lt;ul data-toc-name=&quot;definition&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/css-vertical-alignment/#best-methods-vertical-alignment&quot;&gt;Quick reference: Best methods for vertical alignment&lt;/a&gt;
        &lt;ul data-toc-name=&quot;best-methods-vertical-alignment&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/css-vertical-alignment/#vertical-alignment-flexbox&quot;&gt;Vertical alignment using Flexbox&lt;/a&gt;
        &lt;ul data-toc-name=&quot;vertical-alignment-flexbox&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/css-vertical-alignment/#vertical-alignment-css-grid&quot;&gt;Vertical alignment using CSS Grid&lt;/a&gt;
        &lt;ul data-toc-name=&quot;vertical-alignment-css-grid&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/css-vertical-alignment/#absolute%20positioning&quot;&gt;Vertical alignment using absolute positioning&lt;/a&gt;
        &lt;ul data-toc-name=&quot;absolute positioning&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/css-vertical-alignment/#inline-table-based&quot;&gt;Inline and table-based vertical alignment&lt;/a&gt;
        &lt;ul data-toc-name=&quot;inline-table-based&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/css-vertical-alignment/#implications-vertical-alignment&quot;&gt;Implications of vertical alignment&lt;/a&gt;
        &lt;ul data-toc-name=&quot;implications-vertical-alignment&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/div&gt;
                &lt;!-- Sidebar gutter ad --&gt;
                
            &lt;/div&gt;
        &lt;/aside&gt;
        &lt;div id=&quot;the-content-container&quot;&gt;
            
&lt;div class=&quot;lr-content&quot;&gt;
    &lt;!-- TEMP: .article-post is only used for adinserter to hook into --&gt;
    &lt;div class=&quot;article-post&quot;&gt;&lt;/div&gt;
    
&lt;p&gt;Back in the good old days, the limits of CSS made even “simple” things like vertical centering a challenge, with some developers even relying on JavaScript solutions. It was fragile and very constrained, and there was always that one exception that made it fail.&lt;/p&gt;
&lt;img fetchpriority=&quot;high&quot; decoding=&quot;async&quot; width=&quot;895&quot; height=&quot;597&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2024/04/featured-image-css-variables.png&quot; class=&quot;attachment-full size-full wp-post-image&quot; alt=&quot;css vertical alignment&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2024/04/featured-image-css-variables.png 895w, https://blog.logrocket.com/wp-content/uploads/2024/04/featured-image-css-variables.png?resize=300,200 300w, https://blog.logrocket.com/wp-content/uploads/2024/04/featured-image-css-variables.png?resize=768,512 768w&quot; sizes=&quot;(max-width: 895px) 100vw, 895px&quot; data-attachment-id=&quot;202624&quot; data-permalink=&quot;https://blog.logrocket.com/css-vertical-alignment/attachment/featured-image-css-variables-2/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2024/04/featured-image-css-variables.png&quot; data-orig-size=&quot;895,597&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;featured-image-css-variables&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2024/04/featured-image-css-variables.png?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2024/04/featured-image-css-variables.png?w=895&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;p&gt;Whether we were trying to align an icon or image beside the text, create one of those popular hero banners, or create a modal overlay, centering things on the vertical axis was always a struggle.&lt;/p&gt;
&lt;p&gt;But CSS has come a long way since, providing many methods that make vertical centering easier every time. In this article, we will look at a summary of some of them, along with their use cases and limitations.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Editor’s note: &lt;/em&gt;&lt;/strong&gt;&lt;em&gt;This post was last updated by&lt;/em&gt;&lt;em&gt;&lt;a href=&quot;https://blog.logrocket.com/author/rishipurwar/&quot;&gt; Rishi Purwar&lt;/a&gt; in March 2025 to offer a direct comparison of different alignment techniques (&lt;code&gt;vertical-align&lt;/code&gt;, &lt;code&gt;flexbox&lt;/code&gt;, &lt;code&gt;grid&lt;/code&gt;), add interactive CodePen examples, and expand on browser compatibility.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;definition&quot;&gt;What is CSS vertical alignment?&lt;/h2&gt;
&lt;p&gt;Vertical alignment can be seen everywhere in an application, from navigation menus, form fields, product listings, and so on. To vertically align a text or an element means to arrange it within a container or block along its vertical/y-axis. The image below demonstrates this:&lt;/p&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; data-attachment-id=&quot;202627&quot; data-permalink=&quot;https://blog.logrocket.com/css-vertical-alignment/attachment/example-css-vertical-alignment/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/example-css-vertical-alignment.png&quot; data-orig-size=&quot;895,597&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;example-css-vertical-alignment&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/example-css-vertical-alignment.png?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/example-css-vertical-alignment.png?w=895&quot; class=&quot;aligncenter size-full wp-image-202627&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/example-css-vertical-alignment.png&quot; alt=&quot;example of css vertical alignment&quot; width=&quot;895&quot; height=&quot;597&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/example-css-vertical-alignment.png 895w, https://blog.logrocket.com/wp-content/uploads/2025/03/example-css-vertical-alignment.png?resize=300,200 300w, https://blog.logrocket.com/wp-content/uploads/2025/03/example-css-vertical-alignment.png?resize=768,512 768w&quot; sizes=&quot;(max-width: 895px) 100vw, 895px&quot; referrerpolicy=&quot;no-referrer&quot;&gt;The diagram explains the concept of vertical alignment in this way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Top-Alignment — &lt;/strong&gt;The element or text is at the top of the container or block&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Middle-Alignment — &lt;/strong&gt;The element or text is centered vertically, and must have an equal distance from the top and bottom of the container or block&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bottom-Alignment — &lt;/strong&gt;The element or text is at the bottom of the container or block&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unless explicitly stated, each strategy highlighted below will work with inline elements as well. This makes sense, given that we’ll be directly transforming their position or display properties.&lt;/p&gt;
&lt;h2 id=&quot;best-methods-vertical-alignment&quot;&gt;Quick reference: Best methods for vertical alignment&lt;/h2&gt;
&lt;p&gt;This table provides a high-level comparison of the different approaches, helping you choose the best method based on your layout needs:&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Method&lt;/td&gt;
&lt;td&gt;CSS properties used&lt;/td&gt;
&lt;td&gt;Works with&lt;/td&gt;
&lt;td&gt;Key advantages&lt;/td&gt;
&lt;td&gt;Browser support&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CSS Flexbox&lt;/td&gt;
&lt;td&gt;&lt;code&gt;align-items&lt;/code&gt;, &lt;code&gt;justify-content&lt;/code&gt;, &lt;code&gt;align-self&lt;/code&gt;, &lt;code&gt;align-content&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Flex containers&lt;/td&gt;
&lt;td&gt;Flexible, responsive, minimal extra markup&lt;/td&gt;
&lt;td&gt;All modern browsers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CSS Grid&lt;/td&gt;
&lt;td&gt;&lt;code&gt;align-items&lt;/code&gt;, &lt;code&gt;justify-content&lt;/code&gt;, &lt;code&gt;align-self&lt;/code&gt;, &lt;code&gt;place-items&lt;/code&gt;, &lt;code&gt;grid-template-rows&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Grid containers&lt;/td&gt;
&lt;td&gt;Precise placement, single-line centering with &lt;code&gt;place-items&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;All modern browsers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Absolute positioning&lt;/td&gt;
&lt;td&gt;&lt;code&gt;position: absolute&lt;/code&gt;, &lt;code&gt;top: 50%&lt;/code&gt;, &lt;code&gt;transform: translateY(-50%)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Any positioned parent&lt;/td&gt;
&lt;td&gt;Works without Flex or Grid&lt;/td&gt;
&lt;td&gt;Wide browser compatibility&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Inline &amp;amp; table-based&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vertical-align&lt;/code&gt;, &lt;code&gt;display: table-cell&lt;/code&gt;, &lt;code&gt;line-height&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Inline/text elements, tables&lt;/td&gt;
&lt;td&gt;Works with inline and text elements, table-based layouts&lt;/td&gt;
&lt;td&gt;Wide browser compatibility&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;vertical-alignment-flexbox&quot;&gt;Vertical alignment using Flexbox&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.logrocket.com/responsive-image-gallery-css-flexbox/&quot;&gt;CSS Flexbox&lt;/a&gt; introduced great alignment properties (that are now forked into their own&lt;a href=&quot;https://www.w3.org/TR/css-align-3/#propdef-align-content&quot;&gt; box alignment module&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;These properties allow us to control how items are placed and how empty space is distributed. Previously, this would have required either magic numbers in CSS for a specific number of elements, or clever JavaScript for dynamic amounts. Now, with a few Flexbox properties, we can control how items are placed and how empty space is distributed.&lt;/p&gt;
&lt;p&gt;The way you align items using Flexbox depends on the &lt;strong&gt;&lt;code&gt;flex-direction&lt;/code&gt;&lt;/strong&gt; property.&lt;/p&gt;
&lt;p&gt;When using &lt;code&gt;flex-direction: row&lt;/code&gt;, &lt;code&gt;justify-content&lt;/code&gt; controls horizontal alignment, while &lt;code&gt;align-items&lt;/code&gt; controls vertical alignment.&lt;/p&gt;
&lt;p&gt;When using &lt;code&gt;flex-direction: column&lt;/code&gt;, it’s the opposite. &lt;code&gt;justify-content&lt;/code&gt; aligns items vertically and &lt;code&gt;align-items&lt;/code&gt; aligns them horizontally.&lt;/p&gt;
&lt;h3&gt;Example 1: Aligning items vertically with &lt;code&gt;align-items&lt;/code&gt; and &lt;code&gt;justify-content&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In this example, we use &lt;code&gt;align-items&lt;/code&gt; and &lt;code&gt;justify-content&lt;/code&gt; to center items vertically and horizontally within a Flex container. This approach ensures consistent alignment, making it a go-to method for flexible layouts:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;VYwLXbm&quot; data-pen-title=&quot;Align on the flex container or the flex item&quot; data-user=&quot;rishi111&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/rishi111/pen/VYwLXbm&quot;&gt;&lt;br&gt;
Align on the flex container or the flex item&lt;/a&gt; by Rishi Purwar (&lt;a href=&quot;https://codepen.io/rishi111&quot;&gt;@rishi111&lt;/a&gt;)&lt;br&gt;
on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h4&gt;Browser support for &lt;code&gt;align-items&lt;/code&gt; and &lt;code&gt;justify-content&lt;/code&gt;:&lt;/h4&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Browser&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;display: flex&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;justify-content&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;align-items&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Chrome&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;⚠️ 21-28 (partial, -webkit- prefix), ✅ 28+&lt;/td&gt;
&lt;td&gt;⚠️ 21-51 (partial), ✅ 52+&lt;/td&gt;
&lt;td&gt;⚠️ 21-51 (partial), ✅ 51+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Firefox&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅ 20+&lt;/td&gt;
&lt;td&gt;✅ 20+&lt;/td&gt;
&lt;td&gt;✅ 20+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Edge&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅ 12+&lt;/td&gt;
&lt;td&gt;✅12+&lt;/td&gt;
&lt;td&gt;✅ 12+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Safari&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;⚠️ 7-8 (partial, -webkit- prefix), ✅ 8+&lt;/td&gt;
&lt;td&gt;✅ 7+&lt;/td&gt;
&lt;td&gt;✅ 7+&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Example 2: Aligning Flex items vertically with &lt;code&gt;align-self&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In this example, we use &lt;code&gt;align-self&lt;/code&gt; to vertically align a flex item within its container. This is useful when individual flex items need different alignments:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;yyLNKbZ&quot; data-pen-title=&quot;Align on the flex container or the flex item 2&quot; data-user=&quot;rishi111&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/rishi111/pen/yyLNKbZ&quot;&gt;&lt;br&gt;
Align on the flex container or the flex item 2&lt;/a&gt; by Rishi Purwar (&lt;a href=&quot;https://codepen.io/rishi111&quot;&gt;@rishi111&lt;/a&gt;)&lt;br&gt;
on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Browser support for &lt;code&gt;align-self&lt;/code&gt;&lt;/h4&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Browser&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;align-self&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Chrome&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p id=&quot;gdcalert18&quot;&gt;⚠️ 21-35 (partial), ✅ 35+&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Firefox&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅ 20+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Edge&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅ 12+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Safari&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅ 7+&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Example 3: Aligning Flex items vertically with &lt;code&gt;margin: auto&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;One of the simplest and most reliable ways to vertically center a flex item is by applying &lt;code&gt;margin: auto&lt;/code&gt;. This approach automatically adjusts the margins around the Flex item, distributing the remaining space evenly and perfectly centering it within the container:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;raNVJPQ&quot; data-pen-title=&quot;Using margin: auto on a flex item&quot; data-user=&quot;rishi111&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/rishi111/pen/raNVJPQ&quot;&gt;&lt;br&gt;
Using margin: auto on a flex item&lt;/a&gt; by Rishi Purwar (&lt;a href=&quot;https://codepen.io/rishi111&quot;&gt;@rishi111&lt;/a&gt;)&lt;br&gt;
on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This tactic is one of my favorites because of its simplicity. The only major limitation is that it’ll only work with a single element.&lt;/p&gt;
&lt;h3&gt;Example 4: Aligning Flex items vertically with &lt;code&gt;align-content&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;According to the&lt;a href=&quot;https://www.w3.org/TR/css-align-3/&quot;&gt; CSS Box Alignment Module Level 3 specification&lt;/a&gt;, &lt;code&gt;align-content&lt;/code&gt; can be used to control alignment along the block axis in block and&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_multicol_layout/Basic_concepts&quot;&gt; multicol containers&lt;/a&gt;. This allows centering content within these containers, similar to how it’s done in Flex and Grid layouts:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;bNGeWPG&quot; data-pen-title=&quot;align-content&quot; data-user=&quot;rishi111&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/rishi111/pen/bNGeWPG&quot;&gt;&lt;br&gt;
align-content&lt;/a&gt; by Rishi Purwar (&lt;a href=&quot;https://codepen.io/rishi111&quot;&gt;@rishi111&lt;/a&gt;)&lt;br&gt;
on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Browser support for &lt;code&gt;align-content&lt;/code&gt;:&lt;/h4&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Browser&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;align-content&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Chrome&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅ 21+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Firefox&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅ 28+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Edge&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅ 12+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Safari&lt;/td&gt;
&lt;td&gt;✅ 9+&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Example 5: Aligning Flex items vertically using pseudo-elements&lt;/h3&gt;
&lt;p&gt;In this example,&lt;a href=&quot;https://blog.logrocket.com/css-pseudo-elements-guide/&quot;&gt; pseudo-elements&lt;/a&gt; (&lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt;) are used to distribute space evenly within the Flex container. By setting their &lt;code&gt;flex: 1&lt;/code&gt;, they push the Flex item to the center, achieving vertical alignment without extra markup. However, this approach is not very practical for most layouts:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;NPWqYbM&quot; data-pen-title=&quot;Pseudo-elements on a flex container&quot; data-user=&quot;rishi111&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/rishi111/pen/NPWqYbM&quot;&gt;&lt;br&gt;
Pseudo-elements on a flex container&lt;/a&gt; by Rishi Purwar (&lt;a href=&quot;https://codepen.io/rishi111&quot;&gt;@rishi111&lt;/a&gt;)&lt;br&gt;
on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Browser support for pseudo-elements:&lt;/h4&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Browser&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;pseudo-elements (&lt;code&gt;:before&lt;/code&gt; &amp;amp; &lt;code&gt;:after&lt;/code&gt;)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;flex-direction: column&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Chrome&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅ 4+&lt;/td&gt;
&lt;td&gt;✅ 21+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Firefox&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅ 2+&lt;/td&gt;
&lt;td&gt;✅ 72+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Edge&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅ 12+&lt;/td&gt;
&lt;td&gt;✅ 12+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Safari&lt;/td&gt;
&lt;td&gt;✅ 3.1+&lt;/td&gt;
&lt;td&gt;✅ 7+&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;vertical-alignment-css-grid&quot;&gt;Vertical alignment using CSS Grid&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.logrocket.com/css-grid-guide/&quot;&gt;CSS Grid&lt;/a&gt; makes vertical alignment just as easy as Flexbox, giving you great control over content placement. With properties like &lt;code&gt;align-items&lt;/code&gt;, &lt;code&gt;justify-items&lt;/code&gt;, and &lt;code&gt;place-items&lt;/code&gt;, you can quickly center elements within a grid container—no extra tricks needed! Let’s explore how to align items vertically using Grid.&lt;/p&gt;
&lt;h3&gt;Example 1: Aligning Grid items vertically with &lt;code&gt;align-items&lt;/code&gt; and &lt;code&gt;justify-content&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In this example, we use &lt;code&gt;align-items: center&lt;/code&gt; to vertically align grid items and &lt;code&gt;justify-content: center&lt;/code&gt; to center them horizontally within the grid container. This approach ensures the item stays perfectly centered without needing extra spacing tricks:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;jEOPvOj&quot; data-pen-title=&quot;Align on the grid container&quot; data-user=&quot;rishi111&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/rishi111/pen/jEOPvOj&quot;&gt;&lt;br&gt;
Align on the grid container&lt;/a&gt; by Rishi Purwar (&lt;a href=&quot;https://codepen.io/rishi111&quot;&gt;@rishi111&lt;/a&gt;)&lt;br&gt;
on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Browser support for &lt;code&gt;align-items&lt;/code&gt; and &lt;code&gt;justify-content&lt;/code&gt;:&lt;/h4&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Browser&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;display: gri&lt;/code&gt;d&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;justify-content&lt;/code&gt; (&lt;/strong&gt;Grid Layout)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;align-items&lt;/code&gt; (&lt;/strong&gt;Grid Layout)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Chrome&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅ 57+&lt;/td&gt;
&lt;td&gt;✅ 57+&lt;/td&gt;
&lt;td&gt;✅ 57+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Firefox&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅ 52+&lt;/td&gt;
&lt;td&gt;✅ 52+&lt;/td&gt;
&lt;td&gt;✅ 52+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Edge&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;⚠️ 12-15 (partial, -webkit- prefix), ✅ 15+&lt;/td&gt;
&lt;td&gt;✅ 16+&lt;/td&gt;
&lt;td&gt;✅ 16+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Safari&lt;/td&gt;
&lt;td&gt;✅ 10.1+&lt;/td&gt;
&lt;td&gt;✅ 10.1+&lt;/td&gt;
&lt;td&gt;✅ 10.1+&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Example 2: Aligning Grid items vertically with &lt;code&gt;align-self&lt;/code&gt; and &lt;code&gt;justify-self&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In this example, we use &lt;code&gt;align-self&lt;/code&gt; and &lt;code&gt;justify-self&lt;/code&gt; to center a grid item within its cell. &lt;code&gt;align-self: center&lt;/code&gt; vertically centers the item, while &lt;code&gt;justify-self: center&lt;/code&gt; does the same horizontally. This approach is great for precise control over individual grid items without affecting the entire grid layout:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;zxYGJvK&quot; data-pen-title=&quot;Align On The Grid Item&quot; data-user=&quot;rishi111&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/rishi111/pen/zxYGJvK&quot;&gt;&lt;br&gt;
Align On The Grid Item&lt;/a&gt; by Rishi Purwar (&lt;a href=&quot;https://codepen.io/rishi111&quot;&gt;@rishi111&lt;/a&gt;)&lt;br&gt;
on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Browser support for &lt;code&gt;align-self&lt;/code&gt; and &lt;code&gt;justify-self&lt;/code&gt;:&lt;/h4&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Browser&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;align-self&lt;/code&gt;&lt;strong&gt; (&lt;/strong&gt;Grid Layout)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;justify-self&lt;/code&gt;&lt;strong&gt; (&lt;/strong&gt;Grid Layout)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Chrome&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅ 57+&lt;/td&gt;
&lt;td&gt;✅ 57+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Firefox&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅ 52+&lt;/td&gt;
&lt;td&gt;✅ 45+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Edge&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅ 16+&lt;/td&gt;
&lt;td&gt;✅ 16+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Safari&lt;/td&gt;
&lt;td&gt;✅ 10.1+&lt;/td&gt;
&lt;td&gt;✅ 10.1+&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Example 3: One-line centering with &lt;code&gt;place-items: center&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Another beautiful and straightforward &lt;code&gt;grid&lt;/code&gt; implementation is applying the &lt;code&gt;center&lt;/code&gt; value to a &lt;code&gt;place-items&lt;/code&gt; property in the same grid element. All of its child elements are magically centered:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;pvobPro&quot; data-pen-title=&quot;grid and place-items&quot; data-user=&quot;rishi111&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/rishi111/pen/pvobPro&quot;&gt;&lt;br&gt;
grid and place-items&lt;/a&gt; by Rishi Purwar (&lt;a href=&quot;https://codepen.io/rishi111&quot;&gt;@rishi111&lt;/a&gt;)&lt;br&gt;
on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Browser support for &lt;strong&gt;&lt;code&gt;place-items: center&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Browser&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt; place-items&lt;/code&gt;&lt;strong&gt; (&lt;/strong&gt;Grid Layout)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Chrome&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅ &amp;gt; 59&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Firefox&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅ &amp;gt; 45&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Edge&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅ &amp;gt; 79&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Safari&lt;/td&gt;
&lt;td&gt;✅ &amp;gt; 11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Example 4: Aligning Grid items vertically with &lt;code&gt;margin: auto&lt;/code&gt; on a &lt;code&gt;grid&lt;/code&gt; item&lt;/h3&gt;
&lt;p&gt;Similar to the Flexbox example above, using &lt;code&gt;margin: auto&lt;/code&gt; on a grid item allows it to automatically take up available space, centering it both vertically and horizontally within the grid container. This method is simple and requires no extra properties.&lt;/p&gt;
&lt;p class=&quot;codepen&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;Pwozmmy&quot; data-pen-title=&quot;margin: auto on a grid item&quot; data-user=&quot;rishi111&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/rishi111/pen/Pwozmmy&quot;&gt;&lt;br&gt;
margin: auto on a grid item&lt;/a&gt; by Rishi Purwar (&lt;a href=&quot;https://codepen.io/rishi111&quot;&gt;@rishi111&lt;/a&gt;)&lt;br&gt;
on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Example 5: Aligning Grid items vertically with &lt;code&gt;grid-row&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;When you need to place an element at a specific vertical position within a grid, &lt;code&gt;grid-row&lt;/code&gt; is the way to go. In this example, the item is placed in the second row to achieve vertical alignment within the grid layout:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;RNwRpQp&quot; data-pen-title=&quot;Pseudo-elements on a grid&quot; data-user=&quot;rishi111&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/rishi111/pen/RNwRpQp&quot;&gt;&lt;br&gt;
Pseudo-elements on a grid&lt;/a&gt; by Rishi Purwar (&lt;a href=&quot;https://codepen.io/rishi111&quot;&gt;@rishi111&lt;/a&gt;)&lt;br&gt;
on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Browser support for &lt;strong&gt;&lt;code&gt;grid-row&lt;/code&gt;&lt;/strong&gt;:&lt;/h4&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Browser&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;grid-template-columns&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;grid-template-rows&lt;/code&gt;: &lt;code&gt;repeat()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Chrome&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅ &amp;gt; 57&lt;/td&gt;
&lt;td&gt;✅ &amp;gt; 57&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Firefox&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅ &amp;gt; 52&lt;/td&gt;
&lt;td&gt;✅ &amp;gt; 52&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Edge&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;⚠️ 12-15 (partial, -ms-grid-column prefix), ✅ &amp;gt; 16&lt;/td&gt;
&lt;td&gt;✅ &amp;gt; 16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Safari&lt;/td&gt;
&lt;td&gt;✅ &amp;gt; 11&lt;/td&gt;
&lt;td&gt;✅ &amp;gt; 10&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Example 6: Aligning Grid items vertically using pseudo-elements&lt;/h3&gt;
&lt;p&gt;Just like the Flexbox approach, we can use pseudo-elements with CSS Grid to create vertical alignment. By defining a three-row grid and placing empty &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; elements in the first and third rows, we push the main element into the center without extra markup:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;RNwRpQp&quot; data-pen-title=&quot;Pseudo-elements on a grid&quot; data-user=&quot;rishi111&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/rishi111/pen/RNwRpQp&quot;&gt;&lt;br&gt;
Pseudo-elements on a grid&lt;/a&gt; by Rishi Purwar (&lt;a href=&quot;https://codepen.io/rishi111&quot;&gt;@rishi111&lt;/a&gt;)&lt;br&gt;
on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;absolute positioning&quot;&gt;Vertical alignment using absolute positioning&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.logrocket.com/use-css-anchor-positioning/&quot;&gt;Absolute positioning&lt;/a&gt; offers a reliable way to vertically align elements. By using properties like &lt;code&gt;position&lt;/code&gt;, &lt;code&gt;margin: auto&lt;/code&gt;, and &lt;code&gt;transform&lt;/code&gt;, we can center elements within their containers without depending on Flexbox or Grid.&lt;/p&gt;
&lt;h3&gt;Example 1: Aligning elements vertically using &lt;code&gt;position: absolute&lt;/code&gt; and &lt;code&gt;margin: auto&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;One way to vertically center an element is by using &lt;code&gt;position: absolute&lt;/code&gt; along with &lt;code&gt;margin: auto&lt;/code&gt;. By setting &lt;code&gt;inset: 0&lt;/code&gt;, the element is constrained within its container, and &lt;code&gt;margin: auto, &lt;/code&gt;automatically distributes the available space, centering it:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;bNGdYZQ&quot; data-pen-title=&quot;Absolute positioning and margin: auto&quot; data-user=&quot;rishi111&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/rishi111/pen/bNGdYZQ&quot;&gt;&lt;br&gt;
Absolute positioning and margin: auto&lt;/a&gt; by Rishi Purwar (&lt;a href=&quot;https://codepen.io/rishi111&quot;&gt;@rishi111&lt;/a&gt;)&lt;br&gt;
on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The limitation to this approach is, of course, that the element height must be explicitly declared, or it will occupy the entire container.&lt;/p&gt;
&lt;h3&gt;Example 2: Aligning elements vertically using &lt;code&gt;position: absolute&lt;/code&gt; and &lt;code&gt;translateY(-50%)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This is one of the first tricks, and still a go-to, for many developers. By relying on absolute positioning, the inner element at 50 percent from the top and left of its parent, we can then translate it up to 50 percent of its height:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;XJWbzwX&quot; data-pen-title=&quot;The classic top:50%, translateY(-50%)&quot; data-user=&quot;rishi111&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/rishi111/pen/XJWbzwX&quot;&gt;&lt;br&gt;
The classic top:50%, translateY(-50%)&lt;/a&gt; by Rishi Purwar (&lt;a href=&quot;https://codepen.io/rishi111&quot;&gt;@rishi111&lt;/a&gt;)&lt;br&gt;
on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A fairly solid approach, with the only major limitation being the use of &lt;code&gt;translate&lt;/code&gt; that might get in the way of other transforms, for example, when applying transitions or animations.&lt;/p&gt;
&lt;h2 id=&quot;inline-table-based&quot;&gt;Inline and table-based vertical alignment&lt;/h2&gt;
&lt;p&gt;Inline and table-based methods offer simple ways to vertically align content, especially for text and table elements. While &lt;code&gt;vertical-align&lt;/code&gt; works well for inline elements, &lt;code&gt;display: table-cell&lt;/code&gt; provides a reliable way to align content within table-based layouts. However, these approaches come with limitations and are less flexible compared to modern CSS techniques like Flexbox and Grid.&lt;/p&gt;
&lt;h3&gt;Examples 1: Vertical centering with &lt;code&gt;display: table-cell&lt;/code&gt; and &lt;code&gt;vertical-align&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This is a really simple approach, and one of the first (back in the day,&lt;a href=&quot;https://blog.logrocket.com/building-a-table-component-with-tailwind-css/&quot;&gt; everything was centered around tables&lt;/a&gt;). We’ll use the behavior of table cells and &lt;code&gt;vertical-align&lt;/code&gt; to center an element on a container.&lt;/p&gt;
&lt;p&gt;This can be done with actual tables or using semantic HTML, switching the display of the element to &lt;code&gt;table-cell&lt;/code&gt;:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;gbOpvxa&quot; data-pen-title=&quot;Centering with tables&quot; data-user=&quot;rishi111&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/rishi111/pen/gbOpvxa&quot;&gt;&lt;br&gt;
Centering with tables&lt;/a&gt; by Rishi Purwar (&lt;a href=&quot;https://codepen.io/rishi111&quot;&gt;@rishi111&lt;/a&gt;)&lt;br&gt;
on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But, bear in mind that this totally fails on screen readers (even if your markup is based on divs, setting the CSS display to &lt;code&gt;table&lt;/code&gt; and &lt;code&gt;table-cell&lt;/code&gt; makes screen readers interpret it as an actual table). So, it’s far from the best when it comes to accessibility.&lt;/p&gt;

&lt;h4&gt;Browser support for this method:&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;display: table-cell&lt;/code&gt; and &lt;code&gt;vertical-align&lt;/code&gt; CSS properties have great browser support, making it a reliable choice for vertical alignment, especially when working with table-like layouts.&lt;/p&gt;
&lt;h3&gt;Example 2: Using &lt;code&gt;vertical-align&lt;/code&gt; for inline elements&lt;/h3&gt;
&lt;p&gt;You can also use the &lt;code&gt;vertical-align&lt;/code&gt; property to center inline, inline-block, or table cell elements vertically. One of the many applications for this approach is to vertically align an image with text or to vertically align the contents of a table cell:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;RNwPMjg&quot; data-pen-title=&quot;Using vertical-align for inline elements&quot; data-user=&quot;rishi111&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/rishi111/pen/RNwPMjg&quot;&gt;&lt;br&gt;
Using vertical-align for inline elements&lt;/a&gt; by Rishi Purwar (&lt;a href=&quot;https://codepen.io/rishi111&quot;&gt;@rishi111&lt;/a&gt;)&lt;br&gt;
on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The fact that this method doesn’t work with the block element could be a deal breaker. Apart from that, it works reasonably well and is supported by older browsers.&lt;/p&gt;
&lt;h3&gt;Example 3: Centering single-line text with &lt;code&gt;line-height&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;By default, this vertically aligns your text by sharing an equal proportion of space around the text, creating an illusion of vertical centering.&lt;/p&gt;
&lt;p&gt;When the &lt;code&gt;line-height&lt;/code&gt; value is greater than the font size of the text, we can, by default, get extra spacing, and the extra space is then distributed evenly above and below the text. This makes the text appear vertically centered within its containing element. The&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/line-height&quot;&gt; implementation of this&lt;/a&gt; is straightforward:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;XJWKRoR&quot; data-pen-title=&quot;line-height&quot; data-user=&quot;rishi111&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/rishi111/pen/XJWKRoR&quot;&gt;&lt;br&gt;
line-height&lt;/a&gt; by Rishi Purwar (&lt;a href=&quot;https://codepen.io/rishi111&quot;&gt;@rishi111&lt;/a&gt;)&lt;br&gt;
on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Browser Support for &lt;strong&gt;&lt;code&gt;line-height&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;line-height&lt;/code&gt; has full support for&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/line-height#browser_compatibility&quot;&gt; all modern browsers&lt;/a&gt;; feel free to make the most of it.&lt;/p&gt;
&lt;h3&gt;Example 4: The ghost element method&lt;/h3&gt;
&lt;p&gt;Another oldie that didn’t catch up for whatever reason is using &lt;code&gt;inline-block&lt;/code&gt; with a ghost (pseudo) element that has 100% height of the parent, then setting &lt;code&gt;vertical-align: middle&lt;/code&gt; for both the pseudo-element and the element we want to center:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;pvoJaKa&quot; data-pen-title=&quot;The ghost element method&quot; data-user=&quot;rishi111&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/rishi111/pen/pvoJaKa&quot;&gt;&lt;br&gt;
The ghost element method&lt;/a&gt; by Rishi Purwar (&lt;a href=&quot;https://codepen.io/rishi111&quot;&gt;@rishi111&lt;/a&gt;)&lt;br&gt;
on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It works quite well, with the most noticeable catch being that it moves the horizontal center just a tiny bit to the right because of the always cringy behavior of white space between &lt;code&gt;inline-block&lt;/code&gt; elements.&lt;/p&gt;
&lt;p&gt;This can be dealt with by adjusting the margin on the pseudo-element. In our case, we’ve assigned &lt;code&gt;margin-left: -0.5ch&lt;/code&gt;. We can also get a perfect centering by setting the font size to &lt;code&gt;0&lt;/code&gt; on the container and resetting it to &lt;code&gt;px&lt;/code&gt; or &lt;code&gt;rem&lt;/code&gt; on the element:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;bNGdLQR&quot; data-pen-title=&quot;The ghost element method 2&quot; data-user=&quot;rishi111&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/rishi111/pen/bNGdLQR&quot;&gt;&lt;br&gt;
The ghost element method 2&lt;/a&gt; by Rishi Purwar (&lt;a href=&quot;https://codepen.io/rishi111&quot;&gt;@rishi111&lt;/a&gt;)&lt;br&gt;
on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;implications-vertical-alignment&quot;&gt;Implications of vertical alignment&lt;/h2&gt;
&lt;h3&gt;Accessibility&lt;/h3&gt;
&lt;p&gt;The brain has an observed pattern; it is designed to read and easily assimilate concepts from the left to the right (left aligned), which makes reading large blocks of text easier.&lt;/p&gt;
&lt;p&gt;Vertical alignment may stand out aesthetically, but those with reading difficulties may find it challenging to work with. Vertically aligned text should be minimal for the sake of&lt;a href=&quot;https://blog.logrocket.com/design-accessibility-css-visually-hidden-class/&quot;&gt; accessibility&lt;/a&gt;. This means it should be limited to headers to accommodate users with reading impairments.&lt;/p&gt;
&lt;h3&gt;Readability&lt;/h3&gt;
&lt;p&gt;Vertically aligned, large text is known to reduce reading speed because readers need to pause before finding the next line. This isn’t advisable for long text. If you must slow down the reading speed, it should be for the right reasons, such as emphasizing specific content. Otherwise, text alignment should be kept simple for ease of reading.&lt;/p&gt;

&lt;h3&gt;Responsiveness&lt;/h3&gt;
&lt;p&gt;For vertical alignment, it is more advisable to settle for CSS Flexbox or Grid in most cases because these tools offer a cleaner and more responsive approach compared to mimicking tables with CSS and the rest.&lt;/p&gt;
&lt;h2&gt;&amp;gt;Conclusion&lt;/h2&gt;
&lt;p&gt;CSS has come a long way, making vertical alignment easier than ever. We’ve explored some of the best techniques, each with its use cases and limitations. Modern solutions like Flexbox and Grid offer flexibility and responsiveness, while classic methods still come in handy for compatibility. The key is knowing when to use which approach.&lt;/p&gt;

&lt;p&gt;Got a favorite vertical alignment trick? Drop it in the comments; we’d love to hear it!&lt;/p&gt;


&lt;/div&gt;
            &lt;style&gt;
    .share-icon.share-twitter span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-twitter.svg&quot;);
    }

    .share-icon.share-reddit span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-reddit.svg&quot;);
    }

    .share-icon.share-linkedin span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-linkedin.svg&quot;);
    }

    .share-icon.share-facebook span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-facebook.svg&quot;);
    }
&lt;/style&gt;

&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon sd-sharing&quot;&gt;&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;&lt;div class=&quot;sd-content&quot;&gt;&lt;ul&gt;&lt;li class=&quot;share-twitter&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-twitter-387&quot; class=&quot;share-twitter sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/css-vertical-alignment/?share=twitter&quot; target=&quot;_blank&quot; title=&quot;Click to share on Twitter&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Twitter (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-reddit&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;&quot; class=&quot;share-reddit sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/css-vertical-alignment/?share=reddit&quot; target=&quot;_blank&quot; title=&quot;Click to share on Reddit&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Reddit (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-linkedin&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-linkedin-387&quot; class=&quot;share-linkedin sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/css-vertical-alignment/?share=linkedin&quot; target=&quot;_blank&quot; title=&quot;Click to share on LinkedIn&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on LinkedIn (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-facebook&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-facebook-387&quot; class=&quot;share-facebook sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/css-vertical-alignment/?share=facebook&quot; target=&quot;_blank&quot; title=&quot;Click to share on Facebook&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Facebook (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-end&quot;&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;            &lt;ul id=&quot;post-tags&quot;&gt;
            &lt;li&gt;
        &lt;a rel=&quot;tag&quot; href=&quot;https://blog.logrocket.com/tag/css/&quot;&gt;#css&lt;/a&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
            &lt;div class=&quot;post-popup&quot; data-popup-name=&quot;dev-cab&quot;&gt;
    &lt;i data-popup-dismiss=&quot;&quot; class=&quot;fa-solid fa-xmark post-popup__exit&quot;&gt;&lt;/i&gt;
    &lt;div class=&quot;post-popup__page active&quot;&gt;
        &lt;p class=&quot;post-popup__title&quot;&gt;Hey there, want to help make our blog better? &lt;/p&gt;
        &lt;div class=&quot;post-popup__buttons&quot;&gt;
            &lt;button data-popup-next=&quot;&quot; class=&quot;lr-button&quot;&gt;Yea&lt;/button&gt;
            &lt;button data-popup-dismiss=&quot;&quot; class=&quot;lr-button&quot;&gt;No Thanks&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;post-popup__page&quot;&gt;
        &lt;p&gt;
            Join LogRocket’s Content Advisory Board. You’ll help inform the type of
            content we create and get access to exclusive meetups, social accreditation,
            and swag.
        &lt;/p&gt;
        &lt;a data-popup-dismiss=&quot;&quot; class=&quot;lr-button&quot; target=&quot;__blank&quot; href=&quot;https://lp.logrocket.com/blg/content-advisory-board-signup&quot;&gt;Sign up now&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
        &lt;/div&gt;
    </description><link>https://blog.logrocket.com/css-vertical-alignment/</link><guid isPermaLink="false">https://blog.logrocket.com/css-vertical-alignment/</guid><pubDate>Sat, 22 Mar 2025 16:00:00 GMT</pubDate><author>Facundo Corradini</author></item><item><title>How to win clients with a Flutter web demo that feels real</title><description>&lt;aside&gt;
            &lt;div class=&quot;sticky&quot;&gt;
                                
&lt;div class=&quot;toc-container&quot; id=&quot;post-toc&quot;&gt;
            &lt;div class=&quot;toc-header&quot;&gt;
            &lt;span class=&quot;toc-title&quot;&gt;
                Table of contents            &lt;/span&gt;
            &lt;i class=&quot;fa fa-chevron-down toc-collapse&quot;&gt;&lt;/i&gt;
            &lt;i class=&quot;hide fa fa-chevron-up toc-expand&quot;&gt;&lt;/i&gt;
        &lt;/div&gt;
        
&lt;ul data-toc-name=&quot;root&quot; class=&quot;toc&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/flutter-web-demo-showcase/#the-thought-process&quot;&gt;Why use Flutter to pitch your app idea?&lt;/a&gt;
        &lt;ul data-toc-name=&quot;the-thought-process&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/flutter-web-demo-showcase/#our-demo-project-peters-deli&quot;&gt;What we’re building: A deli-ordering app&lt;/a&gt;
        &lt;ul data-toc-name=&quot;our-demo-project-peters-deli&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/flutter-web-demo-showcase/#modifying-main-dart&quot;&gt;Modifying &lt;code&gt;main.dart&lt;/code&gt; to support a showcase layout&lt;/a&gt;
        &lt;ul data-toc-name=&quot;modifying-main-dart&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/flutter-web-demo-showcase/#creating-an-app-launcher&quot;&gt;Simulating a real app launch experience on the web&lt;/a&gt;
        &lt;ul data-toc-name=&quot;creating-an-app-launcher&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/flutter-web-demo-showcase/#dressing-up-the-outside&quot;&gt;Making the demo feel premium&lt;/a&gt;
        &lt;ul data-toc-name=&quot;dressing-up-the-outside&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/flutter-web-demo-showcase/#conclusion&quot;&gt;A showcase is worth a thousand meetings&lt;/a&gt;
        &lt;ul data-toc-name=&quot;conclusion&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/div&gt;
                &lt;!-- Sidebar gutter ad --&gt;
                
            &lt;/div&gt;
        &lt;/aside&gt;
        &lt;div id=&quot;the-content-container&quot;&gt;
            
&lt;div class=&quot;lr-content&quot;&gt;
    &lt;!-- TEMP: .article-post is only used for adinserter to hook into --&gt;
    &lt;div class=&quot;article-post&quot;&gt;&lt;/div&gt;
    
&lt;p&gt;Imagine this: A customer is interested in building an app for their product or service. They’re mostly sold on the idea but haven’t yet committed to signing off on development. Maybe they’re unsure, or they’re struggling to convince stakeholders who control the budget.&lt;/p&gt;
&lt;img fetchpriority=&quot;high&quot; decoding=&quot;async&quot; width=&quot;895&quot; height=&quot;597&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/flutter-web-demo-showcase.png&quot; class=&quot;attachment-full size-full wp-post-image&quot; alt=&quot;How to win clients with a Flutter web demo that feels real&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/flutter-web-demo-showcase.png 895w, https://blog.logrocket.com/wp-content/uploads/2025/03/flutter-web-demo-showcase.png?resize=300,200 300w, https://blog.logrocket.com/wp-content/uploads/2025/03/flutter-web-demo-showcase.png?resize=768,512 768w&quot; sizes=&quot;(max-width: 895px) 100vw, 895px&quot; data-attachment-id=&quot;202587&quot; data-permalink=&quot;https://blog.logrocket.com/flutter-web-demo-showcase/attachment/flutter-web-demo-showcase/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/flutter-web-demo-showcase.png&quot; data-orig-size=&quot;895,597&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;How to win clients with a Flutter web demo that feels real&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/flutter-web-demo-showcase.png?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/flutter-web-demo-showcase.png?w=895&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;p&gt;That recently happened to me. And the reality is, you can describe your app in vivid detail — how it will work, how it all fits together — but while you can visualize the experience clearly, your customer may not. Worse, they might not visualize anything at all.&lt;/p&gt;
&lt;p&gt;Giving customers something they can see and interact with goes a long way toward earning their buy-in.&lt;/p&gt;
&lt;h2 id=&quot;the-thought-process&quot;&gt;Why use Flutter to pitch your app idea?&lt;/h2&gt;
&lt;p&gt;When building Flutter apps, I know I can target iOS and Android. But Flutter also supports web apps. So I thought, &lt;em&gt;“Can I create a compelling web experience that sells someone on building a mobile app?”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Turns out, yes — and the result is pretty impressive.&lt;/p&gt;
&lt;h2 id=&quot;our-demo-project-peters-deli&quot;&gt;What we’re building: A deli-ordering app&lt;/h2&gt;
&lt;p&gt;Here’s what the demo app looks like:&lt;/p&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; data-attachment-id=&quot;202585&quot; data-permalink=&quot;https://blog.logrocket.com/flutter-web-demo-showcase/attachment/flutter-demo-app-2/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/flutter-demo-app.gif&quot; data-orig-size=&quot;416,820&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;Flutter demo app&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/flutter-demo-app.gif?w=152&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/flutter-demo-app.gif?w=416&quot; class=&quot;aligncenter size-full wp-image-202585&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/flutter-demo-app.gif&quot; alt=&quot;Flutter Demo App&quot; width=&quot;416&quot; height=&quot;820&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;We have a functional app — so let’s walk through building out the demo website.&lt;/p&gt;
&lt;h2 id=&quot;modifying-main-dart&quot;&gt;Modifying &lt;code&gt;main.dart&lt;/code&gt; to support a showcase layout&lt;/h2&gt;
&lt;p&gt;Typically, your &lt;code&gt;main.dart&lt;/code&gt; might look like this:&lt;/p&gt;
&lt;pre class=&quot;language-dart hljs&quot;&gt;class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: &#39;Flutter Demo&#39;,
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
      ),
      home: PetersDeliHomePage(),
    );
  }
}
&lt;/pre&gt;
&lt;p&gt;Here, the &lt;code&gt;PetersDeliHomePage&lt;/code&gt; widget is the main entry point. But we can wrap the entire app in a custom widget to showcase it side-by-side with some descriptive text, without affecting its functionality.&lt;/p&gt;
&lt;p&gt;Let’s create a &lt;code&gt;ShowcaseWidget&lt;/code&gt; that displays the app on the left and some marketing copy on the right:&lt;/p&gt;
&lt;pre class=&quot;language-dart hljs&quot;&gt;import &#39;package:appdemo/home/home.dart&#39;;
import &#39;package:flutter/material.dart&#39;;

class ShowcaseWidget extends StatelessWidget {
  const ShowcaseWidget({super.key});

  @override
  Widget build(BuildContext context) {
    return Row(
      children: [
        Expanded(child: PetersDeliHomePage()),
        Expanded(child: Text(&quot;We&#39;ll put some words over here&quot;)),
      ],
    );
  }
}
&lt;/pre&gt;
&lt;p&gt;Here’s how that looks:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; data-attachment-id=&quot;202583&quot; data-permalink=&quot;https://blog.logrocket.com/flutter-web-demo-showcase/attachment/flutter-demo-app-example-main-dart/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/flutter-demo-app-example-main-dart.png&quot; data-orig-size=&quot;895,552&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;Flutter demo app example: Mina.dart&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/flutter-demo-app-example-main-dart.png?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/flutter-demo-app-example-main-dart.png?w=895&quot; class=&quot;aligncenter size-full wp-image-202583&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/flutter-demo-app-example-main-dart.png&quot; alt=&quot;Flutter Demo App Example: Main.dart&quot; width=&quot;895&quot; height=&quot;552&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/flutter-demo-app-example-main-dart.png 895w, https://blog.logrocket.com/wp-content/uploads/2025/03/flutter-demo-app-example-main-dart.png?resize=300,185 300w, https://blog.logrocket.com/wp-content/uploads/2025/03/flutter-demo-app-example-main-dart.png?resize=768,474 768w&quot; sizes=&quot;auto, (max-width: 895px) 100vw, 895px&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now the user can interact with the app while reading key feature highlights on the side. Neat, right?&lt;/p&gt;
&lt;h2 id=&quot;creating-an-app-launcher&quot;&gt;Simulating a real app launch experience on the web&lt;/h2&gt;
&lt;p&gt;Most Flutter apps use &lt;code&gt;MaterialApp&lt;/code&gt; as the root widget to provide styling and navigation. Because &lt;code&gt;MaterialApp&lt;/code&gt; is just a widget, we can nest it. That’s the trick to making our demo feel like a real app inside a browser.&lt;/p&gt;
&lt;p&gt;We’ll create a shell with a border that wraps the inner &lt;code&gt;MaterialApp&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-dart hljs&quot;&gt;class DemoAppShell extends StatelessWidget {
  const DemoAppShell({super.key});

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(100.0),
      child: Container(
        height: 800,
        width: 450,
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(20),
          border: Border.all(color: Colors.black, width: 12),
          color: Colors.blueGrey,
        ),
        child: MaterialApp(
          home: PetersDeliApp(),
        ),
      ),
    );
  }
}
&lt;/pre&gt;
&lt;p&gt;We’ll also add a splash screen with a loading animation that transitions into the app:&lt;/p&gt;
&lt;pre class=&quot;language-dart hljs&quot;&gt;class Splashscreen extends StatefulWidget {
  const Splashscreen({super.key});

  @override
  State&amp;lt;Splashscreen&amp;gt; createState() =&amp;gt; _SplashscreenState();
}

class _SplashscreenState extends State&amp;lt;Splashscreen&amp;gt; {
  var showLoader = false;

  @override
  void initState() {
    super.initState();
    Future.delayed(Duration(seconds: 3)).then((_) {
      setState(() =&amp;gt; showLoader = true);

      Future.delayed(Duration(seconds: 5)).then((_) {
        Navigator.of(context).push(
          MaterialPageRoute(builder: (_) =&amp;gt; PetersDeliHomePage()),
        );
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Material(
      color: Colors.teal,
      child: Column(
        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
        children: [
          appIcon(),
          Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                &quot;P E T E R &#39; S    D E L I&quot;,
                style: Theme.of(context).textTheme.headlineLarge,
              ),
              AnimatedOpacity(
                duration: Duration(seconds: 1),
                opacity: showLoader ? 1 : 0,
                child: CircularProgressIndicator(color: Colors.tealAccent),
              ),
            ],
          ),
        ],
      ),
    );
  }
}
&lt;/pre&gt;
&lt;p&gt;To ensure the demo works with a mouse as well as touch, update the scroll behavior to support all pointer devices:&lt;/p&gt;
&lt;pre class=&quot;language-dart hljs&quot;&gt;child: MaterialApp(
  scrollBehavior: MaterialScrollBehavior().copyWith(
    dragDevices: {
      PointerDeviceKind.mouse,
      PointerDeviceKind.touch,
      PointerDeviceKind.stylus,
      PointerDeviceKind.unknown
    },
  ),
  navigatorKey: appNavigatorKey,
  home: PetersDeliApp(),
),
&lt;/pre&gt;
&lt;p&gt;This lets users interact with the app using any input method:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; data-attachment-id=&quot;202584&quot; data-permalink=&quot;https://blog.logrocket.com/flutter-web-demo-showcase/attachment/flutter-demo-app-launcher/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/flutter-demo-app-launcher.gif&quot; data-orig-size=&quot;895,823&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;Flutter demo app: App launcher&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/flutter-demo-app-launcher.gif?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/flutter-demo-app-launcher.gif?w=895&quot; class=&quot;aligncenter size-full wp-image-202584&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/flutter-demo-app-launcher.gif&quot; alt=&quot;Flutter Demo App: App Launcher&quot; width=&quot;895&quot; height=&quot;823&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;It’s a simple technique, but the illusion of launching an app within the browser is effective.&lt;/p&gt;
&lt;h2 id=&quot;dressing-up-the-outside&quot;&gt;Making the demo feel premium&lt;/h2&gt;
&lt;p&gt;Because this is an app showcase, we want two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The thing doing the showcasing should look good.&lt;/li&gt;
&lt;li&gt;The outer shell should have some level of reactivity to change when events occur within the app.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For the text on the right, this should be where we describe our app and what is currently happening. Fortunately, Google has a huge fonts repository that we can use:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; data-attachment-id=&quot;202586&quot; data-permalink=&quot;https://blog.logrocket.com/flutter-web-demo-showcase/attachment/google-font-repository/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/google-font-repository.png&quot; data-orig-size=&quot;895,526&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;Google font repository&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/google-font-repository.png?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/google-font-repository.png?w=895&quot; class=&quot;aligncenter size-full wp-image-202586&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/google-font-repository.png&quot; alt=&quot;Google Font Repository&quot; width=&quot;895&quot; height=&quot;526&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/google-font-repository.png 895w, https://blog.logrocket.com/wp-content/uploads/2025/03/google-font-repository.png?resize=300,176 300w, https://blog.logrocket.com/wp-content/uploads/2025/03/google-font-repository.png?resize=768,451 768w&quot; sizes=&quot;auto, (max-width: 895px) 100vw, 895px&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;And there’s the &lt;code&gt;google_fonts&lt;/code&gt; package, which lets us use these fonts. We can add it to our &lt;code&gt;pubspec.yaml&lt;/code&gt; as a dependency.&lt;/p&gt;

&lt;p&gt;For me, I’ll choose &lt;em&gt;Caveat&lt;/em&gt;, because I think it strikes the right balance between being casual yet professional.&lt;/p&gt;
&lt;p&gt;Because our widgets are nested under each other in the tree, when the user clicks an option in the simulator, we’d like to have that event bubble up to the outer shell. This way, we can communicate what the user is doing, or draw their attention to a specific aspect.&lt;/p&gt;
&lt;p&gt;The various states (or pages) within our app will be the following:&lt;/p&gt;
&lt;pre class=&quot;language-dart hljs&quot;&gt;enum CurrentAppState {
  Launcher,
  Loading,
  MainMenu,
  Ordering,
  Ordered,
}
&lt;/pre&gt;
&lt;p&gt;We’ll also set up a &lt;code&gt;Map&lt;/code&gt; describing what each step does:&lt;/p&gt;
&lt;pre class=&quot;language-dart hljs&quot;&gt;const showcaseWidgets = {
  CurrentAppState.Launcher: [
    Text(
        &quot;When everyone&#39;s got money for sandwiches, why should they spend it at your deli? Click into the app to find out...&quot;)
  ],
  CurrentAppState.Loading: [
    Text(&quot;Users&#39; session and favourites are remembered on application load.&quot;)
  ],
  CurrentAppState.MainMenu: [
    Text(&quot;The main menu, so many tasty things!&quot;),
    ListTile(
      title: Text(
        &quot;Favorites&quot;,
      ),
      subtitle: Text(
          &quot;Frequent orders are remembered and presented to the orderer again on subsequent orders.&quot;),
      tileColor: Colors.white,
    ),
    ListTile(
      title: Text(&quot;Specials&quot;),
      subtitle:
          Text(&quot;Peter&#39;s weekend special is displayed at the bottom of the app&quot;),
      tileColor: Colors.white,
    ),
    ListTile(
      title: Text(&quot;Looks good&quot;),
      subtitle: Text(&quot;The picture of Peter fades out as the user scrolls up&quot;),
      tileColor: Colors.white,
    )
  ],
  CurrentAppState.Ordering: [
    Text(&quot;A lot of options for people who know how they want their food&quot;),
    ListTile(
      title: Text(&quot;Ordering time shown&quot;),
      subtitle: Text(&quot;People can choose when they want their food&quot;),
      tileColor: Colors.white,
    ),
    ListTile(
      title: Text(&quot;Some sauce, or no?&quot;),
      subtitle: Text(&quot;Menu items are customisable&quot;),
      tileColor: Colors.white,
    )
  ],
  CurrentAppState.Ordered: [
    Text(&quot;Straight from the kitchen out to you!&quot;),
  ]
};
&lt;/pre&gt;
&lt;p&gt;Then, within our topmost widget, we need to respond to these events appropriately:&lt;/p&gt;
&lt;pre class=&quot;language-dart hljs&quot;&gt;class _ShowcaseTextState extends State&amp;lt;ShowcaseText&amp;gt; {
  var step = showcaseWidgets.entries.first;

  @override
  Widget build(BuildContext context) {
    return BlocListener&amp;lt;ShowcaseBloc, ShowcaseState&amp;gt;(
      listener: (context, state) {
        if (state is ShowcaseStep) {
          setState(() {
            step = showcaseWidgets.entries
                .firstWhere((x) =&amp;gt; x.key == state.currentStep);
          });
        }
      },
&lt;/pre&gt;
&lt;p&gt;This code is quite trivial: just set the active step based on what was set in the event.&lt;/p&gt;
&lt;p&gt;Finally, we’d like to set up one more &lt;code&gt;BlocListener&lt;/code&gt; for when the user places an order. This is to animate the background to give the user a good microinteraction when they click &lt;strong&gt;Order&lt;/strong&gt;. Because the animation begins as white, we want to animate it forward, and then back when it finishes.&lt;/p&gt;
&lt;pre class=&quot;language-dart hljs&quot;&gt;@override
Widget build(BuildContext context) {
  return BlocProvider(
    create: (context) =&amp;gt; ShowcaseBloc(),
    child: BlocListener&amp;lt;ShowcaseBloc, ShowcaseState&amp;gt;(
      listener: (context, state) {
        if (state is ShowcaseStep) {
          if (state.currentStep == CurrentAppState.Ordered) {
            _animationController.forward().then((x) {
              _animationController.reverse();
            });
          }
        }
      },
&lt;/pre&gt;
&lt;p&gt;So how does this look when it’s all put together?&lt;/p&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; data-attachment-id=&quot;202582&quot; data-permalink=&quot;https://blog.logrocket.com/flutter-web-demo-showcase/attachment/flutter-demo-app-example-finished/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/flutter-demo-app-example-finished.gif&quot; data-orig-size=&quot;895,694&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;Finished Flutter demo app&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/flutter-demo-app-example-finished.gif?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/flutter-demo-app-example-finished.gif?w=895&quot; class=&quot;aligncenter size-full wp-image-202582&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/flutter-demo-app-example-finished.gif&quot; alt=&quot;Finished Flutter Demo App&quot; width=&quot;895&quot; height=&quot;694&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;It looks pretty good — and it might help sell customers who were previously undecided.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;A showcase is worth a thousand meetings&lt;/h2&gt;
&lt;p&gt;Building apps is expensive, and customers often hesitate. But if you can show them — right in the browser — what their app might look like, you’ve got a powerful tool.&lt;/p&gt;
&lt;p&gt;Don’t get me wrong — I wouldn’t roll around pumping out apps in this showcase format for just anyone. But if a customer needs a little nudge, it might be enough to win them over.&lt;/p&gt;

&lt;p&gt;Plus, the sheer portability of it is great. They can send the link to coworkers to get their input. That leads to feedback, and before you know it, people are talking about what they want added or changed in the app.&lt;/p&gt;
&lt;p&gt;Building a showcase like this can be a powerful tool to close a customer. And afterwards, what you ship will look and feel quite similar to what they saw in the showcase — since they’re all built using the same tool.&lt;/p&gt;
&lt;p&gt;To give it a go on your end, check out the repository below, or use the online demo:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;👉 &lt;a href=&quot;https://github.com/azimuthdeveloper/fancy-flutter-showcase&quot;&gt;GitHub: azimuthdeveloper/fancy-flutter-showcase&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hopefully this has inspired you to produce a showcase for your next customer who needs a little help making a decision. Hopefully you’ll close them — and then it’s time to develop the actual app!&lt;/p&gt;


&lt;/div&gt;
            &lt;style&gt;
    .share-icon.share-twitter span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-twitter.svg&quot;);
    }

    .share-icon.share-reddit span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-reddit.svg&quot;);
    }

    .share-icon.share-linkedin span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-linkedin.svg&quot;);
    }

    .share-icon.share-facebook span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-facebook.svg&quot;);
    }
&lt;/style&gt;

&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon sd-sharing&quot;&gt;&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;&lt;div class=&quot;sd-content&quot;&gt;&lt;ul&gt;&lt;li class=&quot;share-twitter&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-twitter-202566&quot; class=&quot;share-twitter sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/flutter-web-demo-showcase/?share=twitter&quot; target=&quot;_blank&quot; title=&quot;Click to share on Twitter&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Twitter (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-reddit&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;&quot; class=&quot;share-reddit sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/flutter-web-demo-showcase/?share=reddit&quot; target=&quot;_blank&quot; title=&quot;Click to share on Reddit&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Reddit (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-linkedin&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-linkedin-202566&quot; class=&quot;share-linkedin sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/flutter-web-demo-showcase/?share=linkedin&quot; target=&quot;_blank&quot; title=&quot;Click to share on LinkedIn&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on LinkedIn (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-facebook&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-facebook-202566&quot; class=&quot;share-facebook sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/flutter-web-demo-showcase/?share=facebook&quot; target=&quot;_blank&quot; title=&quot;Click to share on Facebook&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Facebook (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-end&quot;&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;            &lt;ul id=&quot;post-tags&quot;&gt;
            &lt;li&gt;
        &lt;a rel=&quot;tag&quot; href=&quot;https://blog.logrocket.com/tag/flutter/&quot;&gt;#flutter&lt;/a&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
            &lt;div class=&quot;post-popup&quot; data-popup-name=&quot;dev-cab&quot;&gt;
    &lt;i data-popup-dismiss=&quot;&quot; class=&quot;fa-solid fa-xmark post-popup__exit&quot;&gt;&lt;/i&gt;
    &lt;div class=&quot;post-popup__page active&quot;&gt;
        &lt;p class=&quot;post-popup__title&quot;&gt;Hey there, want to help make our blog better? &lt;/p&gt;
        &lt;div class=&quot;post-popup__buttons&quot;&gt;
            &lt;button data-popup-next=&quot;&quot; class=&quot;lr-button&quot;&gt;Yea&lt;/button&gt;
            &lt;button data-popup-dismiss=&quot;&quot; class=&quot;lr-button&quot;&gt;No Thanks&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;post-popup__page&quot;&gt;
        &lt;p&gt;
            Join LogRocket’s Content Advisory Board. You’ll help inform the type of
            content we create and get access to exclusive meetups, social accreditation,
            and swag.
        &lt;/p&gt;
        &lt;a data-popup-dismiss=&quot;&quot; class=&quot;lr-button&quot; target=&quot;__blank&quot; href=&quot;https://lp.logrocket.com/blg/content-advisory-board-signup&quot;&gt;Sign up now&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
        &lt;/div&gt;
    </description><link>https://blog.logrocket.com/flutter-web-demo-showcase/</link><guid isPermaLink="false">https://blog.logrocket.com/flutter-web-demo-showcase/</guid><pubDate>Thu, 20 Mar 2025 16:00:00 GMT</pubDate><author>Lewis Cianci</author></item><item><title>TypeScript is getting a 10x faster compiler — here’s what it means for developers</title><description>&lt;aside&gt;
            &lt;div class=&quot;sticky&quot;&gt;
                                
&lt;div class=&quot;toc-container&quot; id=&quot;post-toc&quot;&gt;
            &lt;div class=&quot;toc-header&quot;&gt;
            &lt;span class=&quot;toc-title&quot;&gt;
                Table of contents            &lt;/span&gt;
            &lt;i class=&quot;fa fa-chevron-down toc-collapse&quot;&gt;&lt;/i&gt;
            &lt;i class=&quot;hide fa fa-chevron-up toc-expand&quot;&gt;&lt;/i&gt;
        &lt;/div&gt;
        
&lt;ul data-toc-name=&quot;root&quot; class=&quot;toc&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/typescript-new-compiler/#new-typescript-compiler-rewrite&quot;&gt;What’s new with the TypeScript compiler rewrite?&lt;/a&gt;
        &lt;ul data-toc-name=&quot;new-typescript-compiler-rewrite&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/typescript-new-compiler/#why-microsoft-chose-port-typescript-instead-rewriting&quot;&gt;Why Microsoft chose to port TypeScript instead of rewriting it&lt;/a&gt;
        &lt;ul data-toc-name=&quot;why-microsoft-chose-port-typescript-instead-rewriting&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/typescript-new-compiler/#why-go-chosen-over-other-languages&quot;&gt;Why Go was chosen over other languages&lt;/a&gt;
        &lt;ul data-toc-name=&quot;why-go-chosen-over-other-languages&quot; class=&quot;toc-subheading&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/typescript-new-compiler/#why-rust-considered&quot;&gt;Why Rust was considered&lt;/a&gt;
        &lt;ul data-toc-name=&quot;why-rust-considered&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/typescript-new-compiler/#c-language&quot;&gt;C# was in the running&lt;/a&gt;
        &lt;ul data-toc-name=&quot;c-language&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/typescript-new-compiler/#why-go-won&quot;&gt;Why Go won out&lt;/a&gt;
        &lt;ul data-toc-name=&quot;why-go-won&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/typescript-new-compiler/#performance-gains-trade-offs-go-based-compiler&quot;&gt;Performance gains and trade-offs in the Go-based compiler&lt;/a&gt;
        &lt;ul data-toc-name=&quot;performance-gains-trade-offs-go-based-compiler&quot; class=&quot;toc-subheading&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/typescript-new-compiler/#lsp-language-server-protocol&quot;&gt;LSP or Language Server Protocol&lt;/a&gt;
        &lt;ul data-toc-name=&quot;lsp-language-server-protocol&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/typescript-new-compiler/#what-developers-can-expect-from-new-compiler&quot;&gt;What developers can expect from the new compiler&lt;/a&gt;
        &lt;ul data-toc-name=&quot;what-developers-can-expect-from-new-compiler&quot; class=&quot;toc-subheading&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/typescript-new-compiler/#faster-build-times-ci-cd-pipelines&quot;&gt;Faster build times in CI/CD pipelines&lt;/a&gt;
        &lt;ul data-toc-name=&quot;faster-build-times-ci-cd-pipelines&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/typescript-new-compiler/#improved-editor-startup-typescript-linting-performance&quot;&gt;Improved editor startup and TypeScript linting performance&lt;/a&gt;
        &lt;ul data-toc-name=&quot;improved-editor-startup-typescript-linting-performance&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/typescript-new-compiler/#faster-hot-reload&quot;&gt;Faster hot reload&lt;/a&gt;
        &lt;ul data-toc-name=&quot;faster-hot-reload&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/typescript-new-compiler/#typescript-v7-roadmap-transcript-timeline&quot;&gt;TypeScript v7 roadmap and transition timeline&lt;/a&gt;
        &lt;ul data-toc-name=&quot;typescript-v7-roadmap-transcript-timeline&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/typescript-new-compiler/#final-thoughts-new-era-typescript&quot;&gt;Final thoughts: A new era for TypeScript&lt;/a&gt;
        &lt;ul data-toc-name=&quot;final-thoughts-new-era-typescript&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/div&gt;
                &lt;!-- Sidebar gutter ad --&gt;
                
            &lt;/div&gt;
        &lt;/aside&gt;
        &lt;div id=&quot;the-content-container&quot;&gt;
            
&lt;div class=&quot;lr-content&quot;&gt;
    &lt;!-- TEMP: .article-post is only used for adinserter to hook into --&gt;
    &lt;div class=&quot;article-post&quot;&gt;&lt;/div&gt;
    
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;Microsoft is porting the TypeScript compiler to Go, resulting in a 10x speed boost. This article explains why Go was chosen over Rust and C#, why the compiler was ported instead of rewritten, and what this means for developers — including faster builds, improved CI/CD performance, and better editor responsiveness.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;img fetchpriority=&quot;high&quot; decoding=&quot;async&quot; width=&quot;895&quot; height=&quot;597&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/typescript-new-compiler.png&quot; class=&quot;attachment-full size-full wp-post-image&quot; alt=&quot;TypeScript Is Getting A 10x Faster Compiler —Here’s What It Means For Developers&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/typescript-new-compiler.png 895w, https://blog.logrocket.com/wp-content/uploads/2025/03/typescript-new-compiler.png?resize=300,200 300w, https://blog.logrocket.com/wp-content/uploads/2025/03/typescript-new-compiler.png?resize=768,512 768w&quot; sizes=&quot;(max-width: 895px) 100vw, 895px&quot; data-attachment-id=&quot;202568&quot; data-permalink=&quot;https://blog.logrocket.com/typescript-new-compiler/attachment/typescript-new-compiler/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/typescript-new-compiler.png&quot; data-orig-size=&quot;895,597&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;TypeScript is getting a 10x faster compiler—here’s what it means for developers&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/typescript-new-compiler.png?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/typescript-new-compiler.png?w=895&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;p&gt;If you are a developer who has been working in the JavaScript/TypeScript ecosystem for a long time, the last couple of weeks have been quite interesting. In what can be considered one of the most pivotal moments of the past decade, Microsoft announced that they are porting the &lt;a href=&quot;https://devblogs.microsoft.com/typescript/typescript-native-port/&quot;&gt;TypeScript compiler to Go&lt;/a&gt;. While the port to an entirely new language is big news in and of itself, it was also announced that this move will result in a 10x faster compiler.&lt;/p&gt;
&lt;p&gt;In this article, we will look into the significance of this move and what it means for TypeScript developers. Let’s dive in!&lt;/p&gt;
&lt;h2 id=&quot;new-typescript-compiler-rewrite&quot;&gt;What’s new with the TypeScript compiler rewrite?&lt;/h2&gt;
&lt;p&gt;When the language was originally designed in 2012, the TypeScript team chose to implement the compiler in TypeScript itself. This meant that the TypeScript code written by developers like us would also pass through code written in TypeScript (the compiler). This decision was made to ensure that the compiler could be easily maintained and extended by the community.&lt;/p&gt;
&lt;p&gt;Another reason was that, in 2012, the language was mainly being used in UI development tasks instead of compute-intensive applications.&lt;/p&gt;
&lt;p&gt;However, as the language grew in popularity and complexity, the compiler’s performance became a bottleneck for many developers. In large projects, the TypeScript compiler started taking a significant amount of time to build and compile code. This was especially true for projects with millions of lines of code and complex type systems. For instance, from the data presented in the official blog post, the &lt;a href=&quot;https://github.com/microsoft/vscode&quot;&gt;VS Code repo&lt;/a&gt; (with more than 1.5 million lines of code) was taking &lt;a href=&quot;https://devblogs.microsoft.com/typescript/typescript-native-port/#how-much-faster&quot;&gt;77.8 seconds&lt;/a&gt; to compile – not an insignificant amount of time!&lt;/p&gt;
&lt;p&gt;This prompted the maintainers to look for ways to improve the compiler’s performance. They decided to port the compiler to Go and called the entire effort ‘Project Corsa’. After the port, the same repository was compiled in just &lt;a href=&quot;https://devblogs.microsoft.com/typescript/typescript-native-port/#how-much-faster&quot;&gt;7.5 seconds&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;These benefits are not just limited to large repositories like VS Code but are expected to be seen across the board. For another reference, the &lt;a href=&quot;https://github.com/ReactiveX/rxjs&quot;&gt;rxjs repo&lt;/a&gt; (with about 2100 lines of code) was taking 1.1 seconds, which was reduced to 0.1 seconds after the port.&lt;/p&gt;
&lt;p&gt;This means that we are literally seeing a 10x improvement in the compilation times across the whole spectrum of projects.&lt;/p&gt;
&lt;h2 id=&quot;why-microsoft-chose-port-typescript-instead-rewriting&quot;&gt;Why Microsoft chose to port TypeScript instead of rewriting it&lt;/h2&gt;
&lt;p&gt;One question that might come to your mind is: How was a large codebase like TypeScript built from the ground up in a new language like Go so quickly? Well, it wasn’t.&lt;/p&gt;
&lt;p&gt;The elegance of this solution is that the compiler was not re-written from scratch. Instead, all the code in the repository was programmatically translated into its Go equivalent. This means that the various parts that make up the TypeScript compiler — like the scanner, parser, binder, and type checker — were all “lifted and shifted” to Go.&lt;/p&gt;
&lt;p&gt;One of the TypeScript maintainers shares more details about why porting was chosen as the approach &lt;a href=&quot;https://github.com/microsoft/typescript-go/discussions/410&quot;&gt;here&lt;/a&gt;. The main reasons are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Not wanting to replicate the effort of several engineer years that have been spent building TypeScript into what it is today&lt;/li&gt;
&lt;li&gt;Not wanting to introduce any edge case scenarios that might leave a lot of tricky types not supported in the new compiler, thus running the risk of breaking a lot of existing codebases&lt;/li&gt;
&lt;li&gt;Keeping it easier to apply bug fixes to both the codebases with little overhead (which will be much easier if they are semantically similar)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another advantage of this approach is that most of the code can be ported over to Go with automated scripts and only the critical parts can be re-written. This shows when we compare the respective files from both the codebases. For instance, this is what a helper method called &lt;code&gt;reportCircularityError&lt;/code&gt; looks like in the &lt;code&gt;checker.ts&lt;/code&gt; file in the &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/TypeScript/refs/heads/main/src/compiler/checker.ts&quot;&gt;TypeScript codebase&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-typescript hljs&quot;&gt;function reportCircularityError(symbol: Symbol) {
    const declaration = symbol.valueDeclaration;
    // Check if variable has type annotation that circularly references the variable itself
    if (declaration) {
        if (getEffectiveTypeAnnotationNode(declaration)) {
            error(symbol.valueDeclaration, Diagnostics._0_is_referenced_directly_or_indirectly_in_its_own_type_annotation, symbolToString(symbol));
            return errorType;
        }
        // Check if variable has initializer that circularly references the variable itself
        if (noImplicitAny &amp;amp;&amp;amp; (declaration.kind !== SyntaxKind.Parameter || (declaration as HasInitializer).initializer)) {
            error(symbol.valueDeclaration, Diagnostics._0_implicitly_has_type_any_because_it_does_not_have_a_type_annotation_and_is_referenced_directly_or_indirectly_in_its_own_initializer, symbolToString(symbol));
        }
    }
    else if (symbol.flags &amp;amp; SymbolFlags.Alias) {
        const node = getDeclarationOfAliasSymbol(symbol);
        if (node) {
            error(node, Diagnostics.Circular_definition_of_import_alias_0, symbolToString(symbol));
        }
    }

    return anyType;
}
&lt;/pre&gt;
&lt;p&gt;This is the equivalent method in the &lt;code&gt;checker.go&lt;/code&gt; file in the &lt;a href=&quot;https://github.com/microsoft/typescript-go/blob/main/internal/checker/checker.go&quot;&gt;Go codebase&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-typescript hljs&quot;&gt;func (c *Checker) reportCircularityError(symbol *ast.Symbol) *Type {
    declaration := symbol.ValueDeclaration
    // Check if variable has type annotation that circularly references the variable itself
    if declaration != nil {
        if declaration.Type() != nil {
            c.error(symbol.ValueDeclaration, diagnostics.X_0_is_referenced_directly_or_indirectly_in_its_own_type_annotation, c.symbolToString(symbol))
            return c.errorType
        }
        // Check if variable has initializer that circularly references the variable itself
        if c.noImplicitAny &amp;amp;&amp;amp; (!ast.IsParameter(declaration) || declaration.Initializer() != nil) {
            c.error(symbol.ValueDeclaration, diagnostics.X_0_implicitly_has_type_any_because_it_does_not_have_a_type_annotation_and_is_referenced_directly_or_indirectly_in_its_own_initializer, c.symbolToString(symbol))
        }
    } else if symbol.Flags&amp;amp;ast.SymbolFlagsAlias != 0 {
        node := c.getDeclarationOfAliasSymbol(symbol)
        if node != nil {
            c.error(node, diagnostics.Circular_definition_of_import_alias_0, c.symbolToString(symbol))
        }
    }


    return c.anyType
}
&lt;/pre&gt;
&lt;p&gt;Notice how each line can be compared and mapped to its equivalent in the Go codebase. This is the power of the porting approach.&lt;/p&gt;
&lt;h2 id=&quot;why-go-chosen-over-other-languages&quot;&gt;Why Go was chosen over other languages&lt;/h2&gt;
&lt;p&gt;When the performance aspect was identified as a bottleneck, the TypeScript team started looking into ways to improve the compiler. As explained by Anders Hejlsberg in &lt;a href=&quot;https://www.youtube.com/watch?v=pNlq-EVld70&quot;&gt;this video&lt;/a&gt;, they considered multiple languages: &lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/csharplang&quot;&gt;C#&lt;/a&gt; (which is Microsoft’s own in-house favorite), and &lt;a href=&quot;https://go.dev/&quot;&gt;Go&lt;/a&gt;. There were several pros and cons for each language.&lt;/p&gt;
&lt;h3 id=&quot;why-rust-considered&quot;&gt;Why Rust was considered&lt;/h3&gt;
&lt;p&gt;Rust is a systems programming language known for its performance and safety. It’s growing in popularity among developers for performance-critical applications, so it could have been a great option for this project.&lt;/p&gt;
&lt;h3 id=&quot;c-language&quot;&gt;C# was in the running&lt;/h3&gt;
&lt;p&gt;C# is Microsoft’s own language and is used in many of its products. If it had been chosen, it would have allowed the team to leverage the existing knowledge and tools.&lt;/p&gt;
&lt;h3 id=&quot;why-go-won&quot;&gt;Why Go won out&lt;/h3&gt;
&lt;p&gt;The team ultimately chose Go as the language to port the TypeScript compiler. Go is known for its fast compilation times and low memory usage. Some other technical reasons for choosing Go include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Support for cyclic data structures&lt;/li&gt;
&lt;li&gt;Time-tested &lt;a href=&quot;https://blog.logrocket.com/concurrency-patterns-golang-waitgroups-goroutines/&quot;&gt;concurrency patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A great &lt;a href=&quot;https://tip.golang.org/doc/gc-guide&quot;&gt;garbage collector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, the more important reason for choosing Go is its semantic similarity to TypeScript and the “portability” that we saw in the previous section. This was a key factor in the decision-making process. More details about the team’s decision process can be found &lt;a href=&quot;https://github.com/microsoft/typescript-go/discussions/411&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;performance-gains-trade-offs-go-based-compiler&quot;&gt;Performance gains and trade-offs in the Go-based compiler&lt;/h2&gt;
&lt;p&gt;Hejlsberg mentioned that most of the parts related to porting the compiler are complete, while the type checker is about 80 percent complete.&lt;/p&gt;

&lt;p&gt;Active development is now focused on the language service. While most of the performance gains are attributed to using a native language like Go, the rest of the improvements come from other fine-tuning that the team is doing. One such improvement is leveraging concurrency – for instance, running four instances of the type checker instead of just one. Another boost comes from re-architecting the language service to better align with the &lt;a href=&quot;https://microsoft.github.io/language-server-protocol//&quot;&gt;Language Server Protocol&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;lsp-language-server-protocol&quot;&gt;LSP or Language Server Protocol&lt;/h3&gt;
&lt;p&gt;The Language Server Protocol (LSP) is now widely used by modern language services. However, when TypeScript was originally created, LSP didn’t exist. Porting TypeScript to Go gives the team an opportunity to re-architect the language service to better align with the LSP&lt;/p&gt;
&lt;h2 id=&quot;what-developers-can-expect-from-new-compiler&quot;&gt;What developers can expect from the new compiler&lt;/h2&gt;
&lt;p&gt;One of the main benefits of this transition is improved performance, with no extra effort required from developers. Once a developer updates to TypeScript v7, the new Go-based compiler will automatically be used when running &lt;code&gt;tsc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A faster language service (which VS Code uses for providing IntelliSense, code navigation, etc.) is also expected to be a part of the benefits. This will result in faster editor startup times and better responsiveness.&lt;/p&gt;
&lt;h3 id=&quot;faster-build-times-ci-cd-pipelines&quot;&gt;Faster build times in CI/CD pipelines&lt;/h3&gt;
&lt;p&gt;One of the immediate benefits that developers can expect is faster build times. This is especially true for CI/CD pipelines where the build times can be significantly reduced. This will result in faster feedback loops and quicker deployments.&lt;/p&gt;
&lt;h3 id=&quot;improved-editor-startup-typescript-linting-performance&quot;&gt;Improved editor startup and TypeScript linting performance&lt;/h3&gt;
&lt;p&gt;When a huge TypeScript repo is loaded in a code editor like VS Code, we notice that there is a significant delay in the time it takes for the editor to load the files, set up the links between files, and provide IntelliSense. With the new compiler, this is expected to be significantly faster. Even the linting process is expected to be faster, which would make the red squiggly lines (a sight every developer detests) appear faster.&lt;/p&gt;
&lt;h3 id=&quot;faster-hot-reload&quot;&gt;Faster hot reload&lt;/h3&gt;
&lt;p&gt;Another area where developers can expect to see improvements is in the hot reload times. When a developer makes a change in the code and saves it, the time it takes for the changes to reflect in the browser is expected to be faster. This is because the compiler can process the incrementally changed files faster.&lt;/p&gt;
&lt;h2 id=&quot;typescript-v7-roadmap-transcript-timeline&quot;&gt;TypeScript v7 roadmap and transition timeline&lt;/h2&gt;
&lt;p&gt;The TypeScript v5.9 release is expected soon, with the codebase continuing to be written in TypeScript through the v6.x versions. During this phase, some features will be deprecated, and some breaking changes will be introduced to prepare for the transition to a native compiler. The fully native Go-based compiler is anticipated to be released with TypeScript v7, following the completion of the v6.x series.&lt;/p&gt;
&lt;h2 id=&quot;final-thoughts-new-era-typescript&quot;&gt;Final thoughts: A new era for TypeScript&lt;/h2&gt;
&lt;p&gt;What Hejlsberg and the team have accomplished here is the TypeScript equivalent of running a four-minute mile. It’s a significant milestone in the history of TypeScript. While the performance benefits are sure to trickle down to the developers and the ecosystem, this will also inspire other libraries in the TypeScript ecosystem to push the limits of what is possible.&lt;/p&gt;
&lt;p&gt;I don’t know about you, but this sure makes me excited about the future of TypeScript. What a time to be alive!&lt;/p&gt;



&lt;/div&gt;
            &lt;style&gt;
    .share-icon.share-twitter span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-twitter.svg&quot;);
    }

    .share-icon.share-reddit span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-reddit.svg&quot;);
    }

    .share-icon.share-linkedin span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-linkedin.svg&quot;);
    }

    .share-icon.share-facebook span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-facebook.svg&quot;);
    }
&lt;/style&gt;

&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon sd-sharing&quot;&gt;&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;&lt;div class=&quot;sd-content&quot;&gt;&lt;ul&gt;&lt;li class=&quot;share-twitter&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-twitter-202567&quot; class=&quot;share-twitter sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/typescript-new-compiler/?share=twitter&quot; target=&quot;_blank&quot; title=&quot;Click to share on Twitter&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Twitter (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-reddit&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;&quot; class=&quot;share-reddit sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/typescript-new-compiler/?share=reddit&quot; target=&quot;_blank&quot; title=&quot;Click to share on Reddit&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Reddit (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-linkedin&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-linkedin-202567&quot; class=&quot;share-linkedin sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/typescript-new-compiler/?share=linkedin&quot; target=&quot;_blank&quot; title=&quot;Click to share on LinkedIn&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on LinkedIn (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-facebook&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-facebook-202567&quot; class=&quot;share-facebook sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/typescript-new-compiler/?share=facebook&quot; target=&quot;_blank&quot; title=&quot;Click to share on Facebook&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Facebook (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-end&quot;&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;            &lt;ul id=&quot;post-tags&quot;&gt;
            &lt;li&gt;
        &lt;a rel=&quot;tag&quot; href=&quot;https://blog.logrocket.com/tag/typescript/&quot;&gt;#typescript&lt;/a&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
            &lt;div class=&quot;post-popup&quot; data-popup-name=&quot;dev-cab&quot;&gt;
    &lt;i data-popup-dismiss=&quot;&quot; class=&quot;fa-solid fa-xmark post-popup__exit&quot;&gt;&lt;/i&gt;
    &lt;div class=&quot;post-popup__page active&quot;&gt;
        &lt;p class=&quot;post-popup__title&quot;&gt;Hey there, want to help make our blog better? &lt;/p&gt;
        &lt;div class=&quot;post-popup__buttons&quot;&gt;
            &lt;button data-popup-next=&quot;&quot; class=&quot;lr-button&quot;&gt;Yea&lt;/button&gt;
            &lt;button data-popup-dismiss=&quot;&quot; class=&quot;lr-button&quot;&gt;No Thanks&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;post-popup__page&quot;&gt;
        &lt;p&gt;
            Join LogRocket’s Content Advisory Board. You’ll help inform the type of
            content we create and get access to exclusive meetups, social accreditation,
            and swag.
        &lt;/p&gt;
        &lt;a data-popup-dismiss=&quot;&quot; class=&quot;lr-button&quot; target=&quot;__blank&quot; href=&quot;https://lp.logrocket.com/blg/content-advisory-board-signup&quot;&gt;Sign up now&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
        &lt;/div&gt;
    </description><link>https://blog.logrocket.com/typescript-new-compiler/</link><guid isPermaLink="false">https://blog.logrocket.com/typescript-new-compiler/</guid><pubDate>Thu, 20 Mar 2025 16:00:00 GMT</pubDate><author>Kapeel Kokane</author></item><item><title>How to manage JavaScript closures in React</title><description>&lt;aside&gt;
            &lt;div class=&quot;sticky&quot;&gt;
                                
&lt;div class=&quot;toc-container&quot; id=&quot;post-toc&quot;&gt;
            &lt;div class=&quot;toc-header&quot;&gt;
            &lt;span class=&quot;toc-title&quot;&gt;
                Table of contents            &lt;/span&gt;
            &lt;i class=&quot;fa fa-chevron-down toc-collapse&quot;&gt;&lt;/i&gt;
            &lt;i class=&quot;hide fa fa-chevron-up toc-expand&quot;&gt;&lt;/i&gt;
        &lt;/div&gt;
        
&lt;ul data-toc-name=&quot;root&quot; class=&quot;toc&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/javascript-closures-in-react/#what-are-javascript-closures&quot;&gt;What are JavaScript closures?&lt;/a&gt;
        &lt;ul data-toc-name=&quot;what-are-javascript-closures&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/javascript-closures-in-react/#closures-in-react&quot;&gt;Closures in React&lt;/a&gt;
        &lt;ul data-toc-name=&quot;closures-in-react&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/javascript-closures-in-react/#real-world-example&quot;&gt;A real-world example of JavaScript closures: SignalR reference leaks in callbacks&lt;/a&gt;
        &lt;ul data-toc-name=&quot;real-world-example&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/javascript-closures-in-react/#conclusion&quot;&gt;Conclusion&lt;/a&gt;
        &lt;ul data-toc-name=&quot;conclusion&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/div&gt;
                &lt;!-- Sidebar gutter ad --&gt;
                
            &lt;/div&gt;
        &lt;/aside&gt;
        &lt;div id=&quot;the-content-container&quot;&gt;
            
&lt;div class=&quot;lr-content&quot;&gt;
    &lt;!-- TEMP: .article-post is only used for adinserter to hook into --&gt;
    &lt;div class=&quot;article-post&quot;&gt;&lt;/div&gt;
    
&lt;p&gt;The proper handling of JavaScript closures is essential to any JavaScript project.&lt;/p&gt;
&lt;img fetchpriority=&quot;high&quot; decoding=&quot;async&quot; width=&quot;895&quot; height=&quot;597&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/featured-image-javascript-closures.png&quot; class=&quot;attachment-full size-full wp-post-image&quot; alt=&quot;&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/featured-image-javascript-closures.png 895w, https://blog.logrocket.com/wp-content/uploads/2025/03/featured-image-javascript-closures.png?resize=300,200 300w, https://blog.logrocket.com/wp-content/uploads/2025/03/featured-image-javascript-closures.png?resize=768,512 768w&quot; sizes=&quot;(max-width: 895px) 100vw, 895px&quot; data-attachment-id=&quot;202546&quot; data-permalink=&quot;https://blog.logrocket.com/javascript-closures-in-react/attachment/featured-image-javascript-closures/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/featured-image-javascript-closures.png&quot; data-orig-size=&quot;895,597&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;featured-image-javascript-closures&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/featured-image-javascript-closures.png?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/featured-image-javascript-closures.png?w=895&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;p&gt;In React projects specifically, closures can manifest themselves in ways that are not always readily apparent.&lt;/p&gt;
&lt;p&gt;In this article, I will explain what closures are and provide examples of how to manage them. We’ll also cover a real-life example that I handled with my professional job and the production application we support.&lt;/p&gt;
&lt;p&gt;I’ll be referencing my &lt;a href=&quot;https://github.com/andrewevans0102/closure-examples&quot;&gt;sample project on&lt;/a&gt; &lt;a href=&quot;https://github.com/andrewevans0102/closure-examples&quot;&gt;GitHub&lt;/a&gt; throughout the article.&lt;/p&gt;
&lt;h2 id=&quot;what-are-javascript-closures&quot;&gt;What are JavaScript closures?&lt;/h2&gt;
&lt;p&gt;A JavaScript closure is the relationship between a JavaScript function and references to its surrounding state. In JavaScript, state values have “scope” — which defines how accessible a value is. The more general concept of reference access is also called “lexical scope.” There are three main levels of scope in JavaScript:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Global scope&lt;/strong&gt; — Values are available everywhere&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Function scope&lt;/strong&gt; — Values are only available within a specific function&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Block scope&lt;/strong&gt; — Values are only available within a block of code (typically surrounded by braces: &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is an example of scope in code:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;// Global Scope
let globalValue = &quot;available anywhere&quot;;

// Function Scope
function yourFunction() { 
  // var1 and var2 are only accessible in this function
  let var1 = &quot;hello&quot;;
  let var2 = &quot;world&quot;;

  console.log(var1);
  console.log(var2);
}

// Block Scope
if(globalValue = &quot;available anywhere&quot;) {
  // variables defined here are only accssible inside this conditional
  let b1 = &quot;block 1&quot;;
  let b2 = &quot;block 2&quot;;
}
&lt;/pre&gt;
&lt;p&gt;In the example code above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;strong&gt;globalValue&lt;/strong&gt;&lt;/code&gt;&amp;nbsp; — Can be reached anywhere in the program&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;var1&lt;/code&gt; and &lt;code&gt;var2&lt;/code&gt;&lt;/strong&gt; — Can only be reached inside &lt;code&gt;yourFunction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;b1&lt;/code&gt; and &lt;code&gt;b2&lt;/code&gt;&lt;/strong&gt; — Can only be accessed when &lt;code&gt;globalValue&lt;/code&gt; = “available anywhere”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Closures happen when you make variables available inside or outside of their normal scope. This can be seen in the following example:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;function start() {
  // variable created inside function
  const firstName = &quot;John&quot;;

  // function inside the start function which has access to firstName
  function displayFirstName() {
    // displayFirstName creates a closure
    console.log(firstName);
  }
  // should print &quot;John&quot; to the console
  displayName();
}
start();
&lt;/pre&gt;
&lt;p&gt;In JavaScript projects, closures can cause issues where some values are accessible and others are not. When working with React specifically, this often happens when handling events or local state within components.&lt;/p&gt;
&lt;p&gt;If you’d like a more in-depth review of closures in general, I recommend checking out our article on &lt;a href=&quot;https://blog.logrocket.com/a-closer-look-at-javascript-closures-higher-order-functions-and-currying/&quot;&gt;JavaScript closures, higher-order functions, and currying&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;closures-in-react&quot;&gt;Closures in React&lt;/h2&gt;
&lt;p&gt;React projects usually encounter closure issues with managing state. In React applications, you can manage state local to a component with &lt;code&gt;useState&lt;/code&gt; . You can also leverage tools for centralized state management like &lt;a href=&quot;https://react-redux.js.org/&quot;&gt;Redux&lt;/a&gt;, or &lt;a href=&quot;https://react.dev/reference/react/createContext&quot;&gt;React Context&lt;/a&gt; for state management that goes across multiple components in a project.&lt;/p&gt;
&lt;p&gt;Controlling the state of a component or multiple components requires the understanding of what values are accessible and where. When managing state in a React project, you may encounter frustrating closure issues where inconsistent changes can occur.&lt;/p&gt;
&lt;p&gt;To better explain the concepts of closures in React, I’ll show an example using the built-in &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout&quot;&gt;setTimeout&lt;/a&gt;&lt;/code&gt; function. After that example in the following section, I will cover a real world production issue I had to resolve with closures. In all of these examples, you can follow along with my &lt;a href=&quot;https://github.com/andrewevans0102/closure-examples&quot;&gt;sample project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Consider an application that takes in an input and does an async action. Usually you would see this with a form, or something that would take in client inputs and then pass them over to an API to do something. We can simplify this with a &lt;code&gt;setTimeout&lt;/code&gt; in a component like the following:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;const SetTimeoutIssue = () =&amp;gt; {
    const [count, setCount] = useState(0);
    const handleClick = () =&amp;gt; {
        setCount(count + 1);
        // This will always show the value of count at the time the timeout was set
        setTimeout(() =&amp;gt; {
            console.log(&#39;Current count (Issue):&#39;, count);
            alert(`Current count (Issue): ${count}`);
        }, 2000);
    };
    return (
        &amp;lt;div className=&quot;p-4 bg-black rounded shadow&quot;&amp;gt;
            &amp;lt;h2 className=&quot;text-xl font-bold mb-4&quot;&amp;gt;setTimeout Issue&amp;lt;/h2&amp;gt;
            &amp;lt;p className=&quot;mb-4&quot;&amp;gt;Current count: {count}&amp;lt;/p&amp;gt;
            &amp;lt;button
                onClick={handleClick}
                className=&quot;bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600&quot;
            &amp;gt;
                Increment and Check After 2s
            &amp;lt;/button&amp;gt;
            &amp;lt;div className=&quot;mt-4 p-4 bg-gray-100 rounded&quot;&amp;gt;
                &amp;lt;p className=&quot;text-black&quot;&amp;gt;
                    Expected: Alert shows the updated count
                &amp;lt;/p&amp;gt;
                &amp;lt;p className=&quot;text-black&quot;&amp;gt;
                    Actual: Alert shows the count from when setTimeout was
                    called
                &amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    );
};
&lt;/pre&gt;
&lt;p&gt;This looks like something that should not have issues. The user clicks a button and a counter value is incremented and then shown in an alert modal. Where the issue happens is:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;    const handleClick = () =&amp;gt; {
        setCount(count + 1);
        // This will always show the value of count at the time the timeout was set
        setTimeout(() =&amp;gt; {
            console.log(&#39;Current count (Issue):&#39;, count);
            alert(`Current count (Issue): ${count}`);
        }, 2000);
    };
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;count&lt;/code&gt; value is captured by the &lt;code&gt;setTimeout&lt;/code&gt; function call in a closure. If you took this example and attempted to click the button multiple times in rapid succession you would see something like this:&lt;/p&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; data-attachment-id=&quot;202543&quot; data-permalink=&quot;https://blog.logrocket.com/javascript-closures-in-react/attachment/1_count-value-captured-by-settimeout/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/1_count-value-captured-by-settimeout.jpeg&quot; data-orig-size=&quot;895,346&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;1_count-value-captured-by-settimeout&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/1_count-value-captured-by-settimeout.jpeg?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/1_count-value-captured-by-settimeout.jpeg?w=895&quot; class=&quot;aligncenter size-full wp-image-202543&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/1_count-value-captured-by-settimeout.jpeg&quot; alt=&quot;count value captured by set timeout&quot; width=&quot;895&quot; height=&quot;346&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/1_count-value-captured-by-settimeout.jpeg 895w, https://blog.logrocket.com/wp-content/uploads/2025/03/1_count-value-captured-by-settimeout.jpeg?resize=300,116 300w, https://blog.logrocket.com/wp-content/uploads/2025/03/1_count-value-captured-by-settimeout.jpeg?resize=768,297 768w&quot; sizes=&quot;(max-width: 895px) 100vw, 895px&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;In that screenshot, the &lt;strong&gt;Current Count: 1&lt;/strong&gt; indicates that the &lt;code&gt;count&lt;/code&gt; value is actually “1.” Since the &lt;code&gt;setTimeout&lt;/code&gt; created a closure and locked the value to the initial 0&lt;strong&gt;,&lt;/strong&gt; the modal shows 0.&lt;/p&gt;
&lt;p&gt;To resolve this issue, we can use the &lt;a href=&quot;https://blog.logrocket.com/usestate-vs-useref/&quot;&gt;&lt;code&gt;useRef&lt;/code&gt; Hook&lt;/a&gt; to create a reference that always has the latest value across re-renders. With React state management, issues can occur where a re-render pulls data from a previous state.&lt;/p&gt;
&lt;p&gt;If you just use &lt;code&gt;useState&lt;/code&gt; Hooks without a lot of complexity, you generally can get away with the standard getting and setting state. However, closures in particular data can have issues persisting as updates occur. Consider a refactor of our original component like the following:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;const SetTimeoutSolution = () =&amp;gt; {
    const [count, setCount] = useState(0);
    const countRef = useRef(count);
    // Keep the ref in sync with the state
    countRef.current = count;
    const handleClickWithRef = () =&amp;gt; {
        setCount(count + 1);
        // Using ref to get the latest value
        setTimeout(() =&amp;gt; {
            console.log(&#39;Current count (Solution with Ref):&#39;, countRef.current);
            alert(`Current count (Solution with Ref): ${countRef.current}`);
        }, 2000);
    };
    return (
        &amp;lt;div className=&quot;p-4 bg-black rounded shadow&quot;&amp;gt;
            &amp;lt;h2 className=&quot;text-xl font-bold mb-4&quot;&amp;gt;setTimeout Solution&amp;lt;/h2&amp;gt;
            &amp;lt;p className=&quot;mb-4&quot;&amp;gt;Current count: {count}&amp;lt;/p&amp;gt;
            &amp;lt;div className=&quot;space-y-4&quot;&amp;gt;
                &amp;lt;div&amp;gt;
                    &amp;lt;button
                        onClick={handleClickWithRef}
                        className=&quot;bg-green-500 text-black px-4 py-2 rounded hover:bg-green-600&quot;
                    &amp;gt;
                        Increment and Check After 2s
                    &amp;lt;/button&amp;gt;
                    &amp;lt;div className=&quot;mt-4 p-4 bg-gray-100 rounded&quot;&amp;gt;
                        &amp;lt;p className=&quot;text-black&quot;&amp;gt;
                            Expected: Alert shows the updated count
                        &amp;lt;/p&amp;gt;
                        &amp;lt;p className=&quot;text-black&quot;&amp;gt;
                            Actual: Alert shows the updated count
                        &amp;lt;/p&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    );
};
&lt;/pre&gt;
&lt;p&gt;The difference in the code from the original issue is:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;    const [count, setCount] = useState(0);
    const countRef = useRef(count);
    // Keep the ref in sync with the state
    countRef.current = count;

    const handleClickWithRef = () =&amp;gt; {
        setCount(count + 1);
        // Using ref to get the latest value
        setTimeout(() =&amp;gt; {
            console.log(&#39;Current count (Solution with Ref):&#39;, countRef.current);
            alert(`Current count (Solution with Ref): ${countRef.current}`);
        }, 2000);
    };
&lt;/pre&gt;
&lt;p&gt;You’ll notice that we are using the &lt;code&gt;countRef&lt;/code&gt; value, which references the actual state value for &lt;code&gt;count&lt;/code&gt;. The reference persists across re-renders and thus resolves this closure issue. If you’d like more information on useRef, I recommend reviewing the LogRocket’s &lt;a href=&quot;https://blog.logrocket.com/complete-guide-react-refs/&quot;&gt;guide to React Refs&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;real-world-example&quot;&gt;A real-world example of JavaScript closures: SignalR reference leaks in callbacks&lt;/h2&gt;
&lt;p&gt;In my professional role, I am a tech lead of a product team that manages an application used nationally by my company. This application handles real-time updates of data that reside in different queues. These queues are shown visually on a page with multiple tabs (one tab per queue). The page will receive messages from &lt;a href=&quot;https://learn.microsoft.com/en-us/azure/azure-signalr/&quot;&gt;Azure’s SignalR service&lt;/a&gt; when the data is changed by backend processes. The messages received indicate how to either update the data or move it to a different queue.&lt;/p&gt;
&lt;p&gt;My team encountered an issue where this whole process was generating multiple errors. Basically, some updates seemed to be occurring correctly, while others were missed or incorrect. This was very frustrating for our users. It was also very difficult to debug as the &lt;a href=&quot;https://blog.logrocket.com/integrating-next-js-signalr/&quot;&gt;SignalR&lt;/a&gt; service operates in real time, and requires triggering messages to be sent from the server to the client.&lt;/p&gt;
&lt;p&gt;Initially, I thought that this had to be something on our backend. I walked through the backend processes that generate the SignalR messages with the devs on my team. When it became apparent that the messages were being sent correctly, I switched over to looking at the frontend project.&lt;/p&gt;
&lt;p&gt;In a deep dive of the code, I found that the issue was basically a closure problem. We were using the &lt;a href=&quot;https://learn.microsoft.com/en-us/aspnet/core/signalr/javascript-client?view=aspnetcore-9.0&amp;amp;tabs=visual-studio&quot;&gt;SignalR client package from Microsoft&lt;/a&gt;, and the event handler that was receiving the messages was incorrectly acting on old state.&lt;/p&gt;
&lt;p&gt;For the solution to my problem, I refactored the message handler and also used the &lt;code&gt;useRef&lt;/code&gt; hook that I had mentioned before. If you’re following along on my &lt;a href=&quot;https://github.com/andrewevans0102/closure-examples&quot;&gt;sample project&lt;/a&gt;, I’m referring to the &lt;code&gt;SignalRIssue&lt;/code&gt; and &lt;code&gt;SignalRSolution&lt;/code&gt; components.&lt;/p&gt;
&lt;p&gt;Consider the original SignalRIssue component:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;import React, { useState, useEffect } from &#39;react&#39;;
import { ValueLocation, MoveMessage } from &#39;../types/message&#39;;
import { createMockHub, createInitialValues } from &#39;../utils/mockHub&#39;;
import ValueList from &#39;./ValueList&#39;;
import MessageDisplay from &#39;./MessageDisplay&#39;;

const SignalRIssue: React.FC = () =&amp;gt; {
    const [tabAValues, setTabAValues] = useState&amp;lt;ValueLocation[]&amp;gt;(() =&amp;gt;
        createInitialValues()
    );
    const [tabBValues, setTabBValues] = useState&amp;lt;ValueLocation[]&amp;gt;([]);
    const [activeTab, setActiveTab] = useState&amp;lt;&#39;A&#39; | &#39;B&#39;&amp;gt;(&#39;A&#39;);
    const [lastMove, setLastMove] = useState&amp;lt;MoveMessage | null&amp;gt;(null);
    useEffect(() =&amp;gt; {
        const hub = createMockHub();
        hub.on(&#39;message&#39;, (data: MoveMessage) =&amp;gt; {
            // The closure captures these initial arrays and will always reference
            // their initial values throughout the component&#39;s lifecycle
            if (data.targetTab === &#39;A&#39;) {
                // Remove from B (but using stale B state)
                setTabBValues(tabBValues.filter((v) =&amp;gt; v.value !== data.value));
                // Add to A (but using stale A state)
                setTabAValues([
                    ...tabAValues,
                    {
                        tab: &#39;A&#39;,
                        value: data.value,
                    },
                ]);
            } else {
                // Remove from A (but using stale A state)
                setTabAValues(tabAValues.filter((v) =&amp;gt; v.value !== data.value));
                // Add to B (but using stale B state)
                setTabBValues([
                    ...tabBValues,
                    {
                        tab: &#39;B&#39;,
                        value: data.value,
                    },
                ]);
            }
            setLastMove(data);
        });
        hub.start();
        return () =&amp;gt; {
            hub.stop();
        };
    }, []); // Empty dependency array creates the closure issue

    return (
        &amp;lt;div className=&quot;p-4 bg-black rounded shadow&quot;&amp;gt;
            &amp;lt;h2 className=&quot;text-xl font-bold mb-4&quot;&amp;gt;SignalR Issue&amp;lt;/h2&amp;gt;
            &amp;lt;div className=&quot;min-h-screen w-full flex items-center justify-center py-8&quot;&amp;gt;
                &amp;lt;div className=&quot;max-w-2xl w-full mx-4&quot;&amp;gt;
                    &amp;lt;div className=&quot;bg-gray-800 rounded-lg shadow-xl overflow-hidden&quot;&amp;gt;
                        &amp;lt;MessageDisplay message={lastMove} /&amp;gt;
                        &amp;lt;div className=&quot;border-b border-gray-700&quot;&amp;gt;
                            &amp;lt;div className=&quot;flex&quot;&amp;gt;
                                &amp;lt;button
                                    onClick={() =&amp;gt; setActiveTab(&#39;A&#39;)}
                                    className={`px-6 py-3 text-sm font-medium flex-1 ${
                                        activeTab === &#39;A&#39;
                                            ? &#39;border-b-2 border-purple-500 text-purple-400 bg-purple-900/20&#39;
                                            : &#39;text-gray-400 hover:text-purple-300 hover:bg-purple-900/10&#39;
                                    }`}
                                &amp;gt;
                                    Tab A ({tabAValues.length})
                                &amp;lt;/button&amp;gt;
                                &amp;lt;button
                                    onClick={() =&amp;gt; setActiveTab(&#39;B&#39;)}
                                    className={`px-6 py-3 text-sm font-medium flex-1 ${
                                        activeTab === &#39;B&#39;
                                            ? &#39;border-b-2 border-emerald-500 text-emerald-400 bg-emerald-900/20&#39;
                                            : &#39;text-gray-400 hover:text-emerald-300 hover:bg-emerald-900/10&#39;
                                    }`}
                                &amp;gt;
                                    Tab B ({tabBValues.length})
                                &amp;lt;/button&amp;gt;
                            &amp;lt;/div&amp;gt;
                        &amp;lt;/div&amp;gt;
                        {activeTab === &#39;A&#39; ? (
                            &amp;lt;ValueList values={tabAValues} tab={activeTab} /&amp;gt;
                        ) : (
                            &amp;lt;ValueList values={tabBValues} tab={activeTab} /&amp;gt;
                        )}
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div className=&quot;mt-4 p-4 bg-yellow-900 rounded-lg border border-yellow-700&quot;&amp;gt;
                        &amp;lt;h3 className=&quot;text-sm font-medium text-yellow-300&quot;&amp;gt;
                            Issue Explained
                        &amp;lt;/h3&amp;gt;
                        &amp;lt;p className=&quot;mt-2 text-sm text-yellow-200&quot;&amp;gt;
                            This component demonstrates the closure issue where
                            the event handler captures the initial state values
                            and doesn&#39;t see updates. Watch as values may
                            duplicate or disappear due to stale state
                            references.
                        &amp;lt;/p&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    );
};
export default SignalRIssue;
&lt;/pre&gt;
&lt;p&gt;The component basically loads, connects to a hub (here I’ve created a mock version of the SignalR connection) and then acts when messages are received. In my mocked SignalR client, I have it using &lt;code&gt;setInterval&lt;/code&gt; and randomly moving values from one tab to another:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;import { MoveMessage, ValueLocation } from &#39;../types/message&#39;;
export const createInitialValues = (): ValueLocation[] =&amp;gt; {
    return Array.from({ length: 5 }, (_, index) =&amp;gt; ({
        value: index + 1,
        tab: &#39;A&#39;,
    }));
};
export const createMockHub = () =&amp;gt; {
    return {
        on: (eventName: string, callback: (data: MoveMessage) =&amp;gt; void) =&amp;gt; {
            // Simulate value movements every 2 seconds
            const interval = setInterval(() =&amp;gt; {
                // Randomly select a value (1-5) and a target tab
                const value = Math.floor(Math.random() * 5) + 1;
                const targetTab = Math.random() &amp;gt; 0.5 ? &#39;A&#39; : &#39;B&#39;;
                callback({
                    type: &#39;move&#39;,
                    value,
                    targetTab,
                    timestamp: Date.now(),
                });
            }, 2000);
            return () =&amp;gt; clearInterval(interval);
        },
        start: () =&amp;gt; Promise.resolve(),
        stop: () =&amp;gt; Promise.resolve(),
    };
};
&lt;/pre&gt;
&lt;p&gt;If you ran my sample component, you would see odd behavior like this:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; data-attachment-id=&quot;202544&quot; data-permalink=&quot;https://blog.logrocket.com/javascript-closures-in-react/attachment/2_odd-behavior-from-sample-component/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/2_odd-behavior-from-sample-component.jpeg&quot; data-orig-size=&quot;895,488&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;2_odd-behavior-from-sample-component&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/2_odd-behavior-from-sample-component.jpeg?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/2_odd-behavior-from-sample-component.jpeg?w=895&quot; class=&quot;aligncenter size-full wp-image-202544&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/2_odd-behavior-from-sample-component.jpeg&quot; alt=&quot;odd behavior from sample component&quot; width=&quot;895&quot; height=&quot;488&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/2_odd-behavior-from-sample-component.jpeg 895w, https://blog.logrocket.com/wp-content/uploads/2025/03/2_odd-behavior-from-sample-component.jpeg?resize=300,164 300w, https://blog.logrocket.com/wp-content/uploads/2025/03/2_odd-behavior-from-sample-component.jpeg?resize=768,419 768w&quot; sizes=&quot;auto, (max-width: 895px) 100vw, 895px&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;There should only be one occurrence of &lt;code&gt;Value1&lt;/code&gt; and &lt;code&gt;Value5&lt;/code&gt; in that list. Instead, there are multiple, and it looks like nothing is being moved over to Tab B.&lt;/p&gt;
&lt;p&gt;Looking at the code, you can see the closure issue here:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;        hub.on(&#39;message&#39;, (data: MoveMessage) =&amp;gt; {
            // The closure captures these initial arrays and will always reference
            // their initial values throughout the component&#39;s lifecycle
            if (data.targetTab === &#39;A&#39;) {
                // Remove from B (but using stale B state)
                setTabBValues(tabBValues.filter((v) =&amp;gt; v.value !== data.value));
                // Add to A (but using stale A state)
                setTabAValues([
                    ...tabAValues,
                    {
                        tab: &#39;A&#39;,
                        value: data.value,
                    },
                ]);
            } else {
                // Remove from A (but using stale A state)
                setTabAValues(tabAValues.filter((v) =&amp;gt; v.value !== data.value));
                // Add to B (but using stale B state)
                setTabBValues([
                    ...tabBValues,
                    {
                        tab: &#39;B&#39;,
                        value: data.value,
                    },
                ]);
            }
&lt;/pre&gt;
&lt;p&gt;The message handler is operating directly on the stale state when updating values. When the handler receives the messages, it’s operating on a point in the state change that is older vs. the actual value that should persist across re-renders.&lt;/p&gt;
&lt;p&gt;To resolve this situation, you can do what I did in the &lt;code&gt;setTimeout&lt;/code&gt; example and go back to the &lt;code&gt;useRef&lt;/code&gt; Hook:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;    const [tabAValues, setTabAValues] = useState&amp;lt;ValueLocation[]&amp;gt;(() =&amp;gt;
        createInitialValues()
    );
    const [tabBValues, setTabBValues] = useState&amp;lt;ValueLocation[]&amp;gt;([]);
    const [activeTab, setActiveTab] = useState&amp;lt;&#39;A&#39; | &#39;B&#39;&amp;gt;(&#39;A&#39;);
    const [lastMove, setLastMove] = useState&amp;lt;MoveMessage | null&amp;gt;(null);

    // Create refs to maintain latest state values
    const tabAValuesRef = useRef(tabAValues);
    const tabBValuesRef = useRef(tabBValues);

    // Keep refs in sync with current state
    tabAValuesRef.current = tabAValues;
    tabBValuesRef.current = tabBValues;
&lt;/pre&gt;
&lt;p&gt;Then in the message handler, you look for values from the reference vs. a stale read of the components state by looking at the &lt;code&gt;.current&lt;/code&gt; values:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;    useEffect(() =&amp;gt; {
        const hub = createMockHub();
        hub.on(&#39;message&#39;, (data: MoveMessage) =&amp;gt; {
            // Use refs to access current state values
            const valueInA = tabAValuesRef.current.find(
                (v) =&amp;gt; v.value === data.value
            );
            if (data.targetTab === &#39;A&#39;) {
                if (!valueInA) {
                    // Value should move to A
                    const valueInB = tabBValuesRef.current.find(
                        (v) =&amp;gt; v.value === data.value
                    );
                    if (valueInB) {
                        // Use functional updates to ensure clean state transitions
                        setTabBValues((prev) =&amp;gt;
                            prev.filter((v) =&amp;gt; v.value !== data.value)
                        );
                        setTabAValues((prev) =&amp;gt; [
                            ...prev,
                            {
                                tab: &#39;A&#39;,
                                value: data.value,
                            },
                        ]);
                    }
                }
            } else {
                if (valueInA) {
                    // Value should move to B
                    setTabAValues((prev) =&amp;gt;
                        prev.filter((v) =&amp;gt; v.value !== data.value)
                    );
                    setTabBValues((prev) =&amp;gt; [
                        ...prev,
                        {
                            tab: &#39;B&#39;,
                            value: data.value,
                        },
                    ]);
                }
            }
            setLastMove(data);
        });
        hub.start();
        return () =&amp;gt; {
            hub.stop();
        };
    }, []); // Empty dependency array is fine now because we&#39;re using refs
&lt;/pre&gt;
&lt;p&gt;If you notice, I also made a comment about “functional updates.”&lt;/p&gt;
&lt;p&gt;In React, a “functional update” takes in the state’s previous value and acts on that instead of directly modifying the state. This ensures that you can basically do an update in the components lifecycle on the latest value vs. attempting to act on something that may be missed in a re-render. The &lt;code&gt;useRef&lt;/code&gt; usage should cover this, but this is an important additional point when dealing with closures.&lt;/p&gt;

&lt;p&gt;With the resolved code written, you should now see something like this where the values correctly pass back and forth between the tabs:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; data-attachment-id=&quot;202545&quot; data-permalink=&quot;https://blog.logrocket.com/javascript-closures-in-react/attachment/3_values-pass-correctly-between-tabs/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/3_values-pass-correctly-between-tabs.jpeg&quot; data-orig-size=&quot;895,471&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;3_values-pass-correctly-between-tabs&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/3_values-pass-correctly-between-tabs.jpeg?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/3_values-pass-correctly-between-tabs.jpeg?w=895&quot; class=&quot;aligncenter size-full wp-image-202545&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/3_values-pass-correctly-between-tabs.jpeg&quot; alt=&quot;values pass correctly between tabs&quot; width=&quot;895&quot; height=&quot;471&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/3_values-pass-correctly-between-tabs.jpeg 895w, https://blog.logrocket.com/wp-content/uploads/2025/03/3_values-pass-correctly-between-tabs.jpeg?resize=300,158 300w, https://blog.logrocket.com/wp-content/uploads/2025/03/3_values-pass-correctly-between-tabs.jpeg?resize=768,404 768w&quot; sizes=&quot;auto, (max-width: 895px) 100vw, 895px&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;When I worked on a resolution to the production issue I mentioned, I went through a fairly exhaustive set of steps debugging the backend processes first and working my way up to the frontend.&lt;/p&gt;
&lt;p&gt;Closure issues can often be frustrating, because on the surface it appears that the updates are handled correctly. The biggest takeaway I had with this issue was to incrementally follow the state as it is passed through a process. To correctly figure out my team’s closure issue, I did both step debugging and walked through the data change at each step.&lt;/p&gt;
&lt;p&gt;With SignalR, this can be difficult because you need something to trigger the update to receive it on the client side. Ultimately, I recommend tracing through a process before jumping straight into a solution when you see issues like this.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this article, you learned how to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define closures both generally and in React JavaScript&lt;/li&gt;
&lt;li&gt;Manage closures with concepts of scope&lt;/li&gt;
&lt;li&gt;Work with closures in a simple example in JavaScript’s &lt;code&gt;setTimeout&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;Work with closures in a real-world example with connection callbacks in Azure’s SignalR service&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I mentioned throughout the article, closures can be frustrating at times (especially when dealing with production). The best thing I have found is to understand how your application is managing state, and then trace processes on that state when seeing issues.&lt;/p&gt;
&lt;p&gt;I hope this article has helped you to understand closures, and how you can work with them in React specifically. Thanks for reading my post!&lt;/p&gt;


&lt;/div&gt;
            &lt;style&gt;
    .share-icon.share-twitter span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-twitter.svg&quot;);
    }

    .share-icon.share-reddit span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-reddit.svg&quot;);
    }

    .share-icon.share-linkedin span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-linkedin.svg&quot;);
    }

    .share-icon.share-facebook span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-facebook.svg&quot;);
    }
&lt;/style&gt;

&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon sd-sharing&quot;&gt;&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;&lt;div class=&quot;sd-content&quot;&gt;&lt;ul&gt;&lt;li class=&quot;share-twitter&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-twitter-202523&quot; class=&quot;share-twitter sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/javascript-closures-in-react/?share=twitter&quot; target=&quot;_blank&quot; title=&quot;Click to share on Twitter&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Twitter (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-reddit&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;&quot; class=&quot;share-reddit sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/javascript-closures-in-react/?share=reddit&quot; target=&quot;_blank&quot; title=&quot;Click to share on Reddit&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Reddit (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-linkedin&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-linkedin-202523&quot; class=&quot;share-linkedin sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/javascript-closures-in-react/?share=linkedin&quot; target=&quot;_blank&quot; title=&quot;Click to share on LinkedIn&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on LinkedIn (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-facebook&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-facebook-202523&quot; class=&quot;share-facebook sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/javascript-closures-in-react/?share=facebook&quot; target=&quot;_blank&quot; title=&quot;Click to share on Facebook&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Facebook (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-end&quot;&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;            &lt;ul id=&quot;post-tags&quot;&gt;
            &lt;li&gt;
        &lt;a rel=&quot;tag&quot; href=&quot;https://blog.logrocket.com/tag/javascript/&quot;&gt;#javascript&lt;/a&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
            &lt;div class=&quot;post-popup&quot; data-popup-name=&quot;dev-cab&quot;&gt;
    &lt;i data-popup-dismiss=&quot;&quot; class=&quot;fa-solid fa-xmark post-popup__exit&quot;&gt;&lt;/i&gt;
    &lt;div class=&quot;post-popup__page active&quot;&gt;
        &lt;p class=&quot;post-popup__title&quot;&gt;Would you be interested in joining LogRocket&#39;s developer community? &lt;/p&gt;
        &lt;div class=&quot;post-popup__buttons&quot;&gt;
            &lt;button data-popup-next=&quot;&quot; class=&quot;lr-button&quot;&gt;Yea&lt;/button&gt;
            &lt;button data-popup-dismiss=&quot;&quot; class=&quot;lr-button&quot;&gt;No Thanks&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;post-popup__page&quot;&gt;
        &lt;p&gt;
            Join LogRocket’s Content Advisory Board. You’ll help inform the type of
            content we create and get access to exclusive meetups, social accreditation,
            and swag.
        &lt;/p&gt;
        &lt;a data-popup-dismiss=&quot;&quot; class=&quot;lr-button&quot; target=&quot;__blank&quot; href=&quot;https://lp.logrocket.com/blg/content-advisory-board-signup&quot;&gt;Sign up now&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
        &lt;/div&gt;
    </description><link>https://blog.logrocket.com/javascript-closures-in-react/</link><guid isPermaLink="false">https://blog.logrocket.com/javascript-closures-in-react/</guid><pubDate>Thu, 20 Mar 2025 16:00:00 GMT</pubDate><author>Andrew Evans</author></item><item><title>How to use CSS variables like a pro</title><description>&lt;aside&gt;
            &lt;div class=&quot;sticky&quot;&gt;
                                
&lt;div class=&quot;toc-container&quot; id=&quot;post-toc&quot;&gt;
            &lt;div class=&quot;toc-header&quot;&gt;
            &lt;span class=&quot;toc-title&quot;&gt;
                Table of contents            &lt;/span&gt;
            &lt;i class=&quot;fa fa-chevron-down toc-collapse&quot;&gt;&lt;/i&gt;
            &lt;i class=&quot;hide fa fa-chevron-up toc-expand&quot;&gt;&lt;/i&gt;
        &lt;/div&gt;
        
&lt;ul data-toc-name=&quot;root&quot; class=&quot;toc&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/how-to-use-css-variables/#whatarecssvariables&quot;&gt;What are CSS variables?&lt;/a&gt;
        &lt;ul data-toc-name=&quot;whatarecssvariables&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/how-to-use-css-variables/#whatwellbuildinthistutorial&quot;&gt;What we’ll build in this tutorial&lt;/a&gt;
        &lt;ul data-toc-name=&quot;whatwellbuildinthistutorial&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/how-to-use-css-variables/#howtodeclareandusecssvariables&quot;&gt;How to declare and use CSS variables&lt;/a&gt;
        &lt;ul data-toc-name=&quot;howtodeclareandusecssvariables&quot; class=&quot;toc-subheading&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/how-to-use-css-variables/#prefix&quot;&gt;&lt;code&gt;--&lt;/code&gt; &lt;strong&gt;prefix&lt;/strong&gt;&lt;/a&gt;
        &lt;ul data-toc-name=&quot;prefix&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/how-to-use-css-variables/#propertyatrule&quot;&gt;&lt;code&gt;@property&lt;/code&gt; &lt;strong&gt;at-rule&lt;/strong&gt;&lt;/a&gt;
        &lt;ul data-toc-name=&quot;propertyatrule&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/how-to-use-css-variables/#howtousevariablesincss&quot;&gt;&lt;strong&gt;How to use variables in CSS&lt;/strong&gt;&lt;/a&gt;
        &lt;ul data-toc-name=&quot;howtousevariablesincss&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/how-to-use-css-variables/#cssvariablesinheritance&quot;&gt;&lt;strong&gt;CSS variables inheritance&lt;/strong&gt;&lt;/a&gt;
        &lt;ul data-toc-name=&quot;cssvariablesinheritance&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/how-to-use-css-variables/#cssvariablescascading&quot;&gt;&lt;strong&gt;CSS variables cascading&lt;/strong&gt;&lt;/a&gt;
        &lt;ul data-toc-name=&quot;cssvariablescascading&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/how-to-use-css-variables/#fallbackandinvalidvalues&quot;&gt;&lt;strong&gt;Fallback and invalid values&lt;/strong&gt;&lt;/a&gt;
        &lt;ul data-toc-name=&quot;fallbackandinvalidvalues&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/how-to-use-css-variables/#creatingscopedcssvariables&quot;&gt;&lt;strong&gt;Creating scoped CSS variables&lt;/strong&gt;&lt;/a&gt;
        &lt;ul data-toc-name=&quot;creatingscopedcssvariables&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/how-to-use-css-variables/#project1buildingbuttonvariations&quot;&gt;Project 1: Building button variations&lt;/a&gt;
        &lt;ul data-toc-name=&quot;project1buildingbuttonvariations&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/how-to-use-css-variables/#project2settingcssvariablesdynamicallywithjavascript&quot;&gt;Project 2: Setting CSS variables dynamically with JavaScript&lt;/a&gt;
        &lt;ul data-toc-name=&quot;project2settingcssvariablesdynamicallywithjavascript&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/how-to-use-css-variables/#project3handlingresponsivedesignfeatures&quot;&gt;Project 3: Handling responsive design features&lt;/a&gt;
        &lt;ul data-toc-name=&quot;project3handlingresponsivedesignfeatures&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/how-to-use-css-variables/#project4generatingjavascriptfreedynamicelements&quot;&gt;Project 4: Generating JavaScript-free dynamic elements&lt;/a&gt;
        &lt;ul data-toc-name=&quot;project4generatingjavascriptfreedynamicelements&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/how-to-use-css-variables/#cssvariablesvssassvariables&quot;&gt;CSS variables vs. SASS variables&lt;/a&gt;
        &lt;ul data-toc-name=&quot;cssvariablesvssassvariables&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/how-to-use-css-variables/#advancedtechniquesusingcssvariablesinanimations&quot;&gt;Advanced techniques: Using CSS variables in animations&lt;/a&gt;
        &lt;ul data-toc-name=&quot;advancedtechniquesusingcssvariablesinanimations&quot; class=&quot;toc-subheading&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/how-to-use-css-variables/#animatingbuttoncolordynamically&quot;&gt;&lt;strong&gt;Animating&lt;/strong&gt; &lt;strong&gt;b&lt;/strong&gt;utton &lt;strong&gt;c&lt;/strong&gt;olor &lt;strong&gt;d&lt;/strong&gt;ynamically&lt;/a&gt;
        &lt;ul data-toc-name=&quot;animatingbuttoncolordynamically&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/how-to-use-css-variables/#browsersupportforthecssvariablesfeature&quot;&gt;Browser support for the CSS variables feature&lt;/a&gt;
        &lt;ul data-toc-name=&quot;browsersupportforthecssvariablesfeature&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/how-to-use-css-variables/#commonmistakestroubleshootingcssvariables&quot;&gt;Common mistakes &amp;amp; troubleshooting CSS variables&lt;/a&gt;
        &lt;ul data-toc-name=&quot;commonmistakestroubleshootingcssvariables&quot; class=&quot;toc-subheading&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/how-to-use-css-variables/#missingfallbacksforolderbrowsers&quot;&gt;&lt;strong&gt;Missing&lt;/strong&gt; &lt;strong&gt;f&lt;/strong&gt;allbacks for &lt;strong&gt;o&lt;/strong&gt;lder &lt;strong&gt;b&lt;/strong&gt;rowsers&lt;/a&gt;
        &lt;ul data-toc-name=&quot;missingfallbacksforolderbrowsers&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/how-to-use-css-variables/#variableswithmediaqueries&quot;&gt;&lt;strong&gt;Variables with media queries&lt;/strong&gt;&lt;/a&gt;
        &lt;ul data-toc-name=&quot;variableswithmediaqueries&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/how-to-use-css-variables/#variablesdontworkincertainpropertiesegdisplayzindex&quot;&gt;&lt;strong&gt;Variables&lt;/strong&gt; &lt;strong&gt;d&lt;/strong&gt;on&#39;t &lt;strong&gt;w&lt;/strong&gt;ork in &lt;strong&gt;c&lt;/strong&gt;ertain &lt;strong&gt;p&lt;/strong&gt;roperties (e.g.,&lt;code&gt;display&lt;/code&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;code&gt;z-index&lt;/code&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/a&gt;
        &lt;ul data-toc-name=&quot;variablesdontworkincertainpropertiesegdisplayzindex&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/how-to-use-css-variables/#conclusion&quot;&gt;Conclusion&lt;/a&gt;
        &lt;ul data-toc-name=&quot;conclusion&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/how-to-use-css-variables/#frequentlyaskedquestions&quot;&gt;Frequently asked questions&lt;/a&gt;
        &lt;ul data-toc-name=&quot;frequentlyaskedquestions&quot; class=&quot;toc-subheading&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/how-to-use-css-variables/#howdoiusevariablesincss&quot;&gt;&lt;strong&gt;How do I use variables in CSS?&lt;/strong&gt;&lt;/a&gt;
        &lt;ul data-toc-name=&quot;howdoiusevariablesincss&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/how-to-use-css-variables/#whenshouldiusecssvariables&quot;&gt;&lt;strong&gt;When should I use CSS variables?&lt;/strong&gt;&lt;/a&gt;
        &lt;ul data-toc-name=&quot;whenshouldiusecssvariables&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/how-to-use-css-variables/#howdoyouinitializeavariableincss&quot;&gt;&lt;strong&gt;How do you initialize a variable in CSS?&lt;/strong&gt;&lt;/a&gt;
        &lt;ul data-toc-name=&quot;howdoyouinitializeavariableincss&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/div&gt;
                &lt;!-- Sidebar gutter ad --&gt;
                
            &lt;/div&gt;
        &lt;/aside&gt;
        &lt;div id=&quot;the-content-container&quot;&gt;
            
&lt;div class=&quot;lr-content&quot;&gt;
    &lt;!-- TEMP: .article-post is only used for adinserter to hook into --&gt;
    &lt;div class=&quot;article-post&quot;&gt;&lt;/div&gt;
    
&lt;p&gt;CSS offers many predefined standard key-value-based properties for styling semantic HTML elements. However, while designing webpages, developers often need to repetitively use the same values for properties in several segments of stylesheets — for example, while using a primary accent color for various webpage elements.&lt;/p&gt;
&lt;img fetchpriority=&quot;high&quot; decoding=&quot;async&quot; width=&quot;895&quot; height=&quot;597&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2024/02/featured-image-css-variables.png&quot; class=&quot;attachment-full size-full wp-post-image&quot; alt=&quot;how to use css variables&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2024/02/featured-image-css-variables.png 895w, https://blog.logrocket.com/wp-content/uploads/2024/02/featured-image-css-variables.png?resize=300,200 300w, https://blog.logrocket.com/wp-content/uploads/2024/02/featured-image-css-variables.png?resize=768,512 768w&quot; sizes=&quot;(max-width: 895px) 100vw, 895px&quot; data-attachment-id=&quot;202551&quot; data-permalink=&quot;https://blog.logrocket.com/how-to-use-css-variables/attachment/featured-image-css-variables/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2024/02/featured-image-css-variables.png&quot; data-orig-size=&quot;895,597&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;featured-image-css-variables&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2024/02/featured-image-css-variables.png?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2024/02/featured-image-css-variables.png?w=895&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;p&gt;CSS now supports using custom properties, also known as CSS variables, to avoid repetitive CSS property values. Like any popular programming language, CSS also implements variables for writing clean code with a productive assignment and retrieval syntax, scoping support, and fallback values.&lt;/p&gt;
&lt;p&gt;In this tutorial, we’ll first demystify CSS variables and then build four simple projects that utilize them. Some &lt;a href=&quot;https://blog.logrocket.com/the-future-of-css-features-in-2020/&quot;&gt;basic CSS knowledge&lt;/a&gt; is required to follow along with this tutorial. Let’s dive in!&lt;/p&gt;
&lt;h2 id=&quot;whatarecssvariables&quot;&gt;What are CSS variables?&lt;/h2&gt;
&lt;p&gt;CSS variables are user-defined values that can be reused throughout a stylesheet. They are also known as custom properties&lt;strong&gt;.&lt;/strong&gt; The &lt;code&gt;--&lt;/code&gt; prefix and &lt;code&gt;var()&lt;/code&gt; function is used to define and access CSS variables respectively:&lt;/p&gt;
&lt;pre class=&quot;language-css hljs&quot;&gt;:root {
  --primary-color: #3498db;
}

button {
  background-color: var(--primary-color);
}
&lt;/pre&gt;
&lt;p&gt;Unlike traditional CSS properties, CSS variables can be modified dynamically with JavaScript using (&lt;code&gt;element.style.setProperty&lt;/code&gt;). CSS variables can be changed in one place and all elements using it update automatically. They can be defined within selectors or globally using (&lt;code&gt;:root&lt;/code&gt; ).&lt;/p&gt;
&lt;p&gt;One of the most common use cases for CSS variables is managing websites in which numerous values are similar to those in the document. This helps to reduce the friction associated with refactoring or updating your code.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Editor’s note&lt;/em&gt;&lt;/strong&gt;: This article was updated by &lt;a href=&quot;https://blog.logrocket.com/author/emmanueljohn/&quot;&gt;&lt;em&gt;Emmanuel John&lt;/em&gt;&lt;/a&gt; &lt;em&gt;in March 2025 to include instructions on setting CSS variables dynamically with JavaScript, differentiate between CSS and SASS variables, and troubleshoot common developer issues with CSS variables.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;whatwellbuildinthistutorial&quot;&gt;What we’ll build in this tutorial&lt;/h2&gt;
&lt;p&gt;To solidify our knowledge about CSS variables, we’ll build four very simple projects:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Button variations&lt;/strong&gt; &lt;strong&gt;—&lt;/strong&gt; This concept is popular in Bootstrap, where certain elements share CSS rules that give them a default design but are differentiated by colors or other properties&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Theme-based design&lt;/strong&gt; &lt;strong&gt;—&lt;/strong&gt; Specifically, a light-and-dark theme manipulated by JavaScript&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A responsive login form&lt;/strong&gt; &lt;strong&gt;—&lt;/strong&gt; We’ll display different layouts on desktop, tablet, and mobile screens&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JavaScript-free dynamic elements&lt;/strong&gt; &lt;strong&gt;—&lt;/strong&gt; This project generates a colorful native checkbox list&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each project should provide insights into how we can use CSS variables to take care of a wide variety of use cases.&lt;/p&gt;
&lt;p&gt;Also referred to as custom properties or cascading variables, CSS variables have myriad use cases.&lt;/p&gt;
&lt;h2 id=&quot;howtodeclareandusecssvariables&quot;&gt;How to declare and use CSS variables&lt;/h2&gt;
&lt;p&gt;CSS variables can be declared in two ways (&lt;code&gt;--&lt;/code&gt; prefix and &lt;code&gt;@property&lt;/code&gt; at-rule).&lt;/p&gt;
&lt;h3 id=&quot;prefix&quot;&gt;&lt;code&gt;--&lt;/code&gt; &lt;strong&gt;prefix&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;--&lt;/code&gt; prefix declares variables in two ways (globally and locally). The former uses the &lt;code&gt;:root&lt;/code&gt; selector to define global variables:&lt;/p&gt;
&lt;pre class=&quot;language-css hljs&quot;&gt;:root {
  --primary-color: blue;
  --font-size: 16px;
}
&lt;/pre&gt;
&lt;p&gt;While the latter defines a variable inside specific elements:&lt;/p&gt;
&lt;pre class=&quot;language-css hljs&quot;&gt;.card {
  --card-bg: lightgray;
  background-color: var(--card-bg);
}
&lt;/pre&gt;
&lt;p&gt;Here, &lt;code&gt;--card-bg&lt;/code&gt; is only accessible inside &lt;code&gt;.card&lt;/code&gt;. Global variables are accessible everywhere in the stylesheet.&lt;/p&gt;
&lt;h3 id=&quot;propertyatrule&quot;&gt;&lt;code&gt;@property&lt;/code&gt; &lt;strong&gt;at-rule&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;@property&lt;/code&gt; at-rule allows you to be more expressive with the definition of CSS variables by allowing you to define their type, control inheritance, and set default values which act as fallback. Using the &lt;code&gt;@property&lt;/code&gt; at-rule ensures more predictable behavior.&lt;/p&gt;
&lt;pre class=&quot;language-css hljs&quot;&gt;@property --card-color {
  syntax: &quot;&amp;lt;color&amp;gt;&quot;;
  inherits: false;
  initial-value: #FFFFFF;
}
&lt;/pre&gt;
&lt;p&gt;Here, &lt;code&gt;--card-color&lt;/code&gt; is declared as a CSS variable that expects &lt;code&gt;&amp;lt;color&amp;gt;&lt;/code&gt; value. The &lt;code&gt;inherits:false;&lt;/code&gt; property prevents it from being inherited by child elements, and &lt;code&gt;initial-value:#FFFFFF;&lt;/code&gt; sets a default color when no &lt;code&gt;&amp;lt;color&amp;gt;&lt;/code&gt; value is assigned.&lt;/p&gt;
&lt;h3 id=&quot;howtousevariablesincss&quot;&gt;&lt;strong&gt;How to use variables in CSS&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;CSS variables can be applied to elements using the &lt;code&gt;var()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&quot;language-css hljs&quot;&gt;button {
  background-color: var(--primary-color);
  font-size: var(--font-size);
}
&lt;/pre&gt;
&lt;p&gt;If the value of &lt;code&gt;--primary-color&lt;/code&gt; is updated, all the elements using it will automatically change.&lt;/p&gt;
&lt;h3 id=&quot;cssvariablesinheritance&quot;&gt;&lt;strong&gt;CSS variables inheritance&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Like traditional CSS properties, CSS variables follow standard property rules — i.e., they inherit, can be overridden, and adhere to the &lt;a href=&quot;https://blog.logrocket.com/deep-dive-css-specificity/&quot;&gt;CSS specificity algorithm&lt;/a&gt;. The value of an element is inherited from its parent elements if no custom property is defined in a specific child element, as shown in the following example.&lt;/p&gt;
&lt;p&gt;The HTML:&lt;/p&gt;
&lt;pre class=&quot;language-html hljs&quot;&gt;&amp;lt;div class=&quot;container&quot;&amp;gt;
  &amp;lt;article class=&quot;post&quot;&amp;gt;
    &amp;lt;h1 class=&quot;post-title&quot;&amp;gt;Heading text&amp;lt;/h1&amp;gt;
    &amp;lt;p class=&quot;post-content&quot;&amp;gt;Paragraph text&amp;lt;/p&amp;gt;
  &amp;lt;/article&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The CSS:&lt;/p&gt;
&lt;pre class=&quot;language-css hljs&quot;&gt;.container {
  --padding: 1rem;
}

.post {
  --padding: 1.5rem;
}

.post-content {
  padding: var(--padding);
}
&lt;/pre&gt;
&lt;p&gt;In this case, the &lt;code&gt;.post-content&lt;/code&gt; selector inherits padding value from its direct parent, &lt;code&gt;.post&lt;/code&gt;, with the value of &lt;code&gt;1.5rem&lt;/code&gt; rather than &lt;code&gt;1rem&lt;/code&gt;. You can use Chrome DevTools to see from where the specific CSS variable value gets inherited, as shown in the following preview:&lt;/p&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2020/02/img1-Chrome-DevTools-showing-padding-value-inheritance-behavior.png&quot; alt=&quot;Screenshot Of Chrome Devtools Showing How The Padding Value Was Inherited From The Article Post Selector&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;You can use &lt;a href=&quot;https://blog.logrocket.com/css-inheritance-inherit-initial-unset-and-revert/&quot;&gt;CSS variable inheritance&lt;/a&gt; to pass variable values from parent elements to child elements without re-declaring them in selectors. Also, overriding variable values is possible as traditional CSS properties.&lt;/p&gt;
&lt;h3 id=&quot;cssvariablescascading&quot;&gt;&lt;strong&gt;CSS variables cascading&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;CSS cascade rules handle the precedence of CSS definitions that come from various sources.&lt;br&gt;
CSS variables also follow the &lt;a href=&quot;https://blog.logrocket.com/how-css-works-understanding-the-cascade-d181cd89a4d8/&quot;&gt;standard cascade&lt;/a&gt; rules as any other standard properties. For example, if you use two selectors with the same specificity score, the variable assignment order will decide the value of a specific CSS variable.&lt;/p&gt;
&lt;p&gt;A variable assignment in a new CSS block typically overrides the existing precedence and re-assigns values to variables.&lt;/p&gt;

&lt;p&gt;Let’s understand variable cascading rules with a simple example.&lt;/p&gt;
&lt;p&gt;The HTML:&lt;/p&gt;
&lt;pre class=&quot;language-html hljs&quot;&gt;&amp;lt;span class=&quot;lbl lbl-ok&quot;&amp;gt;OK&amp;lt;/span&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The CSS:&lt;/p&gt;
&lt;pre class=&quot;language-css hljs&quot;&gt;.lbl {
  --lbl-color: #ddd;
  background-color: var(--lbl-color);
  padding: 6px;
}

.lbl-ok { --lbl-color: green }

/* --- more CSS code ---- */
/* ---- */

.lbl-ok { --lbl-color: lightgreen }
&lt;/pre&gt;
&lt;p&gt;The above CSS selectors have the same specificity, so CSS uses cascading precedence to select the right &lt;code&gt;lbl-color&lt;/code&gt; value for elements. Here, we’ll get the &lt;code&gt;lightgreen&lt;/code&gt; color for the &lt;code&gt;span&lt;/code&gt; element since &lt;code&gt;lightgreen&lt;/code&gt; is in the last variable assignment. The color of the label may change based on the order of the above selectors.&lt;/p&gt;
&lt;p&gt;CSS variables also work with developer-defined &lt;a href=&quot;https://blog.logrocket.com/control-css-cascade-with-cascade-layers/&quot;&gt;cascade layers that use the &lt;code&gt;@layer&lt;/code&gt; at-rule&lt;/a&gt;. To demonstrate this, we can add some cascade layers to the above CSS snippet:&lt;/p&gt;
&lt;pre class=&quot;language-css hljs&quot;&gt;@layer base, mods;

@layer base {
  .lbl {
    --lbl-color: #ddd;
    background-color: var(--lbl-color);
    padding: 6px;
  }
}

@layer mods {
  .lbl-ok { --lbl-color: lightgreen }
}
&lt;/pre&gt;
&lt;p&gt;You can check how cascading rules overwrite variable values with Chrome DevTools:&lt;/p&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2020/02/img2-Chrome-DevTools-showing-cascade-rules-affect-CSS-variables.png&quot; alt=&quot;Screenshot Of Chrome Devtools Showing How Cascade Rules Affect Css Variables&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;fallbackandinvalidvalues&quot;&gt;&lt;strong&gt;Fallback and invalid values&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;When using custom properties, you might reference a custom property that isn’t defined in the document. You can specify a fallback value to be used in place of that value.&lt;/p&gt;
&lt;p&gt;The syntax for providing a fallback value is still the &lt;code&gt;var()&lt;/code&gt; function. Send the fallback value as the second parameter of the &lt;code&gt;var()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&quot;language-css hljs&quot;&gt;:root {
  --light-gray: #ccc;
}

p {
  color: var(--light-grey, #f0f0f0); /* No --light-grey, so #f0f0f0 is 
  used as a fallback value */
}
&lt;/pre&gt;
&lt;p&gt;Did you notice that I misspelled the value &lt;code&gt;--light-gray&lt;/code&gt;? This should cause the value to be undefined, so the browser loads the fallback value, &lt;code&gt;#f0f0f0&lt;/code&gt; for the &lt;code&gt;color&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;A comma-separated list is also accepted as a valid fallback value. For example, the following CSS definition loads &lt;code&gt;red, blue&lt;/code&gt; as the fallback value for the gradient function:&lt;/p&gt;
&lt;pre class=&quot;language-css hljs&quot;&gt;background-image: linear-gradient(90deg, var(--colors, red, blue));
&lt;/pre&gt;
&lt;p&gt;You can also use variables as fallback values with nested &lt;code&gt;var()&lt;/code&gt; functions. For example, the following definition loads &lt;code&gt;#ccc&lt;/code&gt; from &lt;code&gt;--light-gray&lt;/code&gt; if it’s defined:&lt;/p&gt;
&lt;pre class=&quot;language-css hljs&quot;&gt;color: var(--light-grey, var(--light-gray, #f0f0f0));
&lt;/pre&gt;
&lt;p&gt;Note that it’s generally not recommended to nest so many CSS functions due to performance issues caused by nested function parsing. Instead, try to use one fallback value with a readable variable name.&lt;/p&gt;

&lt;p&gt;If your web app should work on older web browsers that don’t support custom properties, you can define fallback values outside of the &lt;code&gt;var()&lt;/code&gt; function as follows:&lt;/p&gt;
&lt;pre class=&quot;language-css hljs&quot;&gt;p {
  color: #f0f0f0; /* fallback value for older browsers */
  color: var(--light-grey); 
}
&lt;/pre&gt;
&lt;p&gt;If the browser doesn’t support CSS variables, the first &lt;code&gt;color&lt;/code&gt; property sets a fallback value. We’ll discuss browser compatibility in the upcoming section about browser support for the CSS variables feature.&lt;/p&gt;
&lt;p&gt;Meanwhile, custom properties can get invalid values due to developer mistakes. Let’s learn how the browser handles invalid variable assignments and how to override the default invalid assignment handling behavior:&lt;/p&gt;
&lt;pre class=&quot;language-css hljs&quot;&gt;:root { 
  --text-danger: #ff9500; 
} 

body { 
  --text-danger: 16px;
  color: var(--text-danger); 
} 
&lt;/pre&gt;
&lt;p&gt;In this snippet, the &lt;code&gt;--text-danger&lt;/code&gt; custom property was defined with a value of &lt;code&gt;#ff9500&lt;/code&gt;. Later, it was overridden with &lt;code&gt;16px&lt;/code&gt;, which isn’t technically wrong. But when the browser substitutes the value of &lt;code&gt;--text-danger&lt;/code&gt; in place of &lt;code&gt;var(--text-danger)&lt;/code&gt;, it tries to use a value of &lt;code&gt;16px&lt;/code&gt;, which is not a valid property value for color in CSS.&lt;/p&gt;

&lt;p&gt;The browser treats it as an invalid value and checks whether the color property is inheritable by a parent element. If it is, it uses it. Otherwise, it falls back to a default color (black in most browsers).&lt;/p&gt;
&lt;p&gt;This process doesn’t bring the correct initial value defined in the &lt;code&gt;:root&lt;/code&gt; selector block, so we have to define custom properties with the accepted type and initial value using the &lt;code&gt;@property&lt;/code&gt; at-rule, as shown in the following code snippet:&lt;/p&gt;
&lt;pre class=&quot;language-css hljs&quot;&gt;@property --text-danger {
  syntax: &quot;&amp;lt;color&amp;gt;&quot;;
  inherits: true;
  initial-value: #ff9500;
}

body { 
  --text-danger: 16px;
  color: var(--text-danger); 
} 
&lt;/pre&gt;
&lt;p&gt;Now, the browser renders the expected text color even if we assign an invalid value within the &lt;code&gt;body&lt;/code&gt; selector.&lt;/p&gt;
&lt;h3 id=&quot;creatingscopedcssvariables&quot;&gt;&lt;strong&gt;Creating scoped CSS variables&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;As discussed in previous examples, it’s possible to create global CSS variables using either &lt;code&gt;:root&lt;/code&gt; or &lt;code&gt;@property&lt;/code&gt; at-rule. Also, creating local variables is possible by defining variables inside child element selectors. For example, a variable defined inside &lt;code&gt;header&lt;/code&gt; won’t be exposed to &lt;code&gt;body&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, if you define a variable inside a specific &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag, it gets exposed to all elements that match the particular selector. What if you need to create a scoped variable that is only available for a targeted HTML segment?&lt;/p&gt;
&lt;p&gt;By default, browsers won’t scope style tags even if we wrap them with elements like &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; for creating scoped variables. The &lt;code&gt;@scope&lt;/code&gt; at-rule helps us implement scoped CSS variables with scoped style tags, as shown in the following HTML snippet:&lt;/p&gt;
&lt;pre class=&quot;language-css hljs&quot;&gt;&amp;lt;style&amp;gt;
  button {
    padding: 6px 18px;
    border: none;
    border-radius: 4px;
    margin: 12px;
    background-color: var(--accent-color, #4cc2e6);
  }
&amp;lt;/style&amp;gt;

&amp;lt;div&amp;gt;
  &amp;lt;style&amp;gt;
    @scope {
      button {
        --accent-color: #f2ba2c;
      }
    }
  &amp;lt;/style&amp;gt;
  &amp;lt;button&amp;gt;Sample button #1&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;button&amp;gt;Sample button #2&amp;lt;/button&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Here, the second style tag becomes scoped for the wrapped &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element because of the &lt;code&gt;@scope&lt;/code&gt; at-rule. So, the &lt;code&gt;button&lt;/code&gt; selector in the second style tag selects only buttons inside the parent &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element. As a result, &lt;code&gt;--accent-color&lt;/code&gt; is only available for the first button.&lt;/p&gt;
&lt;p&gt;The first button gets the &lt;code&gt;#f2ba2c&lt;/code&gt; color for the background since the scoped style tag’s &lt;code&gt;button&lt;/code&gt; selector sets the &lt;code&gt;--accent-color&lt;/code&gt; variable. The second button gets the &lt;code&gt;#4cc2e6&lt;/code&gt; fallback background color since the &lt;code&gt;--accent-color&lt;/code&gt; scoped variable is not available in the global scope:&lt;/p&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2020/02/img3-Two-sample-buttons-styled-scoped-variable-fallback-value.png&quot; alt=&quot;Two Sample Html Button Elements Styled In Different Ways With Css: One Using A Scoped Variable, The Other Using A Fallback Value In The Global Css&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;Learn more about the &lt;code&gt;@scope&lt;/code&gt; at rule from the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@scope&quot;&gt;official MDN documentation&lt;/a&gt;. &lt;code&gt;@scope&lt;/code&gt; is still an experimental feature, so you can use the minimal &lt;a href=&quot;https://blog.logrocket.com/simplifying-inline-css-scoping-css-scope-inline/&quot;&gt;&lt;code&gt;css-scope-inline&lt;/code&gt; library&lt;/a&gt; to create scoped CSS variables in production.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;B&lt;/strong&gt;est practices for structuring CSS variables in projects&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Variables should be grouped logically as follows:&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;
&lt;pre&gt;:root {
  /* Colors */
  --primary-color: #3498db;
  --secondary-color: #2ecc71;

  /* Typography */
  --font-size-base: 16px;
  --font-weight-bold: 700;
}&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Fallback values should be used to ensure compatibility:&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;
&lt;pre class=&quot;language-css hljs&quot;&gt;color: var(--text-color, black);&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If &lt;code&gt;--text-color&lt;/code&gt; is not defined, &lt;code&gt;black&lt;/code&gt; will be used as a default.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use meaningful names (avoid &lt;code&gt;--color1&lt;/code&gt;, &lt;code&gt;--sizeA&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;project1buildingbuttonvariations&quot;&gt;Project 1: Building button variations&lt;/h2&gt;
&lt;p&gt;In CSS frameworks such as &lt;a href=&quot;https://blog.logrocket.com/bootstrap-adoption-guide/&quot;&gt;Bootstrap&lt;/a&gt;, variables make sharing a base design across elements much easier. Take the &lt;code&gt;.bg-danger&lt;/code&gt; class, which turns an element’s background color to red and its own color to white. In this first project, you’ll build something similar.&lt;/p&gt;
&lt;p&gt;Get started with the first project by adding the following HTML document to a new &lt;code&gt;.html&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class=&quot;language-html hljs&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot; /&amp;gt;
    &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&amp;gt;
    &amp;lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&amp;gt;
    &amp;lt;title&amp;gt;CSS Variables - Button Variations&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;section&amp;gt;
      &amp;lt;div class=&quot;container&quot;&amp;gt;
        &amp;lt;h1 class=&quot;title&quot;&amp;gt;CSS Color Variations&amp;lt;/h1&amp;gt;
        &amp;lt;div class=&quot;btn-group&quot;&amp;gt;
          &amp;lt;button class=&quot;btn btn-primary&quot;&amp;gt;Primary&amp;lt;/button&amp;gt;
          &amp;lt;button class=&quot;btn btn-secondary&quot;&amp;gt;Secondary&amp;lt;/button&amp;gt;
          &amp;lt;button class=&quot;btn btn-link&quot;&amp;gt;Link&amp;lt;/button&amp;gt;
          &amp;lt;button class=&quot;btn btn-success&quot;&amp;gt;Success&amp;lt;/button&amp;gt;
          &amp;lt;button class=&quot;btn btn-error&quot;&amp;gt;Error&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/section&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The structure of this markup is pretty standard. Notice how each button element has two classes: the &lt;code&gt;btn&lt;/code&gt; class and a second class. We’ll refer to the &lt;code&gt;btn&lt;/code&gt; class, in this case, as the base class and the second class as the modifier class that consists of the &lt;code&gt;btn-&lt;/code&gt; prefix.&lt;/p&gt;
&lt;p&gt;Next, add the following style tag content to the above&lt;/p&gt;
&lt;pre class=&quot;language-css hljs&quot;&gt;&amp;lt;style&amp;gt;
  * {
    border: 0;
  }

  :root {
    --primary: #0076c6;
    --secondary: #333333;
    --error: #ce0606;
    --success: #009070;
    --white: #ffffff;
  }

  /* base style for all buttons */
  .btn {
    padding: 1rem 1.5rem;
    background: transparent;
    font-weight: 700;
    border-radius: 0.5rem;
    cursor: pointer;
  }

  /* variations */
  .btn-primary {
    background: var(--primary);
    color: var(--white);
  }

  .btn-secondary {
    background: var(--secondary);
    color: var(--white);
  }

  .btn-success {
    background: var(--success);
    color: var(--white);
  }

  .btn-error {
    background: var(--error);
    color: var(--white);
  }

  .btn-link {
    color: var(--primary);
  }
&amp;lt;/style&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;btn&lt;/code&gt; class contains the base styles for all the buttons and the variations come in where the individual modifier classes get access to their colors, which are defined at the &lt;code&gt;:root&lt;/code&gt; level of the document. This is extremely helpful not just for buttons, but for other elements in your HTML that can inherit the custom properties.&lt;/p&gt;
&lt;p&gt;For example, if tomorrow you decide the value for the &lt;code&gt;--error&lt;/code&gt; custom property is too dull for a red color, you can easily switch it up to &lt;code&gt;#f00000&lt;/code&gt;. Once you do so, voila — all elements using this custom property are updated with a single change!&lt;/p&gt;
&lt;p&gt;Here’s what your first project should look like:&lt;/p&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2020/02/img4-CSS-color-variations-project-preview.png&quot; alt=&quot;Preview Of Project Using Css To Build Button Color Variations&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;You can access the complete source code and see a live preview of this project from &lt;a href=&quot;https://codepen.io/shalithasuranga/pen/dyrKEyd&quot;&gt;this CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;project2settingcssvariablesdynamicallywithjavascript&quot;&gt;Project 2: Setting CSS variables dynamically with JavaScript&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;document.documentElement.style.setProperty&lt;/code&gt; method is used to set CSS variables dynamically with JavaScript, updating CSS variables in real-time without modifying the style sheet:&lt;/p&gt;
&lt;pre class=&quot;language-css hljs&quot;&gt;document.documentElement.style.setProperty(&#39;--primary-color&#39;, &#39;green&#39;)
&lt;/pre&gt;
&lt;p&gt;This will update the &lt;code&gt;--primary-color&lt;/code&gt; variable, affecting all the elements that use it.&lt;/p&gt;
&lt;p&gt;To see the practical use case for this, we’ll build the second project “a light-and-dark theme”. The light theme will take effect by default unless the user already has their system set to a dark theme. On the page, we’ll create a toggle button that allows the user to &lt;a href=&quot;https://blog.logrocket.com/create-better-themes-with-css-variables&quot;&gt;switch between themes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, add the following HTML structure into a new &lt;code&gt;.html&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class=&quot;language-html hljs&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot; /&amp;gt;
    &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&amp;gt;
    &amp;lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&amp;gt;
    &amp;lt;title&amp;gt;CSS Variables - Theming&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;header&amp;gt;
      &amp;lt;div class=&quot;container&quot;&amp;gt;
        &amp;lt;div class=&quot;container-inner&quot;&amp;gt;
          &amp;lt;a href=&quot;#&quot; class=&quot;logo&quot;&amp;gt;My Blog&amp;lt;/a&amp;gt;
          &amp;lt;div class=&quot;toggle-button-container&quot;&amp;gt;
            &amp;lt;label class=&quot;toggle-button-label&quot; for=&quot;checkbox&quot;&amp;gt;
              &amp;lt;input type=&quot;checkbox&quot; class=&quot;toggle-button&quot; id=&quot;checkbox&quot; /&amp;gt;
              &amp;lt;div class=&quot;toggle-rounded&quot;&amp;gt;&amp;lt;/div&amp;gt;
            &amp;lt;/label&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/header&amp;gt;
    &amp;lt;article&amp;gt;
      &amp;lt;div class=&quot;container&quot;&amp;gt;
        &amp;lt;h1 class=&quot;title&quot;&amp;gt;Title of article&amp;lt;/h1&amp;gt;
        &amp;lt;div class=&quot;info&quot;&amp;gt;
          &amp;lt;div class=&quot;tags&quot;&amp;gt;
            &amp;lt;span&amp;gt;#html&amp;lt;/span&amp;gt;
            &amp;lt;span&amp;gt;#css&amp;lt;/span&amp;gt;
            &amp;lt;span&amp;gt;#js&amp;lt;/span&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;span&amp;gt;1st February, 2024&amp;lt;/span&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;content&quot;&amp;gt;
          &amp;lt;p&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit.
            &amp;lt;a href=&quot;#&quot;&amp;gt;Link to another url&amp;lt;/a&amp;gt; Eius, saepe optio! Quas
            repellendus consequuntur fuga at. Consequatur sit deleniti, ullam
            qui facere iure, earum corrupti vitae laboriosam iusto eius magni,
            adipisci culpa recusandae quis tenetur accusantium eum quae harum
            autem inventore architecto perspiciatis maiores? Culpa, officiis
            totam! Rerum alias corporis cupiditate praesentium magni illo, optio
            nobis fugit.
          &amp;lt;/p&amp;gt;
          &amp;lt;p&amp;gt;
            Eveniet veniam ipsa similique atque placeat dignissimos
            quos reiciendis. Odit, eveniet provident fugiat voluptatibus esse
            culpa ullam beatae hic maxime suscipit, eum reprehenderit ipsam.
            Illo facilis doloremque ducimus reprehenderit consequuntur
            cupiditate atque harum quaerat autem amet, et rerum sequi eum cumque
            maiores dolores.
          &amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/article&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This snippet represents a simple blog page with a header, a theme toggle button, and a dummy article.&lt;/p&gt;
&lt;p&gt;Next, add the following style tag to add CSS definitions for the above HTML structure:&lt;/p&gt;
&lt;pre class=&quot;language-css hljs&quot;&gt;&amp;lt;style&amp;gt;
  :root {
    --primary-color: #0d0b52;
    --secondary-color: #3458b9;
    --font-color: #424242;
    --bg-color: #ffffff;
    --heading-color: #292922;
    --white-color: #ffffff;
  }

  /* Layout */
  * {
    padding: 0;
    border: 0;
    margin: 0;
    box-sizing: border-box;
  }

  html {
    font-size: 14px;
    font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Oxygen,
      Ubuntu, Cantarell, &#39;Open Sans&#39;, &#39;Helvetica Neue&#39;, sans-serif;
  }

  body {
    background: var(--bg-color);
    color: var(--font-color);
  }

  .container {
    width: 100%;
    max-width: 768px;
    margin: auto;
    padding: 0 1rem;
  }

  .container-inner {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  /* Using custom properties */
  a {
    text-decoration: none;
    color: var(--primary-color);
  }

  p {
    font-size: 1.2rem;
    margin: 1rem 0;
    line-height: 1.5;
  }

  header {
    padding: 1rem 0;
    border-bottom: 0.5px solid var(--primary-color);
  }

  .logo {
    color: var(--font-color);
    font-size: 2rem;
    font-weight: 800;
  }

  .toggle-button-container {
    display: flex;
    align-items: center;
  }

  .toggle-button-container em {
    margin-left: 10px;
    font-size: 1rem;
  }

  .toggle-button-label {
    display: inline-block;
    height: 34px;
    position: relative;
    width: 60px;
  }

  .toggle-button-label .toggle-button {
    display: none;
  }

  .toggle-rounded {
    background-color: #ccc;
    bottom: 0;
    cursor: pointer;
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
    transition: 0.4s;
  }

  .toggle-rounded:before {
    background-color: #fff;
    bottom: 4px;
    content: &#39;&#39;;
    height: 26px;
    left: 4px;
    position: absolute;
    transition: 0.4s;
    width: 26px;
  }

  input:checked+.toggle-rounded {
    background-color: #9cafeb;
  }

  input:checked+.toggle-rounded:before {
    transform: translateX(26px);
  }

  article {
    margin-top: 2rem;
  }

  .title {
    font-size: 3rem;
    color: var(--font-color);
  }

  .info {
    display: flex;
    align-items: center;
    margin: 1rem 0;
  }

  .tags {
    margin-right: 1rem;
  }

  .tags span {
    background: var(--primary-color);
    color: var(--white-color);
    padding: 0.2rem 0.5rem;
    border-radius: 0.2rem;
  }
&amp;lt;/style&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This snippet can be divided into two main sections: the layout section and the custom properties section. The latter is what you should focus on. As you can see, the variables are applied above in the link, paragraph, heading, and article elements.&lt;/p&gt;
&lt;p&gt;The idea behind this approach is that, by default, the website uses a light theme, and when the box is checked, the values for the light theme get inverted to a dark variant.&lt;/p&gt;
&lt;p&gt;Since you can’t trigger these sitewide changes via CSS, JavaScript is critical here. In the next section, we’ll hook up the JavaScript code necessary to toggle between the light and dark themes.&lt;/p&gt;
&lt;p&gt;Alternatively, you could trigger a change automatically via CSS using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme&quot;&gt;the &lt;code&gt;prefers-color-scheme&lt;/code&gt; media query&lt;/a&gt; to detect whether the user requested a light or dark theme. In other words, you can directly update the website to use the dark variants of the light theme.&lt;/p&gt;
&lt;p&gt;Add the following snippet to all the CSS code you just wrote:&lt;/p&gt;
&lt;pre class=&quot;language-css hljs&quot;&gt;@media (prefers-color-scheme: dark) {
 :root {
  --primary-color: #325b97;
  --secondary-color: #9cafeb;
  --font-color: #e1e1ff;
  --bg-color: #000013;
  --heading-color: #818cab;
 }
}
&lt;/pre&gt;
&lt;p&gt;We’re listening to the user’s device settings and adjusting the theme to dark if they’re already using a dark theme.&lt;/p&gt;
&lt;p&gt;Finally, add the following script segment to the above HTML document:&lt;/p&gt;
&lt;pre class=&quot;language-css hljs&quot;&gt;&amp;lt;script&amp;gt;
  const toggleButton = document.querySelector(&#39;.toggle-button&#39;);
  toggleButton.addEventListener(&#39;change&#39;, toggleTheme, false);
  const theme = {
    dark: {
      &#39;--primary-color&#39;: &#39;#325b97&#39;,
      &#39;--secondary-color&#39;: &#39;#9cafeb&#39;,
      &#39;--font-color&#39;: &#39;#e1e1ff&#39;,
      &#39;--bg-color&#39;: &#39;#000013&#39;,
      &#39;--heading-color&#39;: &#39;#818cab&#39;
    },
    light: {
      &#39;--primary-color&#39;: &#39;#0d0b52&#39;,
      &#39;--secondary-color&#39;: &#39;#3458b9&#39;,
      &#39;--font-color&#39;: &#39;#424242&#39;,
      &#39;--bg-color&#39;: &#39;#ffffff&#39;,
      &#39;--heading-color&#39;: &#39;#292922&#39;
    }
  };

  function toggleTheme(e) {
    if (e.target.checked) {
      useTheme(&#39;dark&#39;);
      localStorage.setItem(&#39;theme&#39;, &#39;dark&#39;);
    } else {
      useTheme(&#39;light&#39;);
      localStorage.setItem(&#39;theme&#39;, &#39;light&#39;);
    }
  }

  function useTheme(themeChoice) {
    document.documentElement.style.setProperty(
      &#39;--primary-color&#39;,
      theme\[themeChoice\][&#39;--primary-color&#39;]
    );
    document.documentElement.style.setProperty(
      &#39;--secondary-color&#39;,
      theme\[themeChoice\][&#39;--secondary-color&#39;]
    );
    document.documentElement.style.setProperty(
      &#39;--font-color&#39;,
      theme\[themeChoice\][&#39;--font-color&#39;]
    );
    document.documentElement.style.setProperty(
      &#39;--bg-color&#39;,
      theme\[themeChoice\][&#39;--bg-color&#39;]
    );
    document.documentElement.style.setProperty(
      &#39;--heading-color&#39;,
      theme\[themeChoice\][&#39;--heading-color&#39;]
    );
  }

  const preferredTheme = localStorage.getItem(&#39;theme&#39;);
  if (preferredTheme === &#39;dark&#39;) {
    useTheme(&#39;dark&#39;);
    toggleButton.checked = true;
  } else {
    useTheme(&#39;light&#39;);
    toggleButton.checked = false;
  }
&amp;lt;/script&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Now let’s break down the current state of the website.&lt;/p&gt;
&lt;p&gt;A user visits the page. The media query &lt;code&gt;prefers-color-scheme&lt;/code&gt; determines whether the user is using a light or dark theme. If it’s a dark theme, the website updates to use the dark variants of the custom properties.&lt;/p&gt;
&lt;p&gt;Let’s say a user isn’t using a dark theme or their OS doesn’t support a dark theme. The browser would default to the light theme, allowing the user to control that behavior by checking or unchecking the box.&lt;/p&gt;
&lt;p&gt;Depending on whether the box is checked or unchecked, the &lt;code&gt;useTheme()&lt;/code&gt; function is called to pass in the theme variant and save the user’s current selection to local storage. You’ll see why it’s saved in a minute.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;useTheme()&lt;/code&gt; function is where all the magic happens. Based on the theme variant passed, a lookup is performed on the &lt;code&gt;theme&lt;/code&gt; constant and used to switch between light and dark modes.&lt;/p&gt;
&lt;p&gt;The last piece of the puzzle is persisting the current theme, which is achieved by reading the last preferred theme from local storage and setting it automatically when the user revisits the website.&lt;/p&gt;
&lt;p&gt;Here’s what your second project should look like:&lt;/p&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2020/02/img5-CSS-light-dark-theme-switcher-project.gif&quot; alt=&quot;Demo Css Project Shown Toggling Between Light And Dark Mode&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;You may be thinking of a million other ways to achieve this. Feel free to go through the code and make as many changes as you see fit. You can access the complete source code and see a live preview of this project from &lt;a href=&quot;https://codepen.io/shalithasuranga/pen/vYPaYWN&quot;&gt;this CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;project3handlingresponsivedesignfeatures&quot;&gt;Project 3: Handling responsive design features&lt;/h2&gt;
&lt;p&gt;In our third project, we’ll build a responsive login form that loads some adjustment values from CSS variables. Like the media query feature dynamically switches standard CSS properties, it also switches custom properties, so we can assign different values for variables within different responsive breakpoints.&lt;/p&gt;
&lt;p&gt;First, add the following content into a new HTML document:&lt;/p&gt;
&lt;pre class=&quot;language-html hljs&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;

&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&quot;UTF-8&quot; /&amp;gt;
  &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&amp;gt;
  &amp;lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&amp;gt;
  &amp;lt;title&amp;gt;Responsive design with CSS variables&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
  &amp;lt;div class=&quot;form-box&quot;&amp;gt;
    &amp;lt;input type=&quot;text&quot; value=&quot;Username&quot; /&amp;gt;
    &amp;lt;input type=&quot;password&quot; value=&quot;Password&quot; /&amp;gt;
    &amp;lt;button&amp;gt;Login&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Here we created a simple login form that consists of two input elements and a button. Add the following style tag into this HTML document to style it properly:&lt;/p&gt;
&lt;pre class=&quot;language-css html&quot;&gt;&amp;lt;style&amp;gt;
  /* --- desktops and common --- */
  :root {
    --form-box-padding: 8px;
    --form-box-flex-gap: 8px;
    --form-input-font-size: 12px;
  }

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  .form-box {
    display: flex;
    justify-content: flex-end;
    gap: var(--form-box-flex-gap);
    padding: var(--form-box-padding);
    background-color: #333;
    text-align: center;
  }

  .form-box input,
  .form-box button {
    font-size: var(--form-input-font-size);
    padding: 8px;
    margin-right: 4px;
  }

  .form-box input {
    outline: none;
    border: none;
  }

  .form-box button {
    border: none;
    background-color: #edae39;
  }
&amp;lt;/style&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The above CSS snippet styles the login form only for desktop devices, so it won’t adjust content responsively when you resize the browser, as shown in the following preview:&lt;/p&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2020/02/img6-Non-responsive-webpage-desktop-only-styles.gif&quot; alt=&quot;Example Of Webpage Without Responsive Elements Displaying Desktop Only Styles Even As Viewport Shrinks&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;We can simply make this page responsive by writing some styling adjustments — i.e., changing &lt;code&gt;flex-direction&lt;/code&gt; — inside media query breakpoints. For &lt;code&gt;padding&lt;/code&gt; or &lt;code&gt;font-size&lt;/code&gt;-like values-based properties, we can use CSS variables instead of writing CSS properties repetitively to improve the readability and maintainability of CSS definitions.&lt;/p&gt;
&lt;p&gt;Look at the previous CSS snippet: you will notice three CSS variables. Change those variables with media query blocks and complete the responsive screen handling code using the following code snippet:&lt;/p&gt;
&lt;pre class=&quot;language-css hljs&quot;&gt;/* --- tablets --- */
@media screen and (min-width: 601px) and (max-width: 900px) {
  :root {
    --form-box-padding: 20px 12px 20px 12px;
    --form-box-flex-gap: 12px;
    --form-input-font-size: 14px;
  }

  .form-box input,
  .form-box button {
    display: block;
    width: 100%;
  }
}

/* --- mobiles --- */
@media screen and (max-width: 600px) {
  :root {
    --form-box-padding: 24px;
    --form-box-flex-gap: 12px;
    --form-input-font-size: 20px;
  }

  .form-box {
    flex-direction: column;
  }

  .form-box input,
  .form-box button {
    display: block;
  }
}
&lt;/pre&gt;
&lt;p&gt;The above code snippet adjusts the layout for mobile and tablet screens with some standard CSS properties and custom properties. For example, it uses a different &lt;code&gt;flex-direction&lt;/code&gt; mode, &lt;code&gt;display&lt;/code&gt; mode for several elements, and the following custom property values for mobile screens:&lt;/p&gt;
&lt;pre class=&quot;language-css hljs&quot;&gt;--form-box-padding: 24px;
--form-box-flex-gap: 12px;
--form-input-font-size: 20px;
&lt;/pre&gt;
&lt;p&gt;Test this project by resizing the browser window:&lt;/p&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2020/02/img7-Responsive-webpage-styles-adjust-screen-size.gif&quot; alt=&quot;Example Of Project With Responsive Webpage Styles Adjusting As Viewport Shrinks&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;Try adjusting these CSS variables and creating new ones to improve this login screen further. You can use the same strategy to use CSS variables with &lt;a href=&quot;https://blog.logrocket.com/css-container-queries-guide/&quot;&gt;container queries&lt;/a&gt;. Check the complete source code and see a live preview from &lt;a href=&quot;https://codepen.io/shalithasuranga/pen/QWoBaWr&quot;&gt;this CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;project4generatingjavascriptfreedynamicelements&quot;&gt;Project 4: Generating JavaScript-free dynamic elements&lt;/h2&gt;
&lt;p&gt;Imagine that you need to create a colorful native checkbox list with multiple accent colors. Using different values for &lt;code&gt;accent-color&lt;/code&gt; via the inline style attribute is undoubtedly time-consuming since you have to define colors yourself. Hence, you may create this checkbox list dynamically with JavaScript.&lt;/p&gt;
&lt;p&gt;However, what if this list gets rendered in a JavaScript-disabled environment, like inside a Markdown document? We can use CSS variables to generate JavaScript-free dynamic elements.&lt;/p&gt;
&lt;p&gt;Let’s create a colorful native checkbox list with CSS variables. Create a new HTML document and add the following style tag:&lt;/p&gt;
&lt;pre class=&quot;language-html hljs&quot;&gt;input[type=&quot;checkbox&quot;] {
  width: 80px;
  height: 80px;
  --hue: calc(var(--i) * 50 + 100);
  accent-color: hsl(var(--hue), 50%, 50%);
}
&lt;/pre&gt;
&lt;p&gt;Here, we calculate a dynamic color for the &lt;code&gt;accent-color&lt;/code&gt; property using the &lt;code&gt;hsl&lt;/code&gt; color function.&lt;/p&gt;
&lt;p&gt;For the hue input parameter, we use the &lt;code&gt;--hue&lt;/code&gt; variable which gets a dynamically calculated value using the &lt;code&gt;--i&lt;/code&gt; variable. This implementation lets us generate multiple colors by using different numbers for &lt;code&gt;--i&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Use the following HTML snippet to get multiple colorful native checkboxes:&lt;/p&gt;
&lt;pre class=&quot;language-html hljs&quot;&gt;&amp;lt;div style=&quot;text-align: center&quot;&amp;gt;
  &amp;lt;input type=&quot;checkbox&quot; checked style=&quot;--i: 0&quot;/&amp;gt;
  &amp;lt;input type=&quot;checkbox&quot; checked style=&quot;--i: 1&quot;/&amp;gt;
  &amp;lt;input type=&quot;checkbox&quot; checked style=&quot;--i: 2&quot;/&amp;gt;
  &amp;lt;input type=&quot;checkbox&quot; checked style=&quot;--i: 3&quot;/&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Here we set an index manually for the &lt;code&gt;--i&lt;/code&gt; variable via inline style attributes to generate a dynamic accent color. This approach is more productive than setting colors yourself for each checkbox element. Look at the following preview of the fourth project:&lt;/p&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2020/02/img8-Colorful-checkbox-styles-CSS-variables.png&quot; alt=&quot;Colorful Checkbox Styles Using Css Variables&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;You can browse the complete source code and see a live preview from &lt;a href=&quot;https://codepen.io/shalithasuranga/pen/YzgjegB&quot;&gt;this CodePen&lt;/a&gt;. It’s possible to use the same strategy to generate JavaScript-free dynamic elements by adjusting any standard CSS property value, i.e., using &lt;code&gt;--i&lt;/code&gt; to set dynamic image filter configurations.&lt;/p&gt;
&lt;h2 id=&quot;cssvariablesvssassvariables&quot;&gt;CSS variables vs. SASS variables&lt;/h2&gt;
&lt;p style=&quot;margin-bottom: 15px;&quot;&gt;The following table will help you know when to use CSS variables and preprocessor variables:&lt;/p&gt;
&lt;table class=&quot;tg&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tg-k7lw&quot;&gt;Feature&lt;/th&gt;
&lt;th class=&quot;tg-k7lw&quot;&gt;CSS variables&lt;/th&gt;
&lt;th class=&quot;tg-g7sd&quot;&gt;Preprocessor variables&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-lboi&quot;&gt;Scope&lt;/td&gt;
&lt;td class=&quot;tg-lboi&quot;&gt;Can be dynamically modified at runtime&lt;/td&gt;
&lt;td class=&quot;tg-lboi&quot;&gt;Compiles to static values before rendering&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-lboi&quot;&gt;Use cases&lt;/td&gt;
&lt;td class=&quot;tg-lboi&quot;&gt;Great for dynamic theming, user-controlled styles, or runtime updates&lt;/td&gt;
&lt;td class=&quot;tg-lboi&quot;&gt;Great for working with a large-scale project that benefits from functions, mixins, and nested styles&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-lboi&quot;&gt;Usage&lt;/td&gt;
&lt;td class=&quot;tg-lboi&quot;&gt;Works directly in browsers&lt;/td&gt;
&lt;td class=&quot;tg-lboi&quot;&gt;Requires a pre-processor like Less or SASS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-lboi&quot;&gt;Performance&lt;/td&gt;
&lt;td class=&quot;tg-lboi&quot;&gt;Results in slightly higher runtime cost due to look up but mostly negligible in most cases&lt;/td&gt;
&lt;td class=&quot;tg-lboi&quot;&gt;No runtime cost, but may impact load time due to larger stylesheets.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Runtime update&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Can be modified easily with JavaScript&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Impossible to update with JavaScript because it requires recompilation&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;advancedtechniquesusingcssvariablesinanimations&quot;&gt;Advanced techniques: Using CSS variables in animations&lt;/h2&gt;
&lt;p&gt;CSS variables can be used with &lt;code&gt;@keyframes&lt;/code&gt; to make animations more dynamic and reusable without direct changes to the styles. However, they must be applied outside the&lt;code&gt;@keyframes&lt;/code&gt; since variables are not recognized in keyframes.&lt;/p&gt;
&lt;h3 id=&quot;animatingbuttoncolordynamically&quot;&gt;&lt;strong&gt;Animating&lt;/strong&gt; &lt;strong&gt;b&lt;/strong&gt;utton &lt;strong&gt;c&lt;/strong&gt;olor &lt;strong&gt;d&lt;/strong&gt;ynamically&lt;/h3&gt;
&lt;pre class=&quot;language-css hljs&quot;&gt;:root {
  --btn-bg: #3498db; /* Default background color */
}

button {
  background-color: var(--btn-bg);
  color: white;
  padding: 12px 24px;
  font-size: 16px;
  border: none;
  cursor: pointer;
  animation: pulse 1.5s infinite alternate;
}

@keyframes pulse {
  from {
    background-color: var(--btn-bg);
  }
  to {
    background-color: lighten(var(--btn-bg), 20%);
  }
}
&lt;/pre&gt;
&lt;p&gt;The background color changes dynamically based on &lt;code&gt;--btn-bg&lt;/code&gt;. Adjusting &lt;code&gt;--btn-bg&lt;/code&gt; in &lt;code&gt;:root&lt;/code&gt; instantly updates the animation color!&lt;/p&gt;
&lt;p&gt;Now, we can use JavaScript to update the CSS variable in real-time to animate the button’s color on hover or user interaction&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;document.querySelector(&quot;button&quot;).addEventListener(&quot;mouseover&quot;, () =&amp;gt; {
  document.documentElement.style.setProperty(&quot;--btn-bg&quot;, &quot;#e74c3c&quot;);
});

document.querySelector(&quot;button&quot;).addEventListener(&quot;mouseout&quot;, () =&amp;gt; {
  document.documentElement.style.setProperty(&quot;--btn-bg&quot;, &quot;#3498db&quot;);
});
&lt;/pre&gt;
&lt;p&gt;The button smoothly transitions between colors when hovered!&lt;/p&gt;
&lt;h2 id=&quot;browsersupportforthecssvariablesfeature&quot;&gt;Browser support for the CSS variables feature&lt;/h2&gt;
&lt;p&gt;According to the browser compatibility table of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/--*#browser_compatibility&quot;&gt;official MDN documentation&lt;/a&gt;, the CSS variables feature is widely available in all popular browser versions released after April 2017. More specifically, browsers released this feature with the following versions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Google Chrome 49 (Released 2 March 2016)&lt;/li&gt;
&lt;li&gt;Microsoft Edge 15 (Released 5 April 2017)&lt;/li&gt;
&lt;li&gt;Mozilla Firefox 31 (Released 22 July 2014)&lt;/li&gt;
&lt;li&gt;Apple Safari 9.1 (Released 21 March 2016)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;According to these statistics, using custom properties in production apps is possible since most users nowadays use up-to-date web browsers. However, it would be prudent to analyze your audience’s browser versions before using any new native CSS feature.&lt;/p&gt;
&lt;h2 id=&quot;commonmistakestroubleshootingcssvariables&quot;&gt;Common mistakes &amp;amp; troubleshooting CSS variables&lt;/h2&gt;
&lt;p&gt;Here are some common mistakes with CSS variables and how to fix them:&lt;/p&gt;
&lt;h3 id=&quot;missingfallbacksforolderbrowsers&quot;&gt;&lt;strong&gt;Missing&lt;/strong&gt; &lt;strong&gt;f&lt;/strong&gt;allbacks for &lt;strong&gt;o&lt;/strong&gt;lder &lt;strong&gt;b&lt;/strong&gt;rowsers&lt;/h3&gt;
&lt;p&gt;Some older browsers, like IE11, do not support CSS variables, which can cause styling issues if a fallback is not provided. A common mistake is using &lt;code&gt;var(--color-primary)&lt;/code&gt; without specifying an alternative. To prevent this, always include a fallback value inside &lt;code&gt;var()&lt;/code&gt;, such as &lt;code&gt;var(--color-primary, #3498db)&lt;/code&gt;, ensuring that a default color is applied if the variable is unavailable.&lt;/p&gt;
&lt;h3 id=&quot;variableswithmediaqueries&quot;&gt;&lt;strong&gt;Variables with media queries&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;CSS variables cannot be used directly in media queries, as they are not evaluated in the same way as standard values. For example, defining a variable like &lt;code&gt;--breakpoint-mobile: 600px&lt;/code&gt; in &lt;code&gt;:root&lt;/code&gt; and attempting to use it inside &lt;code&gt;@media (max-width: var(--breakpoint-mobile))&lt;/code&gt; will not work. Instead, media queries require fixed values, so it’s best to use predefined breakpoints directly, such as &lt;code&gt;@media (max-width: 600px)&lt;/code&gt;, to ensure proper functionality.&lt;/p&gt;
&lt;h3 id=&quot;variablesdontworkincertainpropertiesegdisplayzindex&quot;&gt;&lt;strong&gt;Variables&lt;/strong&gt; &lt;strong&gt;d&lt;/strong&gt;on’t &lt;strong&gt;w&lt;/strong&gt;ork in &lt;strong&gt;c&lt;/strong&gt;ertain &lt;strong&gt;p&lt;/strong&gt;roperties (e.g.,&lt;code&gt;display&lt;/code&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;code&gt;z-index&lt;/code&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;CSS variables don’t work in all properties, especially those that require integer values like &lt;code&gt;z-index&lt;/code&gt; or &lt;code&gt;display&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-css hljs&quot;&gt;:root {
  --display-mode: flex;
}

.container {
  display: var(--display-mode); /* Won&#39;t work */
}
&lt;/pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;By building these simple projects, you can learn how to use CSS variables like a pro. You can use the &lt;code&gt;style&lt;/code&gt; attribute to apply CSS variables directly to an HTML element like this &lt;code&gt;&amp;lt;p style=&quot;color: var(--primary-color);&quot;&amp;gt;Hello, world!&amp;lt;/p&amp;gt;&lt;/code&gt;. Also, you can debug CSS variable issues using the browser DevTools. There’s certainly more to them than I explained, so feel free to mess around with the code to explore further.&lt;/p&gt;
&lt;p&gt;CSS variables help simplify the way you build websites and complex animations while still allowing you to write reusable and elegant code. Using CSS variables is also possible with &lt;a href=&quot;https://blog.logrocket.com/using-css-variables-react-native/&quot;&gt;React Native projects&lt;/a&gt; that run on the React Native Web renderer.&lt;/p&gt;
&lt;h2 id=&quot;frequentlyaskedquestions&quot;&gt;Frequently asked questions&lt;/h2&gt;
&lt;h3 id=&quot;howdoiusevariablesincss&quot;&gt;&lt;strong&gt;How do I use variables in CSS?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;You can use variables in your CSS using the &lt;code&gt;var()&lt;/code&gt; function to apply declared variables in your styles.&lt;/p&gt;
&lt;h3 id=&quot;whenshouldiusecssvariables&quot;&gt;&lt;strong&gt;When should I use CSS variables?&lt;/strong&gt;&lt;/h3&gt;
&lt;div&gt;&lt;span class=&quot; author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qoxwoz77zn2z80zat6z81zz122zz84znigz87zmz76zz78zz74zr7z78zz78zv6i5331&quot;&gt;Use CSS variables when you need global or reusable values like colors, font sizes, spacings, or themes. &lt;/span&gt;&lt;span class=&quot; author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qoxwoz77zn2z80zat6z81zz122zz84znigz87zmz76zz78zz74zr7z78zz78zv6i5331&quot;&gt;They are also useful when you need to avoid hard-coded repetition. In large projects, changing a value like a primary color in multiple places can be tedious. Using CSS variables makes the codebase maintainable.&lt;/span&gt;&lt;/div&gt;
&lt;h3 id=&quot;howdoyouinitializeavariableincss&quot;&gt;&lt;strong&gt;How do you initialize a variable in CSS?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;CSS variables can be declared using either the &lt;code&gt;--&lt;/code&gt; prefix or the &lt;code&gt;@property&lt;/code&gt; at-rule.&lt;/p&gt;

&lt;/div&gt;


&lt;/div&gt;
            &lt;style&gt;
    .share-icon.share-twitter span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-twitter.svg&quot;);
    }

    .share-icon.share-reddit span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-reddit.svg&quot;);
    }

    .share-icon.share-linkedin span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-linkedin.svg&quot;);
    }

    .share-icon.share-facebook span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-facebook.svg&quot;);
    }
&lt;/style&gt;

&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon sd-sharing&quot;&gt;&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;&lt;div class=&quot;sd-content&quot;&gt;&lt;ul&gt;&lt;li class=&quot;share-twitter&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-twitter-14833&quot; class=&quot;share-twitter sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/how-to-use-css-variables/?share=twitter&quot; target=&quot;_blank&quot; title=&quot;Click to share on Twitter&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Twitter (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-reddit&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;&quot; class=&quot;share-reddit sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/how-to-use-css-variables/?share=reddit&quot; target=&quot;_blank&quot; title=&quot;Click to share on Reddit&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Reddit (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-linkedin&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-linkedin-14833&quot; class=&quot;share-linkedin sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/how-to-use-css-variables/?share=linkedin&quot; target=&quot;_blank&quot; title=&quot;Click to share on LinkedIn&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on LinkedIn (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-facebook&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-facebook-14833&quot; class=&quot;share-facebook sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/how-to-use-css-variables/?share=facebook&quot; target=&quot;_blank&quot; title=&quot;Click to share on Facebook&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Facebook (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-end&quot;&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;            &lt;ul id=&quot;post-tags&quot;&gt;
            &lt;li&gt;
        &lt;a rel=&quot;tag&quot; href=&quot;https://blog.logrocket.com/tag/css/&quot;&gt;#css&lt;/a&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
            &lt;div class=&quot;post-popup&quot; data-popup-name=&quot;dev-cab&quot;&gt;
    &lt;i data-popup-dismiss=&quot;&quot; class=&quot;fa-solid fa-xmark post-popup__exit&quot;&gt;&lt;/i&gt;
    &lt;div class=&quot;post-popup__page active&quot;&gt;
        &lt;p class=&quot;post-popup__title&quot;&gt;Would you be interested in joining LogRocket&#39;s developer community? &lt;/p&gt;
        &lt;div class=&quot;post-popup__buttons&quot;&gt;
            &lt;button data-popup-next=&quot;&quot; class=&quot;lr-button&quot;&gt;Yea&lt;/button&gt;
            &lt;button data-popup-dismiss=&quot;&quot; class=&quot;lr-button&quot;&gt;No Thanks&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;post-popup__page&quot;&gt;
        &lt;p&gt;
            Join LogRocket’s Content Advisory Board. You’ll help inform the type of
            content we create and get access to exclusive meetups, social accreditation,
            and swag.
        &lt;/p&gt;
        &lt;a data-popup-dismiss=&quot;&quot; class=&quot;lr-button&quot; target=&quot;__blank&quot; href=&quot;https://lp.logrocket.com/blg/content-advisory-board-signup&quot;&gt;Sign up now&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
        &lt;/div&gt;
    </description><link>https://blog.logrocket.com/how-to-use-css-variables/</link><guid isPermaLink="false">https://blog.logrocket.com/how-to-use-css-variables/</guid><pubDate>Wed, 19 Mar 2025 16:00:00 GMT</pubDate><author>Idorenyin Obong</author></item><item><title>Will AI take developers’ jobs?</title><description>&lt;aside&gt;
            &lt;div class=&quot;sticky&quot;&gt;
                                
&lt;div class=&quot;toc-container&quot; id=&quot;post-toc&quot;&gt;
            &lt;div class=&quot;toc-header&quot;&gt;
            &lt;span class=&quot;toc-title&quot;&gt;
                Table of contents            &lt;/span&gt;
            &lt;i class=&quot;fa fa-chevron-down toc-collapse&quot;&gt;&lt;/i&gt;
            &lt;i class=&quot;hide fa fa-chevron-up toc-expand&quot;&gt;&lt;/i&gt;
        &lt;/div&gt;
        
&lt;ul data-toc-name=&quot;root&quot; class=&quot;toc&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/will-ai-take-developers-jobs/#rise-ai-software-development&quot;&gt;The rise of AI in software development&lt;/a&gt;
        &lt;ul data-toc-name=&quot;rise-ai-software-development&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/will-ai-take-developers-jobs/#benefits-ai&quot;&gt;The benefits of AI&lt;/a&gt;
        &lt;ul data-toc-name=&quot;benefits-ai&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/will-ai-take-developers-jobs/#future-development-era-ai&quot;&gt;The future of development in the era of AI&lt;/a&gt;
        &lt;ul data-toc-name=&quot;future-development-era-ai&quot; class=&quot;toc-subheading&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/will-ai-take-developers-jobs/#ai-job-displacement-separating-fear-from-reality&quot;&gt;AI job displacement: Separating the fear from the reality&lt;/a&gt;
        &lt;ul data-toc-name=&quot;ai-job-displacement-separating-fear-from-reality&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/will-ai-take-developers-jobs/#ai-case-studies-real-world-applications&quot;&gt;AI case studies and real-world applications&lt;/a&gt;
        &lt;ul data-toc-name=&quot;ai-case-studies-real-world-applications&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/will-ai-take-developers-jobs/#what-ai-still-cant-do&quot;&gt;What AI still can’t do&lt;/a&gt;
        &lt;ul data-toc-name=&quot;what-ai-still-cant-do&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/will-ai-take-developers-jobs/#ai-impact-hiring-career-progression&quot;&gt;AI’s impact on hiring and career progression&lt;/a&gt;
        &lt;ul data-toc-name=&quot;ai-impact-hiring-career-progression&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/will-ai-take-developers-jobs/#ethical-considerations-risks&quot;&gt;Ethical considerations and risks&lt;/a&gt;
        &lt;ul data-toc-name=&quot;ethical-considerations-risks&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/will-ai-take-developers-jobs/#how-developers-can-stay-competitive-ai-driven-world&quot;&gt;How developers can stay competitive in an AI-driven world&lt;/a&gt;
        &lt;ul data-toc-name=&quot;how-developers-can-stay-competitive-ai-driven-world&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/div&gt;
                &lt;!-- Sidebar gutter ad --&gt;
                
            &lt;/div&gt;
        &lt;/aside&gt;
        &lt;div id=&quot;the-content-container&quot;&gt;
            
&lt;div class=&quot;lr-content&quot;&gt;
    &lt;!-- TEMP: .article-post is only used for adinserter to hook into --&gt;
    &lt;div class=&quot;article-post&quot;&gt;&lt;/div&gt;
    
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;The rise and wide adoption of artificial intelligence (AI) in software development has sparked concerns about job security, but while AI can automate certain coding tasks, it won’t entirely replace developers. This article explores how AI became a popular coding tool, the coding processes it simplifies and automates, and the limitations it still has compared to experienced human developers.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;img fetchpriority=&quot;high&quot; decoding=&quot;async&quot; width=&quot;895&quot; height=&quot;597&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/will-ai-take-developers-jobs-nocdn.png&quot; class=&quot;attachment-full size-full wp-post-image&quot; alt=&quot;Will AI Take Developers’ Jobs?&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/will-ai-take-developers-jobs-nocdn.png 895w, https://blog.logrocket.com/wp-content/uploads/2025/03/will-ai-take-developers-jobs-nocdn.png?resize=300,200 300w, https://blog.logrocket.com/wp-content/uploads/2025/03/will-ai-take-developers-jobs-nocdn.png?resize=768,512 768w&quot; sizes=&quot;(max-width: 895px) 100vw, 895px&quot; data-attachment-id=&quot;202484&quot; data-permalink=&quot;https://blog.logrocket.com/will-ai-take-developers-jobs/attachment/will-ai-take-developers-jobs-nocdn/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/will-ai-take-developers-jobs-nocdn.png&quot; data-orig-size=&quot;895,597&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;Will AI take developers’ jobs?&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/will-ai-take-developers-jobs-nocdn.png?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/will-ai-take-developers-jobs-nocdn.png?w=895&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;p&gt;According to &lt;a href=&quot;https://www.grandviewresearch.com/industry-analysis/artificial-intelligence-ai-market&quot;&gt;Grand View Research&lt;/a&gt;, the global AI market size was estimated at 196.63 billion in 2023 and is projected to grow at a Compound Annual Growth Rate (CAGR) of 36.6% from 2024 to 2030. This growth is driven by advancements in machine learning, natural language processing, and automation, all of which are transforming software development processes.&lt;/p&gt;
&lt;h2 id=&quot;rise-ai-software-development&quot;&gt;The rise of AI in software development&lt;/h2&gt;
&lt;p&gt;These days, AI is more than just a tool for automating repetitive tasks. After OpenAI’s GPT-3 language model demonstrated its ability to create HTML websites by following simple instructions, AI has found practical applications in software development. Since then, the AI industry has seen many breakthroughs, with AI systems now able to write computer programs based on natural language prompts.&lt;/p&gt;
&lt;p&gt;Although AI advancements are revolutionizing coding, the creative, problem-solving essence of computer programming will largely depend on human expertise. AI might take the job of low-skilled developers, but the demand for experienced engineers will likely be on the rise to provide product direction and architectural design. AI code generation models like &lt;a href=&quot;https://blog.logrocket.com/building-github-copilot-app/&quot;&gt;GitHub Copilot&lt;/a&gt; and the like are already disrupting the way developers write code. These models are getting better at generating executable code.&lt;/p&gt;
&lt;p&gt;Here are some AI tools that are reinventing software development:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://block.github.io/goose/docs/quickstart/&quot;&gt;Codename Goose&lt;/a&gt;: An open source, extensible AI agent that automates engineering tasks&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chatgpt.com/&quot;&gt;ChatGPT&lt;/a&gt;: A popular, go-to tool for conversational interaction. ChatGPT’s ability to understand natural language and respond to prompts makes it a great tool that augments developers’ skills&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.deepseek.com/&quot;&gt;DeepSeek&lt;/a&gt;: Functions in a conversational way like ChatGPT&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/features/copilot&quot;&gt;Github Copilot&lt;/a&gt;: A code completion and AI programming tool that works mostly in IDEs and code editors&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://deepmind.google/&quot;&gt;Google DeepMind&lt;/a&gt;: Supports algorithm optimization&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;benefits-ai&quot;&gt;The benefits of AI&lt;/h2&gt;
&lt;p&gt;Since the launch of ChatGPT, generative AI has become a tool embedded in our daily workflows. According to this &lt;a href=&quot;https://survey.stackoverflow.co/2024/ai#1-ai-tools-in-the-development-process&quot;&gt;Stack Overflow survey&lt;/a&gt;, 76% of all respondents are using or intend to use AI tools in their development processes, and 72% expressed a favorable or very favorable attitude toward AI.&lt;/p&gt;
&lt;p&gt;Using AI in the software development process can lead to significant improvements in the following areas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Code quality&lt;/strong&gt;: AI can enhance code quality by leveraging advanced code review tools. These tools use machine learning algorithms to analyze code, identify potential pitfalls, and recommend areas for improvement&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data-based decision-making&lt;/strong&gt;: AI is enabling real-time data analysis, which helps developers analyze large data sets on time and extract useful insights for planning and execution&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Faster time to market&lt;/strong&gt;: Integrating AI into workflows improves a product’s time to market&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;future-development-era-ai&quot;&gt;The future of development in the era of AI&lt;/h2&gt;
&lt;p&gt;As AI continues to advance, the role of a developer is shifting from simply writing code to architecting, managing, reviewing, and optimizing code. Developers who embrace AI as a productivity booster will have a competitive edge.&lt;/p&gt;
&lt;h3 id=&quot;ai-job-displacement-separating-fear-from-reality&quot;&gt;AI job displacement: Separating the fear from the reality&lt;/h3&gt;
&lt;p&gt;The fear that AI will take developers’ jobs is not entirely false, but it shouldn’t be exaggerated. Historically, automation has displaced some jobs while creating new opportunities for others. The advent of mechanized farming, for example, led to the loss of some manual jobs but created new roles in machine operation and maintenance.&lt;/p&gt;
&lt;p&gt;Similarly, while AI may automate certain aspects of software development, it is unlikely to completely replace developers. Instead, AI is here to enhance developers’ abilities, allowing them to focus on more complex, creative, and human-dependent tasks. Developers who embrace AI and learn to harness its capabilities will be positioned to thrive in this era.&lt;/p&gt;
&lt;h2 id=&quot;ai-case-studies-real-world-applications&quot;&gt;AI case studies and real-world applications&lt;/h2&gt;
&lt;p&gt;AI is being integrated into developers’ workflows in many ways, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Code generation and completion&lt;/strong&gt;: Developers with GitHub accounts can easily generate boilerplate code using Copilot on VS Code or other compatible IDEs&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code review&lt;/strong&gt;: Developers use &lt;a href=&quot;https://www.sonarsource.com/&quot;&gt;SonarQube&lt;/a&gt; to review and improve code quality&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automated testing&lt;/strong&gt;: &lt;a href=&quot;https://applitools.com/platform/eyes/&quot;&gt;Applitools Eyes&lt;/a&gt; uses AI to compare screenshots of web applications across different devices, helping teams ship quality applications&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security and threat detection&lt;/strong&gt;: &lt;a href=&quot;https://www.veracode.com/security/vulnerability-scanning-tools/&quot;&gt;Veracode&lt;/a&gt; uses AI to scan for vulnerabilities and potential security threats thereby mitigating potential risks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, Postman integrated an AI feature, &lt;a href=&quot;https://www.postman.com/product/postbot/&quot;&gt;Postbot&lt;/a&gt;, into Postman applications. Using Postbot, developers are able to automate API testing, generate documentation, and debug API requests within Postman apps.&lt;/p&gt;
&lt;p&gt;Check out “&lt;a href=&quot;https://blog.logrocket.com/6-ai-tools-api-testing-development/&quot;&gt;6 AI tools for API testing and development&lt;/a&gt;” for more examples of AI tools that directly help developers.&lt;/p&gt;
&lt;h2 id=&quot;what-ai-still-cant-do&quot;&gt;What AI still can’t do&lt;/h2&gt;
&lt;p&gt;Despite the great achievements AI has made in software development, human efforts remain valuable in several areas.&lt;/p&gt;
&lt;p&gt;Beyond coding, AI struggles with understanding complex business needs that require intuition and human interaction. AI also lacks the ability to make ethical decisions, leaving humans with the responsibility to ensure that code adheres to ethical standards and avoids biases and cross-cutting concerns.&lt;/p&gt;
&lt;p&gt;Additionally, over-reliance on AI can result in security vulnerabilities and pose a challenge for junior developers.&lt;/p&gt;
&lt;p&gt;While AI can augment human efforts, it can’t entirely replace the nuanced judgment, creativity, and collaborative efforts that experienced human developers bring to the table.&lt;/p&gt;
&lt;h2 id=&quot;ai-impact-hiring-career-progression&quot;&gt;AI’s impact on hiring and career progression&lt;/h2&gt;
&lt;p&gt;As AI continues to evolve, hiring practices will likely take on new vistas. Businesses will always want to get more work done with less manpower and less expenditure. Recruiters might be forced to prioritize hiring highly skilled engineers who can leverage AI in their workflows.&lt;/p&gt;

&lt;p&gt;Additionally, employers will place a greater emphasis on soft skills such as problem-solving, communication, and collaboration. Simply being a programmer won’t be enough in the foreseeable future. Instead, software development will involve a combination of AI and human efforts in areas where AI hasn’t completely found a foothold — areas like business domain knowledge, high-level decision-making, understanding user pain points, system architecture design, stakeholder collaboration, and more.&lt;/p&gt;
&lt;h2 id=&quot;ethical-considerations-risks&quot;&gt;Ethical considerations and risks&lt;/h2&gt;
&lt;p&gt;The rise of AI-powered coding tools also introduces ethical concerns, particularly for junior developers, security, and bias. Junior developers risk over-relying on AI, which can hinder learning fundamental, critical thinking, and problem-solving skills, potentially making it harder to enter the industry as entry-level jobs become less available.&lt;/p&gt;
&lt;p&gt;Security vulnerabilities are another major issue, as AI-generated code can introduce risks like SQL injection, hardcoded credentials, and outdated practices, which developers may not always catch.&lt;/p&gt;
&lt;p&gt;AI models also inherit biases from their training data, leading to skewed code suggestions and even discriminatory hiring practices if AI is used in recruitment. Ethical concerns around code ownership may also arise, as AI can potentially generate solutions based on proprietary or open source code without proper attribution.&lt;/p&gt;
&lt;p&gt;To mitigate these risks, developers should use AI as an assistant rather than a replacement, actively review AI-generated code for security flaws, and stay updated on best practices. Companies must also ensure responsible AI adoption by enforcing security guidelines and promoting mentorship for junior developers.&lt;/p&gt;
&lt;p&gt;While AI enhances productivity, human oversight remains essential to prevent biases, security risks, and knowledge gaps. By balancing AI adoption with critical thinking and ethical awareness, developers can effectively integrate AI without compromising quality, security, or career growth.&lt;/p&gt;
&lt;h2 id=&quot;how-developers-can-stay-competitive-ai-driven-world&quot;&gt;How developers can stay competitive in an AI-driven world&lt;/h2&gt;
&lt;p&gt;To stay competitive in an AI-driven industry, developers must do more than simply learn AI tools — we need to have an integrative approach to professional growth.&lt;/p&gt;

&lt;p&gt;First, strengthening foundational programming skills is essential, as a deep understanding of core concepts allows developers to effectively leverage AI and troubleshoot AI-generated code. Second, focusing on problem-solving and critical thinking — skills that AI cannot easily replicate — will help developers tackle complex challenges and innovate beyond what AI can automate.&lt;/p&gt;
&lt;p&gt;It’s also important that developers cultivate domain expertise in their specific industry or niche, as this contextual knowledge is invaluable for making informed decisions and creating tailored solutions.&lt;/p&gt;
&lt;p&gt;As developers, we must prioritize continuous learning and staying up to date on emerging technologies, trends, and best practices through courses, certifications, and community events. Collaboration and communication skills are equally important, as working effectively in teams and explaining technical concepts to non-technical stakeholders will always require human interaction.&lt;/p&gt;
&lt;p&gt;To use AI effectively without becoming overly dependent on it, developers must see AI as an augmenting tool, and look for ways to use it to automate repetitive tasks while focusing on critical areas like coding, business decisions, code reviews, debugging, and system design to maintain their skills and relevance.&lt;/p&gt;


&lt;/div&gt;
            &lt;style&gt;
    .share-icon.share-twitter span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-twitter.svg&quot;);
    }

    .share-icon.share-reddit span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-reddit.svg&quot;);
    }

    .share-icon.share-linkedin span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-linkedin.svg&quot;);
    }

    .share-icon.share-facebook span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-facebook.svg&quot;);
    }
&lt;/style&gt;

&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon sd-sharing&quot;&gt;&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;&lt;div class=&quot;sd-content&quot;&gt;&lt;ul&gt;&lt;li class=&quot;share-twitter&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-twitter-202482&quot; class=&quot;share-twitter sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/will-ai-take-developers-jobs/?share=twitter&quot; target=&quot;_blank&quot; title=&quot;Click to share on Twitter&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Twitter (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-reddit&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;&quot; class=&quot;share-reddit sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/will-ai-take-developers-jobs/?share=reddit&quot; target=&quot;_blank&quot; title=&quot;Click to share on Reddit&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Reddit (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-linkedin&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-linkedin-202482&quot; class=&quot;share-linkedin sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/will-ai-take-developers-jobs/?share=linkedin&quot; target=&quot;_blank&quot; title=&quot;Click to share on LinkedIn&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on LinkedIn (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-facebook&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-facebook-202482&quot; class=&quot;share-facebook sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/will-ai-take-developers-jobs/?share=facebook&quot; target=&quot;_blank&quot; title=&quot;Click to share on Facebook&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Facebook (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-end&quot;&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;            &lt;ul id=&quot;post-tags&quot;&gt;
            &lt;li&gt;
        &lt;a rel=&quot;tag&quot; href=&quot;https://blog.logrocket.com/tag/ai/&quot;&gt;#ai&lt;/a&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
            &lt;div class=&quot;post-popup&quot; data-popup-name=&quot;dev-cab&quot;&gt;
    &lt;i data-popup-dismiss=&quot;&quot; class=&quot;fa-solid fa-xmark post-popup__exit&quot;&gt;&lt;/i&gt;
    &lt;div class=&quot;post-popup__page active&quot;&gt;
        &lt;p class=&quot;post-popup__title&quot;&gt;Hey there, want to help make our blog better? &lt;/p&gt;
        &lt;div class=&quot;post-popup__buttons&quot;&gt;
            &lt;button data-popup-next=&quot;&quot; class=&quot;lr-button&quot;&gt;Yea&lt;/button&gt;
            &lt;button data-popup-dismiss=&quot;&quot; class=&quot;lr-button&quot;&gt;No Thanks&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;post-popup__page&quot;&gt;
        &lt;p&gt;
            Join LogRocket’s Content Advisory Board. You’ll help inform the type of
            content we create and get access to exclusive meetups, social accreditation,
            and swag.
        &lt;/p&gt;
        &lt;a data-popup-dismiss=&quot;&quot; class=&quot;lr-button&quot; target=&quot;__blank&quot; href=&quot;https://lp.logrocket.com/blg/content-advisory-board-signup&quot;&gt;Sign up now&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
        &lt;/div&gt;
    </description><link>https://blog.logrocket.com/will-ai-take-developers-jobs/</link><guid isPermaLink="false">https://blog.logrocket.com/will-ai-take-developers-jobs/</guid><pubDate>Wed, 19 Mar 2025 16:00:00 GMT</pubDate><author>Frank Joseph</author></item><item><title>The top 10 React Native charts libraries for 2025</title><description>&lt;aside&gt;
            &lt;div class=&quot;sticky&quot;&gt;
                                
&lt;div class=&quot;toc-container&quot; id=&quot;post-toc&quot;&gt;
            &lt;div class=&quot;toc-header&quot;&gt;
            &lt;span class=&quot;toc-title&quot;&gt;
                Table of contents            &lt;/span&gt;
            &lt;i class=&quot;fa fa-chevron-down toc-collapse&quot;&gt;&lt;/i&gt;
            &lt;i class=&quot;hide fa fa-chevron-up toc-expand&quot;&gt;&lt;/i&gt;
        &lt;/div&gt;
        
&lt;ul data-toc-name=&quot;root&quot; class=&quot;toc&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/top-react-native-chart-libraries/#criteria-for-selecting-your-react-native-chart-library&quot;&gt;Criteria for selecting your React Native chart library&lt;/a&gt;
        &lt;ul data-toc-name=&quot;criteria-for-selecting-your-react-native-chart-library&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/top-react-native-chart-libraries/#react-native-charts-wrapper&quot;&gt;react-native-charts-wrapper&lt;/a&gt;
        &lt;ul data-toc-name=&quot;react-native-charts-wrapper&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/top-react-native-chart-libraries/#rne-pro&quot;&gt;RNE-Pro&lt;/a&gt;
        &lt;ul data-toc-name=&quot;rne-pro&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/top-react-native-chart-libraries/#react-native-chart-kit&quot;&gt;react-native-chart-kit&lt;/a&gt;
        &lt;ul data-toc-name=&quot;react-native-chart-kit&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/top-react-native-chart-libraries/#reactnativepiechart&quot;&gt;react-native-pie-chart&lt;/a&gt;
        &lt;ul data-toc-name=&quot;reactnativepiechart&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/top-react-native-chart-libraries/#react-native-responsive-line-chart&quot;&gt;react-native-responsive-linechart&lt;/a&gt;
        &lt;ul data-toc-name=&quot;react-native-responsive-line-chart&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/top-react-native-chart-libraries/#react-native-wagmi-charts&quot;&gt;&lt;strong&gt;react-native-wagmi-charts&lt;/strong&gt;&lt;/a&gt;
        &lt;ul data-toc-name=&quot;react-native-wagmi-charts&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/top-react-native-chart-libraries/#victory&quot;&gt;Victory&lt;/a&gt;
        &lt;ul data-toc-name=&quot;victory&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/top-react-native-chart-libraries/#react-native-gifted-charts&quot;&gt;react-native-gifted-charts&lt;/a&gt;
        &lt;ul data-toc-name=&quot;react-native-gifted-charts&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/top-react-native-chart-libraries/#d3-js&quot;&gt;D3.js&lt;/a&gt;
        &lt;ul data-toc-name=&quot;d3-js&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/top-react-native-chart-libraries/#reactnativeecharts&quot;&gt;React Native ECharts&lt;/a&gt;
        &lt;ul data-toc-name=&quot;reactnativeecharts&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/top-react-native-chart-libraries/#best-chart-library&quot;&gt;What is the best chart library for React Native?&lt;/a&gt;
        &lt;ul data-toc-name=&quot;best-chart-library&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/top-react-native-chart-libraries/#conclusion&quot;&gt;Conclusion&lt;/a&gt;
        &lt;ul data-toc-name=&quot;conclusion&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/div&gt;
                &lt;!-- Sidebar gutter ad --&gt;
                
            &lt;/div&gt;
        &lt;/aside&gt;
        &lt;div id=&quot;the-content-container&quot;&gt;
            
&lt;div class=&quot;lr-content&quot;&gt;
    &lt;!-- TEMP: .article-post is only used for adinserter to hook into --&gt;
    &lt;div class=&quot;article-post&quot;&gt;&lt;/div&gt;
    
&lt;p&gt;In this post, we’ll evaluate 10 React Native charts libraries:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;react-native-charts-wrapper&lt;/li&gt;
&lt;li&gt;RNE-Pro&lt;/li&gt;
&lt;li&gt;react-native-chart-kit&lt;/li&gt;
&lt;li&gt;react-native-pie-chart&lt;/li&gt;
&lt;li&gt;react-native-responsive-linechart&lt;/li&gt;
&lt;li&gt;react-native-wagmi-charts&lt;/li&gt;
&lt;li&gt;Victory&lt;/li&gt;
&lt;li&gt;react-native-gifted-charts&lt;/li&gt;
&lt;li&gt;D3.js&lt;/li&gt;
&lt;li&gt;React Native ECharts&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;criteria-for-selecting-your-react-native-chart-library&quot;&gt;Criteria for selecting your React Native chart library&lt;/h2&gt;
&lt;img fetchpriority=&quot;high&quot; decoding=&quot;async&quot; width=&quot;895&quot; height=&quot;597&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2024/11/featured-image-react-native-chart-libraries.png&quot; class=&quot;attachment-full size-full wp-post-image&quot; alt=&quot;top ten react native chart libraries&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2024/11/featured-image-react-native-chart-libraries.png 895w, https://blog.logrocket.com/wp-content/uploads/2024/11/featured-image-react-native-chart-libraries.png?resize=300,200 300w, https://blog.logrocket.com/wp-content/uploads/2024/11/featured-image-react-native-chart-libraries.png?resize=768,512 768w&quot; sizes=&quot;(max-width: 895px) 100vw, 895px&quot; data-attachment-id=&quot;202517&quot; data-permalink=&quot;https://blog.logrocket.com/top-react-native-chart-libraries/attachment/featured-image-react-native-chart-libraries/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2024/11/featured-image-react-native-chart-libraries.png&quot; data-orig-size=&quot;895,597&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;featured-image-react-native-chart-libraries&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2024/11/featured-image-react-native-chart-libraries.png?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2024/11/featured-image-react-native-chart-libraries.png?w=895&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;p&gt;The cross-platform mobile app framework React Native has many open-source libraries that help to represent data in charts and graphs. When choosing a React Native chart or graph library, the following criteria must be considered:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Customizable components&lt;/strong&gt; &lt;strong&gt;—&lt;/strong&gt; The charting library you choose should offer a variety of chart types, such as bar charts, line charts, pie charts, and more that are easily customizable to fit your application needs&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Animation&lt;/strong&gt; &lt;strong&gt;—&lt;/strong&gt; The library should support animated transitions, making the charts visually appealing and engaging for users&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ease of use&lt;/strong&gt; &lt;strong&gt;—&lt;/strong&gt; The library should be easy to implement and customize, with a user-friendly API, comprehensive documentation, and pre-built components that are simple to customize&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt; &lt;strong&gt;—&lt;/strong&gt; The library should be lightweight to ensure the app’s performance remains unaffected, even when handling large datasets and complex visualizations&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cross-platform consistency&lt;/strong&gt; &lt;strong&gt;—&lt;/strong&gt; The library should maintain UI consistency on both iOS and Android devices&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’ll explore these React Native chart and graph libraries and evaluate them based on the criteria mentioned above to determine which ones are most suitable for specific requirements.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Editor’s note&lt;/em&gt;&lt;/strong&gt;: &lt;em&gt;This article was last reviewed and updated by &lt;a href=&quot;https://blog.logrocket.com/author/emmanueljohn/&quot;&gt;Emmanuel John&lt;/a&gt; to add information on additional React native charts libraries, including RNE-Pro, react-native-wagmi-charts, and D3.js . For a deeper dive into React Native libraries, check out our guide to the &lt;a href=&quot;https://blog.logrocket.com/best-react-native-component-libraries/&quot;&gt;best component libraries&lt;/a&gt; and the &lt;a href=&quot;https://blog.logrocket.com/best-react-native-routing-libraries/&quot;&gt;top routing libraries&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;strong&gt;A quick note&lt;/strong&gt;: Community insights on React Native charts&lt;/h3&gt;
&lt;p&gt;The React Native community has reported several issues with data visualization libraries like CLCchart, react-native-svg-chart and react-native-echarts-wrapper. Developers have encountered errors during installation, particularly when using Yarn. One such issue involved a failed &lt;code&gt;postinstall&lt;/code&gt; script when running &lt;code&gt;yarn add CLCchart&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;While reviewing react-native-svg-chart library setup, I noticed some installation errors as a result of dependency conflicts when using react-native-svg versions beyond 7.0.3, as react-native-svg-charts specifies peer dependencies for versions &lt;code&gt;^6.2.1 || ^7.0.3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Given the lack of recent activity and the fact that these libraries have not been maintained for 6+ years now, this article’s current update excludes them.&lt;/p&gt;
&lt;h2 id=&quot;react-native-charts-wrapper&quot;&gt;react-native-charts-wrapper&lt;/h2&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2020/11/react-native-charts-wrapper.png&quot; alt=&quot;React-native-charts-wrapper Charting Library&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wuxudong/react-native-charts-wrapper&quot;&gt;react-native-charts-wrapper&lt;/a&gt; is an open source library that supports both iOS and Android devices. It is based on native charting libraries such as &lt;a href=&quot;https://github.com/PhilJay/MPAndroidChart&quot;&gt;MPAndroidChart&lt;/a&gt; and iOS charts. It also offers a large number of supported chart types, including line, scatter, bubble, pie, radar, bar, combined, and candlestick.&lt;/p&gt;
&lt;p&gt;Its V0.6.0 introduces substantial improvements with an upgrade to DGCharts. Its previous iOS charting library was updated to DGCharts to prevent conflicts with Apple’s SwiftUI Charts.&lt;br&gt;
As a library, react-native-charts-wrapper is well documented and explains how to get integrated into a new React Native app with a step-by-step tutorial.&lt;/p&gt;
&lt;p&gt;It also highlights the major conventional differences between iOS and Android. For example, the color’s alpha on Android is between the range of zero to 255, and on iOS, it is zero to one. This information is helpful for someone getting started with a chart library in their mobile app for the first time.&lt;/p&gt;
&lt;h2 id=&quot;rne-pro&quot;&gt;RNE-Pro&lt;/h2&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; data-attachment-id=&quot;202513&quot; data-permalink=&quot;https://blog.logrocket.com/top-react-native-chart-libraries/attachment/1_rne-pro/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2024/11/1_rne-pro.png&quot; data-orig-size=&quot;895,503&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;1_rne-pro&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2024/11/1_rne-pro.png?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2024/11/1_rne-pro.png?w=895&quot; class=&quot;aligncenter size-full wp-image-202513&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2024/11/1_rne-pro.png&quot; alt=&quot;rne pro&quot; width=&quot;895&quot; height=&quot;503&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2024/11/1_rne-pro.png 895w, https://blog.logrocket.com/wp-content/uploads/2024/11/1_rne-pro.png?resize=300,169 300w, https://blog.logrocket.com/wp-content/uploads/2024/11/1_rne-pro.png?resize=768,432 768w&quot; sizes=&quot;(max-width: 895px) 100vw, 895px&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;RNE-Pro is another great React Native charts library based on Apache ECharts. Its support for both charts and maps makes it very unique. It’s very easy to learn if you use Echarts for &lt;a href=&quot;https://blog.logrocket.com/ux-design/a-guide-to-data-visualization/&quot;&gt;data visuali&lt;/a&gt;&lt;a href=&quot;https://blog.logrocket.com/ux-design/a-guide-to-data-visualization/&quot;&gt;z&lt;/a&gt;&lt;a href=&quot;https://blog.logrocket.com/ux-design/a-guide-to-data-visualization/&quot;&gt;ation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With its continuous updates, maintenance, and upgrades, RNE-PRO is one of the most actively maintained React Native data visualization libraries. It also has great documentation.&lt;/p&gt;
&lt;h2 id=&quot;react-native-chart-kit&quot;&gt;react-native-chart-kit&lt;/h2&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2020/11/react-native-chart-kit-1.jpeg&quot; alt=&quot;Mobile View Of React Native Chart Kit&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;A charting library that supports both Expo apps and React Native vanilla apps is worth serious consideration.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/indiespirit/react-native-chart-kit&quot;&gt;react-native-chart-kit&lt;/a&gt; is built on top of famous open source projects such as &lt;code&gt;react-native-svg&lt;/code&gt;, &lt;code&gt;paths-js&lt;/code&gt;, and &lt;code&gt;react-native-calendar-heatmap&lt;/code&gt;. It supports patterns such as line, bezier line, pie, progress ring, stacked bar, and contribution graph (also known as a &lt;a href=&quot;https://blog.logrocket.com/best-heatmap-libraries-react/&quot;&gt;heat map&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Some of the patterns that react-native-chart-kit supports are unique when compared to other libraries mentioned in this article. Each of the patterns has its own set of props, which makes it easier to customize data on a mobile app screen:&lt;/p&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2020/11/responsive-react-native-chart-kit-1.jpeg&quot; alt=&quot;Responsive React Native Chart Kit&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;Apart from some unique patterns, react-native-chart-kit also allows you to render a responsive chart by using the Dimensions API from React Native and calculating the width of the device’s screen. Each chart component also accepts a &lt;code&gt;style&lt;/code&gt; prop that can be applied to the parent SVG or &lt;code&gt;View&lt;/code&gt; component to customize the default styles of that chart pattern.&lt;/p&gt;
&lt;p&gt;It has noticeable issues with large datasets. One such issue is the axis labels being cut off or not rendering correctly.&lt;/p&gt;

&lt;h2 id=&quot;reactnativepiechart&quot;&gt;react-native-pie-chart&lt;/h2&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2020/11/react-native-pie-chart-1.png&quot; alt=&quot;React Native Pie Chart&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/genexu/react-native-pie-chart&quot;&gt;react-native-pie-chart&lt;/a&gt; is an open source library that is simple to use and offers two different variants to display data in the form of a pie chart. It is useful for scenarios where you are required to represent data in a pie chart but want to keep the bundle size of your app small. Most libraries, as discussed in this article, offer a variety of components and patterns that are usually going to increase the overall bundle size of the app.&lt;/p&gt;
&lt;p&gt;react-native-pie-chart offers a set of props to apply custom styles or switches between the two shapes it offers. This makes it easy to configure and understand.&lt;/p&gt;
&lt;p&gt;Its version 4.0.0 release now supports labels to pie chart slices, and the ability to set a gap between pie slices. These features were highly requested by the community.&lt;/p&gt;
&lt;h2 id=&quot;react-native-responsive-line-chart&quot;&gt;react-native-responsive-linechart&lt;/h2&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2020/11/react-native-responsive-line-chart.png&quot; alt=&quot;React Native Responsive Line Chart&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;Like react-native-pie-chart, &lt;a href=&quot;https://github.com/xanderdeseyn/react-native-responsive-linechart&quot;&gt;react-native-responsive-linechart&lt;/a&gt; is dedicated to representing data in the form of lines on a mobile screen. Written completely in TypeScript, react-native-responsive-linechart has a composable API for different types of representations of a line chart. It supports adding tooltips and a large number of data points.&lt;/p&gt;
&lt;p&gt;react-native-responsive-linechart depends on only two external libraries: react-native-svg and react-native-gesture-handler. By enabling the latter dependency, this library can support scrollable charts by setting a &lt;code&gt;viewport&lt;/code&gt; prop.&lt;/p&gt;
&lt;p&gt;Lastly, because it doesn’t depend heavily on other libraries and supports only one type of charting pattern, react-native-responsive-linechart has a total package size of only 62 kilobytes (unzipped).&lt;/p&gt;
&lt;h2 id=&quot;react-native-wagmi-charts&quot;&gt;&lt;strong&gt;react-native-wagmi-charts&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/seerline/clchart&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; data-attachment-id=&quot;202514&quot; data-permalink=&quot;https://blog.logrocket.com/top-react-native-chart-libraries/attachment/2_react-native-wagmi-charts/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2024/11/2_react-native-wagmi-charts.png&quot; data-orig-size=&quot;895,503&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;2_react-native-wagmi-charts&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2024/11/2_react-native-wagmi-charts.png?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2024/11/2_react-native-wagmi-charts.png?w=895&quot; class=&quot;aligncenter size-full wp-image-202514&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2024/11/2_react-native-wagmi-charts.png&quot; alt=&quot;react native wagmi charts&quot; width=&quot;895&quot; height=&quot;503&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2024/11/2_react-native-wagmi-charts.png 895w, https://blog.logrocket.com/wp-content/uploads/2024/11/2_react-native-wagmi-charts.png?resize=300,169 300w, https://blog.logrocket.com/wp-content/uploads/2024/11/2_react-native-wagmi-charts.png?resize=768,432 768w&quot; sizes=&quot;auto, (max-width: 895px) 100vw, 895px&quot; referrerpolicy=&quot;no-referrer&quot;&gt;CLCchart&lt;/a&gt; used to be a go-to React Native chart library for stock market data, though it has since been abandoned. &lt;a href=&quot;https://www.npmjs.com/package/react-native-wagmi-charts/v/1.2.4&quot;&gt;react-native-wagmi-charts&lt;/a&gt; is a better replacement with line charts, candlestick charts, smooth data transition animations, and highly customizable APIs. This makes it a great choice for financial and stock market applications.&lt;/p&gt;
&lt;p&gt;The library currently supports only line and candlestick charts, but the following features make it an even better alternative than other React Native financial and stock market data visualization libraries:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/react-native-wagmi-charts/v/1.2.4#interactive-cursors&quot;&gt;&lt;strong&gt;Interactive cursors&lt;/strong&gt;&lt;/a&gt; – Easily track data points with precision&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/react-native-wagmi-charts/v/1.2.4#interactive-labels&quot;&gt;&lt;strong&gt;Interactive labels&lt;/strong&gt;&lt;/a&gt; – Display dynamic data labels for better insights&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/react-native-wagmi-charts/v/1.2.4#interactive-tooltips&quot;&gt;&lt;strong&gt;Interactive tooltips&lt;/strong&gt;&lt;/a&gt; – Provide additional details on hover or tap&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/react-native-wagmi-charts/v/1.2.4#haptic-feedback&quot;&gt;&lt;strong&gt;Haptic feedback&lt;/strong&gt;&lt;/a&gt; – Enhance the user experience with subtle vibrations&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;victory&quot;&gt;Victory&lt;/h2&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2020/11/victory-bar-chart-motion.gif&quot; alt=&quot;A Victory Native Bar Chart In Motion&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;Built and maintained by a team of developers at Formidable Labs, &lt;a href=&quot;https://github.com/formidablelabs/victory&quot;&gt;Victory&lt;/a&gt; is a charting library that supports different patterns in modular forms and ready-to-use components for both React and &lt;a href=&quot;https://blog.logrocket.com/complete-guide-react-native-web/&quot;&gt;React Native applications&lt;/a&gt;. The React Native variant is known as &lt;a href=&quot;https://commerce.nearform.com/open-source/victory-native/&quot;&gt;Victory Native&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All of the components provided by Victory can be used to visualize data in various formats and support complete customization in terms of styles and behavior. It is easy to install and integrate this charting library in a React Native app.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/FormidableLabs/victory-native-xl&quot;&gt;&lt;strong&gt;victory-native&lt;/strong&gt;&lt;/a&gt; has migrated from using react-native-svg as its only peer dependency to using three peer dependencies (React Native Reanimated, Gesture Handler, and Skia) which also require explicit installation. This is because react-native-svg wasn’t designed to support dynamic updates of large number of nodes over the bridge.&lt;/p&gt;
&lt;p&gt;Its current version was re-written from the ground up using Typescript, with improved performance. It’s now actively maintained by Nearform.&lt;/p&gt;
&lt;p&gt;Apart from a different &lt;a href=&quot;https://formidable.com/open-source/victory/gallery&quot;&gt;set of chart components&lt;/a&gt; that Victory supports, the library comes with many perks. One is the support of animations and transitions. With the help of an &lt;code&gt;animate&lt;/code&gt; prop, the animation changes can be applied to a &lt;code&gt;VictoryChart&lt;/code&gt; component. The animation is possible using &lt;a href=&quot;https://github.com/d3/d3-interpolate&quot;&gt;d3-interpolate&lt;/a&gt;, which is a collection of interpolation methods.&lt;/p&gt;
&lt;p&gt;The default transitions on a &lt;code&gt;VictoryChart&lt;/code&gt; component are customized using props such as &lt;code&gt;onEnter&lt;/code&gt; and &lt;code&gt;onExit&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2020/11/black-white-victory-chart.png&quot; alt=&quot;Black And White Victory Chart&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;The next advantage that Victory has over other libraries mentioned in this article is the support for material and grayscale design themes. A set of colors can be defined in the form of an array, and the typography to represent the data such as the font family, font size, and letter spacing. To label a specific data set or a representation of data in a chart, &lt;code&gt;VictoryTooltip&lt;/code&gt; is also available to add tooltips to charts.&lt;/p&gt;
&lt;p&gt;Victory offers many configuration options and information on how to &lt;a href=&quot;https://commerce.nearform.com/open-source/victory/docs/introduction&quot;&gt;create your own custom chart components&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;react-native-gifted-charts&quot;&gt;react-native-gifted-charts&lt;/h2&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2020/11/react-native-gifted-charts.png&quot; alt=&quot;React Native Gifted Charts&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gifted-charts.web.app/&quot;&gt;react-native-gifted-charts&lt;/a&gt; is a powerful library used for creating visually appealing and interactive charts in React Native applications.&lt;/p&gt;
&lt;p&gt;react-native-gifted-charts comes with everything you need to create beautiful and animated bar, line, area, pie, donut, and stacked bar charts in React Native.&lt;/p&gt;
&lt;p&gt;react-native-gifted-charts is clickable and scrollable, includes 3D and &lt;a href=&quot;https://blog.logrocket.com/complex-gradients-react-native-linear-gradient/&quot;&gt;gradient effects&lt;/a&gt;, and also provides smooth animations that can be implemented using the &lt;code&gt;LayoutAnimation&lt;/code&gt; prop. react-native-gifted-charts enables you to add animations to your charts that occur both when the chart is initially loaded and when its values are changed. This means that when a chart’s value is updated, users will experience a smooth layout transition rather than a sudden change.&lt;/p&gt;
&lt;p&gt;Its latest released version 1.4.57 now supports new chart types such as population pyramid and radar charts. It also has smoother animations and efficient rendering with a large dataset.&lt;/p&gt;
&lt;p&gt;One of the key benefits of using react-native-gifted-charts is its simplicity. Developers can easily integrate it into their projects and start creating charts in a matter of minutes. The library is also highly flexible, allowing developers to easily modify and extend its functionality to suit their needs.&lt;/p&gt;
&lt;h2 id=&quot;d3-js&quot;&gt;D3.js&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; data-attachment-id=&quot;202515&quot; data-permalink=&quot;https://blog.logrocket.com/top-react-native-chart-libraries/attachment/3_d3-js-library/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2024/11/3_d3-js-library.png&quot; data-orig-size=&quot;895,503&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;3_d3-js-library&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2024/11/3_d3-js-library.png?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2024/11/3_d3-js-library.png?w=895&quot; class=&quot;aligncenter size-full wp-image-202515&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2024/11/3_d3-js-library.png&quot; alt=&quot;d3 js library&quot; width=&quot;895&quot; height=&quot;503&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2024/11/3_d3-js-library.png 895w, https://blog.logrocket.com/wp-content/uploads/2024/11/3_d3-js-library.png?resize=300,169 300w, https://blog.logrocket.com/wp-content/uploads/2024/11/3_d3-js-library.png?resize=768,432 768w&quot; sizes=&quot;auto, (max-width: 895px) 100vw, 895px&quot; referrerpolicy=&quot;no-referrer&quot;&gt;D3.js is the most powerful data visualization library in React Native, widely used in both web and mobile applications. It’s a free, open-source JavaScript library and most of the data visualization libraries discussed in this article use D3.js under the hood to create data visualization elements.&lt;/p&gt;
&lt;p&gt;D3.js has a steep learning curve and can be very complex. You’ll need to understand concepts such as &lt;a href=&quot;https://d3js.org/d3-dsv&quot;&gt;CSV parser&lt;/a&gt; to load data, &lt;a href=&quot;https://d3js.org/d3-scale/time&quot;&gt;time scale&lt;/a&gt;, &lt;a href=&quot;https://d3js.org/d3-scale-chromatic/categorical&quot;&gt;categorical scheme&lt;/a&gt;, &lt;a href=&quot;https://d3js.org/d3-shape/curve&quot;&gt;linear curve&lt;/a&gt;, &lt;a href=&quot;https://d3js.org/d3-selection&quot;&gt;selections&lt;/a&gt;, &lt;a href=&quot;https://d3js.org/d3-scale/linear&quot;&gt;linear scale&lt;/a&gt;, and much more to create a single chart component.&lt;/p&gt;
&lt;p&gt;D3.js allows you to build each chart element from scratch using react-native-svg, meaning you can build customized charts to meet your specific needs. It has one of the best documentation and learning resources.&lt;/p&gt;
&lt;p&gt;I’d recommend D3.js for developers who want to build high-level chart libraries and are ready to build every chart component from scratch.&lt;/p&gt;
&lt;h2 id=&quot;reactnativeecharts&quot;&gt;React Native ECharts&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; data-attachment-id=&quot;202516&quot; data-permalink=&quot;https://blog.logrocket.com/top-react-native-chart-libraries/attachment/4_react-native-e-charts/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2024/11/4_react-native-e-charts.png&quot; data-orig-size=&quot;895,503&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;4_react-native-e-charts&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2024/11/4_react-native-e-charts.png?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2024/11/4_react-native-e-charts.png?w=895&quot; class=&quot;aligncenter size-full wp-image-202516&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2024/11/4_react-native-e-charts.png&quot; alt=&quot;react native e charts&quot; width=&quot;895&quot; height=&quot;503&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2024/11/4_react-native-e-charts.png 895w, https://blog.logrocket.com/wp-content/uploads/2024/11/4_react-native-e-charts.png?resize=300,169 300w, https://blog.logrocket.com/wp-content/uploads/2024/11/4_react-native-e-charts.png?resize=768,432 768w&quot; sizes=&quot;auto, (max-width: 895px) 100vw, 895px&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;React Native ECharts is an open-source library built on Apache Echarts and designed to create interactive and customizable charts for React Native applications.&lt;/p&gt;
&lt;p&gt;Its usage is similar to Echart and code can also be reused for web applications, making it cost-efficient and flexible. It supports Skia and SVG as the rendering libraries, allowing you to choose the option for specific use cases. It supports panning, zooming, and touch gestures for creating more interactive charts on mobile devices.&lt;/p&gt;
&lt;h2 id=&quot;best-chart-library&quot;&gt;What is the best chart library for React Native?&lt;/h2&gt;
&lt;p&gt;When selecting a charting library, you should choose one that meets your application’s requirements.&lt;/p&gt;
&lt;p&gt;For instance, if you need a highly customizable charting solution, libraries like react-native-charts-wrapper and react-native-gifted-charts are excellent options.&lt;/p&gt;
&lt;p&gt;For a project that requires a lightweight chart library with basic customization, react-native-pie-chart and react-native-responsive-linechart would be better choices.&lt;/p&gt;
&lt;p&gt;Ultimately, selecting the most suitable charting library depends on your specific project needs, and the decision should be based on a thorough evaluation of the available options.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The open-source charting libraries included in the list are either based on personal experience or are actively maintained and have substantial popularity in the community. All the libraries covered in this article have been tested with the current React Native version (even with the New Architecture flag enabled) and they all worked perfectly.&lt;/p&gt;
&lt;p&gt;If you are familiar with any other charting library in the React Native ecosystem that is not mentioned in this post, leave it in the comment section below and tell us why you like it.&lt;/p&gt;



&lt;/div&gt;
            &lt;style&gt;
    .share-icon.share-twitter span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-twitter.svg&quot;);
    }

    .share-icon.share-reddit span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-reddit.svg&quot;);
    }

    .share-icon.share-linkedin span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-linkedin.svg&quot;);
    }

    .share-icon.share-facebook span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-facebook.svg&quot;);
    }
&lt;/style&gt;

&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon sd-sharing&quot;&gt;&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;&lt;div class=&quot;sd-content&quot;&gt;&lt;ul&gt;&lt;li class=&quot;share-twitter&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-twitter-29317&quot; class=&quot;share-twitter sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/top-react-native-chart-libraries/?share=twitter&quot; target=&quot;_blank&quot; title=&quot;Click to share on Twitter&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Twitter (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-reddit&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;&quot; class=&quot;share-reddit sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/top-react-native-chart-libraries/?share=reddit&quot; target=&quot;_blank&quot; title=&quot;Click to share on Reddit&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Reddit (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-linkedin&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-linkedin-29317&quot; class=&quot;share-linkedin sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/top-react-native-chart-libraries/?share=linkedin&quot; target=&quot;_blank&quot; title=&quot;Click to share on LinkedIn&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on LinkedIn (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-facebook&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-facebook-29317&quot; class=&quot;share-facebook sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/top-react-native-chart-libraries/?share=facebook&quot; target=&quot;_blank&quot; title=&quot;Click to share on Facebook&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Facebook (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-end&quot;&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;            &lt;ul id=&quot;post-tags&quot;&gt;
            &lt;li&gt;
        &lt;a rel=&quot;tag&quot; href=&quot;https://blog.logrocket.com/tag/react-native/&quot;&gt;#react native&lt;/a&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
            &lt;div class=&quot;post-popup&quot; data-popup-name=&quot;dev-cab&quot;&gt;
    &lt;i data-popup-dismiss=&quot;&quot; class=&quot;fa-solid fa-xmark post-popup__exit&quot;&gt;&lt;/i&gt;
    &lt;div class=&quot;post-popup__page active&quot;&gt;
        &lt;p class=&quot;post-popup__title&quot;&gt;Would you be interested in joining LogRocket&#39;s developer community? &lt;/p&gt;
        &lt;div class=&quot;post-popup__buttons&quot;&gt;
            &lt;button data-popup-next=&quot;&quot; class=&quot;lr-button&quot;&gt;Yea&lt;/button&gt;
            &lt;button data-popup-dismiss=&quot;&quot; class=&quot;lr-button&quot;&gt;No Thanks&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;post-popup__page&quot;&gt;
        &lt;p&gt;
            Join LogRocket’s Content Advisory Board. You’ll help inform the type of
            content we create and get access to exclusive meetups, social accreditation,
            and swag.
        &lt;/p&gt;
        &lt;a data-popup-dismiss=&quot;&quot; class=&quot;lr-button&quot; target=&quot;__blank&quot; href=&quot;https://lp.logrocket.com/blg/content-advisory-board-signup&quot;&gt;Sign up now&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
        &lt;/div&gt;
    </description><link>https://blog.logrocket.com/top-react-native-chart-libraries/</link><guid isPermaLink="false">https://blog.logrocket.com/top-react-native-chart-libraries/</guid><pubDate>Tue, 18 Mar 2025 16:00:00 GMT</pubDate><author>Aman Mittal</author></item><item><title>Bash vs. Zsh: Key differences and when to use each</title><description>&lt;aside&gt;
            &lt;div class=&quot;sticky&quot;&gt;
                                
&lt;div class=&quot;toc-container&quot; id=&quot;post-toc&quot;&gt;
            &lt;div class=&quot;toc-header&quot;&gt;
            &lt;span class=&quot;toc-title&quot;&gt;
                Table of contents            &lt;/span&gt;
            &lt;i class=&quot;fa fa-chevron-down toc-collapse&quot;&gt;&lt;/i&gt;
            &lt;i class=&quot;hide fa fa-chevron-up toc-expand&quot;&gt;&lt;/i&gt;
        &lt;/div&gt;
        
&lt;ul data-toc-name=&quot;root&quot; class=&quot;toc&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/bash-vs-zsh/#introducing-bash-and-zsh&quot;&gt;Introducing Bash and Zsh&lt;/a&gt;
        &lt;ul data-toc-name=&quot;introducing-bash-and-zsh&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/bash-vs-zsh/#feature-comparison&quot;&gt;Bash vs. Zsh: Feature comparison&lt;/a&gt;
        &lt;ul data-toc-name=&quot;feature-comparison&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/bash-vs-zsh/#choosing-the-right-shell&quot;&gt;Choosing the right shell: When to use Bash vs. Zsh&lt;/a&gt;
        &lt;ul data-toc-name=&quot;choosing-the-right-shell&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/bash-vs-zsh/#what-is-bash&quot;&gt;What is Bash (Bourne Again Shell)?&lt;/a&gt;
        &lt;ul data-toc-name=&quot;what-is-bash&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/bash-vs-zsh/#what-is-zsh-zshell&quot;&gt;What is Zsh (Z Shell)?&lt;/a&gt;
        &lt;ul data-toc-name=&quot;what-is-zsh-zshell&quot; class=&quot;toc-subheading&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/bash-vs-zsh/#corefeaturesandstrengths&quot;&gt;&lt;strong&gt;Core&lt;/strong&gt; &lt;strong&gt;f&lt;/strong&gt;eatures and &lt;strong&gt;s&lt;/strong&gt;trengths of Zsh&lt;/a&gt;
        &lt;ul data-toc-name=&quot;corefeaturesandstrengths&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/bash-vs-zsh/#commonusecasesforzsh&quot;&gt;&lt;strong&gt;Common&lt;/strong&gt; &lt;strong&gt;u&lt;/strong&gt;se &lt;strong&gt;c&lt;/strong&gt;ases for Zsh&lt;/a&gt;
        &lt;ul data-toc-name=&quot;commonusecasesforzsh&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/bash-vs-zsh/#popularpluginsforproductivity&quot;&gt;&lt;strong&gt;Popular&lt;/strong&gt; &lt;strong&gt;p&lt;/strong&gt;lugins for productivity&lt;/a&gt;
        &lt;ul data-toc-name=&quot;popularpluginsforproductivity&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/bash-vs-zsh/#optimizingzshperformance&quot;&gt;&lt;strong&gt;Optimizing Zsh performance&lt;/strong&gt;&lt;/a&gt;
        &lt;ul data-toc-name=&quot;optimizingzshperformance&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/bash-vs-zsh/#conclusion&quot;&gt;Conclusion&lt;/a&gt;
        &lt;ul data-toc-name=&quot;conclusion&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/div&gt;
                &lt;!-- Sidebar gutter ad --&gt;
                
            &lt;/div&gt;
        &lt;/aside&gt;
        &lt;div id=&quot;the-content-container&quot;&gt;
            
&lt;div class=&quot;lr-content&quot;&gt;
    &lt;!-- TEMP: .article-post is only used for adinserter to hook into --&gt;
    &lt;div class=&quot;article-post&quot;&gt;&lt;/div&gt;
    
&lt;p&gt;Both Bash and Zsh are important and powerful tools used to perform advanced activities that may ordinarily not be available with GUI tools. Bash is a lightweight, fast, and widely compatible command-line shell that prioritizes simplicity and portability, whereas Zsh is a more sophisticated shell that’s ideal for users that prefer customization and interactivity.&lt;/p&gt;
&lt;h2 id=&quot;introducing-bash-and-zsh&quot;&gt;Introducing Bash and Zsh&lt;/h2&gt;
&lt;img fetchpriority=&quot;high&quot; decoding=&quot;async&quot; width=&quot;895&quot; height=&quot;597&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/featured-image-bash-vs-zsh.png&quot; class=&quot;attachment-full size-full wp-post-image&quot; alt=&quot;bash vs zsh&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/featured-image-bash-vs-zsh.png 895w, https://blog.logrocket.com/wp-content/uploads/2025/03/featured-image-bash-vs-zsh.png?resize=300,200 300w, https://blog.logrocket.com/wp-content/uploads/2025/03/featured-image-bash-vs-zsh.png?resize=768,512 768w&quot; sizes=&quot;(max-width: 895px) 100vw, 895px&quot; data-attachment-id=&quot;202293&quot; data-permalink=&quot;https://blog.logrocket.com/bash-vs-zsh/attachment/featured-image-bash-vs-zsh/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/featured-image-bash-vs-zsh.png&quot; data-orig-size=&quot;895,597&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;featured-image-bash-vs-zsh&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/featured-image-bash-vs-zsh.png?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/featured-image-bash-vs-zsh.png?w=895&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;p&gt;Bourne Again Shell, commonly known as Bash, is a command line interface and scripting language) used by Unix-based operating systems to interact with terminal commands.&lt;/p&gt;
&lt;p&gt;Z Shell, also known as Zsh, is also a Unix-based command line interpreter used to interact with terminal commands.&lt;/p&gt;
&lt;p&gt;Some of the common uses of Bash and Zsh are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;System administration —&lt;/strong&gt; Both shells let users perform administrative activities like managing files, executing commands, and even creating automated scripts&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Development&lt;/strong&gt; &lt;strong&gt;—&lt;/strong&gt; Developers utilize these shells in debugging their scripts, installing packages, and even version control&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unix default —&lt;/strong&gt;On Unix-based systems, they are the default shells, with an option to access other shells from there&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s compare Bash vs. Zsh, discuss the differences, and explore how to use both.&lt;/p&gt;
&lt;h2 id=&quot;feature-comparison&quot;&gt;Bash vs. Zsh: Feature comparison&lt;/h2&gt;
&lt;table class=&quot;tg&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tg-k7lw&quot;&gt;Feature&lt;/th&gt;
&lt;th class=&quot;tg-k7lw&quot;&gt;Bash&lt;/th&gt;
&lt;th class=&quot;tg-yla0&quot;&gt;Zsh&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-lboi&quot;&gt;Default on Linux&lt;/td&gt;
&lt;td class=&quot;tg-lboi&quot;&gt;Yes&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;No, except for Kali Linux&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-lboi&quot;&gt;Default on MacOS&lt;/td&gt;
&lt;td class=&quot;tg-lboi&quot;&gt;No&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Yes, since MacOS Catalina&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-lboi&quot;&gt;Default on Windows&lt;/td&gt;
&lt;td class=&quot;tg-lboi&quot;&gt;No, but with WSL and Git&lt;br&gt;
Bash, it can run on Windows&lt;br&gt;
hosts&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;No. But is still installed as a&lt;br&gt;
secondary shell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-lboi&quot;&gt;POSIX compliance&lt;/td&gt;
&lt;td class=&quot;tg-lboi&quot;&gt;Yes, 100%&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;No. But is still installed as a&lt;br&gt;
secondary shell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Auto-completion&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Basic level&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Advanced level&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Support for plugins&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Limited support&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Advanced support using Oh&lt;br&gt;
My Zsh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Syntax highlighting&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;No, basic CLI&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Scripting capabilities&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Powerful&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Offers more customization for an intuitive scripting experience&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Customization&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Very limited&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Advanced customization&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Speed&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Very fast&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Fast, but can slow down with&lt;br&gt;
loads of plugins&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Popularity&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Very popular because it has&lt;br&gt;
more default support&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Also popular, especially for&lt;br&gt;
power users&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Scripting &lt;strong&gt;c&lt;/strong&gt;apabilities&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Bash&lt;/strong&gt; — Due to its POSIX compliance and speed, Bash is better suited for scripting and automation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Zsh&lt;/strong&gt; — Offers more customization for an intuitive scripting experience but lacks universal acceptance due to its POSIX limitation&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Auto-&lt;strong&gt;&lt;em&gt;c&lt;/em&gt;&lt;/strong&gt;ompletion &lt;strong&gt;and c&lt;/strong&gt;ommand &lt;strong&gt;h&lt;/strong&gt;istory&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Bash&lt;/strong&gt; &lt;strong&gt;—&lt;/strong&gt; Uses a simple tab and interface, making it the go-to for users who are more focused on performance&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Zsh&lt;/strong&gt; &lt;strong&gt;—&lt;/strong&gt; Utilizes a menu interface like an IDE, with command history&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Plugin &lt;strong&gt;and t&lt;/strong&gt;heme &lt;strong&gt;s&lt;/strong&gt;upport&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Bash&lt;/strong&gt; &lt;strong&gt;—&lt;/strong&gt; Offers very limited support for additional plugins&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Zsh&lt;/strong&gt; &lt;strong&gt;—&lt;/strong&gt; Allows for the use of plugins and theme customization, with the Oh My Zsh framework&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Syntax &lt;strong&gt;h&lt;/strong&gt;ighlighting &lt;strong&gt;and v&lt;/strong&gt;isual &lt;strong&gt;e&lt;/strong&gt;nhancement&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Bash&lt;/strong&gt; — Does not colourize commands and text. This means that users would have to know their onion when scripting with bash&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Zsh&lt;/strong&gt; — Uses plugins to colourize its commands, setting distinctions to help users understand what they are writing better&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Performance &lt;strong&gt;and&lt;/strong&gt;&amp;nbsp;m&lt;strong&gt;emory&lt;/strong&gt; &lt;strong&gt;u&lt;/strong&gt;sage&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Bash&lt;/strong&gt; — Lightweight and fast&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Zsh&lt;/strong&gt; — Heavy when laced with plugins&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;choosing-the-right-shell&quot;&gt;Choosing the right shell: When to use Bash vs. Zsh&lt;/h2&gt;
&lt;p&gt;To get the best experience, it is necessary to understand how the strengths of each align with your individual needs.&lt;/p&gt;
&lt;p&gt;You should use Bash if:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You need to write scripts that would have to be run on multiple systems without modification&lt;/li&gt;
&lt;li&gt;You need to write scripts that are expected to be fast, simple, yet effective&lt;/li&gt;
&lt;li&gt;You need to write scripts that must stick to POSIX compliance&lt;/li&gt;
&lt;li&gt;Your system is a legacy system, as Bash has more support for older systems&lt;/li&gt;
&lt;li&gt;You are new to the use of command line shells, as Bash has a simpler learning curve&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You should use Zsh if:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You prefer auto-completion and command history&lt;/li&gt;
&lt;li&gt;You spend a lot of time in the terminal and would love an interactive usage&lt;/li&gt;
&lt;li&gt;You want to use extensive plugins for advanced purposes&lt;/li&gt;
&lt;li&gt;You are a power user who prefers customization and syntax highlighting on your CLI&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;what-is-bash&quot;&gt;What is Bash (Bourne Again Shell)?&lt;/h2&gt;
&lt;p&gt;Bash, renowned for its simplicity and versatility, was originally a part of the GNU project of 1989, which remodified it from the old Bourne Shell. Over the years, Bash has been the most widely used shell, adopted by most Linux systems and MacOS. However, starting with MacOS Catalina in 2019, Zsh replaced Bash as the default shell.&lt;/p&gt;
&lt;h3&gt;Core features and strengths of Bash&lt;/h3&gt;
&lt;h4 id=&quot;posixcompliance&quot;&gt;&lt;strong&gt;POSIX&lt;/strong&gt; &lt;strong&gt;c&lt;/strong&gt;ompliance&lt;/h4&gt;
&lt;p&gt;Bash’s POSIX compliance nature has made it possible for Bash scripts to be easily ported on virtually all Unix systems.&lt;/p&gt;
&lt;h4 id=&quot;lightweightsimpleandstable&quot;&gt;&lt;strong&gt;Lightweight,&lt;/strong&gt; &lt;strong&gt;s&lt;/strong&gt;imple&lt;strong&gt;&lt;em&gt;,&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;strong&gt;s&lt;/strong&gt;table&lt;/h4&gt;
&lt;p&gt;Bash is lightweight, enabling it to run efficiently on resource-low systems. With such a straightforward syntax, Bash is an excellent choice for many users who prioritize simplicity without compromising on features.&lt;/p&gt;
&lt;h4 id=&quot;scriptingcapabilities&quot;&gt;&lt;strong&gt;Scripting&lt;/strong&gt; &lt;strong&gt;c&lt;/strong&gt;apabilities&lt;/h4&gt;
&lt;p&gt;Though it can be used for a variety of things, Bash is ideally used for scripting and automation.&lt;/p&gt;
&lt;h4 id=&quot;crossplatformcompatibility&quot;&gt;&lt;strong&gt;Cross-&lt;/strong&gt;p&lt;strong&gt;latform&lt;/strong&gt; &lt;strong&gt;c&lt;/strong&gt;ompatibility&lt;/h4&gt;
&lt;p&gt;Bash is the default on most Linux distros and can also be used on MacOS and Windows via the &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/wsl/install&quot;&gt;Windows Subsystem for Linux(WSL)&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Default&lt;/strong&gt; &lt;strong&gt;s&lt;/strong&gt;hell &lt;strong&gt;s&lt;/strong&gt;tatus&lt;/h4&gt;
&lt;p&gt;Bash is found on nearly every Unix-like system, making it easier for users of these systems to start using it without going through the process of installation.&lt;/p&gt;

&lt;h3&gt;Common &lt;strong&gt;u&lt;/strong&gt;se &lt;strong&gt;c&lt;/strong&gt;ases for Bash&lt;/h3&gt;
&lt;h4 id=&quot;systemadministrationandtaskautomation&quot;&gt;&lt;strong&gt;System administration and task automation&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Bash can be used to run system admin functions like maintenance, and monitoring of system resources like RAM, CPU, and disk management. Additionally, it is used to manage system users, permissions, and privileges.&lt;/p&gt;
&lt;h4 id=&quot;writingscriptsforlinuxandmacosenvironments&quot;&gt;&lt;strong&gt;Writing scripts for Linux and macOS environments&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;On Unix-based systems like Kali and MacOS, Bash can be used to create automation for routine tasks, build and compile software, or even write execution scripts for software.&lt;/p&gt;
&lt;h4 id=&quot;networkingadministration&quot;&gt;&lt;strong&gt;Networking administration&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;The Bash shell can be used to configure, test, and manage system networks, and communicate with remote systems via SSH setup firewalls.&lt;/p&gt;
&lt;h4 id=&quot;automation&quot;&gt;&lt;strong&gt;Automation&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Automation is a very big part of the &lt;a href=&quot;https://blog.logrocket.com/creating-a-cli-tool-with-node-js/&quot;&gt;command line interface&lt;/a&gt;, and the Bash shell is useful in both writing and executing scripts used to create system automation. Processes like backups, generating reports, and processing data at intervals. Its access to system resources, advanced yet simple style of commands, and native integration into Unix systems make it an effective shell.&lt;/p&gt;
&lt;h3&gt;Setting up Bash&lt;/h3&gt;
&lt;p&gt;If you use a system where Zsh or CMD is the default shell but would like to use Bash, here is a quick guide to help you set it up:&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Bash f&lt;/strong&gt;or Windows&lt;/h4&gt;
&lt;p&gt;You can use Bash on a Windows host using different methods as highlighted in the table above. The most straightforward way — especially for individuals having issues with using the Windows Subsystem for Linux due to virtualization — is by using Git Bash.&lt;/p&gt;
&lt;p&gt;Git Bash is an app for Windows computers that allows Windows users to have a Git CLI experience.&lt;/p&gt;
&lt;p&gt;Go to the Git Bash &lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;download page&lt;/a&gt;, and download the latest version:&lt;/p&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; data-attachment-id=&quot;202294&quot; data-permalink=&quot;https://blog.logrocket.com/bash-vs-zsh/attachment/1_git-bash-download-page/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/1_git-bash-download-page.jpeg&quot; data-orig-size=&quot;895,421&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;1_git-bash-download-page&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/1_git-bash-download-page.jpeg?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/1_git-bash-download-page.jpeg?w=895&quot; class=&quot;aligncenter size-full wp-image-202294&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/1_git-bash-download-page.jpeg&quot; alt=&quot;git bash download page&quot; width=&quot;895&quot; height=&quot;421&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/1_git-bash-download-page.jpeg 895w, https://blog.logrocket.com/wp-content/uploads/2025/03/1_git-bash-download-page.jpeg?resize=300,141 300w, https://blog.logrocket.com/wp-content/uploads/2025/03/1_git-bash-download-page.jpeg?resize=768,361 768w&quot; sizes=&quot;(max-width: 895px) 100vw, 895px&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;After downloading, install the application. During installation, stick to any installation checkbox that is recommended, except if you need a specific feature that can be configured during the installation process:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; data-attachment-id=&quot;202295&quot; data-permalink=&quot;https://blog.logrocket.com/bash-vs-zsh/attachment/2_git-bash-installation-page/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/2_git-bash-installation-page.png&quot; data-orig-size=&quot;503,400&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;2_git-bash-installation-page&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/2_git-bash-installation-page.png?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/2_git-bash-installation-page.png?w=503&quot; class=&quot;aligncenter size-full wp-image-202295&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/2_git-bash-installation-page.png&quot; alt=&quot;git bash installation page&quot; width=&quot;503&quot; height=&quot;400&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/2_git-bash-installation-page.png 503w, https://blog.logrocket.com/wp-content/uploads/2025/03/2_git-bash-installation-page.png?resize=300,239 300w&quot; sizes=&quot;auto, (max-width: 503px) 100vw, 503px&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;Once fully installed, from your search bar, search for Git and click on Git Bash as an administrator:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; data-attachment-id=&quot;202296&quot; data-permalink=&quot;https://blog.logrocket.com/bash-vs-zsh/attachment/3_setting-git-bash-as-administrator/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/3_setting-git-bash-as-administrator.jpeg&quot; data-orig-size=&quot;895,482&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;3_setting-git-bash-as-administrator&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/3_setting-git-bash-as-administrator.jpeg?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/3_setting-git-bash-as-administrator.jpeg?w=895&quot; class=&quot;aligncenter size-full wp-image-202296&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/3_setting-git-bash-as-administrator.jpeg&quot; alt=&quot;git bash administrator&quot; width=&quot;895&quot; height=&quot;482&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/3_setting-git-bash-as-administrator.jpeg 895w, https://blog.logrocket.com/wp-content/uploads/2025/03/3_setting-git-bash-as-administrator.jpeg?resize=300,162 300w, https://blog.logrocket.com/wp-content/uploads/2025/03/3_setting-git-bash-as-administrator.jpeg?resize=768,414 768w&quot; sizes=&quot;auto, (max-width: 895px) 100vw, 895px&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;Once everything is settled, and your Bash opens, you should see this:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; data-attachment-id=&quot;202297&quot; data-permalink=&quot;https://blog.logrocket.com/bash-vs-zsh/attachment/4_screen-when-bash-opens/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/4_screen-when-bash-opens.png&quot; data-orig-size=&quot;895,504&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;4_screen-when-bash-opens&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/4_screen-when-bash-opens.png?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/4_screen-when-bash-opens.png?w=895&quot; class=&quot;aligncenter size-full wp-image-202297&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/4_screen-when-bash-opens.png&quot; alt=&quot;screen when bash opens&quot; width=&quot;895&quot; height=&quot;504&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/4_screen-when-bash-opens.png 895w, https://blog.logrocket.com/wp-content/uploads/2025/03/4_screen-when-bash-opens.png?resize=300,169 300w, https://blog.logrocket.com/wp-content/uploads/2025/03/4_screen-when-bash-opens.png?resize=768,432 768w&quot; sizes=&quot;auto, (max-width: 895px) 100vw, 895px&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;This is where you can utilize Bash functions as a Windows user.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Bash for Mac&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;If you are a Mac user, you should know that while Zsh replaced Bash, it only did so as the default shell. Thus, Bash still exists in MacBooks. Their coexistence is similar to how CMD and PowerShell are both existing in Windows hosts, with the user having the ability to choose their default shell.&lt;/p&gt;
&lt;p&gt;To use Bash as the default on your Mac, you can type in Bash on your terminal. This will configure the terminal to recognize any commands typed afterwards as a Bash command, until that session is closed. Alternatively, you can turn it as your default shell by using the change shell command:&lt;/p&gt;
&lt;pre class=&quot;language-bash hljs&quot;&gt;chsh -s /bin/bash
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;chsh&lt;/code&gt; is the command for changing the shell, the &lt;code&gt;-s&lt;/code&gt; command specifies the shell you are changing to, and the &lt;code&gt;/bin/bash&lt;/code&gt; is your shell’s path.&lt;/p&gt;
&lt;p&gt;It is worth noting that the Bash used on Mac is outdated. You may have to manually install the latest version to enjoy more up-to-date features. To do that, use the package manager of Mac by typing brew &lt;code&gt;install bash&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Essential Bash &lt;strong&gt;c&lt;/strong&gt;ommands&lt;/h3&gt;
&lt;table class=&quot;tg&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tg-k7lw&quot;&gt;Command&lt;/th&gt;
&lt;th class=&quot;tg-k7lw&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-lboi&quot;&gt;&lt;code&gt;pwd&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-lboi&quot;&gt;Show current directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-lboi&quot;&gt;&lt;code&gt;cd [dir]&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-lboi&quot;&gt;Change directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-lboi&quot;&gt;&lt;code&gt;ls&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-lboi&quot;&gt;List files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-lboi&quot;&gt;&lt;code&gt;cp \[src\] [dest]&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-lboi&quot;&gt;Copy file/directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;&lt;code&gt;mv \[src\] [dest]&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Move/rename file/directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;&lt;code&gt;rm [file]&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Remove file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;&lt;code&gt;mkdir [dir]&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Create directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;&lt;code&gt;touch [file]&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Create an empty file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;&lt;code&gt;cat [file]&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Show file content&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;&lt;code&gt;head [file]&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Show first lines of a file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;&lt;code&gt;tail [file]&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Show last lines of a file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;&lt;code&gt;grep \[pattern\] [file]&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Search pattern in file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;&lt;code&gt;find [path] -name [pattern]&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Find files by name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;&lt;code&gt;chmod \[permissions\] [file]&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Change file permissions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;&lt;code&gt;ps&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Show running processes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;&lt;code&gt;top&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Real-time process monitor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;&lt;code&gt;kill [PID]&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Kill a process by ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;&lt;code&gt;df&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Show disk space usage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;&lt;code&gt;free&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Show memory usage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;&lt;code&gt;ping [host]&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Test network connectivity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;&lt;code&gt;curl [URL]&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Transfer data from/to server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;&lt;code&gt;tar -czf \[archive\] [dir]&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Create a compressed archive&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;&lt;code&gt;tar -xzf [archive]&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Extract a compressed archive&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;&lt;code&gt;echo $[var]&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Show environment variable value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;&lt;code&gt;export [var]=[value]&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Set an environment variable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;&lt;code&gt;history&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Show command history&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;&lt;code&gt;diff \[file1\] [file2]&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Compare files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;&lt;code&gt;fdisk -l&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;List disk partitions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;&lt;code&gt;mount \[device\] [dir]&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;tg-cly1&quot;&gt;Mount a device&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;what-is-zsh-zshell&quot;&gt;What is Zsh (Z Shell)?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ibm.com/docs/en/zos/3.1.0?topic=descriptions-zsh-z-shell&quot;&gt;Zsh (Z Shell)&lt;/a&gt; is a Unix shell that is an improved and more sophisticated alternative to the default Bash shell. Developed in 1990, Zsh borrows features from the &lt;a href=&quot;https://en.wikipedia.org/wiki/KornShell&quot;&gt;Korn Shell&lt;/a&gt; (ksh) and the &lt;a href=&quot;http://techtarget.com/whatis/definition/C-shell&quot;&gt;C shell&lt;/a&gt; (csh) but adds more sophisticated features like improved tab completion, better scripting, and personalization. The flexibility and Bash-command compatibility of Zsh made it the go-to for most developers.&lt;/p&gt;
&lt;p&gt;Apple replaced the default shell on macOS from Bash to Zsh in 2019 with macOS Catalina since Zsh possesses more contemporary features and better long-term support.&lt;/p&gt;
&lt;h3 id=&quot;corefeaturesandstrengths&quot;&gt;&lt;strong&gt;Core&lt;/strong&gt; &lt;strong&gt;f&lt;/strong&gt;eatures and &lt;strong&gt;s&lt;/strong&gt;trengths of Zsh&lt;/h3&gt;
&lt;h4 id=&quot;advancedautocompletion&quot;&gt;&lt;strong&gt;Advanced&lt;/strong&gt; &lt;strong&gt;a&lt;/strong&gt;uto-&lt;strong&gt;&lt;em&gt;c&lt;/em&gt;&lt;/strong&gt;ompletion&lt;/h4&gt;
&lt;p&gt;One of Zsh’s biggest strengths is that it comes with context-aware autocompletion built into its shell environment for commands, paths, and arguments.&lt;/p&gt;
&lt;h4 id=&quot;spellingcorrection&quot;&gt;&lt;strong&gt;Spelling&lt;/strong&gt; &lt;strong&gt;c&lt;/strong&gt;orrection&lt;/h4&gt;
&lt;p&gt;Aside from its spelling correction, Zsh also corrects typos and suggests previously used text as you type, saving time and helping newbies write scripts more efficiently.&lt;/p&gt;
&lt;h4 id=&quot;enhancedglobbing&quot;&gt;&lt;strong&gt;Enhanced&lt;/strong&gt; &lt;strong&gt;g&lt;/strong&gt;lobbing&lt;/h4&gt;
&lt;p&gt;Though Bash comes with wildcard matches, the one of Zsh is more powerful and accurate. For example, &lt;code&gt;ls&lt;/code&gt; &lt;code&gt;**/*.txt&lt;/code&gt; would search for all txt files in the current working directory.&lt;/p&gt;
&lt;h4 id=&quot;pluginandthemesupport&quot;&gt;&lt;strong&gt;Plugin and&lt;/strong&gt; &lt;strong&gt;t&lt;/strong&gt;heme &lt;strong&gt;s&lt;/strong&gt;upport&lt;/h4&gt;
&lt;p&gt;Zsh comes with better customization on the prompt, command, and shortcuts. Additionally, it supports Oh My Zsh, a framework that allows Zsh users to access thousands of plugins for extra customization, some of which include Git, Docker, and even Python.&lt;/p&gt;
&lt;p&gt;Among its customization benefits, it also permits users to tweak their &lt;code&gt;zshrc&lt;/code&gt; file to modify shell behaviour.&lt;/p&gt;
&lt;h4 id=&quot;syntaxhighlighting&quot;&gt;&lt;strong&gt;Syntax&lt;/strong&gt; &lt;strong&gt;h&lt;/strong&gt;ighlighting&lt;/h4&gt;
&lt;p&gt;Its superior syntax highlighting makes it easier for Zsh users to distinguish between commands and parameters in the shell.&lt;/p&gt;
&lt;h3 id=&quot;commonusecasesforzsh&quot;&gt;&lt;strong&gt;Common&lt;/strong&gt; &lt;strong&gt;u&lt;/strong&gt;se &lt;strong&gt;c&lt;/strong&gt;ases for Zsh&lt;/h3&gt;
&lt;h4 id=&quot;interactiveterminalusefordevelopers&quot;&gt;&lt;strong&gt;Interactive&lt;/strong&gt; &lt;strong&gt;t&lt;/strong&gt;erminal &lt;strong&gt;u&lt;/strong&gt;se for &lt;strong&gt;d&lt;/strong&gt;evelopers&lt;/h4&gt;
&lt;p&gt;Developers who spend a lot of time in the terminal would benefit from its autosuggestions, fuzzy searching, and typo correction. Multiple plugins support streamlining their workflow and save time.&lt;/p&gt;
&lt;h4 id=&quot;systemadminandservermanagement&quot;&gt;&lt;strong&gt;System&lt;/strong&gt; &lt;strong&gt;a&lt;/strong&gt;dmin and &lt;strong&gt;s&lt;/strong&gt;erver &lt;strong&gt;m&lt;/strong&gt;anagement&lt;/h4&gt;
&lt;p&gt;While Bash can originally perform these actions, Zsh also has the ability to perform server management and system administration using its commands. This helps ensure the MacOS Kali users with Zsh as their default shell can better manage foreground and background processes.&lt;/p&gt;
&lt;h4 id=&quot;devopsandcloudmanagement&quot;&gt;&lt;strong&gt;DevOps and&lt;/strong&gt; &lt;strong&gt;c&lt;/strong&gt;loud &lt;strong&gt;m&lt;/strong&gt;anagement&lt;/h4&gt;
&lt;p&gt;Its plugin support lets Zsh users manage cloud and &lt;a href=&quot;https://blog.logrocket.com/from-front-end-developer-to-a-devops-an-intro-to-ci-cd-7a8a8713fb34/&quot;&gt;DevOps&lt;/a&gt; services, especially for Terraform and AWS CLI users.&lt;/p&gt;
&lt;p&gt;In general, users who require advanced functionalities and extra customization for an intuitive flow would love its rich plugin support, high theming, and intelligent completion. While users who want to stick to the conventional smart way of doing more with fewer configurations would benefit from Bash and its built-in features.&lt;/p&gt;
&lt;h3&gt;Setting up Zsh&lt;/h3&gt;
&lt;p&gt;Zsh is the default on Mac. Thus, we won’t be discussing its installation for Mac users in this section. Rather, we would explore using Zsh on Windows and Linux systems that don’t have it as the default shell.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Zsh&lt;/strong&gt; f&lt;strong&gt;or Windows&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Zsh, just like Bash, can be run on Windows using similar methods. WSL and Cygwin.&lt;/p&gt;
&lt;p&gt;Download Cygwin from the &lt;a href=&quot;https://cygwin.com/&quot;&gt;official site&lt;/a&gt; by first downloading the &lt;code&gt;.exe&lt;/code&gt; file. Click on the downloaded &lt;code&gt;.exe&lt;/code&gt; file to get the full package:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; data-attachment-id=&quot;202298&quot; data-permalink=&quot;https://blog.logrocket.com/bash-vs-zsh/attachment/5_download-cygwin-package/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/5_download-cygwin-package.jpeg&quot; data-orig-size=&quot;895,385&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;5_download-cygwin-package&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/5_download-cygwin-package.jpeg?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/5_download-cygwin-package.jpeg?w=895&quot; class=&quot;aligncenter size-full wp-image-202298&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/5_download-cygwin-package.jpeg&quot; alt=&quot;downloading the cygwin package&quot; width=&quot;895&quot; height=&quot;385&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/5_download-cygwin-package.jpeg 895w, https://blog.logrocket.com/wp-content/uploads/2025/03/5_download-cygwin-package.jpeg?resize=300,129 300w, https://blog.logrocket.com/wp-content/uploads/2025/03/5_download-cygwin-package.jpeg?resize=768,330 768w&quot; sizes=&quot;auto, (max-width: 895px) 100vw, 895px&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;During installation, type in Zsh as the shell you want to get, and click &lt;strong&gt;Next&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; data-attachment-id=&quot;202299&quot; data-permalink=&quot;https://blog.logrocket.com/bash-vs-zsh/attachment/6_cygwin-setup/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/6_cygwin-setup-e1741915849259.png&quot; data-orig-size=&quot;895,497&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;6_cygwin-setup&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/6_cygwin-setup-e1741915849259.png?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/6_cygwin-setup-e1741915849259.png?w=895&quot; class=&quot;aligncenter size-full wp-image-202299&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/6_cygwin-setup-e1741915849259.png&quot; alt=&quot;cygwin setup&quot; width=&quot;895&quot; height=&quot;497&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/6_cygwin-setup-e1741915849259.png 895w, https://blog.logrocket.com/wp-content/uploads/2025/03/6_cygwin-setup-e1741915849259.png?resize=300,167 300w, https://blog.logrocket.com/wp-content/uploads/2025/03/6_cygwin-setup-e1741915849259.png?resize=768,426 768w&quot; sizes=&quot;auto, (max-width: 895px) 100vw, 895px&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Zsh for&lt;/strong&gt; &lt;strong&gt;Linux and Windows users&lt;/strong&gt; (via WSL):&lt;/h4&gt;
&lt;p&gt;If you prefer using WSL, install it via the command &lt;code&gt;wsl - - install&lt;/code&gt;. Once installed, you can use&lt;br&gt;
the sudo command to install Zsh. This also applies for Linux users:&lt;/p&gt;
&lt;pre class=&quot;language-bash hljs&quot;&gt;sudo apt update &amp;amp;&amp;amp; sudo apt install zsh -y
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;sudo&lt;/code&gt; is used for superuser access. The &lt;code&gt;-y&lt;/code&gt; is used for smooth installation, as it automatically&lt;br&gt;
answers &lt;code&gt;YES&lt;/code&gt; for every question asked during installation. If you’d prefer to manually install and&lt;br&gt;
inspect it, you can skip that param.&lt;/p&gt;
&lt;p&gt;After installation, verify that your installed tool is installed with this command: &lt;code&gt;zsh -- version&lt;/code&gt;.&lt;br&gt;
Once your installation is completed, you can then proceed to make it your default shell using&lt;br&gt;
&lt;code&gt;chsh -s $(which zsh)&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Configuring Zsh with Oh My Zsh&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://ohmyz.sh/&quot;&gt;Oh My Zsh&lt;/a&gt; is an open-source Zsh framework used to add extra functionalities for Zsh, turbocharging the entire Zsh user experience. Oh My Zsh’s extra advanced features cause users who frequently use the terminal to gravitate towards Zsh.&lt;/p&gt;
&lt;h4 id=&quot;installingohmyzsh&quot;&gt;&lt;strong&gt;Installing Oh My Zsh&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;To install Oh My Zsh from your Zsh terminal, you can either use &lt;code&gt;curl&lt;/code&gt;, &lt;code&gt;fetch&lt;/code&gt;,or &lt;code&gt;wget&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;curl&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-bash hljs&quot;&gt;sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;
&lt;/pre&gt;
&lt;p&gt;Using &lt;code&gt;fetch&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-bash hljs&quot;&gt;sh -c &quot;$(fetch -o - https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;
&lt;/pre&gt;
&lt;p&gt;Using &lt;code&gt;wget&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-bash hljs&quot;&gt;sh -c &quot;$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;
&lt;/pre&gt;
&lt;p&gt;If for some reason, you are unable to use the raw.githubusercontent.com, kindly replace the&lt;br&gt;
entire command with &lt;code&gt;https://install.ohmyz.sh/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After Oh My Zsh has been installed, restart your terminal to effect the changes.&lt;/p&gt;
&lt;h3 id=&quot;popularpluginsforproductivity&quot;&gt;&lt;strong&gt;Popular&lt;/strong&gt; &lt;strong&gt;p&lt;/strong&gt;lugins for productivity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Auto-suggestions&lt;/strong&gt; &lt;strong&gt;—&lt;/strong&gt; Zsh lets you easily use previous commands by utilizing context-aware technologies&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Use aliases —&lt;/strong&gt; Oh My Zsh uses aliases to define commands, making remembrance easier&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Track directories&lt;/strong&gt; &lt;strong&gt;—&lt;/strong&gt; Users who have Oh My Zsh installed can use the &lt;strong&gt;Z&lt;/strong&gt; command to track their most visited directories&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Web search&lt;/strong&gt; &lt;strong&gt;—&lt;/strong&gt; Lets users make web searches on Google, Bing, and YouTube (e.g. &lt;code&gt;google oh-my-zsh&lt;/code&gt;or &lt;code&gt;web-search google oh-my-zh&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;optimizingzshperformance&quot;&gt;&lt;strong&gt;Optimizing Zsh performance&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Due to the number of plugins Zsh supports, it can run very slowly. Users who may require both speed and advanced customizations may be caught in a loop on which to choose.&lt;/p&gt;
&lt;p&gt;Luckily for them, just as &lt;a href=&quot;https://blog.logrocket.com/top-10-vs-code-extensions-2021/&quot;&gt;VS Code extensions&lt;/a&gt; can be disabled to make them lighter, the same can be said for Zsh (Oh My Zsh).&lt;/p&gt;
&lt;p&gt;Disabling Zsh’s plugins can be quite tricky, but you have to understand that you should not delete the script itself — just the plugins. You can either do this via the command method or by manually deleting from the file.&lt;/p&gt;
&lt;p&gt;The command method of disabling a plugin is: omz plug-in disable [plugin name]. i.e. &lt;code&gt;omz plug-in disable git&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To confirm that your plugin is disabled, &lt;code&gt;run omz plugin list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The manual method of removing your plugin is via the &lt;code&gt;zshrc&lt;/code&gt; file. Open the file via the command &lt;code&gt;nano ~/.zhsrc &lt;/code&gt;Locate the plugin line and remove the plugin you want from this list, then exit the file.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Bash and Zsh are both important tools for scripting and working around different things in the interactive shell, but their distinctive differences make each shell more applicable for users with different needs.&lt;/p&gt;
&lt;p&gt;Ultimately, those who love simplicity and just want to get their stuff done would choose Bash. Advanced users (or those whose work has turned the terminal their second home) might gravitate towards Zsh.&lt;/p&gt;
&lt;p&gt;But then, there is no crime in having both running on the same system, right? That’s one thing Mac users enjoy out-of-the-box. But regardless of your system, you can still run any or both of these powerful shells with just some minimal workarounds, which have been explored here.&lt;/p&gt;


&lt;/div&gt;
            &lt;style&gt;
    .share-icon.share-twitter span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-twitter.svg&quot;);
    }

    .share-icon.share-reddit span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-reddit.svg&quot;);
    }

    .share-icon.share-linkedin span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-linkedin.svg&quot;);
    }

    .share-icon.share-facebook span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-facebook.svg&quot;);
    }
&lt;/style&gt;

&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon sd-sharing&quot;&gt;&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;&lt;div class=&quot;sd-content&quot;&gt;&lt;ul&gt;&lt;li class=&quot;share-twitter&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-twitter-202292&quot; class=&quot;share-twitter sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/bash-vs-zsh/?share=twitter&quot; target=&quot;_blank&quot; title=&quot;Click to share on Twitter&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Twitter (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-reddit&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;&quot; class=&quot;share-reddit sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/bash-vs-zsh/?share=reddit&quot; target=&quot;_blank&quot; title=&quot;Click to share on Reddit&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Reddit (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-linkedin&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-linkedin-202292&quot; class=&quot;share-linkedin sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/bash-vs-zsh/?share=linkedin&quot; target=&quot;_blank&quot; title=&quot;Click to share on LinkedIn&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on LinkedIn (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-facebook&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-facebook-202292&quot; class=&quot;share-facebook sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/bash-vs-zsh/?share=facebook&quot; target=&quot;_blank&quot; title=&quot;Click to share on Facebook&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Facebook (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-end&quot;&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;            &lt;ul id=&quot;post-tags&quot;&gt;
            &lt;li&gt;
        &lt;a rel=&quot;tag&quot; href=&quot;https://blog.logrocket.com/tag/bash/&quot;&gt;#bash&lt;/a&gt;
        &lt;/li&gt;
            &lt;li&gt;
        &lt;a rel=&quot;tag&quot; href=&quot;https://blog.logrocket.com/tag/zsh/&quot;&gt;#zsh&lt;/a&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
            &lt;div class=&quot;post-popup&quot; data-popup-name=&quot;dev-cab&quot;&gt;
    &lt;i data-popup-dismiss=&quot;&quot; class=&quot;fa-solid fa-xmark post-popup__exit&quot;&gt;&lt;/i&gt;
    &lt;div class=&quot;post-popup__page active&quot;&gt;
        &lt;p class=&quot;post-popup__title&quot;&gt;Would you be interested in joining LogRocket&#39;s developer community? &lt;/p&gt;
        &lt;div class=&quot;post-popup__buttons&quot;&gt;
            &lt;button data-popup-next=&quot;&quot; class=&quot;lr-button&quot;&gt;Yea&lt;/button&gt;
            &lt;button data-popup-dismiss=&quot;&quot; class=&quot;lr-button&quot;&gt;No Thanks&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;post-popup__page&quot;&gt;
        &lt;p&gt;
            Join LogRocket’s Content Advisory Board. You’ll help inform the type of
            content we create and get access to exclusive meetups, social accreditation,
            and swag.
        &lt;/p&gt;
        &lt;a data-popup-dismiss=&quot;&quot; class=&quot;lr-button&quot; target=&quot;__blank&quot; href=&quot;https://lp.logrocket.com/blg/content-advisory-board-signup&quot;&gt;Sign up now&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
        &lt;/div&gt;
    </description><link>https://blog.logrocket.com/bash-vs-zsh/</link><guid isPermaLink="false">https://blog.logrocket.com/bash-vs-zsh/</guid><pubDate>Tue, 18 Mar 2025 16:00:00 GMT</pubDate><author>Wisdom Ekpotu</author></item><item><title>How to use the Swiper.js slider library</title><description>&lt;aside&gt;
            &lt;div class=&quot;sticky&quot;&gt;
                                
&lt;div class=&quot;toc-container&quot; id=&quot;post-toc&quot;&gt;
            &lt;div class=&quot;toc-header&quot;&gt;
            &lt;span class=&quot;toc-title&quot;&gt;
                Table of contents            &lt;/span&gt;
            &lt;i class=&quot;fa fa-chevron-down toc-collapse&quot;&gt;&lt;/i&gt;
            &lt;i class=&quot;hide fa fa-chevron-up toc-expand&quot;&gt;&lt;/i&gt;
        &lt;/div&gt;
        
&lt;ul data-toc-name=&quot;root&quot; class=&quot;toc&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/getting-started-swiper-js/#what-swiperjs&quot;&gt;What is Swiper.js?&lt;/a&gt;
        &lt;ul data-toc-name=&quot;what-swiperjs&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/getting-started-swiper-js/#why-use-swiperjs&quot;&gt;Why use Swiper.js?&lt;/a&gt;
        &lt;ul data-toc-name=&quot;why-use-swiperjs&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/getting-started-swiper-js/#installation-setup&quot;&gt;Installation and setup&lt;/a&gt;
        &lt;ul data-toc-name=&quot;installation-setup&quot; class=&quot;toc-subheading&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/getting-started-swiper-js/#&quot;&gt;Option 1: Using a CDN&lt;/a&gt;
        &lt;ul data-toc-name=&quot;&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/getting-started-swiper-js/#download-swiper-assets&quot;&gt;Option 2: Download Swiper assets&lt;/a&gt;
        &lt;ul data-toc-name=&quot;download-swiper-assets&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/getting-started-swiper-js/#installing-via-npm&quot;&gt;Option 3: Installing via&lt;code&gt;npm&lt;/code&gt;&lt;/a&gt;
        &lt;ul data-toc-name=&quot;installing-via-npm&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/getting-started-swiper-js/#basic-setup-html-css-javascript&quot;&gt;Basic setup (HTML, CSS, JavaScript)&lt;/a&gt;
        &lt;ul data-toc-name=&quot;basic-setup-html-css-javascript&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/getting-started-swiper-js/#features-available-swiperjs&quot;&gt;Features available in Swiper.js&lt;/a&gt;
        &lt;ul data-toc-name=&quot;features-available-swiperjs&quot; class=&quot;toc-subheading&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/getting-started-swiper-js/#swiper-styles&quot;&gt;Swiper styles&lt;/a&gt;
        &lt;ul data-toc-name=&quot;swiper-styles&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/getting-started-swiper-js/#swiper-methods-properties&quot;&gt;Swiper method and properties&lt;/a&gt;
        &lt;ul data-toc-name=&quot;swiper-methods-properties&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/getting-started-swiper-js/#swiper-events&quot;&gt;Swiper events&lt;/a&gt;
        &lt;ul data-toc-name=&quot;swiper-events&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/getting-started-swiper-js/#key-swiper-modules&quot;&gt;Key swiper modules&lt;/a&gt;
        &lt;ul data-toc-name=&quot;key-swiper-modules&quot; class=&quot;toc-subheading&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/getting-started-swiper-js/#navigation&quot;&gt;Navigation&lt;/a&gt;
        &lt;ul data-toc-name=&quot;navigation&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/getting-started-swiper-js/#pagination&quot;&gt;Pagination&lt;/a&gt;
        &lt;ul data-toc-name=&quot;pagination&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/getting-started-swiper-js/#lazy-loading&quot;&gt;Lazy loading&lt;/a&gt;
        &lt;ul data-toc-name=&quot;lazy-loading&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/getting-started-swiper-js/#scrollbar&quot;&gt;Scrollbar&lt;/a&gt;
        &lt;ul data-toc-name=&quot;scrollbar&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/getting-started-swiper-js/#looping&quot;&gt;Looping&lt;/a&gt;
        &lt;ul data-toc-name=&quot;looping&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/getting-started-swiper-js/#integraiton-javascript-frameworks&quot;&gt;Integration with JavaScript frameworks&lt;/a&gt;
        &lt;ul data-toc-name=&quot;integraiton-javascript-frameworks&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/getting-started-swiper-js/#react-integration&quot;&gt;React integration&lt;/a&gt;
        &lt;ul data-toc-name=&quot;react-integration&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/getting-started-swiper-js/#swiper-props-hooks&quot;&gt;Swiper props and hooks&lt;/a&gt;
        &lt;ul data-toc-name=&quot;swiper-props-hooks&quot; class=&quot;toc-subheading&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/getting-started-swiper-js/#swipe-props&quot;&gt;Swipe props&lt;/a&gt;
        &lt;ul data-toc-name=&quot;swipe-props&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/getting-started-swiper-js/#swiperslide&quot;&gt;SwiperSlide props&lt;/a&gt;
        &lt;ul data-toc-name=&quot;swiperslide&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/getting-started-swiper-js/#swiper-hooks&quot;&gt;Swiper hooks&lt;/a&gt;
        &lt;ul data-toc-name=&quot;swiper-hooks&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/getting-started-swiper-js/#swiper-vue&quot;&gt;Swiper with Vue&lt;/a&gt;
        &lt;ul data-toc-name=&quot;swiper-vue&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/getting-started-swiper-js/#swiper-element&quot;&gt;Swiper Element&lt;/a&gt;
        &lt;ul data-toc-name=&quot;swiper-element&quot; class=&quot;toc-subheading&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/getting-started-swiper-js/#swiper-elements&quot;&gt;Swiper Element usage&lt;/a&gt;
        &lt;ul data-toc-name=&quot;swiper-elements&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/getting-started-swiper-js/#usage-vue&quot;&gt;Usage in Vue&lt;/a&gt;
        &lt;ul data-toc-name=&quot;usage-vue&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/div&gt;
                &lt;!-- Sidebar gutter ad --&gt;
                
            &lt;/div&gt;
        &lt;/aside&gt;
        &lt;div id=&quot;the-content-container&quot;&gt;
            
&lt;div class=&quot;lr-content&quot;&gt;
    &lt;!-- TEMP: .article-post is only used for adinserter to hook into --&gt;
    &lt;div class=&quot;article-post&quot;&gt;&lt;/div&gt;
    
&lt;p&gt;In web development, creating interactive and engaging user interfaces is crucial for retaining user attention. Sliders are a popular way to showcase content in a dynamic, visually appealing format while maximizing space.&lt;/p&gt;
&lt;img fetchpriority=&quot;high&quot; decoding=&quot;async&quot; width=&quot;895&quot; height=&quot;597&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/how-swiperjs-slider-library-logrocket.png&quot; class=&quot;attachment-full size-full wp-post-image&quot; alt=&quot;&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/how-swiperjs-slider-library-logrocket.png 895w, https://blog.logrocket.com/wp-content/uploads/2025/03/how-swiperjs-slider-library-logrocket.png?resize=300,200 300w, https://blog.logrocket.com/wp-content/uploads/2025/03/how-swiperjs-slider-library-logrocket.png?resize=768,512 768w&quot; sizes=&quot;(max-width: 895px) 100vw, 895px&quot; data-attachment-id=&quot;202256&quot; data-permalink=&quot;https://blog.logrocket.com/getting-started-swiper-js/attachment/how-swiperjs-slider-library-logrocket/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/how-swiperjs-slider-library-logrocket.png&quot; data-orig-size=&quot;895,597&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;how-swiperjs-slider-library-logrocket&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/how-swiperjs-slider-library-logrocket.png?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/how-swiperjs-slider-library-logrocket.png?w=895&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;p&gt;With a variety of slider libraries available, selecting one that balances performance, responsiveness, and functionality can be a challenge.&lt;/p&gt;
&lt;p&gt;In this article, we’ll dive into Swiper.js, a powerful and flexible slider library. We’ll walk through how to install and configure it, explore its core features, and demonstrate how to integrate it with frameworks like React and Vue for seamless UI development.&lt;/p&gt;
&lt;h2 id=&quot;what-swiperjs&quot;&gt;What is Swiper.js?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://swiperjs.com/&quot;&gt;Swiper.js&lt;/a&gt; is a modern, flexible JavaScript library that enables developers to easily integrate touch-enabled sliders with smooth animations and seamless interactions into their websites and web applications. Designed with a mobile-first approach, Swiper.js ensures flawless performance on both mobile and desktop devices, supporting gestures such as swiping, scrolling, and pinch-to-zoom.&lt;/p&gt;
&lt;p&gt;As a free and open-source library with over 40k stars on &lt;a href=&quot;https://github.com/nolimits4web/swiper&quot;&gt;GitHub&lt;/a&gt; and contributions from 300+ developers, Swiper.js is regularly updated to stay ahead of evolving web standards. It also boasts a modular plugin system and works seamlessly with popular frameworks like React, Vue, and Svelte, making it a go-to choice for developers seeking dynamic, user-friendly experiences.&lt;/p&gt;
&lt;p&gt;Key features include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intuitive touch and mouse event handling for smooth navigation&lt;/li&gt;
&lt;li&gt;Responsive breakpoints for adaptable layouts across screen sizes&lt;/li&gt;
&lt;li&gt;A rich ecosystem of plugins (e.g., pagination, lazy loading, parallax effects)&lt;/li&gt;
&lt;li&gt;Framework-specific integrations for React, Vue, and more&lt;/li&gt;
&lt;li&gt;Broad compatibility with iOS, Android, and modern desktop browsers&lt;/li&gt;
&lt;li&gt;RTL (right-to-left) layout support for diverse user needs&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;why-use-swiperjs&quot;&gt;Why use Swiper.js?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.logrocket.com/building-modern-sliders-html-css-swiper/&quot;&gt;Creating a slider&lt;/a&gt; from scratch can take a lot of time, especially when dealing with different browsers or touch gestures. Swiper.js streamlines this process by providing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Consistent performance across browsers&lt;/strong&gt; — It works well on Chrome, Firefox, Safari, and even older browsers&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Better performance —&amp;nbsp;&lt;/strong&gt;&amp;nbsp;It uses hardware acceleration for smooth transitions&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Customization options —&amp;nbsp;&lt;/strong&gt; You can change navigation arrows and transition effects using CSS or JavaScript&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Community support —&amp;nbsp;&lt;/strong&gt;It has thorough documentation and a supportive developer community&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;installation-setup&quot;&gt;Installation and setup&lt;/h2&gt;
&lt;p&gt;Before we explore Swiper.js features, let’s install and set up the library. You can add Swiper.js to your project in several ways: using a CDN, downloading it locally, or installing it with npm.&lt;/p&gt;
&lt;h3 id=&quot;&amp;quot;using-cdn&quot;&gt;Option 1: Using a CDN&lt;/h3&gt;
&lt;p&gt;To quickly use Swiper.js without installing anything, you can add it through a CDN. Just include the following &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags in your HTML file:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;&amp;lt;link
  rel=&quot;stylesheet&quot;
  href=&quot;https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css&quot;
/&amp;gt;

&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;
&lt;p&gt;If you use ES modules in the browser, there is also a CDN version available for that:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;&amp;lt;script type=&quot;module&quot;&amp;gt;
  import Swiper from &#39;https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.mjs&#39;

  const swiper = new Swiper(...)
&amp;lt;/script&amp;gt;
&lt;/pre&gt;
&lt;h3 id=&quot;download-swiper-assets&quot;&gt;Option 2: Download Swiper assets&lt;/h3&gt;
&lt;p&gt;If you prefer to use the Swiper files on your computer, you can download them from &lt;a href=&quot;https://www.jsdelivr.com/package/npm/swiper&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;installing-via-npm&quot;&gt;Option 3: Installing via&lt;code&gt;npm&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;For better project organization and management, you can install Swiper.js using npm:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;npm install swiper
&lt;/pre&gt;
&lt;p&gt;This method is great for using Swiper.js in frameworks such as React, Vue, or Next.js. Now you can import it into your JavaScript file like this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;// import Swiper JS
import Swiper from &#39;swiper&#39;;
// import Swiper styles
import &#39;swiper/css&#39;;

const swiper = new Swiper(...);
&lt;/pre&gt;
&lt;p&gt;Swiper only exports the core version by default, which does not include extra features like navigation and pagination. To use these features, you need to import them from &lt;code&gt;swiper/modules&lt;/code&gt; and set them up:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;// core version + navigation, pagination modules:

import Swiper from &#39;swiper&#39;;
import { Navigation, Pagination } from &#39;swiper/modules&#39;;

// import Swiper and modules styles
import &#39;swiper/swiper.min.css&#39;;
import &#39;swiper/modules/navigation.min.css&#39;;
import &#39;swiper/modules/pagination.min.css&#39;;


// init Swiper:
const swiper = new Swiper(&#39;.swiper&#39;, {
  // configure Swiper to use modules
  modules: [Navigation, Pagination],
  ...
});
&lt;/pre&gt;
&lt;p&gt;If you want to use Swiper with all features included, you should import it from &lt;code&gt;swiper/bundle&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;// import Swiper bundle with all modules installed
import Swiper from &#39;swiper/bundle&#39;;

// import styles bundle
import &#39;swiper/swiper-bundle.min.css&#39;;

// init Swiper:
const swiper = new Swiper(...);
&lt;/pre&gt;
&lt;h3 id=&quot;basic-setup-html-css-javascript&quot;&gt;Basic setup (HTML, CSS, JavaScript)&lt;/h3&gt;
&lt;p&gt;After installing Swiper.js, start by creating your HTML structure and then initialize it in JavaScript. Create a container with slides inside:&lt;/p&gt;
&lt;pre class=&quot;language-html hljs&quot;&gt;&amp;lt;div class=&quot;swiper&quot;&amp;gt;
  &amp;lt;!-- Additional required wrapper --&amp;gt;
  &amp;lt;div class=&quot;swiper-wrapper&quot;&amp;gt;
    &amp;lt;div class=&quot;swiper-slide&quot;&amp;gt;Slide 1&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;swiper-slide&quot;&amp;gt;Slide 2&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;swiper-slide&quot;&amp;gt;Slide 3&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;p&gt;After you set up the HTML structure, initialize Swiper in your script:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;// Initialize Swiper
const swiper = new Swiper(&#39;.swiper&#39;, {
  // Swiper options
});
&lt;/pre&gt;
&lt;p&gt;The Swiper object accepts two parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The target element for Swiper, which is a &lt;a href=&quot;https://blog.logrocket.com/level-up-your-css-selector-skills/&quot;&gt;CSS selector&lt;/a&gt; (&lt;code&gt;.swiper&lt;/code&gt;) for that element&lt;/li&gt;
&lt;li&gt;An object with configuration options. Examples of these options are navigation, pagination, modules, scrollbar, direction, loop, and more&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Swiper has an array of parameters that can be passed into its configuration options; visit its &lt;a href=&quot;https://swiperjs.com/swiper-api#parameters&quot;&gt;docs&lt;/a&gt; to view these.&lt;/p&gt;
&lt;p&gt;Now we have the basic setup for your Swiper slider by following the steps. Here’s what our setup looks like with some added CSS styles:&lt;img decoding=&quot;async&quot; data-attachment-id=&quot;202268&quot; data-permalink=&quot;https://blog.logrocket.com/getting-started-swiper-js/attachment/1_swiper-slider-css-layers/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/1_swiper-slider-css-layers.png&quot; data-orig-size=&quot;895,583&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;1_swiper-slider-css-layers&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/1_swiper-slider-css-layers.png?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/1_swiper-slider-css-layers.png?w=895&quot; class=&quot;aligncenter wp-image-202268 size-full&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/1_swiper-slider-css-layers.png&quot; alt=&quot;Swiper Slider With Css Layers&quot; width=&quot;895&quot; height=&quot;583&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/1_swiper-slider-css-layers.png 895w, https://blog.logrocket.com/wp-content/uploads/2025/03/1_swiper-slider-css-layers.png?resize=300,195 300w, https://blog.logrocket.com/wp-content/uploads/2025/03/1_swiper-slider-css-layers.png?resize=768,500 768w&quot; sizes=&quot;(max-width: 895px) 100vw, 895px&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;pre class=&quot;language-css hljs&quot;&gt;  html,
  body {
    position: relative;
    width: 100%;
    height: 100%;
  }

  body {
    background: #eee;
    font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
    font-size: 14px;
    color: #000;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .swiper {
    width: 600px;
    height: 400px;
  }

  .swiper-slide {
    text-align: center;
    font-size: 18px;
    background: #fff;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .swiper-slide img {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
&lt;/pre&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; data-attachment-id=&quot;202269&quot; data-permalink=&quot;https://blog.logrocket.com/getting-started-swiper-js/attachment/updated_2_swiper-instance-navigation-buttons/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/updated_2_swiper-instance-navigation-buttons.gif&quot; data-orig-size=&quot;895,688&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;updated_2_swiper-instance-navigation-buttons&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/updated_2_swiper-instance-navigation-buttons.gif?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/updated_2_swiper-instance-navigation-buttons.gif?w=895&quot; class=&quot;aligncenter wp-image-202269 size-full&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/updated_2_swiper-instance-navigation-buttons.gif&quot; alt=&quot;Swiper Instance For Navigation Buttons&quot; width=&quot;895&quot; height=&quot;688&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;As we move along, we’ll demo some of the configuration options.&lt;/p&gt;
&lt;h2 id=&quot;features-available-swiperjs&quot;&gt;Features available in Swiper.js&lt;/h2&gt;
&lt;p&gt;Swiper.js is a powerful touch slider library that can be customized easily. This section will cover:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Swiper styles&lt;/strong&gt; — Built-in CSS for simple styling&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Swiper methods and properties&lt;/strong&gt; — API to control the slider dynamically&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Swiper events&lt;/strong&gt; — Set up event listeners for custom behavior&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;swiper-styles&quot;&gt;Swiper styles&lt;/h3&gt;
&lt;p&gt;Swiper provides a variety of styles to easily customize your sliders, available in multiple formats such as CSS, Less, and SCSS for easy integration. Here’s an overview of the available styles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;strong&gt;swiper-bundle.css&lt;/strong&gt;&lt;/code&gt; — Includes all Swiper styles, including modules like Navigation and Pagination&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;strong&gt;swiper-bundle.min.css&lt;/strong&gt;&lt;/code&gt;&amp;nbsp;— A minified version of the full bundle&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;strong&gt;swiper/css&lt;/strong&gt;&lt;/code&gt;&amp;nbsp;— Contains core Swiper styles and all module-specific styles&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;swiper/less&lt;/code&gt;&lt;/strong&gt;&amp;nbsp;— Includes core Swiper Less styles and all module-specific styles&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;strong&gt;swiper/less/bundle&lt;/strong&gt;&lt;/code&gt;&amp;nbsp;— Includes all Swiper Less styles, including modules like Navigation, Pagination, and more&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;strong&gt;swiper/scss&lt;/strong&gt;&lt;/code&gt;&amp;nbsp;— Contains core Swiper SCSS styles and all module-specific styles&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;strong&gt;swiper/scss/bundle&lt;/strong&gt;&lt;/code&gt;&amp;nbsp;— Includes all Swiper SCSS styles, including modules like Navigation, Pagination, and others&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Swiper allows you to import only the styles you need for specific features, enhancing both performance and customization. For example, you can import &lt;code&gt;swiper/css/navigation&lt;/code&gt; to include only the styles for Navigation.&lt;br&gt;
This modular approach ensures you’re not loading unnecessary styles, keeping your project lightweight. Check out the &lt;a href=&quot;https://swiperjs.com/react#styles&quot;&gt;Swiper style documentation&lt;/a&gt; for more style options.&lt;/p&gt;
&lt;h3 id=&quot;swiper-methods-properties&quot;&gt;Swiper method and properties&lt;/h3&gt;
&lt;p&gt;Swiper provides a set of methods and properties to control and customize its behavior in real time. These allow you to interact with the slider, navigate through slides, update settings, or even remove the instance when needed. Here are some key examples:&lt;/p&gt;
&lt;h4 id=&quot;methods&quot;&gt;Methods&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;slideNext()&lt;/code&gt;&lt;/strong&gt;&amp;nbsp;— Moves to the next slide&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;strong&gt;slidePrev()&lt;/strong&gt;&lt;/code&gt; — Moves to the previous slide&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;strong&gt;swiper.slideTo(index, speed, runCallbacks)&lt;/strong&gt;&lt;/code&gt;&amp;nbsp;— Jumps to a specific slide by its index&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;swiper.update()&lt;/code&gt;&lt;/strong&gt;&amp;nbsp;— Updates the Swiper instance to accommodate layout changes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;strong&gt;swiper.destroy(deleteInstance, cleanStyles)&lt;/strong&gt;&lt;/code&gt; — Destroys the Swiper instance, with options to delete it and clean up styles&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;const swiper = new Swiper(&#39;.swiper&#39;, {
// Configuration options
});// Move to the next slide
swiper.slideNext();// Move to the third slide (index 2)
swiper.slideTo(2);&lt;/pre&gt;
&lt;h4 id=&quot;properties&quot;&gt;Properties&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;strong&gt;swiper.activeIndex&lt;/strong&gt;&lt;/code&gt;&amp;nbsp;— The index of the current slide&lt;/li&gt;
&lt;li style=&quot;list-style-type: none;&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;strong&gt;swiper.isBeginning&lt;/strong&gt;&lt;/code&gt; — Checks if the slider is at the first slide&lt;/li&gt;
&lt;li style=&quot;list-style-type: none;&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;swiper.previousIndex&lt;/code&gt;&lt;/strong&gt;&amp;nbsp;— The index of the previous slide (can be set to a specific number)&lt;/li&gt;
&lt;li style=&quot;list-style-type: none;&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;swiper.allowSlideNext&lt;/code&gt;&lt;/strong&gt;&amp;nbsp;— Controls the ability to slide to the next slide (true/false)&lt;/li&gt;
&lt;li style=&quot;list-style-type: none;&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;strong&gt;swiper.allowSlidePrev&lt;/strong&gt;&lt;/code&gt; — Controls the ability to slide to the previous slide (true/false)&lt;/li&gt;
&lt;li style=&quot;list-style-type: none;&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;swiper.el&lt;/code&gt;&lt;/strong&gt; — The HTML element of the slider container&lt;/li&gt;
&lt;li style=&quot;list-style-type: none;&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;strong&gt;swiper.width&lt;/strong&gt;&lt;/code&gt; — The width of the slider container&lt;/li&gt;
&lt;li style=&quot;list-style-type: none;&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;strong&gt;swiper.height&lt;/strong&gt;&lt;/code&gt;&amp;nbsp;— The height of the slider container&lt;/li&gt;
&lt;li style=&quot;list-style-type: none;&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;strong&gt;swiper.swipeDirection&lt;/strong&gt;&lt;/code&gt;&amp;nbsp;— Specifies the sliding direction, either &lt;code&gt;prev&lt;/code&gt; or &lt;code&gt;next&lt;/code&gt;console.log(swiper.activeIndex); // Logs the current slide index&lt;/li&gt;
&lt;li style=&quot;list-style-type: none;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a full list of methods and properties, visit the &lt;a href=&quot;https://swiperjs.com/swiper-api#methods--properties&quot;&gt;Swiper Methods and Properties documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;swiper-events&quot;&gt;Swiper events&lt;/h3&gt;
&lt;p&gt;Swiper.js offers several events that enable you to interact with the slider and respond to user actions. These events are useful for adding custom features, like tracking activity or updating content dynamically. Common events include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;strong&gt;init&lt;/strong&gt;&lt;/code&gt; — Triggered when Swiper initializes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;strong&gt;slideChange&lt;/strong&gt;&lt;/code&gt; — Fires when the active slide changes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;reachBeginning&lt;/code&gt;&lt;/strong&gt; —&amp;nbsp;Triggered when the first slide is reached&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;strong&gt;reachEnd&lt;/strong&gt;&lt;/code&gt;&amp;nbsp;— Fires when the last slide is reached&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can listen to events using the &lt;code&gt;on&lt;/code&gt; method during Swiper initialization:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;const swiper = new Swiper(&#39;.swiper&#39;, {  
  on: {  
    init: function () {  
      console.log(&#39;Swiper initialized!&#39;);  
    },  
    slideChange: function () {  
      console.log(&#39;Slide changed to:&#39;, this.activeIndex);  
    },  
  },  
}); 
&lt;/pre&gt;
&lt;p&gt;Alternatively, you can use &lt;a href=&quot;https://blog.logrocket.com/dynamically-create-javascript-elements-event-handlers/&quot;&gt;event listeners&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;const swiper = new Swiper(&quot;.swiper&quot;, {
  // ...
});

swiper.on(&#39;reachEnd&#39;, function () {  
  console.log(&#39;Reached the end of the slider!&#39;);  
});  
&lt;/pre&gt;
&lt;p&gt;For a complete list of events, refer to the &lt;a href=&quot;https://swiperjs.com/swiper-api#events&quot;&gt;Swiper Events documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;key-swiper-modules&quot;&gt;Key swiper modules&lt;/h2&gt;
&lt;p&gt;Swiper.js offers several features that enhance the user experience and make sliders more interactive. In this section, we’ll cover important Swiper modules like navigation controls, pagination, scrollbars, lazy loading, autoplay, and more. These modules allow for easy customization and dynamic functionality, giving you full control over your sliders.&lt;/p&gt;
&lt;h3 id=&quot;navigation&quot;&gt;Navigation&lt;/h3&gt;
&lt;p&gt;Swiper includes built-in navigation buttons that allow users to navigate between slides. You can customize these buttons using the following parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;prevEl&lt;/code&gt;&lt;/strong&gt;&amp;nbsp;— A string representing the CSS selector or HTML element for the “previous” button&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;strong&gt;nextEl&lt;/strong&gt;&lt;/code&gt; — A string representing the CSS selector or HTML element for the “next” button&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To enable navigation, ensure your HTML includes the corresponding button elements:&lt;/p&gt;
&lt;pre class=&quot;language-html hljs&quot;&gt;&amp;lt;div class=&quot;swiper&quot;&amp;gt;
  &amp;lt;div class=&quot;swiper-wrapper&quot;&amp;gt;
    &amp;lt;div class=&quot;swiper-slide&quot;&amp;gt;Slide 1&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;swiper-slide&quot;&amp;gt;Slide 2&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;swiper-slide&quot;&amp;gt;Slide 3&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;!-- Navigation Buttons --&amp;gt;
  &amp;lt;div class=&quot;swiper-button-next&quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&quot;swiper-button-prev&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Then, enable navigation in your Swiper configuration:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;import Swiper from &#39;swiper&#39;;
import { Navigation } from &#39;swiper/modules&#39;;
import &#39;swiper/swiper.min.css&#39;;
import &#39;swiper/modules/navigation.min.css&#39;;

const swiper = new Swiper(&#39;.swiper&#39;, {
  modules: [Navigation],
  navigation: {           // Adds next/prev buttons
    nextEl: &#39;.swiper-button-next&#39;,
    prevEl: &#39;.swiper-button-prev&#39;,
  },
});

// Alternative

const swiper = new Swiper(&#39;.swiper&#39;, {
  modules: [Navigation],
});
swiper.nextEl = &#39;.swiper-button-next&#39;;
swiper.prevEl = &#39;.swiper-button-prev&#39;;
&lt;/pre&gt;
&lt;p&gt;In the code above, we use the &lt;code&gt;navigation.prevEl&lt;/code&gt; and &lt;code&gt;navigation.nextEl&lt;/code&gt; parameters to target the &lt;code&gt;.swiper-button-prev&lt;/code&gt; and &lt;code&gt;.swiper-button-next&lt;/code&gt; classes in the HTML template. This setup links the Swiper instance with the appropriate navigation buttons. Here’s an example:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; data-attachment-id=&quot;202280&quot; data-permalink=&quot;https://blog.logrocket.com/getting-started-swiper-js/attachment/this-setup-links-the-swiper-instance-with-the-appropriate-navigation-buttons/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/This-setup-links-the-Swiper-instance-with-the-appropriate-navigation-buttons.gif&quot; data-orig-size=&quot;800,615&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;This setup links the Swiper instance with the appropriate navigation buttons.&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/This-setup-links-the-Swiper-instance-with-the-appropriate-navigation-buttons.gif?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/This-setup-links-the-Swiper-instance-with-the-appropriate-navigation-buttons.gif?w=800&quot; class=&quot;aligncenter wp-image-202280&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/This-setup-links-the-Swiper-instance-with-the-appropriate-navigation-buttons.gif&quot; alt=&quot;This Setup Links The Swiper Instance With The Appropriate Navigation Buttons&quot; width=&quot;895&quot; height=&quot;688&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;You can style the navigation buttons with CSS or use custom elements instead. For more navigation options, visit &lt;a href=&quot;https://swiperjs.com/swiper-api#navigation&quot;&gt;Swiper navigation modules&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;pagination&quot;&gt;Pagination&lt;/h3&gt;
&lt;p&gt;Pagination in Swiper.js helps users track their current slide and navigate directly to specific slides. You can customize pagination using these options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;strong&gt;bullets&lt;/strong&gt;&lt;/code&gt;— An array of HTML elements representing pagination bullets. Access a specific slide’s bullet using &lt;code&gt;swiper.pagination.bullets[1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;strong&gt;el&lt;/strong&gt;&lt;/code&gt;— This option holds the HTML element for the pagination container.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To use pagination, include a container for it, like so:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;&amp;lt;div class=&quot;swiper&quot;&amp;gt;
  &amp;lt;div class=&quot;swiper-wrapper&quot;&amp;gt;
    &amp;lt;div class=&quot;swiper-slide&quot;&amp;gt;Slide 1&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;swiper-slide&quot;&amp;gt;Slide 2&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;swiper-slide&quot;&amp;gt;Slide 3&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;!-- Pagination --&amp;gt; 
  &amp;lt;div class=&quot;swiper-pagination&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Then set up the pagination option:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;import Swiper from &#39;swiper&#39;;
import { Navigation, Pagination } from &#39;swiper/modules&#39;;
import &#39;swiper/swiper.min.css&#39;;
import &#39;swiper/modules/pagination.min.css&#39;;

const swiper = new Swiper(&#39;.swiper&#39;, {
  modules: [Pagination, Navigation],
  // Other parameters
  pagination: {  // Enables pagination
    el: &#39;.swiper-pagination&#39;,
    clickable: true,
    type: &#39;bullets&#39;, // &#39;bullets&#39; or &#39;fraction&#39;
  },
});
&lt;/pre&gt;
&lt;p&gt;In this setup, &lt;code&gt;pagination.el&lt;/code&gt; targets the &lt;code&gt;.swiper-pagination&lt;/code&gt; element in the HTML. Setting &lt;code&gt;clickable: true&lt;/code&gt; allows users to navigate slides by clicking pagination bullets. The &lt;code&gt;type&lt;/code&gt; option can be set to &lt;code&gt;bullets&lt;/code&gt; for dot indicators or &lt;code&gt;fraction&lt;/code&gt; to display a format like “1/5”:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; data-attachment-id=&quot;202279&quot; data-permalink=&quot;https://blog.logrocket.com/getting-started-swiper-js/attachment/pagination-el-targets-the-swiper-pagination-element-in-the-html/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/pagination.el-targets-the-.swiper-pagination-element-in-the-HTML.gif&quot; data-orig-size=&quot;800,612&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;pagination.el targets the .swiper-pagination element in the HTML.&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/pagination.el-targets-the-.swiper-pagination-element-in-the-HTML.gif?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/pagination.el-targets-the-.swiper-pagination-element-in-the-HTML.gif?w=800&quot; class=&quot;aligncenter wp-image-202279&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/pagination.el-targets-the-.swiper-pagination-element-in-the-HTML.gif&quot; alt=&quot;Pagination.el Targets The .swiper-pagination Element In The Html.&quot; width=&quot;895&quot; height=&quot;685&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;For more pagination options, visit the &lt;a href=&quot;https://swiperjs.com/swiper-api#pagination&quot;&gt;Swiper pagination modules&lt;/a&gt; page.&lt;/p&gt;
&lt;h3 id=&quot;lazy-loading&quot;&gt;Lazy loading&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.logrocket.com/lazy-loading-vs-eager-loading/&quot;&gt;Lazy loading&lt;/a&gt; ensures that images are only loaded when they are about to appear on the screen, improving the initial load time and performance of our application. To use lazy loading in Swiper.js, we need to set &lt;code&gt;loading=&quot;lazy&quot;&lt;/code&gt; on images and add an animated preloader element &lt;code&gt;swiper-lazy-preloader&lt;/code&gt;. The animated preloader adds a spinner to the slide.&lt;/p&gt;
&lt;p&gt;Let’s see lazy loading in action:&lt;/p&gt;
&lt;pre class=&quot;language-html hljs&quot;&gt;&amp;lt;div class=&quot;swiper&quot;&amp;gt;
  &amp;lt;div class=&quot;swiper-wrapper&quot;&amp;gt;
    &amp;lt;!-- Lazy-loaded image --&amp;gt;
    &amp;lt;div class=&quot;swiper-slide&quot;&amp;gt;
      &amp;lt;img src=&quot;https://images.unsplash.com/vector-1739283864562-fea5e6376d2e?q=80&amp;amp;w=2146&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;ixlib=rb-4.0.3&amp;amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&quot; loading=&quot;lazy&quot; /&amp;gt;
      &amp;lt;div class=&quot;swiper-lazy-preloader&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;!-- Lazy-loaded image with srcset for different resolutions --&amp;gt;
    &amp;lt;div class=&quot;swiper-slide&quot;&amp;gt;
      &amp;lt;img
        src=&quot;https://images.unsplash.com/vector-1738426079979-a92c2f584fc5?q=80&amp;amp;w=1800&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;ixlib=rb-4.0.3&amp;amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&quot;
        loading=&quot;lazy&quot;
      /&amp;gt;
      &amp;lt;div class=&quot;swiper-lazy-preloader&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Here’s the demo:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; data-attachment-id=&quot;202278&quot; data-permalink=&quot;https://blog.logrocket.com/getting-started-swiper-js/attachment/lazyloading/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/lazyloading.gif&quot; data-orig-size=&quot;756,498&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;lazyloading&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/lazyloading.gif?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/lazyloading.gif?w=756&quot; class=&quot;aligncenter wp-image-202278&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/lazyloading.gif&quot; alt=&quot;Lazy Loading&quot; width=&quot;895&quot; height=&quot;590&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;For more lazy loading options, visit &lt;a href=&quot;https://swiperjs.com/swiper-api#lazy-loading&quot;&gt;Swiper lazy loading modules&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;scrollbar&quot;&gt;Scrollbar&lt;/h3&gt;
&lt;p&gt;A scrollbar helps users navigate by providing a draggable handle, allowing them to browse through slides more easily. In Swiper, you can customize the scrollbar settings. Some options Swiper offers include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;dragEl&lt;/code&gt;&lt;/strong&gt;— Holds the element for the draggable scrollbar handle&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;el&lt;/code&gt;&lt;/strong&gt;— Holds the element for the scrollbar container&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To set it up, add a container for the scrollbar:&lt;/p&gt;
&lt;pre class=&quot;language-html hljs&quot;&gt;&amp;lt;div class=&quot;swiper&quot;&amp;gt;
  &amp;lt;div class=&quot;swiper-wrapper&quot;&amp;gt;
    &amp;lt;!-- Slides --&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;!-- Scrollbar --&amp;gt;
  &amp;lt;div class=&quot;swiper-scrollbar&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Now, enable the &lt;code&gt;scrollbar&lt;/code&gt; parameter:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;const swiper = new Swiper(&#39;.swiper&#39;, {
  // Other parameters
  scrollbar: {     // Enables manual scrolling
    el: &#39;.swiper-scrollbar&#39;,
    draggable: true,
  },
});
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;scrollbar.el&lt;/code&gt; parameter targets the &lt;code&gt;.swiper-scrollbar&lt;/code&gt; element in the HTML. Setting &lt;code&gt;draggable&lt;/code&gt; to true allows users to drag the scrollbar handle to navigate through slides. For more scrollbar options, visit the documentation on &lt;a href=&quot;https://swiperjs.com/swiper-api#scrollbar&quot;&gt;Swiper scrollbar modules&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; data-attachment-id=&quot;202277&quot; data-permalink=&quot;https://blog.logrocket.com/getting-started-swiper-js/attachment/scrollbar-element/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/scrollbar-element.gif&quot; data-orig-size=&quot;800,612&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;scrollbar element&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/scrollbar-element.gif?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/scrollbar-element.gif?w=800&quot; class=&quot;aligncenter wp-image-202277&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/scrollbar-element.gif&quot; alt=&quot;Scrollbar Element&quot; width=&quot;895&quot; height=&quot;685&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;looping&quot;&gt;Looping&lt;/h3&gt;
&lt;p&gt;Looping makes the slider move continuously, while autoplay automatically transitions slides after a set delay. Swiper allows you to customize both features. Some options include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;loop&lt;/code&gt;&lt;/strong&gt;&amp;nbsp;— Enables looping (default is &lt;code&gt;false&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;delay&lt;/code&gt;&lt;/strong&gt;&amp;nbsp;— Sets the time (in milliseconds) between slide transitions; autoplay is off if not set&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;strong&gt;disableOnInteraction&lt;/strong&gt;&lt;/code&gt;&amp;nbsp;— Stops autoplay after user interactions (like swipes), but restarts after each interaction&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To configure loop and autoplay:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;const swiper = new Swiper(&#39;.swiper&#39;, {
  // Other parameters
  loop: true,
  autoplay: {
    delay: 3000, // Time in milliseconds between transitions
    disableOnInteraction: false,
  },
});
&lt;/pre&gt;
&lt;p&gt;Setting &lt;code&gt;loop&lt;/code&gt; to true allows the slides to loop continuously. The autoplay setting manages automatic slide changes, where &lt;code&gt;delay&lt;/code&gt; defines the time between changes. Setting &lt;code&gt;disableOnInteraction&lt;/code&gt; to false keeps autoplay running even after users interact with the slides:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; data-attachment-id=&quot;202276&quot; data-permalink=&quot;https://blog.logrocket.com/getting-started-swiper-js/attachment/keeps-autoplay-running/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/keeps-autoplay-running.gif&quot; data-orig-size=&quot;780,518&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;keeps autoplay running&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/keeps-autoplay-running.gif?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/keeps-autoplay-running.gif?w=780&quot; class=&quot;aligncenter wp-image-202276&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/keeps-autoplay-running.gif&quot; alt=&quot;Keeps Autoplay Running&quot; width=&quot;895&quot; height=&quot;594&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;integraiton-javascript-frameworks&quot;&gt;Integration with JavaScript frameworks&lt;/h2&gt;
&lt;p&gt;Swiper.js works well with modern JavaScript frameworks like React, Vue, and Angular. This section will show you how to use Swiper effectively in React and Vue applications.&lt;/p&gt;
&lt;h2 id=&quot;react-integration&quot;&gt;React integration&lt;/h2&gt;
&lt;p&gt;To add Swiper to a React project, first install the &lt;code&gt;swiper&lt;/code&gt; package. You can do this using npm:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;npm install swiper
&lt;/pre&gt;
&lt;p&gt;After installation, import and use Swiper components in your React app.&lt;/p&gt;
&lt;p&gt;In React, there are two main components: &lt;code&gt;Swiper&lt;/code&gt; and &lt;code&gt;SwiperSlide&lt;/code&gt;. The &lt;code&gt;Swiper&lt;/code&gt; component acts as the main container for the slider, while &lt;code&gt;SwiperSlide&lt;/code&gt; represents each individual slide that holds the content. Here’s a basic example:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;import React from &#39;react&#39;;
import { Swiper, SwiperSlide } from &quot;swiper/react&quot;;
import &quot;swiper/css&quot;;

export default () =&amp;gt; {
  return (
    &amp;lt;Swiper&amp;gt;
      &amp;lt;SwiperSlide&amp;gt;Content 1&amp;lt;/SwiperSlide&amp;gt;
      &amp;lt;SwiperSlide&amp;gt;Content 2&amp;lt;/SwiperSlide&amp;gt;
      &amp;lt;SwiperSlide&amp;gt;Content 3&amp;lt;/SwiperSlide&amp;gt;
      &amp;lt;SwiperSlide&amp;gt;Content 4&amp;lt;/SwiperSlide&amp;gt;
    &amp;lt;/Swiper&amp;gt;
  );
};
&lt;/pre&gt;
&lt;p&gt;To add more features like navigation and pagination, install, import, and set up the necessary modules:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;import { Navigation, Pagination } from &#39;swiper/modules&#39;;
import { Swiper, SwiperSlide } from &#39;swiper/react&#39;;

// Import required styles
import &#39;swiper/css&#39;;
import &#39;swiper/css/navigation&#39;;
import &#39;swiper/css/pagination&#39;;

export default () =&amp;gt; {
  return (
    &amp;lt;Swiper
      modules={[Navigation, Pagination]}
      navigation
      pagination={{ clickable: true }}
    &amp;gt;
      &amp;lt;SwiperSlide&amp;gt;Slide 1&amp;lt;/SwiperSlide&amp;gt;
      {/* ... */}
    &amp;lt;/Swiper&amp;gt;
  );
};
&lt;/pre&gt;
&lt;h2 id=&quot;swiper-props-hooks&quot;&gt;Swiper props and hooks&lt;/h2&gt;
&lt;p&gt;Swiper has React-specific features that improve its use in React projects.&lt;/p&gt;
&lt;h3 id=&quot;swipe-props&quot;&gt;Swipe props&lt;/h3&gt;
&lt;p&gt;The main Swiper component serves as the container for your slideshow, supporting standard Swiper options and React-specific properties for enhanced functionality:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;&amp;lt;Swiper
  tag=&quot;section&quot;               // Define a custom HTML element (default: &#39;div&#39;)
  onSwiper={(swiper) =&amp;gt; {    // Access the Swiper instance immediately after initialization
    console.log(&#39;Swiper instance:&#39;, swiper);
    // Store the instance in a ref or state if needed
  }}
  // Event handling with proper TypeScript support
  onSlideChange={(swiper) =&amp;gt; {
    const activeIndex = swiper.activeIndex;
    console.log(`Slide changed to index ${activeIndex}`);
  }}
&amp;gt;
  {/* Slides go here */}
&amp;lt;/Swiper&amp;gt;
&lt;/pre&gt;
&lt;h3 id=&quot;swiperslide&quot;&gt;SwiperSlide props&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;SwiperSlide&lt;/code&gt; component does more than just wrap slides. It also allows you to customize each slide and see their state:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;&amp;lt;SwiperSlide
  tag=&quot;div&quot;                  // Customize the slide element type
  zoom={true}               // Enable zoom functionality for this slide
  virtualIndex={5}          // Required only for virtual slides
&amp;gt;
  {/* Slide content */}
&amp;lt;/SwiperSlide&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Another key feature is the option to show content based on a slide’s state. Check it out below:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;  &amp;lt;div
    style={{
      display: &quot;flex&quot;,
      justifyContent: &quot;center&quot;,
      alignItems: &quot;center&quot;,
      height: &quot;100vh&quot;,
    }}
  &amp;gt;
    &amp;lt;Swiper
      slidesPerView={3}
      loop={true}
      watchSlidesProgress={true}
      modules={[Navigation, Pagination]}
      navigation
      pagination={{ clickable: true }}
      style={{ width: &quot;60%&quot;, padding: &quot;20px&quot; }}
    &amp;gt;
      {[...Array(5)].map((_, index) =&amp;gt; (
        &amp;lt;SwiperSlide key={index}&amp;gt;
          {({ isActive, isPrev, isNext, isVisible, isDuplicate }) =&amp;gt; (
            &amp;lt;div
              style={{
                padding: &quot;20px&quot;,
                border: &quot;2px solid&quot;,
                borderColor: isActive
                  ? &quot;blue&quot;
                  : isPrev
                  ? &quot;green&quot;
                  : isNext
                  ? &quot;purple&quot;
                  : &quot;gray&quot;,
                opacity: isVisible ? 1 : 0.5,
                backgroundColor: isDuplicate ? &quot;#f8d7da&quot; : &quot;#e9ecef&quot;,
                textAlign: &quot;center&quot;,
                fontSize: &quot;18px&quot;,
              }}
            &amp;gt;
              &amp;lt;p&amp;gt;Slide {index + 1}&amp;lt;/p&amp;gt;
              &amp;lt;p&amp;gt;{isActive &amp;amp;&amp;amp; &quot;Active&quot;}&amp;lt;/p&amp;gt;
              &amp;lt;p&amp;gt;{isPrev &amp;amp;&amp;amp; &quot;Previous&quot;}&amp;lt;/p&amp;gt;
              &amp;lt;p&amp;gt;{isNext &amp;amp;&amp;amp; &quot;Next&quot;}&amp;lt;/p&amp;gt;
              &amp;lt;p&amp;gt;{isVisible &amp;amp;&amp;amp; &quot;Visible&quot;}&amp;lt;/p&amp;gt;
              &amp;lt;p&amp;gt;{isDuplicate &amp;amp;&amp;amp; &quot;Duplicate&quot;}&amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
          )}
        &amp;lt;/SwiperSlide&amp;gt;
      ))}
    &amp;lt;/Swiper&amp;gt;
  &amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; data-attachment-id=&quot;202275&quot; data-permalink=&quot;https://blog.logrocket.com/getting-started-swiper-js/attachment/option-to-show-content-based-on-a-slides-state/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/option-to-show-content-based-on-a-slides-state.gif&quot; data-orig-size=&quot;800,391&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;option to show content based on a slide’s state&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/option-to-show-content-based-on-a-slides-state.gif?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/option-to-show-content-based-on-a-slides-state.gif?w=800&quot; class=&quot;aligncenter wp-image-202275&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/option-to-show-content-based-on-a-slides-state.gif&quot; alt=&quot;Option To Show Content Based On A Slide&#39;s State&quot; width=&quot;895&quot; height=&quot;437&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;swiper-hooks&quot;&gt;Swiper hooks&lt;/h3&gt;
&lt;p&gt;Swiper provides helpful hooks to control and respond to the slideshow from any part of the component.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;useSwiper&lt;/code&gt; hook lets you access the Swiper instance from anywhere in the Swiper component:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;// SlideController.jsx
import { useSwiper } from &#39;swiper/react&#39;;

function SlideController() {
  const swiper = useSwiper();

  return (
    &amp;lt;div className=&quot;controls&quot;&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; swiper.slidePrev()}&amp;gt;Previous&amp;lt;/button&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; swiper.slideNext()}&amp;gt;Next&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;useSwiperSlide&lt;/code&gt; hook gives slide state information to any component within a slide:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;// SlideIndicator.jsx
import { useSwiperSlide } from &#39;swiper/react&#39;;

function SlideIndicator() {
  const slide = useSwiperSlide();

  return (
    &amp;lt;div className={`indicator ${slide.isActive ? &#39;active&#39; : &#39;&#39;}`}&amp;gt;
      {slide.isActive ? &#39;Active Slide&#39; : &#39;Inactive Slide&#39;}
    &amp;lt;/div&amp;gt;
  );
}
&lt;/pre&gt;
&lt;h2 id=&quot;swiper-vue&quot;&gt;Swiper with Vue&lt;/h2&gt;
&lt;p&gt;To install Swiper in a Vue project, use npm:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;npm install swiper
&lt;/pre&gt;
&lt;p&gt;Similar to React, Swiper for Vue offers the same components, modules, props, and event listeners. Here’s a basic setup:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;&amp;lt;script setup&amp;gt;
import { Swiper, SwiperSlide } from &quot;swiper/vue&quot;;
import &quot;swiper/css&quot;;
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  &amp;lt;Swiper&amp;gt;
    &amp;lt;SwiperSlide&amp;gt;Slide 1&amp;lt;/SwiperSlide&amp;gt;
    &amp;lt;SwiperSlide&amp;gt;Slide 2&amp;lt;/SwiperSlide&amp;gt;
    &amp;lt;SwiperSlide&amp;gt;Slide 3&amp;lt;/SwiperSlide&amp;gt;
    &amp;lt;SwiperSlide&amp;gt;Slide 4&amp;lt;/SwiperSlide&amp;gt;
  &amp;lt;/Swiper&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/pre&gt;
&lt;p&gt;To use navigation, pagination, and scrollbars in Vue, import and configure the necessary modules:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;swiper
    :modules=&quot;[Navigation, Pagination]&quot;
    navigation
    :pagination=&quot;{ clickable: true }&quot;
  &amp;gt;
    &amp;lt;!-- Slides --&amp;gt;
  &amp;lt;/swiper&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import { Navigation, Pagination } from &#39;swiper/modules&#39;;
import { Swiper, SwiperSlide } from &#39;swiper/vue&#39;;

export default {
  components: {
    Swiper,
    SwiperSlide,
  },
  setup() {
    return {
      modules: [Navigation, Pagination],
    };
  },
};
&amp;lt;/script&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Swiper in Vue supports standard Swiper parameters as props and events handling syntax. Some useful props include:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;Swiper 
     :slides-per-view=&quot;3&quot;
    :space-between=&quot;50&quot;
    @slideChange=&quot;onSlideChange&quot;
  &amp;gt;
    &amp;lt;SwiperSlide&amp;gt;Slide 1&amp;lt;/SwiperSlide&amp;gt;
    &amp;lt;SwiperSlide&amp;gt;Slide 2&amp;lt;/SwiperSlide&amp;gt;
  &amp;lt;/Swiper&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup&amp;gt;
const onSlideChange = () =&amp;gt; {
  console.log(&quot;Slide changed!&quot;);
};
&amp;lt;/script&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Swiper Vue.js components are set to be deprecated in future versions of Swiper. For new projects, it’s recommended to use Swiper Element instead. However, the current implementation remains fully functional for existing applications.&lt;/p&gt;

&lt;h2 id=&quot;swiper-element&quot;&gt;Swiper Element&lt;/h2&gt;
&lt;p&gt;Swiper Element is a version of the Swiper designed for web components. It allows you to create sliders and carousels using standard web technology.&lt;/p&gt;
&lt;p&gt;There are two ways to include the Swiper Element in your project. Either by using CDN or npm:&lt;/p&gt;
&lt;p&gt;Using npm:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;// Install
$ npm install swiper

// Register Swiper custom elements
import { register } from &#39;swiper/element/bundle&#39;;
register();
&lt;/pre&gt;
&lt;p&gt;Using CDN:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/swiper@11/swiper-element-bundle.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;
&lt;p&gt;With this option, it will be automatically registered, no need to call &lt;code&gt;register()&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;swiper-elements&quot;&gt;Swiper Element usage&lt;/h3&gt;
&lt;p&gt;When you install Swiper Element and call &lt;code&gt;register()&lt;/code&gt; or add a script tag, there are two web components (custom elements) at your disposal: &lt;code&gt;&amp;lt;swiper-container&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;swiper-slide&amp;gt;&lt;/code&gt;. These components enable you to specify all parameters and the Swiper slide element:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;&amp;lt;swiper-container pagination=&quot;true&quot; navigation=&quot;true&quot;&amp;gt;
  &amp;lt;swiper-slide&amp;gt;Slide 1&amp;lt;/swiper-slide&amp;gt;
  &amp;lt;swiper-slide&amp;gt;Slide 2&amp;lt;/swiper-slide&amp;gt;
  &amp;lt;swiper-slide&amp;gt;Slide 3&amp;lt;/swiper-slide&amp;gt;
&amp;lt;/swiper-container&amp;gt;
&lt;/pre&gt;
&lt;h3&gt;Swiper Element usage in React&lt;/h3&gt;
&lt;p&gt;Using Swiper Element in React can be challenging since React doesn’t fully support custom elements. To configure parameters, use attributes on the element or directly assign properties. Complex setups require specific initialization steps, as standard React prop syntax won’t work for all settings:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; data-attachment-id=&quot;202274&quot; data-permalink=&quot;https://blog.logrocket.com/getting-started-swiper-js/attachment/swiper-element-usage-in-react/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/Swiper-Element-usage-in-React.png&quot; data-orig-size=&quot;756,499&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;Swiper Element usage in React&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/Swiper-Element-usage-in-React.png?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/Swiper-Element-usage-in-React.png?w=756&quot; class=&quot;aligncenter wp-image-202274&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/Swiper-Element-usage-in-React.png&quot; alt=&quot;Swiper Element Usage In React&quot; width=&quot;895&quot; height=&quot;591&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/Swiper-Element-usage-in-React.png 756w, https://blog.logrocket.com/wp-content/uploads/2025/03/Swiper-Element-usage-in-React.png?resize=300,198 300w&quot; sizes=&quot;auto, (max-width: 895px) 100vw, 895px&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;Event handling works differently in Swiper Element. Standard React event formats&amp;nbsp; &lt;code&gt;on[Event]&lt;/code&gt; won’t work. Instead, use &lt;code&gt;addEventListener&lt;/code&gt; or manage events via the &lt;code&gt;on&lt;/code&gt; parameter object during setup.&lt;/p&gt;
&lt;p&gt;Here’s how to use the Swiper element in React:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;import { useRef } from &#39;react&#39;;
import { register } from &#39;swiper/element/bundle&#39;;

register();

export function ReactElement() {
  const swiperElRef = useRef(null);

  useEffect(() =&amp;gt; {
    // Handle events...
    swiperElRef.current.addEventListener(&quot;swiperprogress&quot;, (e) =&amp;gt; {
          const [swiper, progress] = e.detail;
          console.log(progress);
    });
  }, []);

  return (
    &amp;lt;swiper-container ref={swiperElRef}&amp;gt;
      {/* Slides */}
    &amp;lt;/swiper-container&amp;gt;
  );
}
&lt;/pre&gt;
&lt;h2 id=&quot;usage-vue&quot;&gt;Usage in Vue&lt;/h2&gt;
&lt;p&gt;Vue fully supports web components. You can pass attributes as props and listen for custom events:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;swiper-container
    :slides-per-view=&quot;3&quot;
    @swiperslidechange=&quot;onSlideChange&quot;
  &amp;gt;
    {/* Slides */}
  &amp;lt;/swiper-container&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
  import { register } from &#39;swiper/element/bundle&#39;;

  register();

  export default function () {
    setup() {

      const onSlideChange = (e) =&amp;gt; {
        console.log(&#39;slide changed&#39;)
      }

      return {
        onSlideChange,
      };
    }
  }
&amp;lt;/script&amp;gt;
&lt;/pre&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Swiper.js is a powerful and flexible JavaScript library for creating touch-friendly sliders. In this article, we covered its installation methods—CDN, direct download, and npm—along with key features like navigation, pagination, lazy loading, scrollbars, and autoplay.&lt;/p&gt;
&lt;p&gt;We also explored its integration with frameworks like React and Vue, highlighting essential components and methods. Additionally, we introduced Swiper Element, a modern alternative designed for web applications.&lt;/p&gt;
&lt;p&gt;With its extensive customization options, performance optimizations, and broad framework support, Swiper is a top choice for building dynamic, interactive sliders. Check out its &lt;a href=&quot;https://swiperjs.com/swiper-api&quot;&gt;documentation&lt;/a&gt; to unlock its full potential.&lt;/p&gt;


&lt;/div&gt;
            &lt;style&gt;
    .share-icon.share-twitter span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-twitter.svg&quot;);
    }

    .share-icon.share-reddit span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-reddit.svg&quot;);
    }

    .share-icon.share-linkedin span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-linkedin.svg&quot;);
    }

    .share-icon.share-facebook span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-facebook.svg&quot;);
    }
&lt;/style&gt;

&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon sd-sharing&quot;&gt;&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;&lt;div class=&quot;sd-content&quot;&gt;&lt;ul&gt;&lt;li class=&quot;share-twitter&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-twitter-202255&quot; class=&quot;share-twitter sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/getting-started-swiper-js/?share=twitter&quot; target=&quot;_blank&quot; title=&quot;Click to share on Twitter&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Twitter (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-reddit&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;&quot; class=&quot;share-reddit sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/getting-started-swiper-js/?share=reddit&quot; target=&quot;_blank&quot; title=&quot;Click to share on Reddit&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Reddit (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-linkedin&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-linkedin-202255&quot; class=&quot;share-linkedin sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/getting-started-swiper-js/?share=linkedin&quot; target=&quot;_blank&quot; title=&quot;Click to share on LinkedIn&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on LinkedIn (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-facebook&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-facebook-202255&quot; class=&quot;share-facebook sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/getting-started-swiper-js/?share=facebook&quot; target=&quot;_blank&quot; title=&quot;Click to share on Facebook&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Facebook (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-end&quot;&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;            &lt;ul id=&quot;post-tags&quot;&gt;
            &lt;li&gt;
        &lt;a rel=&quot;tag&quot; href=&quot;https://blog.logrocket.com/tag/javascript/&quot;&gt;#javascript&lt;/a&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
            &lt;div class=&quot;post-popup&quot; data-popup-name=&quot;dev-cab&quot;&gt;
    &lt;i data-popup-dismiss=&quot;&quot; class=&quot;fa-solid fa-xmark post-popup__exit&quot;&gt;&lt;/i&gt;
    &lt;div class=&quot;post-popup__page active&quot;&gt;
        &lt;p class=&quot;post-popup__title&quot;&gt;Would you be interested in joining LogRocket&#39;s developer community? &lt;/p&gt;
        &lt;div class=&quot;post-popup__buttons&quot;&gt;
            &lt;button data-popup-next=&quot;&quot; class=&quot;lr-button&quot;&gt;Yea&lt;/button&gt;
            &lt;button data-popup-dismiss=&quot;&quot; class=&quot;lr-button&quot;&gt;No Thanks&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;post-popup__page&quot;&gt;
        &lt;p&gt;
            Join LogRocket’s Content Advisory Board. You’ll help inform the type of
            content we create and get access to exclusive meetups, social accreditation,
            and swag.
        &lt;/p&gt;
        &lt;a data-popup-dismiss=&quot;&quot; class=&quot;lr-button&quot; target=&quot;__blank&quot; href=&quot;https://lp.logrocket.com/blg/content-advisory-board-signup&quot;&gt;Sign up now&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
        &lt;/div&gt;
    </description><link>https://blog.logrocket.com/getting-started-swiper-js/</link><guid isPermaLink="false">https://blog.logrocket.com/getting-started-swiper-js/</guid><pubDate>Mon, 17 Mar 2025 16:00:00 GMT</pubDate><author>Jude Miracle</author></item><item><title>A complete guide to Fetch API in JavaScript</title><description>&lt;aside&gt;
            &lt;div class=&quot;sticky&quot;&gt;
                                
&lt;div class=&quot;toc-container&quot; id=&quot;post-toc&quot;&gt;
            &lt;div class=&quot;toc-header&quot;&gt;
            &lt;span class=&quot;toc-title&quot;&gt;
                Table of contents            &lt;/span&gt;
            &lt;i class=&quot;fa fa-chevron-down toc-collapse&quot;&gt;&lt;/i&gt;
            &lt;i class=&quot;hide fa fa-chevron-up toc-expand&quot;&gt;&lt;/i&gt;
        &lt;/div&gt;
        
&lt;ul data-toc-name=&quot;root&quot; class=&quot;toc&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/fetch-api-javascript/#working-with-fetch-method&quot;&gt;Working with the &lt;code&gt;fetch()&lt;/code&gt; method&lt;/a&gt;
        &lt;ul data-toc-name=&quot;working-with-fetch-method&quot; class=&quot;toc-subheading&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/fetch-api-javascript/#get-requests&quot;&gt;&lt;code&gt;GET&lt;/code&gt; requests&lt;/a&gt;
        &lt;ul data-toc-name=&quot;get-requests&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/fetch-api-javascript/#post-requests&quot;&gt;&lt;code&gt;POST&lt;/code&gt;requests&lt;/a&gt;
        &lt;ul data-toc-name=&quot;post-requests&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/fetch-api-javascript/#error-handling&quot;&gt;Error handling&lt;/a&gt;
        &lt;ul data-toc-name=&quot;error-handling&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/fetch-api-javascript/#streaming-data-fetch-requests&quot;&gt;Streaming data from Fetch requests&lt;/a&gt;
        &lt;ul data-toc-name=&quot;streaming-data-fetch-requests&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/fetch-api-javascript/#how-use-fetch-headers&quot;&gt;How to use fetch headers&lt;/a&gt;
        &lt;ul data-toc-name=&quot;how-use-fetch-headers&quot; class=&quot;toc-subheading&quot;&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/fetch-api-javascript/#fetch-response&quot;&gt;Fetch response&lt;/a&gt;
        &lt;ul data-toc-name=&quot;fetch-response&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/li&gt;    &lt;li&gt;
        &lt;a href=&quot;https://blog.logrocket.com/fetch-api-javascript/#fetch-api-vs-axios-vs-xml-http-request&quot;&gt;Fetch API vs. Axios vs. XMLHttpRequest&lt;/a&gt;
        &lt;ul data-toc-name=&quot;fetch-api-vs-axios-vs-xml-http-request&quot; class=&quot;toc-subheading&quot;&gt;&lt;/ul&gt;
    &lt;/li&gt;&lt;/ul&gt;
    &lt;/div&gt;
                &lt;!-- Sidebar gutter ad --&gt;
                
            &lt;/div&gt;
        &lt;/aside&gt;
        &lt;div id=&quot;the-content-container&quot;&gt;
            
&lt;div class=&quot;lr-content&quot;&gt;
    &lt;!-- TEMP: .article-post is only used for adinserter to hook into --&gt;
    &lt;div class=&quot;article-post&quot;&gt;&lt;/div&gt;
    
&lt;p&gt;Just as the name suggests, the Fetch API is an easy way to fetch resources from a remote or local server through a JavaScript interface.&lt;/p&gt;
&lt;img fetchpriority=&quot;high&quot; decoding=&quot;async&quot; width=&quot;895&quot; height=&quot;597&quot; src=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/fetch-api-javascript-logrocket.png&quot; class=&quot;attachment-full size-full wp-post-image&quot; alt=&quot;A Complete Guide to Fetch API In Javascript&quot; srcset=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/fetch-api-javascript-logrocket.png 895w, https://blog.logrocket.com/wp-content/uploads/2025/03/fetch-api-javascript-logrocket.png?resize=300,200 300w, https://blog.logrocket.com/wp-content/uploads/2025/03/fetch-api-javascript-logrocket.png?resize=768,512 768w&quot; sizes=&quot;(max-width: 895px) 100vw, 895px&quot; data-attachment-id=&quot;202253&quot; data-permalink=&quot;https://blog.logrocket.com/fetch-api-javascript/attachment/fetch-api-javascript-logrocket/&quot; data-orig-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/fetch-api-javascript-logrocket.png&quot; data-orig-size=&quot;895,597&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;fetch-api-javascript-logrocket&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/fetch-api-javascript-logrocket.png?w=300&quot; data-large-file=&quot;https://blog.logrocket.com/wp-content/uploads/2025/03/fetch-api-javascript-logrocket.png?w=895&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;p&gt;This means that the browser can directly make HTTP requests to web servers. It’s made possible by the &lt;code&gt;fetch()&lt;/code&gt; method, which returns a promise, whose response is fulfilled using the &lt;code&gt;Response&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;fetch()&lt;/code&gt; method takes a mandatory argument, which is the path to the remote server or source from which we want to fetch data. Once the response is received, it then becomes the developer’s responsibility to decide how to handle the body content and display it in some HTML template, for example.&lt;/p&gt;
&lt;p&gt;Below is a somewhat basic &lt;code&gt;fetch()&lt;/code&gt; example that grabs data from a remote server:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;fetch(url)
  .then(
    //handle the response
  )
  .catch(
    //handle the errors
  )
&lt;/pre&gt;
&lt;p&gt;The example above uses simple promises to implement the &lt;code&gt;fetch()&lt;/code&gt; method. We specify a URL, and store it in a &lt;code&gt;const&lt;/code&gt; variable. In our case, the remote server URL is random, and only for exemplary purposes.&lt;/p&gt;
&lt;p&gt;Over the course of this article, we’ll be fine-tuning this code snippet to show how to make maximum use of the Fetch API when making calls.&lt;/p&gt;
&lt;h2 id=&quot;working-with-fetch-method&quot;&gt;Working with the &lt;code&gt;fetch()&lt;/code&gt; method&lt;/h2&gt;
&lt;p&gt;To follow through with this guide, you’ll need an understanding of basic JavaScript concepts such as promises, &lt;code&gt;a``sync/``a``wait&lt;/code&gt;, and callback functions&lt;/p&gt;
&lt;p&gt;For this tutorial, we want to simulate an environment where you would be working with an API. To do that, we’ll use a &lt;a href=&quot;https://jsonplaceholder.typicode.com/&quot;&gt;JSON placeholder&lt;/a&gt;, a free and fake API for testing, and it will serve as the means through which we reach our server.&lt;/p&gt;
&lt;h3 id=&quot;get-requests&quot;&gt;&lt;code&gt;GET&lt;/code&gt; requests&lt;/h3&gt;
&lt;p&gt;A &lt;code&gt;GET&lt;/code&gt; request is used to retrieve data from a server. By default, all HTTP requests are &lt;code&gt;GET&lt;/code&gt; unless specified otherwise.&lt;/p&gt;
&lt;p&gt;For example, if we’re building a to-do list app, we need to fetch and display tasks on the front end. Using JavaScript, we can target an unordered list (&lt;code&gt;ul&lt;/code&gt;) in our HTML and populate it dynamically with the fetched data. Here’s how we can set up the HTML structure:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;&amp;lt;ul id=&quot;list&quot;&amp;gt;

&amp;lt;/ul&amp;gt;
&lt;/pre&gt;
&lt;p&gt;When we enter a to-do list item, it gets stored on our server. To retrieve those items, we need to use the &lt;code&gt;GET&lt;/code&gt; request.&lt;/p&gt;
&lt;p&gt;The first thing we’ll do in our JavaScript is get the &lt;code&gt;ul&lt;/code&gt; element from &lt;a href=&quot;https://blog.logrocket.com/the-virtual-dom-react/&quot;&gt;the&lt;/a&gt; &lt;a href=&quot;https://blog.logrocket.com/the-virtual-dom-react/&quot;&gt;DOM&lt;/a&gt; via its ID so that we can append list items to it later:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;const ul = document.getElementById(&quot;list&quot;)
&lt;/pre&gt;
&lt;p&gt;We then go on to store the URL of the API that connects us to the remote server in a variable called &lt;code&gt;URL&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;const url = &quot;https://jsonplaceholder.typicode.com/todos&quot;
&lt;/pre&gt;
&lt;p&gt;We’ve gotten the variables we need. Now we can get to working with &lt;code&gt;fetch()&lt;/code&gt;. Remember that the &lt;code&gt;fetch()&lt;/code&gt; method takes into account just one parameter: the URL. In this case, we’ll pass in our &lt;code&gt;url&lt;/code&gt; variable:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;fetch(url)
&lt;/pre&gt;
&lt;p&gt;This alone won’t give us the data we need since the response isn’t in &lt;code&gt;JSON&lt;/code&gt; format. We need to parse it so that we can work with the data and display it in our HTML. To do this, we use the &lt;code&gt;.json()&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;fetch(url)
  .then(response =&amp;gt; response.json())
&lt;/pre&gt;
&lt;p&gt;After &lt;code&gt;fetch()&lt;/code&gt; is run, it returns a promise that’s resolved to a &lt;code&gt;Response&lt;/code&gt; object. The &lt;code&gt;.then()&lt;/code&gt; method above is used to process this &lt;code&gt;Response&lt;/code&gt; object. The &lt;code&gt;.json()&lt;/code&gt; method is called on the object, and it returns another promise that resolves to the &lt;a href=&quot;https://blog.logrocket.com/visualize-json-data-popular-tools/&quot;&gt;JSON data&lt;/a&gt; we need:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;fetch(url)
  .then(response =&amp;gt; response.json())
  .then(data =&amp;gt; {

  })
&lt;/pre&gt;
&lt;p&gt;The second &lt;code&gt;.then()&lt;/code&gt;above is used to handle the JSON data returned by the previous &lt;code&gt;.then()&lt;/code&gt;. The &lt;code&gt;data&lt;/code&gt; parameter is the parsed JSON data.&lt;/p&gt;
&lt;p&gt;Now that we have the data, how do we output it to the HTML template to make it visible on the page?&lt;/p&gt;

&lt;p&gt;We have a &lt;code&gt;ul&lt;/code&gt; element, and we want to display the data as a list of to-do items. For each to-do item that we fetch, we’ll create a &lt;code&gt;li&lt;/code&gt; element, set the text to the item we’ve fetched, and then append the &lt;code&gt;li&lt;/code&gt; to the &lt;code&gt;ul&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;Here’s how to achieve this result:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;fetch(url)
  .then(response =&amp;gt; response.json())
  .then(data =&amp;gt; {
    data.forEach(todo =&amp;gt; {
    const li = document.createElement(&quot;li&quot;)
    li.innerText = todo.title
    ul.appendChild(li)
    })
  })
&lt;/pre&gt;
&lt;p&gt;Our complete JavaScript logic should look like so:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;const ul = document.getElementById(&quot;list&quot;)
const url = &quot;https://jsonplaceholder.typicode.com/todos&quot;

fetch(url)
  .then(response =&amp;gt; response.json())
  .then(data =&amp;gt; {
    data.forEach(todo =&amp;gt; {
    const li = document.createElement(&quot;li&quot;)
    li.innerText = todo.title
    ul.appendChild(li)
    })
  })
&lt;/pre&gt;
&lt;p&gt;With this, we should see a list of to-do items displayed on the webpage. By default, JSONPlaceholder returns a maximum of 200 to-do items, but we can always play around with our logic to decrease this number. We can get more than just the title of our to-do items. An example of more data we could find might be the status of the task.&lt;/p&gt;
&lt;h3 id=&quot;post-requests&quot;&gt;&lt;code&gt;POST&lt;/code&gt;requests&lt;/h3&gt;
&lt;p&gt;Now that we’ve seen how to get data from the server, we’ll see how to add data to the server. Imagine filling out a form or entering data on a website. This data needs to get to the database somehow, and we usually achieve this using &lt;code&gt;POST&lt;/code&gt; requests.&lt;/p&gt;
&lt;p&gt;In our HTML code, we’ll have a small form with an input field and a submit button:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;&amp;lt;form id=&quot;todo-form&quot;&amp;gt;
        &amp;lt;input type=&quot;text&quot; id=&quot;todo-input&quot; placeholder=&quot;Enter your task here...&quot; required&amp;gt;
        &amp;lt;button type=&quot;submit&quot;&amp;gt;Add To-do&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Then over in JavaScript, we want to grab two elements and specify the URL, through which we make requests:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;const form = document.getElementById(&quot;todo-form&quot;);
const input = document.getElementById(&quot;todo-input&quot;);

const url = &quot;https://jsonplaceholder.typicode.com/todos&quot;
&lt;/pre&gt;
&lt;p&gt;We’ll create an event listener so that the request is made each time we submit the form:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;form.addEventListener(&quot;submit&quot;, (event) =&amp;gt; {
  event.preventDefault()

})
&lt;/pre&gt;
&lt;p&gt;Data is usually sent to the backend as objects with specific key-value pairs representing the format in which we want to store our data. In our case, we want to store the title and status of a to-do item.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;const newToDo = {
  title: input.value,
  completed: false,
}
&lt;/pre&gt;
&lt;p&gt;Now, we can start setting up our &lt;code&gt;POST&lt;/code&gt; request. Unlike the &lt;code&gt;GET&lt;/code&gt; request, which only requires one parameter, the &lt;code&gt;POST&lt;/code&gt; request needs two. The first is the URL, and the second is an object that includes the &lt;code&gt;method&lt;/code&gt;, &lt;code&gt;body&lt;/code&gt;, and &lt;code&gt;headers&lt;/code&gt; keys:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;fetch(url, {
    method: &quot;POST&quot;,
    body: JSON.stringify(newTodo),
    headers: {
      &quot;Content-Type&quot;: &quot;application/json&quot;,
    },
})
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;method&lt;/code&gt; key defines the type of request being made. In this case, it’s set to &lt;code&gt;POST&lt;/code&gt;, indicating that we’re sending data to the server. The &lt;code&gt;body&lt;/code&gt; contains the data, formatted as a JSON string using &lt;code&gt;JSON.stringify(newTodo)&lt;/code&gt;. We’ll cover the &lt;code&gt;headers&lt;/code&gt; in the next section.&lt;/p&gt;
&lt;p&gt;These are the basics of a simple &lt;code&gt;[POST request](https://blog.logrocket.com/how-to-make-http-post-request-with-json-body-in-go/)&lt;/code&gt;. Our final JavaScript logic will look something like this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;const form = document.getElementById(&quot;todo-form&quot;);
const input = document.getElementById(&quot;todo-input&quot;);

const url = &quot;https://jsonplaceholder.typicode.com/todos&quot;;

form.addEventListener(&quot;submit&quot;, (event) =&amp;gt; {
  event.preventDefault();
  const newTodo = {
    title: input.value,
    completed: false,
  };

  fetch(url, {
    method: &quot;POST&quot;,
    body: JSON.stringify(newTodo),
    headers: {
      &quot;Content-Type&quot;: &quot;application/json&quot;,
    },
  });
});
&lt;/pre&gt;
&lt;p&gt;Besides &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt;, there are a variety of other operations that you can use when working with data. You can visit the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods&quot;&gt;MDN docs&lt;/a&gt; to learn more about these requests and how to use them.&lt;/p&gt;
&lt;h2 id=&quot;error-handling&quot;&gt;Error handling&lt;/h2&gt;
&lt;p&gt;So far, our &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; examples assume everything goes smoothly—but what if they don’t? What happens if the resource doesn’t exist or a network error occurs while sending data?&lt;/p&gt;
&lt;p&gt;To handle these cases, we can append a &lt;code&gt;.catch&lt;/code&gt; method to catch network errors and check the response status to handle HTTP errors. Let’s look at how to make our fetch requests more resilient.&lt;/p&gt;
&lt;p&gt;Let’s revamp the code above to account for potential errors:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;form.addEventListener(&quot;submit&quot;, (event) =&amp;gt; {
  event.preventDefault();
  const newTodo = {
    title: input.value,
    completed: false,
  };
  fetch(url, {
    method: &quot;POST&quot;,
    headers: {
      &quot;Content-Type&quot;: &quot;application/json&quot;,
    },
    body: JSON.stringify(newTodo),
  })
    .then((response) =&amp;gt; {
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }
      console.log(&quot;Todo added&quot;)
    })
    .catch((error) =&amp;gt; {
      console.error(&quot;Error:&quot;, error);
    });
});
&lt;/pre&gt;
&lt;p&gt;We use &lt;code&gt;.then&lt;/code&gt; to check if the response is OK—if not, we throw an error with the status code. Then, &lt;code&gt;.catch&lt;/code&gt; handles any fetch errors and logs them to the console.&lt;/p&gt;
&lt;p&gt;Proper error handling ensures issues are caught and communicated effectively. HTTP status codes play a key role here, as each one has a specific meaning and requires a different response. Some of the most common status codes include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;200 OK&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;404 Not Found&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;500 Internal Server Error&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;streaming-data-fetch-requests&quot;&gt;Streaming data from Fetch requests&lt;/h2&gt;
&lt;p&gt;When working with large amounts of data, we can’t always wait to completely fetch all the data from the server before we process it. Streaming is a technique that allows us to process data in chunks. The data is processed this way until it’s all retrieved from the server. This is a way of improving application responsiveness and performance.&lt;/p&gt;
&lt;p&gt;Let’s transform our previous &lt;code&gt;GET&lt;/code&gt; request example into one that implements streaming.&lt;/p&gt;
&lt;p&gt;We initiate the request to the API and check if the response is OK:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;fetch(url)
  .then(response =&amp;gt; {
    if(!response.ok){
      throw new Error(`HTTP error! status: ${response.status}`)
    }

  })
&lt;/pre&gt;
&lt;p&gt;We need a reader to read the response body in chunks and decode the chunks into text. This decoding is done with the help of &lt;code&gt;TextDecoder()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;const reader = response.body.getReader()
const decoder = new TextDecoder()
let result = &quot;&quot;
&lt;/pre&gt;
&lt;p&gt;After reading the first chunk, we process it. If the stream is complete, it logs a message to the console and returns. If not, it decodes the chunk of data, appends it to the result string, parses it as JSON, and appends each to-do item to the list.&lt;/p&gt;
&lt;p&gt;It then reads the next chunk of data and processes it recursively:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;return reader.read().then(function processText({ done, value }) {
        if (done) {
          console.log(&quot;Stream complete&quot;)
          return
        }

        //decode and parse JSON
        result += decoder.decode(value, { stream: true });
        const todos = JSON.parse(result)

        //add each to-do to the list
        todos.forEach((todo) =&amp;gt; {
          const li = document.createElement(&quot;li&quot;)
          li.innerText = todo.title
          list.appendChild(li)
        })
        return reader.read().then(processText)
})
&lt;/pre&gt;
&lt;p&gt;At the end, we can add a &lt;code&gt;.catch&lt;/code&gt; to account for any errors:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;.catch((error) =&amp;gt; {
  console.error(&quot;Error&quot;, error)
})
&lt;/pre&gt;
&lt;p&gt;Our final JavaScript file for streaming would look like this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript hljs&quot;&gt;const list = document.getElementById(&quot;to-do&quot;);
const url = &quot;https://jsonplaceholder.typicode.com/todos&quot;;


  fetch(url)
    .then((response) =&amp;gt; {
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const reader = response.body.getReader()
      const decoder = new TextDecoder()
      let result = &quot;&quot;
      return reader.read().then(function processText({ done, value }) {
        if (done) {
          console.log(&quot;Stream complete&quot;)
          return
        }
        result += decoder.decode(value, { stream: true });
        const todos = JSON.parse(result)
        todos.forEach((todo) =&amp;gt; {
          const li = document.createElement(&quot;li&quot;);
          li.innerText = todo.title
          list.appendChild(li)
        })
        return reader.read().then(processText);
      })
    })
    .catch((error) =&amp;gt; {
      console.error(&quot;Error:&quot;, error);
    })
&lt;/pre&gt;
&lt;h2 id=&quot;how-use-fetch-headers&quot;&gt;How to use fetch headers&lt;/h2&gt;
&lt;p&gt;In addition to serving and receiving data from the client, the server needs to understand every request it receives. This is possible with the help of headers, which act as metadata and accompany requests. These key-value pairs tell the server what kind of request the client is making, and how to respond to it.&lt;/p&gt;
&lt;p&gt;To understand headers, we must discuss the two categories that exist: fetch request headers and fetch response headers.&lt;/p&gt;
&lt;h3&gt;Fetch request headers&lt;/h3&gt;
&lt;p&gt;As the name implies, request headers tell the server what kind of request you’re making and may include conditions the server needs to fulfill before responding.&lt;/p&gt;
&lt;p&gt;In our &lt;code&gt;POST&lt;/code&gt; example, we used the &lt;code&gt;Content-Type&lt;/code&gt; header to specify that we were sending JSON data. Another important header is &lt;code&gt;Authorization&lt;/code&gt;, which carries authentication details like tokens or API keys for secure API access. The &lt;code&gt;Accept&lt;/code&gt; header tells the server which data format we prefer in the response.&lt;/p&gt;
&lt;p&gt;Some headers, known as forbidden header names, are automatically set by the browser and can’t be modified programmatically. These are called &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name&quot;&gt;forbidden header names&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;fetch-response&quot;&gt;Fetch response&lt;/h3&gt;
&lt;p&gt;When the server processes a request, it responds with headers that provide important details about the response.&lt;/p&gt;
&lt;p&gt;Key response headers include &lt;code&gt;Status Code&lt;/code&gt;, which indicates whether the request was successful (&lt;code&gt;200 OK&lt;/code&gt;) or encountered an issue (&lt;code&gt;500 Server Error&lt;/code&gt;). &lt;code&gt;Content-Length&lt;/code&gt; specifies the size of the returned data, while &lt;code&gt;Content-Type&lt;/code&gt; reveals the format, such as JSON or HTML.&lt;/p&gt;
&lt;p&gt;Some headers function in both requests and responses, like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cache-Control&lt;/code&gt;: Manages browser caching behavior.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Accept-Encoding&lt;/code&gt;: Tells the server which compression formats the client supports.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Headers help streamline communication between the client and server, improving response handling. For a deeper dive, check out &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept&quot;&gt;this full list of headers&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;fetch-api-vs-axios-vs-xml-http-request&quot;&gt;Fetch API vs. Axios vs. XMLHttpRequest&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://blog.logrocket.com/fetch-api-node-js/&quot;&gt;Fetch API&lt;/a&gt; is the modern standard for making requests in JavaScript, but it’s useful to compare it with older methods like &lt;a href=&quot;https://blog.logrocket.com/how-to-use-axios-post-requests/&quot;&gt;Axios&lt;/a&gt; and &lt;code&gt;XMLHttpRequest&lt;/code&gt; to understand its advantages. Here’s a comprehensive comparison:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Feature&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Fetch API&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Axios&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;XMLHttpRequest&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;JSON handling&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Manual parsing is needed&lt;/td&gt;
&lt;td&gt;Automatic JSON parsing&lt;/td&gt;
&lt;td&gt;Manual parsing needed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Error handling&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Requires manual checks (e.g., adding &lt;code&gt;.catch()&lt;/code&gt; methods and &lt;code&gt;!response.ok&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;Built-in error handling&lt;/td&gt;
&lt;td&gt;Complex and inconsistent&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Browser support&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Mordern browsers only&lt;/td&gt;
&lt;td&gt;Mordern browsers&lt;/td&gt;
&lt;td&gt;Excellent browser support including old browsers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Cancellation of requests&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Using &lt;code&gt;AbortController&lt;/code&gt;, this is supported&lt;/td&gt;
&lt;td&gt;Supported&lt;/td&gt;
&lt;td&gt;Does not support request cancellation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Makes use of promises, with a short and clean syntax&lt;/td&gt;
&lt;td&gt;Also makes use of promises&lt;/td&gt;
&lt;td&gt;Uses mostly callbacks and is too verbose&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In this guide, we’ve covered the fundamentals of the Fetch API, from making simple &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; requests to handling errors, working with headers, and managing streaming responses. While there’s much more to explore, this foundation equips you to confidently use &lt;code&gt;fetch&lt;/code&gt; in JavaScript. Mastering these concepts will help you build more efficient and reliable web applications.&lt;/p&gt;


&lt;/div&gt;
            &lt;style&gt;
    .share-icon.share-twitter span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-twitter.svg&quot;);
    }

    .share-icon.share-reddit span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-reddit.svg&quot;);
    }

    .share-icon.share-linkedin span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-linkedin.svg&quot;);
    }

    .share-icon.share-facebook span:first-child {
        background-image: url(&quot;https://blog.logrocket.com/wp-content/themes/logrocket/assets/svgs/share-facebook.svg&quot;);
    }
&lt;/style&gt;

&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon sd-sharing&quot;&gt;&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;&lt;div class=&quot;sd-content&quot;&gt;&lt;ul&gt;&lt;li class=&quot;share-twitter&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-twitter-202250&quot; class=&quot;share-twitter sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/fetch-api-javascript/?share=twitter&quot; target=&quot;_blank&quot; title=&quot;Click to share on Twitter&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Twitter (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-reddit&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;&quot; class=&quot;share-reddit sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/fetch-api-javascript/?share=reddit&quot; target=&quot;_blank&quot; title=&quot;Click to share on Reddit&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Reddit (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-linkedin&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-linkedin-202250&quot; class=&quot;share-linkedin sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/fetch-api-javascript/?share=linkedin&quot; target=&quot;_blank&quot; title=&quot;Click to share on LinkedIn&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on LinkedIn (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-facebook&quot;&gt;&lt;a rel=&quot;nofollow noopener noreferrer&quot; data-shared=&quot;sharing-facebook-202250&quot; class=&quot;share-facebook sd-button share-icon no-text&quot; href=&quot;https://blog.logrocket.com/fetch-api-javascript/?share=facebook&quot; target=&quot;_blank&quot; title=&quot;Click to share on Facebook&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sharing-screen-reader-text&quot;&gt;Click to share on Facebook (Opens in new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;share-end&quot;&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;            &lt;ul id=&quot;post-tags&quot;&gt;
            &lt;li&gt;
        &lt;a rel=&quot;tag&quot; href=&quot;https://blog.logrocket.com/tag/javascript/&quot;&gt;#javascript&lt;/a&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
            &lt;div class=&quot;post-popup&quot; data-popup-name=&quot;dev-cab&quot;&gt;
    &lt;i data-popup-dismiss=&quot;&quot; class=&quot;fa-solid fa-xmark post-popup__exit&quot;&gt;&lt;/i&gt;
    &lt;div class=&quot;post-popup__page active&quot;&gt;
        &lt;p class=&quot;post-popup__title&quot;&gt;Would you be interested in joining LogRocket&#39;s developer community? &lt;/p&gt;
        &lt;div class=&quot;post-popup__buttons&quot;&gt;
            &lt;button data-popup-next=&quot;&quot; class=&quot;lr-button&quot;&gt;Yea&lt;/button&gt;
            &lt;button data-popup-dismiss=&quot;&quot; class=&quot;lr-button&quot;&gt;No Thanks&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;post-popup__page&quot;&gt;
        &lt;p&gt;
            Join LogRocket’s Content Advisory Board. You’ll help inform the type of
            content we create and get access to exclusive meetups, social accreditation,
            and swag.
        &lt;/p&gt;
        &lt;a data-popup-dismiss=&quot;&quot; class=&quot;lr-button&quot; target=&quot;__blank&quot; href=&quot;https://lp.logrocket.com/blg/content-advisory-board-signup&quot;&gt;Sign up now&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
        &lt;/div&gt;
    </description><link>https://blog.logrocket.com/fetch-api-javascript/</link><guid isPermaLink="false">https://blog.logrocket.com/fetch-api-javascript/</guid><pubDate>Sun, 16 Mar 2025 16:00:00 GMT</pubDate><author>Njong Emy</author></item></channel></rss>