<?xml version="1.0" encoding="UTF-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" version="2.0"><channel><title>游戏开发设计心得分享 | 机核 GCORES</title><link>https://www.gcores.com/collections/64?tab=articles</link><atom:link href="http://rsshub.isrss.com/gcores/collections/64/articles" rel="self" type="application/rss+xml"></atom:link><description>欢迎大家在机核分享交流 - Powered by RSSHub</description><generator>RSSHub</generator><webMaster>contact@rsshub.app (RSSHub)</webMaster><language>zh</language><lastBuildDate>Wed, 19 Mar 2025 23:22:43 GMT</lastBuildDate><ttl>5</ttl><item><title>《塞尔达传说：王国之泪》的主线关卡设计拆解(初始空岛）</title><description>&lt;figure&gt;&lt;img alt=&quot;《塞尔达传说：王国之泪》的主线关卡设计拆解(初始空岛）&quot; src=&quot;https://image.gcores.com/347cb5c83b0c25724e3c5d7c8c282557-1280-720.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/29341d22-3733-482a-ad61-866db733e4c0.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/29341d22-3733-482a-ad61-866db733e4c0.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/29341d22-3733-482a-ad61-866db733e4c0.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;初始空岛浓缩了《塞尔达传说：王国之泪》的核心机制，是典型的任天堂“教学式关卡”设计&lt;/blockquote&gt;   &lt;h1&gt;前言&lt;/h1&gt;&lt;p&gt;《塞尔达传说：王国之泪》的初始空岛是玩家进入海拉鲁新冒险的起点，也是任天堂“教学式关卡”设计的典范。它浓缩了游戏的核心机制（“究极手”“余料建造”“通天术”“倒转乾坤”）、叙事引导和探索乐趣，同时通过精巧的空间布局和节奏控制，让玩家在无强制教程的情况下完成能力学习与世界观代入。拆解这一关卡，不仅能揭示任天堂在《王国之泪》中新手教学关卡设计的底层逻辑，也能为关卡教学与叙事融合提供启发。&lt;/p&gt;&lt;h1&gt; 1.故事&lt;/h1&gt;&lt;p&gt;初始空岛的主线故事以林克“生存与探索”为核心：林克从混沌中苏醒，失去所有力量，目睹塞尔达坠入深渊，随后被神秘声音（劳鲁）引导，逐步解锁新能力与祝福之光，解开时之神殿的秘密。这段剧情通过碎片化叙事（壁画、环境符号）与即时过场动画结合，既交代了前作与续作的衔接，也为玩家植入了“寻找塞尔达”的核心驱动力。 &lt;/p&gt;&lt;h1&gt; 2.目标、能力和挑战&lt;/h1&gt;&lt;h2&gt;2.1目标&lt;/h2&gt;&lt;h3&gt;玩家目标（任务）：&lt;/h3&gt;&lt;p&gt;1.寻找塞尔达——找到与林克失散的塞尔达&lt;/p&gt;&lt;p&gt;2.打开紧闭之门——打开关闭的时之神殿大门&lt;/p&gt;&lt;h3&gt;设计师目标：&lt;/h3&gt;&lt;p&gt;1.教会玩家基本的游戏机制和玩法，让玩家适应游戏的操作。&lt;/p&gt;&lt;p&gt;2.通过关键剧情的展现，让玩家代入角色。&lt;/p&gt;&lt;p&gt;3.通过独特的交互反馈，让玩家在关卡中获得乐趣。&lt;/p&gt;&lt;h2&gt;2.2能力&lt;/h2&gt;&lt;h3&gt;究极手&lt;/h3&gt;&lt;p&gt;功能：拼接物体，组合物体的功能&lt;/p&gt;&lt;p&gt;设计目标：为玩家提供自由的玩法，丰富探索体验&lt;/p&gt;&lt;h3&gt;余料建造&lt;/h3&gt;&lt;p&gt;功能：组合玩家装备，增强攻击力和武器耐久&lt;/p&gt;&lt;p&gt;设计目标：通过提升武器攻击力和耐久，优化和丰富玩家的战斗体验&lt;/p&gt;&lt;h3&gt;通天术&lt;/h3&gt;&lt;p&gt;功能：让玩家穿透天花板&lt;/p&gt;&lt;p&gt;设计目标：提升玩家的垂直探索便利性，同时便于垂直类型关卡的设计&lt;/p&gt;&lt;h3&gt;倒转乾坤&lt;/h3&gt;&lt;p&gt;功能：让被交互物体的时间回溯&lt;/p&gt;&lt;p&gt;设计目标：丰富玩家解谜的游戏内容，同时联系塞尔达和大师剑的剧情&lt;/p&gt;&lt;h2&gt;2.3挑战&lt;/h2&gt;&lt;h3&gt;神庙挑战&lt;/h3&gt;&lt;p&gt;形式：在神庙内解谜&lt;/p&gt;&lt;p&gt;目标：&lt;/p&gt;&lt;p&gt;1.作为整个初始空岛关卡的重要POI来引导玩家探索。&lt;/p&gt;&lt;p&gt;2.让玩家学习新获得的能力。&lt;/p&gt;&lt;h3&gt;关卡挑战&lt;/h3&gt;&lt;p&gt;形式：空岛之间的通过路径&lt;/p&gt;&lt;p&gt;目标：&lt;/p&gt;&lt;p&gt;1.检验玩家对于新能力的使用。&lt;/p&gt;&lt;p&gt;2.培养玩家对环境及环境中交互物体的利用意识。&lt;/p&gt;&lt;h3&gt;战斗挑战&lt;/h3&gt;&lt;p&gt;形式：&lt;/p&gt;&lt;p&gt;1.路上遭遇的怪物&lt;/p&gt;&lt;p&gt;2.怪物据点&lt;/p&gt;&lt;p&gt;目标：&lt;/p&gt;&lt;p&gt;1.让玩家学习战斗技巧，适应玩家血量机制、耐力系统和武器耐久机制。&lt;/p&gt;&lt;p&gt;2.提升玩家的战斗技巧，通过怪物装备和行为影响玩家的意识。 &lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;h1&gt;3.角色3C设计&lt;/h1&gt;&lt;h2&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;Control（操作）&lt;/span&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;基础移动&lt;/span&gt;：移动、跳跃、攀爬、游泳、攻击（通过高低差地形和一个个相对独立的空岛，强化垂直探索意识。）&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;核心能力&lt;/span&gt;：“究极手”“余料建造”“通天术”“倒转乾坤”&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;弱化战斗&lt;/span&gt;：初期仅提供树枝、石头等简陋武器，迫使玩家优先依赖环境互动而非传统战斗。&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;Camera（镜头）&lt;/span&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;自由镜头&lt;/span&gt;：镜头可以自由转动，便于玩家观察世界和关卡环境。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;操作辅助&lt;/span&gt;：使用究极手时镜头自动拉近，突出物体拼接的物理细节。&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;Character（角色表现）&lt;/span&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;无台词叙事&lt;/span&gt;：林克的沉默与肢体动作（如攀爬时的喘息）强化生存代入感。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;角色属性&lt;/span&gt;：耐力系统、角色血量&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;环境反馈&lt;/span&gt;：寒冷区域的身体颤抖、滑翔时的风力阻力，均通过角色动作传递信息。&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt; 4.关卡流程&lt;/h1&gt;&lt;h2&gt;关卡气泡图&lt;/h2&gt;   &lt;figure&gt;&lt;img width=&quot;906&quot; height=&quot;998&quot; src=&quot;https://image.gcores.com/3835095308497e0dbec6ade324f8809b-906-998.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt; 从气泡图可以看出，初始空岛的关卡流程主要分为三大部分——&lt;br&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;第一部分&lt;/span&gt;：路线1，玩家从觉醒室苏醒后随着引导前往时之神殿。&lt;br&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;第二部分&lt;/span&gt;：路线2、3、4、5，玩家依次前往三座神庙，解锁究极手、余料建造、通天术三个新能力和获得三个祝福之光后回到时之神殿，打开大门，获得倒转乾坤能力，遇到由于血量不足无法打开的大门。&lt;br&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;第三部分&lt;/span&gt;：路线6、7，玩家传送回觉醒室，熟悉倒转乾坤能力，获得第四个祝福之光，回到时之神殿，打开最后的大门。&lt;/p&gt;&lt;h2&gt;关卡流程图&lt;/h2&gt;&lt;p&gt;初始空岛的关卡流程主要利用&lt;span style=&quot;font-weight: bold&quot;&gt;IPMT机制，&lt;/span&gt;通过&lt;span style=&quot;font-weight: bold&quot;&gt;“教学-解谜-实践”&lt;/span&gt;的循环来巩固玩家的肌肉记忆，培养玩家的游戏意识。 &lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1983&quot; height=&quot;16736&quot; src=&quot;https://image.gcores.com/e743d616b97763e6a22b94da2de89a3d-1983-16736.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h1&gt;5.关卡引导设计&lt;/h1&gt;&lt;h1&gt;PART1：从觉醒室到时之神殿&lt;/h1&gt;   &lt;figure&gt;&lt;img width=&quot;2084&quot; height=&quot;1736&quot; src=&quot;https://image.gcores.com/e9dc2c180aa1c183f138d8da12dff899-2084-1736.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt; &lt;/p&gt;&lt;h3&gt;1.觉醒室洞窟&lt;/h3&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;764&quot; src=&quot;https://image.gcores.com/3d633534cf19ba2442e2889dc8acc871-1280-764.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;林克苏醒的过场动画后将画面聚焦于大师剑，便于玩家控制角色后第一时间找到大师剑的位置。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;382&quot; src=&quot;https://image.gcores.com/067668f83a5227ddad502882d743c1aa-1280-382.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;过场演出结束后，镜头从大师剑转回到玩家角色，交给玩家控制权，POI为大师剑和藤蔓布满的洞口，引导玩家拿起武器，斩断藤蔓。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;257&quot; src=&quot;https://image.gcores.com/0f9ee59b5a04807e2966378352617b3b-1280-257.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;进入房间后前进几步，交互物体高亮发光，引导玩家交互。&lt;/li&gt;&lt;li&gt;同时左侧的大型齿轮结构也会吸引玩家的注意力，引起玩家的疑问。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;193&quot; src=&quot;https://image.gcores.com/ddb8539889f8ece7dd25b6c194f289b3-1280-193.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;通过三次高度逐渐升高的跳水，来提示玩家只要落点在深水区，无论从多高的地方跳下都不会收到伤害，循序渐进地鼓舞玩家“跳下”的信心。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;382&quot; src=&quot;https://image.gcores.com/9d29ac093a8f5530a3796aaafe4837d7-1280-382.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;POI为散发着明显光亮的出口和点点绿光的宝箱，鲜明的光照表明玩家已经结束在洞窟内的探索，将要正式开始探索。&lt;/li&gt;&lt;li&gt;出口处的视觉中心飞起来的几只鸟表明外面的环境存在着生物。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;718&quot; src=&quot;https://image.gcores.com/108019ab4c8b34fa2790dca4838e408a-1280-718.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;经过之前的三次实践，玩家可以自信地在跳台跳入下方的水池。&lt;/li&gt;&lt;li&gt;在跳下的过程中，会让玩家环绕俯视整个初始空岛的环境，让玩家对初始空岛产生初步的认识。&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;2.前往时之神殿&lt;/h3&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;382&quot; src=&quot;https://image.gcores.com/775d9f5f200e5e7617739b1401401837-1280-382.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;落水后，最鲜明的POI就是前方的石头大门，而这个建筑物也是整个初始空岛的主线关卡视觉引导。&lt;/li&gt;&lt;li&gt;水池中有大量的荷叶，可以让玩家站立恢复精力。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;256&quot; src=&quot;https://image.gcores.com/a86c32077486e2ba36b9d21aefe13213-1280-256.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;走出水池后，一片占据画面几乎一半的雾迅速向左消散，展露出远处的时之神殿一角和近处的交互物体，玩家可以试取武器（树枝）和采集材料（蘑菇）。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;382&quot; src=&quot;https://image.gcores.com/66f4d476fe7a091cc31845555d96c37b-1280-382.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;与敌人战斗时，获得提示——武器在快损坏时伤害可以翻倍。&lt;/li&gt;&lt;li&gt;战胜敌人后看到的石头亭子中获得额外奖励，这个亭子建筑物也成为了整个初始空岛的额外奖励视觉引导。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;383&quot; src=&quot;https://image.gcores.com/33a1c2c88f19698b844f3e34fa66a183-1280-383.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;拿到普尔亚平板后，脚下的砖石地面引导玩家前进。&lt;/li&gt;&lt;li&gt;远处可以看到引导主线关卡的石门和引导额外奖励的石亭，以及更远处的目标点——时之神殿。&lt;/li&gt;&lt;li&gt;石亭中像魔像学习注视敌人攻击的方式，为后续提升强度的战斗做准备。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;384&quot; src=&quot;https://image.gcores.com/47b859db8376f9bd8afe8dbdc13b86e3-1280-384.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;走到石门前时前方出现浓雾，穿过石门后浓雾消散，露出时之神殿的样貌。&lt;/li&gt;&lt;li&gt;穿过石门，跳入下方水池。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;257&quot; src=&quot;https://image.gcores.com/592f907f1ea930c7f2e0aa81efa890e1-1280-257.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;掉入水池后可以看到两个地灯引导，同时可以看到发出红光的魔像敌人。&lt;/li&gt;&lt;li&gt;如果不直接前往地灯的路径，向相反的方向也可以环绕水池一周到达地灯处。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;259&quot; src=&quot;https://image.gcores.com/5a0ecf15199c68e5d788b42198291a5c-1280-259.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;战胜魔像敌人后继续向前，前方出现两条路径，玩家可以选择直接与敌人战斗，也可以前往山坡上利用环境中的巨石击败敌人。&lt;/li&gt;&lt;li&gt;山坡远处还可以看到代表额外奖励的石亭，证明走山坡路径是一个“低风险-高回报”的选择。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;384&quot; src=&quot;https://image.gcores.com/c32e891fa3645c3577fddc3dccb86ca0-1280-384.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;继续向前再次看到主线引导的石门，浓雾背后就是目的地——时之神殿。&lt;/li&gt;&lt;li&gt;在火堆处可以学习到食物类材料被火烤后可以获得更好的回复效果。&lt;/li&gt;&lt;li&gt;在时之神殿前，遇到持盾的敌人，是玩家目前遇到的最强敌人，目的是提升玩家的战斗技巧。&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;PART2：从时之神殿到第一个神庙&lt;/h2&gt;   &lt;figure&gt;&lt;img width=&quot;2144&quot; height=&quot;1536&quot; src=&quot;https://image.gcores.com/56f7ee9178458d4f77f89b4f8cf3ed82-2144-1536.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;较短的路径，让玩家快速达成第一个神庙的目标，熟悉探索节奏。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;261&quot; src=&quot;https://image.gcores.com/e6fd698fe370a800ab1579fc6e640641-1280-261.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;过场后镜头聚焦第一个神庙，由于处在高台上，所以神庙位置清晰可见。&lt;/li&gt;&lt;li&gt;玩家可以直接从断崖跳下进入新区域。&lt;/li&gt;&lt;li&gt;跳下后有两条路径，向上的台阶作为更明显的路径会引导玩家向上。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;197&quot; src=&quot;https://image.gcores.com/e60625af34515d6a52df004d3568cb2b-1280-197.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;在台阶处可以获得并学习弓箭的初步用法。&lt;/li&gt;&lt;li&gt;到达台地顶层会看到无法使用的滑轨、钩子和木板，为玩家留下谜题（“滑轨-钩子”）。&lt;/li&gt;&lt;li&gt;在到达第一个神庙的路径中会有断掉的台阶，墙面上的蘑菇引导玩家攀爬通过。&lt;/li&gt;&lt;li&gt;同样会遇到无法到达的空岛和无法使用的木板，为玩家留下谜题（“空岛-木板”），引发玩家思考，通过这类阻碍为第一个能力的功能做铺垫。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;193&quot; src=&quot;https://image.gcores.com/856f79de1c2a2bd177e7dd1530c1a01c-1280-193.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;在第一个神庙处，可以看到接下来的第二、第三个神庙，方便玩家在地图上标点，确定中途目标。&lt;/li&gt;&lt;li&gt;进入神庙后可以立即获得究极手能力。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;194&quot; src=&quot;https://image.gcores.com/fbdcf148a92820fb2564c455aa7b3351-1280-194.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;神庙内第一个是简单的“搭桥过河”谜题，为玩家之前遇到的“空岛-木板”谜题提供解法。（究极手操控物体）&lt;/li&gt;&lt;li&gt;第二个关卡通过“木板-钩子”的组合通过滑轨的演示，启发玩家利用身边环境中的材料，同时为玩家之前遇到的“滑轨-钩子”谜题提供解法。（究极手组合物体）&lt;/li&gt;&lt;li&gt;通过神庙后获得祝福之光（未知作用的道具，玩过旷野之息的玩家会知道作用，没有玩过旷野之息的玩家会留下悬念）。&lt;/li&gt;&lt;li&gt;离开神庙后劳鲁提示任务进度。&lt;/li&gt;&lt;li&gt;回到之前无法通过的地方，利用神庙内学到的能力迅速实践，巩固“究极手”能力的运用。&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;PART3：从第一个神庙到第二个神庙&lt;/h2&gt;   &lt;figure&gt;&lt;img width=&quot;1036&quot; height=&quot;1232&quot; src=&quot;https://image.gcores.com/8e48b3c4010abf46a06babdccad871ad-1036-1232.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;较长的路径，主要为了培养玩家使用“究极手”探索的能力和意识。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;383&quot; src=&quot;https://image.gcores.com/71dfd700cd02973f040267c5d54f8bd0-1280-383.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;与木匠魔像学习砍树，组合树干“搭桥过河”，进一步巩固玩家对究极手能力的运用。&lt;/li&gt;&lt;li&gt;同时暗示玩家不只是散落的材料可以利用，也可以自由获取材料来利用。&lt;/li&gt;&lt;li&gt;在劳鲁虚影旁可以观察到“帆”的特性。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;259&quot; src=&quot;https://image.gcores.com/6e59d292674ed9144370133ee2d1c9f3-1280-259.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;前方可以遇到浮空平台和看到零落空岛上的废墟建筑，玩家可以学习浮空平台的使用，这类浮空平台在初始空岛一般用于到达获得额外奖励的小型空岛。&lt;/li&gt;&lt;li&gt;继续向前可以学习狩猎技巧，获得肉食。&lt;/li&gt;&lt;li&gt;在料理魔像处可以学习料理方法，制作回复效果更好的料理，为之后的战斗做准备。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;753&quot; src=&quot;https://image.gcores.com/7c0e8cd3655dec4ee54abe7717072b68-1280-753.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;遇到魔像据点，可以练习战斗技巧，战胜敌人后获得宝箱。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;260&quot; src=&quot;https://image.gcores.com/b288e4c325ec5f0b98fa2abc26536bd5-1280-260.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;前方有两条路径，玩家可以选择直接从瀑布处跳入下方水池。&lt;/li&gt;&lt;li&gt;也可以选择继续向前到达前方的呀哈哈处，在呀哈哈头顶会出现对话框，这也是引导玩家向前的方法，让玩家遇到新的可以对话的生物，缓解游戏过程中的孤独感。&lt;/li&gt;&lt;li&gt;通过究极手通过滑轨，送呀哈哈团聚，获得奖励，同时培养玩家利用究极手解谜的能力。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;159&quot; src=&quot;https://image.gcores.com/163593dcbe336ac24a267fb1ea49e114-1280-159.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;组建帆船提高水池，到达第二个神庙。&lt;/li&gt;&lt;li&gt;在神庙内获得“余料建造”能力，学习武器余料和在箭上余料的方法。&lt;/li&gt;&lt;li&gt;获得第二个祝福之光。&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;PART4：从第二个神庙到第三个神庙&lt;/h2&gt;   &lt;figure&gt;&lt;img width=&quot;1706&quot; height=&quot;1004&quot; src=&quot;https://image.gcores.com/8bfbeddc812b932fa4e9e9e157022535-1706-1004.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;初始空岛关卡中最长的路径，让玩家逐渐熟悉世界探索以及能力的使用。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;195&quot; src=&quot;https://image.gcores.com/dfcd3152e05a9b23ceb1615a94608953-1280-195.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;出神庙后可以看到第三个神庙在遥远的地方。&lt;/li&gt;&lt;li&gt;同时魔像管家送来电池，并引导玩家前往学习电池和左纳乌装置使用的地点。&lt;/li&gt;&lt;li&gt;恢复操作后可以在旁边的洞口实践刚才余料的石锤，获得宝箱。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;258&quot; src=&quot;https://image.gcores.com/242d0bac8a62cb676787687f0fb61992-1280-258.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;遭遇战，引入新敌人丘丘，同时展示丘丘和魔像之间的生态&lt;/li&gt;&lt;li&gt;据点战打开宝箱后获得兵队利刃，提示玩家敌人材料也可以余料建造。&lt;/li&gt;&lt;li&gt;进入池边洞窟，遇到新敌人蝙蝠和魔犹伊，同时可以开采矿物、获得光亮花种子&lt;/li&gt;&lt;li&gt;宝箱获得残旧外衣，增加玩家防御力。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;262&quot; src=&quot;https://image.gcores.com/dacedf00baae7f1932d7cace933283b3-1280-262.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;通过洞窟后可以看到玩家已经更接近第三个神庙了，同时在池边进行左纳乌装置的组合与使用。&lt;/li&gt;&lt;li&gt;侧面还有通过浮空平台到达的额外奖励空岛。&lt;/li&gt;&lt;li&gt;搭建船只通过水池。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;192&quot; src=&quot;https://image.gcores.com/2f485e627068a63acaebdfba05d19316-1280-192.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;学习使用打火石生火，提高玩家的生存技巧。&lt;/li&gt;&lt;li&gt;据点战可跳过，也可以留下提升战斗技巧。&lt;/li&gt;&lt;li&gt;组合矿车和风扇进入采矿的洞窟，熟练左纳乌装置的使用。&lt;/li&gt;&lt;li&gt;在洞窟内学习光亮花的使用以及左纳乌尼姆的作用。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;382&quot; src=&quot;https://image.gcores.com/27dc14cb2a7a0c7b9864e17d5237aadd-1280-382.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;搭建风扇矿车到达新空岛，了解左纳乌装置制造机的使用。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;752&quot; src=&quot;https://image.gcores.com/2cedd9353030e5c39d7dcbe4fc66e3da-1280-752.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;此处有三条路径，但实际上只有一条路径可以前往目的地，保持着非线性探索和线性主线。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;259&quot; src=&quot;https://image.gcores.com/9d36adbaab0e3ad9518209f09b5c8090-1280-259.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;巨石门后的山崖被冻结无法通过（玩家也可以通过砍树搭梯子攀爬）。&lt;/li&gt;&lt;li&gt;右侧滑轨是呀哈哈和宝箱的额外奖励路线，滑轨解谜提高玩家的解谜技巧，宝箱内有便携锅，可以为玩家在雪山地区的生存提供保障。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;751&quot; src=&quot;https://image.gcores.com/78079b44370039b86fbc7fafb5f7436a-1280-751.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;竖穴的山洞内学习防寒措施。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;195&quot; src=&quot;https://image.gcores.com/0d734fe6a37c24e3858cedb56cc8931d-1280-195.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;通过洞窟后有两个呀哈哈解谜，让玩家获得新的呀哈哈解谜方法。&lt;/li&gt;&lt;li&gt;与普通敌人战斗后与左纳乌余料武器的敌人战斗，提示玩家火龙头余料武器的效果。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;257&quot; src=&quot;https://image.gcores.com/32f3ba1cd105e22081d719187ea5994c-1280-257.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;无尽的洞窟中获得强力的余料材料炸弹花，同时遇到新敌人莱克莱克。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;198&quot; src=&quot;https://image.gcores.com/fec3cf9800f2ae0470eb50c58c27f91e-1280-198.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;通过洞窟，第三个神庙近在眼前。&lt;/li&gt;&lt;li&gt;树林暗示玩家可以砍树搭桥攀爬上岩壁。&lt;/li&gt;&lt;li&gt;攀爬上后玩家可以选择直接进入神庙，也可以选择利用刚才搭建的木桥上到右侧的树洞平台（也可以获得通天术后到达），获得防寒服（可以帮助玩家应对防寒料理吃完的困境）。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;387&quot; src=&quot;https://image.gcores.com/2c81833b34a29264c5e007d98961964d-1280-387.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;在神庙内获得和学习通天术。&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;PART5：回到时之神殿&lt;/h2&gt;   &lt;figure&gt;&lt;img width=&quot;665&quot; height=&quot;583&quot; src=&quot;https://image.gcores.com/950fbb298509627a1377edb374a962fa-665-583.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;结束一段长路径探索后，迅速到达目标点，给予玩家休息时间，同时最终考察玩家对各种能力的综合使用情况。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;259&quot; src=&quot;https://image.gcores.com/7b77cbb60f15d5b8e244565b81852192-1280-259.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;学习翼装置的使用，滑翔到时之神殿。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;196&quot; src=&quot;https://image.gcores.com/7e9d62686324b3e0ab752839fecfe8e6-1280-196.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;进入神殿，获得倒转乾坤能力，并在前方水车装置处立刻实践。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;259&quot; src=&quot;https://image.gcores.com/43d24663590099b764acfec38492e149-1280-259.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;女神像——无法有效互动&lt;/li&gt;&lt;li&gt;大门——无法打开，得知血量不足，需要集齐四个祝福之光，为新玩家揭示祝福之光的作用。&lt;/li&gt;&lt;li&gt;直接传送回觉醒室，防止玩家产生疲惫与厌烦。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;260&quot; src=&quot;https://image.gcores.com/97df3c0563cc1e9ebf27615f9a669454-1280-260.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;看到一开始的齿轮装置，玩家应用通天术和倒转乾坤。&lt;/li&gt;&lt;li&gt;神庙内提升玩家对倒转乾坤的使用技巧。&lt;/li&gt;&lt;li&gt;地灯处，电池升级魔像，远处光照高亮的出口。&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;PART6：离开初始空岛&lt;/h2&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;260&quot; src=&quot;https://image.gcores.com/209191ba1a64f4fd9642796b1fd26655-1280-260.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;搭乘翼回到时之神殿，过程中俯瞰初始空岛全貌，让玩家获得完成探索的成就感。&lt;/li&gt;&lt;li&gt;女神像处有效互动，获得心之容器。&lt;/li&gt;&lt;li&gt;打开大门，与劳鲁告别。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;259&quot; src=&quot;https://image.gcores.com/63da0132686fff2972a98941a2ba9e89-1280-259.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;主线引导的石门再次出现。&lt;/li&gt;&lt;li&gt;玩家互动后，演出将大师剑传给塞尔达。&lt;/li&gt;&lt;li&gt;演出结束后白龙与远处风暴龙卷吸引玩家实现，也暗示了玩家所要到达的第一个异变区域。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;259&quot; src=&quot;https://image.gcores.com/63d5e0a1ec426eda6b2f2dd9ab26dc54-1280-259.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;塞尔达呼唤林克，引导玩家离开初始空岛，前往监视堡垒。&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;6.关卡节拍表&lt;/h1&gt;   &lt;figure&gt;&lt;img width=&quot;2020&quot; height=&quot;1596&quot; src=&quot;https://image.gcores.com/6fc7ffbe232c1bc44ce77ff99ed860b6-2020-1596.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;2988&quot; height=&quot;1168&quot; src=&quot;https://image.gcores.com/f55ffffdbc6ace2b6b05153bd7d5c637-2988-1168.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt; &lt;/p&gt;&lt;h1&gt;7.玩家动线&lt;/h1&gt;&lt;p&gt;螺旋上升的探索循环：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;环境引导&lt;/span&gt;：面包屑式的资源引导和具有可达性隐藏奖励，鼓励玩家自由探索。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;双向探索&lt;/span&gt;：玩家同时进行着横向和纵向的探索，为之后玩家在海拉鲁大陆的探索培养探索习惯。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;探索节点&lt;/span&gt;：三大神庙作为探索节点，引导玩家进行探索。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;关卡核心&lt;/span&gt;：时之神殿作为终极目标，需集齐能力后折返挑战，本质上是“锁-匙”的设计。在游戏后期的关卡设计中依然采用这种设计方法。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1982&quot; height=&quot;1582&quot; src=&quot;https://image.gcores.com/7e0cea3616f104d9dbb324dbfc2f08a7-1982-1582.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h1&gt;8.玩家行为与情绪&lt;/h1&gt;   &lt;figure&gt;&lt;img width=&quot;1296&quot; height=&quot;526&quot; src=&quot;https://image.gcores.com/924736a4ec87beba5baaef018ca04d89-1296-526.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;652&quot; height=&quot;502&quot; src=&quot;https://image.gcores.com/0c66fbbb5bc6a6ac5b90e52d7609840c-652-502.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt; &lt;/p&gt;&lt;h1&gt;9.互动事件：环境叙事与玩法融合&lt;/h1&gt;&lt;p&gt;初始空岛通过将&lt;span style=&quot;font-weight: bold&quot;&gt;游戏教学&lt;/span&gt;、&lt;span style=&quot;font-weight: bold&quot;&gt;玩法机制&lt;/span&gt;和&lt;span style=&quot;font-weight: bold&quot;&gt;环境叙事&lt;/span&gt;相结合，让玩家每一次操作都可以理解世界观。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;NPC引导&lt;/span&gt;：劳鲁虚影以及管家魔像的碎片化对话暗示空岛历史，木匠魔像、狩猎魔像、料理魔像、采矿魔像等在进行教学时也向玩家暗示了左纳乌时期居民的生活习惯，在完善游戏叙事背景的同时也为玩家提供任务目标。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;环境反馈&lt;/span&gt;：砍树生成桥梁、火烧藤蔓开路等环境交互形式，鼓励玩家“所见即所用”的思维方式。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;无障碍地形&lt;/span&gt;：看似悬崖绝路的地形，玩家也可以自由使用能力来通过，可以用旧能力的“笨办法”，如砍树搭梯子，也可以在获得新能力后回头探索。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;动态天气&lt;/span&gt;：寒冷区域迫使玩家烹饪抗寒料理，引入生存机制。&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;10.探索要素：密度与惊喜的平衡&lt;/h1&gt;&lt;p&gt;初始空岛的设计核心在于：&lt;span style=&quot;font-weight: bold&quot;&gt;用有限的区域创造“无限”的探索感&lt;/span&gt;。通过精心控制可交互元素的密度、分布逻辑和惊喜触发机制，既避免开放世界常见的“清单式疲劳”，又让玩家始终处于“发现-验证-再发现”的良性循环中。 &lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;964&quot; height=&quot;826&quot; src=&quot;https://image.gcores.com/30f0013d4d244863a7ee3a260641e5db-964-826.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;空岛的探索内容分为三层：&lt;span style=&quot;font-weight: bold&quot;&gt;表层-解谜-隐藏&lt;/span&gt;，确保玩家无论是否“深入挖掘”都能获得满足感。&lt;/p&gt;&lt;h2&gt;10.1&lt;span style=&quot;font-weight: bold&quot;&gt;表层资源&lt;/span&gt;（高密度、低门槛）&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;作用&lt;/span&gt;：面包屑式的奖励资源指引，维持玩家的基础探索动力，避免空荡感。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;案例&lt;/span&gt;：&lt;/li&gt;&lt;li&gt;显眼的果树群、树下的蘑菇（提供基础食物）&lt;/li&gt;&lt;li&gt;洞窟内发光矿石（击碎必掉左纳乌能源，强化“采矿”意识，提高洞窟探索的必要性）&lt;/li&gt;&lt;li&gt;散落的木板、石头（可随时拼接组合或余料建造）&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;设计逻辑&lt;/span&gt;：沿主路径和视野开阔处密集分布，确保玩家“随手可得”。&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;10.2&lt;span style=&quot;font-weight: bold&quot;&gt;中层谜题&lt;/span&gt;（中等密度、需要使用基础能力）&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;作用&lt;/span&gt;：引导玩家实践新能力，让玩家认识到能力是进一步探索的基础。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;案例&lt;/span&gt;：&lt;/li&gt;&lt;li&gt;被阻断的空岛（需究极手搭桥）&lt;/li&gt;&lt;li&gt;高台的宝箱（需通天术穿透地面）&lt;/li&gt;&lt;li&gt;背包呀哈哈（在主路径分支，需要利用究极手送呀哈哈团聚）&lt;/li&gt;&lt;li&gt;敌人据点内的宝箱（分布在主路径上，但不会阻止玩家移动，玩家战胜敌人后可获得奖励）&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;设计逻辑&lt;/span&gt;：分布在神庙之间的衔接区域，形成在玩家进行能力巩固循环的同时给予奖励。&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;10.3&lt;span style=&quot;font-weight: bold&quot;&gt;隐藏奖励&lt;/span&gt;（低密度、高惊喜）&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;作用&lt;/span&gt;：提供“超越预期的奖励”，塑造探索仪式感。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;案例&lt;/span&gt;：&lt;/li&gt;&lt;li&gt;地图中零落的空岛（需要借助漂浮平台到达，岛上均设置了宝箱）&lt;/li&gt;&lt;li&gt;隐藏的呀哈哈（如追逐花形式的呀哈哈、湖中的呀哈哈等）&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;设计逻辑&lt;/span&gt;：远离主路径，依赖环境细节的暗示。&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;11.战斗设计：偏向克制与教学&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;敌人配置&lt;/span&gt;：整个初始空岛主路径中没有强力的敌人，也没有最终BOSS，仅出现低阶魔像、蝙蝠、丘丘等简单的敌人，避免初期挫败感。血量较高的莱克莱克固定在洞窟中，玩家也可以选择避战。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;策略引导&lt;/span&gt;：鼓励利用场景环境作战。例如，山坡上的滚石也可以伤害敌人。&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;12.重要的演出与镜头&lt;/h1&gt;&lt;p&gt;在演出过程中会先展示周边环境，最后将镜头聚焦于玩家的目标地点。&lt;/p&gt;&lt;h2&gt;12.1&lt;span style=&quot;font-weight: bold&quot;&gt;苏醒镜头&lt;/span&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;演出内容：林克苏醒到站立，寻找神秘的声音，发现大师剑&lt;/li&gt;&lt;li&gt;镜头：特写（从手臂到头部）——远景（林克环顾四周）——特写（手臂）——远景——特写（大师剑）&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;9162&quot; height=&quot;906&quot; src=&quot;https://image.gcores.com/e23fc47c32aa0f5c870c840d9ba400aa-9162-906.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h2&gt;12.2从空岛跳下的长镜头&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;演出内容：林克一跃而下，向下俯冲。&lt;/li&gt;&lt;li&gt;镜头：近景——远景——镜头向后拉——摄像机以林克为中心环绕一周——全景——远景&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;4587&quot; height=&quot;453&quot; src=&quot;https://image.gcores.com/faeab0fbfe5e21f53622ce1f8c1fa4f9-4587-453.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h2&gt;12.3时之神殿门前劳鲁对话镜头&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;演出内容：林克无法打开大门，劳鲁出现，解答疑惑。&lt;/li&gt;&lt;li&gt;镜头：全景——特写——近景——特写——全景——远景——全景&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;5239&quot; height=&quot;397&quot; src=&quot;https://image.gcores.com/2f461aa1302d3bd9ebf098b48106a9ec-5239-397.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h2&gt;12.4与劳鲁告别的演出&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;演出内容：林克与劳鲁告别，得知解决手臂瘴气的方法&lt;/li&gt;&lt;li&gt;镜头：近景——局部特写——近景——全景——近景——远景&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;4603&quot; height=&quot;451&quot; src=&quot;https://image.gcores.com/d1486f85e8fc407d8bb09b8b3b603e3f-4603-451.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h2&gt;12.5传送大师剑的演出&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;演出内容：林克将残废的大师剑传送给回到过去的塞尔达&lt;/li&gt;&lt;li&gt;镜头：全景——近景——特写——近景——远景——全景&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;6202&quot; height=&quot;335&quot; src=&quot;https://image.gcores.com/dfd82fc1c0d5fbc15b25fbe30c50629b-6202-335.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt; &lt;/p&gt;&lt;h1&gt;结语：教科书级的“引导式关卡设计”&lt;/h1&gt;&lt;p&gt;初始空岛作为一个开放世界冒险游戏新手教学关卡，创造了一种“线性箱庭”的探索体验，通过“能力解锁-空间探索-叙事推进”的循环，实现了教学与探索的无缝融合。玩家在大约3小时的流程中，既掌握了游戏核心机制，也完成了从“迷茫求生者”到“主动探索者”的心理转变，为游戏后续上百小时的冒险奠定了基础。 &lt;/p&gt; </description><link>https://www.gcores.com/articles/195222</link><guid isPermaLink="false">gcores-195222</guid><pubDate>Wed, 26 Feb 2025 08:00:00 GMT</pubDate><author>雨浥星尘</author><enclosure url="https://image.gcores.com/347cb5c83b0c25724e3c5d7c8c282557-1280-720.png" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/347cb5c83b0c25724e3c5d7c8c282557-1280-720.png"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/29341d22-3733-482a-ad61-866db733e4c0.mp3" length="1452" type="audio/mp3"></enclosure><itunes:duration>0:24:12</itunes:duration><category>知识挖掘机</category></item><item><title>血条进化史 3.0 - 战斗时长和节奏</title><description>&lt;figure&gt;&lt;img alt=&quot;血条进化史 3.0 - 战斗时长和节奏&quot; src=&quot;https://image.gcores.com/e50ed90da099d86d6d0cf0a441bf10ed-480-192.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/404661a5-33f1-4c16-9544-6f7f535b1b5d.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/404661a5-33f1-4c16-9544-6f7f535b1b5d.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/404661a5-33f1-4c16-9544-6f7f535b1b5d.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;JAPAN Studio 是真的强得可怕&lt;/blockquote&gt;   &lt;h1&gt;前言&lt;/h1&gt;&lt;p&gt;很经验主义 很主观的一个主题。然后强推一下 ICO &amp;gt; 旺达与巨像 &amp;gt;  食人的大鹫  这系列Sony的第一方工作室的作品，不管是游戏设计 技术力 表现力都十分惊人远超他们所在的时代。&lt;/p&gt;&lt;p&gt;文章讨论范围集中于真3D 实时战斗动作游戏为主，捎带一点射击游戏。 &lt;/p&gt;&lt;h1&gt;正常战斗的总时长&lt;/h1&gt;&lt;p&gt;一般来说装备 等级达标 且打过了的情况下的战斗时长的一些数据。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;传统MMO：类魔兽&lt;br&gt;代表战斗循环：小循环：GCD+技能轮换+职业资源管理 | 大循环：躲圈阶段-输出阶段 循环 | 躲圈阶段单人约15~30秒&lt;br&gt;战斗时长：约10+分钟&lt;/li&gt;&lt;li&gt;动作MMO：洛奇英雄传 / 剑灵 / 龙之谷&lt;br&gt;代表战斗循环：小循环：躲避-蹭刀 | 大循环：躲Boss关键技能-等待输出阶段-输出阶段疯狂输出&lt;br&gt;战斗时长：10分钟左右&lt;/li&gt;&lt;li&gt;ACT：怪物猎人：老猎人初见一般是10+分钟，近战针对配装后6~8分钟 远程逃课大约5分出头&lt;br&gt;小循环（普通飞龙种）：怪物普通状 每次蹭刀机会之间间隔约12秒 怒后 17秒 疲劳约8秒&lt;br&gt;*我本来以为高清化后世界的战斗节奏会和之前的P2/XX等有很大区别，实际上计时一看区别很小。卡普空这套战斗节奏公式含金量是真的很高。&lt;br&gt;**很多诸如 噬神者 / 讨鬼传 / 灵魂献祭 / Dauntless / Wild hearts 都在MH基础上减慢或加快了节奏，但是就ACT合作狩猎这个题材来说 MH还是最成功的。&lt;/li&gt;&lt;li&gt;传统ACT：战神 10分钟左右 但是中间会有不少时长是Boss换阶段 召唤杂兵，实际每个战斗阶段持续时间只有2~3分钟&lt;/li&gt;&lt;li&gt;传统ACT：鬼泣 3~5分钟&lt;/li&gt;&lt;li&gt;现在的抽卡动作手游 - 3~5分钟&lt;/li&gt;&lt;li&gt;ACT：噬神者 GodEater 3~5分钟&lt;/li&gt;&lt;li&gt;ARPG：仁王 3~5分钟&lt;/li&gt;&lt;li&gt;传统ACT：3D忍龙 2~3分钟&lt;/li&gt;&lt;li&gt;ARPG：黑魂 - 2~3分钟&lt;/li&gt;&lt;li&gt;ACT：灵魂献祭 2~3分钟&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;小的循环交互对玩家注意力要求高 总战斗时长就不应该过长，但是如果小循环对玩家注意力/操作要求过低 游戏又容易显得没有紧张感 无聊，这个平衡的话参照现有游戏吧。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;怪物的攻击动画数量&lt;/span&gt;&lt;br&gt;怪猎：怪物一般普通状态 有5~6种攻击，然后 疲劳+愤怒后动作发生变化，很多都会出现不同派生。可以视为15种左右。一般来说玩家和怪物特定身位的情况下可能随机出3+种攻击。&lt;br&gt;魂系：Boss一般也是5~6种攻击，但是除少数2阶段Boss外，很少有派生。一般来说玩家和怪物特定身位的情况下，只会在2~3种攻击中随机出。且魂系Boss抬手长很多。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;其他游戏类型&lt;br&gt;&lt;/span&gt;手游Moba一局约10~15分钟  PC Moba一局约15~20分钟 彩六/CS约30分钟 Dota2也是约30分钟&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;br&gt;&lt;/span&gt;Boss战时长 和Moba 或者说类守望先锋/彩六的英雄射击的单局时长和体验设计思路类似，或者说和MMO的当前版本毕业要多久的设计思路类似。需要贴合目标玩家的生活习惯。超休闲游戏 SLG可能现有版本就可以顶1年，但是 射击游戏 ACT哪怕每3个月稳定推出内容都不一定能稳住热度。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;魔鬼藏在细节里面&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;少了一颗钉子，丢了一只马掌； 少了一只马掌，折了一匹战马； 少了一匹战马，损了一位骑士； 少了一位骑士，输了一场战斗； 输了一场战斗，亡了一个国家。&lt;/blockquote&gt;&lt;ol&gt;&lt;li&gt;战斗动画的长短快慢&lt;/li&gt;&lt;li&gt;影响攻守转换循环时间&lt;/li&gt;&lt;li&gt;影响 Boss战的整体时长&lt;/li&gt;&lt;li&gt;影响玩家每一次重新打开游戏时那一次 gaming session 的时长和体验&lt;/li&gt;&lt;li&gt;影响玩家从入坑到弃坑整个life time的游戏体验&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;一环套一环 细节很重要，如果精力允许 务必打磨细致。&lt;/p&gt;&lt;h1&gt;战斗中下血的节奏&lt;/h1&gt;&lt;p&gt;宏观上的下血节奏&lt;/p&gt;&lt;ol&gt;&lt;li&gt;均匀下血&lt;/li&gt;&lt;li&gt;分阶段（玩家不能控制&lt;/li&gt;&lt;li&gt;分阶段（玩家能控制阶段转换&lt;/li&gt;&lt;li&gt;一击必杀&lt;/li&gt;&lt;/ol&gt;   &lt;figure&gt;&lt;img width=&quot;3000&quot; height=&quot;2048&quot; src=&quot;https://image.gcores.com/d509159b0886c795ebc1664d6d63d935-3000-2048.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;2个游戏可能值得单独说一下&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;《灵魂献祭 Soul Sacrifice》&lt;/span&gt;的魔腕，灵魂献祭的魔腕 提供可观的攻击属性加成，不单单是伤害，特别还有属性异常累积增幅。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;图自 ElderWraith&quot; width=&quot;1920&quot; height=&quot;1080&quot; src=&quot;https://image.gcores.com/0ab426566c909f816b5b5ac1d10b0a4c-1920-1080.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;然后这个游戏有个循环克制系统，如果魔物被冻结进入了[冰]属性异常状态，那么它的弱点属性也会就变成了克制[冰]的[电]属性，这个克制关系无视魔物的初始弱点属性，哪怕是抗[电]的怪物被冰冻后，被[电]属性攻击也会有高额伤害加成和属性异常累积加成。&lt;/p&gt;&lt;p&gt;这就让魔腕因为属性异常累积加成极高，可以在魔物没有脱离上一个异常状态的时候把魔物打入下一个属性异常状态，比如 &lt;br&gt;1.魔物先冻结变得弱电&lt;br&gt;2.冻结未结束魔物进入感电状态变得弱土&lt;br&gt;3.玩家继续灌土属性伤害石化魔物，魔物石化后弱毒&lt;br&gt;4.玩家灌毒属性伤害灌满后魔物变得弱火。。。如此循环往复&lt;br&gt;达成对魔物的高频控制 + 无视魔物初始抗性的高额伤害加成。&lt;/p&gt;&lt;p&gt;事后诸葛亮的来看，这套系统虽然很爽 但是会让Boss体验非常同质化，玩家只是在第一次让Boss进入属性异常之前需要针对一下，后续就是灌属性打桩了。可能引入类似《雨中冒险2》触发链/触发系数之类的设计，让这个循环克制只能持续2~3个异常状态会好一些。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;只狼&lt;/span&gt;的逻辑比较微妙 &lt;br&gt;1.一心 / 义父 这类会大量招架格挡 主要打架势的人形Boss 架势槽可以看作是 999盾 1血。招架熟练的话 有效血量就是1000左右，如果不能打出压制就是 有效血量2000~3000。&lt;br&gt;2.怨恨之鬼 这种不格挡 但是架势条基本打不满 只能打血击杀的Boss 和传统的黑魂/怪猎Boss没有什么差别。&lt;/p&gt;&lt;h1&gt;战斗系统相关&lt;/h1&gt;&lt;p&gt;叠甲：这个主题太大 太复杂了，只是提供一些基本的思路/经验。没有可落地的 量化的 系统化理论。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;下血速度/战斗节奏的本质&lt;/span&gt;&lt;/p&gt;&lt;p&gt;实际上是&lt;br&gt;战斗主动权的轮换 x 动作性能（打点/延迟/取消等） x 游戏数值 的综合结果。&lt;br&gt;这里动作性能  ≈  射击游戏中的 冲锋枪 vs 步枪 vs 狙击枪 的区别。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;比较直观的下血速度差别演示（理论Dps 一样&quot; width=&quot;1200&quot; height=&quot;400&quot; src=&quot;https://image.gcores.com/47f95d80434bcb5f1be8e41ff1fec28d-1200-400.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;    &lt;figure&gt;&lt;img alt=&quot;放慢50%&quot; width=&quot;1200&quot; height=&quot;400&quot; src=&quot;https://image.gcores.com/df1b108ede18bcf390d6c487d555e36b-1200-400.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;拿怪猎的 大剑 vs 太刀 vs 片手 vs 双刀 来说，打桩的理论Dps大差不差。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;大剑：&lt;/span&gt;蓄力斩 真蓄的打点很好控制 dph高 同时伤害集中在少数几次攻击上，更容易打出怪物倒地。攻击次数少 以前版本不太适合打属性。&lt;br&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;太刀：&lt;/span&gt;中规中矩 可以单人应付任何情况+帅，如果其他武器数值不压制的话，使用率理所当然会高一截。属性和物理都可，打爆发和蹭刀都可的万金油。&lt;br&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;片手：&lt;/span&gt;中规中矩 偏偏没有任何很有识别性的武器特点，哪怕是 XX世代 同时有圆月斩 + 混沌刃药 化身无敌数值怪的情况下，使用率也就8%略高于平均值，世界世代是3%左右。&lt;br&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;双刀：&lt;/span&gt;武器短 打点偏差 T0级别的属性输出。一个很有意思的现象，玩家个人统计数据结果中显示X/XX世代 HR150以上猎人中双刀使用率为第一 17%，HR100以下的猎人中 使用率为14% 低于大剑（22%）和太刀（15%）。&lt;/p&gt;&lt;p&gt;因为对打点的要求，某种意义上来说怪猎有点像一个披着近战皮的慢节奏射击游戏。&lt;/p&gt;&lt;p&gt;这里本质是个动作风险和收益的问题，像大剑原地蓄上2秒 是个风险很大的动作 那么有着类似武器长度的太刀同样是打桩，为了风险收益比例相似 dps 就需要比大剑略低一些。但是双刀 虽然后摇短 但是武器短 风险高 就需要仔细平衡动作模组的收益了。不过卡普空最近几作的数值平衡也不算做得特别好。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;重视技巧/机制 vs 重视数值 的问题 (除开战术 战略&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;重视技巧/机制&lt;br&gt;&lt;/span&gt;- 设计麻烦&lt;br&gt;- 开发素材要求高 多&lt;br&gt;- 数值上限高 留给了外挂很多发挥空间&lt;br&gt;- 需要投入额外技术反外挂&lt;br&gt;+爽&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;重视数值/随机性&lt;br&gt;&lt;/span&gt;+减小玩家之间技术差距&lt;br&gt;+长线运营潜力更大 填内容更简单&lt;br&gt;+长时间玩着不累&lt;br&gt;-需要维持刺激体验 难度很高&lt;/p&gt;&lt;p&gt;怪猎的武器设计的长期以来都满足了的几个限制条件&lt;/p&gt;&lt;ol&gt;&lt;li&gt;武器都得能用来通关&lt;/li&gt;&lt;li&gt;武器间伤害期望不能差太离谱&lt;/li&gt;&lt;li&gt;每把武器要有自己的独特的机制/战斗节奏&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;然后这些问题还要同时考虑单人solo和多人组队，还总共有14把武器。&lt;/p&gt;&lt;p&gt;为了运营数据上好看，还要在武器帅气度 上手难度 乐趣 等完全不一样的情况下，武器间使用率差距尽可能小点。 = =。。。要求是实在挺高的。。。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;射击游戏 vs 动作游戏&lt;/span&gt;&lt;/p&gt;&lt;p&gt;射击游戏战术 战略上选择多很多，更适合团队竞技。但是单论战斗体验上来说，实在缺乏玩家和玩家之间互相交互的战斗方法。这么多年了可能也就一个《泰坦陨落》的漩涡盾。&lt;/p&gt;&lt;p&gt;远程攻击无论是第一人称/第三人称还是固定视角 不过也更适合类MMO 或者 CS 那样的多人混战，规模效应好得多。&lt;br&gt;近战攻击放在固定视角 规模效应的问题部分解决了，但是打击感很差。近战攻击放在第三人称 打击感问题解决了，但是需要不好处理多人战斗的场景。第一人称还有容易3D眩晕的问题。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;漩涡盾 Vortex Shield&quot; width=&quot;450&quot; height=&quot;252&quot; src=&quot;https://image.gcores.com/610a5c4302b760451ef20a3a5bb77d99-450-252.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;然后 射击 + 近战 战斗系统做得好的几个案例&lt;/p&gt;&lt;p&gt;龙之信条1代的九头蛇 Boss战：远程拥有更好的输出环境 队友被吞了之后需要精准点杀特定蛇脑袋的时候更好，但是想速杀还是需要近战斩击属性去快速斩掉脑袋。&lt;/p&gt;&lt;p&gt;生化6 远程枪械 + 近战体术：体力槽快速恢复 手枪点头+体术 可以快速击杀小型僵尸同时节省子弹。弹一闪 和 大口径马格南用来处理Boss。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;一些乱七八糟的思考&lt;/span&gt;&lt;/p&gt;&lt;p&gt;多维复杂战斗系统还是不错的。感觉卡普空为了大众市场删了太多东西了。然后武器差异化和乐趣就很难同时保持。斩味和弹刀（最近几作斩味基本沦为纯粹增伤属性） 或者 部分古龙部位需要特殊属性破坏 这些东西都可以考虑加回来。&lt;/p&gt;&lt;p&gt;类似魂那样有极其复杂的伤害公式（类似穿甲系统）或独立的击倒值，击倒值会缓慢恢复。也都是可行的。 &lt;/p&gt;&lt;p&gt;MH荒野这作目前感觉就是卡表的策划要么是新人有点缺乏想象力太保守了，要么是在给DLC留平衡空间。这次红刃太刀的红刃槽只能续刀3次，然后总时长续满应该不到60秒。&lt;/p&gt;&lt;p&gt;一个比较符合直觉的改动应该是红刃无限续刀，但是红刃槽开刃后 30秒后消耗速度1.5x 50秒后2.0x 70秒后3.0x 。这样解放了高手的上限，但是平均收益不会那么高，而且更符合直觉。&lt;/p&gt;&lt;p&gt;要是让我来设计我估计会给炼气解放无双斩后让太刀直接开个RGB彩虹刃，然后刃槽高速衰减但是所有攻击增加刃槽，此状态登龙掉光所有气刃 但是根据气刃槽长度追加hit数 hit数无上限，同时登龙特效一定要一路火花带闪电 还要有专属音效 要比马里奥的无敌星星还要酷炫。名字就叫【彩虹新星气刃极意解放斩】。嗯！&lt;/p&gt;&lt;p&gt;*炼气解放无双斩的加入 导致红刃成了个很尴尬的东西 目前Beta版本资源管理自相矛盾 不符合直觉&lt;br&gt;**太刀冰原之后一直缺一个好的连招终结技 原来是登龙 或者 气刃3&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;截取自 An Incorrect Summary of Metal Gear Rising | Part 2 - By Max0r&quot; width=&quot;520&quot; height=&quot;256&quot; src=&quot;https://image.gcores.com/eabff319fc07df847f4a6e6e4a6a56cd-520-256.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;以及本来不想做卡普空fanboy的。。。但是一找案例纯近战动作游戏做得好的90%都是它家的，近战+远程战斗系统都有（且不是摆设的）100%都是它家的。&lt;/p&gt;&lt;h1&gt;血条UI&lt;/h1&gt;&lt;p&gt;这个系列文章一个最关键的问题。游戏到底应不应该 需不需要做血条UI？&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;鬼泣3/4都有的Boss血条会随着玩家造成伤害而震动，5代给我砍了。。。怨念&quot; width=&quot;358&quot; height=&quot;102&quot; src=&quot;https://image.gcores.com/46886a5a61252f59ac0123b2e1414df3-358-102.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;来看看 黑魂 vs 洛奇英雄传国服 国际服 vs 怪猎 vs 鬼泣&lt;/p&gt;&lt;ul&gt;&lt;li&gt;有血条 - 黑魂：大部分作品 虽然战斗有主动权切换 少数战斗有游戏自动的阶段切换 所有Boss有血条&lt;/li&gt;&lt;li&gt;有血条 - 洛奇英雄传国服：简化了所有动作的动作派生 砍了动作伤害系数 拉长了战斗总时长 战斗更加拼数值而不是注重玩家技术&lt;/li&gt;&lt;li&gt;无血条 - 洛奇英雄传国际服：硬核动作网游 难度和操作上限显著高于国服版本 高于同时期的剑灵/龙之谷，是黑魂1代 怪猎级别的打击感。&lt;br&gt;*严格来说是 简单本有血条 困难本 英雄本无血条&lt;br&gt;**国服和国际服版本 S1时期怪物血量很少时也都会出现使不出劲 倒地的动画（类似怪猎 怪物疲劳或者残血&lt;/li&gt;&lt;li&gt;无血条 - 怪猎：硬核动作游戏 怪物招式多变 变招繁多&lt;/li&gt;&lt;li&gt;有血条 - 鬼泣：硬核动作游戏 但是怪物变招 阶段转换等设计较少 游戏节奏偏向于均匀下血&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;结论：&lt;/span&gt;如果对战斗体验（节奏 / 多样性等要素）有充分自信，完全可以不做血条UI。如果战斗体验还不错 需要找补一些打击感和感官刺激，可以靠认真设计了的血条弥补一些。&lt;/p&gt;&lt;p&gt;但是就靠血条这一个UI组件，哪怕雕出花来也没有办法化平庸为传奇。（参考卡普空的生化指挥官 Bionic Commando  2009)&lt;/p&gt;&lt;p&gt;如果做到了像怪猎那样的怪物会 流口水+瘸腿+发怒招数全变+疲劳龙车跌倒+部位破坏，那么基本是没必要用血条UI来画蛇添足 破坏沉浸感了。&lt;/p&gt;&lt;h1&gt;结语&lt;/h1&gt;&lt;p&gt;应该是我很长时间内最后一篇长文了（滚去荒野准备开荒了)。&lt;/p&gt;&lt;p&gt;20世纪后半叶真是群星璀璨人才辈出啊。。已经25年了。。希望人类不要把整个21世纪前半叶浪费在窝里斗和重新建立信任上。 - By 终极无敌 傲慢酸腐 中二无双 EdgeLord Plus Max Extra Omega 下头太刀 太刀下头 估计虫棍开荒 的 MeowMeowRanger&lt;/p&gt;&lt;h1&gt;参考文档 / 引申阅读：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.gcores.com/articles/136874&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;链接：战斗主动权相关 - 攻防流转的艺术：《荣耀战魂》战斗系统设计分析（1/3）&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http:// https://www.gcores.com/articles/138087&quot; target=&quot;_blank&quot;&gt;链接：情报博弈相关 - 激斗之下的暗流：梳理对战类游戏中的“情报博弈”&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.gcores.com/articles/164614&quot; target=&quot;_blank&quot;&gt;链接 - 血条进化史 游戏性概述 - 血条进化史：游戏设计层面血条设计和分析&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.gcores.com/articles/182078&quot; target=&quot;_blank&quot;&gt;链接 - 血条进化史 2.0 攻防数值 -  血条进化史v2.0.0：数字与公式&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.gcores.com/articles/192998&quot; target=&quot;_blank&quot;&gt;链接 - 随机性相关 - 游戏数值：概率/随机性 概述&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.gcores.com/articles/194380&quot; target=&quot;_blank&quot;&gt;链接 - 数值边界确立相关 - 游戏数值：《雨中冒险2》的上限/体验边界的确立&lt;/a&gt;&lt;/p&gt; </description><link>https://www.gcores.com/articles/194557</link><guid isPermaLink="false">gcores-194557</guid><pubDate>Fri, 21 Feb 2025 08:15:00 GMT</pubDate><author>MeowMeowRanger</author><enclosure url="https://image.gcores.com/e50ed90da099d86d6d0cf0a441bf10ed-480-192.gif" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/e50ed90da099d86d6d0cf0a441bf10ed-480-192.gif"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/404661a5-33f1-4c16-9544-6f7f535b1b5d.mp3" length="1067" type="audio/mp3"></enclosure><itunes:duration>0:17:47</itunes:duration><category>知识挖掘机</category></item><item><title>图形AI粗读丨三维重建——立体视觉篇（下）</title><description>&lt;figure&gt;&lt;img alt=&quot;图形AI粗读丨三维重建——立体视觉篇（下）&quot; src=&quot;https://image.gcores.com/65fe6487736a10aec2acf039c397b5a1-1518-1041.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/2c7ab07f-2ccd-4b08-b9e0-99a8b152d07b.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/2c7ab07f-2ccd-4b08-b9e0-99a8b152d07b.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/2c7ab07f-2ccd-4b08-b9e0-99a8b152d07b.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;从零开始读：AI生成3D的脉络及现状&lt;/blockquote&gt;   &lt;h1&gt;前言&lt;/h1&gt;&lt;p&gt;在&lt;a href=&quot;https://www.gcores.com/articles/194564&quot; target=&quot;_blank&quot;&gt;上一篇&lt;/a&gt;中我们进行了三维重构方面的简单介绍，并很快引入了第一步的主题——立体视觉。这次继续读斯坦福大学的这篇课件。  &lt;/p&gt;&lt;p&gt;PPT部分以翻译为主，打星号的部分是我的个人理解或补充，主要是对课件中没解说的部分补充外部信息。&lt;/p&gt;&lt;h1&gt;一、解决对应点问题——Solving the correspondence problem&lt;/h1&gt;&lt;p&gt;*这部分课件中举例用的一些图都不算直观，有点难以看出左右两图的区别。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;立体匹配：解决对应点问题&quot; width=&quot;1080&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/509f6201504e3f6b8984aa79634e6a63-1080-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;目标：找到两张图片中的对应点。(*Hypothesis，假设）&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;基础的立体匹配算法&quot; width=&quot;1080&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/f1710dd676f6655d59eb26588f91ab7c-1080-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;对于第一张图中的每个像素：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;找到右侧图中的对应极线&lt;/li&gt;&lt;li&gt;检测极线上的每个像素并选择最匹配的&lt;/li&gt;&lt;li&gt;三角测量匹配点以得到深度信息&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;最简单的情况——极线都是扫描线（与画面平行）。何时会发生这种情况？&lt;/p&gt;&lt;p&gt;*选择匹配点规则后面页会介绍到。另外，三角测量的方式在上一篇中介绍过了。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/e42fd6bfd6c0e4db14707be08b0c5152-1080-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;如果需要，可以将两张立体图片校正以变换极线为扫描线。（变成平行平面）&lt;/p&gt;&lt;p&gt;对于第一张图中的每个像素x：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;找到右图中&lt;span style=&quot;font-weight: bold&quot;&gt;相对应的&lt;/span&gt;极线扫描线&lt;/li&gt;&lt;li&gt;检测极线上的每个像素并选择最匹配的x&#39;&lt;/li&gt;&lt;li&gt;计算差异度x-x&#39;，&lt;span style=&quot;font-weight: bold&quot;&gt;将深度设为它的反比&lt;/span&gt;（如图）&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img alt=&quot;对应点问题&quot; width=&quot;1080&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/68241888165ab6394b3935a43391c37a-1080-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;让我们做一些假设来简化匹配问题：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;基线相对很小（和场景中点的深度对比而言）&lt;/li&gt;&lt;li&gt;这样大部分场景中的点都能在两个视图中可见&lt;/li&gt;&lt;li&gt;并且，匹配的区域在外观上是相似的&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img alt=&quot;通过相似性约束来查询对应点&quot; width=&quot;1080&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/57364d5f2255c478cecad6488855b506-1080-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;沿着右侧的扫描线滑动一个（检测）窗口，并比较左侧中相关联窗口的结果。&lt;/p&gt;&lt;p&gt;匹配开销：&lt;span style=&quot;font-weight: bold&quot;&gt;SSD&lt;/span&gt;（后一页提到了，差方和）或&lt;span style=&quot;font-weight: bold&quot;&gt;归一化相关系数&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;*两者都是统计学上量化数据的方式。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/35ceceedeed4d112688002d324f53c0c-1080-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*这里横轴是差异度（disparity），纵轴是&lt;span style=&quot;font-weight: bold&quot;&gt;差方和&lt;/span&gt;（Sum of Squared Differences）。这里对比的是左侧的一个位置和右侧一条线上的窗口——可以看到图中的例子中最匹配的点肯定不是差异度为0的，而是接近0。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;这里是一段伪代码示例，长宽对应一个检测窗口的尺寸&quot; width=&quot;453&quot; height=&quot;132&quot; src=&quot;https://image.gcores.com/e9c78e335107a96aeff09fd7eb0699a8-453-132.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/33aabf6fccfa97cd2b9dde6c4c8b3840-1080-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*这里纵轴换成了&lt;span style=&quot;font-weight: bold&quot;&gt;归一化相关系数&lt;/span&gt;。不管哪种计算方式，都是对比的窗口像素差异。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;归一化相关系数的定义。可以看出相似度越高越接近1。&quot; width=&quot;313&quot; height=&quot;80&quot; src=&quot;https://image.gcores.com/61fe8bd174dace25e97c02051ac3f8c9-313-80.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;（不同）窗口尺寸的效果&quot; width=&quot;1080&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/cef6413a8a5c6d5bb7c6496570c15446-1080-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;小窗口：更多细节，更多噪声。&lt;/li&gt;&lt;li&gt;大窗口：更平滑的差异图，更少噪声。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;*这里是差异图可视化之后的结果，而能表现为灰度图应该是使用的归一化相关系数作为颜色显示，并且处理完整张图像的结果。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;相似性约束&quot; width=&quot;1080&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/73994a81d232e816a745e2416501318d-1080-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;两张图中对应的区域应该在外观上类似&lt;/li&gt;&lt;li&gt;而不对应的区域应该在外观上不同&lt;/li&gt;&lt;li&gt;那么何时这一相似性约束会失效？&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img alt=&quot;相似性约束的局限&quot; width=&quot;1080&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/511d2c91c053e27ca7944cdc7e62dc68-1080-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;（图中顺序依次是）：无纹理的表面、剔除或重复、高光表面。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;窗口查找的结果&quot; width=&quot;1080&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/6f39409b54eba1e23c2597f0b2cc74ab-1080-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*图中左侧是基于窗口的匹配结果，右侧是事实结果（很多算法实验都会配Ground truth结果作比较）。颜色图展示的是&lt;span style=&quot;font-weight: bold&quot;&gt;基于还原深度信息&lt;/span&gt;的物体轮廓。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/4e857253e92d1c1920472992d400b7ea-1080-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*这里指出了基于图切割算法能有更好的结果。其中涉及了用图论思想优化图像划分，后续这个脉络的算法都被称为min-cut/max-flow算法。&lt;/p&gt;&lt;p&gt;*之前基于窗口的算法是一种&lt;span style=&quot;font-weight: bold&quot;&gt;局部算法&lt;/span&gt;，而图切割算法是一种&lt;span style=&quot;font-weight: bold&quot;&gt;全局算法&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;*图论的部分超出我个人能解释的能力范围了，文末会给出2001年这篇论文的链接。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;基线的作用&quot; width=&quot;1080&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/69538c48021d3e55d8293247729559f6-1080-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;小的基线：较大深度误差。&lt;/li&gt;&lt;li&gt;大的基线：产生难以查询的问题。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;*图中反映了两种情况，通过蓝色和红色包围的区域表示。不过左侧的示意图并没有表现出小的基线相对大的基线能更确定点的位置，实际上两者的观察点距离应该是差距很大的。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;宽基线的问题（的解决）：透视法缩绘&quot; width=&quot;1080&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/29a480b814d352f7f84863918fa9af7b-1080-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;（宽基线的情况）按固定尺寸的窗口匹配将失败。&lt;/li&gt;&lt;li&gt;可行的解决方案：自适应的窗口尺寸。&lt;/li&gt;&lt;li&gt;另一个解法：基于模型的立体查询。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;*这里的model-based指先生成近似模型，再辅助计算点的相关性，这里摘录了1996年的一篇论文中提出的概念：&lt;/p&gt;&lt;blockquote&gt;Model-based stereo differs from traditional stereo in that it measures how the actual scene deviates from the approximate model, rather than trying to measure the structure of the scene without any prior information.   The model serves to place the images into a common frame of reference that makes the stereo correspondence possible even for images taken from relatively far apart.  &lt;/blockquote&gt;&lt;p&gt;译：Model-based的立体查询与传统立体查询的不同是，它通过与近似模型的偏差来度量（估算）实际场景，而不是尝试在没有任何前置信息的前提下来度量场景的结构。这一模型能提供特定帧（观察位置）的参照，使立体相关匹配变得可行——即使是从相当远的观察距离。&lt;/p&gt;&lt;p&gt;*这里的近似模型生成是从其它的一些参照方式（例如平面识别等）来构建，并辅助提高相关点匹配的准确性。虽然这篇课件主要介绍的是点与点之间的对应算法，但上一篇中介绍的各种方式（纹理、明暗等）都能辅助立体视觉的匹配过程。&lt;/p&gt;&lt;h1&gt;二、单应变换——Homographic transformation&lt;/h1&gt;   &lt;figure&gt;&lt;img alt=&quot;回顾：2D中的变换&quot; width=&quot;1687&quot; height=&quot;1260&quot; src=&quot;https://image.gcores.com/d94711a214e0caaa9aa555f0909ed9f9-1687-1260.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*（只在平面上的）特定情况中，二维变换矩阵是2X2的，其中R代表旋转，t代表平移。&lt;/p&gt;&lt;p&gt;*它有着3的自由度（DOF，上篇中介绍过这个概念）；能保持距离（区域）；刚性物体间符合动量约束。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1686&quot; height=&quot;1261&quot; src=&quot;https://image.gcores.com/f6753e7b88fc9287d2cd86e0d70bbcd5-1686-1261.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*普适的情况中，变换矩阵如图所示（a1-a9）。&lt;/p&gt;&lt;p&gt;*它有着8的自由度，保持&lt;span style=&quot;font-weight: bold&quot;&gt;共线性&lt;/span&gt;的特征。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;目标：估算两张图像之间的单应变换&quot; width=&quot;1683&quot; height=&quot;1261&quot; src=&quot;https://image.gcores.com/56bb5fa48fbb32acff46ed6af3acf115-1683-1261.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;假设：给定一组对应点。&lt;/li&gt;&lt;li&gt;问题：需要多少点？——至少需要4个点（8个方程）。&lt;/li&gt;&lt;li&gt;提示：变换矩阵H的自由度是8。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img alt=&quot;DLT算法（直接线性变换）&quot; width=&quot;1686&quot; height=&quot;1261&quot; src=&quot;https://image.gcores.com/e06c9ff24ba54d7119906c30cc67d3e2-1686-1261.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1681&quot; height=&quot;1257&quot; src=&quot;https://image.gcores.com/17e3cc8ba3b999007c2e93657140bda3-1681-1257.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*DLT算法的目的是在已知对应点的情况下，通过建立线性方程组来求解摄像机的投影矩阵。&lt;/p&gt;&lt;p&gt;*这个课件的推导过程缺一点关键过程，下面通过资料介绍另一种推导方式：&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1710&quot; height=&quot;1278&quot; src=&quot;https://image.gcores.com/d68bc217ad88c7ab43f416065650eee0-1710-1278.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*最上方的公式相当于pi&#39;=H pi，展成三维坐标（向量）的形式。&lt;/p&gt;&lt;p&gt;*中间英文部分就不逐句翻译了，大致是在讲将矩阵乘开成方程组的形式，之后通过相除消去系数a的影响。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1600&quot; height=&quot;837&quot; src=&quot;https://image.gcores.com/52e34239694bb2435d9efa4461555c77-1600-837.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1845&quot; height=&quot;1150&quot; src=&quot;https://image.gcores.com/7d34920efcbe4363d92d5b9234451331-1845-1150.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*将项重新排列并写成矩阵的形式，就和课件中一致了。这样能更容易理解Ai的意义。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1687&quot; height=&quot;1264&quot; src=&quot;https://image.gcores.com/113988041563adbda579ba9eccda7bea-1687-1264.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*如何解这个矩阵方程？这里引入了矩阵&lt;span style=&quot;font-weight: bold&quot;&gt;奇异值分解&lt;/span&gt;（SVD）这一方法，能将目标矩阵以一定规则分解为三个矩阵连乘。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;SVD图示&quot; width=&quot;1920&quot; height=&quot;1738&quot; src=&quot;https://image.gcores.com/6b1f040f60a8afa05bcfbec7ddec9077-1920-1738.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1683&quot; height=&quot;1261&quot; src=&quot;https://image.gcores.com/c59087cfd756a9c6fa9c7d48ed1f919f-1683-1261.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*对于图中公式的情况，SVD分解后的V的最后一列（V&lt;span style=&quot;font-weight: bold&quot;&gt;^&lt;/span&gt;T的最后一行）9个值就对应列向量h——并能直接得到矩阵H。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/dc630c1d1cf75987b1521281d77874c9-1080-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*图中展示了SVD的两种情况。对于原始矩阵的秩大于1的情况来说SVD的结果一定存在，且可能不唯一。&lt;/p&gt;&lt;p&gt;*其中U和V有着各自与转置矩阵相乘都等于对应阶的单位矩阵的特性。对于U是正交矩阵的情况可由如下计算步骤来推出一个解。&lt;/p&gt;&lt;h3&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;奇异值分解的计算步骤&lt;/span&gt;&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;计算矩阵A的转置&lt;/span&gt;：首先，计算矩阵A的转置矩阵A^T。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;计算AA^T的特征值和特征向量&lt;/span&gt;：接着，计算矩阵A与其转置矩阵A^T的乘积AA^T，然后求出其特征值和特征向量。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;计算A^TA的特征值和特征向量&lt;/span&gt;：然后，计算A^TA的特征值和特征向量。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;构造U和V矩阵&lt;/span&gt;：将AA^T的特征向量归一化后构成矩阵U，将A^TA的特征向量归一化后构成矩阵V。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;构造Σ矩阵&lt;/span&gt;：将AA^T的特征值的平方根按降序排列，构成对角矩阵Σ。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;*介绍到特征值和特征向量这一步就不继续展开了，可以自行搜索网上的资料。而关于DLT和SVD文末会给出多条参考资料。&lt;/p&gt;&lt;p&gt;*SVD本身也是一种降维压缩方式，在图像分析领域被广泛使用。&lt;/p&gt;&lt;h1&gt;三、主动式立体视觉系统——Active stereo vision system&lt;/h1&gt;   &lt;figure&gt;&lt;img alt=&quot;主动式立体视觉（点）&quot; width=&quot;1683&quot; height=&quot;1261&quot; src=&quot;https://image.gcores.com/37caed42bdade835d7b2f35e16cd8cda-1683-1261.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;通过一个投影器（变换）来替换两个摄像机中的一个：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;单摄像机。&lt;/li&gt;&lt;li&gt;投影几何已校准。&lt;/li&gt;&lt;li&gt;投影器的优势是？解决了对应点问题。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img alt=&quot;主动式立体视觉（条纹）&quot; width=&quot;1683&quot; height=&quot;1258&quot; src=&quot;https://image.gcores.com/8dd6f169fae13661ef4cc677d4809d0e-1683-1258.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;投影器和摄像机是平行的。&lt;/li&gt;&lt;li&gt;也解决了对应点问题。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img alt=&quot;主动式立体视觉（阴影）&quot; width=&quot;1683&quot; height=&quot;1264&quot; src=&quot;https://image.gcores.com/3365cc2565231e369aabff9409ae8ff1-1683-1264.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;一个摄像机，一个光源。&lt;/li&gt;&lt;li&gt;非常易于设置。&lt;/li&gt;&lt;li&gt;已校准的光源。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1684&quot; height=&quot;1264&quot; src=&quot;https://image.gcores.com/fb598c1c90213f7a025c5ef8dce9e24e-1684-1264.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*主动立体视觉——阴影的例子。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;主动式立体视觉（颜色编码的条纹）&quot; width=&quot;1686&quot; height=&quot;1264&quot; src=&quot;https://image.gcores.com/b23a16913939952afec97e002bbfe7b5-1686-1264.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;密度重构&lt;/li&gt;&lt;li&gt;再次遇到对应点问题&lt;/li&gt;&lt;li&gt;通过颜色编码来判明&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1684&quot; height=&quot;1263&quot; src=&quot;https://image.gcores.com/a25fdb09d63201e2b442eff52d3366e0-1684-1263.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;快速形体获取：投影器+立体摄像机。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;主动式立体视觉（条纹）&quot; width=&quot;1681&quot; height=&quot;1260&quot; src=&quot;https://image.gcores.com/9d75679ffd7ead489bb8bd8c27727d38-1681-1260.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*图中展示的是斯坦福的“数字米开朗基罗”工程&lt;/p&gt;&lt;p&gt;光学三角测量：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;每一道激光投影一根条纹&lt;/li&gt;&lt;li&gt;扫描整个物体的表面&lt;/li&gt;&lt;li&gt;这是结构光扫描的一个非常精确的版本&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;*这里的激光是用来投影条纹并拍照的，核心方法还是基于图像的立体视觉。后面略去了几页只有图片的案例展示。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/7e77612ec9418c144f67b7ac92aba9ec-1080-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*图中展示了眼部细节的一些情况。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1684&quot; height=&quot;1266&quot; src=&quot;https://image.gcores.com/b097e1d4665e98337f0858cdad47fc10-1684-1266.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*图中展示了1毫米精度下的三角面数。&lt;/p&gt;&lt;h1&gt;结语&lt;/h1&gt;&lt;p&gt;啃完立体视觉的这篇课件后，在头昏脑胀之余也能深切的感受到这就是科技的发展——放在10多年前可能还是博士生以上才需要研究的领域，现在已经逐步成为了后来技术的基石。就好比图形AI也不是凭空产生的，这篇课件里介绍到的很多内容都构成了后来神经网络中的基础算法、输入端或是数据处理层。&lt;/p&gt;&lt;p&gt;在B站Games系列课之下也有三维重建的专题，在一年时间内我肯定是会伴随着把那个也看完。最终能达成“看懂图形AI每一步在做什么”是我的目标——对于超出能力看不懂的部分则保持敬畏之心。&lt;/p&gt;&lt;p&gt;虽然在上周的文章中夸了DeepSeek R1，但它的“幻觉程度很高”、“没答案的时候乱编”的问题随着大量的使用也比较明显了。当然，让一个AI不乱编的方法肯定有，关键是用AI的人不能迷信它的输出。内容创作方面如果尝试用它生成最终的文稿，很可能发生“生成5秒，查错1小时”的情况——因为和事实交叉比对的还得是创作者自己。&lt;/p&gt;&lt;p&gt;在技术向的问题上，我个人的体验是它帮助不大，因为本身网上技术交流的语料就少，正确的更少（很多实用向的引擎技术也没有论文）；而很多热门话题的总结概括，则又容易被网上各种阴阳怪气的语料污染，生成让人啼笑皆非的内容；比较好用的主要还是在“事实”、“常识”、“数据分析”等方面。&lt;/p&gt;&lt;p&gt;虽然现在的很多高科技已经足够“魔法”了，提供给普通人的基本就是一个交互界面，但另一方面网上资料也很多——我还是想尽量打开黑盒看看。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;下面是一些资料链接：&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.gcores.com/link?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FComputer_stereo_vision&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-weight: bold; text-decoration: underline&quot;&gt;立体视觉的WIKI&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.cs.cmu.edu/~ph/869/papers/kanade-okutomi.pdf&quot; target=&quot;_blank&quot;&gt;上世纪关于自适应窗口尺寸立体匹配的论文（纸质扫描）&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.cs.cornell.edu/rdz/Papers/BVZ-iccv99.pdf&quot; target=&quot;_blank&quot;&gt;Fast Approximate Energy Minimization via Graph Cuts&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/davechristian/Simple-SSD-Stereo&quot; target=&quot;_blank&quot;&gt;一个基于SSD做图像分析的Git案例&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.pauldebevec.com/Thesis/debevec-phdthesis-1996_ch7_stereo.pdf&quot; target=&quot;_blank&quot;&gt;一篇Model-Based Stereo的介绍&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.cs.cmu.edu/~16385/s17/Slides/10.2_2D_Alignment__DLT.pdf&quot; target=&quot;_blank&quot;&gt;一篇介绍DLT的Carnegie Mellon University的课件&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=vSczTbgc8Rc&quot; target=&quot;_blank&quot;&gt;介绍SVD的一篇很好的youtube讲解&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/10401154795&quot; target=&quot;_blank&quot;&gt;一篇SVD的比较详细的知乎介绍&lt;/a&gt;&lt;/p&gt; </description><link>https://www.gcores.com/articles/194874</link><guid isPermaLink="false">gcores-194874</guid><pubDate>Fri, 21 Feb 2025 08:00:00 GMT</pubDate><author>Hakumen</author><enclosure url="https://image.gcores.com/65fe6487736a10aec2acf039c397b5a1-1518-1041.png" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/65fe6487736a10aec2acf039c397b5a1-1518-1041.png"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/2c7ab07f-2ccd-4b08-b9e0-99a8b152d07b.mp3" length="793" type="audio/mp3"></enclosure><itunes:duration>0:13:13</itunes:duration><category>知识挖掘机</category></item><item><title>暴论游戏设计中的迷宫</title><description>&lt;figure&gt;&lt;img alt=&quot;暴论游戏设计中的迷宫&quot; src=&quot;https://image.gcores.com/4874b06e08155b46f2c714d8a9d5694c-1080-506.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/81d0b251-f1b2-4d1c-baed-7d86fa1d5223.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/81d0b251-f1b2-4d1c-baed-7d86fa1d5223.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/81d0b251-f1b2-4d1c-baed-7d86fa1d5223.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;解构游戏体验与迷宫的关系；天国拯救2治好了我的赛博精神病的治疗方法：游戏行业需要自我救赎，与玩家重新建立信任。&lt;/blockquote&gt;   &lt;ul&gt;&lt;li&gt;无剧透内容。&lt;/li&gt;&lt;li&gt;阅读时间15分钟。&lt;/li&gt;&lt;li&gt;吹哥式暴论，欢迎指证。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;相比于沸沸扬扬的箱庭设计和开放世界，**迷宫**似乎是进入了落伍的行列，游戏中越来越少见，开发者也没有什么讨论。作为一个玩家的我一直知道什么样的迷宫是错的，但是一直没想明白什么样的迷宫才是对的。直到《天国·拯救2》，我在地下矿井中深陷人物其中的时候，领悟了迷宫原本的样子，什么是好的迷宫设计；以及糟糕的迷宫设计是如何摧毁掉整个行业的。&lt;/p&gt;&lt;h1&gt;1. 我们还需要迷宫吗？&lt;/h1&gt;&lt;p&gt;设计玩家从&lt;span style=&quot;font-weight: bold&quot;&gt;A点&lt;/span&gt;&lt;span style=&quot;font-style: italic&quot;&gt;（路线起点、获得任务…）&lt;/span&gt; 抵达&lt;span style=&quot;font-weight: bold&quot;&gt;B点&lt;/span&gt;&lt;span style=&quot;font-style: italic&quot;&gt;（路线终点、交付任务…）&lt;/span&gt;的方法有两种：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;非线性体验&lt;/span&gt;：&lt;span style=&quot;font-weight: bold&quot;&gt;开放世界、箱庭关卡，&lt;/span&gt;玩家可以通过自己意志做出选择，选择不同的道路、用不同的游戏方式从&lt;span style=&quot;font-weight: bold&quot;&gt;A点&lt;/span&gt;抵达&lt;span style=&quot;font-weight: bold&quot;&gt;B点&lt;/span&gt;。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;线性体验&lt;/span&gt;：玩家无法通过自己意志选择，只能沿着唯一的道路从&lt;span style=&quot;font-weight: bold&quot;&gt;A点&lt;/span&gt;抵达&lt;span style=&quot;font-weight: bold&quot;&gt;B点&lt;/span&gt;。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;非线性体验是个大的框架，是给了玩家自由的权利&lt;/span&gt;：选择不同的道路、不同的游戏方式。（&lt;span style=&quot;font-style: italic&quot;&gt;比如《艾尔登法环》中可以通过不同的方式从A点（宁姆格福）抵达B点（史东薇尔城）。抵达史东薇尔城后，也有不同的选择从A点（史东薇尔城正门）抵达B点（“接肢”葛瑞克）。）&lt;/span&gt;；&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;而选择的结果作为最小游戏单位，则是回到了线性体验，最终玩家有游玩的是一个个或长或短的线性体验&lt;/span&gt;，线性体验的A点是上一个选择的结果，线性体验的B点是抵达下一个选择点。[^从正门闯入or从悬崖绕上，然后上屋顶or进走廊。正门、悬崖、屋顶、走廊分别是四个不同的线性体验。]&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;让我们来解构线性关卡，回归本质，线性关卡的体验是一条像是《超级马里奥》的直线&lt;/span&gt;：起点&lt;span style=&quot;font-weight: bold&quot;&gt;A点&lt;/span&gt;&lt;span style=&quot;font-style: italic&quot;&gt;（线路起点、获得任务）&lt;/span&gt;走到线的终点&lt;span style=&quot;font-weight: bold&quot;&gt;B点&lt;/span&gt;&lt;span style=&quot;font-style: italic&quot;&gt;（线路终点、交付任务）&lt;/span&gt;：每5步一个怪，每5个怪一个小boss，每2个小boss玩个复古解谜小游戏（puzzle），然后打个大boss，然后选择新任务。&lt;span style=&quot;font-weight: bold&quot;&gt;将多个线性关卡连续起来就是，走路、打怪、打BOSS、解谜的循环&lt;/span&gt;，在循环中人物得到升级，获得更好的木棍、打更厉害的小龙虾，直到你可以获得终极五色宝石狼牙棒，打永恒紫色巨锷小龙虾。现在怎么样？是不是有些枯燥乏味，玩家在踏上起点就知道了一切的过程和结果，就像你的人生。&lt;/p&gt;&lt;p&gt;那怎么做才好呢？有人在讨论游戏到底是叙事学还是游戏学，而我认为都是，在对目标（读者、玩家）的体验设计上，做出了相同的努力。 &lt;/p&gt;&lt;ul&gt;&lt;li&gt;在叙事学中就是&lt;span style=&quot;font-weight: bold&quot;&gt;任何一个故事都要有曲折；&lt;/span&gt;没有曲折就是：唐僧想要取经，顺利的取到了真经；曹操想要一统江山，顺利的一统江山了。&lt;/li&gt;&lt;li&gt;在文学里&lt;span style=&quot;font-weight: bold&quot;&gt;陌生化语言可以增强读者的感受力&lt;/span&gt;：你肯定还记得&lt;span style=&quot;font-style: italic&quot;&gt;“我家门前有两棵树，一颗是枣树，另一颗也是枣树”&lt;/span&gt;；如果写&lt;span style=&quot;font-style: italic&quot;&gt;“我家门口有两颗枣树”&lt;/span&gt;，这就是一个日常的自动化语言，读者一眼就能扫过而不会去感受他。&lt;/li&gt;&lt;li&gt;同样，在游戏过程中&lt;span style=&quot;font-weight: bold&quot;&gt;陌生化可以模糊过程、放大体验&lt;/span&gt;，让玩家的经历越曲折越复杂越离奇，就能更好的调动玩家心智，增加玩家的感受力。为了让这个单一的线性在体验上有一些不可预知的陌生化变化&lt;span style=&quot;font-style: italic&quot;&gt;（说到不可预知，我想起来老贼埋伏在各个角落背刺我敌人...）&lt;/span&gt;。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这时候，迷宫&lt;span style=&quot;font-style: italic&quot;&gt;（当然也可以是洞穴、城堡，拥有许多看似可选，但是并不能抵达重点死胡同构成。）&lt;/span&gt;是一个最高效的选择：&lt;span style=&quot;font-weight: bold&quot;&gt;为了某个不可避免的目的而深入黑暗的危险之中，在其中迷失方向，遭遇挑战和挫折挫折。最终击败巨龙，得到宝藏；或是看到洞口的光亮，逃出生天。&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;2. 定义迷宫&lt;/h1&gt;&lt;p&gt;现在到了迷宫的环节了，本质上还是&lt;span style=&quot;font-weight: bold&quot;&gt;线性体验&lt;/span&gt;，但是我们可以&lt;span style=&quot;font-weight: bold&quot;&gt;通过迷宫设计来陌生化玩家的体验&lt;/span&gt;，通过弯弯绕绕的地图和令人紧张的情绪（陷入恐怖、黑暗）&lt;span style=&quot;font-weight: bold&quot;&gt;让玩家模糊了单一的线性体验&lt;/span&gt;。并且在过程中看似玩家获得了选择的权利：&lt;span style=&quot;font-weight: bold&quot;&gt;分岔路&lt;/span&gt;，虽说殊途同归怎么样走都是抵达&lt;span style=&quot;font-weight: bold&quot;&gt;B点&lt;/span&gt;&lt;span style=&quot;font-style: italic&quot;&gt;（路径终点、交付任务）&lt;/span&gt;，但是玩家误以为自己是在一个真实又庞大的世界里，可以通过自己的意识有了选择道路。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;分岔路口&lt;/span&gt;：如论是怎么分叉，只有一条道路可以&lt;span style=&quot;font-weight: bold&quot;&gt;B点&lt;/span&gt;，那么路的类型只有两种。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;「错误道路」&lt;/span&gt;：只能回头的&lt;span style=&quot;font-weight: bold&quot;&gt;「死胡同」&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;「正确道路」&lt;/span&gt;：通往B点。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;多岔路口：&lt;/span&gt;买彩票的结果只有中与不中，所以中奖的概率是50%&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;多个死胡同&lt;/span&gt;：让玩家找到唯一「正确的路」，&lt;span style=&quot;font-weight: bold&quot;&gt;做好标记物、引导&lt;/span&gt;一面玩家分不清方向。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;通往B点的路&lt;/span&gt;：又回到了&lt;span style=&quot;font-weight: bold&quot;&gt;非线性体验&lt;/span&gt;上，其实只是只是一个选择，选择完了某一条路以后还是会变成最小体验单位的&lt;span style=&quot;font-weight: bold&quot;&gt;线性游戏&lt;/span&gt;。&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;3. 叙事 &amp;amp; 玩家体验&lt;/h1&gt;&lt;p&gt;我们现在知道了&lt;span style=&quot;font-weight: bold&quot;&gt;非线性体验&lt;/span&gt;和&lt;span style=&quot;font-weight: bold&quot;&gt;线性体验&lt;/span&gt;，知道了为什么需要迷宫，这些都是有关于玩家的、关于游戏学的。在说下面的问题，让我们聊一些体验的&lt;span style=&quot;font-weight: bold&quot;&gt;前理解&lt;/span&gt;：&lt;/p&gt;&lt;p&gt;游戏人物从出生有自己的父母；自己的朋友；有自己的生活、工作；有自己的孩子，他们一直生活到玩家接手前都活生生的人物。比如：&lt;span style=&quot;font-style: italic&quot;&gt;“和父亲外出打猎的小男孩落入迷宫，周围传来野兽的低吼，小男孩非常害怕想要快点离开迷宫找到父亲；或是孩子走丢在了恐怖的怪物巢穴中，想尽快找到孩子的父亲，既担心又着急。”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;玩家接手了人物，也接手了人物的情绪，在故事中作为孩子、作为父亲。玩家和游戏人物应该是一体的，游戏人物负责对他的生活负责，来驱动玩家；玩家负责角色的具体行动，沉浸于人物的故事当中。当然这是理论上的方法，也不是有&lt;span style=&quot;font-weight: bold&quot;&gt;叙事失调&lt;/span&gt;^1的情况，强行把游戏从故事和体验中拽出来。&lt;/p&gt;&lt;p&gt;^1: 故事人物与游戏玩家之间的割裂。&lt;/p&gt;&lt;h1&gt;4. 赛博精神病的诞生&lt;/h1&gt;&lt;p&gt;古早游戏在迷宫的「&lt;span style=&quot;font-weight: bold&quot;&gt;死胡同」&lt;/span&gt;放置了或多或少奖励，我倒推是想让玩家在走入「&lt;span style=&quot;font-weight: bold&quot;&gt;死胡同」&lt;/span&gt;的&lt;span style=&quot;font-weight: bold&quot;&gt;负反馈&lt;/span&gt;中获得一点找补，或者是粗鄙的对洞穴探险类游戏中奖励的模仿。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;而这正是对迷宫的体验造成毁灭性破坏，并导致玩家集体出现迷宫搜索症候群！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;设想我们正在这样的迷宫中，来到了一条&lt;span style=&quot;font-weight: bold&quot;&gt;岔路口&lt;/span&gt;，即使游戏引导明确标注了「正确的路」和「错误的路」，你该如何选择？如果是我，我知道在「错误的路」：&lt;span style=&quot;font-weight: bold&quot;&gt;死胡同&lt;/span&gt;可以获得一些奖励，且我不可得知奖励的大小，我肯定会选择走那条错的路。&lt;/p&gt;&lt;p&gt;我们来分析一下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;遵循引导：&lt;/span&gt;选择「正确道路」的奖励是100分，但这是&lt;span style=&quot;font-weight: bold&quot;&gt;线性体验&lt;/span&gt;中必然可以获得，不会损失的。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;避开引导：&lt;/span&gt;而选择「错误道路」的奖励即是只有1分，加上不会失去的100分，玩家选择一次&lt;span style=&quot;font-weight: bold&quot;&gt;错误道路&lt;/span&gt;的奖励也是101分，多过「正确道路」的100分。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;得出：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;「错误道路」锁产生的负反馈被彻底消解，玩家像一个按按钮的小白鼠一样，钻到每一个可以去的死胡同，寻找那一点正反馈。&lt;/li&gt;&lt;li&gt;人总是厌恶损失的，如果某个死路存放了稀有的道具，错过了怎么办。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;结论：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;用游戏体验上「错误道路」才是「正确道路」，而「正确道路」是「错误道路」。&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;我来举个例子&lt;/h1&gt;&lt;p&gt;先不谈论探索时代的机能所限、前辈还在奠基的那些游戏：从一维游戏变成二维游戏的时代，比如一维的横版卷轴如（《超级马里奥》）变成平面的2D游戏（《最终幻想》、《仙剑奇侠传》），但是塞尔达和仙剑其实算洞穴探险、寻宝。&lt;/p&gt;&lt;p&gt;我要举例的是上一个我玩到印象深刻且最烂的关卡设计就是&lt;span style=&quot;font-weight: bold&quot;&gt;《荒野大镖客：救赎2》             &lt;/span&gt; 在TGA2018上的不敌的年度游戏「新《战神》4」：以我8~12小时的浅显体验[^难以下咽的游戏体验和失调的叙事]且模糊记忆带着偏见拿它举例，玩家在开放世界随着进程解锁并选择游玩关卡，然后进行较长时间的大段&lt;span style=&quot;font-weight: bold&quot;&gt;线性关卡&lt;/span&gt;，所以游戏中充满了各式各样的迷宫。&lt;/p&gt;&lt;p&gt;设计师在地图的死胡同里塞了各种各样奇怪的宝箱，装着一堆没有用的垃圾道具。引导着玩家在迷宫里四处奔走，以寻找遗失的宝箱。而融入人物，和人物的完成目标：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;我在怪物巢穴走丢的儿子肯定不会死，但是我的宝箱错过了就真没了；&lt;/li&gt;&lt;li&gt;我也不用着急找我爸，死了能读档，走出迷宫之前每一个宝箱都必须打开。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;暗黑迷宫的危险、恐惧荡然无存，从紧张的气氛变成一个气氛欢乐的大型零元购超市，甚至都没法装作我在恐怖的巢穴里；在你的回忆里肯定有过同样难以忍受的体验，甚至有些设计师甚至会在迷宫中的死胡同里放一些稀有道具、甚至世界唯一道具！当玩家遇到这种游戏时，只能期待自己选择的是「正确的错误的道路」，因为不小心选择了「错误的正确的道路」而懊恼不已，扭头转向跑回「正确的错误道路」，避免错过什么稀有道具。&lt;/p&gt;&lt;p&gt;躲在洞穴角落的怪物看着在迷宫里来回穿梭翻箱倒柜的勇者时，&lt;span style=&quot;font-style: italic&quot;&gt;“俺寻思这不是恐怖的怪物巢穴吗？咋是他家客厅”&lt;/span&gt;。一个个巴普洛夫的战神训练了玩家，如此彻底摧毁了玩家在所有游戏的沉浸体验，你在任何游戏中都喜欢搜索每一个角落，以免错过一点存到游戏结束都没舍得用的垃圾道具，为了这几个屁用没有的小道具，变成了在迷宫里兜兜转转寻找快感按钮的小白鼠，我们还是在玩游戏吗？沉浸感、代入感被打破的时候，玩家就从游戏、故事中抽离了出来，我们还是在游戏里冒险的那个人物吗？&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;只看待结果的话，所有人都会抵达那唯一的终点，“但是，这一切值得吗？”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;或许你想说，过程不重要，也有人喜欢搜集东西挺爽的，最终不是都抵达&lt;span style=&quot;font-weight: bold&quot;&gt;B点&lt;/span&gt;了嘛。&lt;/p&gt;&lt;p&gt;那么我认为：迷宫的的宝箱是在二十年前探索时代的开发者冒险，我能理解。但是在游戏、叙事、体验都非常发达的现代，无数开发者已经尝试了更先进更科学的方式让玩家可以获得更好的体验，还有这种不负责的偷懒的方式让信赖你的玩家患上赛博精神病，我觉得这样不对。&lt;/p&gt;&lt;h1&gt;4. 我治好了赛博精神病&lt;/h1&gt;&lt;p&gt;现在开始拉踩了，点名表扬文章开头提到的《天国：拯救2》。&lt;/p&gt;&lt;p&gt;那时我在捷克的地下矿坑，无数次的察觉了&lt;span style=&quot;font-style: italic&quot;&gt;（关卡引导）&lt;/span&gt;离开的路在前方，但是我一次次毅然决然的选择了错误的道路。经历了一个又一个的地下矿坑和城堡密道，像个小白鼠一样在迷宫里的每个死胡同里四处探索，直到某一刻，我发现并不需要把把神志从亨利身上脱离，变回在现实世界肥头大耳的玩家。&lt;span style=&quot;font-weight: bold&quot;&gt;我就是亨利，亨利也是我，一个不想做一辈子重复工作的一个铁匠，一个不想日复一日做着机械工作的普通人；一个渴望改变、渴望冒险的劳动者，一个想要给一眼望尽的枯燥人生扩宽一些些的普通人，哪怕就这么一会，能够放轻松，享受游戏就好。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;“我，斯卡里茨的亨利，不幸遇到落入矿井深处，深邃地底的压迫感和无尽的黑暗，恐惧充斥着我的全身，此刻我点亮火把只想迅速离开；而我，斯卡里茨的亨利，在漆黑的无人矿井中寻找着一切离开矿井的蛛丝马迹，带着惶恐和紧张好不回头的逃离了矿井。”&lt;/span&gt;我信任了战马工作室，他们也没有辜负。先放下生活里的一切，我就是亨利，一个中世纪捷克侍奉傲娇公主的倒霉蛋，马不停蹄的展开进行着 亨利的奇妙冒险。&lt;/p&gt;&lt;p&gt;所以，治好迷宫搜索症候群的方法找到了：&lt;span style=&quot;font-weight: bold&quot;&gt;「错误的道路不应该有任何奖励，奖励只应该出现在正确的道路上」 &lt;/span&gt;开发者应该重新建立与玩家的信赖关系，让迷宫回到迷宫的本质，让游戏回归到游戏的本质。在如今游戏设计蓬勃发展的今天，游戏的更多的可能性：游戏性、叙事性、体验性都可以作为游戏的重点。让玩家放松的去享受游戏、感受觉得奇妙的故事、人物的情感，拓宽生命的宽度，而不是被远古的爬行脑所控制。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;5. 但是&lt;/h1&gt;&lt;p&gt;但是，这份与开发商的信任又能坚持多久，下一个圣莫妮卡&lt;span style=&quot;font-style: italic&quot;&gt;（1.企业不可以拟人化，人员变动会让企业的人格有极大的变化。说不定下一坨就香了呢。2.不是针对他，只是针对TGA）&lt;/span&gt;带着它的年度游戏来摧毁你的心智，让你在再次成为赛博精神病，强迫着自己在迷宫中一个又一个的搜索死胡同时，我们又能如何呢？&lt;/p&gt; </description><link>https://www.gcores.com/articles/194810</link><guid isPermaLink="false">gcores-194810</guid><pubDate>Tue, 18 Feb 2025 05:35:35 GMT</pubDate><author>飛鳥Poter</author><enclosure url="https://image.gcores.com/4874b06e08155b46f2c714d8a9d5694c-1080-506.png" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/4874b06e08155b46f2c714d8a9d5694c-1080-506.png"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/81d0b251-f1b2-4d1c-baed-7d86fa1d5223.mp3" length="884" type="audio/mp3"></enclosure><itunes:duration>0:14:44</itunes:duration><category>知识挖掘机</category></item><item><title>图形AI粗读丨三维重建——立体视觉篇（上）</title><description>&lt;figure&gt;&lt;img alt=&quot;图形AI粗读丨三维重建——立体视觉篇（上）&quot; src=&quot;https://image.gcores.com/0b8500a83d5ee2502cc658af193ab43c-1518-1041.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/7d453afe-826a-47cc-acaf-ba9770c639ca.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/7d453afe-826a-47cc-acaf-ba9770c639ca.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/7d453afe-826a-47cc-acaf-ba9770c639ca.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;从零开始读：AI生成3D的脉络及现状&lt;/blockquote&gt;   &lt;h1&gt;前言&lt;/h1&gt;&lt;p&gt;如果说2025年春节期间有什么关键词，DeepSeek和AI肯定是其中之一。虽然敲一些关键字就能生成游戏的时代还没有完全到来，但AI确实在快速更新人们使用计算机和互联网的方式。&lt;/p&gt;&lt;p&gt;以我个人体验来说，目前DeepSeek在很多时候都是比百度和google更好的查资料来源（知识类、交通出行、概括总结等）；虽然偶尔也有一些细节上的错误，但也可以通过对话指出其问题使其自动纠错。&lt;/p&gt;&lt;p&gt;而在游戏相关的领域，其实之前虚幻官方力推的&lt;span style=&quot;font-weight: bold&quot;&gt;基于照片扫描的三维重建（3D Reconstruction）&lt;/span&gt;就已经得到广泛应用了。这是一项从前AI时代就开始提出的技术线，现在正在被AI深度学习狠狠地加持发展。如果说之前提这个事情还比较抽象的话，相信经历了《黑神话：悟空》以后，大部分玩家应该也清楚了照片扫描能达到的效果。&lt;/p&gt;&lt;p&gt;AI三维重建的另外几个方向，比如视频生成、3D模型生成等也在不断发展。在目前比较新的技术线上，其推算与生成的性能和准确度是由被称为&lt;span style=&quot;font-weight: bold&quot;&gt;高斯点云渲染（Gaussian Splatting）&lt;/span&gt;的算法来保证，而其在AI领域的更早期的技术是&lt;span style=&quot;font-weight: bold&quot;&gt;神经网络辐照度场（NeRF）&lt;/span&gt;。这些可能都是我后面会读到的内容——在这个系列的“上半场”应该都还不会读到AI相关的内容，而是以一些基础算法和理论为主。&lt;/p&gt;&lt;p&gt;至于AI生成图象和动画，以及从视频进行动作捕捉等，目前已经进入了非常成熟足够商用的阶段了。但我个人的读文章系列中可能不会涉及这两部分。&lt;/p&gt;&lt;p&gt;对我个人而言，要基本看懂三维重建相关的内容还是难度不小的。目前这个系列我计划在一年内以写翻译笔记的形式更新我的学习心得，如果有理解得不对的地方也欢迎指正。&lt;/p&gt;&lt;p&gt;为了赶时髦，我让DeepSeek帮我总结了一下三维重建的一些关键点，构成了第一部分。另外还是老样子，PPT部分以翻译为主，打星号的部分是我的个人理解或补充。&lt;/p&gt;&lt;h1&gt;一、三维重建的历史脉络&lt;/h1&gt;&lt;p&gt;*这部分DeepSeek的概括我觉得足够好了，因此就没删改（包括标点符号和样式）——大家可以感受下。基本上我的三维重建粗读计划就是基于这些关键词来进行的。&lt;/p&gt;&lt;h3&gt;1. &lt;span style=&quot;font-weight: bold&quot;&gt;早期探索（1960s-1970s）&lt;/span&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;计算机视觉的诞生&lt;/span&gt;：20世纪60年代，计算机视觉领域开始兴起，研究者尝试从二维图像中提取三维信息。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;基础理论&lt;/span&gt;：70年代，研究者提出了许多基础理论，如立体视觉（Stereo Vision）和结构光（Structured Light）技术。&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;2. &lt;span style=&quot;font-weight: bold&quot;&gt;算法发展（1980s-1990s）&lt;/span&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;立体匹配&lt;/span&gt;：80年代，立体匹配算法得到显著发展，研究者提出了多种匹配方法，如基于区域的匹配和基于特征的匹配。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;多视角几何&lt;/span&gt;：90年代，多视角几何理论逐渐成熟，研究者开始利用多张图像进行三维重建。&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;3. &lt;span style=&quot;font-weight: bold&quot;&gt;技术进步（2000s-2010s）&lt;/span&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;激光扫描&lt;/span&gt;：2000年代，激光扫描技术（LIDAR）被广泛应用于三维重建，尤其是在建筑和考古领域。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;结构光与深度相机&lt;/span&gt;：2010年代，结构光和深度相机（如Microsoft Kinect）的出现，使得实时三维重建成为可能。&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;4. &lt;span style=&quot;font-weight: bold&quot;&gt;深度学习与AI（2010s-至今）&lt;/span&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;深度学习&lt;/span&gt;：2010年代后期，深度学习技术被引入三维重建领域，显著提高了重建的精度和效率。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;自动化与实时重建&lt;/span&gt;：近年来，基于AI的三维重建算法能够实现自动化和实时重建，广泛应用于虚拟现实（VR）、增强现实（AR）和自动驾驶等领域。&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;5. &lt;span style=&quot;font-weight: bold&quot;&gt;未来展望&lt;/span&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;高精度与实时性&lt;/span&gt;：未来，三维重建技术将继续向高精度和实时性方向发展。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;多模态融合&lt;/span&gt;：结合多种传感器和数据源（如RGB图像、深度图像、激光扫描等）进行多模态融合，进一步提升重建效果。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;三维重建技术的发展历程反映了计算机视觉、传感器技术和人工智能等多个领域的进步，未来有望在更多应用场景中发挥重要作用。&lt;/p&gt;&lt;p&gt;*这次读立体视觉（Stereo Vision）我选择了斯坦福大学Professor Fei-Fei Li 在2021年的课件。篇幅原因这次会读其中的前半部分。&lt;/p&gt;&lt;h1&gt;二、立体视觉概述——Introduction to stereo vision&lt;/h1&gt;&lt;p&gt;*部分页数显示不连贯，可能是我抽选了一些页，也有些是课件本身就没标。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1683&quot; height=&quot;1243&quot; src=&quot;https://image.gcores.com/b5ea2ea926b03cdf1d5354495e3cbb0e-1683-1243.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*这里提出了降维机器（3D到2D）的概念，例如相机就是一种降维机器。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;针孔相机（小孔成像）&quot; width=&quot;1686&quot; height=&quot;1264&quot; src=&quot;https://image.gcores.com/cc2c1f57e59835f4464df17a5a5f8850-1686-1264.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;能对焦点前方的范围成像&lt;/li&gt;&lt;li&gt;移动成像平面能使图像内容缩放 &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;*图中标出了在前后等距的位置可以视为有一个“虚拟图像”，前后两者是颠倒但是尺寸相同的。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;真实世界的点和摄像机中的点关联&quot; width=&quot;1765&quot; height=&quot;1324&quot; src=&quot;https://image.gcores.com/85bd97c258a27e0f3e908b8db151a21a-1765-1324.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*这里列出了一个基础的&lt;span style=&quot;font-weight: bold&quot;&gt;齐次坐标&lt;/span&gt;（homogeneous coordinates） 变换，其目的是计算真实世界的一点P是如何对应到成像平面的P&#39;点的。其中XYZ是P的坐标。&lt;/p&gt;&lt;p&gt;*这里假设了变换矩阵M是一个“理想型”，即它符合这些预设：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;内在假设：统一的纵横比；光学中心在(0,0)点；没有偏斜。&lt;/li&gt;&lt;li&gt;外在假设：没有旋转；摄像机在(0,0,0）点。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;*齐次坐标我还能联想到的应用就是在游戏引擎计算&lt;span style=&quot;font-weight: bold&quot;&gt;视锥体透视投影&lt;/span&gt;时。这里附一张图但是不展开了，有兴趣的还是可以去看Games101。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1342&quot; height=&quot;646&quot; src=&quot;https://image.gcores.com/c08911d9328488334728f9b7fbd5beac-1342-646.jpeg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1764&quot; height=&quot;1320&quot; src=&quot;https://image.gcores.com/c0e46a87efa9cb5f84e5f9bf09f7f8cb-1764-1320.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*这里矩阵K提出去，内部变成了单位矩阵I的形式。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;假设f=2，在矩阵计算器中还原了一下。&quot; width=&quot;580&quot; height=&quot;133&quot; src=&quot;https://image.gcores.com/36bf12a9360f829a14b28f0ea06e8035-580-133.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;真实世界的摄像机&quot; width=&quot;1768&quot; height=&quot;1324&quot; src=&quot;https://image.gcores.com/e0371d985aa85a907f7a270f8f7a3b1f-1768-1324.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;内在假设：光学中心在(u0,v0)点；矩形像素点阵；轻微的偏斜。&lt;/p&gt;&lt;p&gt;*这部分内在假设反映在变换矩阵中，u0、v0在矩阵中的位置用于计算平移，而α和β则反映了纵横比的不统一，系数s则用于计算偏斜（扭曲）值。偏斜可以想象矩形扭成平行四边形的情况。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;真实世界的相机+真实世界的变换&quot; width=&quot;1767&quot; height=&quot;1323&quot; src=&quot;https://image.gcores.com/8ff86587bab882ef016584848433b4df-1767-1323.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;外在假设：允许旋转，摄像机在(tx,ty,tz）点。&lt;/p&gt;&lt;p&gt;*对应其中r系列的9个参数用来表示旋转变换，而t系列3个参数表示摄像机的平移变换。&lt;/p&gt;&lt;p&gt;*至此内在假设和外在假设都变成了参数矩阵，并且两者相乘也被赋予了意义。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;从图像中还原3D&quot; width=&quot;1687&quot; height=&quot;1263&quot; src=&quot;https://image.gcores.com/d0cdcfc2689c4cfac2269ea5e19dc45f-1687-1263.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;我们如何从图像中计算3D几何信息呢？——哪些图像中的线索能提供3D信息？&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;明暗&quot; width=&quot;1687&quot; height=&quot;1264&quot; src=&quot;https://image.gcores.com/a44702094d17dce045a7c878c97f5a44-1687-1264.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*图中的这个公司Merle Norman Cosmetics是一个换妆品牌子，和主题无关。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;纹理&quot; width=&quot;1080&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/34358ff7b10e03f7459aaf24f6688758-1080-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*这里指有一定规律的纹理走向。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;焦点&quot; width=&quot;1080&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/5ba5a1838f92ff7f551fe7cf710bb80a-1080-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;动态&quot; width=&quot;1681&quot; height=&quot;1260&quot; src=&quot;https://image.gcores.com/d6dfc1dc2a66cacff808653b61c47e18-1681-1260.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1683&quot; height=&quot;1263&quot; src=&quot;https://image.gcores.com/d6ab2bff3ca3452aa74e450b06ab116f-1683-1263.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;其它：高光、阴影、剪影、内反射、对称型、光学偏振等。&lt;/p&gt;&lt;p&gt;课件中会聚焦在motion这一类线索——追踪图像中某些特征点在不同图像空间的位置。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;立体重建&quot; width=&quot;1684&quot; height=&quot;1252&quot; src=&quot;https://image.gcores.com/78c6b0a7410710d3a86ce387bb087824-1684-1252.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;立体课题（指为什么要使用多视角）：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;通过两张（或更多）图片生成形体&lt;/li&gt;&lt;li&gt;生物性动机（人眼）&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img alt=&quot;1. 二比一更好&quot; width=&quot;1684&quot; height=&quot;1261&quot; src=&quot;https://image.gcores.com/def949e10b8ebfd18c029492821d0e1c-1684-1261.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;2. 从汇聚点还原深度&quot; width=&quot;1080&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/0cd18de0d224ff8b071fd12a69eb1a42-1080-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*基于人眼可以感受双眼夹角的原理，通过图中的公式就可以计算出距离。&lt;/p&gt;&lt;h1&gt;三、对极几何的简单引入——Epipolar geometry: a gentle intro&lt;/h1&gt;   &lt;figure&gt;&lt;img alt=&quot;对极几何&quot; width=&quot;1686&quot; height=&quot;1263&quot; src=&quot;https://image.gcores.com/e95d3e8003a36e4103ab707c76eda91a-1686-1263.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*这里引入了几个基本概念：对极平面、基线（黄色）、对极线。&lt;/p&gt;&lt;p&gt;*其中极点e、e&#39;表示：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;基线和图像平面的交点&lt;/li&gt;&lt;li&gt;另一摄像机中心的投影&lt;/li&gt;&lt;li&gt;摄像机动态方向的消失点&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img alt=&quot;例子：汇聚图像平面&quot; width=&quot;1080&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/d12dd87c1ac0d0527736783617afad9d-1080-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;对极约束&quot; width=&quot;1686&quot; height=&quot;1264&quot; src=&quot;https://image.gcores.com/8effbee7f74d3b0e1503b6a4b9b88be6-1686-1264.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;同一个物体的不同视角&lt;/li&gt;&lt;li&gt;假设已知摄像机的位置和矩阵&lt;/li&gt;&lt;li&gt;给定一个左侧图片的点，如何确定右侧图片中该点的位置？&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1683&quot; height=&quot;1263&quot; src=&quot;https://image.gcores.com/8543cdf90203a2c3a8c8dcc9e2db1f6a-1683-1263.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;p点的潜在匹配点必须在对应的极线l&#39;上。&lt;/li&gt;&lt;li&gt;p&#39;点的潜在匹配点必须在对应的极线l。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/fb62d7ca0736c85faeb0a592fe91f7cd-1080-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*图中右侧上方应该是p&#39;点，课件应该是写错了。p和p&#39;都是在各自图像平面上投影的点。&lt;/p&gt;&lt;p&gt;*M是左侧摄像机对应的矩阵，写成了之前一节中的形式，K对应之前提到的内部假设，后面的单位阵I是默认旋转矩阵、0则是默认位移矩阵。&lt;/p&gt;&lt;p&gt;*M&#39;则是经过了旋转R和平移T之后的摄像机矩阵。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/747e550034e6abc6ddfb02aaa04c3905-1080-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*两者的K值是由校准相机（calibrated camera）的参数来确保的。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1684&quot; height=&quot;1260&quot; src=&quot;https://image.gcores.com/a48540df4151855f15322a810fda8e50-1684-1260.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*T叉乘(Rp&#39;)得到的向量与对极平面垂直。&lt;/p&gt;&lt;p&gt;*p的转置与之的点乘等于0——代表两者也垂直。矩阵的转置可以理解为将其行列翻转的结果。&lt;/p&gt;&lt;p&gt;*向量点乘得到的是一个标量，而叉乘得到的是一个与两者垂直的法向量。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;向量叉乘转为矩阵乘法&quot; width=&quot;1687&quot; height=&quot;1260&quot; src=&quot;https://image.gcores.com/194f56a9d83b0b73418809d777b5c6cf-1687-1260.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*这里引入了一个&lt;span style=&quot;font-weight: bold&quot;&gt;斜对称矩阵&lt;/span&gt;的概念，其对角线上值为0，其它位置的值分布如图。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;作为参照这里展示了向量叉乘的计算结果&quot; width=&quot;611&quot; height=&quot;245&quot; src=&quot;https://image.gcores.com/80c576f16562b69243fc453730992596-611-245.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1687&quot; height=&quot;1261&quot; src=&quot;https://image.gcores.com/fb1b9b95fd3053e7389a2f3660e86873-1687-1261.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*将之前叉乘的部分转换为矩阵点乘，其中提出的部分被称为&lt;span style=&quot;font-weight: bold&quot;&gt;本质矩阵&lt;/span&gt;。通过它可以快速运算出另一个图像中的极线。&lt;/p&gt;&lt;p&gt;*这一概念于1981年由Higgins提出，这一概念的翻译也在矩阵学中被广泛使用。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/070d78e3ee1a482e89dd834dcd6e2322-1080-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;本质矩阵的一些特质如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;E乘p&#39;是与p&#39;相关的极限l。&lt;/li&gt;&lt;li&gt;“E的转置”乘p是与p对应极线p&#39;。&lt;/li&gt;&lt;li&gt;E是一个&lt;span style=&quot;font-weight: bold&quot;&gt;奇异矩阵&lt;/span&gt;。它没有逆矩阵，并有着EX=0有无限多解的特性。&lt;/li&gt;&lt;li&gt;E乘e&#39;等于0，E的转置乘e等于0。（这类计算时e和e&#39;视为向量）&lt;/li&gt;&lt;li&gt;E是一个3X3的矩阵，它有着5的&lt;span style=&quot;font-weight: bold&quot;&gt;自由度&lt;/span&gt;。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;*DOF是degree of freedom的缩写，以通俗但不算准确的方式来描述，矩阵自由度值有其中最少多少个参数能确定其约束；又由于&lt;span style=&quot;font-weight: bold&quot;&gt;对极约束是等式为零的约束&lt;/span&gt;，所以对E乘以任意非零常数后，对极约束仍然满足——这件事情称为E在不同尺度下是等价的。 基于平移3个参数、旋转3个参数，尺度等价减1（指其它参数可以按一个参数做等比例缩放），得到自由度为5。&lt;/p&gt;&lt;h1&gt;四、平行图片与图像校正——Parallel images &amp;amp; image rectification&lt;/h1&gt;   &lt;figure&gt;&lt;img alt=&quot;最简单的例子——平行图片&quot; width=&quot;1080&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/564070432ef9d87b986902288bf2f550-1080-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;摄像机的图像平面彼此平行并与基线平行&lt;/li&gt;&lt;li&gt;摄像机中心在同一高度&lt;/li&gt;&lt;li&gt;焦距相同&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/e8c465e2e8aaefc1c8d8a9d21a53167d-1080-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;此时，极线就沿着图片的水平扫描线分布。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;平行图片的本质矩阵&quot; width=&quot;1684&quot; height=&quot;1261&quot; src=&quot;https://image.gcores.com/9bb0f51dfe32d6af1ddb971fe36067e6-1684-1261.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*这里将t按照之前的规则转换成斜对角矩阵[tx]，而R是单位矩阵——这样就得到E。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1684&quot; height=&quot;1263&quot; src=&quot;https://image.gcores.com/1238ee8b0d32198309f41d481d60ae59-1684-1263.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*由于矩阵乘是有&lt;span style=&quot;font-weight: bold&quot;&gt;结合律&lt;/span&gt;的，因此可以得出v=v&#39;的结论，即图中所说的对应两点的y坐标相同。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;三角测量——依据差异计算深度&quot; width=&quot;1684&quot; height=&quot;1263&quot; src=&quot;https://image.gcores.com/dda28ba640828ac8b63b50110c7d088d-1684-1263.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*差异（disparity）值是&lt;span style=&quot;font-weight: bold&quot;&gt;和深度成反比&lt;/span&gt;的。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;立体图像校正&quot; width=&quot;1080&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/f57ba8aedb73f121d4d7c48272fed27d-1080-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;算法：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;重投影图像平面，至两个与视觉光学中心线平行的平面上。&lt;/li&gt;&lt;li&gt;这次变化之后像素的移动是水平的。&lt;/li&gt;&lt;li&gt;两个变换矩阵，对应每个输入图片的投影各一个。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;*直译过来稍微有些别扭，但结合示意图理解，实际上是想用多一个步骤的图像平面变换来达到简化计算以及利用三角测量的意义。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;校准示例&quot; width=&quot;1080&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/21d74202793a0a62de0ee8bd8b7c7086-1080-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;应用：视觉变形&quot; width=&quot;1684&quot; height=&quot;1264&quot; src=&quot;https://image.gcores.com/e5ba0362deb461f105856e259043b238-1684-1264.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;移除透视扭曲（校正）&quot; width=&quot;1080&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/4012d5f7a0e0c88fde5ed3c9e9f28bf9-1080-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h1&gt;结语&lt;/h1&gt;&lt;p&gt;由于课件没有解说稿，因此能感觉到有些部分直接上各种公式计算还是缺一点铺垫。而如此高密度的各种矩阵计算，有些我能掌握，也有很多方面我是纯萌新——有些东西只能概念性的把握一下，没法深入再去了解了。&lt;/p&gt;&lt;p&gt;但尽管如此，相信不管是我还是读到这里的各位，应该能从示意图感受到这些计算机视觉领域的前期研究是在处理哪些方面的问题，并为之设计了哪些数学工具和算法的。&lt;/p&gt;&lt;p&gt;尽管只是开了个头，距离读到最前沿和AI都还挺远，但也算是开启了这个读计算机视觉和三维重建方面文章的系列。下周会继续更新这篇课件的下半部分。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;最后是一些资料链接：&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Computer_stereo_vision&quot; target=&quot;_blank&quot;&gt;立体视觉的WIKI&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/645991529&quot; target=&quot;_blank&quot;&gt;一篇介绍本质矩阵的知乎&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://matrixcalc.org/zh-CN/&quot; target=&quot;_blank&quot;&gt;一个实用的矩阵计算器工具&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://ww2.mathworks.cn/help/vision/ug/camera-calibration.html&quot; target=&quot;_blank&quot;&gt;介绍摄像机校准的一篇文章&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://vision.stanford.edu/teaching/cs131_fall1415/lectures/lecture9_10_stereo_cs131.pdf&quot; target=&quot;_blank&quot;&gt;斯坦福大学这篇课件的地址&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt; </description><link>https://www.gcores.com/articles/194564</link><guid isPermaLink="false">gcores-194564</guid><pubDate>Thu, 13 Feb 2025 23:11:40 GMT</pubDate><author>Hakumen</author><enclosure url="https://image.gcores.com/0b8500a83d5ee2502cc658af193ab43c-1518-1041.png" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/0b8500a83d5ee2502cc658af193ab43c-1518-1041.png"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/7d453afe-826a-47cc-acaf-ba9770c639ca.mp3" length="811" type="audio/mp3"></enclosure><itunes:duration>0:13:31</itunes:duration><category>知识挖掘机</category></item><item><title>关于游戏叙事设计，我们应该如何武装自己的头脑？</title><description>&lt;figure&gt;&lt;img alt=&quot;关于游戏叙事设计，我们应该如何武装自己的头脑？&quot; src=&quot;https://image.gcores.com/98b4aadab80aa6319c914a0fba8610a8-1275-718.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/1b45c7b8-67fb-4d9f-acf3-87b26bd835e8.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/1b45c7b8-67fb-4d9f-acf3-87b26bd835e8.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/1b45c7b8-67fb-4d9f-acf3-87b26bd835e8.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;这是一篇一万六千字的长文。Deepseek帮我吹牛：我这是尝试在商业性与艺术性之间，搭建可落地的游戏叙事工程学 。&lt;/blockquote&gt;   &lt;h1&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;前言：为什么在设计叙事前我们需要武装头脑？&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;2024年六月底，我在学习了媒介社会学相关的知识后，受视野被开拓的热情与灵感所驱动，开始写作杂谈《从媒介的视角看游戏文案的困境与出口》。我先后发布了涉及“困境”的上、中两篇，但唯独最关键的探讨“出口”的下篇却难产了。在写下下篇的大纲后，我看着大纲，忽然意识到这可能只会是一篇伪学术垃圾。越是从媒介学的视角探讨，我们便越能看到游戏在成为复杂的综合艺术之前，先是一个精密运转的现代文化产业的产品。我当然可以高屋建瓴地大谈特谈行业可能的出口，但最后能落到实际而对阅读文章的大家真正有意义的，恐怕只有“游戏文案该怎么做”这一小部分了。 &lt;/p&gt;&lt;p&gt;而游戏文案该怎么做呢？&lt;/p&gt;&lt;p&gt;从入行开始，我便一直在思考这个问题，但若我真正将这部分作为文章的核心内容，以我的实践经验和理论储备，真的能回答好这个问题吗？在2024年中旬的我还没有这样的信心。而随后的2024年下半年，也算机缘巧合，我为两个项目快速地从0到1搭建了比较完整的虚构层框架。虽然它们的体量都不算大，但最终的效果让我对自己长久以来形成的思维方式和积累的方法论有了一些自信。所以正值2025年的新年，我希望将它们分享出来，作为《从媒介的视角看游戏文案的困境与出口》真正的下篇，为去年的理论探索收尾。也用作抛砖引玉，来和大家一起探讨，在新的一年里为成为更好的游戏文案的奋斗作开篇。&lt;/p&gt;&lt;p&gt;同时在上面两个项目的开发过程中，我再次意识到，只探讨游戏文案怎么做往往还不能真的导向一个叙事优秀的游戏。正如我在《从媒介的视角看游戏文案的困境与出口（中）》里面提到的：&lt;/p&gt;&lt;blockquote&gt;理论上的文案策划的职能在实际开发中被分化出去了，这是游戏这种媒介的经济模式和市场需求所决定的。如果相关岗位的从业者对游戏文案、虚构层包装都有着比较全面、系统的认识，能够在此基础上密切配合，最终一起实现一套优秀的包装，想来也不会有文案策划有怨言。但这却偏偏是现阶段业内的文案策划们比较无奈的事。 &lt;/blockquote&gt;&lt;p&gt;所以，最终这篇文章会不只是面向游戏文案，而是面向所有对游戏叙事设计有兴趣的游戏开发者。我希望尽可能从游戏叙事的底层出发，去帮助大家达成上面提到的“对游戏文案、虚构层包装都有着比较全面、系统的认识”。这篇文章的核心便从“游戏文案该怎么做”，转为了“在设计游戏叙事前，设计者应该做好哪些认知上的准备”。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;在开始之前我们先再次确认一下进行认知准备的必要性：&lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;玩家审美迭代加速&lt;/span&gt;&lt;/li&gt;&lt;li&gt;回顾游戏叙事的发展史，如今游戏设计者的总体叙事水平无疑是高于两千年初的。但在我们心中，当今称得上叙事经典的作品涌现的频率似乎并没有提高。这侧面反映了我们作为玩家的审美水平也在提升。且玩家对游戏叙事的要求只会越来越高，直到游戏不再能满足玩家对故事的需求，他们便转向别的媒介来满足这种需求。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;工业化生产需求&lt;/span&gt;&lt;/li&gt;&lt;li&gt;游戏规模的扩张带来游戏开发团队的膨胀，工种越分越细，而知识区隔使沟通成本膨胀。而对游戏叙事较统一的整体认知能极大减少策划、美术、音频团队在产出叙事方面内容时的沟通成本，也能保证大家在团队合作中能在充分理解需求的前提下发挥自己的创造力，从而提升产出质量。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;叙事媒介特殊性&lt;/span&gt;&lt;/li&gt;&lt;li&gt;游戏叙事有着它独有的特点，在实践中不能将其他艺术门类的叙事理论简单套用过来。先跳出文学、影视的叙事理论，从交互性的根本来理解游戏叙事非常有必要。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;而在建立正确的认知之前，我们还需要澄清几个常见的认知误区：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-style: italic&quot;&gt;（以下案例皆由我真实遇到过的情况改编，但其实我对我可爱的同事们没有不满，毕竟术业有专攻，此处只是举例说明常见的误区）&lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;叙事≠写故事&lt;/span&gt;&lt;/li&gt;&lt;li&gt;“叙事就全部交给你（文案）了，放心，我作为制作人/美术/音频不会太干涉故事的事情。” &lt;/li&gt;&lt;li&gt;叙事并不简单地指讲述一个故事。在叙事学中，叙事有着更广泛的含义，它指通过某种结构来传达一些信息或者体验。也就是说，从广义的叙事的定义来看，所有游戏都需要传递信息和体验，也就都绕不开叙事。而游戏叙事当然不只是文案需要考虑的事情。游戏为叙事所建立的结构又叫做虚构层，它包含着美术、音频，而又被游戏的交互规则——玩法深深影响。团队中每个人的每个选择几乎都会影响到叙事最终的效果。因此，想要创作出优秀的游戏叙事，团队的每一个参与者都应该朝着共同建立一个优秀的叙事结构而努力。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;世界观≠设定集&lt;/span&gt;&lt;/li&gt;&lt;li&gt;“我想给这个角色面部加个防毒面具/头上加一对猫耳不可以吗？只是加一个小设定，又不会影响什么。”&lt;/li&gt;&lt;li&gt;世界观是经由游戏所表现出来的叙事符号所搭建的一个可信的，因此才可沉浸的虚拟世界。他是人为设计的叙事符号之间的关系与意义，也是设计者人为创造的文化语境（别担心，后面会细致解释这句话）。它并不是简单的设定堆砌，它需要在一个逻辑严密、核心明确的框架下层层展开。有时一个小设定的更改会像改掉一栋楼的承重柱一样，对世界观最重要的可信性带来巨大影响（比如在一个本没有兽人设定的世界观里给主角加个小小的猫耳）。那如何判断设定能不能改、能不能加呢？这里有一个原理可以用来帮助判断：某个设定需要展现出对玩家关心的事情——信息的呈现、故事、角色的有逻辑的影响，才会被玩家采信，它才能融入世界观当中去。因此，对信息的呈现效果、对故事的讲述、角色的塑造有益则能加能改、能加，反之则不能。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;共情≠煽情&lt;/span&gt;&lt;/li&gt;&lt;li&gt;“我们对主角的想法很简单，可爱就行了。我们没有打算写有深度的或者煽情的故事，所以本来还没有考虑让玩家对角色共情的。”&lt;/li&gt;&lt;li&gt;如果叙事的主要目标只是为了准确地传达信息（《俄罗斯方块》），或者给玩家提供简单的代入感、沉浸感（《堆叠大陆》），那么在设计时可以抛开共情的问题。而如果游戏叙事的主要目标涉及到塑造一个角色，或者换句话说，涉及到讲述一个故事，那么让玩家共情便自然而然地变成了最关键的一步。玩家要关心游戏的故事，关心游戏角色的成长变化，他才不会想要在对话或演出时点击跳过按钮。而建立关心也就是要建立玩家对角色在当前故事发展中的当前困境、当前感情、当前选择的感同身受，也就是所谓的“共情”。共情是讲述故事、塑造角色的大前提，煽情只是达成共情的一种手段。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;前言的最后，我在这里列一个文章的目录：&lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;我们可以怎么看待游戏叙事？&lt;/li&gt;&lt;li&gt;游戏的叙事内容包括哪些部分？&lt;/li&gt;&lt;li&gt;游戏叙事的“好”有哪些维度？&lt;/li&gt;&lt;li&gt;如何落地游戏叙事设计？&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;736&quot; height=&quot;650&quot; src=&quot;https://image.gcores.com/1303a74a125f7e61d83950dffc159754-736-650.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt;&lt;h1&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;一、我们可以怎么看待游戏叙事？&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;一切都开始于这一个问题：游戏是什么？&lt;/p&gt;&lt;p&gt;如同其他学科的本体论问题一样，这一问题没有标准答案。但我坚持认为游戏制作者在制作某一游戏时，他对游戏的认识会充分体现在制作的过程和结果上。如果认为游戏是艺术，那么制作者往往会更重视艺术性与个人表达；如果他认为游戏是娱乐，那么游戏的玩法和乐趣会被放到设计的首要位置；而如果他认为游戏是产品，那么大家便总会听到他用“赛道”“竞品”一类的词汇表述自己立项和开发的历程。&lt;/p&gt;&lt;p&gt;我在之前的文章中推荐过一个更全面的视角来看待游戏，即媒介的视角。游戏在成为艺术品、娱乐方式、商业产品之前，它首先是一种能够用以传递信息的媒介。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;媒介被生产出来的目的，在于它能传递承载的信息，以达成传者/受者的目的。而游戏这种媒介区别于其他种类的媒介，有着“交互性”这一独特的特点。&lt;/li&gt;&lt;li&gt;游戏这一媒介的发展是以各种媒介技术为基础的。技术的发展会极大地带动游戏的发展。&lt;/li&gt;&lt;li&gt;而这种媒介现在是在一个庞大、复杂、精密的现代文化产业中生产的。这个产业既受制于外部的政治、经济环境，而又由产业中每一个活生生的人组成。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;媒介的视角能够包容我们前面提到的一些视角，它也能包容一些游戏未来潜在的发展方向。例如教育游戏、医疗游戏、公益游戏等功能游戏，无法被上述的艺术品、娱乐方式、商业产品的视角所容纳，但它们能很好地放入媒介的视角内。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;从媒介的视角来看：&lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;首先，游戏的叙事内容是游戏这一媒介产品所承载的一部分的媒介信息，这一部分往往又包含了两个模块的内容，一是对游戏交互的虚构包装，二是对游戏流程的故事包装，它们往往作为游戏这一媒介串联和传递信息的核心，且能赋予玩家的游戏体验以更丰富的意义。&lt;/li&gt;&lt;li&gt;其次，主要负责游戏叙事的文案策划（理论上的，实际常由别的岗位兼任，有专职文案策划的项目反倒占少数）处于游戏行业这一媒介产业当中，其产出会深受项目内的岗位要求、权利分配、工作流程影响。在项目之外，游戏叙事也会受到整个行业的行业规范、商业模式，乃至上下游产业链的影响。&lt;/li&gt;&lt;li&gt;再次，游戏叙事的设计与叙事相关的技术联系密切。像articy:draft一类的文案管理软件的发展促成了《极乐迪斯科》等具有极其复杂的分支对话的游戏诞生。此外，在理论技术方面，我们也能看到近十年来影视写作技巧的引进与成熟，使得《美国末日》《荒野大镖客》等作品在叙事上大获成功。&lt;/li&gt;&lt;li&gt;而后，游戏文案面对着游戏玩家这一受众群体，玩家的需求与过往的游戏产品塑造着玩家对于游戏叙事的期待，这种期待会间接影响到文案策划的产出。而如今在平台时代，游戏在各种平台上的玩家社区几乎决定了游戏的“生命力”，社区氛围的营造更加需要被纳入叙事设计的考虑要素之中（《碧蓝档案》的成功离不开这一点），社区的舆论反馈往往也会直接影响到叙事内容的修改。&lt;/li&gt;&lt;li&gt;最后，游戏文案还受到上述众多因素之外的外部社会世界的制约，包括各种政治、经济因素。大家感受最为直接的大概是版号制度，以及最近欧美游戏中愈发盛行的政治正确内容。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;而当我们以媒介的视角来看待游戏，游戏叙事内容又起到怎样的一个作用呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;首先，媒介的核心功能是传递信息。而游戏这一媒介的特点是交互性，它本质上只是玩家与一段程序进行输入与输出的信息交互，原始的信息是以二进制的形式存在的。人类当然无法直观地理解二进制信息，而将这些二进制数据转化为玩家能够理解的内容，这就是游戏叙事的开始了。例如玩家按下键盘的A键，程序使一张图像根据某些参数往位置坐标轴x轴的负方向移动，并在屏幕上反馈出来，而游戏叙事便将这个过程用图像、文字、音频符号包装为玩家操纵一个角色，向游戏场景的左侧移动，或者包装为玩家以上帝视角在拖动场景中的某个物件向左。这样对游戏程序的反馈信息进行“包装”，其实就是我们常提到的机制层上的虚构层设计。它赋予了游戏体验基本的意义。想象一下完全没有虚构层的游戏，玩起来恐怕就是程序员测试代码一样的体验吧。&lt;/p&gt;&lt;p&gt;同样的游戏玩法也可以使用完全不同“包装”，就像我上面提到的那个例子。他们可能会导致反馈信息呈现的效果截然不同，从而影响到游戏风格和玩家体验。而玩家深恶痛绝的“换皮游戏”之所以存在，也正是因为虚构层包装有很强的可操作性。&lt;/p&gt;&lt;p&gt;当然，如今大家开始设计一个新游戏，肯定不会先从程序逻辑的角度思考，再寻找合适的叙事包装。游戏设计的发展经过多年的积累，在虚构层包装上已经有了一些惯例，他们被统合进了游戏题材、游戏类型的定义里。即使对一个游戏毫无了解，别人在提到类银河恶魔城、魂类、格斗游戏、西幻这些游戏的标签时，我们脑海里也会浮现出一些常见的包装元素，或对整体的叙事风格先有了想象，这就是惯例的力量。但我认为了解这样的底层逻辑是没有坏处的，在题材和类型的框架下，我们仍可以继续探索更加贴合游戏玩法的虚构层包装方式，更换惯例的虚构层设计，也能为玩家带来新鲜的体验。&lt;/p&gt;&lt;p&gt;其次，无论是出于艺术表达的、商业的，或公益的目的，所有的游戏设计者都希望玩家在上手游戏后，能持续地玩下去，直到设计者达成了他们的目的。从玩法（机制层）的角度来看，心流理论能为我们达成目的提供指导；而从叙事（虚构层）的角度来看，我们已经通过虚构层构建好信息认知的框架了，而吸引玩家持续游玩，实际是需要基于玩家意义的反馈，进一步影响到玩家的情绪、情感，再进一步塑造玩家与游戏的情感联结。用通俗的方式来讲，这其实就是配合玩法建构代入感、沉浸感、共情的过程。游戏达成了与玩家的情感联结后，还可以更进一步向玩家传递价值观，在虚构层赋予的基本的意义之上，为玩家的游戏体验赋予更深刻的意义。&lt;/p&gt;&lt;p&gt;反过来看，最糟糕的情况是游戏无法影响到玩家的情绪，玩家会觉得游戏无聊，自然会放弃继续游玩。其次糟糕的情况是当一个游戏的体验过程激起了玩家在设计者意料之外的情绪，例如突如其来的NTR情节带来的愤怒，持续出现恶性bug带来的恶心，这些都有极高的让玩家弃坑的风险。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;在媒介的视角下，该怎么定位游戏文案策划这一岗位呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;我在前言中提到，这篇文章是面向所有对叙事设计感兴趣的游戏开发者的，但这里我仍旧想分享一下我理解中的游戏文案策划核心的工作责任，以帮助大家更好地与文案策划合作，或判断自己的项目需不需要一个文案策划。&lt;/p&gt;&lt;p&gt;我平常向同事们介绍文案策划的职责时，往往会这么比喻：设计和制作游戏的交互规则/玩法像是在搭设骨架、安排内脏。而理想状态下，我们文案策划的工作便像根据骨架和内脏来统筹安排串通全身的血管，从而帮助美术、音频设计直接表现在外的皮肉，让游戏的外在鲜活起来。而我们安排的血管里，流淌的是意义的血液，它们使玩法的心脏一次次搏动，让玩家的情绪也随之波动，从而使玩家能感受到，这是一个活生生的、协调且有魅力的艺术生命。&lt;/p&gt;&lt;p&gt;在实际的开发流程中，叙事设计的工作肯定会分散，完全由文案作为上游给美术、音频非常细致的设计需求，会限制美术、音频的创造空间，往往也不现实。因此，我认为文案策划在一个团队内最恰当的位置是叙事顾问。在承担最基本的设定、故事、文字工作以外，文案策划还应该积极主动与其他岗位的同事们沟通，为叙事元素的设计提出建议、反馈，为叙事设计的前进的方向掌舵，努力使大家对项目叙事内容想要达到的效果有着统一的认识，并在此大前提下，尊重各个岗位独立的创造空间，尽力将大家的灵感纳入到叙事整体当中来。&lt;/p&gt;&lt;p&gt;对于文案策划，乃至所有游戏叙事的设计者来说，什么是媒介的视角呢？就是既要尊重叙事理论，也要尊重开发实际，尊重团队创作的形式。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;736&quot; height=&quot;729&quot; src=&quot;https://image.gcores.com/de9230aee3885ba75361c0a029e43964-736-729.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;二、&lt;/span&gt;游戏的叙事内容包括哪些部分？&lt;/h3&gt;&lt;p&gt;上一个部分中，我们探讨了该如何看待游戏叙事。但这样的基础认知还不足以指导我们的实践。为了排布设计叙事时的优先顺序，审视各个部分的叙事元素达到的效果，我们需要对游戏的叙事内容进一步进行划分，并细致讨论各个部分的原理与作用。&lt;/p&gt;&lt;p&gt;在之前的文章中，我从中国的游戏文案策划这一岗位的发展史中总结过现阶段文案策划的工作：&lt;/p&gt;&lt;blockquote&gt;理论上，文案策划需要配合其他岗位横向地为游戏中相互关联的系统建构符号体系，赋予玩家与游戏的交互以意义，同时需要纵向地为游戏流程在这套符号体系上搭配相符的叙事，让玩家的体验过程在玩法乐趣上增添审美价值。因此，现阶段理论上的游戏文案指代着一个统一的符号体系，它由两个互为表里的部分组成， 一是对游戏交互的虚构包装，二是对游戏流程的叙事包装。 &lt;/blockquote&gt;&lt;p&gt;而现在，抛开了岗位历史的视域，我们已在上一部分的探讨中已经从作为游戏根本的“交互性”中再次推导出了相似的结论。我们在这里可以更新一些表述方式，让它更加细致准确：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;游戏的叙事内容其实是一个复杂精密的球体，但我们可以从横向和纵向两个角度将它切开来看。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;横向——虚构层：&lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;横向切开，我们便会看到在某个游戏的时刻或者片段，设计者将游戏的交互信息由程序语言转译为了另一套相匹配的、成体系的符号语言。&lt;/li&gt;&lt;li&gt;这套符号体系让玩家能理解游戏当前的状态，了解游戏的交互规则，并赋予了玩家与游戏的交互以意义。&lt;/li&gt;&lt;li&gt;我们将这套符号体系称作“虚构层”。这是游戏叙事的基础。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;纵向——故事层：&lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;纵向切开，我们便会看到在游戏整个游玩流程中，在虚构层的基础上建立的叙事过程。&lt;/li&gt;&lt;li&gt;这个过程将零散呈现给玩家的意义逐渐联系成一个整体，并将这些意义延伸成情绪体验。&lt;/li&gt;&lt;li&gt;配合精妙的符号体系与此起彼伏的情绪体验推动玩家沉浸到游戏的世界中、与故事角色产生共情，并最终接受设计者试图传递的价值观。&lt;/li&gt;&lt;li&gt;我们可以将这个叙事过程称作“故事层”。故事层是一个叙事过程，往往会讲述一个故事，但并不一定需要讲述一个故事。&lt;/li&gt;&lt;li&gt;在编剧的剧作理论中，一个故事成立需要有五个要素，主角、目标、阻碍、失败代价、为什么故事开始于此。这五个要素往往天然地存在于游戏玩法规则之中。&lt;/li&gt;&lt;li&gt;例如，象棋并没有讲述故事，但基于象棋的虚构层，我们也能从两个玩家对弈的过程中提取出上面的五个要素，这会是一个指挥官操作士兵运筹帷幄消灭敌军的故事。而即使是俄罗斯方块，我们也能在一定的脑补下想象出游玩过程代表的故事。&lt;/li&gt;&lt;li&gt;也就是说，在合理的虚构层之上，玩家与游戏交互的过程会自然形成故事。理解了这一点，也就能理解为什么游戏能实现涌现式叙事了。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span style=&quot;font-style: italic&quot;&gt;注意：你在其他地方看到的“虚构层”指的是所有叙事内容，其实包含了这里所谓的故事层，而我为了更好地将理论落地，在这里将它们拆开来了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;当然，上述的横向与纵向只是两种观察游戏叙事的视角，在做横与纵的切分的时候，我们也应该牢记游戏叙事是一个复杂的动态过程。纵向的故事层肯定离不开横向的虚构层的支撑，而横向的虚构层中各个符号的意义，往往也需要在故事层展开的过程中逐渐联系成一个整体，而才能为玩家所理解。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;现在，我们再更加细致地讨论虚构层：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;我们已经了解了虚构层是一套符号体系，而这套符号体系是如何传递意义的呢？&lt;/p&gt;&lt;p&gt;符号学告诉我们，符号传递出意义有着这样一个过程：符号→结构→叙事信息（意义）&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;符号指的是承载着意义的事物，它是传递意义的最基本的单位。&lt;/span&gt;&lt;/li&gt;&lt;li&gt;例如，一个字即是一个符号。&lt;/li&gt;&lt;li&gt;符号的概念最初来自于语言学。语言符号分为两个部分，一是能指，二是所指。能指是符号本来的概念和对象，例如汉字“花”的能指是字形“花”和字音“hua”的结合；而所指是符号具体指代的对象或意义，例如汉字“花”的所指是被子植物特有的生殖器官。&lt;/li&gt;&lt;li&gt;当符号的思维发展到了更广泛的人文社科领域，便出现了文化符号学。文化符号进一步地在语言符号的所指之上探讨符号衍生出的文化含义，例如在文化符号学看来，文化符号“花”的能指是被子植物特有的生殖器官，而文化符号“花”的所指在不同的文化语境中可能是美好、生命、青春等象征含义。&lt;/li&gt;&lt;li&gt;符号的意义是在语境当中传达的，文化符号的意义也是在文化语境当中传达的。这意味着传递意义的不是符号本身，而是符号之间的组合关系。换句话说，在一个作品中单独的、与其他符号无逻辑关联或文化隐喻关联的符号没有实际的叙事意义。就像在艾尔登法环中突然放入一个哆啦A梦只会让人困惑，或被解读为某种解构主义、后现代主义的艺术潮流。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;承载着意义的符号会组成结构。&lt;/span&gt;&lt;/li&gt;&lt;li&gt;结构的概念来自于学术界与艺术界的结构主义思潮，而从结构的思潮中进一步发展出了现代叙事学。结构可以进一步解释符号如何在与其他符号的组合中，或在文化语境中运作。&lt;/li&gt;&lt;li&gt;结构主义者认为，文化意义实际是通过二元对立的符号构成的结构来传达的。例如，一个故事让正义的势力与邪恶的势力对抗，这便构成了一个简单的正义与邪恶对立的结构。通过正义最终战胜了邪恶，作品能传达出邪不压正的意义（奥特曼）。当然，绝大部分作品为了追求叙事深度，结构都不会如此朴素，往往不止一组对立，是多组对立交织，即使是同一组对立，也可能有几重的内涵。&lt;/li&gt;&lt;li&gt;那么在艺术作品中，美如果没有与丑对立，那美便无法传达出美的意义吗？实际上并不会。人类对符号有天然的敏感，一个作品中若只有代表美的符号，没有代表丑的符号，那受众也会无意识地将代表美的符号与自己的认知经验联系起来，在作品外寻找与之相似的符号和与之对立的符号，来尝试解读出信息（只是符不符合作者的意图就是未知数了）。这是因为人类天生追求意义，会难以接受无意义的事物。因此，个人的认知经验对符号的解读有着至关重要的作用。设计者让符号承载的意义贴近该符号在现实的文化语境中的意义，也会降低受众解读符号的难度。&lt;/li&gt;&lt;li&gt;我们每个人早已置身于社会生活的符号的海洋中。所以，无论设计者是否有意，符号与作品内外的其他符号组成结构是自然而然的事。只是有设计目的的更清晰的结构会带来更简单的接受难度，使受众有着更清晰准确的理解。&lt;/li&gt;&lt;li&gt;而综合我们上文的探讨，&lt;span style=&quot;font-weight: bold&quot;&gt;结构便是一个由相似或对立的符号组成的联系密切的符号体系。&lt;/span&gt;视它囊括的符号的多少，它可大可小。它在一个一个简单文化意义基础上传达出更深远的意义。因此，构建结构需要精巧地选择文化符号，编织它们的关系，来表达结构中相似或对立的各个元素，便能搭建起虚构层的地基。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;虚构层是一个宏观的结构。&lt;/span&gt;&lt;/li&gt;&lt;li&gt;游戏中的所有有意义的元素都是符号，它们共同组成了虚构层这一个宏观的叙事结构。&lt;/li&gt;&lt;li&gt;虚构层的结构中基本的对立是游戏规则中玩家与阻碍之间的对立，而以此为基础可以排布出代表玩家/主角的符号、代表目标的符号、胜利相关的符号、失败相关的符号、代表友方的符号、代表敌人的符号等，所有的符号都会有一个初步的位置。游戏玩法的不同可能会使符号在这个结构中排布的方式不同，但为了构建游戏自己的语境，这些符号在规则之外一定还需要用某种逻辑更紧密地联系在一起。我们往往会借助现实的文化语境，以及游戏世界观设定。&lt;/li&gt;&lt;li&gt;如果这些符号的之间的联系与对立关系清晰，并且在作品内外的文化语境中的联系与对立关系也足够清晰，并且这种联系与对立非常契合游戏规则中的联系与对抗，那这样的虚构层便非常易于理解。例如象棋。&lt;/li&gt;&lt;li&gt;好的虚构层会呈现给玩家一种简洁、准确、又似乎能包罗万象的优美，这是一种近似于氛围的整体的美感，你无法用任何单一的元素描述出这种美感，它是游戏中每个符号的合力，存在于游戏的每时每刻，每个角落。例如《Gris》《动物井》《艾尔登法环》。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;我们继续更细致地讨论故事层：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在现代的电子游戏中，虚构层中的符号不会在游戏一开始就全部都呈现给玩家，玩家也没有一本规则书，让他能在游戏一开始就理解所有符号的联系与意义。&lt;span style=&quot;font-weight: bold&quot;&gt;从本质上看，故事层，即所谓的叙事过程，其实就是将虚构层中的符号按某种顺序、以某些方式逐步展示出来。&lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;叙事顺序与叙事方式&lt;/span&gt;&lt;/li&gt;&lt;li&gt;在故事层这个叙事过程中，游戏的符号会在某种叙事顺序下呈现出他们的联系与对立关系，也就传递出了他们的意义。叙事顺序需要与之相匹配的叙事方式，但叙事方式更多在交互规则的范畴，且根据项目需求可以千变万化，我就不讨论了。&lt;/li&gt;&lt;li&gt;我认为最好的叙事顺序便是玩家按游戏规则自由体验的顺序，即玩家在游玩游戏时符号紧密围绕着游戏的规则，也配合玩家的交互过程自然地呈现出来。符号的关系、意义不用设计者用额外的信息来解释，也在玩家游玩的过程中能逐步被玩家领悟到。所谓的环境叙事是这种叙事顺序的一种体现。而在这里我还不得不提到《巴别塔圣歌》，它仿佛就是为了解释这个理论而诞生的。&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1ru411T75L/?share_source=copy_web&amp;amp;vd_source=304b5abf7f731556abaceac1de467453&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-style: italic&quot;&gt;【《巴别塔圣歌》介绍：基于文字学和符号学的优质解谜游戏】&lt;/span&gt;&lt;/a&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;而其次的叙事顺序是按照一个故事叙述的顺序。游戏叙述一个故事，塑造一个或多个角色。而我们从剧作理论中引进了激励事件、进展纠葛、高潮、结局的故事展开顺序，在玩家游玩游戏的过程中插入对话、演出呈现信息。这样也能通过角色和故事的逻辑串起大部分的符号，符号的意义也可以在故事或者对白中得到进一步解释。&lt;/li&gt;&lt;li&gt;再次的叙事顺序就是按照设计者设定的顺序。简单来说就是在玩家游玩到某个节点时，会弹出额外的信息来解释游戏中的符号的具体意义，以及它和其他符号的关系。我并不排斥这种方式，在不影响玩家体验的前提下，这种方式成本最低，也最直观，但想要用得自然并不容易。而在体量较大的游戏中，这种顺序也不太可能成为主导的叙事顺序。&lt;/li&gt;&lt;li&gt;上述三种顺序以外的其他顺序，例如意识流，或者基于互联网流行梗进行叙事，这些都太小众了，我就不展开了。&lt;/li&gt;&lt;li&gt;而游戏当然并不是只能采用一种叙事的顺序，在大部分项目中，三种主流的顺序都是交织在一起的。用哪种顺序作为主导，以及在何种场景下使用哪种顺序，并且搭配什么样的叙事方式，这是要求设计者根据自己项目的需求细致考虑的事情。这里提供一个优秀的案例以供参考——《塞尔达传说：旷野之息》。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;情绪变化&lt;/span&gt;&lt;/li&gt;&lt;li&gt;玩家接受这些符号的过程实际是在接受与游戏交互的反馈。理想情况下，获得意义的反馈会影响玩家的情绪。如果叙事过程能配合玩法持续地影响玩家的情绪，使其上忽下、起伏不定，那玩家便会持续地被吸引住，产生代入感、沉浸感。这是一个游戏的最基本的要求，也就是不让玩家“无感”或“无聊”。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span style=&quot;font-style: italic&quot;&gt;情绪变化也是故事层的最基本的要求，下面便是设计者们可选择添加的内容了。&lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;故事与角色&lt;/span&gt;&lt;/li&gt;&lt;li&gt;我们在前面提到过，游戏规则往往天生符合故事成立的要素，游戏其实非常适合讲述故事。故事中的价值变化和角色的成长弧光能激发玩家的共情，让叙事带来的情绪变化上升为情感变化，玩家便与游戏产生了情感纽带，这极大地增强了游戏的吸引力。&lt;/li&gt;&lt;li&gt;利用故事层讲一个故事其实要比用电影、小说、戏剧讲故事有着更多的限制。这是因为故事是充满矛盾的，矛盾其实就是二元对立的结构，而游戏已经先有了虚构层的结构了。故事的结构必须先融入虚构层的结构当中去才能顺畅地讲述。例如在一个没有战斗的休闲建造游戏内放入一个跟建造无关的，主角战天斗地的故事，有极大概率会显得水土不服。如果故事的核心矛盾，也就是核心的结构，贴合虚构层的总体结构，也就是贴合着游戏玩法，那故事的呈现便能自然地嵌入游戏流程当中。例如用象棋的规则讲一个楚汉争霸的故事，用肉鸽游戏讲一个逃脱轮回的故事。&lt;/li&gt;&lt;li&gt;而如果游戏中的符号既非常符合呈现玩法信息的要求（也就是先有一个好的虚构层），又非常符合呈现故事信息的要求，那么故事的主题展现便能自然地嵌入玩家游玩游戏的体悟中，角色在故事压力下的抉择对应着玩家在规则压力下的选择，角色成长魅力的呈现贴合着玩家在玩法中的成长，那游戏带给玩家的情绪变化也就自然在故事高潮的力量中上升为了情感的变化。在这种情况下，玩家将为游戏的高潮所震撼，从而与游戏产生情感链接。例如《蔚蓝》《逆转裁判系列》。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;价值观&lt;/span&gt;&lt;/li&gt;&lt;li&gt;而通过结构，设计者也能在故事层中传递出自己的价值观。我在上面已经提到过了通过“正义”与“邪恶”的结构来传递邪不压正的价值观。而如果将主角设计为多元性别人士，TA的敌人是各种对TA存有偏见的人，或代表着偏见的凶暴生物，那便能打造出符合欧美DEI政治正确的游戏价值观。&lt;/li&gt;&lt;li&gt;游戏的交互性使得游戏相较于其他媒介，更易于让受众在游戏过程中接受植入的价值观。但也正是因为这样的特点，玩家如今已学会在挑选游戏时避开那些充满说教意味的，甚至引起他们反感的价值观。不妥当的价值观还会在玩家社区内引起舆论风波，而如果处理不当，在平台时代，玩家社区对游戏越来越重要的当下，这便几乎等于给游戏的社区活力和商业前途判下死刑。例如《少女前线2》《龙腾世纪：影障守护者》。所以，价值观的选择必须慎之又慎。&lt;/li&gt;&lt;li&gt;即使设计者无意传递价值观，但就如我在上文中提到的，我们早已处于现实的文化语境中，有些符号或对立结构是带有意识形态标签的（比如男与女的对立），玩家也有可能试图从中揣测设计者植入价值观的意图。设计者需要留心，自己游戏中的结构有没有在无意中传递出某种有风险性的价值观，或自己能够接受的价值观是否是当今的玩家群体难以接受的。如果因为这种事情而导致好游戏风评受损，那也太冤了。例如《活侠传》。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;736&quot; height=&quot;882&quot; src=&quot;https://image.gcores.com/19b206c6cc8575081d1b01039220e876-736-882.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt;&lt;h1&gt;三、游戏叙事的“好”有哪些维度？&lt;/h1&gt;&lt;p&gt;我们在第一节中提到了游戏叙事设计应该采用媒介的视角，而上一节的内容其实主要集中在媒介内容上，也就是游戏本身的内容上。我们已经从虚构层、故事层两个角度总结出好游戏媒介内容要满足的几个条件了：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;符号的之间的联系与对立关系清晰，并且在作品内外的文化语境中的联系与对立关系也足够清晰，并且这种联系与对立非常契合游戏规则中的联系与对抗，这样的符号体系构成的虚构层便非常易于理解，也会呈现给玩家一种简洁、准确、又似乎能包罗万象的优美。&lt;/li&gt;&lt;li&gt;游戏按一定叙事顺序/叙事方式呈现符号，清晰地呈现出它们的关系与意义。并在这个过程中配合玩法持续地影响玩家的情绪，使其上忽下、起伏不定，持续地吸引住玩家，使玩家产生代入感、沉浸感。&lt;/li&gt;&lt;li&gt;（如果有故事的话）故事的核心矛盾，也就是核心的结构，贴合虚构层的总体结构，也就是贴合着游戏玩法，将故事的呈现自然地嵌入游戏流程当中。&lt;/li&gt;&lt;li&gt;（如果有故事的话）游戏中的符号既非常符合呈现玩法信息的要求，又非常符合呈现故事信息的要求。使故事的主题展现自然地嵌入玩家游玩游戏的体悟中，角色在故事压力下的抉择对应着玩家在规则压力下的选择，角色成长魅力的呈现贴合着玩家在玩法中的成长，让游戏带给玩家的情绪变化自然在故事高潮的力量中上升为情感的变化。在这种情况下，游戏的高潮将震撼玩家，从而让玩家与游戏产生情感链接。&lt;/li&gt;&lt;li&gt;审慎地植入价值观，确保游戏中呈现出的价值观是玩家群体能够接受的。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;但游戏这一媒介处于一个极其复杂的外部环境中，达成了上述条件只是游戏叙事被评判为“好”的基础。&lt;span style=&quot;font-weight: bold&quot;&gt;游戏的叙事内容还需要：&lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;在产业中，经历项目内部的、公司内部的、发行商的评判。&lt;/li&gt;&lt;li&gt;在流媒体平台中进行宣发，经历平台用户的打量。&lt;/li&gt;&lt;li&gt;随后经历发售平台、国家制度的审核。&lt;/li&gt;&lt;li&gt;发售后，经历玩家的体验与评价。&lt;/li&gt;&lt;li&gt;形成玩家社区后，在玩家反复的二次创作中不断经受提炼与审视。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;可以说，要闯过以上众多难关，最终形成一个好的风评，才能被称作为“好”。这么看来，这简直是地狱难度。我试图在这里再额外提供一些“好”的维度参考，以帮助大家的叙事内容渡过上述难关。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;商业性&lt;/span&gt;&lt;/li&gt;&lt;li&gt;我想没有游戏开发者会认为这是一个不重要的维度，所以我必须把它列在这里。但这个维度很宽泛也很概括，与其看我这个失业小文案夸夸其谈，感觉不如去问Deepseek。我就不耍大刀了。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;创新性&lt;/span&gt;&lt;/li&gt;&lt;li&gt;玩家渴望着新的叙事体验，而行业也渴望着新的前进方向。游戏的叙事内容在满足上述五个条件后，如果还具备创新性，那不可能不受到欢迎。&lt;/li&gt;&lt;li&gt;叙事创新最终体现在能否让玩家感叹：“原来游戏故事还能这样讲”。 真正有价值的叙事创新应满足下面两个条件：&lt;/li&gt;&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;提供前所未有的体验，能在玩家认知中建立新范式。例如《黑暗之魂》的碎片叙事。&lt;/li&gt;&lt;li&gt;激发行业模仿与迭代。例如《极乐迪斯科》的对话呈现方式。&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;而在上文的虚构层、故事层的逻辑下，我觉得从下面这两个方面探索可能更易实现叙事创新，给大家作为参考：&lt;/li&gt;&lt;li&gt;虚构层与游戏规则更深层次的结合。例如《巴别塔圣歌》。例如《1001夜》 探索基于对话AI的创意叙事游戏玩法 。&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt; &lt;a href=&quot;https://www.1001nights.ai/zh&quot; target=&quot;_blank&quot;&gt;首页 | 1001 Nights&lt;/a&gt; &lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;叙事顺序/叙事方式的创新。例如《十三机兵防卫圈》的网状叙事。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;社群话题性&lt;/span&gt;&lt;/li&gt;&lt;li&gt;在平台时代，玩家的评价越来越决定一款游戏的生死，玩家社区的活跃程度也越来越决定一款游戏的生命周期。所以我会建议在叙事设计时便尽可能考虑当代玩家的需求，考虑创造社群话题性。&lt;/li&gt;&lt;li&gt;如果游戏的叙事能够在宣发时在玩家社区中创造有积极影响的话题，可能会帮助游戏的销量提升一个数量级，例如《幻兽帕鲁》《米塔》。&lt;/li&gt;&lt;li&gt;如果游戏的叙事内容留有足够的空间供玩家长期挖掘话题，那么便可以形成良好的二创生态，极大提升玩家留存率和游戏影响力的持续时间，例如东方Project、《碧蓝档案》。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;艺术性/审美价值&lt;/span&gt;&lt;/li&gt;&lt;li&gt;我在之前的文章中抨击了完全将游戏作为个人表达艺术来创作的方式，但那是在罔顾游戏团队创作的形式、罔顾游戏本身性质与设计原理的前提下。而一个游戏作品如果只是纯粹的文化工业的产品，那再成功的商业成绩也只会让它在历史的长河中昙花一现。只有艺术性能让游戏叙事超越时代的限制，为代代的玩家带来超越时代的审美体验与感动。&lt;span style=&quot;font-weight: bold&quot;&gt;艺术性仍旧应该作为叙事设计的最高追求。&lt;/span&gt;&lt;/li&gt;&lt;li&gt;那什么是艺术性呢？我采用了张世英先生在《哲学导论》中的回答：&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;以有限表达无限，或者说，以有限超越有限。&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;一个游戏作品超越有限的程度，决定了它的艺术性的强弱，也决定了它审美价值的高低。&lt;/li&gt;&lt;li&gt;在这样的理解下，游戏叙事需要追求在有限的内容中，传递超越无穷时间、无限空间的感动与哲思，去折射我们的“生活世界”，去叩问我们这样渺小的生命在这样的无穷和无限当中，有着怎样的意义和出路。我想，这就是《蔚蓝》《星际拓荒》为什么伟大的原因。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;736&quot; height=&quot;890&quot; src=&quot;https://image.gcores.com/5188a9a8b2cfffede53a7f048305e33e-736-890.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt;&lt;h1&gt;四、如何落地游戏叙事设计？&lt;/h1&gt;&lt;p&gt;在开始这一部分之前我必须声明，游戏叙事设计没有标准流程。&lt;/p&gt;&lt;p&gt;我下面提供的只是基于上文中对游戏叙事认识的理想化的流程。而项目需求是千变万化的，开发实际也是千变万化的，每个人擅长与不擅长的部分也千差万别。对于游戏叙事的设计者来说，什么是媒介视角？就是既要尊重叙事理论，也要尊重开发实际，尊重团队创作的形式。&lt;/p&gt;&lt;p&gt;所以，所有的流程一定开始于与团队成员的沟通。请在理想化的流程的基础上，在开发过程中积极探索适合自己团队的工作流。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-style: italic&quot;&gt;注意：以下故事相关的术语皆来自于罗伯特·麦基《故事》，这里限于篇幅，便不展开解释一些故事相关的原理了。而我会向任何想要学习故事写作的人推荐这本书。&lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;前期准备&lt;/span&gt;&lt;/li&gt;&lt;li&gt;首先了解大家期望本项目的叙事要达到什么效果，跟团队一起确定本项目叙事的主要目标。&lt;/li&gt;&lt;li&gt;与团队成员沟通，了解大家对叙事的认知程度，以及对本项目叙事内容的一些愿景。尤其需要与美术、音频沟通，了解他们的风格，以及他们希望在本项目中创作什么。&lt;/li&gt;&lt;li&gt;尝试统合大家的想法与灵感，做一些取舍。一起配合玩法的设想拟定一个大概的叙事方案，初步设想虚构层风格与结构，一些核心的符号。设想一些故事层的要素，例如主要的叙事顺序与叙事方式，设想主角形象，以及确定需不需要故事等。&lt;/li&gt;&lt;li&gt;与相关岗位的团队成员商量好对接的流程，初步建立起工作流。如果在建立工作流的过程中，感到大家对叙事的认知水平有差距，或还没有对本项目的叙事达成较为统一的认知，可以根据需要将叙事目标和初步设想总结为一份叙事规范，并在叙事规范中科普一些叙事相关的知识。然后用生命去逼迫大家仔细看这份叙事规范。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;确定虚构层结构，与核心符号&lt;/span&gt;&lt;/li&gt;&lt;li&gt;确定好核心玩法后，需要确定下虚构层结构，与核心玩法相关的符号。例如在一个攀登模拟游戏项目中，确定好玩家扮演的主角是什么？他利用什么攀登？攀登的是什么？往下是什么？往上又会见到什么？&lt;/li&gt;&lt;li&gt;确认上述内容后，实际也就基本定下了项目的叙事风格，可以再次与美术、音频对接，看他们是否能接受这样的风格。可以与美术、音频协商，创作一些早期的概念设计，进一步统一团队成员对项目的想象与愿景。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;确定叙事顺序与叙事方式&lt;/span&gt;&lt;/li&gt;&lt;li&gt;与负责玩法的策划确定预期的游戏流程长度，以及流程中是否有重要的节点需要叙事配合。配合预期的玩法流程确定需要采用的叙事顺序，搭配相符的叙事方式。再次与负责玩法的策划沟通，尽力让叙事顺序与叙事方法更好地融入流程。例如在攀登模拟游戏项目中，确定好需要故事配合玩法，而预期的流程长度为一个小时，那故事便只能是短篇；流程为关卡制，有关卡切换，可以配合关卡切换设计场景变化、时间变化等符号的变化；关卡中有休息点，可以作为主要的叙事节点，在休息时用自由选择对话、演出的方式呈现故事；而可以在关卡中穿插一些Bark来连缀叙事表现。&lt;/li&gt;&lt;li&gt;这一个部分是最有创新空间的部分，也是再往下推进后就难以回头修改的部分，可以多花一些时间在这里迭代。&lt;/li&gt;&lt;li&gt;如果项目不需要故事的话，便可以直接跳跃到确定角色设计的步骤了。如果项目甚至不需要角色的话，便直接跳跃至丰富世界观设定的步骤了。如果项目甚至不需要世界观，那可以直接建立并维护叙事符号库，然后开始最后的具体的文本设计了。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;确定故事矛盾、故事结构&lt;/span&gt;&lt;/li&gt;&lt;li&gt;如果项目需要故事的话，务必先配合以上两个步骤的结果，先确定好故事的矛盾，也就是故事的结构。例如在攀登模拟游戏项目中，向上和向下的对立是虚构层最核心的结构，那便可以将向上和向下确定为故事的核心矛盾之一。思考向上和向下在故事中分别代表着什么，我们在故事中是希望主角最终选择向上？还是向下？主角配合着玩法流程在故事的结局该是一个什么样的状态？这种矛盾结构是否缺乏内涵，是否需要再加入一对矛盾丰富故事的内涵？&lt;/li&gt;&lt;li&gt;这个过程也建议反复迭代。&lt;/li&gt;&lt;li&gt;而在流程大致确定的情况下，故事的结构确定下来，实际也就基本确定下来了主角的成长弧光，以及项目想要传达的主题。这时需要再次与团队成员沟通，初步设想主角形象，初步设想故事开头、故事高潮、故事结局时的情景。&lt;/li&gt;&lt;li&gt;请美术老师为上述情景画一些简单的故事板，再请音乐老师配合故事板做最初的配乐demo。不要吝啬这些工作量，这其实是再次统一团队成员对项目的想象与愿景的过程。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;确定角色设定&lt;/span&gt;&lt;/li&gt;&lt;li&gt;在初步的主角设想的基础上，确定好主角的各种设定。包括外观、性格与气质、背景故事、成长弧光等。确定好主角相关的符号，向美术提出正式的人设需求，并配合美术对人设进行反复迭代，直至最终定稿。&lt;/li&gt;&lt;li&gt;可以视需求的优先级陆续设计其他角色。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;构建故事大纲&lt;/span&gt;&lt;/li&gt;&lt;li&gt;初步定下故事的高潮，再从故事的高潮反推整个故事，逐步写下故事大纲。我建议一定要从高潮反推，高潮对游戏故事的重要性不言而喻，而只有这种方式才能保证高潮的质量。要尽可能避免《咒术回战》的下场。&lt;/li&gt;&lt;li&gt;故事大纲尽可能以幕、序列、场景的卡片结构构筑，此时至少要精确到序列，并尽可能精确到一些重要的场景。这里的场景并不是指游戏场景，而是指的是剧作理论中包含一个价值变化事件的剧本单位。而标注出激励事件、幕高潮、序列高潮。然后再反复迭代。&lt;/li&gt;&lt;li&gt;请再次与团队成员沟通并对大纲达成共识。而如果美术有余力的话，请在不受伤的前提下继续逼迫他们根据大纲自由创作一些故事板。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;丰富世界观设定&lt;/span&gt;&lt;/li&gt;&lt;li&gt;与美术一同丰富世界观设定，为游戏在世界观设定的组织下加入更多的符号，为后续的UI设计、场景设计等工作提供支持。&lt;/li&gt;&lt;li&gt;视项目需求，为美术提出一些正式的概念设计的需求，并帮助美术迭代概念设计。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;细化故事大纲至细纲&lt;/span&gt;&lt;/li&gt;&lt;li&gt;细化故事大纲，直至精确到场景。如果可以的话，标注出每个场景中故事的价值变化，看看是否能对应上玩法上的价值变化。继续迭代细纲。&lt;/li&gt;&lt;li&gt;在迭代细纲的过程中，根据故事需要，细化各种之前的步骤中没有来得及完成的设计。例如配角的设计、场景的设定、怪物的设定等。这个过程中，也需要反复与团队成员达成共识。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;建立并维护叙事符号库&lt;/span&gt;&lt;/li&gt;&lt;li&gt;如果项目的符号较多，便需要建立一个专门的文档，画出虚构层的结构、故事的结构。并统计上述步骤中使用到的一些主要的符号，标明它们的意义，它们的关系。在来得及更改的情况下，可以尝试精简符号。&lt;/li&gt;&lt;li&gt;再次与团队沟通，并就这份文档达成共识。这份文档的主要目的是为了给美术、音频在进行设计时提供符号选择上的参考，保证虚构层的优美。请在符号有更改时及时维护这份文档，并通知相关团队人员。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;具体的文本设计与迭代&lt;/span&gt;&lt;/li&gt;&lt;li&gt;到这一步不同项目的需求就完全不一样了。但无论如何，积极主动地与团队成员沟通，协助他们的设计工作，并保证团队对叙事内容达成共识都是必不可少的。这一切的努力都是为了实现优美的虚构层，若在团队没有共识的情况下进行开发，便常会出现美术画出的一些元素不太好融入现有的符号体系当中去的情况，这样的元素增多便会使虚构层显得松散，甚至影响世界观的可信度，从而影响到玩家的沉浸感。&lt;/li&gt;&lt;li&gt;同时，迭代也是必不可少的。相信最开始的灵感一定不是最好的选择，经得起审视的艺术是在打磨中练就的，或者会在打磨中变得更好。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我在这里放上攀登模拟游戏项目的叙事设计文档。它比较细致地展示了我从无到有构建叙事框架的过程，可以供大家参考。当然，当时的我一定还有做得不够好，或者做得不好的地方（比如对白），大家也可以当做反面案例。&lt;/p&gt;&lt;blockquote&gt; &lt;a href=&quot;https://coffee-ozraraptor-e96.notion.site/188f588b1c638010a204c5b71f8497be&quot; target=&quot;_blank&quot;&gt;《伊卡洛斯之旅》叙事设计&lt;/a&gt; &lt;/blockquote&gt;   &lt;figure&gt;&lt;img width=&quot;736&quot; height=&quot;895&quot; src=&quot;https://image.gcores.com/f81b1b7c7a38e15e385d3ec92de140a3-736-895.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h1&gt;结语&lt;/h1&gt;&lt;p&gt;以上内容仅是我个人对游戏叙事认知的阶段性总结。 我利用媒介学、游戏学、叙事学、符号学、结构主义、故事原理的一些知识搭起了我自己的认知框架。我认为这当然不是真理，我将它分享出来，只是希望抛转引玉。我非常欢迎大家来提出自己的见解、指出我的不足之处。 &lt;/p&gt;&lt;p&gt;游戏叙事这片土地本就没有标准答案。有人用《最后生还者》证明线性叙事的生命力，有人用《极乐迪斯科》展现文本深度的可能性，也有人用《动物森友会》诠释&quot;无剧情&quot;中的叙事魔法。我们像在不同山径上攀登的旅人，最终都在用自己的方式丈量游戏叙事的维度。&lt;/p&gt;&lt;p&gt;我们搭建认知框架的意义，或许就像工匠打磨自己的工具——不是为了雕刻出完美无瑕的雕像，而是为了让每一次下刀都更稳、更深、更贴合游戏的肌理。当方法论在实践中反复淬炼，当个人经验与集体智慧不断碰撞，我们或许终将触摸到那个本质：好的创作不是对理论的刻板复刻，而是让知识沉入潜意识，再随着创作者的生命体验自然流淌的过程。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;736&quot; height=&quot;903&quot; src=&quot;https://image.gcores.com/860428a5285f7d2502ed9a234eca385c-736-903.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt; </description><link>https://www.gcores.com/articles/194189</link><guid isPermaLink="false">gcores-194189</guid><pubDate>Mon, 03 Feb 2025 01:02:49 GMT</pubDate><author>木鱼鱼鱼鱼鱼鱼</author><enclosure url="https://image.gcores.com/98b4aadab80aa6319c914a0fba8610a8-1275-718.jpg" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/98b4aadab80aa6319c914a0fba8610a8-1275-718.jpg"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/1b45c7b8-67fb-4d9f-acf3-87b26bd835e8.mp3" length="3282" type="audio/mp3"></enclosure><itunes:duration>0:54:42</itunes:duration><category>创作笔记</category></item><item><title>《艾尔登法环》驱暗地下墓地拆解</title><description>&lt;figure&gt;&lt;img alt=&quot;《艾尔登法环》驱暗地下墓地拆解&quot; src=&quot;https://image.gcores.com/40b26a9c8a4ce23762e1317dd80bf9d8-853-480.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/8b670a4b-4c60-4386-9281-2a5ac2530ced.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/8b670a4b-4c60-4386-9281-2a5ac2530ced.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/8b670a4b-4c60-4386-9281-2a5ac2530ced.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;引入新玩法，到场景玩法相结合的轻量关卡&lt;/blockquote&gt;   &lt;p&gt;本拆解由Sprout和蓝小柚联合完成@蓝小柚&lt;/p&gt;&lt;p&gt;一、  关卡介绍&lt;/p&gt;&lt;p&gt;驱暗地下墓地是尔登法环dlc中作为两个区域的连接枢纽。它的位置是从幽影城打完黄金河马后从城底积水处一路向西南方向前进，跳下两处悬崖石碑，它也是前往颠火森林的入口。由于进入墓地中一片漆黑，需要在黑暗中一边杀怪一边点灯，还要面对大炮的袭击，因此这个墓地也是玩家的噩梦。&lt;/p&gt;&lt;h1&gt;二、  地图总览&lt;/h1&gt;&lt;p&gt;整个地下墓地由三部分组成，地下一层和二层地图都呈环形，地下三层则有一个大炮正面攻击。每一层的连通度都很高，由于每一层都有中庭，玩家在墓地中探索时，每经过一个封闭空间都会重新回到一个视觉上能看到中庭的位置，因此玩家可以在前进过程中定位到自己的位置，比本体鬼打墙的地下墓地识别性高很多。&lt;/p&gt;&lt;p&gt;（地图的比例尺寸均经过测量，和游戏中大致相同。灰色部分为玩家可达区域，三种颜色的灰度分别代表了三种高度，灰色为玩家到达该层的高度，浅灰则是相对高处，深灰则是相对低处。黑色是中庭部分，中庭是中空悬崖，若不慎跌落则判定死亡。黄色三角形为赐福点，蓝色圆圈是宝箱，蓝色方块是宝箱，红色的×是怪的位置，绿色标记是梯子，紫色标记是每层楼开灯的开关，楼梯的箭头方向表示按主路探索前进时楼梯向下或者向上的方向）&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;地下一层&quot; width=&quot;1304&quot; height=&quot;1437&quot; src=&quot;https://image.gcores.com/c5153ec60a6cb9b434b3415ae5c45c25-1304-1437.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;地下二层&quot; width=&quot;1223&quot; height=&quot;1432&quot; src=&quot;https://image.gcores.com/954802dcdab5890a3ba0d7bf7ee27aeb-1223-1432.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;地下三层&quot; width=&quot;2041&quot; height=&quot;1640&quot; src=&quot;https://image.gcores.com/1075628b4c8ba712e76da46f193311d2-2041-1640.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;地下四层&quot; width=&quot;289&quot; height=&quot;876&quot; src=&quot;https://image.gcores.com/c8ddd8ecf6cc4c048df9ab47827dd1aa-289-876.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt;&lt;h1&gt;三、玩法解析&lt;/h1&gt;&lt;p&gt;驱暗地下墓穴是老头环中，第一次将机关与场景灯光结合在一起的关卡，通过打开机关，改变场景光线（获取的信息量不同），来改变关卡的整体结构（信息量不足时，很多结构容易被忽略），这个做法如同关卡《沉水礼拜堂》（即机关开启前路线较为线性，机关开启后关卡结构改变，有更多可探索内容，让玩家感到新奇）。&lt;/p&gt;&lt;p&gt;此前地下墓穴的机关大多代表着”打开某个门“，这里使用方式做了个修改，也算是复用，若还希望打造与“驱暗地下墓穴”和“沉水礼拜堂”一样玩法的关卡，则可以同样在视觉上做文章，通过机关改变灯光朝向，灯光正在照射的路才是可以通过的路（某个地下墓穴有用照射光做过文章），这样让玩家在几条预设路线中自行修改，探索，玩家也会觉得有自主权。&lt;/p&gt;&lt;h1&gt; 四、 区块空间分析&lt;/h1&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;地下一层&lt;/span&gt;&lt;/p&gt;&lt;p&gt;通常法环的地下墓地中，都会有一个临近火点的怪①。这个怪通常代表了这个地下墓地中会出现的最普通的怪的类型和攻击方式，类似于给玩家一个预告。——给玩家建立的预期&lt;br&gt;玩家会被尽头的道具所吸引，拾取道具时会被后方的怪物偷袭。晦暗的场景和偷袭的怪物都在强调——该墓穴非常危险，探索需谨慎。（建立共识）&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1983&quot; height=&quot;1068&quot; src=&quot;https://image.gcores.com/3bae1490972c1f71538296ffd72115d5-1983-1068.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1304&quot; height=&quot;1437&quot; src=&quot;https://image.gcores.com/4a516fca9e3b5f4e7410ccec74abe588-1304-1437.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;随手玩家返回时发现通往下方的道路，给予玩家惊喜的同时再给玩家树立目标，加入了玩法变量。&lt;br&gt;玩家进入到第一个观察平台后，能在漆黑的环境下看到一个光亮位置有一个机关②。由于一片漆黑，所以玩家看不到远处任何空间或道路，只能向这个机关前进，树立玩家短期目标。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1973&quot; height=&quot;931&quot; src=&quot;https://image.gcores.com/58d56808cca826ae0c85c45f61087d50-1973-931.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1304&quot; height=&quot;1437&quot; src=&quot;https://image.gcores.com/e4140aa4de43a475ba18bde1935dfe3b-1304-1437.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;该机关位处于隐藏门③后，较为隐蔽，但设计师又希望玩家优先打开机关，于是又加入了二次引导（光线引导）。&lt;br&gt;问题来了，此前没有给玩家建立过，打开机关=场景变亮 这么一个机制的认知（引导不到位）&lt;br&gt;玩家在心里对于机关的优先级并不是最高的。这样一来玩家的动线就变得有些不可控了（开不开机关明显是两条动线）&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1918&quot; height=&quot;949&quot; src=&quot;https://image.gcores.com/0f2c2a5d2fa02538f6447181e17e9796-1918-949.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1931&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/40370b4ca877e1d7ba81ce5ff2f69515-1931-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1304&quot; height=&quot;1437&quot; src=&quot;https://image.gcores.com/052919e26dcce0542d823939bbc24f91-1304-1437.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在玩家下楼梯的过程中，会被通道口的小炮台怪④给吸引，随后来到观察点⑤，能再次看到被点亮的机关，给玩家二次强调这个机关的位置，引导玩家回去刚刚的空间发现隐藏门③，并开启机关，点亮这层的空间。&lt;/p&gt;&lt;p&gt;假设我们优先找到了隐藏门的位置并打开了机关，那么玩家会优先获得的信息是有条小路可以通往未知，吸引玩家前往。玩家通过先前的观察点⑤跳到小路⑥，即可到刚刚的未知夹层，获取宝箱，这算是给玩家的解开机关谜题的一个奖励。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1954&quot; height=&quot;964&quot; src=&quot;https://image.gcores.com/06b2117f26ab8ec8c90fc66f7fbae63e-1954-964.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1304&quot; height=&quot;1437&quot; src=&quot;https://image.gcores.com/ce21ce2d06c35e100c754029ca85873b-1304-1437.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;打开宝箱后玩家的视线被锁定在通往下个楼层的道路上（玩家不知道道路通往下个楼层，但视角问题，他会知道这有条路）&lt;br&gt;于是乎中间部分黑暗的场景+怪物会被玩家忽略掉（复用率不高），若玩家优先探索中间的部分，则一定会走回头路（体验不好）&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;2010&quot; height=&quot;981&quot; src=&quot;https://image.gcores.com/34c8677ad26161cc126c3b4fe3c22aa3-2010-981.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1304&quot; height=&quot;1437&quot; src=&quot;https://image.gcores.com/60f01136832429f236cc46048d7b61e0-1304-1437.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;若玩家优先向下探索（不开开关），则玩家容易忽略掉上述的宝箱，这样做问题倒还不大，玩家会觉得是因为自己的马虎导致遗失物品，同时在之后获得时也会有较好的体验。但会导致设计师仍未把 &lt;span style=&quot;font-weight: bold&quot;&gt;开机关=点亮地图&lt;/span&gt;，这么一个逻辑教给玩家。后续的体验会更加不可控。&lt;br&gt;玩家可以一路狂飙莽过关卡（充分体验战斗，但关卡设计的意义就不大了），也可以慢找机制，地毯式的推过关卡。但这种体验的优先级应该由设计师建立，同时也要最高程度地保证资源不浪费（复盘时的思考，设计时只会考虑落地要消耗多少资源）。 &lt;/p&gt;&lt;p&gt;随后我们前往二层。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;地下二层&lt;/span&gt;&lt;/p&gt;&lt;p&gt;来到观察点⑨，此时我们还无法看到黑暗空间中的机关亮光，此刻左边的路线⑩（黄色）更近且更明显，走左边的路会被小怪吸引，攻击小怪时会被头上的老法师⑪阴，逼迫玩家向红色箭头方向前进。这里明显是设计师刻意为之，刻意给玩家制造烦恼，加深印象，留下伏笔。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1958&quot; height=&quot;970&quot; src=&quot;https://image.gcores.com/af8bc799c6b584c27f5ce4e922471fab-1958-970.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1223&quot; height=&quot;1432&quot; src=&quot;https://image.gcores.com/3a6060752304b14ef56a69ac45aee5f0-1223-1432.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;玩家向右侧道路前进时，蜡烛亮光才会显示出来，这里很明显地用蜡烛高光告诉玩家——那有个机关，要先找到机关去点亮场景。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1942&quot; height=&quot;952&quot; src=&quot;https://image.gcores.com/232f1447c017fc2a06a57611bc76ce72-1942-952.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;玩家前进时会发现前方有个空间可以进去探索，走到尽头时会被扒在柱子上方的小怪袭击，这里就会迫使玩家向后看，看到前一根柱子背面有个向上的梯子⑫，这里能进入二层夹层，通往开开关的空间。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1592&quot; height=&quot;911&quot; src=&quot;https://image.gcores.com/4b8e3488e132944a6201959192f684a9-1592-911.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1223&quot; height=&quot;1432&quot; src=&quot;https://image.gcores.com/ebad4d413bbf45b4e51b0ce3a020ff68-1223-1432.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;点亮机关，场景高亮之后玩家会发现对面有梯子A⑬，通过梯子可以解决刚才阴我们的法师，并且获得一定量的奖励，同时从解决法师的屋子出来时，在先前的观察点⑨，我们会在对面发现第二个梯子B⑭（这点更关键）让玩家产生好奇心，吸引玩家探索。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;2021&quot; height=&quot;969&quot; src=&quot;https://image.gcores.com/29d99d2ac47e5f7a1d5d7dd91843669f-2021-969.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1323&quot; height=&quot;922&quot; src=&quot;https://image.gcores.com/c0dfcc8dbbf34007533a7c53e1b3ad45-1323-922.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1223&quot; height=&quot;1432&quot; src=&quot;https://image.gcores.com/2b3a409cfa58969c90c2e84e06ba712a-1223-1432.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;此时玩家就可以按照既定的路线，拿完这层的所有奖励并直接通向下一层。&lt;/p&gt;&lt;p&gt;但此处的问题是玩家会发现还有一部分区域⑯没有探索，玩家需要走大量的回头路才能将地图在脑内打通，并且这部分回头路并没有同等价值的奖励（区域⑯内没有高价值奖励），不及玩家预期。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1223&quot; height=&quot;1432&quot; src=&quot;https://image.gcores.com/4d5c288d2daa0cfa903460f310b0526f-1223-1432.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;若玩家没有发现梯子，径直沿道路向下探索，会发现有个地方去不了，有个奖励拿不了，成功引起玩家好奇心，我们称之为盲点A。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1680&quot; height=&quot;895&quot; src=&quot;https://image.gcores.com/b983342e6f5ab8692a29608aafab4c2b-1680-895.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1223&quot; height=&quot;1432&quot; src=&quot;https://image.gcores.com/13d709729f4d6a0e7875ef1de0f2204b-1223-1432.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt; &lt;/p&gt;&lt;p&gt;从设计的体验上来可以反推，梯子A的主要价值是为了让玩家发现梯子B，获得一次回环体验（探索与否都行），梯子B的价值是快速到达下方获得道具（战斗压力较低，但较隐蔽）。&lt;/p&gt;&lt;p&gt;总结这一层有两种动线：&lt;/p&gt;&lt;p&gt;1.  若玩家在第一次探索时就发现了梯子B，则可以用短距离高回报的方式结束这一层的主要内容探索。但若玩家好奇剩下的区域⑯内容，则需要走长距离的低回报回头路，主要以战斗为主。这块区域玩家可以选择不去，但关卡中并没有提示两个区域的权重。&lt;/p&gt;&lt;p&gt;2.  若玩家在第一次探索时没有发现梯子B，则可以在有探索目的驱使下，回去寻找盲点A的位置，从而发现梯子B。最好的办法是在玩家第一次探索发现盲点A时死亡，强迫玩家去发现梯子B。（加强盲点A后的战斗强度即可达到目的）&lt;/p&gt;&lt;p&gt;不难看出，二层相对于一层是做了体验强化的，给了更完整的谜题以及更好的体验。但后续的体验越好，前期的问题越明显。若玩家在一层是莽过去的，没有建立起拉机关=点亮场景的共识，后续的设计则全为徒劳。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;地下三层&lt;/span&gt;&lt;/p&gt;&lt;p&gt;到了三层，玩家会迎头碰上高台上的大炮兵，需要点亮机关后将其击杀。这里的体验以及设计都比较明显，故不加以讲解。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1961&quot; height=&quot;961&quot; src=&quot;https://image.gcores.com/5d183e759043c3c555c99501ff3a803e-1961-961.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;一二三层用的都是相似的机制，但一层偏向于解密和机制教学，二层是深化解密，三层是战斗变奏（直接拉高了紧张强度），以一个强烈的机制+战斗作为结尾，从而结束关卡，符合峰值效应。&lt;/p&gt;&lt;h1&gt;总结&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;1.&lt;/span&gt; &lt;span style=&quot;font-weight: bold&quot;&gt;关于引导&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;手机游戏是非常卷教学的，教学的越好受众越多，在国内手游教学已经到了胎教基本的如今，在关卡上的教学也应当更为细腻。而驱暗地下墓穴的机制教学就还差一些，若在玩家刚进入纯黑关卡时就引入机关，在玩家心里建立 “拉机关=点亮场景”的认知，则整体体验会更加可控，也更好玩一些。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;2.并非所有回头路都没有意义&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在我们的关卡推演中，是需要玩家分一次探索和二次探索的，如何让玩家在推进一次关卡时完成一次探索和二次探索呢？（即如何让玩家回到原点）&lt;/p&gt;&lt;p&gt;本关卡是采用加强战斗强度，让玩家死一次的思路（简单粗暴，成本低，但更为不可控）。净身小教堂是以篝火点为中心做了个四通八达的关卡（成本巨高无比，可控，但无法批量生产）&lt;/p&gt;&lt;p&gt;在玩家有目的性进行二次探索时，回头路就有意义。玩家的脑中会自发性地充斥着“我到底哪里漏了”，而并非“这关卡路又臭又长”，是个很好拉长玩家游戏时间的想法。（但作为demo视频观感较为不好，云游戏和实际游戏是两个体验，代入感差距太大）&lt;/p&gt;&lt;p&gt;希望有机会将这种想法落地实践一下。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;3.关卡区域&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;驱暗地下墓地采用了电梯分层的方式，并且都围绕每层的中庭进行探索，增强地图辨识度，让玩家能更快定位在地图中的位置。通过点灯这一机制，加强玩家探索的驱动力和对地图的熟悉度。与艾尔登法环本体中的很多地下墓地不同，本体的地下墓穴多是层层向下，并且基本为线性走廊串联几个战斗空间，玩家只有一直被怪驱使向前探索的动机，对自己的位置和对地图的掌握并不清晰。而驱暗地下墓地有着更清晰的分层地图，每层对应一个关卡强度和节奏，可以让玩家完成一层探索时能有喘息的时间。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;4.关卡节奏&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;“引入机制、深化谜题、结合战斗”，很明显的三板斧。在做关卡时可以考虑使用一下这个套路。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt; </description><link>https://www.gcores.com/articles/193582</link><guid isPermaLink="false">gcores-193582</guid><pubDate>Wed, 22 Jan 2025 13:00:00 GMT</pubDate><author>Sprout_Schrub</author><enclosure url="https://image.gcores.com/40b26a9c8a4ce23762e1317dd80bf9d8-853-480.jpg" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/40b26a9c8a4ce23762e1317dd80bf9d8-853-480.jpg"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/8b670a4b-4c60-4386-9281-2a5ac2530ced.mp3" length="761" type="audio/mp3"></enclosure><itunes:duration>0:12:41</itunes:duration><category>知识挖掘机</category></item><item><title>Godot入门到弃坑：再见敌人</title><description>&lt;figure&gt;&lt;img alt=&quot;Godot入门到弃坑：再见敌人&quot; src=&quot;https://image.gcores.com/0f06022bf7b8722ab47d4f0413b7a384-1141-643.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;blockquote&gt;敌人又来了，还是你又来了&lt;/blockquote&gt;   &lt;p&gt; 之前在2D部分做过一个简单的敌人。这次在3D中又来做一个简单的敌人。 &lt;/p&gt;&lt;h2&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;敌人的表示&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;我们先来实现一些基本的功能，暂时不关心它的具体视觉表现。所以我简单地用一个胶囊表示就行了。当然你也可以导入一个3D模型什么的。&lt;/p&gt;&lt;p&gt;当然，如果你像我一样懒，只给了一个简单的&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;MeshInstance3D&lt;/span&gt;占位的话，那么记得再给它个什么东西表示他的前方。不然我们不好调试。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;738&quot; height=&quot;543&quot; src=&quot;https://image.gcores.com/6fbb8ad223a4757d5a248805a76ef207-738-543.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;根节点依然用方便的&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;CharacterBody3D&lt;/span&gt;，但是和玩家不同，就目前来说不需要给它摄像机。添加脚本即可。&lt;/p&gt;&lt;p&gt;由于我们不需要控制敌人，所以脚本模板中只需要留下重力相关的代码即可。&lt;/p&gt;&lt;h2&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;看向玩家&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;这里说的行为其实算是敌人AI的一部分。要实现敌人的AI，其实没那么简单。我们也没法在一篇文章中说完（可能“永远”也说不完）。我们先做一个看向玩家的功能。例如我们想要实现，“玩家离敌人只有5m的时候，就看向玩家”。&lt;/p&gt;&lt;p&gt;首先的问题是，如何判断和玩家的距离？&lt;/p&gt;&lt;p&gt;如果&lt;span style=&quot;font-weight: bold&quot;&gt;一定要&lt;/span&gt;计算两点之间的距离，我们应该使用&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Vector3&lt;/span&gt;的&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;distance_to&lt;/span&gt;或者&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;distance_squared_to&lt;/span&gt;来求得（毫无疑问&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Vector2&lt;/span&gt;也有对应的方法）。这是两个实例方法。后者会比前者快一些，后者计算的是没有开平方的距离。&lt;/p&gt;&lt;p&gt;两点距离是如何求得的？不要忘了，我们把点也视作向量。“AB间的距离”就是两点之间拉一个向量的长度。这个向量就是两点坐标之差。由于向量是有方向的，所以A-B得到的其实是从B指向A的向量。这里可能会显得反直觉，是需要注意的地方。当然，要计算的“距离”是一个标量，所以这里其实也不那么重要。&lt;/p&gt;&lt;p&gt;要推导出这个距离怎么算其实视角有很多，但是这里我肯定说中小学生都能理解的。在2D空间中，想象一条斜着的向量。这个向量在X轴上的投影（v），v末端和P的连线，构成了一个三角形。这个三角形斜边的长度——勾股定理知道吧？那你就会求向量长度了。两条直角边的长度恰好就是向量的两个分量。公式我就懒得打了，简单用伪代码表示就是&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;sqrt(x*x + y*y)&lt;/span&gt;，三维空间中也是一样，只不过是三个分量的平方和。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;721&quot; height=&quot;811&quot; src=&quot;https://image.gcores.com/4a0ed83a176c13cab233a35a2e40beb0-721-811.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这就是求准确距离需要开方的原因，如果你不需要那么精确，那么就直接用没开方的结果即可。由于我们这里明确知道是“5m以内”，那么直接&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;position.distance_squared_to(player.position) &amp;lt; 25&lt;/span&gt;即可。当然这里你需要用一种办法在场景中找到player，然后每帧做这个运算去检查。&lt;/p&gt;&lt;p&gt;然而，这里实际上不用真的去算这个距离。还记得&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Area&lt;/span&gt;吗？一个可以用来检查是否有可碰撞对象的没有实体的区域。在3D中我们同样有&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Area3D&lt;/span&gt;来做这个事情。为Enemy套上一个&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Area3D&lt;/span&gt;，给它一个shape然后调整到适当大小，连上&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;body_entered&lt;/span&gt;即可检查玩家是否进入！具体操作不赘述。&lt;/p&gt;&lt;p&gt;注意，实际上这里需要调整碰撞层让它不检查enemy自己，因为&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;CharacterBody3D&lt;/span&gt;本身也要参与碰撞的。这里请自行调整或者偷懒。&lt;/p&gt;&lt;p&gt;接下来要实现“看向玩家”。直接说结论，需要使用&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Transform3D&lt;/span&gt;的&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;looking_at&lt;/span&gt;方法。名字已经很直白了，就是要让这个transform“看向”某个点。第二个参数指定“上方”，用这个方向确定这个transform会绕哪个方向转过去。默认就是Y轴正方向（通常意义的上方），所以调用时可以省略。&lt;/p&gt;&lt;p&gt;现在&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Area3D&lt;/span&gt;的&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;body_entered&lt;/span&gt;信号的处理函数大致是这样：&lt;/p&gt;&lt;pre&gt;func _on_area_3d_body_entered(body: Node3D) -&amp;gt; void:&lt;br&gt;    if body is not FpsCharacter:&lt;br&gt;        return&lt;br&gt;    transform = transform.looking_at(body.position)&lt;/pre&gt;&lt;p&gt;为什么需要给transform赋值？因为&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;looking_at&lt;/span&gt;方法并不直接修改transform本身，它会返回一个新的&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Transform3D&lt;/span&gt;实例。&lt;/p&gt;&lt;p&gt;现在玩家进入Enemy的area时，敌人会一瞬间看向玩家：&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1152&quot; height=&quot;648&quot; src=&quot;https://image.gcores.com/f11ce58f882c8a3d443c9c6a3a7db3a7-1152-648.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt; &lt;/p&gt;&lt;p&gt;有被吓到。如果这是你想要的效果，那也行。但是你可能期望可以看到敌人转身，哪怕转身很快也要能看到这个过程感觉才真实。当然，这里也不是bug，因为你代码就是这么写的。我们就是在某一帧里直接设置了transform，所以这个变换肯定也是一瞬间完成。&lt;/p&gt;&lt;p&gt;如何解决？说白了，要达到这种效果，我们需要让这transform的这种变化，不在一帧中完成。但是我们只有起始值和最终值，如何获得在中间这些帧的值呢？&lt;/p&gt;&lt;p&gt;话都说到这个份上了，肯定就是要插值。&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Transform3D&lt;/span&gt;是一个相对复杂的数据结构，所以一般情况下不可能我们自己去插值。它提供了一个&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;interpolate_with&lt;/span&gt;方法来插值。第一个参数就是目标值，第二个参数为一个取值为0到1的值，就是说插值到哪里了。&lt;/p&gt;&lt;p&gt;先定义一堆变量：&lt;/p&gt;&lt;pre&gt;var turning = false&lt;br&gt;var turn_alpha = 0&lt;br&gt;var turn_time = 1&lt;br&gt;var turned_time = 0&lt;br&gt;var target_transform: Transform3D&lt;/pre&gt;&lt;p&gt;由于我们要在&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Area&lt;/span&gt;的信号响应函数中确定何时开始插值，因此目标transform要在这里确定，但是要在其它函数中使用。在处理&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;body_entered&lt;/span&gt;的函数中，我们不直接设置transform，只是确定目标并指出正在转向：&lt;/p&gt;&lt;pre&gt;func _on_area_3d_body_entered(body: Node3D) -&amp;gt; void:&lt;br&gt;    # ...&lt;br&gt;    if turning:&lt;br&gt;        return&lt;br&gt;    target_transform = transform.looking_at(body.position)&lt;br&gt;    turning = true&lt;/pre&gt;&lt;p&gt;在&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;_physics_process&lt;/span&gt;中，我们只有在&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;turning&lt;/span&gt;时才处理插值：&lt;/p&gt;&lt;pre&gt;func _physics_process(delta: float) -&amp;gt; void:&lt;br&gt;    # ...&lt;br&gt;    if turning:&lt;br&gt;        turned_time += delta&lt;br&gt;        turn_alpha = clamp(turned_time/turn_time, 0, 1)&lt;br&gt;        transform = transform.interpolate_with(target_transform, turn_alpha)&lt;br&gt;        if transform.is_equal_approx(target_transform):&lt;br&gt;            turning = false&lt;br&gt;            turned_time = 0&lt;br&gt;            turn_alpha = 0&lt;br&gt;    move_and_slide()&lt;/pre&gt;&lt;p&gt;实际上也不复杂。&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;turn_time&lt;/span&gt;是一个我们自行设计的值，也就是整个转身过程需要多长时间。&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;turned_time&lt;/span&gt;指的是已经转了多少时间了，每次进入&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;_physics_process&lt;/span&gt;时就给它加上时间。&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;turn_alpha&lt;/span&gt;就是两者之比，也就是插值进度，它会作为&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;interpolate_with&lt;/span&gt;的参数传入。当然这个中间变量是&lt;span style=&quot;font-weight: bold&quot;&gt;没有必要&lt;/span&gt;的，这里为了清楚写一下（题外话，如果编译器足够智能，可能就算这么写这个变量也会被优化掉）。&lt;/p&gt;&lt;p&gt;如果插值后发现当前transform已经和目标差不多了，那么就重置这些状态。&lt;/p&gt;&lt;p&gt;为什么不用等号？因为由于浮点数精度等问题，很难确定两者精确相等。如果在这里用等号，你会发现几乎不可能碰到两者相等的时候！但是！这里实际上不用比较transform，我们直接比较时间即可！简化后的代码：&lt;/p&gt;&lt;pre&gt;if turning:&lt;br&gt;        turned_time += delta&lt;br&gt;        transform = transform.interpolate_with(target_transform, clamp(turned_time/turn_time, 0, 1))&lt;br&gt;        if turned_time &amp;gt;= turn_time:&lt;br&gt;            turning = false&lt;br&gt;            turned_time = 0&lt;/pre&gt;&lt;p&gt;为了这个简单的插值操作我们定义了大量状态变量，如果我们需要控制很多插值，可能还要定义很多变量。&lt;/p&gt;&lt;p&gt;学完手动挡，我们还是开自动挡吧。&lt;/p&gt;&lt;p&gt;别忘了，我们还有Tween可以用。如果不需要那么精细地控制，我们可以直接用Tween来插值。用tween的话，我们就可以不用自己来计算时间和插值用的alpha（weight），很多代码又可以省掉：&lt;/p&gt;&lt;pre&gt;func _on_area_3d_body_entered(body: Node3D) -&amp;gt; void:&lt;br&gt;    # ...&lt;br&gt;    if turning:&lt;br&gt;        return&lt;br&gt;    target_transform = transform.looking_at(body.position)&lt;br&gt;    turning = true&lt;br&gt;    var tween = create_tween()&lt;br&gt;    tween.tween_property(self, &quot;transform&quot;, target_transform, turn_time)&lt;br&gt;    tween.finished.connect(func(): turning = false)&lt;/pre&gt;&lt;p&gt;当然这里保留了turning用以判断是否还在转身过程中。这里相关的行为可以根据游戏设计调整。当然，手动挡已经告诉你怎么开了，当你真的需要手动挡的时候，你应该知道怎么做。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1152&quot; height=&quot;648&quot; src=&quot;https://image.gcores.com/0100b61fdf6f8089a17467f2ce4cc6e8-1152-648.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt; &lt;/p&gt;&lt;h2&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;怎么杀死敌人？&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;在2D部分的文章中，为了实现玩家的HP特性，我们直接在玩家的脚本中定义了一个属性。同时由于那时的敌人不需要被击杀，所以它也没有HP。很多FPS中，玩家和敌人都会被击杀，所以双方一般都是有HP属性的。当然，对于玩家和敌人来说，可能受到伤害的代码都是类似的。&lt;/p&gt;&lt;p&gt;我们先设想一下如何实现对敌人进行攻击。&lt;/p&gt;&lt;p&gt;我们已经实现了通过计算射线和物体是否相交来判断能否击中某物。如果可以击中，我们就可以获得一个代表被击中物的collider，其类型为&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Node3D&lt;/span&gt;，我们知道，这是非常抽象的类型，它可以代表任意3D节点。&lt;/p&gt;&lt;p&gt;为了对被击中物施加伤害，我们首先要知道它&lt;span style=&quot;font-weight: bold&quot;&gt;是否可以接受伤害&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;我们如何知道一个节点是否可以受到伤害呢？根据我们对GDScript的了解，我们可以想到可以对它进行类型检查。假如我们在代表敌人的类上定义了一个hp属性，如果这个东西是敌人，那么肯定就可以操作它的hp，亦可以调用其它相关方法：&lt;/p&gt;&lt;pre&gt;# 只作为例子展示&lt;br&gt;func fire():&lt;br&gt;    # ...&lt;br&gt;    var result = get_world_3d().direct_space_state.intersect_ray(parameters)&lt;br&gt;    if not result:&lt;br&gt;        return&lt;br&gt;    var collider = result.collider&lt;br&gt;    if collider is Enemy:&lt;br&gt;        var e = collider as Enemy&lt;br&gt;        e.apply_damage(1)&lt;br&gt;        # ...&lt;br&gt;    # ...&lt;/pre&gt;&lt;p&gt;随着开发的进行，我们可能有多种不同的敌人，需要实现类似的处理伤害的功能，可以预见这些代码是雷同的。为了减少这种不必要的复制粘贴，我们可以为各种敌人定义一个共有的基类。这样在应用伤害时可以不用关心具体敌人。&lt;/p&gt;&lt;p&gt;这样的通用敌人基类的基类可能是&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;CharacterBody3D&lt;/span&gt;。但是，有没有可能我们的敌人不需要、甚至不应该继承&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;CharacterBody3D&lt;/span&gt;呢？比如它可能是一个载具或者其它什么东西，它们不利用&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;CharacterBody3D&lt;/span&gt;实现。&lt;/p&gt;&lt;p&gt;还有一种可能，一个东西会对攻击做出反应，但是它并不会被打死，因此它不需要一个hp什么的，它怎么能被当成敌人的子类呢？我们甚至不能操作它的hp！&lt;/p&gt;&lt;p&gt;你可能会想，我们用最抽象的Node来表示一种“可以被打”的东西，以此为基类，再构造一些略为具体的基类，最后再是真正直接使用的具体节点类。&lt;/p&gt;&lt;p&gt;想法不错。但是如果我们需要抽象出不止一种行为呢？比如载具既可以被攻击，也可以被“开”。如果它继承了一个可以被攻击的基类，那么它就不能再去继承另一个被开的基类了。&lt;/p&gt;&lt;p&gt;GDScript以及很多基于类的面向对象编程语言实际上都主动抛弃了多继承（可以同时有多个基类）来避免多重继承带来的一些问题。所以上述设想在GDScript中是没法实现的。&lt;/p&gt;&lt;h2&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;组合（可能）优于继承&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;那怎么办呢？既然我们知道可以把某种能力剥离出来，那么我们也就可以把它包装成一个单独的节点。Godot的节点树设计天然地让我们可以让一个节点作为根节点，让它带有若干子节点。这样一来这个根节点就可以利用这些子节点的能力来实现各种功能。并且，HP相关的数据、状态本身是不需要和视觉呈现交互的。把它（比如叫它HpComponent）作为一个Node的派生类来实现也是合情合理的：&lt;/p&gt;&lt;pre&gt;# HpComponent示例&lt;br&gt;extends Node&lt;br&gt;class_name HpComponent&lt;br&gt;&lt;br&gt;@export var MAX_HP: int = 100&lt;br&gt;var hp: int = MAX_HP&lt;br&gt;&lt;br&gt;signal damaged()&lt;br&gt;signal died(node: Node3D)&lt;br&gt;&lt;br&gt;func apply_damage(d: int) -&amp;gt; int:&lt;br&gt;    hp = clamp(hp - d, 0, MAX_HP)&lt;br&gt;    damaged.emit()&lt;br&gt;    if hp == 0:&lt;br&gt;        died.emit(get_parent())&lt;br&gt;    return hp&lt;/pre&gt;&lt;p&gt;当然，如此一来我们就无法直接从一个节点的类型上得到它关于这一能力的信息，因为现在和接受伤害相关的能力有关的属性和方法都在这个单独的子节点上。如果使用这种模式，为了检测一个节点“是否可以接受伤害”，我们需要做的是检查它身上是否有某个节点。&lt;/p&gt;&lt;p&gt;在Godot中可以使用&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;get_node&lt;/span&gt;和&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;get_node_or_null&lt;/span&gt;来获得对节点树中某个节点的引用。这两个方法唯一的区别就是前者在找不到指定节点时会发生错误并返回null，后者不会报错。这个节点本质上就等于用GDScript的语法糖来获得节点，就像我们在脚本中做过的那样。只不过，在我们需要检查来自另一个场景或节点身上有没有某个节点时，我们就要通过这个方法来操作：&lt;/p&gt;&lt;pre&gt;func fire():&lt;br&gt;    # ...&lt;br&gt;    if not result.collider:&lt;br&gt;        return&lt;br&gt;    var collider = result.collider&lt;br&gt;    var hp_component = collider.get_node_or_null(&quot;HpComponent&quot;)&lt;br&gt;    if hp_component:&lt;br&gt;        hp_component.apply_damage(1)&lt;br&gt;    # ...&lt;/pre&gt;&lt;p&gt;由于我们需要通过一个类似于字符串的参数来获得节点，所以说并不能保证这个过程一定成功。虽然说这种实现具体功能的节点我们可能一般就作为根节点的直接子节点（第一层），但是你必须要在开发过程中和自己以及所有开发参与者达成一致，不然的话可能你在某些能被伤害的节点上用HpComponent可以找到这样一个HpComponent节点，有些东西上又找不到了。另外，你还有可能给它改了名字或者打错字了什么的。所以很多时候用字符串当参数的约束力是很弱的，类型系统相比之下要安全很多。&lt;/p&gt;&lt;p&gt;当然这种模式的好处是显而易见的。我们可以在任意场景中加入这个HpComponent，不用管它们的继承关系，也不用关心具体类型，并且可以组合其它任意的功能。&lt;/p&gt;&lt;p&gt;当然，还有个问题没有回答，那就是万一这个东西根本不需要一个HP属性呢？&lt;/p&gt;&lt;h2&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;何必这么麻烦？&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;不要忘了，GDScript是一个足够动态的编程语言。我根本不需要关心你到底是哪种节点，甚至不需要关心你有没有某个子节点——只要你有叫某某的属性或者方法，我就可以调用之！&lt;/p&gt;&lt;p&gt;你可以在所有可以受伤害的节点上都定义一个&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;apply_damage&lt;/span&gt;方法，并且使用统一的参数列表。这样一来，不管被射线碰到的节点是什么，也不管它如何处理伤害，都可以通过这个方法来处理。&lt;/p&gt;&lt;p&gt;但是，不要忘了，如果这个被射线碰到的东西没有这个方法，那么就会报错。如果要利用动态语言的这一特性来实现，还是那句话，事先约定，保持一致。&lt;/p&gt;&lt;p&gt;针对这一问题，GDScript中&lt;span style=&quot;font-weight: bold&quot;&gt;可以&lt;/span&gt;通过&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Object&lt;/span&gt;的&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;has_method&lt;/span&gt;方法来检查一个节点（提醒：Node是Object的子类）上是否有某个方法。&lt;span style=&quot;font-weight: bold&quot;&gt;但是&lt;/span&gt;，在游戏运行时调用这种方法比直接调用会慢得多。&lt;/p&gt;&lt;p&gt;利用这种动态语言的特性来实现还有一个坏处就是，就算你的代码是完全正确的，由于类型不确定，编辑器无法给你提供代码补全的提示，出现打字错误的可能性更高。&lt;/p&gt;&lt;p&gt;因此，为了方便起见，我文章中的示例代码就定义&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;apply_damage&lt;/span&gt;方法，然后直接动态调用它就行了。&lt;/p&gt;&lt;p&gt;当然，如果我用C#来编写脚本，我不会这样做。但是如果你一定要问可不可以，那其实还是可以。但是那样就白瞎了C#带来的类型安全。&lt;/p&gt;&lt;h2&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;补充知识：这种仗，它们会怎么打？&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;这种对具体能力的抽象，对实现和接口的剥离，在“正经的”编程语言中一般就称为interface（接口），或者用苹果更喜欢的说法protocol（协议）表示。&lt;/p&gt;&lt;p&gt;这种抽象的接口定义了一系列方法（某些语言也支持定义属性），要求接口实现者（某个类），和接口使用者（通过接口操作某个对象的代码）达成一种协议。以Godot和Unity等引擎支持的C#语言为例：&lt;/p&gt;&lt;pre&gt;interface IDamageable&lt;br&gt;{&lt;br&gt;    void ApplyDamage(int d);&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;这样一来，&lt;span style=&quot;font-weight: bold&quot;&gt;承诺实现该接口的类就必须&lt;/span&gt;提供一个相应的方法定义，且&lt;span style=&quot;font-weight: bold&quot;&gt;任意类型&lt;/span&gt;均可实现该接口。射线检测到实现了这个接口的节点时，就&lt;span style=&quot;font-weight: bold&quot;&gt;必然&lt;/span&gt;能调用这个接口中定义的方法。这种确定性是C#作为一种（在绝大多数情况下都很）静态的编程语言的类型系统能够保证的。&lt;/p&gt;&lt;p&gt;很多现代的基于类的面向对象编程语言都是只允许继承一个类，但是可以实现多个接口。例如等价的Enemy可以去实现这个接口：&lt;/p&gt;&lt;pre&gt;public partial class Enemy: CharacterBody3D, IDamageable&lt;br&gt;{&lt;br&gt;    # ...&lt;br&gt;    [Export]&lt;br&gt;    public int MaxHp {set;get;} = 100;&lt;br&gt;    public int Hp {set; get;} = MaxHp;&lt;br&gt;    public void ApplyDamage(int d)&lt;br&gt;    {&lt;br&gt;        Hp -= d;&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;假设前面的fire方法被转换成了等价的C#代码：&lt;/p&gt;&lt;pre&gt;void Fire()&lt;br&gt;{&lt;br&gt;    // ...&lt;br&gt;    var collider = result[&quot;collider&quot;];&lt;br&gt;    if (collider is IDamageable d)&lt;br&gt;    {&lt;br&gt;        d.ApplyDamage(1);&lt;br&gt;    }&lt;br&gt;    // ...&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;collider is IDamageable d&lt;/span&gt;是C#模式匹配语法的一种用法。如果发现collider实现了&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;IDamageable&lt;/span&gt;接口，那么就将其所指对象绑定到局部变量d上，便于在下方的代码块中使用。这里通过d只能调用接口中定义的方法。一般有接口概念的编程语言都可以在需要类型的地方写上接口，因此可以用接口类型的变量来引用对象。&lt;/p&gt;&lt;p&gt;如你所见，通过接口调用方法的代码是不用关心具体类型是如何实现这个方法的。这些具体的类型上你可以背上一个类似于HpComponent的节点来实现具体功能，也可以完全不用——我根本不关心好吧。&lt;/p&gt;&lt;p&gt;Unity虽然也用C#，但是它更强调组合。一个GameObject身上的各个组件构成了这个东西的能力。不过也可以通过一些手段让一个组件放到某个东西身上时自动给它加一个它依赖的组件，一定程度上可以避免找不到某个组件的问题。Unity的射线检测结果可以拿到的也是一个&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;GameObject&lt;/span&gt;（类似于Node2D和Node3D，因为GameObject有transform，但是Node没有），可以通过调用获得具体类型的组件。当然，还是因为有C#在，你可以定义一个类似的类层次结构，定义一个大的Enemy组件，让它实现接口，也可以用&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;GetComponent&lt;idamageable&gt;&lt;/idamageable&gt;&lt;/span&gt;来获得具体的组件引用。&lt;/p&gt;&lt;p&gt;Unreal的编程语言是（被Epic加了很多黑魔法的）C++。C++其实是支持多重继承的，但是Unreal的开发者选择用黑魔法实现了一种类似于“现代面向对象语言”的接口。尽管Unreal不如Unity那么“强调”组合，但是Unreal中也存在组件的概念，再加上接口，因此实际上也可以用上述的各种方法来解决问题。&lt;/p&gt;&lt;h2&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;杀敌(略)&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;基本的逻辑对于从头看到这里的读者来说应该很简单，建议先自己思考一下。&lt;/p&gt;&lt;p&gt;hp没了直接&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;queue_free&lt;/span&gt;就行了。&lt;/p&gt;&lt;h2&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;朝玩家方向移动&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;可是不动的敌人没什么意思。&lt;/p&gt;&lt;p&gt;我们这里的场景和敌人逻辑都很简单。事实上，这个功能涉及很复杂的情况。比如场景很复杂，敌人和玩家有高度差，简单的距离计算是找不到路的。后续会介绍一种“更先进”的做法。&lt;/p&gt;&lt;p&gt;这里的敌人是用&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;CharacterBody&lt;/span&gt;实现的，玩家逼近后，我们直接修改速度。如果你的敌人响应玩家进入area的信号的函数里面，转向是用Tween来实现的，那么可以直接这样写：&lt;/p&gt;&lt;pre&gt;# ...&lt;br&gt;tween.finished.connect(func():&lt;br&gt;        turning = false&lt;br&gt;        velocity = (body.position - position).normalized() * 0.5&lt;br&gt;        # TODO: 这里应该加上追逐玩家的代码&lt;br&gt;)&lt;/pre&gt;&lt;p&gt;正如前面提到的那样，两点坐标相减就是一个向量。这里用normalized方法得到规范化之后的向量，然后乘以我们设计的速度（speed）即可。&lt;/p&gt;&lt;p&gt;如果你的逻辑不复杂，这样直接写一个lambda表达式即可（快速回忆：形如&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;func(): pass&lt;/span&gt;这样的、匿名的简单函数，这样的表达式直接返回一个函数或者说Callable）。还要注意就是这样的lambda表达式也可以有多行代码，不需要限制自己只能写一行代码。当然，当这里的代码真的复杂起来之后，正确的做法是提取一个单独的函数。&lt;/p&gt; </description><link>https://www.gcores.com/articles/193229</link><guid isPermaLink="false">gcores-193229</guid><pubDate>Wed, 08 Jan 2025 04:30:00 GMT</pubDate><author>cameLcAsE</author><enclosure url="https://image.gcores.com/0f06022bf7b8722ab47d4f0413b7a384-1141-643.png" type="image/jpeg"></enclosure><category>创作笔记</category></item><item><title>竞技场FPS的地图解析</title><description>&lt;figure&gt;&lt;img alt=&quot;竞技场FPS的地图解析&quot; src=&quot;https://image.gcores.com/e3452e4850370d1116b317297dd9b3d5-1234-704.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/4c9d78bb-704a-423e-be5e-52ff814214ee.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/4c9d78bb-704a-423e-be5e-52ff814214ee.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/4c9d78bb-704a-423e-be5e-52ff814214ee.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;初步解析FPS的地图&lt;/blockquote&gt;   &lt;p&gt;本文的竞技场FPS指的是玩家在一片封闭的场景中进行交火的FPS游戏。和传统的竞技场射击不一样，除了玩家需要在场景中拾取资源的那种传统竞技场FPS，本文把可以自带武器进场的游戏也算进去了。地图的大小预计只能给6-12名玩家使用，这样做目的是为了排除战地，绝地求生这类游戏。另外我个人的FPS游戏经验不是很丰富，所以本文只是个人最近基于我的理解和分析得到的结果。&lt;/p&gt;&lt;p&gt;前段时间，一直在和兄弟在打STRAFTAT，这是一款1v1快节奏的竞技场射击游戏，其最大的魅力就是积极庞大的地图池，每张地图都在创建一些不一样的体验，所以在玩的时候，一个问题就从我的脑子中冒出来了，是什么元素让一个地图可以成为大家口中的好图？。并且什么样的设计才能让玩家在一个相对公平的情况下玩的开心呢？&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;路线设计&lt;/span&gt;&lt;/p&gt;&lt;p&gt;作为研究的第一步，我研究了一些地图。把玩家在场地中也可以选择的行动路线画了出来。我从COD里面选取了两张比较受欢迎的地图。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1014&quot; height=&quot;1022&quot; src=&quot;https://image.gcores.com/66b65bdd10e46436488142d97cd16e5a-1014-1022.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;训练场&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;2003&quot; height=&quot;936&quot; src=&quot;https://image.gcores.com/1f482b3d85e7d0ed4b6f6e8f664a0aa6-2003-936.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;核弹镇&lt;/p&gt;&lt;p&gt;一眼可以看出在在这两张地图中，都有一个很明显的特征，他们都是三线地图。也就是说从玩家的出生点开始，玩家可以选择三条路线进入战场。但为什么是三路？&lt;/p&gt;&lt;p&gt;我认为这三条路线能够为玩家提供完全不同的战斗体验。例如，在使命召唤的“训练场”地图中，中路是一条空旷而狭窄的小道，缺乏掩体，但双方出生点前都有一堵墙和一个架枪用的小桌子，这让中路成为狙击枪玩家的主要战场。下路则布满掩体，非常适合使用霰弹枪或冲锋枪的玩家，他们可以利用掩体进行快速的近距离交战。而上路则有许多大型掩体和Y轴交火点（高低差位置），更适合使用中距离武器的玩家，例如突击步枪。同时，这些路线往往还包含一些侧路，尽管它们不在主要的交战区域内，却给喜欢伏击的玩家提供了隐蔽空间，让这些玩家有机会通过战术手段影响战局。&lt;/p&gt;&lt;p&gt;类似的设计也可以在“核弹镇”中观察到。中路的二楼位置明显适合长枪狙击，玩家能够利用高点优势控制局面；上路由于掩体分布合理，特别适合中距离武器的使用；而中路的一楼，下路以及建筑物内部，由于掩体和转角较多，则是短枪玩家的主战场，能够发挥出近距离战斗的威力。&lt;/p&gt;&lt;p&gt;至此，我觉得我们可以得出第一条结论，路线设计需要保证每种武器都都适合自己的路线。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;第二点是关于地图中五角星标注的&lt;span style=&quot;font-weight: bold&quot;&gt;优势点位&lt;/span&gt;设计。每个五角星都代表了较为流行的架枪点，这些点位让持有长枪的玩家能够定点狙击其他玩家，因而相较于普通玩家占据一定地形优势。这些优势点对玩家而言，实际上是一种隐形的指引。熟悉地图的玩家通常会前往这些位置，这就自然促成了交火的发生。然而，占据优势点位的玩家也面临着一定的风险，主要来源于绕后或其他特殊位置的反击。就比如说图中的一些四角星位置。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1339&quot; height=&quot;766&quot; src=&quot;https://image.gcores.com/ed72ae9ba220224498f3ee05c323d9a9-1339-766.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;以“核弹镇”为例：中场的卡车位置可以比较轻松地攻击到两栋楼顶上的架枪玩家，这种设计增加了对优势点位的制衡。二楼的架枪玩家存在盲区，他们看不到沿上下两路边缘跑动的玩家。其他玩家可以利用这些盲区绕到房子后面，通过阳台攻击二楼玩家。玩家还可以利用中场的掩体潜行至房子下方，从一楼楼梯发起进攻击杀二楼玩家。或者玩家可以直接在一楼的卡车里面击杀二楼的玩家。这说明，地图设计需要为玩家提供多种方法来击败占据优势点位的敌人，从而保持游戏平衡性。一个&lt;span style=&quot;font-weight: bold&quot;&gt;反例&lt;/span&gt;是《使命召唤16》中的“皮卡迪利广场”：在该地图的服装店二楼，玩家可以轻松架枪攻击几乎所有一楼的玩家，形成极大的优势。但问题在于，这个位置只有一个入口可以进入。占据点位的玩家只需在入口放置阔剑地雷，就能完全封锁其他玩家接近的可能性，使得该点位很难被反制。&lt;/p&gt;&lt;p&gt;由此可以得出第二条结论：&lt;span style=&quot;font-weight: bold&quot;&gt;地图路线设计需要提供一定的优势点位（例如二楼），但同时必须设计多种路径和方法，让其他玩家能够处理这些占据优势点位的敌人，从而避免不公平的局面。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;第三点就是对于我来说，三路地图似乎比起其他没那么三路的地图要简单易懂很多。其大概的原因可能是三线地图的大部分的分支是从玩家离开出生点之后才允许玩家去到别的路线的，并且始终在中路存在一些地标来提醒玩家他们现在哪里。举个例子，一个新手玩家在游玩核弹镇的体验可能是这样的，他们从A点或者B点出生。看到眼前有一个大房子，大房子的两边各有一条小路。小路可以不知道通向哪里。游戏开始之后，玩家走过了下面的小路（左边），进入了都是车的马路中央。此时玩家看到了对面的房子，那么玩家对于整个地图的大概结构就会有一个比较清晰的理解了。同样的这种在一开始限制玩家可以走的路线的设计也很大程度了帮助玩家减少困惑。&lt;/p&gt;&lt;p&gt;举个例子，看向训练场，训练场的在一开始的设计相当的简单，双方玩家在一开始基本只能选择往左，往右，往中，（B玩家可以选择上2楼），这些路线之间基本上不存在交叉。只有玩家到达中场的时候，玩家的选择才会爆炸性的增多。比如二楼的玩家可以跳下二楼去上或者中。上路玩家可以去中或者二楼，等等。&lt;/p&gt;&lt;p&gt;如果一张地图在一开始的时候就是四通八达的，从出生点也许可以直接到达四五个不一样的地方，那么我觉得大部分玩家可能会把大部分的时间画在找路上，而不是交火上。这里也插入一条个人经历，就我个人来说我在打三线图的时候会明显的更加有空降感和大概知道我在哪里，而非三线图，只要这张图稍微大一点，我可能就会瞬间找不着北。&lt;/p&gt;&lt;p&gt;所以，第三条结论，在路线设计这方面，最好应该和国际象棋一样，在一开始给玩家提供较少的选择。当玩家进入地图中场的时候，再为玩家提供更多的自由选择。保证玩家可以比较明白的学会地图的结构。&lt;/p&gt;&lt;p&gt;交战点设计&lt;/p&gt;&lt;p&gt;交战点一般是玩家发生交火的地方，一般来说，交战点应该集中在场地中间。从上面的路线设计我们也可以看出来，设计师在有意的引导玩家前往中场进行交战。从而产出一些相对来说比较平衡的局面。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;703&quot; height=&quot;355&quot; src=&quot;https://image.gcores.com/6f0266a7a9b56d624ab20fc37d552467-703-355.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这张图片大概的展示了在核弹镇中玩家清点需要的扫描数。紫色区域代表了玩家只需要看一下就可以将大部分的信息收入眼中，也许这是一个比较狭窄的区域。绿色区域代表了玩家可能需要转一下视角。这就意味着这是一个稍微大一点房间，玩家在刚刚进入的时候需要左右转动自己的视角。蓝色是多次转动视角区域，这就意味着玩家不能仅凭一次视角转动就看到这一块区域的全貌。玩家可能还需要左右移动，或者是多次扫描从而看完全接受这一块区域的信息。&lt;/p&gt;&lt;p&gt;也就是说，在蓝色区域内，游戏可能会更加偏向战术一点。因为有掩体的存在，玩家是可以存在一些战术空间的，玩家的确可以选择绕柱，守株待兔之类的操作。同样的，在CS中也有类似的情况，有很多掩体的地方往往考验玩家的信息获取能力和处理信息的能力。反之紫色和绿色区域内往往一般都缺少掩体或者就只有几个矮墙。这就导向了更加休闲的游玩体验了。因为掩体的缺失，之前说的根据掩体展开的战术玩法也自然不存在了，于是在这款区域内，玩家反而考验的是枪法之类的能力了。因为在这块地方，那就更加接近了FPS的本质，也就是拼反应力，拼枪法的休闲游戏了。如果一幅地图蓝色的地方很多，那么不可避免的就会导致整个游戏玩的很累。因为玩家需要时刻警惕周围的信息，反之掩体少而空的地图会让游戏整体比较休闲，但会让游戏玩起来变得有点缺乏竞技性。最好的情况还是两者都有，让每种玩家都可以得到满足。&lt;/p&gt;&lt;p&gt;至此可以得出第一点，交战点中的掩体数量，以及交战点的大小会影响这片区域是否是更加偏向休闲的区域还是更加偏向战斗的区域，在地图中最好可以保证两种区块都存在，并且保持平衡。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;824&quot; height=&quot;638&quot; src=&quot;https://image.gcores.com/b02c7cd6f14613b1ea3eb470ea3f9f09-824-638.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这是来自quake的bloodrun地图上的死亡数，死亡数越多这个点就越接近红色。换句话说，玩家更加愿意在这里交战。那就说明这个交战点是又可以借鉴的地方的。我们来看看这个交战点的构成。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;733&quot; height=&quot;407&quot; src=&quot;https://image.gcores.com/c3e8855d1ae00b8f380a3d3a3c3e5216-733-407.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这里是一个三层楼的垂直区域，每一层都至少有一个出口可以离开这里，并且地上存在一把武器。一层存在一把狙击枪，一个可以直接上三楼的传送门，左右两个各有一个出口，其中一个出口存在有一个大血包，要是愿意再走一会可以发现一个电击枪和去往超级强化房间的路。二层存在一个榴弹发射器（黄色的），玩家可以直接卖血火箭跳到超级甲上。三层存在一个超级霰弹枪，玩家可以直接连跳到超级甲上。但是超级甲那里并不存在掩体，所以尝试获取超级甲的玩家很有可能会被来自一楼的玩家使用狙击枪和电击枪直接报废他们的努力。并且这里附近也有火箭筒可以拿，尝试拿重甲玩家也有很大的几率被火箭筒炸飞。这里是我大概描绘的这张图的路线图。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1024&quot; height=&quot;701&quot; src=&quot;https://image.gcores.com/bb52b2afe81b0c0bc81c0eac8857fa6c-1024-701.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;红色线路是一楼的线路，蓝色线路是二三层的线路，黄色线路是玩家可以通过火箭跳到达线路。蓝色/红色的圈代表了这个东西在一楼还是二三楼。绿色的线是传送门路线，小三角和小圈代表了传送门。绿色箭头代表了跳板。地图上武器的话，蓝色是射钉枪，一种有弹道时间的机枪。绿色是railgun，hit scan的狙击枪。黄色是榴弹发射器，发射三个会击飞人的小榴弹。红色是火箭筒，发射一个把人打飞老远的火箭筒。橘黄色是喷子，hit scan并且打人贼疼。青色是电击枪，持续发射一个光束。淡黄色是步枪，可以开镜的hit scan步枪。观察中间站去可以发现，很多条线路在这里交织汇聚。并且除了价值最高的重甲，以及一楼存在的用于对抗高大低而存在的些许轻甲，大部分的恢复类的道具大多是围绕着中心区域摆放的。&lt;/p&gt;&lt;p&gt;至此可以得出第二点，玩家需要有多种方式可以离开/进入交战点，并且在离开交战点之后可以快速恢复状态再次加入战斗。并且在交战点加入一些风险/回报设计会让整个区域增加不少的深度。&lt;/p&gt;&lt;p&gt;再来回过头来一些交战点，可以发现很多交战点不单单只存在平面上的水平交火，也存在一些立体攻防范围，比如说核弹镇的两个楼，bloodrun中的两层楼。这些立体攻势也为游戏本生提供了更多的深度和乐趣，在地处的玩家可以使用投掷道具进行反击，也可以尝试对死高处的玩家。因为在高出的玩家是存在优势的，所以这些二层的设计大部分都是有限制的，比如说在核弹镇中，在楼道里面打人的玩家掩体少活动范围小，并且所有墙可以直接穿死在里面的人。Bloodrun里面二三楼的玩家打不到在下面的玩家。 那其实同样的，我们也可以反过来，做一个凹下去的地图，进到凹点中的玩家会受到周围玩家的火力，从而实现高风险/高回报。&lt;/p&gt;&lt;p&gt;所以第三点，一个交战点中最好存在一些立体空间，并且应该给限制在二楼玩家的权力，让他们有一些盲区，或者处于一个高风险高收益的状态。&lt;/p&gt;&lt;p&gt;一些别的设计&lt;/p&gt;&lt;p&gt;正因为玩家可以尝试获得优势，让别人失去优势，或者是保持现在的状态，玩家在一副地图中才可以做出不同的有趣选择。再拿cod的训练场来做例子。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1014&quot; height=&quot;1022&quot; src=&quot;https://image.gcores.com/e73adb2a8adcdc2d4e9ab529bf233e21-1014-1022.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在这幅图中，仔细观察优势点的分布（五角星），骑士大部分都分布在距离双方出生点不远的位置，也就是说玩家获得优势是相对简单的。比如说A点附近的几个架枪点，一个是面前的小桌板，一个是二楼的上路优势点，下路的架停车场的优势点。A点的玩家不需要冒着敌人的火力就可以轻松的到达这几个架枪点。而观察场上的四角星（反击优势点）大部分都分布在了场地的中央。玩家可能需要冒着一些风险才可以让另一方玩家失去优势。只有这样才能让玩家把去获得优势作为一种有意义的选择。反之，假设玩家很难获得一个优势，但是却很容易失去获得优势，那玩家则玩家没有必要去获得这个优势。也让前文说的选择优势点，敌方选择反击优势点的游戏循环失效。让游戏的更不战术，也会更加的休闲。在休闲类游戏中，我认为这也是一种抹平不同玩家的技术差距的方式之一。&lt;/p&gt;&lt;p&gt;总之，在我看来，简单获得优势，难失去优势，会让整个游戏更加的有竞技性。反之则会让游戏更加的休闲。&lt;/p&gt;&lt;p&gt;以上就是目前研究的有关竞技场FPS地图的一些设计研究，之后我也会持续研究这方面的东西。&lt;/p&gt; </description><link>https://www.gcores.com/articles/193223</link><guid isPermaLink="false">gcores-193223</guid><pubDate>Tue, 07 Jan 2025 21:01:19 GMT</pubDate><author>Pigeon-hcy</author><enclosure url="https://image.gcores.com/e3452e4850370d1116b317297dd9b3d5-1234-704.png" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/e3452e4850370d1116b317297dd9b3d5-1234-704.png"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/4c9d78bb-704a-423e-be5e-52ff814214ee.mp3" length="951" type="audio/mp3"></enclosure><itunes:duration>0:15:51</itunes:duration><category>创作笔记</category></item><item><title>《荒野大镖客2》的“爱好者的乐土”与《GTA5》的“狗仔队”任务的设计差异分析</title><description>&lt;figure&gt;&lt;img alt=&quot;《荒野大镖客2》的“爱好者的乐土”与《GTA5》的“狗仔队”任务的设计差异分析&quot; src=&quot;https://image.gcores.com/aecc2c773dbad1c476df8071aee16075-715-402.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/c1c8b364-1afc-4352-b31c-a4daf173e31c.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/c1c8b364-1afc-4352-b31c-a4daf173e31c.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/c1c8b364-1afc-4352-b31c-a4daf173e31c.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;对比下主角同为摄影职业的任务，在不同人物性格，故事背景下所产生的任务设计差异&lt;/blockquote&gt;   &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;两任务直接体验对比：&lt;/span&gt;&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;751&quot; height=&quot;1163&quot; src=&quot;https://image.gcores.com/58eded135eec7b85652c31e7f704b299-751-1163.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;以下截图取自于（感谢大佬们整理的视频）：&lt;/p&gt;&lt;p&gt; &lt;a href=&quot;https://www.bilibili.com/video/BV1A5411a79Y?spm_id_from=333.788.player.switch&amp;amp;vd_source=013ffd203878509298f3f9ca0f0c7d24&amp;amp;p=4&quot; target=&quot;_blank&quot;&gt;摄影爱好者的执着（4）_哔哩哔哩_bilibili&lt;/a&gt; &lt;/p&gt;&lt;p&gt; &lt;a href=&quot;https://www.bilibili.com/video/BV1Dx42117Qv/?spm_id_from=333.999.0.0&amp;amp;vd_source=013ffd203878509298f3f9ca0f0c7d24&quot; target=&quot;_blank&quot;&gt;(GTA故事模式)富兰克林狗仔队系列任务合集&lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;一、人物形象&lt;/span&gt;&lt;/p&gt;&lt;p&gt;就伙伴/角色任务而言，对任务形式与流程设计有着最直接影响的就是——任务主角的人物形象。&lt;/p&gt;&lt;p&gt;不同的人物形象会影响到触发任务的形式、任务流程中的玩法、叙事基调、任务节奏、玩家情感体验等等。 &lt;/p&gt;&lt;blockquote&gt;要是我能拍下那家伙的照片......它也许能逃过被动物标本制作师猎杀的命运。&lt;/blockquote&gt;&lt;ol&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【荒野大镖客2】梅森性格分析：&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;他谦逊的同时又对自然和摄影充满热爱，他既需要玩家的保护，但在爱好面前又异常勇敢（比如在危险中仍然坚持完成拍摄）。这种性格让任务基调更为温暖，也使得玩家游玩梅森任务时会感到舒适和放松。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;基于梅森性格设计的任务主题和流程：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【爱好者的乐土-01】初遇：&lt;/span&gt;梅森原本在拍摄皮包，与亚瑟相遇后提出为亚瑟拍摄一张肖像，搁置在一旁的皮包被狼叼走，于是拜托亚瑟为他追回皮包（玩法）。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;拍摄亚瑟&quot; width=&quot;715&quot; height=&quot;402&quot; src=&quot;https://image.gcores.com/cbe570a16d4a239e0320fe0f985c1e9f-715-402.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【爱好者的乐土-02】拍摄狼群：&lt;/span&gt;亚瑟在树林中遇到梅森在拍摄，经过询问了解到梅森打算拍摄狼群，于是亚瑟提出在一旁保护梅森。所以本次任务分为两部分，由梅森按下快门那一刻进行前后分割，第一部分在梅森旁等待梅森拍摄，第二部分击退狼群保护梅森（玩法）。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;拍摄狼群&quot; width=&quot;714&quot; height=&quot;401&quot; src=&quot;https://image.gcores.com/f9d443a95241788b8eee756d71086ccb-714-401.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【爱好者的乐土-03】拍摄马群：&lt;/span&gt;亚瑟在草原遇到梅森想要拍摄马群，但苦恼马群不再靠近，于是提出帮他把马群赶到摄影机前（玩法）。&lt;/p&gt;&lt;p&gt;值得一提的是，本次任务结束时，梅森会赠与玩家上一节点任务所拍摄的狼群照片，这也是《巫师3》任务设计师Pawe Sasko在GDC分享的“延时后果”理论，把本该前一节点就获得的奖励放置到后一节点，甚至跳脱于这一角色任务之外，穿插于其他任务或者场景道具中。比如爱好者乐土任务第一序列时梅森为玩家拍摄的照片，玩家会在游玩画家任务时在展览中看到那张照片。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;拍摄马群&quot; width=&quot;715&quot; height=&quot;399&quot; src=&quot;https://image.gcores.com/70f6f47928a62853b30575f1f88fc067-715-399.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;狼群照片&quot; width=&quot;716&quot; height=&quot;399&quot; src=&quot;https://image.gcores.com/f7547c4d73d39485e8baae24d9c0e729-716-399.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;展览&quot; width=&quot;712&quot; height=&quot;399&quot; src=&quot;https://image.gcores.com/dd49406bcc7891c623f61b5c9f5fbc32-712-399.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【爱好者的乐土-04】拍摄短吻鳄：&lt;/span&gt;亚瑟遇到梅森在岸边拍摄，提出划船（玩法）带梅森进入湖中更近距离拍摄鳄鱼。&lt;/p&gt;&lt;p&gt;在完成前面几只鳄鱼的拍摄后，梅森请求亚瑟帮他引诱出一只短吻鳄（玩法）以便近距离拍摄。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;拍摄鳄鱼&quot; width=&quot;711&quot; height=&quot;395&quot; src=&quot;https://image.gcores.com/23c8535b4d6a970beaeda3d4b0395481-711-395.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【爱好者的乐土-05】尾声（播片）：&lt;/span&gt;亚瑟遇到梅森在悬崖边上拍摄老鹰，提醒他离悬崖边远一点，梅森为了证明自己很安全不慎跌落悬崖，亚瑟再一次救起梅森，梅森对亚瑟进行了感谢同时作了最后的告别。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;拍摄老鹰&quot; width=&quot;711&quot; height=&quot;396&quot; src=&quot;https://image.gcores.com/8a1bb2ce9f96258ff22fdaa240679352-711-396.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;解析：&lt;/span&gt;在梅森的任务当中，不仅体现了梅森的人物性格，也侧面反映出了亚瑟的性格，比如他十分乐于助人，除了第一个任务节点以外，此后的所有节点都是亚瑟主动提出帮助梅森的。同时，梅森拍摄这些生物不仅仅是出于对自然和摄影的喜爱，更多地也是想要通过自己的摄影作品去保护这些濒危动物，比如他在拍摄短吻鳄时就提到“要是我能拍下那家伙的照片......它也许能逃过被动物标本制作师猎杀的命运”。&lt;/p&gt;&lt;blockquote&gt;如果你不想在提供重要的公共服务时，借机获得超乎想象的财富，你就不会再见到我了。&lt;/blockquote&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;2.【侠盗猎车手5】比佛利性格分析：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;他的狡猾和逐利与梅森正好形成了对立面，正是因为他的性格，他所选择的拍摄更加危险、刺激。这种性格让任务基调偏向黑色幽默与讽刺，也使得玩家游玩比佛利任务时会感到刺激、紧张。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;基于比佛利性格设计的任务主题与流程：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【狗仔队-01】初遇：&lt;/span&gt;比佛利把富兰克林认成了热门歌手克莱“PG”对他进行偷拍，富兰克林发现后与比佛利进行了争执，在争执过程中比佛利提议一起开车偷拍米兰达（玩法）大赚一笔，并赶走来抢拍的其他狗仔（玩法）。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;拍摄米兰达&quot; width=&quot;709&quot; height=&quot;399&quot; src=&quot;https://image.gcores.com/4eca95b5362927f4fe49f5c871849134-709-399.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【狗仔队-02】动作影片：&lt;/span&gt;富兰克林前往比佛利在第一节点提到的下次碰面的位置，这次他们要潜入波比·米歇尔家中拍摄“动作影片”（玩法），被发现后坐车逃离现场并录下米歇尔开车追赶他们的过程（玩法）作为发布头条新闻的素材。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;拍摄波比&quot; width=&quot;709&quot; height=&quot;397&quot; src=&quot;https://image.gcores.com/7a1102028c4bcac8a32453950f846dea-709-397.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【狗仔队-03】酒后驾驶：&lt;/span&gt;比佛利电话联系富兰克林此时波比正在*驾，于是富兰克林驱车追赶（玩法）抓拍波比被捕瞬间。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;拍摄波比&quot; width=&quot;707&quot; height=&quot;393&quot; src=&quot;https://image.gcores.com/7b609a430493b343400b1a4e6df48363-707-393.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【狗仔队-04】皇室丑闻：&lt;/span&gt;比佛利打电话告诉富兰克林他的线人看到乔治娜公主在进行私下交易，让富兰克林前往奇科大卖场与线人碰头并拍下交易瞬间（玩法）。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;拍摄乔治娜&quot; width=&quot;710&quot; height=&quot;398&quot; src=&quot;https://image.gcores.com/4dae2845ef39d5ddca6d98829aa7199f-710-398.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【狗仔队-05】恩断义绝（尾声）：&lt;/span&gt;富兰克林想要把照片交给比佛利，却正巧碰见比佛利在录制真人秀。比佛利把富兰克林臭骂一顿，并否认一开始承诺的报酬。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;拍摄真人秀&quot; width=&quot;714&quot; height=&quot;396&quot; src=&quot;https://image.gcores.com/81965fabc353339ed96a520c524ba3e5-714-396.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;解析：&lt;/span&gt;除了第一次与比佛利相遇玩家稀里糊涂跟着他做了不太道德的事情之外，后续的所有偷拍事件比佛利都提前跟富兰克林提到过，也一开始告知玩家“”，而玩家扮演的富兰克林选择帮他也许是想靠这些照片大赚一笔，所以最后比佛利的背叛也算是一开始种下的因所结下的果。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;二、故事背景&lt;/span&gt;&lt;/p&gt;&lt;p&gt;故事背景对任务的设计具有很大的影响，比如影响任务选择的道具、空间布局、玩法等等，同样也会对叙事基调产生一定的影响。但如果把故事背景包含进来，整篇文章或许就会变得十分冗余。笔者认为这两个任务更多地是围绕任务中的角色“梅森”“比佛利”去设计的，偏向于伙伴任务，在后面的文章中笔者也会更多地基于叙事策划的人物设计如何去影响任务的编排进行分析。&lt;/p&gt;&lt;p&gt;在本章节中简要地提一下两款游戏不同的故事背景。&lt;/p&gt;&lt;p&gt;《荒野大镖客2》的故事背景为19世纪的西部荒野，亚瑟此时已染上肺病，而达奇还在做着不切实际的“计划”梦，主线任务在此时已变得十分紧张和压抑。而任务设计师将梅森的支线任务节奏设计得偏慢，基调柔和又温馨，就像是玩家游玩主线之后的喘息空间，让亚瑟得以在世界的不起眼角落与自然摄影师享受片刻的宁静。&lt;/p&gt;&lt;p&gt;《侠盗猎车手5》的故事背景为现代都市的美国，富兰克林本身也是一个游走在法律边缘的人物，烧杀抢夺对他来说是家常便饭，主线任务也往往围绕抢劫、枪战、复杂的人物冲突所展开。与《爱好者的乐土》这一系列任务不同的是，《狗仔队》系列支线任务更多的是对主线任务情感的延续，而非作为喘息空间，所以其一以贯之整部游戏的快节奏、紧张刺激的任务基调。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;三、叙事基调&lt;/span&gt;&lt;/p&gt;&lt;p&gt;根据人物性格与故事背景的不同，相应地，任务的叙事基调也会有所差异。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;1.叙事基调&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【荒野大镖客2】&lt;/span&gt;&lt;/p&gt;&lt;p&gt;梅森的任务目标（拍摄自然与生物）决定了任务基调的温暖和柔和。任务的主要设计思路是引导玩家从紧张压抑的主线中抽离出来，通过陪伴梅森拍摄，观察自然生物，体会到人与自然和谐相处的美好。譬如在拍摄短吻鳄时，玩家不仅需要保护梅森，还要引诱鳄鱼靠近，这种张弛结合的玩法设计，让玩家在感受轻松、悠扬的同时，也会偶尔有一些“紧张”时刻。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【侠盗猎车手5】&lt;/span&gt;&lt;/p&gt;&lt;p&gt;比佛利任务的目标（偷拍名人隐私）从本质上是道德上站不住脚的行为，这种目标直接塑造了任务基调的讽刺性与荒谬感。在“狗仔队-02”任务中，玩家需要潜入波比·米歇尔家中偷拍“动作影片”，尽管潜入部分节奏较慢，但整体任务基调却通过比佛利刻薄、逐利的对话强化了讽刺色彩。玩家会感到滑稽和不适，这是任务设计师刻意引导的情绪反应。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;2.玩家情感体验&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【荒野大镖客2】&lt;/span&gt;&lt;/p&gt;&lt;p&gt;作为一个伙伴任务，《荒野大镖客2》采用的方式是通过玩家陪伴梅森拍摄这一行为去制造他们之间的互动瞬间，增强玩家对梅森这一角色的记忆，建立他们之间的情感纽带。所以很多玩家在之后的游玩过程中看到报纸上报道梅森会很欣慰，看到梅森的展览会都是他们一同拍摄的照片会很惊喜。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【侠盗猎车手5】&lt;/span&gt;&lt;/p&gt;&lt;p&gt;虽然同为伙伴任务，《侠盗猎车手5》采取的方式是让玩家直接参与比佛利的拍摄，而不是在一旁静静陪伴。所以最后比佛利的背叛会让玩家感到异常愤怒，因为从一开始这些照片就是玩家的“作品”。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;四、任务节奏&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【荒野大镖客2】：&lt;/span&gt;由于游戏的基调，整个任务的节奏也基本上偏慢去缓和玩家在主线任务中的西部冒险的紧张情绪。摄影师的任务通过对自然的观察和保护形成了独特的慢节奏体验。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;以下笔者具体分析一下任务的每一个节点的节奏变化：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【爱好者的乐土-01】&lt;/span&gt;&lt;/p&gt;&lt;p&gt;玩法-1：追赶郊狼（节奏：较快）&lt;/p&gt;&lt;p&gt;玩法-2：把手提包还给梅森（节奏：慢）&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;追赶郊狼&quot; width=&quot;712&quot; height=&quot;398&quot; src=&quot;https://image.gcores.com/595c209ded400234270822581ade7278-712-398.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;把手提包还给梅森&quot; width=&quot;710&quot; height=&quot;399&quot; src=&quot;https://image.gcores.com/7d752a585fb366e550483541dc246c9e-710-399.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【爱好者的乐土-02】&lt;/span&gt;&lt;/p&gt;&lt;p&gt;玩法-1：等待拍摄（节奏：慢）&lt;/p&gt;&lt;p&gt;玩法-2：击退狼群，保护梅森（节奏：快）&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;等待拍摄&quot; width=&quot;710&quot; height=&quot;397&quot; src=&quot;https://image.gcores.com/a8fa99474c5e9959c17d41e66a2cc915-710-397.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;击退狼群，保护梅森&quot; width=&quot;712&quot; height=&quot;397&quot; src=&quot;https://image.gcores.com/c1dffd997b6c1db2b5b5d69a8e1b61ba-712-397.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【爱好者的乐土-03】&lt;/span&gt;&lt;/p&gt;&lt;p&gt;玩法-1：骑去野生马匹所在的位置（节奏：慢）&lt;/p&gt;&lt;p&gt;玩法-2：将马匹赶向原野（节奏：慢）&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;骑去野生马匹所在的位置&quot; width=&quot;712&quot; height=&quot;399&quot; src=&quot;https://image.gcores.com/46359df152e8a040f5c944cc05cb5c19-712-399.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;将马匹赶向原野&quot; width=&quot;713&quot; height=&quot;395&quot; src=&quot;https://image.gcores.com/a38eb5b535911fef5c0c1ea7c0ca4dc4-713-395.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【爱好者的乐土-04】&lt;/span&gt;&lt;/p&gt;&lt;p&gt;玩法-1：在沼泽中寻找短吻鳄——划船（节奏：慢）&lt;/p&gt;&lt;p&gt;玩法-2：吸引短吻鳄（节奏：较快）&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;在沼泽中寻找短吻鳄&quot; width=&quot;713&quot; height=&quot;396&quot; src=&quot;https://image.gcores.com/625b7fdbf3b6e0931c6933f268c6039c-713-396.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;吸引短吻鳄&quot; width=&quot;710&quot; height=&quot;395&quot; src=&quot;https://image.gcores.com/821c9d6fceb3b292dc8ee88ed5ad8b20-710-395.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【侠盗猎车手5】：&lt;/span&gt;任务的整体节奏更快，玩法密度更高（如潜入、控制镜头、骑车攻击等），几乎每一个任务都有两种玩法。贝弗利的任务则通过快速跟踪与拍摄形成了紧张刺激的高节奏互动。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【狗仔队-01】&lt;/span&gt;&lt;/p&gt;&lt;p&gt;玩法-1：与米兰达的车并肩行驶（节奏：快）&lt;/p&gt;&lt;p&gt;玩法-2：阻止竞争方狗仔--骑车撞击（节奏：快）&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;与米兰达的车并肩行驶&quot; width=&quot;714&quot; height=&quot;397&quot; src=&quot;https://image.gcores.com/c3c5863b03ab16ff88354523d28680ae-714-397.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;阻止竞争方狗仔队&quot; width=&quot;712&quot; height=&quot;393&quot; src=&quot;https://image.gcores.com/1140080bd8ead381b0c5e826570bb3bf-712-393.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【狗仔队-02】动作影片&lt;/span&gt;&lt;/p&gt;&lt;p&gt;玩法-1：潜入（节奏：慢）&lt;/p&gt;&lt;p&gt;玩法-2：偷拍（节奏：中）&lt;/p&gt;&lt;p&gt;玩法-3：在追击时录影（节奏：快）&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;潜入&quot; width=&quot;715&quot; height=&quot;398&quot; src=&quot;https://image.gcores.com/228644a7560e559baf046e09e879065d-715-398.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;在追击时录影&quot; width=&quot;711&quot; height=&quot;398&quot; src=&quot;https://image.gcores.com/348dc9961d54b13cb8c17bd2548c4394-711-398.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【狗仔队-03】酒后驾驶&lt;/span&gt;&lt;/p&gt;&lt;p&gt;玩法-1：追赶波比--赛车（节奏：快）&lt;/p&gt;&lt;p&gt;玩法-2：拍摄一张现场照片（节奏：慢）&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;追赶波比&quot; width=&quot;710&quot; height=&quot;394&quot; src=&quot;https://image.gcores.com/9005835e57e82fbb4c50141a863870c6-710-394.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;拍摄一张现场照片&quot; width=&quot;715&quot; height=&quot;395&quot; src=&quot;https://image.gcores.com/9954713efe0268030fcc4b9fe7a16d7e-715-395.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【狗仔队-04】皇室丑闻&lt;/span&gt;&lt;/p&gt;&lt;p&gt;玩法：偷拍乔治娜公主（节奏：慢）&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;偷拍乔治娜公主&quot; width=&quot;709&quot; height=&quot;398&quot; src=&quot;https://image.gcores.com/1c0072487edd5aa53fe215d63df33709-709-398.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;总结：&lt;/span&gt;无论是《荒野大镖客2》还是《侠盗猎车手5》，尽管游戏任务基调不同，但节奏也仍然不是一味的慢或者快，而是有着一个跌宕起伏的节奏曲线。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;“爱好者的乐土”节奏曲线&quot; width=&quot;576&quot; height=&quot;506&quot; src=&quot;https://image.gcores.com/8469cecc71bdb636eeffd07e3055d2ec-576-506.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;“狗仔队”节奏曲线&quot; width=&quot;620&quot; height=&quot;502&quot; src=&quot;https://image.gcores.com/661c97b8f2ecc3743d46e6f2dd233a4a-620-502.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;五、任务动线&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【荒野大镖客2】爱好者的乐土任务&lt;/span&gt;&lt;/p&gt;&lt;p&gt;荒野大镖客2虽然有移动载具--马匹，但受限于移动速度，如果路途较远可能会影响到任务的体验。于是任务设计师几乎把“爱好者的乐土”这一系列任务的每一个节点都安排在车站周围，方便玩家进行快速移动。（蓝色框出的是周围的车站）&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1427&quot; height=&quot;777&quot; src=&quot;https://image.gcores.com/10adc67d2126673877a7e52777b4d68f-1427-777.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;“爱好者的乐土”这一系列任务几乎跨越了一半的地图区域，而任务的每一节点的地点也选择的有所差异，如1、2的森林，3的平原，4的沼泽，5的悬崖。在利用任务增强玩家的游戏体验的同时，也加深了其对地图的不同场景区域的记忆点。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1437&quot; height=&quot;771&quot; src=&quot;https://image.gcores.com/d1f3027efef72cb8b877a779bc198c7f-1437-771.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【侠盗猎车手5】狗仔队任务&lt;/span&gt;&lt;/p&gt;&lt;p&gt;“狗仔队”这一系列任务相对来说距离更近一些，都在好莱坞这一块。密度比较近的原因应该也是任务的主题是偷拍名人，而名人大多都生活在好莱坞街区。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1429&quot; height=&quot;788&quot; src=&quot;https://image.gcores.com/00dc73f2d986d2d936e64c5a55169c89-1429-788.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;总结：&lt;/span&gt;设计时基于任务主题考虑到任务的发生地，再根据地点选择触发地（最好位于快速传送点周围），在整个任务的流程中尽量不要有重复或者回头的路线。&lt;/p&gt; </description><link>https://www.gcores.com/articles/193213</link><guid isPermaLink="false">gcores-193213</guid><pubDate>Tue, 07 Jan 2025 15:31:05 GMT</pubDate><author>alexwondering</author><enclosure url="https://image.gcores.com/aecc2c773dbad1c476df8071aee16075-715-402.png" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/aecc2c773dbad1c476df8071aee16075-715-402.png"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/c1c8b364-1afc-4352-b31c-a4daf173e31c.mp3" length="831" type="audio/mp3"></enclosure><itunes:duration>0:13:51</itunes:duration><category>知识挖掘机</category></item><item><title>笔记：【GDC】《巫师 3》和《赛博朋克 2077》的 10 个关键任务设计经验教训</title><description>&lt;figure&gt;&lt;img alt=&quot;笔记：【GDC】《巫师 3》和《赛博朋克 2077》的 10 个关键任务设计经验教训&quot; src=&quot;https://image.gcores.com/359f0e839719f28aff20611704027f32-1694-953.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/0de37101-c908-4792-bc86-cd6625fde716.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/0de37101-c908-4792-bc86-cd6625fde716.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/0de37101-c908-4792-bc86-cd6625fde716.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;演讲者分享了十个任务设计经验，分别是：参与、影响、可信度、构建叙事、选择、后果、过度设计、勇气、新奇、效率&lt;/blockquote&gt;   &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;序、&lt;/span&gt;&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;821&quot; height=&quot;460&quot; src=&quot;https://image.gcores.com/c475d152417a40922e1c0347608186fd-821-460.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;演讲者在开头介绍了他们团队的项目叙事管道：&lt;/p&gt;&lt;p&gt;小组作出故事大纲——团队成员反馈意见进行迭代——任务设计——实施草案——确保任务可玩——整个游戏可玩——发布 &lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;一、参与&lt;/span&gt;&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;818&quot; height=&quot;458&quot; src=&quot;https://image.gcores.com/440ea2b389f5151c83bd1564c178d229-818-458.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;1.玩家想看下一段故事，故意遗漏关键信息是有帮助的。《巫师3》血与酒任务，在任务开场引入一个受伤的人，为玩家设计悬念。 &lt;/p&gt;&lt;p&gt;2.玩家获取信息的动力增加了故事的粘性。玩家渴望故事，制作者应该去用某种方式构建故事，而不是把它强行喂到玩家的喉咙中。&lt;/p&gt;&lt;p&gt;3.通过减去关键信息，可以让玩家对正在发生的事情真正感兴趣（留白）。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;二、影响&lt;/span&gt;&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;815&quot; height=&quot;453&quot; src=&quot;https://image.gcores.com/d1b1a4a390ba58fbd0389123c760c48a-815-453.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;1.制作者在创造的过程中，就试图传递某种情感、围绕那些情感碰撞时刻创造故事。他们希望将当下的情感通过游戏传达给玩家，将玩家拖入故事的情感时刻。&lt;/p&gt;&lt;p&gt;2.创造一个良好且具有影响力（情感影响）的任务很重要。当构建具有影响力的故事时（主线/伙伴任务），不要有任何保留，做任何需要让玩家感同身受的事情。&lt;/p&gt;&lt;p&gt;3.围绕真实的场景和序列设计故事，并让玩家留下深刻的记忆。&lt;/p&gt;&lt;p&gt;   3.1创作故事时，可以围绕情感上有影响力的时刻创作它们——围绕一些东西创作/构建它们（抓手）（酷场景）。&lt;/p&gt;&lt;p&gt;   3.2除了情感时刻外，也可以思考一些“伟大”、震撼的场景，这仅次于构建的伟大的情感影响 力的故事。&lt;/p&gt;&lt;p&gt;   3.3但故事情节只由“酷场景”所构建，那故事就会变得没有灵魂。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;三、可信度&lt;/span&gt;&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;818&quot; height=&quot;459&quot; src=&quot;https://image.gcores.com/b5fc160a5e2ed570ab17ef2b893c9534-818-459.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;1.给每个故事线索足够的屏幕时间和空间，不要着急。在玩家无事可做的时刻，给予角色足够的场景空间和时间让他们在屏幕上真正闪耀，给他们时间去完成这些人物塑造的元素，不要着急推进下一步。&lt;/p&gt;&lt;p&gt;2.创造角色类似真正人类的时刻，让玩家能够与角色建立并加强联系。在玩家和角色独处的时刻，确保在故事情节中，构建一个故事时，它不仅仅是一个情节，而是一个人物形象的塑造。当遇到角色时，他们不会告诉你关于接下来要做什么，下一个目标是什么。但在某些时刻，他们也会自己说出对他们来说重要的事情。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;四、构建叙事&lt;/span&gt;&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;818&quot; height=&quot;460&quot; src=&quot;https://image.gcores.com/d9226224ecbb4f32207eb6280d7d078f-818-460.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;1.在任务结构中，需要明确什么时候重复信息，什么时候去除信息。当去除一些不必要的部分，故事也许会变得更加有力。&lt;/p&gt;&lt;p&gt;2.去划分场景，如何进行阐释以及何时去做。&lt;/p&gt;&lt;p&gt;   信号——制作者想要向玩家提供的所有消息、所有重要信息、所有希望玩家学习的信息&lt;/p&gt;&lt;p&gt;   噪音——玩家可以同时执行的所有操作，因此时信号不那么明显（信号的干扰）&lt;/p&gt;&lt;p&gt;   2.1控制重要信息最好在信号高而噪音低的情况下传达给玩家，而在信号低噪音高的情况下，玩家可以自由地去做一些行为。&lt;/p&gt;&lt;p&gt;   2.2划分阐述，明白哪些是叙述的重要部分，哪些并不那么重要，核心目标是让玩家获得重要的故事信息，关于世界和背景故事的一切。&lt;/p&gt;&lt;p&gt;3.将叙事移到讲述之外，比如通过人物的形象、肢体语言去描述游戏的世界观，让玩家通过思考去了解到代入到制作者构建的世界。这些微妙的叙事是关于游戏背后的价值观，但它们从来没有直接提供给玩家。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;五、选择&lt;/span&gt;&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;821&quot; height=&quot;456&quot; src=&quot;https://image.gcores.com/5cdeada32e342cb43b2a0a09ad2f1f28-821-456.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;1.构建两难、模棱两可和不明确的情景，让玩家可以自行理解。呈现出故事和选择的正反两面，但玩家不会知道具体会发生什么。设计选择时，确保玩家有一些事情需要考虑，有趣的困境会迫使玩家做出游戏里最重要的决定。&lt;/p&gt;&lt;p&gt;2.提供符合玩家或主角逻辑预期的选择。比如在竞技场攻击佐特，此时设计师已经创造了一种情景，让玩家非常想要这样做的权利，这样玩家不会觉得时被迫做出的选择。在设计任务时，反问自己：“我可以接受在这里没有某个选项吗？”&lt;/p&gt;&lt;p&gt;3.在关键抉择时刻之前，平衡将支持不同选择的利害关系都呈现出来。&lt;/p&gt;&lt;p&gt;4.明星角色会影响玩家的选择倾向。当有明星角色时，玩家几乎总是会倾向于明星那边。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;六、后果&lt;/span&gt;&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;817&quot; height=&quot;460&quot; src=&quot;https://image.gcores.com/4f993d7501815848027159c908bc48e4-817-460.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;1.非常延迟的、以及清晰展现的后果，往往会给玩家留下最深刻的印象。（比如空洞骑士中没有提前在古老盆地救下龙牙姐，与叛徒领主战斗时她就不会出现。这就是早期选择的延迟后果）。&lt;/p&gt;&lt;p&gt;2.当后果过于微小时，玩家不会看到它们。当后果非常清晰地展现时，玩家更容易感到惊讶。设计要考虑到后果的可视性，如果耗时制作的东西不能很好地传递信息，就很可能得不偿失。对于玩家来说，体验不到的东西等于不存在。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;七、过度设计&lt;/span&gt;&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;819&quot; height=&quot;461&quot; src=&quot;https://image.gcores.com/9e12aef491e05b6c318e407dbd34f023-819-461.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;1.小心过度设计；游戏不是模拟生活，而是娱乐。&lt;/p&gt;&lt;p&gt;2.减少和简化那些不是你所创造的体验核心的元素。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;八、勇气&lt;/span&gt;&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;826&quot; height=&quot;464&quot; src=&quot;https://image.gcores.com/ebac27f849aeaecb5ec52d91afa223ba-826-464.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;1.在游戏中尝试新主题和新理念，尤其是之前没人做过的事情。&lt;/p&gt;&lt;p&gt;2.带着谨慎和尊重，我们将触及游戏还不敢探索的话题、谈论一些没有被谈论过的事情，这是一种艺术勇敢。&lt;/p&gt;&lt;p&gt;3.给玩家一些他们意想不到的大胆场景。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;九、新奇&lt;/span&gt;&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;824&quot; height=&quot;462&quot; src=&quot;https://image.gcores.com/01a65350882a602cbc8fc27a082b74f4-824-462.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;1.在保持适度熟悉的同时（这让玩家不容易感到迷失），尽量提供给玩家一些新奇感。&lt;/p&gt;&lt;p&gt;2.打破你的游戏规则去提出一个新的观点，或者一个新的视角的观点。前提是展示你拥有的规则，以便真正打破它们。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;十、效率&lt;/span&gt;&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;823&quot; height=&quot;460&quot; src=&quot;https://image.gcores.com/a0979839900a178928746128a512616c-823-460.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;1.作为设计师，你需要和团队进行合作，多与成员沟通并明晰他们的强弱项。&lt;/p&gt;&lt;p&gt;2.注意其他设计师的工作，避免在同一款游戏中重复相同的理念，并创造不同的内容。&lt;/p&gt;&lt;p&gt;3.各种学科的结合是创造出色内容的最简单方法。&lt;/p&gt; </description><link>https://www.gcores.com/articles/193120</link><guid isPermaLink="false">gcores-193120</guid><pubDate>Mon, 06 Jan 2025 04:00:00 GMT</pubDate><author>alexwondering</author><enclosure url="https://image.gcores.com/359f0e839719f28aff20611704027f32-1694-953.png" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/359f0e839719f28aff20611704027f32-1694-953.png"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/0de37101-c908-4792-bc86-cd6625fde716.mp3" length="436" type="audio/mp3"></enclosure><itunes:duration>0:07:16</itunes:duration><category>知识挖掘机</category></item><item><title>SIGGRAPH 粗读丨看看《地平线：西之绝境》燃烧海岸DLC中的云层渲染（下）</title><description>&lt;figure&gt;&lt;img alt=&quot;SIGGRAPH 粗读丨看看《地平线：西之绝境》燃烧海岸DLC中的云层渲染（下）&quot; src=&quot;https://image.gcores.com/be78fa210ed6a68d6a045d7cf2dc96ad-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/ce5b2ced-2156-4e8e-857f-d293706fdf1d.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/ce5b2ced-2156-4e8e-857f-d293706fdf1d.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/ce5b2ced-2156-4e8e-857f-d293706fdf1d.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;视觉更丰富的体积云&lt;/blockquote&gt;   &lt;h1&gt;前言&lt;/h1&gt;&lt;p&gt;之前的&lt;a href=&quot;https://www.gcores.com/articles/192613&quot; target=&quot;_blank&quot;&gt;中篇&lt;/a&gt;中，我们粗读并分析了作者集中讲述并较为关键的三个部分：（数学与制成）&lt;span style=&quot;font-weight: bold&quot;&gt;建模&lt;/span&gt;、&lt;span style=&quot;font-weight: bold&quot;&gt;密度采样&lt;/span&gt;、&lt;span style=&quot;font-weight: bold&quot;&gt;光照计算&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;相对于之前旧方案中的2.5D体积云，作者集中介绍了为使飞入云层成为可能而改进的体素云系统的取舍与优化。其中&lt;span style=&quot;font-weight: bold&quot;&gt;存储空间&lt;/span&gt;和&lt;span style=&quot;font-weight: bold&quot;&gt;指令调用&lt;/span&gt;（或算法复杂度）&lt;span style=&quot;font-weight: bold&quot;&gt;的平衡&lt;/span&gt;是作者最核心的一项实践智慧。 &lt;/p&gt;&lt;p&gt;如果只是纯理论研究，那可能了解到光照这一步也足够了。这次的下篇剩余的部分可以看作是工业化方面的一些收尾，以及整合与总结。&lt;/p&gt;&lt;p&gt;文章还是以翻译原文的讲稿为主。这次分为了上中下三篇——这是其中的下篇；打星号的部分则是我个人的补充说明。整篇分享中视频非常多，很多动态效果是完全无法用文字描述的；一方面我也转录了很多GIF段，另外原始精度的视频可以从文末链接去源地址下载。&lt;/p&gt;&lt;h1&gt;1 光线步进追踪——Ray-Marching&lt;/h1&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/dfe3d384bd2d50aac4921a543368a209-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;径直向前，我们也需要关注光线步进（ray-march）方面的性能节省，以支撑飞跃云层的性能需要。&lt;/p&gt;&lt;p&gt;*Marching right along翻译过来就是径直向前，作者这里又双押了march这个双关语。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/0faec3037dd45e4d4ef84ad6fd3cdadc-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;回顾一下我们的困境（dilemma）——由于没有很好的方法能获知云层（体素范围）中每个采样点的相关位置，我们无法高效地沿射线进行采样。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/00493d97025ccb4637b07d9a6987ceea-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;之前的封包法（Envelope method）云层方案中，我们整合了距离步进映射（distance step mapping）和锥体步进映射（cone step mapping）两种方式，来改进我们从2D数据生成的体积云中进行采样位置选取的过程。（*上篇中介绍了）&lt;/p&gt;&lt;p&gt;现在我们面临的是真正3维的问题了（基于体素）——幸运的是，有一项我们准备许久的技术此时可以派上用场了。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/376bbfb10dbb5d8f693554b4c7c068fc-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;blockquote&gt;Sphere tracing is a technique that uses the 3-dimensional distance to the closest implicit surface to determine step size. A signed distance field stores measurements of these distances for every point in space. Positive values are outside of the object and negative values are inside.&lt;/blockquote&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;球体追踪&lt;/span&gt;（Sphere tracing）是一项使用三维距离来确定最近的特定表面的技术（以确定步进长度）；而一个&lt;span style=&quot;font-weight: bold&quot;&gt;有向距离场&lt;/span&gt;（Signed Distance Fields，缩写为SDF）存储了空间中每一点的最小追踪距离——正值表示在物体（云）外，而负值表示在物体内。&lt;/p&gt;&lt;p&gt;当沿着体积云层进行ray-marching时，就可以使用（射线上某一点）在距离场中的距离值来作为最大的步长，以减少射线上（无效）采样的数量。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/b4cd723da76470d9ba07b94285c18034-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;有两篇很好的介绍SDF使用的资料：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;第一篇是Inigo Quilez的网页，你可以了解如何为一些原始（primitive）形体计算距离场。&lt;/li&gt;&lt;li&gt;第二篇是GDC上Sebastien Antolnen的讲座，从中你可以了解如何在高性能要求的场合高效使用这项技术。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;*不仅限于云层这个案例，在能使用SDF的场合，往往都会用来作为ray-march的重要补充。&lt;/p&gt;&lt;p&gt;*这个案例中，通过任意一点坐标查找体积云SDF，得出的值就是“从这一点为圆心刚好与云体相交的最小半径”；虽然查找无关方向，但是这个预计算的值是准确的，可以作为下一次递进的步长。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/3746e9ef8842817e4b90a57906c741e2-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;当艺术家完成构建他们的“人造云层形体”时（之前一篇介绍了，是用了生造词frankencloudscapes）：&lt;/p&gt;&lt;p&gt;我们生成了一个3D的SDF，并把它写入了一个单独的NVDF（*NVDF是之前介绍的一种体素云数据结构的缩写）。数据的原始范围是从-256到4096（米），但我们将其缩放至一个0到1的范围内。在图中（中间一张）你可以看到在远离云的位置，值逐渐增加（越来越白）。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/eafe33b2310ed8469c5ae5e1b2700c88-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;我们将其与云模型数据的NVDF分离开，因为它们会被频繁（每一步进过程）进行查找，因此我们不希望无缘由地引入内存瓶颈。提到内存瓶颈，距离场数据的压缩方式也很重要。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/f4bada5c206ba12d85e398dfd337ce34-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这里展示了Nathan Reed整理的（*原文还用了world-famous一词）BC格式表，以解释这一问题：&lt;/p&gt;&lt;p&gt;由于SDF会被频繁采样，因此对它压缩能降低每个纹素需要的字节数，以减少内存带宽占用——最终提升性能。&lt;/p&gt;&lt;p&gt;一个1通道的BC4似乎就很理想。而其中的tradeoff是，更少的字节数意味着较低的精度，而这对于一个基于SDF的yaymarch来说是一个大问题。&lt;/p&gt;&lt;p&gt;如果解压缩值过低，则会导致需要消耗额外的raymarch步数；如果过高，则会导致渲染故障。（*这里对应起来不太直观，但原文确实是decompressed value）&lt;/p&gt;&lt;p&gt;如何解决这一问题？我们采用了被称为“渲染工程师的黑魔法”的方案。（*原文就是Rendering engineer black magic，之前一篇也说了，作者喜欢使用一些技术分享中不常用的词汇）&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/78e102abe89d7b13694fba71492ab75e-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;通过使用高级技术工程师Hugh Malan开发的一套定制化BC1压缩器，SDF能在被压缩后依然能得到接近16bit的精度。(*1byte=8bits） &lt;/p&gt;&lt;blockquote&gt;There is a bonus slide right after this one with an in-depth explanation of Hugh’s work that you can look at, but to sum it up, we split up the data into three channels and then reassemble them after we sample the SDF in the ray-march shader. This approach worked because SDF data is smooth.&lt;/blockquote&gt;&lt;p&gt;这里（*原文的bonus页）中提供了对这套方案的详细解释，不过总的来说，我们是将数据分别存入三个通道中，之后在ray-march shader采样SDF的过程中重新集成——这个方式之所以能生效，是因为SDF数据是平滑的。&lt;/p&gt;&lt;p&gt;最终对于不同的射线长度，这（相对于无压缩的纹理数据）大约减少了10-30%的内存瓶颈——应对于我们最频繁采样的体素数据。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/2f4a375f65e636ae9ba422d8c58dda42-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;由于这是我们的体素方法中的最后一部分NVDF数据，至此我们可以整体对照一下单个系统的内存开销：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;垂直轮廓法VP， 大约0.5Mb&lt;/li&gt;&lt;li&gt;封包法EVM，大约9Mb&lt;/li&gt;&lt;li&gt;体素方法VM，25Mb&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;因此你可以看到额外的细节是从哪里来的——没有什么是能凭空出现的（Nothing comes for free），但有了体素云我们就能实现很多其它方法无法达到的效果。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/ec0192d8fc6325b1761bf6d7d680f020-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;不过这也不是我们唯一的加速体素ray-march的方法。&lt;/p&gt;&lt;p&gt;首先，我们定义了射线的边界，以限制潜在的采样数量。&lt;/p&gt;&lt;p&gt;射线从摄像机发出，以体素栅格边界作为终点——或是命中范围内的几何体。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/0c70fe172b85fedd19852b581711b392-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;下一步，我们需要计算下一步采样位置的步长。这个距离的计算是基于三个来源：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;基于距离场的有向距离值。&lt;/li&gt;&lt;li&gt;在云体积内自适应随距离逐渐递增的步长值。&lt;/li&gt;&lt;li&gt;以及一个分时抖动的偏移值（temporally jittered offset）以消除降采样带来的噪声。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;其中SDF被用来在云层外的位置以最佳方式放置采样点。（*图中空心圆的部分）&lt;/p&gt;&lt;p&gt;而&lt;span style=&quot;font-weight: bold&quot;&gt;自适应步长是基于到摄像机的距离&lt;/span&gt;来在云体积中放置采样点。这样，距离摄像机越远的云就能使用尽量大的步长，不同距离的云采样都能以相对最佳的步长进行。&lt;/p&gt;&lt;p&gt;而抖动偏移值从近处的动态到远处的静态云层之间进行切换，以降低采样精度不足带来的视觉故障，同时也避免使远处云层闪烁（shimmer）。（*这里应该是说不同距离有不同抖动偏移值）&lt;/p&gt;&lt;p&gt;有向距离值（步长）以自适应步长作为最大值，因而当在云层内采样（有向距离值变为负值）时，我们切换到使用自适应步长值。&lt;/p&gt;&lt;p&gt;步长值之后会被累加到采样距离上，以推算下一步的采样位置。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/7f8be8017aa4bfd0f93de9e00b08a8de-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;当要进行采样时，我们也查找SDF来进行一项优化。&lt;/p&gt;&lt;p&gt;如果SDF的值大于0，意味着采样点在云体积外，因此不需要进行采样操作。&lt;/p&gt;&lt;p&gt;如果值小于0，则按之前（*前一篇）描述的收集密度和光照样本，最终延射线方向累加。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/41096e312110c16d1ca18f3256096cad-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;之前的部分中已经数次涉及到特定场合的性能表现，而现在是时候系统性地看看性能情况了。重要的是对不同情况下可见物体的数量有一个基本的把握：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;当飞跃云层时，云是视觉中主要被渲染的物体。&lt;/li&gt;&lt;li&gt;当从地面远距离观看时，云的开销应按比例缩小以让位于其它的物体。&lt;/li&gt;&lt;li&gt;动态平衡这项开销是衡量我们的云系统是否成功的关键。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;因此，让我们看看不同情况下的渲染数据：第一种是从地面观看云层时，需要混合地面和云层；第二种是全屏云层。每个案例都以960x540分辨率渲染。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/87ceaf800075dfcf9448ed511aab070b-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;从地面开始，在没有光照或ray-march优化时，开销是10毫秒。&lt;/p&gt;&lt;p&gt;通过基于体素的光照优化（*之前介绍过，经过解耦预运算），降低到6.1毫秒。&lt;/p&gt;&lt;p&gt;经过ray-march优化，降低到2.2毫秒。&lt;/p&gt;&lt;p&gt;加上其它几何体（geometry）pass的开销，总开销是9.2毫秒。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/b0001b76a36b99b11b0aeff037bd4f19-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;当我们来到空中，在云层和可见的远景之中。在没有光照或ray-march优化时，开销是12毫秒——这种增量主要来自更多沿着俯瞰的方向穿过云层的射线，这部分开销可以通过对云的高度做偏移量（来减少射线的长度）以进行缓解。&lt;/p&gt;&lt;p&gt;通过基于体素的光照优化，降低到8.2毫秒。&lt;/p&gt;&lt;p&gt;经过ray-march优化，降低到4毫秒。&lt;/p&gt;&lt;p&gt;从图中可以看出，几何体pass的开销降低了2毫秒，而云渲染的开销增加了2毫秒——仍然是比较平衡的。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/54e15c7223490688deb8e1801f384f7f-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;当来到全是云层的高空，原始无优化的开销是10毫秒。&lt;/p&gt;&lt;p&gt;通过基于体素的光照优化，降低到8毫秒。&lt;/p&gt;&lt;p&gt;经过ray-march优化，降低到4毫秒。&lt;/p&gt;&lt;p&gt;几何体pass的开销降低了1毫秒，而云渲染的开销和之前一致。&lt;/p&gt;&lt;p&gt;因而在不同的情况中，性能预算被从地面几何体很好地传递（handoff）给了体积云。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/24fbea54218d1af1dd6f12497245d6a3-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;总结一下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;我们使用了压缩的SDF来规避内存瓶颈，并用来优化射线采样的步长。&lt;/li&gt;&lt;li&gt;我们（在逐步采样的过程）组合了SDF、自适应步长和抖动采样的方式，以获得在降采样精度情况下最佳的降噪效果。&lt;/li&gt;&lt;li&gt;体积云的整体开销在2.2毫秒到4毫秒之间，取决于观看的位置在地面还是空中。&lt;/li&gt;&lt;li&gt;性能开销从地面到空中有合适的规模适应（scales properly）。&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;2 渲染——Rendering&lt;/h1&gt;&lt;p&gt;*这里的rendering主要概括了前述方案整合后的高帧数模式的策略。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/3aa876e89f5fa70e8a5f558b66b7cdef-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;30hz、60hz、40hz或其它——每个人都有自己倾向选择的游玩帧数（*刷新率，虽然不完全一样）。我们作为图形程序员和艺术家的工作是确保各种渲染模式都是受支持的。在基础性能表现的帧率勉强达到（squeaks）30hz模式的标准时，我们还需要支持高帧率模式——意味着每帧只有一半的渲染时间预算。&lt;/p&gt;&lt;p&gt;*其实谁都想画面又好帧数又好，但实际上不可能兼得。这里作者团队的思路是先按高画质30帧来做。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/cd3ba4e1b930003c5c22b8e7086afe5e-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;blockquote&gt;Recall that for the Envelope Method, we did away with temporal upscaling and split the render into two passes: High res in the distance to prevent aliasing and low res up close to improve performance for the most expensive parts of the ray-march. Would a similar approach work for 40 and 60hz modes? The answer is yes. For High framerate modes, we do this exactly the same way.&lt;/blockquote&gt;&lt;p&gt;回顾在封包法中的超精度策略，我们执行了一项分时超精度（temporal upscaling）算法，并将渲染步骤拆分成两个pass——远距离的高精度pass，以避免走样；近距离的低精度pass，以提升开销最大的ray-march部分的性能。类似的做法是否能用于40和60hz的模式呢？答案是肯定的。对于更高帧率的模式，我们采用了完全相同的策略。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/91c97dfb1a39d4c77f1f80030af13cd2-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这里展示了一个例子：&lt;/p&gt;&lt;p&gt;云层在30hz模式下的帧开销是4毫秒。当我们将渲染拆分到不同分辨率的两个pass中，开销降低到2.1毫秒——这个方案被用于40和60hz模式中。&lt;/p&gt;&lt;p&gt;让我们将两种模式并排做一个对比。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/d1bc6e9136a020e45f6e8d856e329a57-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;可以看到在60hz的视频中，在有锐利和致密特性的云层处，画面会显得更“像素化”（pixelation ），但低密度的区域能较好掩盖这一点。除此之外结果已经足够好了，因为这种体验本身几乎没有损失。&lt;/p&gt;&lt;p&gt;*有兴趣的可以去看看1080P版本的原始PPT，压缩后的图片和GIF已经无法反映这种区别了。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/70b8903120435c4b114eed7561989e9f-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;小结一下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;我们把云的渲染拆分成了两个pass，近处低精度、远处高精度。&lt;/li&gt;&lt;li&gt;这几乎使渲染时间减半了——而这能很好符合60hz模式的渲染时间需求。&lt;/li&gt;&lt;li&gt;40hz模式也使用同样的方法。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;*虽然都知道将分辨率会提高精度，但作者的这种组合策略确实非常符合云的视觉特点及需求——近处相对模糊而远处清晰。&lt;/p&gt;&lt;h1&gt;3 制作过程——Production&lt;/h1&gt;&lt;p&gt;*到了这一步才算进入很多人喜欢提的一个词，“工业化”制作。第三代体积云系统正式作为一个可以丰富参数化的可交付模块提供使用了。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/48b84699a3900a556f00f43baa1872f3-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;下面让我们看看这个系统在游戏中的一些实际应用。分别从为背景元素和可探索元素构建云的形体开始。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/959b03a73ea2803d8ffebc8753339316-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;blockquote&gt;This is a “chickenscratch” doodle that I made of post apocalyptic Los Angeles. It helped to lay this out along the east-west and North-South views because these are the directions against which we need a good composition of silhouettes in terms of the arc of the sun.&lt;/blockquote&gt;&lt;p&gt;这里通过潦草的手绘草稿（“chickenscratch” doodle）展示了洛杉矶的后启示录概念图。这有助于我们基于“从东到西”和“从北到南”的视图来安排景物的排列，因为在这些方向上我们需要安排一组好的物体剪影组合——对应各方向的太阳弧度。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;426&quot; height=&quot;240&quot; src=&quot;https://image.gcores.com/f89042b830f2e9b60c5c0eb38356f3ff-426-240.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;我们从放置大规模的云层开始，因此它能在一天的各时段、从各角度观察都有不错的效果。&lt;/p&gt;&lt;p&gt;下一步，我们添加其它的特性和相邻云层结构。（*原文是connective tissue）&lt;/p&gt;&lt;p&gt;对于一部分云我们用Atlas工具添加通道和孔洞，以增加探索体验。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;426&quot; height=&quot;240&quot; src=&quot;https://image.gcores.com/8c619562ac365ba04b9bfdda21e79f2f-426-240.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在制作时我们也会试飞一下以快速度体验天空云层中的实际情况。&lt;/p&gt;&lt;p&gt;从云层孔洞中穿过自身就足够有趣，以至于有时很难把工作和玩区分开。&lt;/p&gt;&lt;p&gt;*so it was hard to distinguish work from play at times——开发中的内容往往会重复很多次而让人疲倦，尽管如此还能觉得有趣，这是开发游戏中难得的体验。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;426&quot; height=&quot;240&quot; src=&quot;https://image.gcores.com/cc2fe072644a022502c15f1d4da0f0fd-426-240.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;让我们看看普通速度飞跃通道的视频（*虽然GIF还是加速过）。&lt;/p&gt;&lt;p&gt;注意光照质量在云的内部以及通道的背面的效果——光照运转良好。&lt;/p&gt;&lt;p&gt;能看到翅膀尖端的细小气流么？这是通过检测翅膀与云交叠时发射粒子来实现的。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/1d3178fb7fde13fb6bf412d0f0c74534-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;以防万一你会觉得“云层不会有这样的通道”，这里是一张我拍摄的照片——右边的黑点是一只鸟，而不是一个机器恐龙。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;426&quot; height=&quot;240&quot; src=&quot;https://image.gcores.com/b182163d9ef953bfee12130adf725137-426-240.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;我们对每块云都多次执行这一步骤，之后将它们组成一组云的形体。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/44394aefdf74e7ce50fa19eab17cc674-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这里展示了实际游戏中不同位置观察到的云形体。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;426&quot; height=&quot;240&quot; src=&quot;https://image.gcores.com/170276c167bb26d8a91591dc5b7d8a51-426-240.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;对于转场动画我们可以使用一个变换（transform）来移动已有的云层，避免增加额外的内存。&lt;/p&gt;&lt;p&gt;*这里是说运行时把已有的体积云移动入画，就不用额外生成动画用的体积云了。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/887bf6d478e531aae39491671dac1b7a-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;对于游戏最后的BOSS战，我们构建了环绕的云形体，使场地像一个竞技场。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/f5265c2d81cef7e48fbc019306e18196-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;总结一下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;以体素云方式建模比旧的“人造云层”方案更简单。&lt;/li&gt;&lt;li&gt;这是工作流程上实在的&lt;span style=&quot;font-weight: bold&quot;&gt;范式转换&lt;/span&gt;（Paradigm shift），因为你可以制作任何形体的云——甚至是在天空写字。&lt;/li&gt;&lt;li&gt;转场动画能使用已有的云形体，通过空间变换（移动云）来节省内存。&lt;/li&gt;&lt;li&gt;也为例如BOSS战等场合订制了专门的云形体。&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;4 雷鸟降临——The Stormbird Encounter&lt;/h1&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/462ecde26368496e3ae7568757ef7e68-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;被我们称为“体素云方法”的体积云系统从结果来看运作良好——可以看到和之前的方案比较来说，体素云实现了各种突破。&lt;/p&gt;&lt;p&gt;演进（Evolution，可以理解成动态流动）是未来待开发的一项内容。但要实现这一点就不仅需要解决实时体素云的演进，还需要生成实时变化的SDF了——这就留给未来继续开发吧。&lt;/p&gt;&lt;p&gt;我们把这项成果视为完全的成功——因为我们不仅很罕见地保留了初期预想的所有内容，并且创造了更多。&lt;/p&gt;&lt;p&gt;一项有价值的takeaway是：云的密度不仅仅是关于体素的密度，也关于结果的视觉感知复杂度。采用高精度当然是其中一项方案，但在计算机图形领域往往有不止一种问题解法——如我们所介绍的那样。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/5a70a837e10745372552e637f3fa5620-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在结束讲座前，我还有一项内容想分享。游戏中，我们想提供不仅仅是飞跃云层，而是额外创造在一片风暴云中的一段独特的游戏体验。&lt;/p&gt;&lt;p&gt;游戏中的雷鸟有着很多背景设定（lore）。这是一只天空中的顶级捕食者（apex predator），可以控制小范围的天气，以闪电制造风暴云。为什么之前我们一直没在游戏中展示这一点？很简单，因为之前的技术方案不支持，直到现在（*体素云）。&lt;/p&gt;&lt;p&gt;主世界设计师Elijah Houck构想了很多追击玩法（cat and mouse game）的方案。它是一个顶级捕食者，而你的坐骑相对显得很小。Elijah想象它把玩家引入它的巢穴——一个风暴云中，之后突袭并击杀了你的坐骑，好在玩家角色——alloy有滑翔器。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/71d826d14fff7e06d23a8838ed8d6044-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这里展示了这段追击战，在最后击杀它后风暴云也消散了。&lt;/p&gt;&lt;p&gt;*这里原PPT有一段一分半的演示，这里没法放进来了——效果很不错。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/76c92c578bc27fe264bae21d9f8566ec-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;因此，留给我的任务是设计云的外轮廓、完成光照方案、设计云的内部通道——以及最重要的是让它看起来不像一个简单的云孔洞。最后，在击杀雷鸟后要让云层消散。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/6fddca55e4a5dcb5cb580d2a14ecd7c8-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;我们希望它呈现为一个很局部的风暴，而不是类似西之禁地中的超大型风暴。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;426&quot; height=&quot;240&quot; src=&quot;https://image.gcores.com/430b4540f5d81cfde7d27701a357d38c-426-240.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这里展示了一个早期的流体模拟尝试——一缕垂直扩散的云，底部有着纤细材质的边沿。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/f40ccad4143d7ea3027fcc54e23202e6-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这里展示了添加了（来自西之禁地中的）辉光代码后的效果——这一早期结果在两个角度上改变了风暴云的开发思路。&lt;/p&gt;&lt;p&gt;首先，我们认识到这相较于我们想构建的遭遇雷鸟的云（需要有足够的内部结构）来说太小了。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/d742902f8d13f5b9c15d69adbdf14a98-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;其次，注意到底部的辉光效果在视觉上的开口效果。这使我们考虑使用内部光照来突出展示开口。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;426&quot; height=&quot;240&quot; src=&quot;https://image.gcores.com/e593552345292976d646ba7e8cc12a6c-426-240.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;因此我确定无论地面上是否有放电现象，云的内部需要被照亮来突出某些内部结构。我也试着添加了一些预制好的闪电效果。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/bb5ea798a8c210e93ba5664efe637aaa-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在风暴云范围下方，我们也使用了局部天气系统（来制造降雨）。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;426&quot; height=&quot;240&quot; src=&quot;https://image.gcores.com/9d47a8f1c287ed30fa4a9a39b3dccb0b-426-240.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这里是游戏中整个雷云外部的远距离完整展现。&lt;/p&gt;&lt;p&gt;在云的内部，我希望玩家遭遇一些预期外的内容，不止是建模好的孔洞——而是一些对人类来说很诡异而对雷鸟来说很舒适的事物。玩家遭遇它时，会觉得既可怕又合理。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;426&quot; height=&quot;240&quot; src=&quot;https://image.gcores.com/effa3fada7e69153d99481d7d7109213-426-240.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;合理的一种考虑是云层中可能有一个能量中心，使雷鸟能维持这种非自然的风暴。当击杀雷鸟后，能量中心和云都消散了。&lt;/p&gt;&lt;p&gt;图中展示了被我昵称为“the Egg”的这一能量中心。其中小型的电弧显然受到了Nikola Tesla的启发。&lt;/p&gt;&lt;p&gt;我们也持续调整了很多版，直到“egg”的下方能明显看到放电现象——这让它起到了一个视觉突出的作用。&lt;/p&gt;&lt;p&gt;作为实现的概括，这是另一处我们取自超级风暴系统并与体素云结合的光照技术。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/1652ef1f292d7db09e625108b08b7a37-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;对于内部空间，我使用了Atlas工具来切开孔洞和创建egg区域。我确保在此过程增加了足够的小开口（pockets），使雷鸟能隐藏在其中并发动突袭。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/30d0663f1201951cb32076cb2cd40b5e-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;我也添加了足够空间的大开口，使光线能进入云内部，使其在一天不同时段呈现不同效果——毕竟这是一个开放世界游戏。&lt;/p&gt;&lt;p&gt;基于所有这些已经实现的细节，Elijah制作了遭遇战的音频，提供了一些很棒的音效。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/4287325c3ac0cd38c13eaa250350cdd8-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;因为我们升级到了新的体素云渲染方案，并且开始探索云的物理特性以及环境交互，以及所有这些特性都开放给游戏脚本来调度——我们最终能为开发组提供更多，并为玩家呈现独一无二的云层飞跃体验。让人兴奋的是，这仅是这类游玩体验的开端。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/1d85442512fba9679f2b609a068f7a80-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;因此最后我们把图表添加了两行——现在只有体素云系统能用于任务设计以及有着更多潜在的扩展可能性。&lt;/p&gt;&lt;p&gt;*这个雷鸟的案例就是一个既有压力但又良性向上的开发环境中，从一个小的原型到交付的功能的方方面面，其中有很多开发者的自主创新和高要求——得益于体积云系统的“范式转换”。&lt;/p&gt;&lt;h1&gt;结语&lt;/h1&gt;&lt;p&gt;作为一款“偏罐头”的一度独占的3A大作的续作的DLC中出现的内容，我对于有多少人能实际玩到这些让人振奋的体积云效果感到不乐观；至于后续移植到PC，这种针对PS5踩在性能及格线上的高质量效果，要适配各种不同组合的PC硬件想来也是让人头大的。对于“开放世界”，可能玩家第一时间会想到“罐头”，而体积云的制作者想到的是——它在time of day需要有不同的合理表现。&lt;/p&gt;&lt;p&gt;无论如何，至少在PS5这个世代的初期，这些索尼第一方游戏的整体质量是让人放心而振奋的——和现在主要第一方游戏的境遇可以说是天上地下。&lt;/p&gt;&lt;p&gt;虽然我没有玩过这款游戏，但在本来就数量不多的高画质3A游戏中，这款游戏里的体积云应该是独一份的了——更何况Nubis3的开发者已经是十年以上的资深体积云渲染专家了。&lt;/p&gt;&lt;p&gt;一方面，平衡内存和指令调用的实践智慧让人印象深刻——即使需要降低分辨率来提高帧数，也不是简单的整体降低，而是区分了两个pass；另一方面，作者通过照片和观察生活中的物理现象的方式来归纳模型——这种以实证为基础的方法也让人觉得很靠谱。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;参与开发的成员，前置的讲座，以及参考文献&quot; width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/317e402506077068c144972702fc5bb9-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt; &lt;/p&gt;&lt;p&gt;最后是本文的资料链接：&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;Nubis3: Methods (and madness) to model and render immersive real-time voxel-based&lt;/span&gt; &lt;span style=&quot;font-weight: bold&quot;&gt;cloud&lt;/span&gt; &lt;a href=&quot;https://www.gcores.com/link?target=https%3A%2F%2Fd3d3g8mu99pzk9.cloudfront.net%2FAndrewSchneider%2FNubis%2520Cubed%2520-%25201080.pptx&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-weight: bold; text-decoration: underline&quot;&gt;1080P PPTX&lt;/span&gt;&lt;/a&gt; &lt;a href=&quot;https://www.gcores.com/link?target=https%3A%2F%2Fadvances.realtimerendering.com%2Fs2023%2FNubis%2520Cubed%2520(Advances%25202023).pdf&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-weight: bold; text-decoration: underline&quot;&gt;PDF&lt;/span&gt;&lt;/a&gt; &lt;/p&gt; </description><link>https://www.gcores.com/articles/192965</link><guid isPermaLink="false">gcores-192965</guid><pubDate>Sat, 04 Jan 2025 05:30:00 GMT</pubDate><author>Hakumen</author><enclosure url="https://image.gcores.com/be78fa210ed6a68d6a045d7cf2dc96ad-1440-810.png" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/be78fa210ed6a68d6a045d7cf2dc96ad-1440-810.png"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/ce5b2ced-2156-4e8e-857f-d293706fdf1d.mp3" length="1606" type="audio/mp3"></enclosure><itunes:duration>0:26:46</itunes:duration><category>知识挖掘机</category></item><item><title>枪械设计分析——基础数值</title><description>&lt;figure&gt;&lt;img alt=&quot;枪械设计分析——基础数值&quot; src=&quot;https://image.gcores.com/94ed3eb7a25c79bbc9100a791fe6e1dd-452-281.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/33dd8f66-1620-4fd1-a2f9-708dc87b8174.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/33dd8f66-1620-4fd1-a2f9-708dc87b8174.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/33dd8f66-1620-4fd1-a2f9-708dc87b8174.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;一点自己的学习总结&lt;/blockquote&gt;   &lt;p&gt; &lt;/p&gt;&lt;h1&gt;数值构成&lt;/h1&gt;&lt;h2&gt;1.TTK&lt;/h2&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;定义：&lt;/span&gt;开第一枪后，&lt;span style=&quot;font-weight: bold&quot;&gt;子弹全部命中，击杀敌人所需要的时间。&lt;/span&gt;TTK越短，枪械理论强度越高。&lt;/p&gt;&lt;h3&gt;1.1如何计算TTK&lt;/h3&gt;   &lt;figure&gt;&lt;img width=&quot;735&quot; height=&quot;290&quot; src=&quot;https://image.gcores.com/286609ba097042289c8fab389e52e84a-735-290.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;设第K发子弹将击杀对手，则TTK=（K-1）*射速若敌人血量为100AK伤害是35，射速是0.108秒/发，它的&lt;span style=&quot;font-weight: bold&quot;&gt;TTK就是 (3-1)*0.108=0.216秒。&lt;/span&gt;M4伤害是30，射速是0.095秒/发。它的&lt;span style=&quot;font-weight: bold&quot;&gt;TTK就是 (4-1)*0.095=0.285秒。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;ps：所以当一把枪械一枪爆头的伤害超过100时，我们可以说它的极限TTK为0&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;2.基础数值&lt;/h2&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;定义：与TTK直接挂钩的数值，决定枪械的数值强度&lt;/span&gt;武器的数值设计，用最简单的说法可以概括为：&lt;span style=&quot;font-weight: bold&quot;&gt;基础数值确定强度上限，其他数值构建手感差异&lt;/span&gt;&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;707&quot; height=&quot;353&quot; src=&quot;https://image.gcores.com/92c246f4e8fc4acc4723e17ae80c4815-707-353.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h3&gt;2.1基础伤害&lt;/h3&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;定义：&lt;/span&gt;每一发子弹命中敌方目标时造成的伤害数额。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;常见的不同距离伤害设计：分段：&lt;/span&gt;0-10M 伤害为33 , 11-25M伤害为26 , 25M以外伤害为20&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;优点：&lt;/span&gt;简单灵活，&lt;span style=&quot;font-weight: bold&quot;&gt;TTK稳定可控&lt;/span&gt;，可以精准控制距离区间的伤害，并确保衰减后的伤害是常数。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;固定：&lt;/span&gt;全距离统一伤害为33&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;衰减：&lt;/span&gt;从0-60M，伤害以线性/非线性的方式递减非线性衰减&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;设计目的：&lt;/span&gt;主要是为了调控玩家的交战距离，影响玩家的打法，比如鼓励近战or远点对抽&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;634&quot; src=&quot;https://image.gcores.com/60f88bdfeea94a0f0edba15108da3bb0-1080-634.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;线性和非线性衰减曲线的选择，主要看设计目的。比如游戏鼓励玩家近距离对枪，&lt;span style=&quot;font-weight: bold&quot;&gt;那选择图3（非线性衰减-）的曲线，可以让枪械前期伤害衰减迅速&lt;/span&gt;，同时搭配游戏中各种加强角色身法的3C机制，如滑铲、翻墙、钩锁等，最终玩家行为就会比较符合策划的&lt;span style=&quot;font-weight: bold&quot;&gt;近距离对枪预期&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;护甲衰减&lt;/span&gt;&lt;/p&gt;&lt;p&gt;防具：防弹衣/头盔。顾名思义，防具就是覆盖在角色受击框上的护甲，一般覆盖躯干和头部。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;620&quot; height=&quot;903&quot; src=&quot;https://image.gcores.com/570acf4a9046f68f1dff292a3657abac-620-903.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt;&lt;p&gt;对于不同游戏来说，防具服务于不同的目的，但基本上都是射击游戏的标配：&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;746&quot; height=&quot;171&quot; src=&quot;https://image.gcores.com/90a66d96368d94800fb3bb3560e789b2-746-171.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;619&quot; height=&quot;690&quot; src=&quot;https://image.gcores.com/1b197e09842e84c4d1beb3e586bc0212-619-690.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h3&gt;2.2伤害倍率&lt;/h3&gt;&lt;p&gt;定义：命中目标的不同部位，在当前距离伤害的基础上乘以部位倍率，造成不同的伤害数值。CS中命中不同部位的伤害倍率：&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;162&quot; height=&quot;123&quot; src=&quot;https://image.gcores.com/6fdae03558b3cb768810e66c909b29b6-162-123.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;以图示为例，同样的子弹在命中躯干、手臂和头部时会造成不同的伤害，图示中命中腿部为0.75倍，脖子以上部位1.25倍，命中头部高达4倍，&lt;span style=&quot;font-weight: bold&quot;&gt;奖励玩家的精准射击行为。&lt;/span&gt;这也奠定了CS高度集中的战斗节奏的基础。&lt;/p&gt;&lt;h3&gt;2.3射速&lt;/h3&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;定义：&lt;/span&gt;单位时间内能发射的子弹数，或是更简单的武器上一发子弹射击完成后，到下一发子弹允许射击的时间间隔，常见的单位有RPM/RPS或者单纯用毫秒&lt;span style=&quot;font-weight: bold&quot;&gt;射速对实际TTK会有较大的影响，射速越快，实际TTK与理论TTK越接近&lt;/span&gt;原理是当玩家出现空枪的时候，射速更快的枪能帮助玩家快速的跟上下一颗子弹，降低空枪惩罚。&lt;span style=&quot;font-weight: bold&quot;&gt;因此，在设计时，慢射速的枪械理论TTK可以给短一点，高射速枪械的理论TTK则要相对偏长，从而获得一个强度相对接近的实际TTK效果。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;2.4弹道与下坠&lt;/h3&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;定义：&lt;/span&gt;子弹在空中的飞行速度，及飞行过程中受重力影响导致的子弹下落。&lt;span style=&quot;font-weight: bold&quot;&gt;可以将hitscan视为弹速无限大从而射出了一条全距离的直线，而projectile则是由于弹速慢受重力影响会下坠的抛物线。巷战游戏用Hit-Scan是因为地图小、交战距离短、预期TTK短，选用Hit-Scan更适合玩法。&lt;/span&gt;&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;536&quot; height=&quot;258&quot; src=&quot;https://image.gcores.com/fde1c2966d40279a6ac99f68fe5df384-536-258.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;但随着现象级游戏PUBG爆火，大地图BR（Battle Royale大逃杀）逐渐成为主流，子弹也变成了有重力和飞行速度的Projectile。&lt;span style=&quot;font-weight: bold&quot;&gt;在大地图中，远距离对枪场景多，Projectile变成了射击体验的一部分。&lt;/span&gt;玩家需要考虑远距离开枪的弹道下坠，在目标上方开火。也要考虑飞行弹速，提前预瞄敌方移动路径开火。&lt;/p&gt;&lt;p&gt;目前行业内的游戏一般都会同时具备这两种子弹实现方式，包括《守望先锋》（根据英雄不同区分）《COD》（根据模式、枪械不同区分）等等下坠的量取决于&lt;span style=&quot;font-weight: bold&quot;&gt;弹速和配置的重力值&lt;/span&gt;，这个值建议开放出来分开配置。整体来看，projectile相对于hitscan要相对麻烦一些，无论是性能耗费还是各种CS校验的处理：特殊处理允许停火后造成伤害、放宽射击间隔与子弹数量变化等，都是开发过程中容易遇到的问题，但多一个数值维度，设计空间会大很多，尤其是&lt;span style=&quot;font-weight: bold&quot;&gt;有助于把控中远距离武器强度。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;2.5穿透力：&lt;/h3&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;定义：&lt;/span&gt;子弹在命中可穿透材质后方的目标时，造成伤害的衰减幅度根据不同枪械确定其&lt;span style=&quot;font-weight: bold&quot;&gt;可穿透的材质&lt;/span&gt;（木头/石头/金属/玻璃/水面/冰块/草堆/&lt;span style=&quot;font-weight: bold&quot;&gt;人体&lt;/span&gt;）。&lt;/p&gt;&lt;p&gt;根据不同的材质，分别给定衰减倍率，同时配一个&lt;span style=&quot;font-weight: bold&quot;&gt;最大穿透层数&lt;/span&gt;。一般来说一个BOX算1层，例如一个木箱和一扇木门都算1层。&lt;span style=&quot;font-weight: bold&quot;&gt;如下图的中门和箱子均算作1层：&lt;/span&gt;&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;364&quot; height=&quot;397&quot; src=&quot;https://image.gcores.com/57e79f8a49c99c5ccaee8b418631cc92-364-397.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1014&quot; height=&quot;596&quot; src=&quot;https://image.gcores.com/8e267748712aa5670d76a7cbf6ba5f32-1014-596.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在不同材质衰减倍率的基础上，再加上&lt;span style=&quot;font-weight: bold&quot;&gt;厚度&lt;/span&gt;的计算，物体越厚，穿透衰减越大。&lt;/p&gt;&lt;p&gt;仍然是在这两张图的基础上做一个理解，&lt;span style=&quot;font-weight: bold&quot;&gt;穿透木门的伤害衰减显然会远远低于穿透箱体。&lt;/span&gt;&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;364&quot; height=&quot;397&quot; src=&quot;https://image.gcores.com/6af55a2296152579f0cf52c9f5c9be1c-364-397.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1014&quot; height=&quot;596&quot; src=&quot;https://image.gcores.com/4ea14a0271500f246270862803740072-1014-596.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt;&lt;p&gt;穿透衰减除了用来区分枪系，平衡枪械强度外，还会影响玩家&lt;span style=&quot;font-weight: bold&quot;&gt;对局内信息的重视程度和续航能力&lt;/span&gt;。因为穿透会暴露枪线和枪声，消耗子弹。&lt;/p&gt;&lt;p&gt;同时，游戏越鼓励穿透行为，那玩家对信息就越不重视，对枪械续航的要求越高。所以不同游戏要根据自己游戏的需要，调控玩家的穿透行为。&lt;/p&gt;&lt;p&gt;若设计一个最简单的公式用于计算武器的穿透能力：&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;穿透材质后的伤害=命中材质时的子弹伤害*子弹穿透系数*材质伤害衰减*命中部位倍率&lt;/span&gt;&lt;/p&gt;&lt;p&gt;因此从这个简单的公式中我们可以发现，&lt;span style=&quot;font-weight: bold&quot;&gt;武器的穿透力&lt;/span&gt;并不仅仅是由武器决定的，同样&lt;span style=&quot;font-weight: bold&quot;&gt;受命中材质的影响&lt;/span&gt;。&lt;/p&gt;&lt;h3&gt;2.6弹匣容量与换弹时间：&lt;/h3&gt;&lt;p&gt;在绝大多数射击游戏当中，弹量与换弹时间并不能算作枪械的最基础的属性，因为它对单个目标的TTK没有决定性的影响。&lt;/p&gt;&lt;p&gt;但部分游戏（例如APEX）通过投放机动能力，增加护甲等手段大幅提升了玩家的TTD（Time to death），&lt;span style=&quot;font-weight: bold&quot;&gt;对单个目标的击杀需要更换子弹，此时就需要考虑弹匣容量和换弹时间的因素。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;具体的子弹数量和换弹时间设计还是取决于项目的TTK标准，APEX的血量和机动力下硬去套CSGO的弹量标准肯定是不可取的，换弹时间方面通俗理解为小弹匣换弹快，大弹匣换弹慢即可。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;因此APEX中的枪是不能改过伤害数值之后直接放在CSGO里的，因为各种方面的数值比如后坐力，弹匣/射速等都尚未做过修正，差异会很大。&lt;/span&gt;&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;330&quot; height=&quot;123&quot; src=&quot;https://image.gcores.com/eb0d4f347262cb996ee4da5397b4f484-330-123.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;弹匣容量：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;我们在做多人对抗模式的时候&lt;span style=&quot;font-weight: bold&quot;&gt;，弹匣容量或者说是弹药控制是限制玩家一打多的重要手段，有助于控制武器的上限&lt;/span&gt;，我们可以看到CSGO或者&lt;a href=&quot;https://zhida.zhihu.com/search?content_id=191779928&amp;amp;content_type=Article&amp;amp;match_order=2&amp;amp;q=valorant&amp;amp;zhida_source=entity&quot; target=&quot;_blank&quot;&gt;valorant&lt;/a&gt;都会尽量把单个弹匣的子弹控制在30发以内，这里的评估标准是你希望玩家一个弹匣极限情况能造成多少击杀。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;换弹时间：&lt;/span&gt;换弹时间可以拆分成两部分，&lt;span style=&quot;font-weight: bold&quot;&gt;逻辑换弹时间和动画换弹时间&lt;/span&gt;以CS的AK举例，在弹匣插上的瞬间，子弹数量已经变成30，此时可以通过重新切枪等手段提前打断换弹后摇动画，部分游戏支持开火打断换弹动作，从而获得一点点优势。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;从玩家开始换弹，到子弹数量变化为30的时间，可以叫做逻辑换弹时间玩家开始换弹&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;到整个换弹动画播放完毕，进入idle的时间，叫做动画换弹时间&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-style: italic&quot;&gt;它的好处也显而易见：相对于完整播放换弹动画，使用插入弹匣的节点上报换弹成功，会使玩家对于武器是否完成换弹有更为清楚的认知（音效、视觉都会更直观）&lt;/span&gt;使用插入弹匣的节点上报换弹成功，会使玩家对于武器是否完成换弹有更为清楚的认知（音效、视觉都会更直观）&lt;span style=&quot;font-weight: bold&quot;&gt;使用插入弹匣的节点上报换弹成功，会使玩家对于武器是否完成换弹有更为清楚的认知（音效、视觉都会更直观）&lt;/span&gt;&lt;br&gt; &lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-style: italic&quot;&gt;至此，我把我对枪械设计中基础数值的理解大致捋了一遍。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-style: italic&quot;&gt;也非常希望能对大伙理解游戏枪械设计能有所帮助！&lt;/span&gt;&lt;/p&gt; </description><link>https://www.gcores.com/articles/193077</link><guid isPermaLink="false">gcores-193077</guid><pubDate>Fri, 03 Jan 2025 14:02:19 GMT</pubDate><author>Anyi_Zerio</author><enclosure url="https://image.gcores.com/94ed3eb7a25c79bbc9100a791fe6e1dd-452-281.png" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/94ed3eb7a25c79bbc9100a791fe6e1dd-452-281.png"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/33dd8f66-1620-4fd1-a2f9-708dc87b8174.mp3" length="577" type="audio/mp3"></enclosure><itunes:duration>0:09:37</itunes:duration><category>知识挖掘机</category></item><item><title>《耻辱2》沙尘区拆解</title><description>&lt;figure&gt;&lt;img alt=&quot;《耻辱2》沙尘区拆解&quot; src=&quot;https://image.gcores.com/1fbcc3f3e3a1bdde4a216a4a66e30e18-1662-906.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/b384719a-01da-4166-99e3-1d2919280802.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/b384719a-01da-4166-99e3-1d2919280802.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/b384719a-01da-4166-99e3-1d2919280802.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;学习笔记&lt;/blockquote&gt;   &lt;p&gt;前言：&lt;/p&gt;&lt;p&gt;耻辱的常常以优秀的箱庭关卡设计被玩家称道，其中沙城区，机关宅邸，石板上的裂缝，皇家美术馆等关卡设计尤为突出。&lt;/p&gt;&lt;blockquote&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;“沙尘区的是集系列特色于一体的优秀关卡，关卡充分融合耻辱系列人物与剧情的两面性，贯彻执行沉浸模拟类游戏的核心，紧紧相扣“选择”、“挑战”和“改变”三大旋律。”&lt;/span&gt;&lt;/blockquote&gt;&lt;p&gt;且除了沙尘暴以外没有如机关宅邸和石板上的裂缝引入特殊机制，关卡不容易出现变化，沙暴对关卡拆解影响较小，且相较于其他关卡拆解难度较低，故作为本次关卡拆解案例。&lt;/p&gt;&lt;h2&gt;玩家目标拆解：&lt;/h2&gt;&lt;p&gt;该关卡由事件主导，在游戏开始就能够获得本关的任务，破解密码锁，进入斯蒂尔顿大宅，为玩家提供了探索地图的动机。&lt;/p&gt;&lt;p&gt;该关卡中拥有着两种势力，有三种通关方式，分别为击杀一方首领去另一方领取密码或者去找到书信中的密码，或者通过之前关卡中的线索直接推测书密码。&lt;/p&gt;&lt;p&gt;还有着一贯的黑市，符文。&lt;/p&gt;&lt;p&gt;所以该关卡玩家的目标和任务可以拆解为：&lt;/p&gt;&lt;p&gt;总目标：用密码打开大门&lt;/p&gt;&lt;p&gt;前置条件:穿过光之壁&lt;/p&gt;&lt;p&gt;通关方式：帮助一方势力从而获得密码&lt;/p&gt;&lt;p&gt;隐藏通关方式：中立但是获得密码——通过听平民聊天，或，自行推断出密码&lt;/p&gt;&lt;p&gt;特殊行动：Jindosh锁，童年家园，另一个解决方案，黑市抢劫&lt;/p&gt;&lt;p&gt;额外奖励：蓝图，两个关卡内收藏品，符文&lt;/p&gt;&lt;p&gt;可以看出不同任务对玩家对地图的理解要求不同，对地图的理解越深刻，能够达成的任务越多。这样任务安排的好处是玩家很难在一次或两次的游玩中体验到该关卡的全部内容，从而鼓励玩家进行多周目游玩。&lt;/p&gt;&lt;h2&gt;地图总览&lt;/h2&gt;   &lt;figure&gt;&lt;img width=&quot;2225&quot; height=&quot;1230&quot; src=&quot;https://image.gcores.com/a7d184f0d6b8600bcd05e3031f244e46-2225-1230.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1286&quot; height=&quot;680&quot; src=&quot;https://image.gcores.com/9fad6730ae5df16318159e75ba00e1a5-1286-680.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;区域关系&lt;/span&gt;&lt;/p&gt;&lt;p&gt;从区域关系可以看出，地图大体分为四个关键区域，围绕一个核心点雕塑广场分布呈环形分布，各区域有独立主题，且各区域内建筑围绕区域内一个中心发散。&lt;/p&gt;&lt;p&gt;这样的设计可以让玩家以位于中心的雕塑广场作为参照物，能够较快对地图建立起基础认知，即使迷失方向或者没有找到其他路径，也能快速回到雕塑广场重新进行探索，降低玩家沉没成本。&lt;/p&gt;&lt;p&gt;大部分区域都提供了两条或以上的联通路径，为玩家提供了多种行动路线，且不同行动路线能够提供不同反馈。好处在于玩家不会因为某个地方找不到路而无法继续前进，并且能够给玩家提供给更多选择让他们觉得是自己在做决定而不是在遵循剧本，增加了玩法的自由度和深度。&lt;/p&gt;&lt;p&gt;由于角色拥有瞬移动能力，故该关卡并未设计单项门，除抢黑市需要解谜进入外，各区域之间完全联通，整体连通性较强，可选择的路线也十分多样化，玩家可以自行决定是走较为缓慢但是安全的路线，还是危险但是迅速的路线，这能够让玩家自行控制游戏节奏。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;关卡引导&lt;/span&gt;&lt;/p&gt;&lt;p&gt;硬引导：会显示通关需要的任务的四角形+拿出心脏时显示符文&lt;/p&gt;&lt;p&gt;软引导：窗户，守卫，文字线索，光线，npc对话&lt;/p&gt;&lt;h1&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;部分区域理论解析：&lt;/span&gt;&lt;/h1&gt;   &lt;figure&gt;&lt;img width=&quot;274&quot; height=&quot;222&quot; src=&quot;https://image.gcores.com/10be41a31962062ae5901ab085bd4419-274-222.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h3&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;序章区域&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;包括下水道，发电机，光之壁&lt;/p&gt;&lt;p&gt;该部分设计较为简单，包括了两栋相邻的建筑，建筑顶端的发电机，光之壁，和零星守卫&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;区域目标：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;1.与梅根谈话，开启任务&lt;/p&gt;&lt;p&gt;2.通过光之壁&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;2560&quot; height=&quot;1440&quot; src=&quot;https://image.gcores.com/f46936024d657ef603c0b074e272a33b-2560-1440.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;设计点：&lt;/p&gt;&lt;p&gt;1.在玩家主线路上的铁栅栏后出现护符，利用可供性的设计，以护符作为驱动力，引导玩家对这栋楼进行探索。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;2337&quot; height=&quot;1178&quot; src=&quot;https://image.gcores.com/5a8dd9cef522fffb5e601c2b0507d45e-2337-1178.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1422&quot; height=&quot;778&quot; src=&quot;https://image.gcores.com/0d993bb1b86ecb1f7b223a8f05f2f89a-1422-778.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;2. 利用破碎的楼板展示其他房间部分内容，可破坏木板引导玩家进行探索 。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1730&quot; height=&quot;1198&quot; src=&quot;https://image.gcores.com/93e603d4ffdfde57e4dd0d915cc7b2e8-1730-1198.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;3.用光之壁和风车强化玩家之前学到的解法。&lt;/p&gt;&lt;p&gt;4.环境叙事，黄色和沙尘区这一主题相互搭配。&lt;/p&gt;&lt;h3&gt;雕塑广场&lt;/h3&gt;   &lt;figure&gt;&lt;img width=&quot;274&quot; height=&quot;222&quot; src=&quot;https://image.gcores.com/61b1beb6fe36f9ad84120ac5cd525fd7-274-222.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;以雕塑为中心的一片区域&lt;/p&gt;&lt;p&gt;区域目标：&lt;/p&gt;&lt;p&gt;1.找到通往下一关的大门&lt;/p&gt;&lt;p&gt;2.选择战嚎或者督军区域前往。&lt;/p&gt;&lt;p&gt;可互动物品/可获得道具：&lt;/p&gt;&lt;p&gt;npc，大门机关，地上保险库（这个不太清楚作用在哪）&lt;/p&gt;&lt;p&gt;设计点：&lt;/p&gt;&lt;p&gt;1.雕塑广场作为安全的中立区，可作为玩家的休息空间存在，起着调节游戏节奏的作用，玩家在潜行失败时可以回到中立区域摆脱ai的锁定，再次行动，类似魂游中篝火的作用。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1219&quot; height=&quot;695&quot; src=&quot;https://image.gcores.com/811f23621ff1340c45a793d8150ecfe4-1219-695.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;2.雕塑广场在游戏中作为较为显眼的兴趣点存在，能够让玩家快速对地图建立起认知。&lt;/p&gt;&lt;p&gt;3.引入部分敌人站岗，利用npc和环境叙事向玩家交代更多的关于城市中两股势力敌对的背景故事。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1214&quot; height=&quot;680&quot; src=&quot;https://image.gcores.com/2808301153f3a33e59e8c33b65678e4e-1214-680.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;4.此处能够看见3条路，由于视觉限制，初次游玩的玩家较容易认为中间的道路无法通过，实际并未封死，可以通过，作为隐形通路起着捷径的作用，随着玩家对地图理解的加深能够找到更多的隐性通路。 剩下两条路采用门，楼梯作为显性道路引导玩家分别进入两方势力。&lt;/p&gt;&lt;p&gt;5.玩家进入该区域后由于光线容易注意到左边建筑，但是较多的站岗士兵和巨大的建筑会对玩家产生了较大的斥力，驱使玩家从右边开始探索。&lt;/p&gt;&lt;p&gt;6.左侧半开的大门在告诉玩家此处可供进入的同时不会透露更多信息，引起玩家好奇心&lt;/p&gt;&lt;h2&gt;地下黑市&amp;amp;草径小道&lt;/h2&gt;   &lt;figure&gt;&lt;img width=&quot;344&quot; height=&quot;168&quot; src=&quot;https://image.gcores.com/7b46ad910568d56480ce2c7c23413e91-344-168.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;由于草径小道仅与地下黑市联通，故作为一个区域看待&lt;/p&gt;&lt;p&gt;区域目标：&lt;/p&gt;&lt;p&gt;选择战嚎或者督军区域前往&lt;/p&gt;&lt;p&gt;黑市——购物/洗劫——解谜元素&lt;/p&gt;&lt;p&gt;设计点：&lt;/p&gt;&lt;p&gt;1.作为一个过渡——环境逐渐变黑暗，使玩家提高警惕性，稍稍加快游戏节奏&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1477&quot; height=&quot;827&quot; src=&quot;https://image.gcores.com/86ebcb07b376d8be8f0740679cca9667-1477-827.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;2.该部分同样有三条通路，有两条有明确利用视觉重心指引玩家，随着玩家的理解能够增加第三条可选路线&lt;/p&gt;&lt;p&gt;3.该部分是作为潜入时的重要路线，如果直接前进会看见有督军守门，但是如果从侧面小道则可以绕开，战嚎区同理，正面较多的守卫，如果从地下绕过则可以避开直接到达大门&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1473&quot; height=&quot;833&quot; src=&quot;https://image.gcores.com/4d29fd325aec53536c94133659aaa00b-1473-833.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;4.第一次进入黑市时会遇见两个战嚎成员，但是它们不会对你发起攻击，再一次强化中立区的概念。&lt;/p&gt;&lt;p&gt;5.首次探索会先经过黑市，黑市建筑中有两个关闭的门，运用了锁匙理论，先给出谜题，当玩家继续游玩时候会注意如何利用可交互物品解决谜题。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1414&quot; height=&quot;764&quot; src=&quot;https://image.gcores.com/4265baec2d9a7eab935c13d2143b0f36-1414-764.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;6.根据《游戏机制：高级游戏设计技术》一书中“你有责任为风险分配合理的回报，特别是当这些风险出现在新手玩家的必经之路上”关于风险和回报的理论，机关作为一种惩罚被设计，会给玩家造成不致命的伤害，提示玩家该机关附近能够获得收益，在游戏中表现为可以通过窗户击碎木板从而开门。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1463&quot; height=&quot;819&quot; src=&quot;https://image.gcores.com/cfd156f53d5ea06b1c8002d8c63448f9-1463-819.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;7.利用可击碎木板作为隐性道路的提示。&lt;/p&gt;&lt;h2&gt;督军区&lt;/h2&gt;   &lt;figure&gt;&lt;img width=&quot;335&quot; height=&quot;249&quot; src=&quot;https://image.gcores.com/2ea001a7239be307a22a6d8af879b4d8-335-249.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;区域目标：&lt;/p&gt;&lt;p&gt;击杀/晕督军首领&lt;/p&gt;&lt;p&gt;找到钥匙&lt;/p&gt;&lt;p&gt;设计点&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1474&quot; height=&quot;822&quot; src=&quot;https://image.gcores.com/47bf8d174c8f929c981d64aeafae9447-1474-822.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;932&quot; height=&quot;522&quot; src=&quot;https://image.gcores.com/c444b3876d250d89a0d1519259dcc07e-932-522.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;1.同一个视角内玩家能够有两个或以上兴趣点&lt;/p&gt;&lt;p&gt;好处在于给与玩家更多的选择，使得玩家自行做出选择，增加自由度，减少“被游戏牵着走”的感觉，让玩家感觉在自行探索&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1477&quot; height=&quot;825&quot; src=&quot;https://image.gcores.com/47e4abbb1facc1e877b9afb005695ccb-1477-825.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1479&quot; height=&quot;827&quot; src=&quot;https://image.gcores.com/544288ecdea79cf8cbfe19ae6a256cf4-1479-827.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;2.由于玩家拥有瞬移的技能，能够在z轴上进行移动，故设计具有很强的层次感，设计了大量不同高度的落脚点，为玩家提供了多样化的移动路径，大大提高z轴上的空间利用率，且让玩家行动能够更加贴合潜行的主题&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1464&quot; height=&quot;822&quot; src=&quot;https://image.gcores.com/270d3dcfb16dbd79cb5c89a17251833b-1464-822.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1922&quot; height=&quot;1078&quot; src=&quot;https://image.gcores.com/0b12e048cd5fde9dea91bbed2e07607a-1922-1078.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;3.几乎所有区域都有多个入口，给玩家不同的潜入方式提供了更多的选择（甚至可以从外面直接爬到督军首领办公室）&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1457&quot; height=&quot;831&quot; src=&quot;https://image.gcores.com/6424b553a1fce1293c88c4311f09f9bf-1457-831.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1471&quot; height=&quot;829&quot; src=&quot;https://image.gcores.com/9817735c0eb46d3d2cb3ef791855a87e-1471-829.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;4.利用光照指引玩家前进，利用不同高度物品和木板引导玩家继续探索（虽然这个房间里什么都没有）&lt;/p&gt;&lt;h2&gt;战嚎区：&lt;/h2&gt;   &lt;figure&gt;&lt;img width=&quot;329&quot; height=&quot;314&quot; src=&quot;https://image.gcores.com/458afec7afc11c9a6221ee7d7df96368-329-314.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;感觉在设计上不如督军区，仅做简单介绍&lt;/p&gt;&lt;p&gt;区域目标：&lt;/p&gt;&lt;p&gt;将一方首领交给另一方&lt;/p&gt;&lt;p&gt;或：把俩都敲晕卖去挖矿&lt;/p&gt;&lt;p&gt;设计点：&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1491&quot; height=&quot;830&quot; src=&quot;https://image.gcores.com/6c2bc93b4eb161e9b64c29b401de369b-1491-830.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1481&quot; height=&quot;833&quot; src=&quot;https://image.gcores.com/588f3a476c4abaf6d887da5db1c3b485-1481-833.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;1.无论是室内还是室外设计，都是围绕一个中心，结合数个兴趣点引导玩家进行探索&lt;/p&gt;&lt;p&gt;2.多入口增强连通性&lt;/p&gt;&lt;p&gt;3.锁匙设计&lt;/p&gt;&lt;h2&gt;其他：&lt;/h2&gt;   &lt;figure&gt;&lt;img width=&quot;1471&quot; height=&quot;828&quot; src=&quot;https://image.gcores.com/46b27a5952f2d8f7b211e3c302c08e03-1471-828.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;一些和主线目标无关的房间作用：&lt;/p&gt;&lt;p&gt;1.某些房间在初次游玩时可能被忽略，但在重复游玩时，玩家可能会发现隐藏的秘密或新的解读。无关任务的房间可以作为“深度探索”的额外奖励。&lt;/p&gt;&lt;p&gt;2.通过隐藏的物品或支线内容，满足探索欲望并给予玩家成就感。玩家进入一个与任务无关的房间，找到隐藏的宝藏或资源，会感到自己做出了聪明的选择。这种奖励设计不是直接推动任务进展，而是增加玩家体验的多样性。&lt;/p&gt;&lt;p&gt;3.提供额外的空间，让玩家感受到探索的价值，而不是沿着固定路线前进。非任务房间通过隐藏奖励（如金币、物品、子弹）或叙事信息，激励玩家去探索每个角落。这种设计满足了好奇心强的玩家，让他们觉得自己的探索是值得的，即使结果不是直接的目标达成。&lt;/p&gt;&lt;p&gt;4.在紧张的任务推进中，提供片刻的缓冲与节奏变化。如果所有房间都和任务目标直接相关，玩家会感觉节奏过于紧张或线性，缺少喘息空间。无关任务的房间提供了一个放松或调整的机会，让玩家稍作休息，或者整理资源和策略。&lt;/p&gt;&lt;p&gt;5.环境叙事&lt;/p&gt;&lt;p&gt;6.利用这些房间设计隐秘路径、动态事件和战术选择。无关任务的房间可以作为玩家的潜行路线、敌人的巡逻点或隐藏地点。它们让空间设计更丰富，增加了玩家选择的多样性。&lt;/p&gt;&lt;h1&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;改进想法：&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;1.需要让玩家知道自己错过了这些东西——不只是用最后的数字的方法表示出来&lt;/p&gt;&lt;p&gt;可以如开头的cg一样，在该关卡结束后加入部分不同的剧情，比如可以在这一章的末尾加入cg或者下一章的开头在醒来的桌子上放上信件等，根据你的行为做出变化，提供更及时的反馈，再根据游戏每一章节反馈的剧情，进一步组合成游戏结尾的剧情，而不是到游戏的最后玩家的行动才会有总的反馈，此时如果再全部从头再来对玩家而言沉没成本较高，会造成部分玩家不愿意再次游玩。&lt;/p&gt;&lt;p&gt;2.越往后的关卡能够很明显的感觉到背景故事的丰满程度越低，如果能够在关卡中通过碎片化叙事的方式加入更多的关于两个团体的恩怨的产生，这座城市的背景故事，产生两个团体之后发生的变化，二者在中立区的冲突，那么该关卡在人物和故事塑造上会更加丰满。 且由于除了符文，空房间中的物品价值不高，游戏过程中当玩家拥有足够的资源时对于空房间的探索欲会降低，如果将空房间中的可交互物品作为碎片化叙事的一部分，至少对于探索型玩家对更有吸引力。&lt;/p&gt;&lt;p&gt;3.我认为武器升级系统的部分词条不能仅仅是改变数值，譬如子弹伤害增加，但是耻辱本身不是一个重数值的游戏，以子弹为例，升级满和不升级之间并不能产生质变，近距离贴脸依然是秒杀，远距离依然是无法杀死，比起子弹，弩箭升级的从两箭击杀变成一箭击杀之间可能会更吸引玩家。折叠刀的伤害增加也是也是同理，游戏中只需要让敌人失去平衡便能一击致命，这导致折叠刀数值的改变并不会对游戏产生巨大的影响。这进一步影响到了玩家去获取金钱的驱动力。技能升级的符文部分同理。这些升级并不能做出可以明显被感知的变化，对玩家的吸引较小。&lt;/p&gt;&lt;h2&gt;可供学习的：&lt;/h2&gt;&lt;p&gt;1.玩家视野内应该始终保持大于一个兴趣点，使得玩家能够一直保持探索欲，譬如为了潜入，进入到某个区域，但是离符文更进一步，于是想着要不要顺便去探索符文。或者是有更多的兴趣点——要不要继续探索&lt;/p&gt;&lt;p&gt;2.地图设计可以围绕一个中心点向周围发散出其他区域。&lt;/p&gt;&lt;p&gt;3.应该结合机制或故事背景设计具有可供性的显性通路和隐性通路，譬如门，空调外机和木板&lt;/p&gt;&lt;p&gt;4.地图设计应该能够满足不同层次玩家游玩的需要，要有着一条清晰的路径，并且能够有很多方式去联通路径上的不同房间，能够让较熟练的玩家依靠对地图的理解无需绕路就能够到达各种地方（蜗牛屋&amp;amp;瑞士奶酪理论）&lt;/p&gt;&lt;p&gt;5.每个区域或者建筑物应该有多个入口，这样能够增强玩家自由度，让每个人都可以按照自己的风格游玩，并且不会因为某个地方被困死了而回头，这能够给玩家更多选择让他们觉得是自己在做决定而不是在遵循剧本。不同的入口难度不同，但应该指向同一目标，这在给玩家提供选择感的同时，保持了关卡的线性推进。&lt;/p&gt;&lt;p&gt;6.在室内建筑物的设计上，应该设计一个或多个标志物，利用清晰的走廊作为主要道路，让玩家能够快速在脑海建立对该区域的大体印象，减少玩家迷路的可能。&lt;/p&gt;&lt;p&gt;7.可以合理控制玩家的资源，使得资源成为玩家探索的一种驱动力&lt;/p&gt;&lt;p&gt;8.让线性游戏体验起来没那么线性可以通过增加玩家选择，利用复杂的环境和多分支，多兴趣点/ 物品/支线任务，依托视觉变化，以路径为主，互动物品与奖励为辅，给予不同路线明显的不同体验，让玩家的行为充满意向性，引导玩家去探索更多游戏路径，从而体会到路线区别和关卡大小，增加玩家在每个区域的停留时间，提高地图的复用率来实现。&lt;/p&gt;&lt;p&gt;9.在没有过多作用的房间内摆上一个可以为玩家带来一定作用的道具，以此来弥补在设计时，哪些没有意义通路带来的负面体验。如符文，其他收集品或资源。在探索过程中，通过自己对于场景的了解所获得的奖励反馈，将会形成正向循环，会让玩家觉得是自己努力得来奖品，而不是关卡设计师施舍的随意摆放。&lt;/p&gt;&lt;p&gt;10.锁匙理论，应该先出现谜题，再在玩家探索的路径上出现线索或者答案&lt;/p&gt;&lt;p&gt;11.奖励与陷阱之间应该平衡，不能玩家通过一个很难的陷阱，但是却只获得了很少的奖励，这会让玩家产生上当受骗的感觉。且应该避免一击致命的陷阱或者惩罚，如果必须要出现这种陷阱，就需要让玩家意识到这是因为它们疏忽大意或者没能把握正确时机或做错了什么事才产生的，且游戏中所有的惩罚应该是玩家能够理解，能够避免的，如果随机性过强则会降低玩家对游戏的掌控感，如果陷阱没法让玩家学到任何东西则陷阱没有存在的意义。&lt;/p&gt;&lt;p&gt;12.无聊的走路——分散注意力&lt;/p&gt;&lt;p&gt;13.在写游戏设计文档时候可以从玩家的”观察—计划—执行—反应“这四步来写&lt;/p&gt;&lt;p&gt;14室内房间可以分两到三层进行设计，根据玩家可以到达的地方可以分为地面，空中(如吊灯，书柜顶灯)或是地下（如排水管，地下室等） &lt;/p&gt;&lt;h1&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt; </description><link>https://www.gcores.com/articles/193009</link><guid isPermaLink="false">gcores-193009</guid><pubDate>Wed, 01 Jan 2025 23:15:14 GMT</pubDate><author>想吃番茄炒蛋</author><enclosure url="https://image.gcores.com/1fbcc3f3e3a1bdde4a216a4a66e30e18-1662-906.png" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/1fbcc3f3e3a1bdde4a216a4a66e30e18-1662-906.png"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/b384719a-01da-4166-99e3-1d2919280802.mp3" length="1102" type="audio/mp3"></enclosure><itunes:duration>0:18:22</itunes:duration><category>知识挖掘机</category></item><item><title>浅析游戏氛围塑造中的环境叙事与场景道具</title><description>&lt;figure&gt;&lt;img alt=&quot;浅析游戏氛围塑造中的环境叙事与场景道具&quot; src=&quot;https://image.gcores.com/589b1ccf3685dca52ead7dcf71977264-2560-1440.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/53d347e3-28f4-460d-976c-14bb3a0ba7a3.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/53d347e3-28f4-460d-976c-14bb3a0ba7a3.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/53d347e3-28f4-460d-976c-14bb3a0ba7a3.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;简单地从环境叙事、场景道具分别进行阐述如何在游戏环境中进行氛围塑造。&lt;/blockquote&gt;   &lt;p&gt;《故事》的作者罗伯特麦基曾说过：为什么许多作家选择借人物之口来解释他们的意思，或者更糟，利用画外解说。这种写作方法永远是不充分的。它强加给人物一种在现实中极为罕见的、虚假的、自觉的学识。更重要的是，当我们用自己的生活经历和艺术家巧妙埋设的伏笔进行比照时，我们头脑中会涌动一股强劲的见解洪流，即使是最华丽而富有知觉的散文，也不能取代这种见解。&lt;/p&gt;&lt;p&gt;我们谈论大部分游戏叙事时，往往谈论其人物塑造、台词塑造。却忽略了最本质的、最底层的氛围塑造。氛围塑造虽然埋藏地较深，但其对世界观与角色塑造、玩家沉浸体验等等都有着不可忽视的作用。它鼓励玩家尽可能多地在世界中进行探索，鼓励玩家挖掘出埋藏在世界深处的秘密。无论在3A《荒野大镖客》或者是独游《空洞骑士》中，他们都将自己的一部分故事埋藏在了游戏场景中等待玩家进行探索。&lt;/p&gt;&lt;p&gt;以下我将在复杂的氛围塑造中截取一部分，简单地从环境叙事、场景道具分别进行阐述。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;一、环境叙事&lt;/span&gt;&lt;/p&gt;&lt;p&gt;环境叙事：环境色彩、空间构造 &lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;1.&lt;/span&gt; &lt;span style=&quot;font-weight: bold&quot;&gt;环境色彩&lt;/span&gt;&lt;/p&gt;&lt;p&gt;环境色彩：暖色调、冷色调、以及比较特殊的红色调&lt;/p&gt;&lt;p&gt;事实上，我们发现除了游戏中会提到“场景”这一词时，在电影中也会提到这个词，好的游戏演出一定是与电影演出相同的，同样，制作者们也会在游戏中尽可能地让游戏演出更加有深意，事实上，游戏演出的叙事反而比电影演出的叙事更容易实现与传递。&lt;/p&gt;&lt;p&gt;在电影演出中最基本也是最直观能表达情绪的东西便是【色调】，当将有不好的事情发生时或者正在发生悲剧时，导演们往往会使用【冷色调】，多为深蓝、深灰或者黑白等偏暗偏蓝绿的颜色。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;932&quot; height=&quot;695&quot; src=&quot;https://image.gcores.com/61c8014bcedb41b8d41255c77fe135b1-932-695.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;928&quot; height=&quot;518&quot; src=&quot;https://image.gcores.com/5adc16b50597767d9eed7f583571d32f-928-518.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;比如《美丽人生》中主角死亡时的蓝色调、《辛德勒的名单》影片中的黑白色调等等，这都带有极大的悲伤、阴郁感情色彩。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;电影《美丽人生》&quot; width=&quot;927&quot; height=&quot;491&quot; src=&quot;https://image.gcores.com/a1ab0ce7215aa11955f9705addd261d7-927-491.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;电影《辛德勒的名单》&quot; width=&quot;936&quot; height=&quot;515&quot; src=&quot;https://image.gcores.com/3c271ecc995d04889a45e9be25c3196c-936-515.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;譬如游戏《勇敢的心：世界大战》以及《beholder》等以战争为题材背景的游戏，也同样大量使用了冷色调。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;游戏《勇敢的心：世界大战》&quot; width=&quot;930&quot; height=&quot;518&quot; src=&quot;https://image.gcores.com/6ac44399537fb6700a2df46a10843a74-930-518.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;游戏《beholder》&quot; width=&quot;933&quot; height=&quot;522&quot; src=&quot;https://image.gcores.com/0d981c7a6a5abe07c19976175cdadf6a-933-522.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;而当表达代表希望、正义等正向情感时，导演往往会使用【暖色调】，多为黄、白、浅绿等较为明亮的颜色，因为暖代表着春夏，代表着新生与光明。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;930&quot; height=&quot;392&quot; src=&quot;https://image.gcores.com/2d7a83cca29b7a3f46fa6d53bca83557-930-392.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;934&quot; height=&quot;435&quot; src=&quot;https://image.gcores.com/231e502c177887891fcdd7e81a51a7de-934-435.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;如《菊次郎的夏天》影片中大量使用了黄、绿去表现父子间的温情，在游戏中也有类似的表达。例如《艾迪芬迪的记忆》中，有一个由于目睹了自己姐姐被人砍死而躲进地下室的人，他在日复一年的藏匿生活之后，终于鼓起勇气决定走出屋内，他挖开了地下室的一个出口，出来第一眼见到的则是刺眼的黄色的光芒（火车前灯）。他说，我将高兴地迎接新的一天，我已经能想象到阳光洒在我脸上的感觉。显而易见地，黄色常常与太阳相关，同时有着【希望】这一层含义。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;电影《菊次郎的夏天》&quot; width=&quot;934&quot; height=&quot;449&quot; src=&quot;https://image.gcores.com/c7e1053699fde3f00aca5111292e6b5a-934-449.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;游戏《艾迪芬奇的记忆》&quot; width=&quot;933&quot; height=&quot;517&quot; src=&quot;https://image.gcores.com/999f1666d96f99ad515a58199170654a-933-517.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;【红色调】则比较特殊，它既温暖炙热，也暗藏着危机。红色多为火焰的颜色，是欲望温暖的颜色，同时它也是鲜血的颜色，是警告的颜色。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;欲望&quot; width=&quot;930&quot; height=&quot;414&quot; src=&quot;https://image.gcores.com/87d46413891d3ebf6917053348c365f5-930-414.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;火焰&quot; width=&quot;930&quot; height=&quot;318&quot; src=&quot;https://image.gcores.com/4866aa44f74b7fb4b80224e8d51c96e5-930-318.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;杀戮&quot; width=&quot;926&quot; height=&quot;365&quot; src=&quot;https://image.gcores.com/75625be01bea74afc22f180d4788e021-926-365.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;2.&lt;/span&gt; &lt;span style=&quot;font-weight: bold&quot;&gt;空间构造&lt;/span&gt;&lt;/p&gt;&lt;p&gt;空间构造我将它粗暴地分为守序空间与非守序空间。&lt;/p&gt;&lt;p&gt;守序空间仍可下分为三类空间——对称性空间、三一律空间、框架空间。&lt;/p&gt;&lt;p&gt;对称空间往往把指代的是如教堂、法院等以中轴为界限，两侧几乎对称的空间。与绘画作品类似，对称往往有着严肃、庄重的含义。《博德之门3》中治疗中心的手术室空间就是典型的对称空间，而放置在室内的NPC——医生与护士也与此空间的含义相呼应，一个绝对威严的权力与一群绝对服从的仆人。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;绘画作品中的“教堂”&quot; width=&quot;932&quot; height=&quot;554&quot; src=&quot;https://image.gcores.com/7d0c79f3eb79d255ef7fa9d4d2aa1c15-932-554.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;《博德之门3》治疗中心&quot; width=&quot;926&quot; height=&quot;519&quot; src=&quot;https://image.gcores.com/c35d78095defd811a3b7f2cdb01cee3f-926-519.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;三一律是戏剧写作的一种手法，我将它套用在游戏空间设计中，称为“三一律空间”，指代的是同一或相近地点、时间、行为进行叙事的空间。这类空间叙事手法往往在恐怖游戏中运用地较多，如《寂静岭PT》，整个游戏的恐怖叙事都在一个长长的走廊中完成。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;游戏《寂静岭PT》&quot; width=&quot;928&quot; height=&quot;516&quot; src=&quot;https://image.gcores.com/fe77976dc69fdd5fe8a5a46f83472d69-928-516.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;游戏《米塔》&quot; width=&quot;930&quot; height=&quot;463&quot; src=&quot;https://image.gcores.com/9ba702bdbaf09261026a9e361473c7bf-930-463.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;框架空间取自摄影中的一个概念——框架构图，即在画面中有一些条形物作为画面的切割，将叙事的主要人物困于这些条形物之内，往往表现出当前人物的无力感、禁锢的内心。&lt;/p&gt;&lt;p&gt;这些条形物可以是墙壁，如电影《末代皇帝》中溥仪在每次追赶被迫离去的亲人时所处的故宫墙；&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;电影《末代皇帝》&quot; width=&quot;927&quot; height=&quot;394&quot; src=&quot;https://image.gcores.com/b8804da4946b79290348734451246e05-927-394.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;也可以是镜框、画框、窗户等，可构成画面切割的物块，如电影《悲情城市》中，在拍摄照片时有一个从相机取景框拍摄的镜头，表现出当前人物无处可去的无力感。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;电影《悲情城市》&quot; width=&quot;930&quot; height=&quot;481&quot; src=&quot;https://image.gcores.com/9e088605e0955846eacfb5d67e463a34-930-481.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;框架空间在场景叙事中较难以使用，尤其在3D游戏中，它通常受制于玩家所处于的当前场景的镜头角度，想要完美实现框架空间，往往需要游戏演出辅助实现。&lt;/p&gt;&lt;p&gt;非守序空间可分为——运动空间、废墟空间。&lt;/p&gt;&lt;p&gt;运动空间并非常规理解的运动镜头，它指代的是可被“打破”的空间，可发生“变化”的空间。&lt;/p&gt;&lt;p&gt;譬如一个场景中当前有两个人在对话，而进行场景交互的过程中，第三个人通过场景的门进入他们的对话，则视为当前空间被“打破”，由两人叙事空间变为三人叙事空间。&lt;/p&gt;&lt;p&gt;有些空间会持续发生变化，譬如初见时的一个辉煌国都，经历了叙事发展后，再回来变成了一片荒芜，这就是“变化”的空间。《空洞骑士》的初期的“遗忘十字路”与“感染的十字路”就是一个很好的“变化”空间例子。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;《空洞骑士》遗忘十字路&quot; width=&quot;932&quot; height=&quot;520&quot; src=&quot;https://image.gcores.com/8c71cc3bde83aa2dc7d8f164f7531c83-932-520.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;《空洞骑士》感染的十字路&quot; width=&quot;927&quot; height=&quot;520&quot; src=&quot;https://image.gcores.com/be5af9e08725413bee39f0bc6378c0af-927-520.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;废墟空间往往具有极重的情感色彩，它象征灾祸、病痛、战乱等较为负面的叙事行为。如《死亡搁浅》的时间雨发生时在空中漂浮的废墟，《无限暖暖》中石树田无人区地图也大量充斥着被毁坏的建筑、断桥等废墟，这些都暗含了空间设计师一开始想要传达的情感基调。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;游戏《死亡搁浅》&quot; width=&quot;929&quot; height=&quot;522&quot; src=&quot;https://image.gcores.com/7102a8ccf1faf406d61e7bb8736a74ed-929-522.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;游戏《无限暖暖》&quot; width=&quot;928&quot; height=&quot;521&quot; src=&quot;https://image.gcores.com/dc7db2df860036ba07146e417aa79441-928-521.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;二、场景道具&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在很多作品中的场景叙事往往包含了场景NPC（龙套）的对话，但我在写这篇分析的时候，试想了一下如果场景中抛去龙套的对白，是否可以仅仅通过场景道具去完成对环境、世界观、甚至于过去的的人的塑造。&lt;/p&gt;&lt;p&gt;在影视作品中，很难通过道具去完成对于整部影片的塑造，往往需要通过主角的主导或者发现才能完成，例如在场景中摆放了一张这间屋子原主人的信件，如果主角不去拿起这封信，或者镜头不去对焦、放大这一信件，观众很难感知到这一信件的内容，也很难由此了解到信件背后的主人的性格以及其所处的环境。在游戏《博德之门3》中，制作者在世界中放置了大量的信件，很多都是与主角完全无关或者早已去世的人身上。&lt;/p&gt;&lt;p&gt;举一个《博德之门3》幽影诅咒之地中的一个例子，在废弃战场处有一个受诅咒十分严重的小屋，当主角没有拿到月亮提灯前无法进入。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;929&quot; height=&quot;463&quot; src=&quot;https://image.gcores.com/5c92db47129f5cdbe9c8a51006011d2c-929-463.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这间小屋有两层，一层是地面上的平台，一层是地底的平台（地下室）&lt;/p&gt;&lt;p&gt;在地面平台上有一间卧室，床上躺着两具相拥的枯骨。动作与《泰坦尼克号》沉没时在卧室相拥的一对老夫妻十分相似。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;926&quot; height=&quot;466&quot; src=&quot;https://image.gcores.com/2f9c904fb69558631d4ef13028973cde-926-466.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;电影《泰坦尼克号》&quot; width=&quot;933&quot; height=&quot;525&quot; src=&quot;https://image.gcores.com/61d5b53645f16c8274b7d90f2a9d1e79-933-525.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;当翻找两具尸体时，会分别在它们身上找到一枚金戒指，戒指内部刻着对它们十分重要的一个纪念日。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;928&quot; height=&quot;466&quot; src=&quot;https://image.gcores.com/50fb44e1f97f79a59305a83de166433a-928-466.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;930&quot; height=&quot;461&quot; src=&quot;https://image.gcores.com/76b168b2be8ae48b812756912af10b3e-930-461.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这时候初次进入此地的玩家基本上都会产生一个疑问，为什么一间看起来十分平凡的小屋却遭受着如此严重的诅咒，为什么床上会有两具相拥的尸体？&lt;/p&gt;&lt;p&gt;在小屋周围进行探索，会在左侧发现一扇侧门，进入侧门可下到这间小屋的地下室。此时关于这间小屋的所有疑问都会解开。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;921&quot; height=&quot;464&quot; src=&quot;https://image.gcores.com/2a6b0bfb7690e6d77e7811e27448a359-921-464.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;当进入地底空间时，会发现地下与终焉旅馆相连。地下桌台的主人也正是从终焉旅馆而来，他是塞伦涅信徒，在地下室能见到一些道具，如“半影护甲”“隐蔽兜帽”“塞伦涅信徒的祈祷书”，它们都向着一个方向去指明了真相——塞伦涅信徒一直在遭受莎尔信徒的迫害，而楼上死亡的夫妻，或许也是这件事情的无辜牵连者。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;半影护甲&quot; width=&quot;2560&quot; height=&quot;1440&quot; src=&quot;https://image.gcores.com/5c5ed618ebf6cbdf8731e28fda7bd702-2560-1440.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;隐蔽兜帽&quot; width=&quot;2560&quot; height=&quot;1440&quot; src=&quot;https://image.gcores.com/da78d2f4691196e5a8f6fc77152232e4-2560-1440.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;塞伦涅信徒的祈祷书&quot; width=&quot;2560&quot; height=&quot;1440&quot; src=&quot;https://image.gcores.com/d5dcaab1cf9dbbb38c55cdeb6c7bf25e-2560-1440.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在这间小屋中从NPC中体会到的是至死不渝的爱情，而同样作为一对夫妻的位于治疗中心附近的NPC就没有如此甜蜜了。&lt;/p&gt;&lt;p&gt;在治疗中心外的墓地中有一具暴尸荒野的遗骨，从中能翻到一枚叫做“真爱之抚”的戒指与一本“妻子的日记”。在关于“真爱之抚“的介绍中，能获知这是一对戒指的其中一枚，这一枚是受庇护的一方，它可以保护佩戴者免受伤害。而在“妻子的日记”中，可获知她有着美满的家庭，相爱的丈夫。可是真相真正如此吗？&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;真爱之抚&quot; width=&quot;2560&quot; height=&quot;1440&quot; src=&quot;https://image.gcores.com/a700af26dda195783daa7445bc6c66b8-2560-1440.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;妻子的日记&quot; width=&quot;2560&quot; height=&quot;1440&quot; src=&quot;https://image.gcores.com/1876a9d503e0923c6db1fc2f51617c19-2560-1440.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;进入医院后，我们能找到丈夫的遗骨，在他身上同样翻出一枚叫做“真爱之拥”的戒指与一本“丈夫的日记”。与妻子那枚“真爱之抚”恰恰相反，这枚戒指是承受伤害的一方。通过“丈夫的日记”可知，它承受的伤害就是另一枚所免受的伤害，而丈夫也正是因为这些伤害导致了死亡。令人毛骨悚然的是，丈夫到死都不知道这枚戒指的“威力”。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;真爱之拥&quot; width=&quot;2560&quot; height=&quot;1440&quot; src=&quot;https://image.gcores.com/8056d81f5cfead14b5af69b26ee7115b-2560-1440.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;2560&quot; height=&quot;1440&quot; src=&quot;https://image.gcores.com/f75daee4c366be7527549a89d0b3a683-2560-1440.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;丈夫的日记&quot; width=&quot;2560&quot; height=&quot;1440&quot; src=&quot;https://image.gcores.com/fa79de2e75b5af52fcf797ece8cad5fe-2560-1440.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在有关这些人物的塑造中，《博德之门3》并没有使用任何对白、旁白去叙述它们的身份，只是使用了一些十分简单的场景道具——戒指、信件。但却完美地塑造出了两对结局、性格、关系迥异的夫妻。&lt;/p&gt;&lt;p&gt;《博德之门3》中这些类似的场景叙事手法层出不穷，通过一些信件甚至可以找到另一封的位置。制作者将故事元素注入到玩家会经过的道路周围。正是物理空间在很大程度上传递了设计者想要讲述的故事……玩家透过自己对这个世界的了解，以及从电影和书籍中收集到的想象，就可以进入至冒险旅程中。游玩的诀窍在于利用这些记忆和期望来增强进入制作者所创造的宇宙的兴奋。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;三、总结&lt;/span&gt;&lt;/p&gt;&lt;p&gt;制作者通过环境叙事为叙事事件提供可展演的舞台，在场景道具中嵌入叙事信息，唤起已有的叙事联想，让整个游戏叙事得以涌现出来。玩家通过对场景所传递的信息想象的具象化，创造出一个独一无二的玩家可以漫游其中并与之互动的沉浸式环境。&lt;/p&gt;&lt;p&gt;&lt;/p&gt; </description><link>https://www.gcores.com/articles/193003</link><guid isPermaLink="false">gcores-193003</guid><pubDate>Wed, 01 Jan 2025 15:26:21 GMT</pubDate><author>alexwondering</author><enclosure url="https://image.gcores.com/589b1ccf3685dca52ead7dcf71977264-2560-1440.png" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/589b1ccf3685dca52ead7dcf71977264-2560-1440.png"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/53d347e3-28f4-460d-976c-14bb3a0ba7a3.mp3" length="712" type="audio/mp3"></enclosure><itunes:duration>0:11:52</itunes:duration><category>知识挖掘机</category></item><item><title>量子速读GDC演讲：游戏中的“选择”设计</title><description>&lt;figure&gt;&lt;img alt=&quot;量子速读GDC演讲：游戏中的“选择”设计&quot; src=&quot;https://image.gcores.com/a09e690ee8a250dbdb2eb41cb7a26aa6-831-472.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/17bfe29b-1b2e-4675-8e24-19efe6b0aa8d.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/17bfe29b-1b2e-4675-8e24-19efe6b0aa8d.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/17bfe29b-1b2e-4675-8e24-19efe6b0aa8d.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;本文是演讲的笔记和结合《Chirs Crowford谈互动叙事》的批注&lt;/blockquote&gt;   &lt;p&gt;&lt;/p&gt;&lt;p&gt;该分享来源于GDC 演讲《Making Player Choices Feel like They Matter in Your Narrative》，演讲者Tony Howard-Arias，叙事冒险/恐怖视觉小说游戏《scarlet hollow》的创作者。&lt;/p&gt;&lt;p&gt;感谢无界游戏学社的翻译和分享，原视频链接：&lt;/p&gt;&lt;iframe src=&quot;https://player.bilibili.com/player.html?isOutside=true&amp;amp;aid=113390022299518&amp;amp;bvid=BV1baStYbEoL&amp;amp;cid=26518097148&amp;amp;p=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/iframe&gt;&lt;p&gt;文章内容结合了作者过去阅读的其他有关互动叙事的书籍和理论，对其中的某些环节加以解释，整体内容框架与GDC演讲无异。&lt;/p&gt;&lt;p&gt;————————————————————————————————&lt;/p&gt;&lt;p&gt;在游戏叙事中，让玩家感觉到自己的选择很重要？有三种设计方案可供参考：&lt;/p&gt;&lt;p&gt;① 级联式&lt;/p&gt;&lt;p&gt;② 回溯式&lt;/p&gt;&lt;p&gt;③ 启发式&lt;/p&gt;&lt;h1&gt;一、级联式（Cascade）&lt;/h1&gt;&lt;h1&gt;什么是“级联式”：&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;当人们提到一个重大决定，或者说某个选择很重要时，所指的就是级联影响。&lt;/li&gt;&lt;li&gt;当一个级联决策中，选择将永久性地以重大方式改变游戏或世界。&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;我通常称呼“级联式影响”的“选择”为“不可逆的选择”、“改变命运的选择”。在《游戏大师Chris Crawford谈互动叙事》一书中，将其称为“戏剧性的重大决策”。他认为某些选择，如关乎空间推理（“我是躲在大楼的这个角落，还是该跑向那辆卡车呢”）、资源分配（“我是该扔手榴弹，还是该只用刀呢”），这些选择在戏剧性方面就不具有重要意义；它们无助于丰富故事世界（Storyworld）。&lt;/span&gt;&lt;/blockquote&gt;&lt;h1&gt;级联式的优势：&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;级联式选择相对容易设置&lt;/li&gt;&lt;li&gt;非常引人注目&lt;/li&gt;&lt;li&gt;令人难忘且值得讨论&lt;/li&gt;&lt;li&gt;制作者通常只需要一个Flag来跟踪选择&lt;/li&gt;&lt;li&gt;玩家容易理解他们正在被呈现的内容&lt;/li&gt;&lt;li&gt;一个恰当的执行会给人留下深刻印象&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;级联式的缺点：&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;如果不同选择后的剧情彼此偏离太大，会在叙事中引发分支指数级增长的问题，尤其是一个游戏中设置了多个级联决策时。&lt;/li&gt;&lt;li&gt;玩家之前已经有过失望的经历，有些人会因此愤怒。&lt;/li&gt;&lt;li&gt;决策如果充满了强烈的情感色彩，也会令有些人愤怒。&lt;/li&gt;&lt;li&gt;容易过度提高玩家预期，但难以交付与之匹配的内容（剧情发展的自由度）。&lt;/li&gt;&lt;li&gt;在“让级联影响显得重要”与“做完游戏”之间存在着微妙的平衡。&lt;/li&gt;&lt;li&gt;既容易耗费人力，又需要接受玩家最高级别的审视和挑剔。&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;因为级联式的选择会不可避免地使得剧情分支和剧情内容增长，所以在游戏中出现的次数会很少，创作者应当投入更多精力到这些选择的设置上。&lt;/span&gt;&lt;/blockquote&gt;&lt;h1&gt;“级联式”的建议和技巧：&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;尽可能地将影响点写得模块化（可以让事件插入到整个故事线中）。&lt;/li&gt;&lt;li&gt;思考一下重大决定对叙事方向有何作用，它们是如何让故事“感觉”不同的。&lt;/li&gt;&lt;li&gt;你的决定在故事结束之前可能会回归到主线剧情，否则你无法完成故事。但你可以让这种回归主线的过程产生巨大的影响。&lt;/li&gt;&lt;li&gt;不要让读者觉得他们正在错过内容，如果一个角色死了，就围绕这个死亡创造内容。&lt;/li&gt;&lt;li&gt;将其他类型的选择结合起来，以提高效果。&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;Chris Crawford有长篇讨论“选择设计”的建议也值得参考，其主要观点是：1、&lt;/span&gt; &lt;span style=&quot;font-weight: bold&quot;&gt;用户能够做出戏剧性的重大决策；2、&lt;/span&gt; &lt;span style=&quot;font-weight: bold&quot;&gt;呈现给玩家的决策必须得到权衡；3、故事世界必须向玩家提供足够多的选择，但其中大部分决策都应该相对比较轻小。对话（Conversations）是实现轻小决策的最佳载体。（原文此处指一个完全只能的对话系统，类似于Chatgpt，但笔者认为由重要选择+小选择影响台本的游戏对话设计也足够）&lt;/span&gt;&lt;/blockquote&gt;&lt;h1&gt;二、回溯式（Call Back）&lt;/h1&gt;&lt;h1&gt;什么是“回溯式”：&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;非常直接。它们引用故事中早些时候发生的事情，这些事情与玩家的选择相关，但不会打断叙事的流畅性。&lt;/li&gt;&lt;li&gt;它们所引用的选择可以很大（引发一系列事件），或很小（一个选项的文本）。&lt;/li&gt;&lt;li&gt;用布尔值来跟踪这些选择。&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;回溯式的优点：&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;它们是一次性的，并且随着时间的推移线性增长。添加一个新的回溯，只需要付出相应的努力。&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;——相较于“级联式”的指数级增长&lt;/span&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;它们不像级联影响那样常见，所以玩家不会期待它们的出现。&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;——低预期、更容易有惊喜感&lt;/span&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;很容易做出超出玩家预期的表现。如果你跟踪了“#老板娘”，那你还会跟踪什么其他内容呢？&lt;/li&gt;&lt;li&gt;它们让玩家感到个性化，并让他们感觉良好。&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;回溯式的缺点：&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;它们本身效果并不足够强烈。如果你只有回溯式影响，你的玩家会感觉他们的选择并不重要。&lt;/li&gt;&lt;li&gt;你需要大量的回溯式影响，才能让玩家注意到它们。&lt;/li&gt;&lt;li&gt;它们可能需要大量的Flag来覆盖你的所有基础内容，作者使用了超过一千个。&lt;/li&gt;&lt;li&gt;这可能需要你对自己的故事有百科全书式的了解。&lt;/li&gt;&lt;li&gt;如果你过于依赖它们，你会把自己的脑子搞坏的。&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;“回溯式”的建议和技巧：&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;使用回调函数来使你的对话更加自然流畅。当一个角色认可之前已经说过的话时，会取得很好的效果。&lt;/li&gt;&lt;li&gt;标记所有内容。你永远不知道什么时候跟踪某个内容可能会在以后派上用场！&lt;/li&gt;&lt;li&gt;为你的变量设置命名规则，这样更容易跟踪它们——对我们来说，通常的格式是：episode_scene_character_flag&lt;/li&gt;&lt;li&gt;除了将它们保存在电子表格中之外，定义它们的位置也可以是一种方便的排序方式。&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;三、启发式（Heuristic）&lt;/h1&gt;&lt;h1&gt;什么是“启发式”：&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;启发式是一种问题解决技术，它依赖于简化来快速得到一个“足够好”的问题解决方案，但可能会牺牲一定程度的准确性。&lt;/li&gt;&lt;li&gt;例：“我从没听说过有人被闪电击中，所以它一定不常发生。”&lt;/li&gt;&lt;li&gt;例：“我听说过两则关于人们被闪电击中的新闻报道，所以它一定经常发生！”&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;《Scarlet Hollow》中的“启发式”：&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;游戏中最常见的表达方式是好感度，但仅用一个衡量维度无法处理那些阿谀奉承的人。&lt;/li&gt;&lt;li&gt;《Scarlet Hollow》使用了5个维度（和10个变量）的启发式算法来衡量玩家与其他角色之间的关系。&lt;/li&gt;&lt;li&gt;大多数对话选择都会以微小的方式影响这些变量中的一些或全部。&lt;/li&gt;&lt;li&gt;重大决策（级联影响的选择）会以巨大的方式改变这些变量。&lt;/li&gt;&lt;li&gt;你不需要10个变量来做这件事。但你可能想要多于1个或2个的变量。&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;启发式的优点：&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;人们在现实生活中经常使用启发式，因此正确使用它们可以让角色感觉更加流畅和自然。&lt;/li&gt;&lt;li&gt;你不需要记住或记忆成千上万的具体细节。&lt;/li&gt;&lt;li&gt;你可以使用它们来为级联或回溯式影响增添趣味和细微差别。&lt;/li&gt;&lt;li&gt;它们可以构建为滑动量表，因此你有更广泛的角色反应潜力。&lt;/li&gt;&lt;li&gt;本质上具有模块化特点。&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;如果你想到一个人，你会想起他给你的感觉，甚至是某种感官，而不是列出你和他每一次互动的清单。题外话，富野由悠季在设计《G之复国运动》的原画时，主人公对于“姐姐”角色，第一时间想起的是飘散的长发和头发散发的香味。如果能用回溯式+启发式的影响组合来设计这样类似的选项，肯定会很有意思。&lt;/span&gt;&lt;/blockquote&gt;&lt;h1&gt;启发式的缺点：&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;对话选项很难设置。如果有数百个对话选项，需要数百次地思考这些选项如何影响另一个角色。&lt;/li&gt;&lt;li&gt;它们需要级联和回溯式影响才能充分发挥其效果。&lt;/li&gt;&lt;li&gt;它们的好坏取决于编剧水平&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;——这适用于所有类型的选择设计，但在启发式影响中尤其明显。编剧需要时刻保持对多个角色版本的清晰理解。&lt;/span&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;它们可能会给叙事增加很多额外的复杂性。&lt;/li&gt;&lt;li&gt;如果你把事情过于简化，可能会让叙事感觉太“像游戏”了。&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;——沉浸式的叙事体验不足&lt;/span&gt;&lt;/blockquote&gt;&lt;h1&gt;“启发式”建议与技巧：&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;一旦设置完成，它们就是武器库中最灵活的工具。使用它们根据情境改变音乐，以反映角色之间的关系！使用它们更换配乐来改变一行对话的意义。使用它们为事件提供不同的视角和不同程度的信息！&lt;/li&gt;&lt;li&gt;将它们与标记的决定结合使用。一个角色失去了朋友——他们愿意向你透露多少关于这件事情的信息？你们的关系如何改变他们的看法？&lt;/li&gt;&lt;li&gt;使用它们来改变那些导致级联效应的重大决策中可用的选项。&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;——启发式影响是一种综合统计了玩家整个游戏历程的参数，对此做出反应的设计方式。&lt;/span&gt;&lt;/blockquote&gt;&lt;h1&gt;能利用“启发式”做的事情：&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;将启发式设计与Flag相结合。&lt;/li&gt;&lt;li&gt;将启发式设计与其他启发式方法相结合。如果你的角色很勇敢，那这是如何影响你与想要给你留下深刻印象的人之间的关系的？这又是如何影响你与已经决定不喜欢你的人之间的关系的？&lt;/li&gt;&lt;li&gt;利用现有的启发式方式数据来改变新决策对这些数字的影响方式。&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;《Scarlet Hollow》实际开发经验总结：&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;制作时很容易过于专注某一种影响的选项设计，但是你在游戏决策中使用的增加影响的不同技巧越多，玩家就会越觉得他们的选择很重要。&lt;/li&gt;&lt;li&gt;你正在制作一款叙事游戏。不断问自己，这个叙事为何会从交互性中受益，并用这些答案来指导设计过程。&lt;/li&gt;&lt;li&gt;时刻思考游戏体量问题——我能以最高效的方式给某个选择或场景增加影响，而又不让自己过度劳累吗？&lt;/li&gt;&lt;/ul&gt; </description><link>https://www.gcores.com/articles/192805</link><guid isPermaLink="false">gcores-192805</guid><pubDate>Fri, 27 Dec 2024 06:35:45 GMT</pubDate><author>普通人toru</author><enclosure url="https://image.gcores.com/a09e690ee8a250dbdb2eb41cb7a26aa6-831-472.png" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/a09e690ee8a250dbdb2eb41cb7a26aa6-831-472.png"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/17bfe29b-1b2e-4675-8e24-19efe6b0aa8d.mp3" length="675" type="audio/mp3"></enclosure><itunes:duration>0:11:15</itunes:duration><category>知识挖掘机</category></item><item><title>SIGGRAPH 粗读丨看看《地平线：西之绝境》燃烧海岸DLC中的云层渲染（中）</title><description>&lt;figure&gt;&lt;img alt=&quot;SIGGRAPH 粗读丨看看《地平线：西之绝境》燃烧海岸DLC中的云层渲染（中）&quot; src=&quot;https://image.gcores.com/e35453774d33987c6256001cc1219b5f-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/191f845d-48a8-49a5-a43b-18158df1fc98.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/191f845d-48a8-49a5-a43b-18158df1fc98.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/191f845d-48a8-49a5-a43b-18158df1fc98.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;视觉更丰富的体积云&lt;/blockquote&gt;   &lt;h1&gt;前言&lt;/h1&gt;&lt;p&gt;在&lt;a href=&quot;https://www.gcores.com/articles/192369&quot; target=&quot;_blank&quot;&gt;上一篇&lt;/a&gt;中，作者以相对简短（其实也挺充实）的方式带我们回顾了Nubis体积云系统的前置技术路线，及其优缺点。&lt;/p&gt;&lt;p&gt;简单概括来说，本身对于远处观看的和近处观看的体积云，渲染上自然有着不同的设计——在上篇中分别翻译为&lt;span style=&quot;font-weight: bold&quot;&gt;垂直轮廓法&lt;/span&gt;和&lt;span style=&quot;font-weight: bold&quot;&gt;封包法&lt;/span&gt;的两种建模方式，其数据源格式、采样方式、是否支持光照、是否支持演进（可以理解为通过数学推算的动画，例如随风移动）等维度上都有区别。而且旧的两种云建模方式在制作上都是相对不友好的，不容易直接在制作阶段预览到结果。&lt;/p&gt;&lt;p&gt;这次的内容就会正式展开Nubis3系统中的体积云系统，或者说是体素云系统——上一篇中作者提到了，这一技术在最终要在成品游戏的DLC中交付给玩家是有一定挑战的，这次让我们一起看看这个方案落地的设计和实现。&lt;/p&gt;&lt;p&gt;文章还是以翻译原文的讲稿为主，并且由于原文的篇幅很多地方较长，会进行适当的精简和概括。由于图文内容量都很大，这次分为了上中下三篇——这是其中的中篇；打星号的部分则是我个人的补充说明。 &lt;/p&gt;&lt;h1&gt;1 体素云建模——Voxel Clouds Modeling&lt;/h1&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/724b9167fa2410dcdbcb3e8075f90acb-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;经历了短短几个月的快节奏开发后，我们得以圆满完成了这一任务——没有计划上的延误。&lt;/p&gt;&lt;p&gt;这里开始介绍我们为沉浸式（immersive）的实时体积云准备的解决方案。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/9a2cc5e041c918df4f194149ac44460c-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;回顾一下我们的光线步进（ray-march）的过程：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;我们在（从摄像机）开始追踪时并不确定具体云的位置。&lt;/li&gt;&lt;li&gt;当命中云层时我们开始采样云的密度。&lt;/li&gt;&lt;li&gt;直接光能量计算——需要一个（让人懊恼的，annoyingly）昂贵的第二条ray-march射线朝向光源。&lt;/li&gt;&lt;li&gt;之后计算环境光的能量（*基于概率估算）。&lt;/li&gt;&lt;li&gt;最终需要累加次一级的光源的能量（*基于概率估算）。&lt;/li&gt;&lt;li&gt;之后我们对于每一个单位步长中都重复这一步骤，直到密度达到不透明（或出了云层）才停止march过程。&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;None of these operations are terribly efficient or were designed to work efficiently with voxels, but our approach to voxel cloud rendering replaces and optimizes almost every one of them with faster better voxel–based methodologies. Let’s start this overhaul at the beginning.&lt;/blockquote&gt;&lt;p&gt;这些步骤都不是特别高性能、或是面向高效采样体素而设计，但我们的体积云渲染方案替换和优化了其中几乎每个步骤，使之变成更快的基于体素的方法。让我们从头开始介绍这次大型的改造。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/a7340477b79f0f0564b16ca21a909a0b-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;开发一个高效的渲染与光照解决方案离不开稳固的建模方法，因为3A级实时图形技术中，你需要做（很多）“如何做”以及“消耗多少内存”的决策，（这些决策）可能会提升性能也可能影响性能。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/fd7f533d56237f653b43c98e4d37566e-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;回顾我们的2.5D云方案的密度采样，其中从2D建模数据中构建了3D云的体积——在提高其分辨率之前。&lt;/p&gt;&lt;p&gt;在一个基于体素的方法中，整个昂贵的操作可以被移到shader外，但这意味着需要能开发一种建模云的方式——存储并高效地通过采样器来访问它们。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/bf15d63f14ec756d44c249342d32c3f9-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;blockquote&gt;There are many tedious and unrealistic ways to model voxel clouds by hand but the most promising approach that I found the most success with in the past was using fluid simulation to “grow” clouds.   &lt;/blockquote&gt;&lt;p&gt;尽管也有许多乏味而不现实的手工（建模体积云）的方式，但以过去的经验我探索出的最靠谱的方式是——通过流体模拟器来“生成”云。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;694&quot; height=&quot;388&quot; src=&quot;https://image.gcores.com/ef193543d2a92b11b45d62f86761483b-694-388.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在我们2014年未最终使用（un-shelving）的流体模拟实验的基础上进行“人造云层”，似乎会是一个不错的开始，但我们需要一种能将流体模拟数据导入体积云的方法。（*原文用了一个生造词，“frankenclouding”）&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/d12e1b191d2c5a92f39e35703147916f-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;blockquote&gt;We developed a set of authoring tools in Houdini, that we call Atlas. At its heart, Atlas is a compositing pipeline for voxel data with various ways to generate or source and manipulate the data. &lt;/blockquote&gt;&lt;p&gt;我们在Houdini中开发了一组资源加工工具——它被我们称为Atlas。在其内核中，Atlas是一组能将体素数据以多种方式进行生成、存储（作为来源）及操作的工具链组合。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/38b3096cfc96134409dd0c80e4f5e9bb-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;例如，我们的一个大气环境艺术家Bryan Adams，从游戏中的长颈兽模型建立了一个体积云（如图）。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/0130b4307938d99ded585139bd76dd09-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;blockquote&gt;One of the things we learned early on was that multiple voxel grid boxes bounded us both figuratively and literally. Keeping them in memory and switching between them in the inner loop of a ray-march was not ideal and lead to slow performance. &lt;/blockquote&gt;&lt;p&gt;其中我们很快总结出的一件经验就是——多重体素格对我们来说是一种限制（无论从比喻意义上还是字面意思上）。将其保留在内存中并在一次ray-march过程中（在其中）切换，本身就是不理想并会导致低性能的。&lt;/p&gt;&lt;p&gt;*这里作者又用了bounded这个词来做了一次双关，感觉又是一种特有的冷笑话了（上篇里也有过）。而且这个限制并不是被体积边界限制了，更多还是（同一空间里）多重体积这个数据设计导致的。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/e94f07752cc608fde1ab7ed55f4ca97e-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;因此，下一步的思路就是当整个云的形体被构造后，我们将&lt;span style=&quot;font-weight: bold&quot;&gt;每立方米&lt;/span&gt;（every cubic meter）的云的密度信息写入一个&lt;span style=&quot;font-weight: bold&quot;&gt;密度体素栅格&lt;/span&gt;（dense voxel grid）中。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/0a9a12d28ca8feeb83372f272129e7fc-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这将解决建模云过程的第一个挑战，并将2.5D的云采样中相对开销大的部分替换掉——如果不是引入了使人崩溃的几个问题的话...&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/cc577896e3cb830804e0a7031ecaeecb-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;第一个问题是我们要面对的是天量的体素栅格，这肯定会有内存瓶颈。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/17519003b31c402540d3cdae2ae8e6fe-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;游戏的DLC区域面积有&lt;span style=&quot;font-weight: bold&quot;&gt;4平方公里&lt;/span&gt;，而我们需要大约&lt;span style=&quot;font-weight: bold&quot;&gt;500米&lt;/span&gt;垂直高度的空间来放置云层——从地面到空中。由于玩家可能飞跃云层，因此我们也需要足够的体素栅格的精度以保存细节信息。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/d127389e25a8ea88546699ae8e6e529b-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;即使放低期望并进行估算，也需要2048x2048x256尺寸的体素栅格以保证每2平方米的精度——玩家的飞行坐骑的翼展就有大约2米，因此这已经是比较极限的数据估计了。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/6a033af0e42ca2492bb3886a151873b0-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这个密度的栅格需要很多内存，并且会因此导致更长的ray-march时间——因为潜在需要消耗更大的内存带宽。之前的经验告诉我们这样不可行。&lt;/p&gt;&lt;p&gt;也有一些稀疏的体素格式，能仅在有物体的区域内存储一些（相对）更高精度的数据，但需要一些间接定位（indirection）的步骤，这会增大每次采样的开销。对于已经有相当大开销的ray-march来说这是很致命的——并且由于时间也很有限，我们决定搁置这种方案。&lt;/p&gt;&lt;p&gt;我们决定从BC4压缩格式，8米的精度开始。（*就是暂时不考虑稀疏体素这个方式了，另外这里8米应该是长宽，高度应该还是1米）&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/0df8ad4162428d192025b578cb3d41f1-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;让我们来总结一下体积云建模的技术路径：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;我们通过Houdini中一款称为Aero云解算模拟器来生成云。&lt;/li&gt;&lt;li&gt;之后我们修改并将其整合到我们的“人造云层”中。&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;Then store them in obscenely low resolution voxel grids to be sampled at render time. It sounds like its hardly a solution to our goals, but…&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;最终我们可耻地将密度数据以较低分辨率存储在体素栅格中，并在渲染时对其进行采样。听起来这差不多也算是一种解决方案，然而...&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;*最后一句作者用了很多作为技术分享不太常见的语气词，比如obscenely和sounds like、hardly，可见到这一步勉强实现的效果确实不太让人满意。obscenely这个词直译比“可耻”可能还严重一点，也比较奇怪，原意我这里就不写了，感兴趣可以去查一下。&lt;/p&gt;&lt;p&gt;*体素阶段精度的不足，后续作者团队通过利用节省出的性能空间进行了视觉效果精度上的弥补。&lt;/p&gt;&lt;h1&gt;2 采样密度——Sampling Density&lt;/h1&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/0a60955a2983dbf37c0af2ce1f70e53e-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;blockquote&gt;Past experience had taught us that balancing work between memory accessing and instructions in the compute shader can yield better performance on the GPU, so we chose to solve this in the density sampler itself as we have done in the past.&lt;/blockquote&gt;&lt;p&gt;过去的经验教育了我们，在compute shader中&lt;span style=&quot;font-weight: bold&quot;&gt;平衡内存的使用和指令的调用&lt;/span&gt;能获得GPU端更更好的性能表现，因此我们在解决这个采样密度的问题时也参照了这一思路。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/ea3fb6d58fb1abdf11f736d2215da6b4-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;回顾一下之前（非体积采样）的方案：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;将2D的NDF模型数据解压成空间轮廓。&lt;/li&gt;&lt;li&gt;之后“超精度”这一空间轮廓——通过以高频噪声侵蚀的方式。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;问题是——当采样体素数据时，这一超精度方法还能生效么？答案是肯定的。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;2559&quot; height=&quot;1599&quot; src=&quot;https://image.gcores.com/49fe147b04c762031027c9c3a21bc66e-2559-1599.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;比起明确定义出每个体素的（高分辨率的）密度，我们的方法是从一个低清晰度的基于体素的空间轮廓进行“超精度”——使用一个新的细节噪声。&lt;/p&gt;&lt;p&gt;这使我们得以规避内存瓶颈——通过分流了一部分工作至超精度指令的方式，正如之前在2.5D云中做的那样。&lt;/p&gt;&lt;p&gt;*这里还没有具体描述细节噪声的结构，但给出了体素块的尺寸和形状。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/d3abf9e0a7eb4d9bbd00f41a7fb57325-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;2559&quot; height=&quot;1599&quot; src=&quot;https://image.gcores.com/9c0a5605faa38ff8351e29df826ab31b-2559-1599.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这里用对比图简单做一个预览：上方的图是初始的空间轮廓渲染后的形态，下方的图是超精度之后的结果。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/724b6bc560781394b78723f427cbc396-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;空间轮廓横截面（Cross Section）&quot; width=&quot;694&quot; height=&quot;388&quot; src=&quot;https://image.gcores.com/2bc41aca9d00dd3c0efbf5a3384698af-694-388.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;blockquote&gt;The Dimensional Profile is generated from a signed-distance field of the cloud to ensure that we get a gradient from outside to inside. &lt;/blockquote&gt;&lt;p&gt;空间轮廓生成自一个&lt;span style=&quot;font-weight: bold&quot;&gt;有向距离场&lt;/span&gt;（缩写成SDF），以确保能得到一个从外到内的梯度。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/98d252457c434f6002bd2a98466c6223-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;我们的Atlas工具允许用户建模（被称为）&lt;span style=&quot;font-weight: bold&quot;&gt;Nubis体素数据场&lt;/span&gt;的数据，缩写成NVDF。作为对空间轮廓数据的补充，制作者能建立额外的NVDF，例如：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;细节类型&lt;/span&gt;（Detail Type），用来混合从纤细到波浪状的噪声细节。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;密度缩放&lt;/span&gt;（Density Scale），在噪声应用于超精度时适当降低密度。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这些数据使用BC6格式压缩（*之前的文章介绍过），支持3个通道——每个纹素（texel）占用1字节。&lt;/p&gt;&lt;p&gt;下面让我们看看体素云采样函数在超精度过程中的具体实现，以及新的3D噪声的一些特色。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/3dc1eb4cb91cbf421b3e90e70bfa4e80-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;我们的密度采样器中的第一步是：采样空间轮廓NVDF数据。&lt;/p&gt;&lt;p&gt;之所以第一步执行它，因为如果结果为0，则可以跳过后续关于云采样的步骤；如果空间轮廓是非0值，则我们将云模型数据传入超精度函数。&lt;/p&gt;&lt;p&gt;在深入超精度函数前，我们需要先来看看新的3D云细节噪声。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/c1ff40a3bcba16c13a1bba5219ff08bb-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;让我们看看这组实景定时拍摄（*原文中是较长一段视频）——虽然当时如果用了三脚架（Tripod）会使拍摄更稳定，不过目前也足以展示重点了。大家都看过类似的镜头，然而为了更好理解流体的特性，最好从不同的视角来观察它。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/4ee791f04116570c9ef4accb35ead6c5-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;尤其是&lt;span style=&quot;font-weight: bold&quot;&gt;上下颠倒&lt;/span&gt;（观察）时，它看起来更像泼入水中的牛奶。从这个视角更容易想象水蒸气（water vapor）所受的压力和云整体受的挤压。这一点是我们建模细节噪声时所重视的细节。&lt;/p&gt;&lt;p&gt;*这里作者采用流体类比的思路来观察，让人觉得既吃惊又合理。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/8378b7b32b44172e8d7ab7de3e39a634-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;回顾一下，我们将云的细节分类为了波浪状的和纤细的。&lt;/p&gt;&lt;p&gt;当水蒸气进入一个冷空气区域时，它会更容易（原文是effectively）地向外被挤出。&lt;/p&gt;&lt;blockquote&gt;The billows that we see are the result of some of that expanding vapor punching through weak spots in this squeezing force.   &lt;/blockquote&gt;&lt;p&gt;我们看到的波浪状效果是一些扩散的蒸气，在这类挤压力下穿透稀薄的部分后的结果。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/5e70d9f8cc88b8bbea9ce8b33c6a6d56-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;现在，在脑中倒装这一过程，就能得到一个更纤细的荷叶边（scalloped）的形体。&lt;/p&gt;&lt;p&gt;这一过程发生在水蒸气蒸发，同时周围的空气挤压蒸气时。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/30fedab4be805386657f7da9e31a23ee-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这里展示了另一组延时拍摄——云稀薄得就像网一样（*原视频后面云逐步消散了）。&lt;/p&gt;&lt;p&gt;此时，空气的扰动就起到了更决定性的作用，为云的形体带来了额外的扭曲。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/087a969c98449c9e63534a0a87b2922b-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;小结一下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;在密度降低处，表现为多层的纤细细节和卷曲（curly）的扰动。&lt;/li&gt;&lt;li&gt;在密度增加处，表现为多层波浪状的视觉。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/baf0b5341d9d3d94956daa2836c9a985-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在之前的方法中，我们使用反相的Worley噪声来生成波浪状的细节，但我们不得不重复采样很多层以获得类似云的效果——而不是堆叠的球体。&lt;/p&gt;&lt;p&gt;这次我们决定使用Houdini中的Alligator噪声（如图），既有着和之前的噪声相似的结构，又有着更像云的不均匀的空隙（lacunarity）。&lt;/p&gt;&lt;p&gt;对于纤细的细节，之前我们使用了Perlin-Worley混合噪声——不过，这对于超精度生成的过程来说还不够细致。&lt;/p&gt;&lt;p&gt;作为替代，我们从一个反相的alligator噪声开始，并使用一个卷曲噪声将其扭曲成需要的形态——这被我们称为Curly-Alligator噪声。（*Alligator直译是短吻鳄，这里属于专有指代）&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/aef5b314bbb6984c447dbc16f014939a-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;我们生成的这些3D纹理是4通道128x128x128的体素。&lt;/p&gt;&lt;p&gt;前两个通道分别存储低频和高频的Curly-Alligator噪声，而后两个通道则是低频和高频的Alligator噪声——讲座的最后会介绍一些辅助产生这些3D噪声的工具。&lt;/p&gt;&lt;p&gt;我也乐于分享一个生成Alligator噪声的工具的源码（*图中链接），它是由SideFX Software提供的。&lt;/p&gt;&lt;p&gt;了解了这些3D噪声的具体格式后，我们可以回到超精度部分的具体实现了。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/d268263cc5e600cfd0c5ba055c99c45a-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;第一步是（类似2.5D云中一样）使我们的细节噪声卷动——我们通过添加一个“风偏移量”来改变采样位置，以实现这一效果。（*类似UV动画，只不过是三维的）&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/d99ec5837e46237c2759a05695f551c5-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;下一步我们依据MIP级别（根据摄像机距离计算）来采样3D噪声。这能提升大约15%的性能，并且一个合适的MIP级别并不会导致结果上可察觉的影响。&lt;/p&gt;&lt;p&gt;由于采样器会被频繁调用，因此能省一点是一点（原文是every little bit helps）。&lt;/p&gt;&lt;p&gt;下面让我们看看如何定义纤细和波浪状的细节噪声（在超精度函数内部）。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/9f06a18694421a614c97221405601693-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;首先，让我们看看纤细云的照片。&lt;/p&gt;&lt;p&gt;注意在密度没那么高的部分，有一些非常高频的细节；而在更致密的区域有着低频的纤细结构。我们想要在超精度的过程中模仿这种关系。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/c7180218af921dacc61e46fedcdb4cc5-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;回顾我们的空间轮廓NVDF，可以看到它已经提供了一个从外到内的梯度。&lt;/p&gt;&lt;p&gt;*虽然箭头是向外的，但原文描述的方向确实是from the outside to the inside；箭头更多可能是表达受挤压扩散的方向。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/a5fdb8d50ee4a00c0bec954a22eb703b-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;为了模仿这一点，我们可以简单地基于空间轮廓来对低频和高频纤细噪声做混合。&lt;/p&gt;&lt;p&gt;*lerp函数就是线性插值，看多了的应该都不陌生。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/45250a8b0482ef1b0b8599a3262f7755-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;2559&quot; height=&quot;1599&quot; src=&quot;https://image.gcores.com/8e518da32182e6d26032230984c2765c-2559-1599.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;2559&quot; height=&quot;1599&quot; src=&quot;https://image.gcores.com/6a7eb4d9f8d8021ad3e2e8aea03d0ed8-2559-1599.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*三张图依次是：只有高频、只有低频、混合噪声的结果。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/10176142ef10c470412c32ac2a733f00-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;下面来看一些波浪状云层的照片。&lt;/p&gt;&lt;p&gt;注意到在靠近内核的部分有着低频的波浪状形体，而靠近表面则有着高频的波浪状形体。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/07399f1a5959d39cac8a93fd82e53e97-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;对于波浪状形体，我们希望在边缘（相对核心）采样更多的球状结构。同样的我们也是基于空间轮廓来混合低频和高频的噪声。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/bfd3adc3b639ed05fa3e8adece2465f2-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;2559&quot; height=&quot;1599&quot; src=&quot;https://image.gcores.com/a1141bb8c88de3c5d02df12c6d430802-2559-1599.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;2559&quot; height=&quot;1599&quot; src=&quot;https://image.gcores.com/43e16ccf1c83ab6520ea54df57cf6bb2-2559-1599.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*同样，三张图依次是：只有高频、只有低频、混合噪声的结果。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/19c3071c5bc78147b4e9cf5a22aaeaec-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;之后我们基于类型数据（type data），在采样位置对两种噪声（的混合结果）再做混合。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/cfd9345700000039b1ce0270bb09f706-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;2559&quot; height=&quot;1599&quot; src=&quot;https://image.gcores.com/bf72899db849632044c8ec9da2f5ed0d-2559-1599.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;2559&quot; height=&quot;1599&quot; src=&quot;https://image.gcores.com/bbfc35bd4c52e1249be5a86bf851f2d4-2559-1599.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*三张图从上到下依次是：只有纤细噪声、只有波浪噪声、两者基于类型数据混合。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/8f8ea50c0277a3c034c1094603e24842-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这在远距离时运作良好，但仍然无法符合我们想要飞跃云层的目标——在近处仍相当缺乏细节。因此，我们开发了一种&lt;span style=&quot;font-weight: bold&quot;&gt;重用高频噪声&lt;/span&gt;的方式，以在必要时添加一些更高频的噪声，同时不再进行额外的高开销的噪声采样。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/53ee682bed62f81daca0d52dbe8c2a12-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;我们创建了一种被称为&lt;span style=&quot;font-weight: bold&quot;&gt;双折叠噪声&lt;/span&gt;的算法，以获得两种类型各自对应的更高频噪声。&lt;/p&gt;&lt;p&gt;*具体公式如图，基础思想就是展开到-1和1的范围后，又通过取绝对值abs“折叠”，之后pow取多次方。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/d91a941ec090f3b1866126c2da802545-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;之后我们基于细节类型数据对两种类型的更高频噪声进行混合，最后再基于到摄像机的距离和之前（远距离情况下）的噪声云层进行混合。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/037015dd35abd52130ac3478bfe1edb8-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;2559&quot; height=&quot;1599&quot; src=&quot;https://image.gcores.com/e42a408f6011795f3019be5ca9ae02f9-2559-1599.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*上面两张图展示了：未增加细节和增加了细节后的不同结果。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;692&quot; height=&quot;388&quot; src=&quot;https://image.gcores.com/b1704f61d42f6f82586fbab38d297b8b-692-388.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这里展示了飞跃云层的过程中这些细节噪声是如何生效的——并且可以看出这一效果是无缝切换的。（*因为都是连续插值的）&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/b7210ffe96054715f17f863a36f22745-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;现在我们明白了噪声的混合及运作过程，让我们将其整合到函数中：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;首先，我们使用一个重映射（remap）函数来侵蚀云的空间轮廓。&lt;/li&gt;&lt;li&gt;之后我们将超精度密度（up-rezed density）乘上密度缩放。&lt;/li&gt;&lt;li&gt;最后有一个使结果显得更锐利的方式是通过pow函数——更多地在低密度区域进行这项处理能使这部分提高清晰度。&lt;/li&gt;&lt;li&gt;之后我们将其作为超精度的结果返回。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;*解说稿没有完全覆盖公式的每一步，但是参照各处的命名一致性应该比较清晰了。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/2d1eb7bcfa7afd1df5f57503851ab40a-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;总结一下：&lt;/p&gt;&lt;p&gt;从结果来说，这套实现是一种能从地面到空中近距离的无缝体积云渲染方案，它有着简化后的采样函数，既回避（sidesteps）了高内存使用同时又能提供足够高的细节度。&lt;/p&gt;&lt;p&gt;我们的空间轮廓能提供相对低精度的每8米一样本的精度，通过一些超精度方法能提升至（相当于）0.5米的精度。&lt;/p&gt;&lt;p&gt;解决方案的关键是平衡内存（从1米降至8米）和指令调用（引入一些噪声采样）来获得相对更好的性能。&lt;/p&gt;&lt;p&gt;不过我们还远没有结束这一改造（overhaul）过程，因为在最差的情况下，960x540像素的渲染会消耗10毫秒——而在地面观看时，我们需要和其它的一些资源一起分配性能预算。从影视特效或宣传动画的角度来说或许足够了，但作为一个实时渲染的游戏来说不能达到3A标准。&lt;/p&gt;&lt;p&gt;*最后一句及后面有一个bonus页，作者展示了一些在致密栅格采样（dense grid sampling）方面的探索。不过截至这一段落为止作者并没有明确后续是否要应用进一步提升精度的方案。&lt;/p&gt;&lt;h1&gt;3 光照计算——Lighting&lt;/h1&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/16cc9b41b2f7584f7c8364e49016255e-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;光照，让人哭笑不得的是（ironically）——它也是体积ray-march步骤中开销最重的部分之一。在它的面前我们的任务似乎是不可完成的：既需要节省大量的性能，又要提高质量以支持飞过云层时的效果。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/4aa1c6cbcd22193dbc608668704330c8-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;回顾我们之前的介绍，我们把光照分解为&lt;span style=&quot;font-weight: bold&quot;&gt;直接散射&lt;/span&gt;（Direct Scattering）、&lt;span style=&quot;font-weight: bold&quot;&gt;环境散射&lt;/span&gt;（Ambient Scattering）和&lt;span style=&quot;font-weight: bold&quot;&gt;次级光源&lt;/span&gt;（Secondary Sources）三部分。&lt;/p&gt;&lt;p&gt;其中直接散射的计算开销非常大，因为需要向光源发射第二级的ray-march采样射线（*而且是逐采样点的）——我们也尝试了各种可能来加速或替换第二级的ray-march采样。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/950e1de869829de5c5e16f7d53f39ba8-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;直到我们以体素的角度来考虑这一问题，之前有一个看起来比较高傲（loftier）的点子就显得有些合理了。&lt;/p&gt;&lt;p&gt;主程（Principal Tech Programmer）Nathan Vos一直想将光采样射线与视线采样射线中&lt;span style=&quot;font-weight: bold&quot;&gt;解耦&lt;/span&gt;，不过直到使用了体素方案后，改动的复杂度才降到了合适的范围。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/44cfba58c0923d7c4fc1d6581589f42c-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在我们的新方案中：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;前2次采样的方法沿用之前的方案。&lt;/li&gt;&lt;li&gt;但剩余的采样在一个单独的pass中被预计算，并存储于256x256x32尺寸的体素栅格中。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这有助于保持云的近处表面的细节，并提供一种更弥散（diffuse）的视觉效果。需要明确的是，预计算是发生在ray-march的步骤之外的。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/0fd476d0f44b02c19f8d0cc80623f987-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;blockquote&gt;Here is how it works: If a voxel has cloud in it, then a ray is marched between that voxel and the boundaries of the voxel grid and density is accumulated at each step. &lt;/blockquote&gt;&lt;p&gt;这里展示了它（预计算的体素栅格）运作的方式：如果一个体素中有云的数据，则向光源发出一根射线，直到达到定义的边界，而过程中的每一步都对密度做累加。（*这里density因为是采样的光照，可以理解成通透程度。但后面还是简化翻译成密度。）&lt;/p&gt;&lt;p&gt;我们发现这大约减少了40%的渲染时间。这项操作自身消耗在0.1-0.2毫秒之间，取决于在一天里的时间以及射线到太阳的距离。这一开销是&lt;span style=&quot;font-weight: bold&quot;&gt;平摊到8帧&lt;/span&gt;之后的结果。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/a09212c9d74bfefd87b6d0ba917170fe-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;2559&quot; height=&quot;1599&quot; src=&quot;https://image.gcores.com/f0670b3f16a86eadd3094f94fe90d1ac-2559-1599.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;作为节省性能之后的补充，我们终于能渲染远距离云内阴影了。&lt;/p&gt;&lt;p&gt;这里（上面的图）是之前的方案中256米，10条光采样射线的结果。&lt;/p&gt;&lt;p&gt;下面的图则是基于体素的光照方案的结果。这是一次难得的场合，基于性能的优化得出了更好的效果。（*下面的图虽然看着更黑了，看似少了一些细节，但是明暗关系更“对”了一些）&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/aa454e8c3291dfbc274375bf78646bc8-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;切换到体素方案也为我们带来了一些自由，以固化（solidify）我们建模多重散射效果的方式——对应云的内发光到暗边缘的效果。让我们深入看看这一实现。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/94efba1cf6378f4ad614f45d17bc1281-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;让我们看看休斯顿的Natural History博物馆展出的水晶样本。&lt;/p&gt;&lt;blockquote&gt;It’s interesting because you can peer deeply into the core through the little gaps between each crystal. If you blur your eyes, you can almost see what looks like a lump of lighter material under the surface. &lt;/blockquote&gt;&lt;p&gt;有趣的是你能从水晶针的微小缝隙中观察到其内核部分——如果你让视觉稍微模糊点，你就能把它近似看作（暗色）表面下的一小块发光材质。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/b21254c0d5065181651883910f54c993-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;很难不观察到其中的相似点。在云的表面边界处，有着更少的材质（*这里指实际的水蒸气、冰晶等）——使入射光线更容易散射到随机的方向，因而不容易进入人眼。&lt;/p&gt;&lt;p&gt;因而你能想象云内部有这样一个概率场——朝向观察者的内散射，随着深度越深就越是各向同性（isotropic）或全方向的（omnidirectional）。这种透射向表面的光照很像隔着一层厚棉花的闪光灯。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/99c04cd40c087766aed13673c50259d8-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;或是像水晶体结构由内而外发出的光。&lt;/p&gt;&lt;p&gt;从结果上观察这种散射的潜在规律，能更有助于我们建模实时散射效果。&lt;/p&gt;&lt;p&gt;*从自然界的实际效果观察，是这个作者很重要的一种思路。虽然实际上设计这种概率场是一种近似，但视觉上又很“真实”。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/45b6ce46d973dac02b58a307bee2ac50-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;2559&quot; height=&quot;1599&quot; src=&quot;https://image.gcores.com/1b0a054b3dfb1968da21e5db5eb63872-2559-1599.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;幸运的是，我们已经有了这种体积描述。让我们以图中的云为例。&lt;/p&gt;&lt;p&gt;下方的图展示了它的空间轮廓——让我们把这作为（散射）概率场的基础。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/9e7ae9fa2c01bdf9b35dc60e0ec7a83e-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;先让我们将这片云对齐到视线和太阳的中间。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;2559&quot; height=&quot;1599&quot; src=&quot;https://image.gcores.com/b31ba084c6b1ad5d01b967a432173142-2559-1599.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;然后取这个角度中心位置的一个切片作为样本。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/6715e42ede4d9e9325d0ae0c89a4a6e1-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这里是切片从初始角度进行观察的效果。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/d3ccea6cdd439c466f111f4a978d6ea6-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;2559&quot; height=&quot;1599&quot; src=&quot;https://image.gcores.com/5d948b13e6c5db6a2a01f28c09f36640-2559-1599.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这里展示了我们使用空间轮廓作为散射参数的效果。为了模拟光散射被云体吸收的情况，我们额外应用了一个beer-lambert衰减曲线。（*上图是无衰减的，下图是模拟了衰减的）&lt;/p&gt;&lt;p&gt;这一曲线值在靠近太阳和云的内部的位置更大，以模拟前述的内部光散射效果。&lt;/p&gt;&lt;p&gt;让我们看看实际交付版的游戏中云光照的效果。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/c76be6db8f28afbab8b5774d00e9b062-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;2559&quot; height=&quot;1599&quot; src=&quot;https://image.gcores.com/211cfc23dfdf1655d351c11368eec6e1-2559-1599.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*上图是没考虑多重散射估计的，下图是应用了这一算法的。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/2836d006e50632cb755351352f48f0e4-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;2559&quot; height=&quot;1599&quot; src=&quot;https://image.gcores.com/d86dd7bc76f2d2886ebd6bce01191bb6-2559-1599.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*这是太阳在观察者背后的情况。上图是没有多重散射估计的，下图是应用了这一算法的。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/ebd47cebc8a0a1066b40020ceaf0daab-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;就像在2.5D云中的那样，我们也使用空间轮廓作为估算环境光散射的概率场。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/1deeb16e088cedffedde6ef15457e891-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;2559&quot; height=&quot;1599&quot; src=&quot;https://image.gcores.com/4cb047e49ee859cc3bb9be555f08d5f2-2559-1599.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*上图是没有计算环境光贡献的，下图是计算了的。&lt;/p&gt;&lt;p&gt;由于我们（基于体素的）预计算光照采样的方案运转不错，我们终于考虑改进环境光照的计算方式，从概率估计变成采样累加。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/e1f4d6bf71722d24db3da810bf360a8e-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;当我们以射线采样预计算天空光照时，我们获得了能局部调整环境光强度的参数，使得天空被其它云遮挡的区域会计算更少的光强度。&lt;/p&gt;&lt;p&gt;在计算时，我们就直接乘上这一累加后的密度系数（*负值的exp，见图中公式）。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/1fb3e4ecb33bbe86a2105646d2b856e7-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;2559&quot; height=&quot;1599&quot; src=&quot;https://image.gcores.com/845d1468d10a3d7584f3076fd9e20ce9-2559-1599.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*上图展示了无方向性（旧算法）的环境散射效果，下图展示了基于体素光的方向性环境光散射。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/4d3a5c96a3821e3856b5ba2973c7b4fa-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;而灯光之类的次级光源我们还是基于概率场来估算。&lt;/p&gt;&lt;p&gt;首先，我们定义了一个基于球体的潜在能量范围，并乘上一个模拟出的非均匀（non-homogeneous）密度系数。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;692&quot; height=&quot;388&quot; src=&quot;https://image.gcores.com/3d94e7b377004ae86a1cd985f19a8474-692-388.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这里展示了游戏中的一处效果。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/0a1c2fea5d92e7db1a2ef2a236001e03-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;426&quot; height=&quot;240&quot; src=&quot;https://image.gcores.com/0c8d4d11b15a053ed296c0dfe47bc0a4-426-240.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;由于这是一次大改造，因此确保云的渲染在一日循环中的始终有效是很重要的。这里让我们执行一个循环以进行观察。&lt;/p&gt;&lt;p&gt;那些远距离云上的阴影也极大提升了观感。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/2d4c42c3cbffee6515674bf907aadb65-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;最后总结一下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;我们解耦了光线的ray march过程，预计算并存储在一个体素栅格中的累加密度结果集合中。&lt;/li&gt;&lt;li&gt;通过这一过程（相对原来）减少了每帧40%的开销，我们把这些性能空间用来添加远距离云的阴影。&lt;/li&gt;&lt;li&gt;我们也使用这一方案来改进了环境光的效果。&lt;/li&gt;&lt;li&gt;额外地，我们的一些光照估算方式被简化成直接查找（体素）空间轮廓。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;有时就是这样，改良一项效果会开启其它解决方案的门。&lt;/p&gt;&lt;h1&gt;结语&lt;/h1&gt;&lt;p&gt;存储空间和指令调用（或算法复杂度）的平衡是作者提出的一项很有实践智慧的视角。在给定的需求——飞入云层作为大前提下，体素数据的使用就不可避免。在此基础上，云的建模从体素的结构和性能指标开始考虑，并在后续的密度采样和光照计算尽量发挥体素（对画面）带来的优势来改进渲染管线。&lt;/p&gt;&lt;p&gt;另一个很重要的视角就是——从物理光学中观察。毕竟这些方案无论显得如何“真”，其实中间不乏估算与trick；但很多时候，使用概率场或概率密度来计算光照或采样等，很类似数学拟合后的结果——其结果首先是要有合理的曲线，其次就是不会发生能量凭空增加的情况。只有做到了这一点，在实现全天候光照的时候才能有相对准确的结果。&lt;/p&gt;&lt;p&gt;这一篇读到的这三部分应该也算是Nubis3体积云系统的核心，下周更新的剩余的部分会包含一些系统整合方面的介绍。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;最后是资料链接：&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;Nubis3: Methods (and madness) to model and render immersive real-time voxel-based&lt;/span&gt; &lt;span style=&quot;font-weight: bold&quot;&gt;cloud&lt;/span&gt; &lt;a href=&quot;https://www.gcores.com/link?target=https%3A%2F%2Fd3d3g8mu99pzk9.cloudfront.net%2FAndrewSchneider%2FNubis%2520Cubed%2520-%25201080.pptx&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-weight: bold; text-decoration: underline&quot;&gt;1080P PPTX&lt;/span&gt;&lt;/a&gt; &lt;a href=&quot;https://www.gcores.com/link?target=https%3A%2F%2Fadvances.realtimerendering.com%2Fs2023%2FNubis%2520Cubed%2520(Advances%25202023).pdf&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-weight: bold; text-decoration: underline&quot;&gt;PDF&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;/p&gt; </description><link>https://www.gcores.com/articles/192613</link><guid isPermaLink="false">gcores-192613</guid><pubDate>Fri, 27 Dec 2024 03:22:27 GMT</pubDate><author>Hakumen</author><enclosure url="https://image.gcores.com/e35453774d33987c6256001cc1219b5f-1440-810.png" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/e35453774d33987c6256001cc1219b5f-1440-810.png"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/191f845d-48a8-49a5-a43b-18158df1fc98.mp3" length="1852" type="audio/mp3"></enclosure><itunes:duration>0:30:52</itunes:duration><category>知识挖掘机</category></item><item><title>《如龙》系列支线任务微观设计模板浅析</title><description>&lt;figure&gt;&lt;img alt=&quot;《如龙》系列支线任务微观设计模板浅析&quot; src=&quot;https://image.gcores.com/c623840d94756198db850b6d7933f390-831-469.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/44749808-ffa7-4f73-a66c-9a4c2b7ad9b9.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/44749808-ffa7-4f73-a66c-9a4c2b7ad9b9.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/44749808-ffa7-4f73-a66c-9a4c2b7ad9b9.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;偏执行为（任务入口）+主角能力（玩法流程）+普世情感（任务结局）&lt;/blockquote&gt;   &lt;h1&gt;前言：&lt;/h1&gt;&lt;p&gt;熟悉《如龙》系列游戏的玩家应该能达成一种共识，就是玩家可以从《如龙》系列的支线任务体验中感受到一种世代传承的共性：演出方面，NPC的夸张演出和小流氓语气词，说完话后从主角身边趾高气昂地慢悠悠地擦肩而过而主人公只是看他一眼，再自己默读一遍任务内容……台词方面，路人和配角亦或是主人公的心理独白都非常质朴和真诚；剧情方面带着诙谐、荒诞，仿佛每个人脑子都不好使，最终却能引起玩家共鸣的反差……&lt;/p&gt;&lt;p&gt;《如龙》塑造了一种独特的日式风格，兼具荒诞、热血、温情等情感体验。硬要寻找类似的风格来源的话，许多日剧和搞笑艺人也有类似的表现，可以说是“日式幽默”的一种。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;720&quot; src=&quot;https://image.gcores.com/fde56f12250c85f09affbacb4a5241ea-1280-720.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;既然形成了风格，就必定有某种规律和模板可考，以实现在十几年的跨度里如龙系列支线剧情始终如一的气质和品质。&lt;/p&gt;&lt;p&gt;我将这套任务设计模板概括为如下的剧情结构： &lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;偏执行为（任务入口）+主角能力（玩法流程）+普世情感（任务结局）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;后续论述不会特意引用文献，仅供参考，有错误也很正常，望指正。&lt;/p&gt;&lt;p&gt;首先简单解释一下这三个环节涉及到的游戏流程结构。&lt;/p&gt;&lt;h1&gt;一、宏观的“任务”&lt;/h1&gt;&lt;p&gt;所谓的“任务”，其实是游戏的一个子系统，它的存在是为了告诉玩家该干嘛。任务列表、感叹号标记、主界面UI上的任务目标引导、成就系统，都是任务系统的形式。&lt;/p&gt;&lt;p&gt;最初的RPG游戏的任务可能只是“击杀几只怪物”、“收集多少素材”这一类直接提供指引和即时奖励的清单。&lt;/p&gt;&lt;p&gt;就如同最初学术界对游戏本体讨论中存在叙事派和非叙事派，笔者接触的现代RPG游戏往往将玩法目标指引和叙事相结合，同时提供游玩和叙事的双重体验，从设计层面上具体落实到关卡和剧情的结合。当今RPG游戏，无论是拥抱任务系统、提供强引导的的《巫师》、《辐射》、《刺客信条》、《纸片马里奥》一类；还是《黑暗之魂》、《艾尔登法环》、《塞尔达传说》这类摈弃任务清单和感叹号指引、只使用弱引导和关卡设计驱动玩家的类型，在任务设计上都采取了“玩法+叙事”的设计，这证明了叙事在游戏进程中的重要性，正如同詹金斯在2004年的论文中陈述：玩家回忆并向其他人分享一款游戏时，通常是以故事的形式叙述出来。故事可以为关卡赋予强劲的吸引力，RPG的“主线流程”可以保证玩家顺畅地游玩到庞大的关卡。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;2521&quot; height=&quot;1406&quot; src=&quot;https://image.gcores.com/008f17653b5db625a111aeed548a928b-2521-1406.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;《纸片马里奥》的支线任务清单&lt;/p&gt;&lt;h1&gt;二、单一任务的结构&lt;/h1&gt;&lt;p&gt;这种结构方式沿用了故事的三幕式结构，在过去阅读其他作者的文章时，发现三幕式结构同样有效地适用于RPG游戏，特别是开放式游戏的任务结构。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;495&quot; height=&quot;217&quot; src=&quot;https://image.gcores.com/d0a7c9996bf4125b9d257e35b81764ee-495-217.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;与故事的三幕式结构有所区别的是，游戏的任务链可以包含更加复杂的情节和难度曲线，有时任务的舞台需要横穿多个不同的关卡区域。由于关卡区域会被设置为不同难度、等级，以实现游戏循环，因此任务链也需要“退出点/暂离点”。即时没有横跨多个区域的问题，较长的剧情线也应该拆解成任务链，保证玩家的自由性，而不是被一个不喜爱的任务硬控数小时，导致糟糕的游戏体验。&lt;/p&gt;&lt;p&gt;因此，游戏的任务结构不会在第二幕结束后立刻进入第三幕，也可能出现第一幕和第二幕循环的现象，如1→2→1→2→3这样的结构。如果任务链中间涉及到“横跨区域”的问题，则最好应该有1→2→3的完整结构，并在结局中抛出下一个冲突或障碍，以确保下一次进入情境时，可以让玩家回忆起已经经历过的任务链，就如同好的电视剧在每集结尾，不仅解决了这一集的冲突，还会抛出下一集的钩子，以吸引观众每天观看。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;2.1开端/引入&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;大多数开放式RPG游戏的任务设计目标是沉浸感、自由感的游玩体验，这与情节有一定的相悖之处，因为情节需要缜密的编排，以形成张弛有度的节奏和氛围，实现叙事功能；而自由、开放将这种权力交给了玩家本身。&lt;/p&gt;&lt;p&gt;尽管有一些通过碎片化叙事、环境叙事，利用关卡和玩法机制本身叙事的优秀案例，但针对这个问题最通行的RPG游戏解法是&lt;span style=&quot;font-weight: bold&quot;&gt;设置激发事件&lt;/span&gt;作为任务的入口。在《黑神话悟空》里，这个激发事件可能是刚好在你爬上楼梯后映入眼帘的糜道人；在《刺客信条：幻景》则可能是一位骑在马上的女性等待着雇佣兵的到来；《如龙》则喜欢制造一个夸张的场面，一旦玩家移动进入触发区域则唐突切入Cutscene；最近游玩的《夺宝奇兵》很有趣地设置为玩家在安东尼奥办公室外的走廊可以听见文图拉神父正在找安东尼奥的麻烦……当然，这些事件也可能通过酒馆、手机、公告板等“接引设施”作集中的引导，但集中的引导和入口不代表任何一个单一的任务不能遵循三幕式的结构。《刺客信条：幻景》的任务便是如此，玩家统一在基地内接取委托，主线故事还有一个强劲的线索板，将任务以拓扑结构展示出来。但单一任务链的设计上，到达委托提示的执行地点之后，剧情线依然会有一个作为引入的开端，&lt;span style=&quot;font-weight: bold&quot;&gt;介绍委托人&lt;/span&gt;的性格、诉求，以及&lt;span style=&quot;font-weight: bold&quot;&gt;玩家扮演的角色&lt;/span&gt;在故事中的身份、能获得的利益等。&lt;/p&gt;&lt;p&gt;引入阶段铺设的氛围和冲突，理想的效果是将玩家“自由”的思绪和行为拉到这个任务上来，把身份从开放世界故事拓扑结构的中心（主角）下放到任务链，任务链即是情节，是有意识地受到编排的一连串事件的组合。&lt;span style=&quot;font-weight: bold&quot;&gt;从游戏循环上来说，就是把玩家从开放世界游戏的“长期游戏循环”引入任务的“短期游戏循环”。&lt;/span&gt;&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;2527&quot; height=&quot;1415&quot; src=&quot;https://image.gcores.com/2fb8d95821ca4f546d5de5b759bb0c9c-2527-1415.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;奇葩的场面引起玩家注意（触发方式还是碰撞盒，保证可见性）&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1777&quot; height=&quot;1003&quot; src=&quot;https://image.gcores.com/22a042dad9da8aeb6823b79999b2313b-1777-1003.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;2.2中段/故事核心&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;一旦进入了任务，戏剧冲突（任务目标）就被锁定。第二部分是任务的核心，也就是传统故事结构中的“对抗”环节，主人公为了解决障碍和冲突去付出努力和寻找办法，在游戏中就表现为玩家要通过自己在游戏中被赋予的能力（战斗、探索、生产、解密等）去通过关卡。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;455&quot; height=&quot;163&quot; src=&quot;https://image.gcores.com/e0ad6e6e77622a7b6c1c1b902a601e99-455-163.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;三幕式结构的情绪曲线&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果引入部分很好地达成了目标，在这一部分，设计师就希望在开放式的关卡中制作一些可控的体验内容，以有效地控制叙事信息，更好地编排情节和玩法，形成一个令人沉浸的节奏，这一部分不仅仅是故事的核心，也是应当与游戏的玩法深度结合的部分。&lt;/p&gt;&lt;p&gt;在关卡/任务设计上，有效的心流曲线应该是多种玩法要素编排成的有效循环，在循环中各种要素的紧张程度/难度/乐趣应该依次排列。&lt;/p&gt;&lt;p&gt;这里举一个经典的案例就是《战神4》的线性关卡设计基本遵循着：剧情→战斗→解谜三者的循环来做，使得玩家的情绪始终控制在轻松→紧张→适中的循环里。正如前文所提到的，除了叙事之外，任务设计的目标是指引玩家进行游戏，在心流曲线的设计上和关卡设计可以说是同根同源，所以这一种循环方式也可以直接套用到任务链的设置中。&lt;/p&gt;&lt;p&gt;笔者也曾以流程图的方式，像关卡一样来拆解剧情大纲，以确定每一链的环节应该安排何种程度的玩法元素和内容。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1175&quot; height=&quot;757&quot; src=&quot;https://image.gcores.com/eb1dda13ce53b0655a0623e6aea13be1-1175-757.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1966&quot; height=&quot;855&quot; src=&quot;https://image.gcores.com/73187381a43c15905ff8a24d66626e56-1966-855.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;除此之外，剧情和演出内部的心流曲线、品质规划和传统的故事写作和影视编导如出一辙。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;2.3结尾/高潮和结局&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;对玩家的体验给予反馈。除了剧情和道具奖励的反馈，还有纪念品、场景变化等可以让人直接感知到的“任务结果”。&lt;/p&gt;&lt;p&gt;在现今主流的开放世界游戏里，结局非常复杂，一方面很多游戏为了营造“自由感”，要对玩家的“选择”做出相应的不同反馈，以告诉玩家：你做的选择是有意义的。这大大增加了结局的复杂度。即使是老游戏，笔者童年为了探索《武林群侠传》的所有任务的不同结局（往往也会导向整个游戏剧情的不同结局），也是玩上了几十遍……另一方面，以叙事为主的游戏会将有限的制作周期和资源全部投入到剧情高潮段落上，《最终幻想16》就是其中的佼佼者。&lt;/p&gt;&lt;p&gt;即便在资源发放严格安排的国产长线运营游戏里，故事的结局也有着很重要的分量。米哈游系的传说任务结局会有惊人的长段动画；《鸣潮》地区任务和任天堂的做法类似，重启矿场、大树复苏等一个不落。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;三、如龙任务的微观剧情结构=&lt;/h1&gt;&lt;h1&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;偏执行为（任务入口）+&lt;/span&gt;&lt;/h1&gt;&lt;h1&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;主角能力（玩法流程）+&lt;/span&gt;&lt;/h1&gt;&lt;h1&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;普世情感（任务结局）&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;3.1任务入口——偏执行为&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;《如龙》以偏执行为（变态行为）作为任务的入口，是一个很讨巧的做法。如龙的舞台设置在一个完全仿真的日本街区，所以世界观的设定肯定是偏向现代都市题材和现代社会的，而非《赛博朋克》、《巫师》、《勇者斗恶龙》等区别于现代社会的。一谈到现代都市题材，所有的RPG游戏编剧和设计师们都希望将游戏内容区别于现实，区别于电影、电视节目，提供更加架空的幻想。GTA、如龙、黑手党选择了幻想黑帮世界，女神异闻录将现代学生生活和中二梦想结合，漫威蜘蛛侠让超级英雄和反英雄成为城市的主角，最近的国产大世界双端互通游戏《绝区零》《异环》《代号无限大》等等也都是都市潮酷幻想类设计。&lt;/p&gt;&lt;p&gt;偏执行为作为一个具有典型性的&lt;span style=&quot;font-weight: bold&quot;&gt;场面&lt;/span&gt;（Scene），可以仅通过简单的物体、人物、动画的放置，实现让一片区域从拟真的城市街区环境中脱颖而出、抓取玩家吸引力的作用。例如上文中贴到的垃圾堆图片，在正常的城市空间里就是一个奇观；下图《如龙0》的排队买游戏任务则只是放置一排有待机动画的NPC和几个对话气泡UI，就能够让玩家想要上前对话探索事件。这个任务还在Youtube上被翻拍为真人版，得到许多玩家的共鸣，说明其任务模板成为了《如龙》游戏系列的一种符号。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;2507&quot; height=&quot;1386&quot; src=&quot;https://image.gcores.com/6ea17cd2f23754c1443b91c663d05629-2507-1386.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在商店前排队的一排有气泡的NPC&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;偏执的行为或变态行为可以反映出都市社会的极端精神或肉体异常状态，将一些都市、社会的问题具象化到一个虚构的个体上，以实现最终《如龙》的编剧需要达成的情感传达。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;3.2任务流程——主角能力&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;所谓“主角能力”，是从剧情中角色扮演的身份出发的说法。“主角能力”其实包含了多个组成部分，如“玩家能力”、“主人公设定”都是“主角能力”的一部分。“玩家能力”则通常是游戏的核心玩法/副玩法，因此也可以简单地将“主角能力”理解为“游戏玩法”。作为例外的是，许多奇幻世界观的RPG游戏，主人公可以做到的事情只存在于剧情和演出中，而不会直接与玩法机制关联，因此还是有所区别。&lt;/p&gt;&lt;p&gt;例如笔者在先前的文章中分享《死亡空间：重制版》制作组重新做一段剧情演出时，希望将主人公的特点更加凸显出来，因此选择将游戏中玩家所能使用的“动态抓取能力”加入到了剧情演出的动作戏中。这就是一种非常巧妙的、在剧情中体现“主角能力”的方式。&lt;/p&gt;&lt;p&gt;《如龙》中，支线任务的中段设计便是紧紧围绕着其玩法机制进行的。&lt;/p&gt;&lt;p&gt;剧情方面，最早的《如龙》强调扮演武力超绝的“堂岛之龙”，因此在支线任务中段多是通过武力解决问题：黑道混混、拳击格斗家等NPC持械压迫普通民众，桐生一马得知之后，文质彬彬地跑去协商问题，最后大打出手，解决问题。而《审判之眼》系列则聚焦于主人公“侦探”的身份，支线任务多会先利用聪明才智、现场勘探、情报搜索等互动方式，先查明真相&lt;span style=&quot;text-decoration: line-through&quot;&gt;，再大打出手&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;玩法方面，除了主玩法的战斗之外，《如龙》会将各种副玩法融入到任务之中，设计对应的剧情。例如《如龙》中经典的任务，帮男明星在神室町追回飞走的假发，就是围绕着“追击战”这一玩法设计而成，由于玩法和接近真实世界常识的世界观割裂，还造成了非常戏剧性的幽默效果——一顶假发随风在神室町满街乱飞……《审判之眼》则是围绕着新制作的“无人机”、“跟踪”等侦探玩法，设计了大量尾随、窃听类的剧情。卡丁车、四驱车、宝可梦对战等玩法也会被设计到相应的系列指引任务以及其他用到这些机制的支线任务中。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;3.3任务结局——普世情感&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;《如龙》的支线任务设计严格遵循三幕式的高潮和结局结构。&lt;/p&gt;&lt;p&gt;可以说，在任务引入环节那夸张的场面、任务流程环节夸张的玩法，本身带有的叙事气质都是无厘头的，如果仅仅如此，如龙支线任务就会塑造起一个很癫狂的只会玩梗的世界……绝不会被玩家所津津乐道。其要点就在于第三幕结构、任务的结局环节，《如龙》的剧情设计依然会围绕着普世情感展开，特别是在剧情前文偏执行为的衬托之下，揭开偏执行为、变态行为的深层原因，更加深了这种情感的表达。想象一下，当你切换视角，看着欧亨利笔下的画家：&lt;/p&gt;&lt;p&gt;一位无名的落魄画家，每天热衷于在公共区域的树上画叶子，做“叶子仙人”，这对树木养护工作造成了很大的困扰。你能感受到他有种奇怪的偏执情感，但是画叶子并不能当饭吃……你受到环卫工人的委托，帮忙劝阻这个奇怪的画家。劝阻无果之时，画家的油漆桶从树上掉落，刚好砸中了路过的混混。你阻止了混混对画家实施暴力。画家对你表现感谢之余，也向你告解：自己画叶子并不是为了生计，自己早就和一事无成的自己和解了。但是，当他得知一个小女孩罹患绝症，觉得自己就像医院窗前深秋的树叶一样残破不堪、摇摇欲坠时，为了给小女孩希望，他决定让这棵树的落叶永远不会凋零……&lt;/p&gt;&lt;p&gt;《如龙》的支线故事故意隐去了重要的叙事信息，由于是都市环境中突发的支线任务，甚至隐去了环境和背景，只展现事件过程中的一个场面。这个场面是夸大的，并且从主人公的利益无关视角去审视。主人公并非事件中的一员，更像是一名旁观者。视角在有偏执行为的一方，并且在最初不解释这个角色维持偏执行为的原因，而是让幽默的表现力和底层深沉的情感做出反差。（但精力哥是真的变态，因为是为了指引玩家进入色情玩法所设计的NPC和任务链……）&lt;/p&gt;&lt;p&gt;通关桐生一马、春日一番和八神隆之的故事，你会发现他们通过这些路边偶遇故事结识了城市中各行各业、各个阶级的人，彼此之间没有利益往来，却成为了可以让对方倾诉和告解的热心大哥，凭借公平正义认识了街坊邻里，这也是《如龙》本身的概念所在。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;四、个人创作经验：Top-Down的“情感先行”设计&lt;/h1&gt;&lt;p&gt;得知了如龙“偏执行为+主角能力+普世情感”的结构，效仿其模式进行设计时可以遵循top-down自上而下的思维展开，先从设计师希望在任务中寄托何种情感出发，也就是先确定故事的“概念”，再决定“手段”和“体验”。&lt;/p&gt;&lt;p&gt;借用《游戏情感设计》的思路，“概念”是设计师内心经历、感受，所想要传达的内容，“手段”是通过不同方式将情绪和感受转化为表达手段，“体验”则是玩家通过交互接受传达信息的内容。&lt;/p&gt;&lt;p&gt;“概念”可以是三个环节中的任意一环，比如我正在设计审判之眼的任务，我需要一个跟踪玩法，由此可以通过主人公的跟踪能力去发现都市中埋藏的秘密。由此，第一时间想到的、最基础的故事是日本环境中“私家侦探”常常接到的婚内出轨调查。&lt;/p&gt;&lt;p&gt;进一步而言，我需要的故事情感是普世的，所以婚内出轨一定不是婚内出轨，需要围绕着婚内有矛盾的双方展开，反映某些现代都市的普遍问题。是两人由于生活环境和相处时间，缺少了交流的时间？是出轨方因为某种质朴的情感而隐藏了一个秘密？&lt;/p&gt;&lt;p&gt;以上是笔者不动脑子就随笔写的一个思路，写完之后就想到了事实上审判之眼或是审判之逝中似有这样题材的任务，男人一直去旅馆街，最终发现是找援交的亲生女儿说话……事件中，援交的事实没有发生，男人也没有出轨，埋藏的秘密揭开后是被迫离散的亲情。&lt;/p&gt;&lt;p&gt;在“偏执行为+主角能力+普世情感”的结构中，《如龙》过往有许多设计可以发现一些强烈的反差感，甚至是割裂感，某些环节会稍显突兀，但都保证了这三个环节流程体验流畅，可以认为是为了游玩体验所生搬硬套的妥协，但也塑造了一种无厘头的氛围。这种例行的“升华”成为惯例时，玩家也不会以《巫师》的标准去追究其中的人物动机和关系。&lt;/p&gt;&lt;p&gt;下面是我初次尝试实际制作剧情的一个案例，具体内容无法呈现，但是可以以早期筹备阶段的只言片语为例。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;2260&quot; height=&quot;307&quot; src=&quot;https://image.gcores.com/c889848cf3f745a261a1e9a2c2e597dc-2260-307.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在这个“头脑风暴”中，我先除开了玩法和体验部分，先根据“社会问题/memes”去确定剧情内容涉及的题材或者梗，以确保都市题材的故事能够引起玩家的共鸣。随后是根据题材设计背景故事，即人物的动机和戏剧冲突，由于只是提案，这里只是一个短句表明核心所在。“表象”则是用于设计“偏执行为”的场面。由于玩法单一，在早期筹备提案时，我考虑将这三者放到了更高的概念上，再向下去细化为大纲、流程和台本。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;五、《如龙》的任务流程和剧情案例&lt;/h1&gt;&lt;h1&gt;1.如龙7支线任务：与垃圾相伴的男人&lt;/h1&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;①引入&lt;/span&gt;&lt;/p&gt;&lt;p&gt;这是一个非常前期的任务（lv.9），用于解锁游戏中的当铺功能。任务解锁条件达成后，去职业介绍所的街道上凭空出现一大堆足以封路的垃圾，位置处于玩家频繁通过的路段，触发点碰撞盒覆盖整条道路宽度，可见性较高。&lt;/p&gt;&lt;p&gt;垃圾凭空出现的情况就符合前文我提到的“强烈的反差感，甚至是割裂感，某些环节会稍显突兀”的情况。因为这条道路几乎是整张地图下半区的必经之道，可以从小酒馆、流浪汉营地通往职介所、黑道事务所等地，是玩家进行转职、推进主线任务的高频区域，特别是正如前文提到的，任务等级为lv.9，游戏前期主线流程基本围绕着这条街进行。因为反复往来，玩家对这条街道已经相当熟悉。这么一大堆垃圾需要日积月累而不是凭空出现，明显不符合剧情逻辑。但在《如龙》系列，这样夸张的场面比比皆是，“无厘头”的风格已经固化。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1772&quot; height=&quot;1000&quot; src=&quot;https://image.gcores.com/9b9b7531c7cea5c01699a42f8dc06ca3-1772-1000.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;刷新在大地图上的巨大物体&lt;/p&gt;&lt;p&gt;（本章节图片来源  https://www.bilibili.com/video/BV1p6421M7BU）&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;剧情演出中，主人公春日一番对整洁的街道上突然出现的垃圾堆大为吃惊。而后，画外音先入的一般路过女性路人向主人公完整地解释了故事背景：这是一家当铺，现在没人来了，政府也劝导过店主，但没用。&lt;/p&gt;&lt;p&gt;引入一名路人来一五一十地讲解情况，并不是什么高明的叙事手法，但是用几句对白就快速地代替主人公铺设好了故事表象层面的认知（背景故事），并且由这名讲解情况的路人代替全体居民的身份提出了困难（委托）。这种代表是可行的，因为垃圾堆的麻烦属于常识性认知。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1766&quot; height=&quot;994&quot; src=&quot;https://image.gcores.com/377c960470518ba3cec823341200b987-1766-994.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1768&quot; height=&quot;992&quot; src=&quot;https://image.gcores.com/86e7e8eb99b5f537545d1adcbb01518c-1768-992.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;②二次触发/引入&lt;/span&gt;&lt;/p&gt;&lt;p&gt;主角通过任何行为刷新地图后，同样地点会刷出下一环新的事件。正如前文提到的，这里是高频通过的区域，所以这种触发方式同样具有可见性，让玩家随着游玩进程多次被call back。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1772&quot; height=&quot;993&quot; src=&quot;https://image.gcores.com/f823cb219c2b55605b31e5a2ad703bdc-1772-993.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;再度通过当铺时，发现两人争吵&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1767&quot; height=&quot;995&quot; src=&quot;https://image.gcores.com/5b293816e3fa0d400c855a9e16708781-1767-995.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;由于是call back，在①事件之后玩家已经退出了任务链，正如前文所提到的，此时的事件理应是重复第一幕结构，即引入环节。所以任务在此又设立了情境，等待玩家主动触发，随后看到店主和政府工作人员吵了起来。&lt;/p&gt;&lt;p&gt;争吵剧情终于让故事的主人公——当铺老板登场，展示了其强硬的态度，和对垃圾的奇怪的执念、偏执情感。&lt;/p&gt;&lt;p&gt;并且再次引入一位委托人——政府机关工作人员，一副烦恼的样子等着&lt;span style=&quot;text-decoration: line-through&quot;&gt;马上抬头看见主角并一见如故&lt;/span&gt;。这一次，可以通过与政府工作人员的详谈，得知店主的详细信息以及店主的老婆去世和垃圾堆事件的某种时间关联。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1743&quot; height=&quot;980&quot; src=&quot;https://image.gcores.com/2d6136601260661e06edbbcb5455cf4c-1743-980.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;③中段&lt;/span&gt;&lt;/p&gt;&lt;p&gt;主人公同意接下委托之后，任务并没有再次给退出点，而是立马开始剧情流程，由春日出面劝说店主。&lt;/p&gt;&lt;p&gt;由于在剧情中玩家扮演角色进行“劝说”，所以对话中设计了简单的分支选项玩法，以增强交互性和玩家的代入感。此处选项的分支设计是：前两个选项无法成功劝说店主，会重回分支选择点，只有选择第三项，会激怒店主，进入战斗。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1387&quot; height=&quot;938&quot; src=&quot;https://image.gcores.com/58993155183f5b8388b149140528c96f-1387-938.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1769&quot; height=&quot;984&quot; src=&quot;https://image.gcores.com/cdde6f4cfd0f0ae90c5b0751f226ac26-1769-984.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt;&lt;p&gt;战斗作为游戏的主玩法，在游戏早期还没引入大量小游戏时属于主人公最核心的能力之一。&lt;/p&gt;&lt;p&gt;主人公的核心能力：一是侠肝义胆、苦口婆心，二是肌肉强壮、很会打架。作为早期的战斗，难度非常低，对手也只是一个普通固执老头而已。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;④结果&lt;/span&gt;&lt;/p&gt;&lt;p&gt;拳头不能解决所有问题，但现在只能通过拳头解决问题。打了一顿以后，店主突然向主角“告解”式地袒露心声，说出自己的过往经历和情感，仿佛在教堂里向神父忏悔。这同样是有割裂感，没有逻辑、无厘头的，只是打了一顿就解决了人的心理问题。但玩游戏，这种出戏感早已被如龙玩家见怪不怪，形成了一种独特的风味……&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1746&quot; height=&quot;974&quot; src=&quot;https://image.gcores.com/649f7a9b865713c505a3abc30d30ea7b-1746-974.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1170&quot; height=&quot;841&quot; src=&quot;https://image.gcores.com/1bb5b1a7e818aac9a3e7bdc088c6ddd1-1170-841.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt;&lt;p&gt; 店主的告解还是很有逻辑的和富有情感的，承担起了任务结构第三幕高潮/结局的重任，也是整段剧情中最为浓墨重彩的部分（相较之下，引入部分由路人讲解，二次引入简单吵两句，是非常简约、高效的）。由于店主自己出去玩乐，不知道老婆死在了店里，愧疚感使得他将注意力转移到了遗物上，开始害怕丢弃抵押品，觉得可能是老婆生前鉴定过的、摸过的东西，以至于病态到不想卖掉任何当铺里的商品，刻意去刁难和驱逐客人，长期的囤积癖积累起了大量垃圾。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1293&quot; height=&quot;875&quot; src=&quot;https://image.gcores.com/3b63dedeb030db983794ded4ce547eaf-1293-875.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1072&quot; height=&quot;746&quot; src=&quot;https://image.gcores.com/11549f6aa2f5f4cc2e71886027c43a58-1072-746.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt;&lt;p&gt;结局，春日一番发自真心地对一个素不相识的人生气，去逼迫他正视内心，并且不接受店主的道歉，而是让他去向街坊邻里道歉。这一系列愣头青又热血的桥段，体现了春日自来熟的性格、强烈的正义感，和乐于助人、不求回报、追求公平的特有品质。&lt;/p&gt;&lt;p&gt;作为一个早期的任务，任务设计目标是在玩家游戏进程中逐步解锁各种功能和设施（当铺贩卖道具），因此任务设计上采取了可见度极高的方案，在游戏早期玩家缺乏快速移动手段时，设置了多次路过触发的故事线，某种程度上减弱了“罐头感”，尤其是当堆满垃圾的场景本身存在着意义，而非简单的大地图感叹号+人物头顶感叹号强引导。&lt;/p&gt;&lt;p&gt;在这个任务中，前文中总结的模式是有效的。在任务引入环节的“偏执行为”创造了一个足够具有吸引力的场面，使得玩家进入任务的流程更加自然：在第一次遇到垃圾堆时，“是什么人为什么要堆积那么多垃圾在自家店门口”的问题足够奇葩（变态），让人猜不到人物动机。&lt;/p&gt;&lt;p&gt;任务结构总体较为简单（一个标准的三幕式结构循环），流程也不涉及很多玩法，只是触发方式有所设计，一方面是因为该任务的目标是解锁功能性NPC，应当保证大多数玩家可以一次完成，不会错过；另一方面任务出现于游戏早期，玩家等级限制了开放区域的大小，玩家动线比较简单。但任务仍然给功能性NPC当铺老板建立了有记忆点的故事线，可以中和主线剧情倾尽资源制作的精彩而跌宕起伏的体验，让玩家的体验回归到设计师想要塑造的横滨日常中。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;————————————&lt;/p&gt;&lt;h1&gt;2.《审判之逝》支线：前进吧！诚棱高中灵异研究社&lt;/h1&gt;&lt;p&gt;该任务比较长，录屏都有28分钟，在此不会一五一十地把全流程展示出来，而是进行一定的归纳精炼，流程可以根据网友自制录屏查看。&lt;/p&gt;&lt;p&gt;该任务链的剧情主题围绕都市怪谈展开，并依据怪谈设计探索玩法体验。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;① 设计目的&lt;/span&gt;&lt;/p&gt;&lt;p&gt;该任务是“青春群像剧”系列任务的支线。“青春群像剧”的是游戏中的大型系列支线任务，由于主线剧情涉及校园暴力和青少年犯罪问题，主人公潜入高中进行调查，于是本作的舞台主要围绕校园及相关关系者展开，设计师便将《如龙》系列传统的“小游戏”融入了校园生活，以加强代入感，并且小游戏和支线任务会形成以主线故事探讨的主题为中心的拓扑结构，使得游戏整体的叙事主题非常集中。这种任务结构方式是合理的，避免了叙事信息分散减弱沉浸感，以及填充“通马桶”支线反馈不良的情况。&lt;/p&gt;&lt;p&gt;作为“青春群像剧”支线，故事背景会设置为各个学生爱好社团，这则任务便发生在“灵异研究社”，故延续了如龙系列都市怪谈灵异事件的主题。正如前文提到的如龙任务结构模式，灵异事件的结局最终要落到普世情感上，自古以来口口相传的“怪异”本身又是现实社会问题的写照，所以这则任务剧情设计非常适合如龙本身的结构和风格。&lt;/p&gt;&lt;p&gt;就像热门动画《胆大党》的主题一样，日式怪谈最为典型的传说就是“鬼”（妖怪）和“外星人”。UFO和尼斯湖水怪等世界知名的怪谈，最初都是以伪造照片，或者模糊不清的照片轮廓为开始，例如维基百科对水怪的记载：&lt;/p&gt;&lt;p&gt;————&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-style: italic&quot;&gt;“1934年4月，伦敦医生威尔逊途经尼斯湖，发现水怪，连忙用相机拍下了水怪的照片。可是有很多人不同意照片的真实性：好像水怪那样大的动物，波浪不会那么小。并且威尔逊已承认照片是假的，那是他叫他儿子拿一只玩具的水怪绑在玩具潜水艇上，再以远距离拍摄而成的，而他要造假只是为了要出名而已。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-style: italic&quot;&gt;1934年的这张照片多年来一直被认为是尼斯湖水怪存在的最有力证据，但是，这是一张伪造的照片。参与伪造的克里斯蒂安·斯堡林（Christian Spuring）在临终前一年的11月，为他的伪造行为而忏悔，道出了真情。原来这张照片中的怪物形象，是用玩具潜艇加上按照海蛇的模样用软木作成头和长脖子装配起来，再放到湖中去拍照产生的效果，策划者是《每日邮报》派来寻访水怪的记者马尔马杜克·韦特雷尔（Marmaduke Wetherell）也就是他的继父，共有五人参与此事，其他四人此时都已去世，他把伪造的经过告诉了两位参与尼斯湖计划的科学研究人员。1994年3月14日加拿大出版的环球邮报，头版刊登了一条路透社从伦敦发来的消息。”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;————&lt;/p&gt;&lt;p&gt;故任务选择了“UFO”作为主题，以UFO引发的事件设置悬念，通过照相等手段进行科学的攻略，最后落到人物情感的描写上，预期目标体验是&lt;span style=&quot;font-weight: bold&quot;&gt;悬疑→感动&lt;/span&gt;，玩法则是能够&lt;span style=&quot;font-weight: bold&quot;&gt;模拟都市探险&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;② 剧情部分&lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;1.引入&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;任务作为系列任务支线，本身在系统内有强引导。利用强引导，引入部分通过路人对话、传闻等内容即可完成。在初次玩法破关过后，故事引入了灵异研究社的两名主要角色，但并未直接点明两人关系，为后文主人公在故事中发挥的作用埋下了伏笔。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1253&quot; height=&quot;674&quot; src=&quot;https://image.gcores.com/651d0c938dabfd0c81cf023ee2ddf89e-1253-674.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;引入部分通过青春群像剧的主要角色天泽与灵异社团争吵，来铺垫了对灵异和悬疑（想象与现实）的观念，也是故事的主要人物矛盾。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1750&quot; height=&quot;977&quot; src=&quot;https://image.gcores.com/ec90c237983aa0c9c2334377bf10ecb4-1750-977.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;随后灵异社团的社长男生看见社群上有UFO的传闻，急忙离开了现场，副社长女生兴奋地追赶在他的背后。隐约交代了两人的关系亲密，不过男生对于灵异的狂热异乎寻常、行动力也很强，女生非常迎合他的爱好。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;2.故事主体&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;故事主体部分，主要围绕前文铺垫的主人公的作用展开。&lt;/p&gt;&lt;p&gt;主人公跟随两人来到街头，在发生的对白中设置了隐秘故事的悬念。当主人公提到“UFO绑架人类”的传闻时，对话特写给到了社长和副社长的异常表情，明示两人对绑架事件有着过激反应，并隐藏了秘密。&lt;/p&gt;&lt;p&gt;随后的游戏进程中，社长和副社长两人分别借机与主人公进行了密谈，前者认为两年前父亲消失是被UFO抓走了，需要主角帮忙拍摄照片引起警方重视；后者则揭露了两年前社长的父亲被侦探调查发现有出轨事实的秘密，想让学长从UFO的偏执型爱好者中醒悟过来。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1746&quot; height=&quot;982&quot; src=&quot;https://image.gcores.com/7dc10e1b87f74da4c1ead33e78f73517-1746-982.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;无论如何，主人公八神为了调查灵异社的活动，还是为两人展开行动，唯一的突破口就是拍摄近在咫尺的UFO照片，为此需要打听消息和搜集线索。百般周折，从路过的学生中得知流言，有人目击UFO在学校里起飞，所以流传在高中有UFO基地的故事，主人公听闻后露出意味深长的表情。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1742&quot; height=&quot;982&quot; src=&quot;https://image.gcores.com/de6991eb66a807d04737ded73aac054b-1742-982.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;社长和副社长出现，原来是社长喊上副社长来看UFO。随后两人发生争执，依然是围绕着是否相信UFO的存在。表面上讨论UFO是否存在的问题，实际上也是对社长父亲失踪案件的意见分歧。两人几乎大吵一架，被主人公及时制止，话题被转移到去拍摄UFO。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;3.高潮/结局&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;UFO不仅被拍摄到，还被八神追赶了几条街抓住了。原来UFO只是无人机改装的样子货，甚至Made in China……这个梗抛得很妙，几乎世界主流国家都能理解这个标签的含义。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;3382&quot; height=&quot;1866&quot; src=&quot;https://image.gcores.com/2ecf78cf4f93fbdad07700629a0114e3-3382-1866.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;借此机会，理解了事情原委的八神作为一名成熟的大人，疏导陷入奇怪执念的年轻人，劝导他接受父亲因为出轨丑闻而逃离了婚姻、离开了自己的事实。&lt;/p&gt;&lt;p&gt;之前皆有推理社的天泽对“灵异和推理”（想象与现实）侃侃而谈埋下的伏笔，也在此回收：灵异社社长靠现象麻痹着自己不愿意接受事实，但接受事实有时也是一件很残酷的事情，所以人们在历史长河中编造了那么多的故事、寓言和传说。&lt;/p&gt;&lt;p&gt;不过作为高中舞台发生的故事，故事的最终主题还是要落到让学生接受事实，成为一名能够承担现实的苦难而前进的成熟大人。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;3373&quot; height=&quot;1873&quot; src=&quot;https://image.gcores.com/c18b0ec1ae3f24b57377bef3872c3519-3373-1873.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;3355&quot; height=&quot;1868&quot; src=&quot;https://image.gcores.com/00b06bbd766ca95a9bc490ea55319233-3355-1868.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt;&lt;p&gt;而另一边，副社长的委托被八神达成，躲在一旁偷看的副社长，也暴露了喜欢社长的秘密（也不是很秘密，只是偏执到有点变态的男生视而不见），解释了这个中国制造的UFO自始至终其实是她控制的，之前可能是为了给喜欢的男生一点希望，让灵异社的活动能够进行起来，想要陪伴男生一起玩耍……现在则是让八神开导了男生走出心理阴影，默默地为爱情付出。非常青春的故事线！&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;2497&quot; height=&quot;1387&quot; src=&quot;https://image.gcores.com/e9a2537f393246a7d2c59736d98a7f38-2497-1387.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt;&lt;p&gt;抛出灵异话题，用科学解决问题。剧情结束之后，设计师留下了一个小恶作剧。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1773&quot; height=&quot;991&quot; src=&quot;https://image.gcores.com/b77067b74b0973ef7469f2391e44f6f5-1773-991.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;③ 玩法部分&lt;/span&gt;&lt;/p&gt;&lt;p&gt;由于围绕UFO的调查展开剧情，涉及游玩的“角色能力”并不再是惩恶扬善的战斗能力，而是围绕主人公八神“侦探”身份的人物设定和一系列探索玩法。可以猜测玩法功能的设计应该先于任务，因为主线流程中也有大量的“跟踪”、“追逐”（如龙系列老玩法）、“拍照”、“操控无人机偷拍、侦查”的玩法存在。合理推测这个任务的设计也是诞生于“怪谈任务”的传统和拍照玩法。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;I 探索玩法：社交媒体线索收集&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;通过社交媒体定位线索是《审判之逝》设计的新系统。这个概念在《全网公敌》，乃至现代都市的超级英雄游戏中都有出现过，笔者制作的一款交互叙事解谜游戏也用到了这个创意。其本质是这个时代移动互联网发达的背景下，互联网上的踪迹可以快速地定位到现实中的事件；延伸下去，一个人的社交媒体发言、网页浏览记录、网购记录等互联网足迹也能形成一个人最隐秘的人生轨迹。&lt;/p&gt;&lt;p&gt;《审判之逝》的系统设计是接到侦探委托、遇到突发事件或者寻找东西的难题时，可以通过在社交媒体上检索关键词，去看流言的内容有何共通之处，以及定位流言发布的地址，找到目标地点。&lt;/p&gt;&lt;p&gt;该任务环节就非常自然地引入了这一系统，传闻发生在学校内，而探索用到了地形更为复杂、区域更加开阔的小酒馆街区域，利用这一系统非常有代入感地完成了这一任务地点的变更，并且可以随时退出任务链。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1770&quot; height=&quot;971&quot; src=&quot;https://image.gcores.com/bf53f5efd8692760a7d96d3695b70e57-1770-971.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;II  探索玩法：躲猫猫&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;类似逆转裁判探索环节的3D版本，在指定区域内和设计师藏的东西躲猫猫，是游戏为主人公的“侦探”身份设计的功能。同属探索环节，针对UFO传闻插入玩法非常合适。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1765&quot; height=&quot;990&quot; src=&quot;https://image.gcores.com/b1e2e19c8451e75a75f205ef371bdf13-1765-990.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;III 探索玩法：拍照&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;玩法设计来源于“侦探”职业。日本许多私家侦探的职能都是侦查和偷拍，因为拍下照片才能作为婚内出轨、地下交易等问题的证据，让委托人达成自己的需求。&lt;/p&gt;&lt;p&gt;所以比起“拍到”或者“拍得美”——如《夺宝奇兵：古老之圈》是用微缩相机拍下文物、拍到即可，《漫威蜘蛛侠》《鸣潮》《崩坏：星穹铁道》等任务要求拍到某种构图——《审判之逝》在拍照的设计上更加贴近现实和更加硬核。作为“狗仔”，偷拍的角度和位置通常比较隐蔽，就需要长焦拍摄，并且为了使照片有价值，必须清晰地对焦到面部，然后拍到py交易的正在进行时、双方的面部等等……&lt;/p&gt;&lt;p&gt;因此设计师设计了变焦、对焦，还在某种程度上模拟了长焦镜头视野小找东西困难的镜头移动速度（夺宝奇兵等更写实的会直接把镜头推上去而不是让镜头只能缓慢移动）。对摄影有所经验的玩家还可以陷阱对焦、预估距离之类的，但是游戏本身也没有把难度设置的太高，并且有技能辅助。&lt;/p&gt;&lt;p&gt;在这一任务中，拍摄到UFO的需求也是同样的逻辑，因为委托人灵异社社长需要清晰的UFO照片来请警察出山，就像贵妇需要清晰的丈夫和情人亲嘴拉手进酒店的照片来要挟离婚一样。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;2502&quot; height=&quot;1382&quot; src=&quot;https://image.gcores.com/7460c68bfc31732dff05429878ff59c0-2502-1382.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;IV QTE玩法：追逐战&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;如图。追逐战的设计主要是对反应速度、集中力的要求更高，可以形成一个紧张的游玩心流，是类似于“战斗”的玩法设计。因此，该任务将追逐战玩法是作为情绪高涨的类战斗环节放置在高潮和结局片段。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;959&quot; height=&quot;532&quot; src=&quot;https://image.gcores.com/3219c7cc8eb83c3bfb2bdf285fbcebf9-959-532.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;④ 流程链条&lt;/span&gt;&lt;/p&gt;&lt;p&gt;任务的设计以剧情呈现为主，但是在每段切割剧情之间都加入了“智能手机搜索”、“3D躲猫猫”、“拍照”的玩法，使得整体流程形成游玩和剧情的循环。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;988&quot; height=&quot;1148&quot; src=&quot;https://image.gcores.com/6110ea876bd165b9b931af3aa59ca297-988-1148.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;自制任务流程图&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;954&quot; height=&quot;283&quot; src=&quot;https://image.gcores.com/5e4a04d021c9e116dd2067c28eac9ace-954-283.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;自制三幕式结构内容统计&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在任务中，由于开头有来自系统的强引导去触发任务，所以没有设置模板中的&lt;span style=&quot;font-weight: bold&quot;&gt;“偏执行为”&lt;/span&gt;环节。但可以发现，当第一幕任务结构来到尾声时，剧情演出展现了“灵异研究社”和“悬疑推理社”的争吵，以及灵异社社长热情的奔跑……“偏执行为”并没有缺失，只是不再具有在地图上引导玩家察看和进入任务的功能，所以被稍许地后置了。&lt;/p&gt;&lt;p&gt;取而代之的是，当任务需要从校园转场到小酒馆街、从小酒馆街转场到大街……这些时刻的引导功能“社交媒体线索收集”的探索玩法所承担，所以通过地图上的物体和场面来吸引玩家进入任务便不再必要。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;剧情中段则开始使用&lt;span style=&quot;font-weight: bold&quot;&gt;主人公的侦探能力&lt;/span&gt;——“拍照”、“信息搜索”和“推理”能力去解决问题。主人公大量收集信息，及时发现了这一事件的本质所在是社长的心理问题。所以在该任务的核心环节，玩家实际上是扮演了“侦探”和“学校社团顾问”的身份进行了一场探案之旅，而完全没有出现这个游戏的ARPG主玩法。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;高潮部分先通过一场类战斗的追逐战来提升情绪的紧张程度，随后便开始真情告解，作为一名大人让身为学生的任务NPC解开心结，获得成长。&lt;/p&gt;&lt;p&gt;这一结局显然是涉及了&lt;span style=&quot;font-weight: bold&quot;&gt;两种普世的情感&lt;/span&gt;：&lt;/p&gt;&lt;p&gt;①其中角色的心结来自于普遍的社会性问题——出轨、离婚对孩子的伤害，父亲形象在孩子心中的样子……指向家庭问题；&lt;/p&gt;&lt;p&gt;②青春期纯洁的、互相帮助上进的恋爱（暗恋）情感。&lt;/p&gt;&lt;p&gt;&lt;/p&gt; </description><link>https://www.gcores.com/articles/192666</link><guid isPermaLink="false">gcores-192666</guid><pubDate>Tue, 24 Dec 2024 08:30:00 GMT</pubDate><author>普通人toru</author><enclosure url="https://image.gcores.com/c623840d94756198db850b6d7933f390-831-469.png" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/c623840d94756198db850b6d7933f390-831-469.png"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/44749808-ffa7-4f73-a66c-9a4c2b7ad9b9.mp3" length="2577" type="audio/mp3"></enclosure><itunes:duration>0:42:57</itunes:duration><category>有感而发</category></item><item><title>Godot 入门到弃坑——光枪射击</title><description>&lt;figure&gt;&lt;img alt=&quot;Godot 入门到弃坑——光枪射击&quot; src=&quot;https://image.gcores.com/c03b8d7184378e9bc6e18d83270aa535-1139-638.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/320836a1-8835-452f-a673-58ac258a9b66.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/320836a1-8835-452f-a673-58ac258a9b66.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/320836a1-8835-452f-a673-58ac258a9b66.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;可能有光，但没有枪&lt;/blockquote&gt;   &lt;p&gt;部分读者可能不知道这里的光枪是什么。下面这个游戏就是一个光枪游戏： &lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;400&quot; height=&quot;249&quot; src=&quot;https://image.gcores.com/c903e99e916489289f766ae16a134c15-400-249.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;FPS的shooter就是指射击要素。现在我们有了一个角色，但是他除了在场景中到处晃之外什么也没法做。&lt;/p&gt;&lt;h2&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;准星&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;实际上很多偏真实的FPS的准星都是动态的，但是不管怎么花哨，基本的道理都是要在画面中间显示一个东西，这样我们才能知道我们要打哪里。&lt;/p&gt;&lt;p&gt;我们先做一个简单的静态准星，一方面可以让手上的游戏更像样一点，一方面也能够更方便地知道我们把摄像机对准到哪儿了。&lt;/p&gt;&lt;p&gt;像往常一样，作为UI元素，我们需要在场景中放一个&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;CanvasLayer&lt;/span&gt;来容纳它，按照惯例，可以叫它HUD。我们可以把它放在玩家角色的场景中，后续我们可能要给他添加更多的和玩家相关的UI元素。&lt;/p&gt;&lt;p&gt;然后加入一个&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;CenterContainer&lt;/span&gt;。顾名思义，这个容器会让其子节点保持在正中。接下来就是简单地放一个准星纹理到里面就算有模有样了。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;提醒一下&lt;/span&gt;：由于这里是在一个3D场景中放入了一个&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;CanvasLayer&lt;/span&gt;然后编辑一些非3D的节点，所以如果想在编辑器中看到它或者直接在视口中编辑，需要点击工具栏中间的2D和3D来切换。&lt;/p&gt;&lt;p&gt;现在启动游戏就能看到一个在画面中间的准星了。&lt;/p&gt;&lt;h2&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;我到底瞄准没有&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;我怎么知道我对着哪里？我怎么知道我朝这个方向开枪能不能打到敌人？&lt;/p&gt;&lt;p&gt;实际的情况可能会更复杂，但是这个问题最简单的抽象就是，从一个点（比如屏幕中心）发出一条射线，能否和空间中的某个几何体相交。&lt;/p&gt;&lt;p&gt;没错，这就是一个数学问题。但是游戏引擎的功能就是为了不让我们从头来解决这些问题。&lt;/p&gt;&lt;p&gt;主流的游戏引擎中都有相应的API来处理这个问题。比如Unity叫它&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Raycast&lt;/span&gt;（射线投射），Unreal叫它&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;LineTrace&lt;/span&gt;（“直线”追踪，幸好它没叫&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;RayTrace&lt;/span&gt;）。当然不管怎么取名字，做的事情都是差不多的，只是总得取个名字。&lt;/p&gt;&lt;p&gt;毫无疑问Godot也有相应的API，Godot在文档中选择叫它&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Raycast&lt;/span&gt;。&lt;/p&gt;&lt;h2&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;手动挡&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Godot提供了一个相对较复杂的API来和物理系统交互来查询射线和具体可碰撞对象的相交情况。&lt;/p&gt;&lt;p&gt;因为要和物理系统交互，这里自然而然地要在&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;_physics_process&lt;/span&gt;中写一些代码。我们定义一个fire方法，在&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;_physics_process&lt;/span&gt;中适时调用。在先简述一下实现流程。&lt;/p&gt;&lt;p&gt;首先需要通过3D节点的&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;get_world_3d&lt;/span&gt;方法获得当前的&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;World3D&lt;/span&gt;的引用，这个&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;World3D&lt;/span&gt;总之就是一个包罗万象的抽象资源，我们需要从它的&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;direct_space_state&lt;/span&gt;属性中拿到当前物理系统状态。&lt;/p&gt;&lt;p&gt;实际进行射线投射的方法是&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;space_state.intersect_ray&lt;/span&gt;，它的唯一参数是一个代表射线查询参数的&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;PhysicsRayQueryParameters3D&lt;/span&gt;对象。这个函数的作用顾名思义，intersect就是“相交”，ray就是“射线”。&lt;/p&gt;&lt;p&gt;要调用这个方法，我们自然要填写一个&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;PhysicsRayQueryParameters3D&lt;/span&gt;。对于一些参数比较复杂的函数，你会经常看到这种把一堆参数打包成一个单独的类的做法。一方面是方便配置，另一方面也是因为用一堆参数去调用一个函数的时候很难看，也不好排版。这个参数类最重要的自然是射线的起点和终点。起点，应该是屏幕中心，我们先试着从屏幕中心位置……&lt;/p&gt;&lt;p&gt;真的是屏幕中心吗？我们的屏幕并不是一个存在于游戏的3D世界中的一个物件，何来的“从屏幕中心引一条射线通过3D场景中的指定位置”呢？&lt;/p&gt;&lt;p&gt;一般来说我们的屏幕是2D的，就相当于把一系列像素排列好就得到了我们看到的画面。实际上，3D渲染引擎中的摄像机可以说是由一些参数定义的一个矩阵（或者说一系列矩阵），矩阵是一个明确的数学概念，它可以用来操作向量。3D场景中的东西，需要满足一定要求才会被渲染，它们首先会被变换（这实际上也是一个数学概念）到摄像机面前的一个平面上（就像是“被看到”），最后再变换到我们的屏幕上。&lt;/p&gt;&lt;p&gt;因此“屏幕中心”指的是透过摄像机“所看到”的这个画面的中心。它并不一定总是和我们所在的真实世界的屏幕中心在同一个位置上。这背后更多的数学知识，（可能）会在后面讲到。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Camera3D&lt;/span&gt;节点提供了一些方法来方便构造这种射线。比如这个名字就很直白的方法&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;project_ray_origin&lt;/span&gt;，其参数是屏幕上的一个位置。这个方法会把屏幕上的一个位置转换（专业点说是变换）到3D空间中去。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;project_ray_origin&lt;/span&gt;的唯一参数就是一个二维向量。它代表&lt;span style=&quot;font-weight: bold&quot;&gt;视口坐标&lt;/span&gt;，因为显然我们游戏的画面并不总是等于整个屏幕，甚至于观察某个场景的视口也不完全等于整个窗口。所以刚才说的屏幕准确地说应该是视口。要获得视口信息，使用&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;get_viewport&lt;/span&gt;即可拿到容纳当前节点最近的&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Viewport&lt;/span&gt;。然后通过其&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;size&lt;/span&gt;属性即可拿到尺寸进而求出中心坐标。这样我们就求得了射线起点。&lt;/p&gt;&lt;pre&gt;func fire():&lt;br&gt;    var viewport_center = get_viewport().size / 2.0&lt;br&gt;    var origin = camera.project_ray_origin(viewport_center)&lt;br&gt;    # TODO&lt;/pre&gt;&lt;p&gt;理论上应该这样写没错。但是实际上在我们的情况下&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;origin&lt;/span&gt;就始终等于摄像机的&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;global_position&lt;/span&gt;。你可以试着给&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;project_ray_origin&lt;/span&gt;传入任意值，只要摄像机不动，这个结果就应该是不变的。&lt;/p&gt;&lt;p&gt;前面讲到Godot（以及很多游戏引擎）的3D摄像机都有透视和正交两种模式，它们会按不同的规则将3D空间中要渲染的物体的各个顶点投影到这个虚拟摄像机面前的一个平面（近裁剪平面，图中的near）上。对于透视摄像机，这些射线的起点实际上都在同一个位置，想象一下从眼睛处发出无数条穿过并覆盖整个近裁剪平面的射线。3D空间中原本的点，和它经过透视投影投到近裁剪平面上的点连起来之后都会汇聚到同一个点上，但是方向各不相同。&lt;/p&gt;&lt;p&gt;而对于正交模式的摄像机，3D空间中的点和投影之后得到的点的连线都是平行的——但是方向相同。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;500&quot; height=&quot;300&quot; src=&quot;https://image.gcores.com/1c14a0765574563eb7633099570b6a32-500-300.webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;因此在我们的情况中，这个origin换成&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;camera.position&lt;/span&gt;也是一样的。&lt;/p&gt;&lt;p&gt;拿到这个点之后，我们就把它作为起点，然后确定一个终点。至少在FPS的情况下，这条射线应该朝着视线方向射出去。如何确定这个方向呢？正如刚才所说，透视情况下射线的起点不变，但是需要用终点确定方向。我们这里希望能够从屏幕中心射出去，那么自然就考虑想要“摄像机的前方”。如何获得这个前方呢？&lt;/p&gt;&lt;p&gt;先说结论，如果要真正地获得这个前方，可以这样写：&lt;/p&gt;&lt;pre&gt;parameters.to = origin + (-camera.global_basis.z) * 1000&lt;/pre&gt;   &lt;figure&gt;&lt;img width=&quot;1800&quot; height=&quot;1013&quot; src=&quot;https://image.gcores.com/5d28e54341c1a32339ff92cc42a32b87-1800-1013.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;好吧，这里确实跳过了太多说明。主要还是背后涉及不少数学知识，这里不得不再次搬出那句话，后面可能会补充讲解。但是还是要简单说明一下。&lt;/p&gt;&lt;p&gt;当然最主要的就是这里的&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;global_basis&lt;/span&gt;。&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;global_basis&lt;/span&gt;等价于&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;global_transform.basis&lt;/span&gt;。前面提到过transform属性保存了节点位置、旋转、缩放等属性的数据。但是呢，transform的主要数据其实就是一个origin和一个basis。&lt;/p&gt;&lt;p&gt;实际上每个（&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Node2D&lt;/span&gt;和&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Node3D&lt;/span&gt;）节点的transform都分&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;transform&lt;/span&gt;和&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;global_transform&lt;/span&gt;。前者实际上是局部（local）transform。为什么要分这个东西呢？&lt;/p&gt;&lt;p&gt;因为一个物体的位置、朝向信息在不同坐标系中有不同的值。&lt;/p&gt;&lt;p&gt;全局（或者说世界）坐标系就相当于一个最上层的根节点，在它之外就没有其它东西了，它自己也不会动。这样场景中每个东西都可以用这个坐标系的坐标来描述。可以说一定程度上，全局坐标可以理解为一种“绝对坐标”。它的原点就是(0, 0, 0)，坐标轴和Godot的坐标系定义始终相一致。&lt;/p&gt;&lt;p&gt;假设我们的玩家角色在原点，然后使用&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;rotate_y&lt;/span&gt;逆时针（从上往下看）转了90度。然后再让摄像机顺时针旋转90度。此时摄像机还是朝向前方（-z方向）。那么这个过程中什么变了什么没变呢？&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;rotate_*&lt;/span&gt;方法是对局部transform的basis进行修改（实际上Transform和Basis基本上是不可变类型，很多操作都会直接得到一个新的实例）。上述操作都是修改局部的朝向，和在检视面板中直接改数字是一样的。&lt;/p&gt;&lt;p&gt;局部transform在一定程度上可以解释为“相对transform”。试着在&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;_ready&lt;/span&gt;中观察输出：&lt;/p&gt;&lt;pre&gt;print(camera.global_rotation)&lt;br&gt;print(camera.rotation)&lt;br&gt;rotate_y(deg_to_rad(90))&lt;br&gt;print(camera.global_rotation)&lt;br&gt;print(camera.rotation)&lt;br&gt;camera.rotate_y(deg_to_rad(-90))&lt;br&gt;print(camera.global_rotation)&lt;br&gt;print(camera.rotation)&lt;/pre&gt;&lt;p&gt;摄像机作为玩家角色的子节点，玩家场景整个旋转时，其子节点也跟着旋转，进而摄像机和他的父节点的相对transform是不变的。&lt;/p&gt;&lt;p&gt;摄像机作为玩家角色的子节点，玩家场景整个旋转时，其子节点也跟着旋转，进而摄像机和他的父节点的相对transform是不变的。&lt;/p&gt;&lt;p&gt;但是作为观察者，我们跳出玩家角色的场景，从外部观察，此时摄像机的朝向已经发生变化，这个变化就体现在&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;global_rotation&lt;/span&gt;上。&lt;/p&gt;&lt;p&gt;随后，我们又单独把摄像机转回去，此时它和整个玩家场景的根节点相对来说就不在同一个方向上，因此其&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;rotation&lt;/span&gt;必然是不为0的（当然这取决于初始状态，我们这里的玩家场景的根节点和摄像机节点初始状态transform的各个数值都是默认值0）。&lt;/p&gt;&lt;p&gt;那么Basis到底是什么呢？Basis基本上对应着数学中的基（也称“基底”）概念。说严谨点它可以确定一个向量空间。说具体点但可能不那么严谨的话，就是它可以确定一个具体的坐标系。“坐标”实际上就是对组成基的向量进行线性组合（啥是线性组合？就是倍乘和相加）得到的一个向量。我们很多时候都是谈的一种特殊情况，那就是原点在(0, 0, 0)，基为{i=(1, 0, 0), j=(0,1, 0), k=(0, 0, 1)}的坐标系。例如坐标为(3, 4, 5)的点意思就是它的坐标是3i+4j+5k。但实际上“坐标系”有无数个，甚至它的坐标轴也可以不相互正交（垂直）。&lt;/p&gt;&lt;p&gt;basis就是三个向量，分别表示这一个“坐标系”的x，y，z坐标轴到底是哪个方向。当然这里肯定是世界的、绝对的坐标来表示，毕竟我们总要有一个基准来表示其它非基准的东西。&lt;/p&gt;&lt;p&gt;总之，&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;-camera.global_basis.z&lt;/span&gt;总是表示摄像机（在全局坐标系的）前方。这里的负号自然还是因为这是Godot规定的摄像机的“前方”。&lt;/p&gt;&lt;p&gt;这个前方总是表示摄像机真正的前方，因为它是“绝对”的，不管玩家节点本身朝哪一方。你可以试一下把&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;global_basis&lt;/span&gt;换成&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;basis&lt;/span&gt;是什么效果。&lt;/p&gt;&lt;p&gt;当然，这里其实也不用这么复杂：&lt;/p&gt;&lt;pre&gt;parameters.to = origin + camera.project_ray_normal(viewport_center) * 1000&lt;/pre&gt;&lt;p&gt;&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Camera3D&lt;/span&gt;还提供了一个和&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;project_ray_origin&lt;/span&gt;成对的方法&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;project_ray_normal&lt;/span&gt;。normal在这里不是“正常”的意思，它表示数学概念“法线”（法向量）。这里指的就是从透过这个摄像机观察的视口上的某一点投射出来的射线的方向。实际上法线在很多时候指的是在曲面上某一点上和曲面垂直的直线，而通过法向量就可以确定“内外”或者这一点上曲面的“朝向”。&lt;/p&gt;&lt;p&gt;但是，为什么还要把origin加在前面呢？这一堆查询参数的&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;to&lt;/span&gt;属性定义为射线检测的终点。把这个问题一般化，就是给定一个点，一个方向，那么从这个点沿某个方向引一条线，最后得到的点的坐标为多少？&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;825&quot; height=&quot;744&quot; src=&quot;https://image.gcores.com/f534f58f2c062a7c6d354cc8baf4ba5b-825-744.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;例如起点为A点，射线方向为u(1, 0)。那么你就要求出B。把A点的坐标视为向量，那么向量a（对应B的坐标）就应该是A+u。这个可以按照中学讲过的所谓平行四边形法则来想，也可以简单地想成，把u的起点挪到我们的起点A处就得到了终点B。还是再次提醒一句，在用向量、坐标讨论这种几何问题时，我们很多时候不区分点和向量。但是，在具体的问题中，我们又可能要加以区分以便于理解。&lt;/p&gt;&lt;p&gt;但是，依然由于我们这里是从一个特殊的起点开始进行射线检测，因此不加上origin也是一样的。因为我们的origin本身就在这个方向上。&lt;/p&gt;&lt;p&gt;你的最后一个问题是为什么还给射线方向乘了个1000？首先，这个1000是我随便写的，它不一定要是1000。&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;project_ray_normal&lt;/span&gt;返回的是一个长度为1的规范化之后的向量，所以它相当于只代表方向，不关心长度。但是这里所谓的射线检测的终点是由射线检测的范围（射线的“长度”）确定的，所以我们要乘上一个长度。这里你可以自己export一个变量，但应当是一个较大的数字。想象一下武器的射程。&lt;/p&gt;&lt;p&gt;最后，处理这个问题比较通用的写法是这样的：&lt;/p&gt;&lt;pre&gt;var viewport_center = get_viewport().size / 2.0&lt;br&gt;var origin = camera.project_ray_origin(viewport_center)&lt;br&gt;var parameters = PhysicsRayQueryParameters3D.new()&lt;br&gt;parameters.from = origin&lt;br&gt;parameters.to = origin + camera.project_ray_normal(viewport_center) * 1000&lt;br&gt;var result = get_world_3d().direct_space_state.intersect_ray(parameters)&lt;/pre&gt;&lt;p&gt;一些游戏可能需要“从屏幕上点到场景中”，比如点击选中，或者各种类型游戏中的点击移动到指针位置，都没那么特殊，所以需要更通用的写法。但是我们这里足够特殊，所以可以简化成：&lt;/p&gt;&lt;pre&gt;var parameters = PhysicsRayQueryParameters3D.new()&lt;br&gt;parameters.from = camera.global_position&lt;br&gt;parameters.to = camera.project_ray_normal(get_viewport().size / 2.0) * 1000&lt;br&gt;var result = get_world_3d().direct_space_state.intersect_ray(parameters)&lt;/pre&gt;&lt;p&gt;说了这么多终于说到获得结果了。比较奇葩的是&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;intersect_ray&lt;/span&gt;返回的是一个字典，具体包含哪些内容在文档中有说。当然我们目前主要关心两个东西，一个是&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;collider&lt;/span&gt;，即谁和这条射线发生了碰撞；另一个是&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;position&lt;/span&gt;，即在哪里发生了碰撞。&lt;/p&gt;&lt;p&gt;最后再提醒一句，射线检测需要被检测物能够进行碰撞检测才行。一般的对象需要你自己配置&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;CollisionShape&lt;/span&gt;等节点，CSG的话就简单启用一下碰撞就可以了。&lt;/p&gt;&lt;p&gt;另外，intersect_ray在根据给定参数进行检测时如果没有碰到任何东西，那么就会返回一个&lt;span style=&quot;font-weight: bold&quot;&gt;空字典&lt;/span&gt;。Godot中没有任何键值对的字典和null一样，放在if的条件处会被当成false处理。由此可以检查是否打中了某种东西来进行进一步的处理。&lt;/p&gt;&lt;h2&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;自动挡&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;其实上面手动挡的代码也不复杂，只是要解释原理的话要说很多。&lt;/p&gt;&lt;p&gt;Godot实际上还提供了一个更简单的节点专门用来进行射线检测。这个节点就叫&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;RayCast3D&lt;/span&gt;（2D场景中为&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;RayCast2D&lt;/span&gt;）。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;RayCast3D&lt;/span&gt;节点最主要的属性就是&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;target_position&lt;/span&gt;，也就相当于我们刚才求的&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;to&lt;/span&gt;参数。它的射线由&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;RayCast3d&lt;/span&gt;RayCast3d&lt;span style=&quot;font-weight: bold&quot;&gt;RayCast3d的位置&lt;/span&gt;和&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;target_position&lt;/span&gt;确定。&lt;/p&gt;&lt;p&gt;设置了这个属性之后基本上就可以工作了。我们可以通过它的&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;get_collider&lt;/span&gt;和&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;get_collision_point&lt;/span&gt;来获得相交的对象和点。&lt;/p&gt;&lt;p&gt;那么和手动挡区别在哪儿呢？区别就在于&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;RayCast3D&lt;/span&gt;会在&lt;span style=&quot;font-weight: bold&quot;&gt;每个物理帧&lt;/span&gt;（&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;_physics_process&lt;/span&gt;）里进行检查，而手动挡的处理时机由我们控制。当然毫无疑问，我们在手动挡里能够实现更细粒度的控制。但是&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;RayCast3D&lt;/span&gt;对于本身就需要持续检测的情况会更方便。&lt;/p&gt;&lt;h3&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;方便调试的击中指示物&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;现在就算打中了一个东西，我们最多在终端输出一下位置，我们没法在画面上看到任何东西。&lt;/p&gt;&lt;p&gt;为了方便开发过程中的调试，我们可以写一些简单的代码来表示我们击中了某个位置。这个功能对于现在的我们来说太简单了。我们都已经可以拿到击中的位置了，基本上也就没什么困难了。&lt;/p&gt;&lt;p&gt;当然，你可以单独建一个场景专门来表示这个指示物方便后续调整。不过这里我就简单地直接写代码了。&lt;/p&gt;&lt;p&gt;击中后，我在&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;position&lt;/span&gt;处生成一个新的节点。这里我就直接构造一个&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;CSGSphere&lt;/span&gt;，也就是一个简单的球体。&lt;/p&gt;&lt;pre&gt;var indicator = CSGSphere3D.new()&lt;br&gt;indicator.radius = 0.25&lt;br&gt;indicator.position = result.position&lt;br&gt;var timer = get_tree().create_timer(3.0)&lt;br&gt;timer.timeout.connect(func(): indicator.queue_free())&lt;br&gt;get_tree().root.add_child(indicator)&lt;/pre&gt;&lt;p&gt;不过说到这里要注意一下。基本上只有Godot内置节点直接用构造函数（new）才能直接构造一个对应类型的节点。如果你有一个自己写的脚本然后试图用构造函数构造整个场景的话实际上是不行的。要构造自己的场景只能通过对场景的引用&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;PackedScene&lt;/span&gt;调用&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;instantiate&lt;/span&gt;来构造场景。&lt;/p&gt;&lt;p&gt;不过为了避免不小心或者故意在场景中生成了一大堆指示物，这里用个计时器定时销毁它。&lt;/p&gt;&lt;p&gt;很简单，现在启动游戏并射击就可以看到了。&lt;/p&gt;&lt;p&gt;一不留神，我们又实现了射击游戏中基本的射击功能。&lt;/p&gt; </description><link>https://www.gcores.com/articles/192634</link><guid isPermaLink="false">gcores-192634</guid><pubDate>Tue, 24 Dec 2024 06:00:00 GMT</pubDate><author>cameLcAsE</author><enclosure url="https://image.gcores.com/c03b8d7184378e9bc6e18d83270aa535-1139-638.png" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/c03b8d7184378e9bc6e18d83270aa535-1139-638.png"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/320836a1-8835-452f-a673-58ac258a9b66.mp3" length="1161" type="audio/mp3"></enclosure><itunes:duration>0:19:21</itunes:duration><category>创作笔记</category></item><item><title>SIGGRAPH 粗读丨看看《地平线：西之绝境》燃烧海岸DLC中的云层渲染（上）</title><description>&lt;figure&gt;&lt;img alt=&quot;SIGGRAPH 粗读丨看看《地平线：西之绝境》燃烧海岸DLC中的云层渲染（上）&quot; src=&quot;https://image.gcores.com/5d07fb7e67ca874880f5e7b5f6c896c9-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/f2074e87-d288-4c0f-9419-21546c842356.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/f2074e87-d288-4c0f-9419-21546c842356.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/f2074e87-d288-4c0f-9419-21546c842356.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;视觉更丰富的体积云&lt;/blockquote&gt;   &lt;h1&gt;前言&lt;/h1&gt;&lt;p&gt;在之前读过一个介绍体积云的系列，当时是介绍的《地平线：零之曙光 》中的体积云方案。当时Guerrilla（游戏的开发工作室）的方案还是以在地面看天穹的云层为主要实现目标，在PS4上实现了不错的效果。 &lt;/p&gt;&lt;p&gt;随着续作及其DLC的陆续发布，开发组对于体积云在更多场合呈现更丰富的样态有了思考与实现。这篇分享的主讲人Andrew Schneider本身是一个大气渲染方面的专家，有着十年以上体积云渲染的研究与经验。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/f982aa1c6a871572d90c038c8279012b-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;文章还是以翻译原文的讲稿为主，并且由于原文的篇幅很多地方较长，会进行适当的精简和概括。由于图文内容量都很大，这次会分为上中下三篇，打星号的部分则是我个人的补充说明。  &lt;/p&gt;&lt;h1&gt;1 前导介绍——A Brief (Nubis-Centric) History of Cloud Rendering&lt;/h1&gt;&lt;p&gt;*这部分如标题所述，主要是介绍了作者自己（以在Nubis系统中开发的为主）的体积云渲染履历与技术路线——Nubis是他们这套体积云系统的名称。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/886f100edb26c5d951d0b29cfe5f0dbb-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*这一段作者主要回顾了2011年的一篇论文内容，其中介绍了当时用于动画&lt;span style=&quot;font-weight: bold&quot;&gt;Rio&lt;/span&gt;的离线渲染体积云技术。这个当时被称为&lt;span style=&quot;font-weight: bold&quot;&gt;SmogVox&lt;/span&gt;的技术是他的同事Trevor Thomson开发的，由于用到了光线追踪技术，在离线状态下渲染1920x1080的分辨率大约需要4-10分钟一帧。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/2b406e70e21ae5fbbb98d1c3d864aa1a-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;我（作者）于2014年加入了guerrilla，当时负责改进游戏《Killzone》中使用的2D天空盒。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/e781ec37bb22ebd25bf34c6ea8066bfb-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;  一开始，我试图以移植离线渲染中用过的那套体积算法来解决云形体的问题。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/d4c24c22e9ba0d277c0e3c6f5b1e72a0-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;我构建了一个自定义的&lt;span style=&quot;font-weight: bold&quot;&gt;流体生成器&lt;/span&gt;（fluid solver，直译是求解器）——昵称是Aero，使用了在Houdini被称为micro solvers的子系统。&lt;/p&gt;&lt;p&gt;Micro solver是Houdini计算一帧中的流体模拟的模块化方案，允许使用者重排、修改、引入新的解，以及进行更多你需要的定制（如图）。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;690&quot; height=&quot;390&quot; src=&quot;https://image.gcores.com/4d8f9846ca27a2cc51c41865fd537584-690-390.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;作为与更流行的燃烧样式（combustion-style）生成器的对比，Aero是流线式（streamlined）的并在云体积逐步增大方面进行了强化。（*参考GIF）&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/4f349acb95c7bc157fdb3e2d25c337dc-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;回到2014年，我们模拟了几种不同云的形体并尝试了不同的渲染方案，但它们都无法适应PS4的性能需要，因而无法用于当时的游戏前作《地平线：零之曙光》。&lt;/p&gt;&lt;p&gt;当时时间不足了，因此这项研究工作（流体体积云）就被搁置了，我们转而进行开发。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/3df93e7da158f0e9f293df7178837c3b-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;我们开发了多种不同的建模和渲染方式——可以视为是一种2.5D的云，因为渲染这些云的数据不是通过3D的体素数据，而是2D纹理数据。我们把这一云层系统称为Nubis，下面我们回顾一下这个系统是如何运作的。&lt;/p&gt;&lt;p&gt;*这部分细节其实当时介绍2015年的那篇体积云实现中比较详细的介绍了。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/4b51867c7fddd2f7dd982152bfb2f5b3-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*图中简要回顾了一下这个系统不断进行增量开发进化的脉络，以及相关的分享内容。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/a26835c1b7cbaaaae2a2497783cf6065-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;blockquote&gt;What made Nubis successful in our games was the ways in which we compressed our cloudscapes and added density and lighting details, which are specific to clouds, at render time while fine tuning a rendering technique known as volumetric ray-marching. This allowed us to model cloud evolution and time of day cycles which, in addition to producing distant clouds, could produce superstorms with red lighting, and some low altitude fog-like clouds that the player could fly through. Our method of ray-marching turned compressed cloud models into rendered frames of clouds in between 0.2 and 5 milliseconds depending on if we viewed them from afar or we if flew through them. &lt;/blockquote&gt;&lt;p&gt;使我们的Nubis系统得以成功的是，我们压缩了云的形状并添加了密度和光照细节——参数与具体云的种类相关，并通过微调后的被称为&lt;span style=&quot;font-weight: bold&quot;&gt;体积光线步进&lt;/span&gt;（ray-marching）的技术进行渲染。&lt;/p&gt;&lt;p&gt;这使得我们能对云的光照进行建模，并模拟出一天中不同时间的光照效果——除了产生远距离云层的视觉外，还能产生有着红色闪电的风暴，或是部分玩家可以穿过的低海拔雾状云层。&lt;/p&gt;&lt;p&gt;我们的ray-marching方法将压缩的云模型渲染成体积云需要0.2到5毫秒，取决于玩家的位置是远远地望向云层还是从中飞过。&lt;/p&gt;&lt;p&gt;让我们简单看看这些建模和渲染方法是如何起作用的。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/d04d259df3fd58d9b0f7b9ba71c0a76b-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt; 在一个ray-march过程中，一旦确认像素中包含了云层，就需要执行以下步骤：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;沿着射线与云层的顶部和底部相交的部分逐步执行计算。&lt;/li&gt;&lt;li&gt;对于每一步（云层中）的采样点，采样密度和光照——这需要第二次的（比较昂贵的）朝向光源的ray-march过程，之后将这些数据累加到前一步的结果数据上，为每个像素计算颜色和透明度数据。&lt;/li&gt;&lt;li&gt;重复这一步直到像素变得不透明（full opacity），并且云体积内的每一个像素都需要执行这一过程。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/74e6978408bfae3f33b58891caa9dce3-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;让我们看看每一个步骤执行时的具体过程，从ray-march算法的核心——&lt;span style=&quot;font-weight: bold&quot;&gt;采样密度&lt;/span&gt;开始。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/2b65120ff0fe38bf38fc76991b97dde4-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这里我会集中回顾两种我们使用过的云渲染方法，两者都直接影响了我们体积云渲染的路径：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;第一种被称为&lt;span style=&quot;font-weight: bold&quot;&gt;垂直轮廓法&lt;/span&gt;（Vertical Profile Method），用于高海拔的对流层的云（玩家无法抵达的）&lt;/li&gt;&lt;li&gt;第二种是&lt;span style=&quot;font-weight: bold&quot;&gt;封包法&lt;/span&gt;（Envelope Method），我们用于玩家可以抵达的山岳云层。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;两者有其各自的密度采样方法，但共享一些类似的设计思路。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/c9d36983d40582945ce96fb97f772ce4-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;那些被我们称为&lt;span style=&quot;font-weight: bold&quot;&gt;Nubis数据场&lt;/span&gt;（Nubis Data Fields，缩写&lt;span style=&quot;font-weight: bold&quot;&gt;NDF&lt;/span&gt;）的2D数据场，包含了云在compute shader中渲染的指令——用于从中“解压缩”得到3D云的过程数据。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/3c184e33b54c12c503479974af9ef616-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt; 这些2D数据场覆盖了我们地图16km的区域，在渲染时从中采样以构建3D云的形体。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/a8979193d7167ab11be20e5cab981d45-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;两种方法的ray-march步骤最终都构建了一个高精度的3D体积（如图）——从一个&lt;span style=&quot;font-weight: bold&quot;&gt;低精度的空间轮廓&lt;/span&gt;（dimensional profile）开始。&lt;/p&gt;&lt;p&gt;虽然可能看起来有些相似，但构建这些空间轮廓的方式实际上（在不同方法中）有所不同。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/77d6b18da55558a5ea1ea6f16f415513-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在垂直轮廓法的例子中，我们从5个2D的NDF开始：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;云层的&lt;span style=&quot;font-weight: bold&quot;&gt;最小、最大高度&lt;/span&gt;定义了云的垂直范围。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;顶部类型&lt;/span&gt;和&lt;span style=&quot;font-weight: bold&quot;&gt;底部类型&lt;/span&gt;定义了垂直轮廓的两个查找纹理（lookup textures），两者&lt;span style=&quot;font-weight: bold&quot;&gt;相乘&lt;/span&gt;就得到了我们称为垂直轮廓的数据。&lt;/li&gt;&lt;li&gt;然后，我们通过&lt;span style=&quot;font-weight: bold&quot;&gt;覆盖率数据&lt;/span&gt;来缩放这个垂直轮廓，以控制云形成的位置。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/261d1b64f98dac81364569e2eec2358c-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在封包法的例子中，我们从4个2D的NDF开始：&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;最小、最大高度&lt;/span&gt;定义了封包云层的渲染范围。而&lt;span style=&quot;font-weight: bold&quot;&gt;空间轮廓&lt;/span&gt;是三个梯度的乘积：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;一个指向下方的&lt;span style=&quot;font-weight: bold&quot;&gt;顶层梯度&lt;/span&gt;&lt;/li&gt;&lt;li&gt;一个指向上方的&lt;span style=&quot;font-weight: bold&quot;&gt;底层梯度&lt;/span&gt;&lt;/li&gt;&lt;li&gt;一个从外向内的&lt;span style=&quot;font-weight: bold&quot;&gt;边缘梯度&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/fd8d506cdcc29cb135084ae09582f938-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;我们使用了3D噪声来侵蚀前一步的空间轮廓，并“超精度”至最终看到的结果。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/7470cc8430549ea7cac138e859757e34-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;我们研发了被称为&lt;span style=&quot;font-weight: bold&quot;&gt;Perlin-Worley&lt;/span&gt;噪声的纹理来模拟纤细的和波浪状（wispy and billowy）混合的细节，并单独使用Worley噪声来模拟波浪状的细节。&lt;/p&gt;&lt;blockquote&gt;These were combined in various ways per model to create what we called noise composites for potential wispy and billowy details at the sample position.  &lt;/blockquote&gt;&lt;p&gt;它们在不同的云模型中有不同的混合方式，以创造被称为噪声组合的效果——用于云层采样位置中的（潜在的）纤细和波浪状细节。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/1ebf5f71b933852d0f457023e9b7e76b-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;之后我们使用&lt;span style=&quot;font-weight: bold&quot;&gt;类型数据&lt;/span&gt;（Type data）以混合纤细到波浪状的噪声。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/c56aa98ba2ce548b8fa9cae7f360a6a3-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;blockquote&gt;The erosion was modeled as the subtraction of the inverse of the dimensional profile from the noise composite.   &lt;/blockquote&gt;&lt;p&gt;云的侵蚀效果建模自：噪声合成&lt;span style=&quot;font-weight: bold&quot;&gt;减去&lt;/span&gt;空间轮廓的反相。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/dc9a21ede41bdce54bf9f38d837f414d-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;blockquote&gt;  “Pseudomotion” was simulated for both models by animating the noise in the wind direction.&lt;/blockquote&gt;&lt;p&gt;“伪运动”（Pseudomotion）是通过按风的方向执行噪声动画来模拟的。 &lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/e347bd193fc4b4e7e3da5de72871429c-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在采样完密度后，我们采样&lt;span style=&quot;font-weight: bold&quot;&gt;光的强度&lt;/span&gt;。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/87fd0e5371f01e667adc8e68e31d129b-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;两种方法都依据以下3项来定义光的能量：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;直接光散射&lt;/span&gt;，代表所有从太阳入射的光能量。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;环境散射&lt;/span&gt;，代表从天空和相邻云层来的光能量。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;次级散射&lt;/span&gt;，代表从其它来源（例如光照）中来的光能量。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;计算这些能量有着不同的方式。完整的讲述在2022年的讲座中，而现在我会简要概括一下。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/a1e88a79b138559af1fd7d94125dc486-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;给定采样点的直接光散射的计算，是通过一个包含3项概率的公式：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;传播系数&lt;/span&gt;、&lt;span style=&quot;font-weight: bold&quot;&gt;散射相位&lt;/span&gt;以及&lt;span style=&quot;font-weight: bold&quot;&gt;多重散射&lt;/span&gt;（Transmittance, Scattering phase, and multiple scattering）。&lt;/li&gt;&lt;li&gt;传播系数用来度量光学介质中&lt;span style=&quot;font-weight: bold&quot;&gt;给定深度的光量&lt;/span&gt;。图中展示了随着云层中的深度增加，光是如何递减以及被吸收的。为了收集这一深度，你还需要传导（conduct）一根（非常昂贵的）光步进射线朝向光源。&lt;/li&gt;&lt;li&gt;散射相位用来度量给定采样位置的&lt;span style=&quot;font-weight: bold&quot;&gt;能到达人眼的能量&lt;/span&gt;——基于给定的&lt;span style=&quot;font-weight: bold&quot;&gt;视角向量&lt;/span&gt;和&lt;span style=&quot;font-weight: bold&quot;&gt;光照向量&lt;/span&gt;。云中的光线散射是由于其中的微小水滴或冰晶。光线在云层中的散射有着延路径增加的趋势，因而我们使用Henyey Greenstein相位函数来实现这一效果，综合了艺术家导向和物理现实。&lt;/li&gt;&lt;li&gt;多重散射描述了光经过水分子（molecules）多次折射后，散射进入我们的视角向量的光量。我们使用空间轮廓作为&lt;span style=&quot;font-weight: bold&quot;&gt;概率场的基&lt;/span&gt;，以描述你在云层中时（随着深度增加）内散射（in-scattering ）逐渐变多的趋势。我们使用另一个&lt;span style=&quot;font-weight: bold&quot;&gt;beer-lambert衰减曲线&lt;/span&gt;来计算光线被吸收导致衰减的程度——这一衰减也考虑了云层下方会有相对更少的光散射入云层的事实。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;最终，我们缩放这一相位函数来确保它的方向性。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/8232f58c6d5da0ec431dccbac5dd8a4a-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;2559&quot; height=&quot;1599&quot; src=&quot;https://image.gcores.com/93da98ab7771c1684828f56421788ab1-2559-1599.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这里展示了没有多重散射估算（上图）和添加了这一估算的不同效果。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/a2a2e4de51b49166e339bd084d536afd-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;为了估算射入云层的环境光（不使用光线步进），我们再次将这一几何描述建模成了概率场。&lt;/p&gt;&lt;p&gt;主要的环境光来源自上方和周围，并渗入（penetrates）云层表面。&lt;/p&gt;&lt;p&gt;空间轮廓已经提供了云的&lt;span style=&quot;font-weight: bold&quot;&gt;从外向内的梯度&lt;/span&gt;，我们使用&lt;span style=&quot;font-weight: bold&quot;&gt;它的反相&lt;/span&gt;来创建一个梯度——以描述一个环境光到达云层内某点并散射进我们眼睛的概率。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/a25eed2fdedd2a9b163154460c7bfc17-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;2559&quot; height=&quot;1599&quot; src=&quot;https://image.gcores.com/5a3d9414431ec1255bc97b41766fdae9-2559-1599.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这里展示了一组对比：上方是只有直接光能量的结果；下方是综合了直接光和环境光的结果。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/e5c53281331d8c7a6963380743b4079e-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;最后考虑次级光照能量。通常来说，对于任何放置在云层内的光源来说，每次采样都需要昂贵的光线步进计算（向光源）。图中的例子就需要追踪3根步进射线——而这不是一个理想方案。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/8de45eb8c3e7739277667abb01d99512-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;再一次，我们把这建模成概率问题。&lt;/p&gt;&lt;p&gt;我们建模了一个&lt;span style=&quot;font-weight: bold&quot;&gt;光体积&lt;/span&gt;，以估算光源周围每个采样位置的光能——在主采样步进射线（primary ray-march）上进行。其中有更多细节，不过后面我会展开解释它是如何作用于我们的体积云。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/7f324c0220648123da410fd8d6cb5729-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这里展示了基于这一计算，游戏中云层风暴呈现的效果。（*红色闪电作为次级光源）&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/871c7ecf65c4e7c07593e55ecba1b0fe-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;blockquote&gt;The next step (pun intended) is to determine the step size for our march so that the next sample can be placed along the ray. &lt;/blockquote&gt;&lt;p&gt;下一个步骤是确认射线上采样的步长。&lt;/p&gt;&lt;p&gt;*这里的step，作者标注是pun intended——双关语。有点程序员冷笑话的意思了。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/d005600ed9c6d96a265b157c75d70f61-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;垂直轮廓法采用了一种自适应的步长，它随着到摄像机的距离逐步增加。这样越远处（需要精度越低）的位置采样数就越少。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/df396c01e80a8e3bfec8415740231bd0-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;图中的局部天空需要大概半毫秒来渲染，而全屏整体的天空则需要大约2.2毫秒。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/cb23ffebd1838de131210390f0da0a6c-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;然而，为了支持能以飞行的方式穿过封包法渲染的云层——它们都距离摄像机很近，因而需要很多采样数，我们不得不发挥一些创造力（get a bit creative）来避免过多的采样。&lt;/p&gt;&lt;p&gt;我们混合了两种分别被称为Cone Step Mapping和Distance Step Mapping（直译是锥体步进映射和距离步进映射）的方法，以便仅仅依据高度数据就能高效地放置采样点。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/e89c90b54fa098f59d7c342e79d9d1c6-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;当计算光线步进时，我们基于（前一步的采样点垂直）和表面的交点生成一些锥体，并计算和这些锥体的交点以确认命中云层之前的最大可能步长。而距离步进映射被用于确保，不在云层外的区域消耗太多采样点。&lt;/p&gt;&lt;p&gt;*这里原文没有描述出锥体追踪是一个迭代的过程，从图中可以看出，是循环执行步长减半+锥体求交点的过程，直到命中云体。&lt;/p&gt;&lt;p&gt;当我们开始在封包云层内部采样时，我们开始采用小的步长来采样实际的云层密度。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/fcca83805dc2093d56aa8908d9a07f74-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;图中你可以看到采样的位置——以红色点显示出来，我们集中采样云及其周围的空间，而在空白处则没有那么多的采样点，显然这是更好的一种分布方式。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/11d2f049ca4551e46f5bce16bf5c5f5d-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这种采样能提升多少性能呢？不进行优化之前，开销是4.2毫秒。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/9ea826ff4f6385035aa80403b124e52b-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在优化后的时间是1.3毫秒。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/309c55e2dd6ec1010fae85d3165baa73-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;使我们的云系统进一步提升其性能表现的一个方式是，改进逐像素进行ray march的现状（使用一定的超采样）。两种方式都对云的渲染有加速作用。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/ccf346281a0bc0d1349e0dbfbc22ed10-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;垂直轮廓云使用了分时超采样技术，将渲染的开销分摊到了16帧中。（*原文用了Amortizes ，分期偿还一词）&lt;/p&gt;&lt;p&gt;对于远处的云，它能使原本需要20毫秒的渲染效果在一帧内以2毫秒的速度（分帧）完成；但对于近处的云这种方式是不解决问题的，因为摄像机会快速移动。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/5e920ef2a6f5dc8d83494d63ccbcb8f9-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;因而，对于置身之中的封包云层，我们采用了如下方式：将渲染过程分到两个pass中，靠近摄像机处使用昂贵但低清晰度的渲染模式，而较远处我们希望能减少走样。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/641642cefc91d1d84d58e98445c37417-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;至此，我们已经覆盖了之前的一些云建模与渲染的方式。让我们把两种方法做个对比：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;在封包法中我们不真的支持演进式推算策略，因为没有额外生成锥体和距离场的性能预算。（*图中标注出了 Pseudomotion Only，只支持伪运动，前面提到过的一个词）&lt;/li&gt;&lt;li&gt;两种方式都是全天候有效的。&lt;/li&gt;&lt;li&gt;光照只在垂直轮廓法中实现了。&lt;/li&gt;&lt;li&gt;但两者都支持高帧率模式。&lt;/li&gt;&lt;li&gt;只有封包云层是支持飞行通过的。&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;And unfortunately, none of these methods are very visually intuitive to author and work with. Let’s be honest. Those of you who have worked with these methods know what I mean. &lt;/blockquote&gt;&lt;p&gt;不幸的是，两种方式都不是以符合视觉直觉的方式来制作起效的——实话实说，负责以这些方法制作云的人知道我在说什么。 &lt;/p&gt;&lt;p&gt;两种方法中的这些问题都阻止了我们（包括艺术总监）实现最初就想实现的目标——飞越云层。&lt;/p&gt;&lt;p&gt;因而，在完成了西之绝境的版本开发后——怀着既沮丧又基于证明自己的心情，我开始开发一个原型。在上一年的分享中，我以这一技术的简短一瞥作为了收尾——被称为实时体积云渲染（real-time voxel-cloud renderer）的原型。&lt;/p&gt;&lt;h1&gt;2 体积云渲染原型——A Multi-Voxel Cloud Renderer Prototype&lt;/h1&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/7fcf1e6742efd3e306f3137737bbe8d3-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;相比于在不确定云在何处就开始ray-march采样，我把一个包围盒和内部有向距离场整合到了原本采样来源不可知的方法中。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/81126f4d7cc3ded132dce248e99236f9-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;将采样了密度和光照的多个体积叠加。图中展示了3层叠加的体积云效果。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/e7db29fa5ac5614254a2befc5ec09ffb-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;图中白框范围展示了这种混合式采样放置方法。&lt;/p&gt;&lt;p&gt;我独自尝试迭代了很多版，直到这一过程（在我个人角度）无法优化得更快为止。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/1b5d6544ae16a5aa4cb072f74e64a61f-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;至此好消息是我们可以组合少量的云层，允许玩家飞进其中（之前只能环绕），在PS5的960x540分辨率下需要4毫秒的开销。&lt;/p&gt;&lt;p&gt;而不好的——但极度偶然的消息是，因为我把这一结果展示给了艺术总监，现在他让我回忆起了加入Guerrilla最初就定下的目标。&lt;/p&gt;&lt;p&gt;很快，我就被召集参加了DLC的预告片的会议——听说展示的内容需要包含一些云层的技术。&lt;/p&gt;&lt;p&gt;*截至到原型这一步其实性能还是比较极限的。&lt;/p&gt;&lt;h1&gt;3 燃烧海岸中面临的困难——The Burning Shores&lt;/h1&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/c242ba1e55d895bb45f8cb30b8803ab1-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;图中，预告片中这一幕需要的云都被以白色椭圆体表示了——不止是云层，还需要能高速飞过前景和背景中可见的各处有着波涛状细节的云层。（*原文这里也配了一段视频，展示了主角的飞行）&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/cb13498eed5d29d61ba161d152984c38-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在会议后我执行了一次测试，以确认原型在这种使用条件下的性能表现——性能很糟糕，并且细节也不够好。&lt;/p&gt;&lt;p&gt;幸运的是，我们得知了燃烧海岸DLC会只发布在PS5上，这会为我们减少一些性能上的限制。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/d16fdea4eb1be10117e237c61bf661d5-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;之后我和两位技术主管Jeroen Krebbers和Nathan Vos讨论了我们从原型变为可交付版本的可行性。说实话这是一次激烈的讨论——出于好的目标。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/708f3cbc799859fd9cb55d78f20afb3f-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;会议最终确定了一件事，就是如果我们如果在宣传片中展示了这项效果，我们就需要在游戏中实现它。&lt;/p&gt;&lt;p&gt;我们也认同如果它无法实施，那么整个企划就都会宣告失败。在几位同事的帮助下（*原文列出了具体名称），我们确信了视频中展示的效果可以最终优化并无损地加入DLC中。&lt;/p&gt;&lt;p&gt;*这里作者展示了对应的宣传片，视频容量太大这里就不放了。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/c18b143f5d4fdd3e63c79ffba6878682-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;blockquote&gt;A few takeaways from that experience: I think it was when I was able to produce an expansive cloudscape with this much variety for this shot, that I realized we had a system that was going to work one way or another. &lt;/blockquote&gt;&lt;p&gt;从这次经验中能总结出一些takeaway：当我能为这个镜头制作出如此丰富的云的形体时，我意识到我们有了一个无论如何都能生效的系统。（*结合后文来看，是指会被项目上以各种方式来使用）&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/d33fef22843a1cd3e2260d8f5d490bd9-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;当我们回顾这个镜头时——它在天空一公里的位置，而有人问我是否应该用云掩盖住200米高的山顶。艺术总监说“不，留下它”。这使我意识到我们最初的目的，在实际创造某种效果面前或许又没那么重要了；我也意识到艺术总监已经开始使用云系统来作为前景工具，以构建视觉深度了。&lt;/p&gt;&lt;p&gt;同时，当我们观看了宣传片的观众反馈后，发现人们提到了云的效果，但没有任何关于它和实际游玩相结合的讨论——意味着大多数人还只是把这当成一个电影级宣传片。&lt;/p&gt;&lt;p&gt;这让人感到既兴奋又有点害怕。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/1ab0977e70fcb189d3b0d0ad8f97035d-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;燃烧海岸DLC自身背景被设定在洛杉矶的火山群岛废墟。&lt;/p&gt;&lt;blockquote&gt;True to Hollywood, the goal of the project was to deliver bigger than life experiences. &lt;/blockquote&gt;&lt;p&gt;正如好莱坞（的口号一样），游戏的目标也是提供一段大于生活的体验。&lt;/p&gt;&lt;p&gt;自然地，结合正在开发的新技术，我们希望为玩家打开天空的探索——而不止是把它局限在转场动画中使用。&lt;/p&gt;&lt;p&gt;这意味着云系统不仅要起到之前的细节体积天空盒的作用，玩家要能无缝地从云上飞入水中。&lt;/p&gt;&lt;p&gt;然而，后来的结果表明，要实现这一效果有着更大的挑战——比宣传片中的更大。&lt;/p&gt;&lt;p&gt;*这一段因为有多段播片，可能直接翻译作者的演讲稿会觉得略微缺少了一点上下文。其实作者主要面临两个问题，一是宣传片的体积云效果，其技术当时没有达到实机的标准；另外是它们想让玩家能快速无缝飞过大世界中的云层，又增加了一些优化上的难度。&lt;/p&gt;&lt;h1&gt;结语&lt;/h1&gt;&lt;p&gt;Guerrilla的云系统已经标号到了第3代了，这篇分享的作者也无疑是一个专项领域的特型人才。读了很多有具体实现愿景的渲染文章，我发现无论硬件如何发展，游戏开发者在新平台或新项目中想拿出的视觉效果都是有挑战的（例如之前读的超凡蜘蛛侠系列的建筑LOD，他们就是想在城市建筑的呈现上有所突破）——当然一般来说游戏产品也要取得一定的市场或商业成绩，并确实有符合预期的性能表现，才能在SIG这样层面的大会上去演讲。&lt;/p&gt;&lt;p&gt;这篇分享由于图文都很长，这次算是读完了承前启后的部分。下次的中篇会从第三代云的数学建模开始，逐步深入细节。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;最后是资料链接：&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;Nubis3: Methods (and madness) to model and render immersive real-time voxel-based&lt;/span&gt; &lt;span style=&quot;font-weight: bold&quot;&gt;cloud&lt;/span&gt; &lt;a href=&quot;https://d3d3g8mu99pzk9.cloudfront.net/AndrewSchneider/Nubis%20Cubed%20-%201080.pptx&quot; target=&quot;_blank&quot;&gt;1080P PPTX&lt;/a&gt; &lt;a href=&quot;https://advances.realtimerendering.com/s2023/Nubis%20Cubed%20(Advances%202023).pdf&quot; target=&quot;_blank&quot;&gt;PDF&lt;/a&gt;&lt;/p&gt; </description><link>https://www.gcores.com/articles/192369</link><guid isPermaLink="false">gcores-192369</guid><pubDate>Fri, 20 Dec 2024 07:58:37 GMT</pubDate><author>Hakumen</author><enclosure url="https://image.gcores.com/5d07fb7e67ca874880f5e7b5f6c896c9-1440-810.png" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/5d07fb7e67ca874880f5e7b5f6c896c9-1440-810.png"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/f2074e87-d288-4c0f-9419-21546c842356.mp3" length="1439" type="audio/mp3"></enclosure><itunes:duration>0:23:59</itunes:duration><category>知识挖掘机</category></item><item><title>从法环到幽影地：魂系开放世界与箱庭的未来</title><description>&lt;figure&gt;&lt;img alt=&quot;从法环到幽影地：魂系开放世界与箱庭的未来&quot; src=&quot;https://image.gcores.com/2c093b0e9f073413e23b595ee0f33aa4-1920-1080.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/d44e2894-4cbf-4879-be95-491155b95a07.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/d44e2894-4cbf-4879-be95-491155b95a07.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/d44e2894-4cbf-4879-be95-491155b95a07.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;从开放世界的宏观视角，审视箱庭的功能和未来&lt;/blockquote&gt;   &lt;h1&gt; 前言&lt;/h1&gt;&lt;p&gt;在2023年3月，我曾经发布过一篇&lt;a href=&quot;https://www.gcores.com/articles/162918&quot; target=&quot;_blank&quot;&gt;《如何制作魂类箱庭...》&lt;/a&gt;的理论文章，详细剖析了魂系箱庭的特点和设计思路，并亲自实践，搭建了一个箱庭白盒。如今一年多过去了，我也成为了关卡设计师，有了更多的经验和理解。&lt;span style=&quot;font-weight: bold&quot;&gt;这次借着《艾尔登法环：黄金树幽影》，聊一聊箱庭和开放世界的关系，以及交界地和幽影地的开放世界设计差异。&lt;/span&gt;这篇文章算是我之前那篇的延伸阅读，那么，我们正式开始吧。 &lt;/p&gt;&lt;h1&gt;目录&lt;/h1&gt;&lt;p&gt;一、当箱庭步入新时代&lt;br&gt;二、岛屿与山脉的开放世界&lt;br&gt;三、散布于交界地的箱庭&lt;br&gt;四、幽影地与魂系开放世界之始&lt;br&gt;五、串联起幽影地的箱庭&lt;/p&gt;&lt;h1&gt;一、当箱庭步入新时代&lt;/h1&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;在当今这个时代，箱庭已经不再仅仅是箱庭。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;2017年，《塞尔达传说：旷野之息》发售，标志着传统箱庭的主流性，正式发生了变化。作为箱庭概念的提出者和践行者，《塞尔达传说》系列的传统箱庭影响了很多游戏作品；但是，任天堂却在这个时代，选择去拥抱开放世界。&lt;/p&gt;&lt;p&gt;在《塞尔达传说：旷野之息》中，【POI】这一概念（Point of Interest - 兴趣点）被有效运用，&lt;span style=&quot;font-weight: bold&quot;&gt;箱庭作为子单位被整合进了开放世界的母体中。&lt;/span&gt;不同难度、复杂度、奖励的箱庭【POI】被布设在辽阔的世界中，对玩家产生了不同程度的吸引力，从而左右玩家探索世界的路径。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;512&quot; height=&quot;286&quot; src=&quot;https://image.gcores.com/0cf917d90d7e5495fff2d8efb7575cae-512-286.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这一理论迅速被众多游戏厂商所接纳，各式各样的基于【POI】的开放世界游戏纷至沓来。宫崎英高显然也是如此：《艾尔登法环》“抛弃”了箱庭，选择使其成为开放世界的子单位。于是，在2022年的CEDEC分享中，团队成员也提及了地标【POI】这一概念，将其分为大型地标（巨型迷宫）、中型地标（野外教堂堡垒）和小型地标（营地废墟）。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;720&quot; src=&quot;https://image.gcores.com/cd517362ac6199bb0f7ccd52d21b8c93-1280-720.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在当今这个时代，箱庭已经不再仅仅是箱庭。因此，我们也可以跳脱出箱庭本身，从开放世界这一视角去审视箱庭，去琢磨琢磨这二者的关系，看看它们是如何共生存在的。&lt;span style=&quot;font-weight: bold&quot;&gt;更重要的是，《艾尔登法环：黄金树幽影》在哪些方面让这种共生变得更加紧密有机，跳脱出《塞尔达传说：旷野之息》立下的范式，形成魂系开放世界的雏形。&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;二、岛屿与山脉的开放世界&lt;/span&gt;&lt;/h1&gt;   &lt;figure&gt;&lt;img width=&quot;990&quot; height=&quot;865&quot; src=&quot;https://image.gcores.com/623d4e4bbb9d1a1d246d3dc9c83101ae-990-865.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这是《艾尔登法环》的开放世界地图。我们能很直观看出，&lt;span style=&quot;font-weight: bold&quot;&gt;交界地是由几片很大的岛屿组成的线性结构。&lt;/span&gt;如下图所示，我们将交界地用不同颜色区分，就能看到这个世界的开放性体现在两处：&lt;span style=&quot;font-weight: bold&quot;&gt;【在初始区域的多种选择】和【在岛屿内部的开放探索】&lt;/span&gt;。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;987&quot; height=&quot;865&quot; src=&quot;https://image.gcores.com/2bb35a891ef61b64fbd79870921ca648-987-865.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;我们可以把一个颜色的岛屿类比成一个小开放世界。&lt;/span&gt;在宁姆格福出生时，玩家在小开放世界层面的选择实际上是最多且最明显的：他可以向北推进主线，可以向东来到盖利德，也可以向南到达“新手村”啜泣半岛。等玩家到达游戏中期时，他的选择可能就只有【是否下地底】或者【先去王城还是火山】，而地底不能完全算是小开放世界，王城和火山也隶属于同一个小开放世界。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;每个小开放世界的连接实际上是唯一的，这使得整个交界地的开放性，或者说整体性，有所欠缺。&lt;/span&gt;宁姆格福到湖之利耶尼亚由史东维尔城连接，宁姆格福到啜泣半岛由大桥连接，湖之利耶尼亚到亚坦高原由大电梯连接......换句话说，假设我把雪山的位置挪到盖利德右侧，由一个大桥连在一起，交界地这个开放世界也不会因此被破坏。&lt;/p&gt;&lt;p&gt;这就是岛屿式开放世界的特点：&lt;span style=&quot;font-weight: bold&quot;&gt;拼装性极好，对玩家自由探索的约束性较好，但世界的整体感较差。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;接下来我们可以看看《塞尔达传说：旷野之息》的开放世界地图，通过对比加深大家的理解。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;颜色越浅海拔越高&quot; width=&quot;650&quot; height=&quot;541&quot; src=&quot;https://image.gcores.com/6275924fc8ddaa391d5840874589314f-650-541.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这是一个山脉式的开放世界，中央是海拔最低的海拉鲁平原，四周从左上顺时针依次是海布拉雪山、火山、拉聂尔雪山、双子峰和格鲁德高原。可以看出，&lt;span style=&quot;font-weight: bold&quot;&gt;这些山脉隔开了开放世界的子区域，只留下山脉和山脉间的隘口作为通行路径。&lt;/span&gt;但是，因为玩家拥有爬山的能力，且山脉本身也可以作为开放世界的可探索地形，使得整个海拉鲁十分整体、自由。&lt;/p&gt;&lt;p&gt;顺带一提，《原神》的提瓦特大陆也经常&lt;span style=&quot;font-weight: bold&quot;&gt;使用山脉的地形去包裹住其中的箱庭&lt;/span&gt;。山脉能够较为完美的遮挡玩家的视野，让玩家在抵达之前都不知道山脉之中或另一头是什么、有什么惊喜。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;须弥的各个河谷都潜藏着POI&quot; width=&quot;902&quot; height=&quot;570&quot; src=&quot;https://image.gcores.com/40c7d7d4c4470604caf1e140d00f304f-902-570.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;总结一下，山脉式开放世界的特点是：&lt;span style=&quot;font-weight: bold&quot;&gt;整体性较强，鼓励玩家自由探索并发现隐藏的地点，但需要额外精力处理山脉和周边地形的过渡。&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;三、散布于交界地的箱庭&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;了解了岛屿式的开放世界形态后，我们终于可以来看看这些散布于交界地的箱庭了。&lt;/p&gt;&lt;p&gt;在这个部分，【箱庭对于开放世界的作用】是我们的主要焦点，因此天空城法姆亚兹拉和米凯拉圣树这两个箱庭不在讨论范围内。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;986&quot; height=&quot;865&quot; src=&quot;https://image.gcores.com/d883bd1be66ab74e41228847da483f5f-986-865.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;首先，魔法学院和火山官邸可以放到一起说，因为他们都还是遵循了《塞尔达传说：旷野之息》的一些范式的。魔法学院位于湖之利耶尼亚的中心湖区，四周都是高地。在这种情况下，高耸尖锐的魔法学院成为了湖之利耶尼亚独一份的大型地标，且这个地标的视觉引力和功能引力都是最高优先级的。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1206&quot; height=&quot;664&quot; src=&quot;https://image.gcores.com/deec0ee7f21bc2dace84e18cbb1f62cb-1206-664.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这个构图是不是有点眼熟？没错，魔法学院之于湖之利耶尼亚，就像海拉鲁城堡之于海拉鲁平原。两者都作为地标，让玩家在探索对应的开放世界区域时，能够依靠地标的位置和朝向，判断自己当前身处的方位。同时，地标本身提供了足够强的吸引力，让玩家想要去前往。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1280&quot; height=&quot;720&quot; src=&quot;https://image.gcores.com/e53884f9a36067562d6e1b842cba9fcc-1280-720.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【箱庭之于开放世界的作用1 - 地标 / POI】&lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;探索开放世界时的参照点&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;干涉玩家行动的强吸引力&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下面来看一下火山官邸。这是一个不太容易发现的箱庭，它被包裹在山脉之中，只有有限的小路才能抵达。在湖之利耶尼亚或者亚坦高原瞭望，我们几乎是看不到这个箱庭的，它是一个隐藏起来的箱庭。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1079&quot; height=&quot;641&quot; src=&quot;https://image.gcores.com/44e2b104a319c2e0454cf6c53a891175-1079-641.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;我们之前提过，用山脉将箱庭包裹起来，是山脉式开放世界的一种常见思路。在这种情况下，箱庭会丧失地标的功能性，与此相对，它获得了另一种作用 —— &lt;span style=&quot;font-weight: bold&quot;&gt;探索奖励&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;探索奖励在游戏中的运用，事实上历史悠久：从2D马里奥在关卡中藏匿隐藏房间开始，到如今开放世界中总会出现的山洞、井底......&lt;span style=&quot;font-weight: bold&quot;&gt;玩家出于自愿探索游戏世界，而探索奖励又让玩家产生了更多探索的动力。奖励越大越不同，再次探索的动力也就越大。&lt;/span&gt;火山官邸，甚至诸如日荫城、摩恩城等中等箱庭，都是独一份的探索奖励。它们隐藏在山中、城墙后、世界边缘、孤岛上，等待着被那些乐于探索的玩家发现。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;那些位于山脉中、世界边缘和孤岛上的城堡们&quot; width=&quot;989&quot; height=&quot;865&quot; src=&quot;https://image.gcores.com/204bc2166c1db8993575244db7f4b0ac-989-865.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【箱庭之于开放世界的作用2 - 探索奖励】&lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;探索开放世界时，发现隐藏区域的奖励&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;这种奖励反过来促进玩家继续探索世界&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;最后，我们一起看一下史东维尔城和王城罗德尔。这两个箱庭具有独特的功能性，这是独属于魂系开放世界的。在后续的幽影地中，我们也能发现这种功能性开始生根发芽，甚至一定程度上奠定了魂系箱庭的未来。&lt;/p&gt;&lt;p&gt;下面是史东维尔城的俯视图。这个箱庭特殊就特殊在，它连接起来了宁姆格福和湖之利耶尼亚这两个小开放世界。换句话说，&lt;span style=&quot;font-weight: bold&quot;&gt;设计师把一座大桥、一个隘口，做成了一个箱庭，让这个箱庭变成了开放世界区域间的连接点。&lt;/span&gt;这个功能都有哪些好处呢？&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1100&quot; height=&quot;661&quot; src=&quot;https://image.gcores.com/ed9fc0c86f3382b4912444b5063de009-1100-661.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;首先，它成为了玩家必须要经过的地方。和魔法学院、火山官邸、甚至不纳入讨论的法姆亚兹拉和米凯拉圣树都不同，史东维尔城（虽然有条小路可以绕过去）和王城罗德尔是唯二完全卡在玩家主线必经之路上的箱庭。你不进入王城罗德尔，那你就没办法到雪山；它就是一个锁钥结构，是玩家当前阶段探索的一个终点，是动线的收束点和发散点，是篇章和篇章间的断点。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;王城罗德尔和雪山间的唯一通路&quot; width=&quot;979&quot; height=&quot;585&quot; src=&quot;https://image.gcores.com/e5c098daf552636eceda0ca4f291d945-979-585.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;【箱庭之于开放世界的作用3 - 区域连接点】&lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;开放世界不同区域间的连接点&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;收束并重新发散玩家的动线&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;游戏流程和流程之间的分割点&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;当然，设计师在交界地时，还没有意识到箱庭作为区域连接点的全部潜力......&lt;/p&gt;&lt;h1&gt;四、幽影地与魂系开放世界之始&lt;/h1&gt;&lt;p&gt;《艾尔登法环：黄金树幽影》是一个巨大的实验场。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;966&quot; height=&quot;535&quot; src=&quot;https://image.gcores.com/ce91511a435f98ebaf5374c45169b4ff-966-535.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;一进入墓地平原，眼前的风景自然地分成四个层级：近景的平原、中景的废墟、远景的恩西斯城和幽影亚坦、以及超远景的幽影城和幽影树。&lt;span style=&quot;font-weight: bold&quot;&gt;从俯视角来看，废墟、恩西斯城和幽影城是处于一个轴线上的，且墓地平原周围的高地和山脉遮挡住了其它东西，让我们的视野集中在这个由三个箱庭路标、由近即远、由低到高的轴线。&lt;/span&gt;&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;墓地平原四周的高地遮挡住了同样作为地标的神之塔和尖刺山&quot; width=&quot;1047&quot; height=&quot;656&quot; src=&quot;https://image.gcores.com/4d51b2eeefd213371fcd551d24d63812-1047-656.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;幽影地的开放世界不再是岛屿的形式，而更像是一个整体。&lt;span style=&quot;font-weight: bold&quot;&gt;把视野拉高，我们可以看到整个幽影地最突出的三个地标：神之塔、幽影城和尖刺山。它们都是高耸的形状，有极高的视觉吸引力；只要它们任何一个出现在玩家的视野里，就有很大可能被玩家视作探索目标。&lt;/span&gt;换言之，如果这三个地标同时出现，会对玩家的动线形成强烈的干扰，让玩家失去评估主次的意识。这个时候，墓地平原的轴线和高地遮挡就展现了设计师极高的地形引导水平。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1077&quot; height=&quot;644&quot; src=&quot;https://image.gcores.com/6192e73eb1bc11d9398718a3309747b4-1077-644.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;在墓地平原，必须仰视才能瞥见神之塔&quot; width=&quot;1091&quot; height=&quot;605&quot; src=&quot;https://image.gcores.com/b385f298a17138c2a8cefd4ae08de808-1091-605.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img alt=&quot;在墓地平原，只能看到尖刺山的一角，且容易溶于背景&quot; width=&quot;1095&quot; height=&quot;596&quot; src=&quot;https://image.gcores.com/7094011542529c8a760ddabd2d0aec9a-1095-596.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;那么，神之塔和尖刺山在什么时候才能被玩家完全注意到，并发挥出地标的作用呢？&lt;/p&gt;&lt;p&gt;当玩家刚刚进入劳弗古遗迹的入口，引入眼帘的就是神之塔的全貌。同样的，当玩家从龙洞出口一出来，尖刺山就完全展现了出来。在这个时候，为什么幽影城的地标性丧失了？抛开流程不谈，劳弗古遗迹的海拔很高，尖刺山脚的海拔很低，且基本背对着幽影城。那为什么神之塔和尖刺山的吸引力不会互相影响？答案也很简单，太远了，且利用黑刺或积云进行了遮挡。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1059&quot; height=&quot;589&quot; src=&quot;https://image.gcores.com/e24733f399495de3a6d50e0850261e27-1059-589.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1065&quot; height=&quot;592&quot; src=&quot;https://image.gcores.com/b8f5560af433903310913181d3671713-1065-592.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;对比来看几张宁姆格福出生时的视野，差别还是很明显的，这里就不多赘述了。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1022&quot; height=&quot;566&quot; src=&quot;https://image.gcores.com/40c15e04fffc024a1366583cc493423f-1022-566.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;1027&quot; height=&quot;566&quot; src=&quot;https://image.gcores.com/d8a477ab326de505cb97605c0e554f99-1027-566.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;接下来，我们来谈谈幽影地的开放世界形态 —— &lt;span style=&quot;font-weight: bold&quot;&gt;千层饼式开放世界&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;《艾尔登法环：黄金树幽影》发售后，不少玩家反馈幽影地把开放世界设计成了一个大箱庭。先不论幽影地的内容填充，单从地图设计的角度，可以发现这是对岛屿式开放世界的一种优化方案：&lt;span style=&quot;font-weight: bold&quot;&gt;用高度划分不同地区的重要性。&lt;/span&gt;&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1106&quot; height=&quot;664&quot; src=&quot;https://image.gcores.com/c91ac516a9c68785bef6e204ee1e2b02-1106-664.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;墓地平原、幽影亚坦和劳弗古遗迹位于较高的高度，且逐级抬升，并构成了环形路径；玩家在墓地平原就能完全观测到主线所涉及的所有区域和它们之间的关系。海岸、尖刺山脚以及诸多山谷位于较低的高度，承载了不同的支线。这些地方在一开始对玩家的引力几乎为零，因为不主动探索根本看不到。谷底森林位于最低的高度，可以说是隐藏中的隐藏，很难找到，且即使找到了，这里也有全幽影地最负面的探索机制（只能潜行走路）。&lt;/p&gt;&lt;p&gt;把不同重要度的地区放到不同的高度上，是比把它们放到不同的岛屿上更好的解决方案。这种做法使得世界的整体性更高。我们可以把交界地的区域一一对应放到幽影地来，会发现一点也不违和。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1236&quot; height=&quot;746&quot; src=&quot;https://image.gcores.com/65b555efdd8c70e7e52409a9527421b3-1236-746.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;总结一下千层饼式开放世界的特点：&lt;span style=&quot;font-weight: bold&quot;&gt;整体性较高、地区重要性划分明显，对自由探索的要求较高。&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;五、串联起幽影地的箱庭&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;交界地的箱庭就像洒在天空上的星星，而幽影地的箱庭则像串起不同布料的丝线。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;还记得我们刚刚说的“在交界地，设计师没有发挥箱庭作为区域连接点的全部潜力”吗？这个潜力的含义，实际上也是&lt;span style=&quot;font-weight: bold&quot;&gt;【高度】&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;在交界地中，有一个箱庭是十分特殊的 —— 卡利亚城寨。它修建在山崖，一半位于山脚下，一半位于山间高地上。它连接起来了湖区和高地上的法师塔区域，同时，这个连接也解决了高差的问题。湖之利耶尼亚到亚坦高原的小路也是同一个道理，把通常用来解决高差问题的电梯，做成了一个箱庭。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1152&quot; height=&quot;676&quot; src=&quot;https://image.gcores.com/4952949164a3da9dcf6a619baba46dc9-1152-676.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;好，那现在我想问一下，在幽影地你都能找到哪些类似的箱庭呢？相信大家心里都有数了。不论是恩西斯城、龙洞、穆尔废墟等等，都是在作为区域连接点的前提下，解决了高差的问题。&lt;span style=&quot;font-weight: bold&quot;&gt;可以说，【串联开放世界的不同区域】和【解决区域和区域间的高度差】成为了魂系箱庭的新使命。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;幽影城更是如此。很多玩家会称赞幽影城的箱庭设计集大成，也有玩家会说这不就是魂一小隆德和魂三大书库缝到了一起嘛。但是，我认为，幽影城的优秀不仅仅在于箱庭本身，更在于它优秀的连接开放世界区域的能力。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;966&quot; height=&quot;591&quot; src=&quot;https://image.gcores.com/01209ae8fc53b281be8d10fdcda49cbc-966-591.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;幽影城这个箱庭对于幽影地这个开放世界的意义实在太重大的，它成为了这个世界的中心枢纽，连接了多个不同高度的区域：幽影亚坛、劳弗古遗迹、下方河谷、美努斯大教堂、幽影树、巫者村......如果说幽影地是一次大型实验的话，那幽影城的设计则是其中的结晶。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;事实上，幽影地的这几个大型箱庭都有自己各自的实验性。恩西斯城和幽影城刚刚讲过了，塔之镇&amp;amp;神之塔试图去呈现一个超垂直叠加的双箱庭结构，让玩家能够正着或倒着探索，甚至从神之塔速降到塔之镇。劳弗古遗迹则开创了一种超级大范围的箱庭，算是交界地的雪山地图同一定位的升级版；它强调了抵达终点路途上的乐趣性，也就是“我知道目标在前方，但怎么过去、怎么选择道路、怎么抵达目标也是有趣的”。&lt;/p&gt;&lt;h1&gt;后日谈&lt;/h1&gt;&lt;p&gt;时代一直在变迁，我们有时也必须做出改变。从《黑暗之魂》到《艾尔登法环》，再到《艾尔登法环：黄金树幽影》，宫崎英高也在一步步探索着魂系箱庭的未来。在新的关卡形式出现时，应该怎么样接入自己的老手艺，使其驱动新的形式，而非被别人的范式所裹挟。&lt;/p&gt;&lt;p&gt;相信这篇文章能够给大家一些启发，不仅仅是具体的方法论，而是更背后、更深层的设计理念的迭代和尝试。假如你是宫崎英高，你怎么做出有自己特色的开放世界？你怎么再设计出不一样的、独特的箱庭？这也是这篇文章背后的东西。&lt;/p&gt;&lt;p&gt;希望我们能够在未来迎来更好玩的、更创新的魂系游戏作品！&lt;br&gt;&lt;/p&gt; </description><link>https://www.gcores.com/articles/192221</link><guid isPermaLink="false">gcores-192221</guid><pubDate>Mon, 16 Dec 2024 04:00:00 GMT</pubDate><author>Bramasole</author><enclosure url="https://image.gcores.com/2c093b0e9f073413e23b595ee0f33aa4-1920-1080.jpg" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/2c093b0e9f073413e23b595ee0f33aa4-1920-1080.jpg"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/d44e2894-4cbf-4879-be95-491155b95a07.mp3" length="1028" type="audio/mp3"></enclosure><itunes:duration>0:17:08</itunes:duration><category>知识挖掘机</category></item><item><title>游戏机制-高级游戏设计技术读书笔记</title><description>&lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/48f0f220-b9b1-4922-94b7-0d8c72c44f88.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/48f0f220-b9b1-4922-94b7-0d8c72c44f88.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/48f0f220-b9b1-4922-94b7-0d8c72c44f88.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;第十章--关卡设计与游戏机制笔记整理&lt;/blockquote&gt;   &lt;p&gt;&lt;span style=&quot;font-weight: bold; font-style: italic&quot;&gt;一、&lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold; font-style: italic&quot;&gt;构筑玩乐活动&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;1.主任务——玩家为通过一关而需要完成的多个小任务的集合&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1846&quot; height=&quot;268&quot; src=&quot;https://image.gcores.com/b5249c79f8d29e600010c9cf0960cbc7-1846-268.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;2.普通胜利条件———游戏预先设定好的目标，规定玩家需要达到哪些条件才能通关，大部分游戏通关不等同于全部完成度，如空洞骑士全完成度是112%，但玩家打出真结局只需要108%,甚至普通结局是击败了空洞骑士就可以完成，并不做完成度限制，于是会有any%通关 &lt;/p&gt;&lt;p&gt;3.关卡引导————显著的建筑物作为关卡指向针，如艾尔登法环的黄金树，迪士尼乐园的中心城堡，对比导致玩家迷路的黑神话，正是因为缺少显著的建筑物作为指向&lt;/p&gt;&lt;p&gt;4.侧重于机制中的不同结构——通过让不同关卡或区域分别侧重于不同机制的方法，将复杂机制分割成一些易于掌握的小片段，促使玩家在同一个游戏中尝试和探索不同策略——即让前期关卡分别呈现出机制的不同分支，在后面的关卡中再展现出完整机制，塞尔达传说的神庙完美地体现了这一结构&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1661&quot; height=&quot;287&quot; src=&quot;https://image.gcores.com/b1f723489cb6f6e5349d268c23efb781-1661-287.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;5.达成目标的不同路径————核心目标：以高尔夫球为例，核心目标为“球入洞”，于是针对球入洞可以做各种各样的达成方式，类似于塞尔达传说的神庙，核心目标是通关神庙，但在神庙之中做一些技能的变体（同时也作为玩家技能的教学）&lt;/p&gt;&lt;p&gt;6.难度坡度————起始区域十分简单，随后难度逐渐提升，也是后文作者所提到的“渐进机制”，即逐步增加难度与核心机制变体让玩家一直保持在舒适的游戏曲线上&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1216&quot; height=&quot;324&quot; src=&quot;https://image.gcores.com/5bf36a6a051294bdbd018f9fd1cc672c-1216-324.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold; font-style: italic&quot;&gt;讲述故事&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;故事有助于构建关卡和引导玩家，并能为玩家提供一个完成目标的动机&lt;/li&gt;&lt;/ol&gt;   &lt;figure&gt;&lt;img width=&quot;704&quot; height=&quot;187&quot; src=&quot;https://image.gcores.com/b57db840befab00de63d755ae9f3e713-704-187.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;2.戏剧弧线手法————主角一路披荆斩棘，克服一系列艰难的挑战，从而获得关键性的优势并最终迎来胜利 &lt;/p&gt;&lt;p&gt;3.当游戏机制、关卡结构和戏剧弧线三者无缝结合时，游戏故事的效果最好&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold; font-style: italic&quot;&gt;二、任务设计&lt;/span&gt;&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1336&quot; height=&quot;165&quot; src=&quot;https://image.gcores.com/ec19e15b12886d3f5a588303a066033f-1336-165.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;1.子任务之间的依赖关系————让较难的任务B依赖于较容易的任务A，如在A处获得关键钥匙打开B的大门，或者在A学习到的机制能使用在B处&lt;/p&gt;&lt;p&gt;2.任务流程不能固定不变，在各种选项时尽可能多做一些分支；在一个主任务上可以做几个子任务调节玩法，以使得该任务不至于一成不变&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;456&quot; height=&quot;234&quot; src=&quot;https://image.gcores.com/ad690dc4d31f4b654003aa8d0274b1a3-456-234.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;3.为了不使玩家完成一个任务重复走一些路程，可以在玩家走过的地点新增一些捷径和传送点，方便他们来回跑图。同时也可以添加一些方便玩家快速移动的载具，譬如摩托车、汽车、滑翔伞等等&lt;/p&gt;&lt;p&gt;4.可选任务————如果任务是可选的，需考虑到该任务能给玩家带来何种奖励，是否会影响游戏可玩性，防止其成为游戏通关必需因素&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1847&quot; height=&quot;109&quot; src=&quot;https://image.gcores.com/4e478d608cddf6a1e2ab0a8af0dbbe62-1847-109.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;5.互斥任务————玩家可以选择执行不同的任务来达成同样的目的，但选择其中一个任务后，就不能再选择其他游戏了。如玩家可以选择悄悄从守卫旁边溜过来夺取钥匙，也可以选择战斗，还可贿赂守卫，但选择其中一项后，其余不可在这个人物上再选择 &lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1680&quot; height=&quot;519&quot; src=&quot;https://image.gcores.com/80234e40748d23e682be9e1c9b546635-1680-519.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;6.技能属性————需要将技能设计地相对较深而非相对较宽，并至少在游戏早期就将必要技能教给玩家。这样玩家在学习次级技能（建立在其他技能基础上的技能）时可以参考之前积累的知识，从而降低学习成本  &lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1043&quot; height=&quot;180&quot; src=&quot;https://image.gcores.com/e8aab53974350803cbeb21ac71f37d66-1043-180.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;928&quot; height=&quot;974&quot; src=&quot;https://image.gcores.com/b136aae2faaa1c402d7b1e1d3e0eabce-928-974.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;919&quot; height=&quot;459&quot; src=&quot;https://image.gcores.com/92f096bd4dae31f81c1ee31f40a956cc-919-459.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;965&quot; height=&quot;629&quot; src=&quot;https://image.gcores.com/c763d240f24f8879df84a1b6f51b4718-965-629.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt; </description><link>https://www.gcores.com/articles/192263</link><guid isPermaLink="false">gcores-192263</guid><pubDate>Sun, 15 Dec 2024 09:28:13 GMT</pubDate><author>alexwondering</author><enclosure url="https://image.gcores.com/a458c4ca04548d587db15204b65e7064-919-459.png" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/a458c4ca04548d587db15204b65e7064-919-459.png"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/48f0f220-b9b1-4922-94b7-0d8c72c44f88.mp3" length="249" type="audio/mp3"></enclosure><itunes:duration>0:04:09</itunes:duration><category>知识挖掘机</category></item><item><title>解析《无限暖暖》的运动系统，并尝试使用MM系统讲解其效果实现</title><description>&lt;figure&gt;&lt;img alt=&quot;解析《无限暖暖》的运动系统，并尝试使用MM系统讲解其效果实现&quot; src=&quot;https://image.gcores.com/e1ff925c05365aa83fe1bbc035ea3d7d-1200-350.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/8e87b332-7a83-4f32-b018-26a80620994a.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/8e87b332-7a83-4f32-b018-26a80620994a.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/8e87b332-7a83-4f32-b018-26a80620994a.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;游戏好赞，女儿好看&lt;/blockquote&gt;   &lt;p&gt;最近有在编写过关于MotionMatching系统（以下简称为MM系统）的文章，也有在研究其接入AI控制的案例，脑子里自然就都是这块东西。&lt;/p&gt;&lt;p&gt;《无限暖暖》开服的时候，大喵给我打了两个电话（虽然我都没接），由于白天在忙东西就先把游戏给下了。晚上进游戏时候，被狠狠惊艳到了，特别是运动系统，着实不简单！恰巧跟自己研究的有点关联，便顺便研究一下。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-style: italic&quot;&gt;前排提醒：本人既非项目成员也并非叠纸员工，文章将以假设《无限暖暖》使用MM系统的前提下进行讲解。所有内容均基于个人见解，如有错误敬请谅解。 &lt;/span&gt;假设《无限暖暖》使用MM系统的前提下进行讲解。所有内容均基于个人见解，如有错误敬请谅解。 &lt;span style=&quot;font-weight: bold&quot;&gt;假设《无限暖暖》使用MM系统&lt;/span&gt;的前提下进行讲解。所有内容均基于个人见解，如有错误敬请谅解。 &lt;/p&gt;&lt;p&gt;首先是待机-起步-行走-止步-待机的循环。使用键鼠控制，按下移动键的时候角色就开始移动/转向了，粘滞感不明显。使用手柄控制，点拨摇杆可以看到角色表现出将动未动的情况（第二张图的键盘交互UI是因为刚进游戏就插着手柄玩，没进到设置界面该操控方式）。在之前的文章中讲述过MM系统可以通过动作输入对Actor进行预测，进而计算出未来时间点的速度，用于设置动画切换的条件。当动作输入不足以驱动角色移动，未能满足从待机状态到起步动画的条件，或者中途中断了动作输入，迫使角色从起步动画返回到待机状态，即形成了所谓的粘滞感。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;360&quot; height=&quot;240&quot; src=&quot;https://image.gcores.com/cb232a8a2a0ad727e59dcd2c6a0ca711-360-240.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;360&quot; height=&quot;240&quot; src=&quot;https://image.gcores.com/82bb4dc06cbb195c0596cd549dae0201-360-240.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt; 然后是我最为称赞的左右脚起步。先看下面两张图&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;360&quot; height=&quot;240&quot; src=&quot;https://image.gcores.com/76da17d18f1c57027b8d70b06c0ca02b-360-240.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;360&quot; height=&quot;240&quot; src=&quot;https://image.gcores.com/b36d9eb3b3bf372bee00f6b1211f18cb-360-240.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;虽然都是起步动作，但若左脚在前就先迈左脚，右脚同理。说明在起步时会根据当角色左右脚的位置关系会选择使用不一样的起步动画。在之前文章有有讲述到&lt;span style=&quot;font-weight: bold&quot;&gt;“‘匹配’，也就是使用数据库里的动画姿势，与某个给定的参考值进行差异对比，得出差异最小的动画姿势就是即将播放的动画”，&lt;/span&gt;但只讲述对轨迹进行匹配的例子。当前的情况就需要进行“角色姿势”的匹配。这需要引入Pose Search Schema与Pose Search Channel（也就是之前讲述到的PSS与PSC）资产的讲解。  （官方文档见&lt;a href=&quot;https://dev.epicgames.com/documentation/zh-cn/unreal-engine/motion-matching-in-unreal-engine#%E5%88%9B%E5%BB%BA%E5%A7%BF%E5%8A%BF%E6%90%9C%E7%B4%A2%E6%A8%A1%E5%BC%8F%E8%B5%84%E4%BA%A7:~:text=%E7%A6%81%E7%94%A8%E6%AD%A4%E5%8A%9F%E8%83%BD%E3%80%82-,%E5%88%9B%E5%BB%BA%E5%A7%BF%E5%8A%BF%E6%90%9C%E7%B4%A2%E6%A8%A1%E5%BC%8F%E8%B5%84%E4%BA%A7,-%E5%8A%BF%E6%90%9C%E7%B4%A2%E6%A8%A1%E5%BC%8F&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;） &lt;/p&gt;&lt;p&gt;PSS主要作用是配置到PSD中，在进行匹配时，依次对其中设置的各个PSC（通道）与这些通道在当前角色姿势下的属性值进行对比，进而选出最优解。以起步为例，起步的PSD的PSS配置了左右脚相对位置的通道，在进行起步动画的匹配时，对比当前状态下左右脚的位置信息，若左脚在前，则左脚起步的动画更容易被选中，反之亦然。（下图为官方项目中Stop动画的PSD，根据当前左右脚的相对位置来选用不同的止步动画） &lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;2407&quot; height=&quot;971&quot; src=&quot;https://image.gcores.com/23be9e1a9349bd50ccc78d9008af6fa0-2407-971.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;若存在左右脚区分的起步动画，那必须配套完整的左右脚区分的待机，止步以及转身动画，动画资产的需求突然暴涨。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;360&quot; height=&quot;240&quot; src=&quot;https://image.gcores.com/8032fb4a16939d00a1fb6af3ee0d3dd3-360-240.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;360&quot; height=&quot;240&quot; src=&quot;https://image.gcores.com/e7f0629dee4ab42321201873f82236df-360-240.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;MM系统中，角色Actor与角色模型（骨骼体）的旋转是独立进行的，当角色模型（骨骼体）播放转向动画时，角色Actor在接受到输入时就已经完成了转向，因此在制作转向相关的动画资产时需要注意根骨骼的运动情况。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;360&quot; height=&quot;240&quot; src=&quot;https://image.gcores.com/04216ce92a6b799da4be08245e6d8674-360-240.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;360&quot; height=&quot;240&quot; src=&quot;https://image.gcores.com/b983891beaa58f64b9d52f3ef19807fd-360-240.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;MM系统中可以使用RootBone Offset节点实现骨骼体与角色Actor的位置与旋转偏移。 &lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;735&quot; height=&quot;690&quot; src=&quot;https://image.gcores.com/411cb75645834e67963492ed292edc46-735-690.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;Setting面板中的Translation Mode跟Rotation Mode适用于设置于骨骼体与Actor的变换关系，可以选择Accumulate（累积）、Hold（保持）、Interpolate（插值）跟Release（释放）。个人项目中如图设置进行设置&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1654&quot; height=&quot;489&quot; src=&quot;https://image.gcores.com/ab61d387ef66a4b33479550dda067f1f-1654-489.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;Strafe状态下将Rotation Mode设置为Accumulate即可让骨骼体保持原来朝向时设置Acotr的朝向为输入方向，然后按照匹配结果播放相应的转身动画。&lt;/p&gt;&lt;p&gt;以上是在Orient to movement模式下的运动，接下来看Strafe状态下的动画表现。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;360&quot; height=&quot;240&quot; src=&quot;https://image.gcores.com/2ffb040398cd1a4ad1bba657291a05ed-360-240.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;360&quot; height=&quot;240&quot; src=&quot;https://image.gcores.com/67bd61dc86e1b66005d8ae68ab2c1107-360-240.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;Strafe状态下运动时，脚部保持继续运动，下半身身体会转向角色的运动方向。在MM系统中可以使用Orientation Warping节点实现该种效果（官方文档介绍见&lt;a href=&quot;https://dev.epicgames.com/documentation/zh-cn/unreal-engine/pose-warping-in-unreal-engine?application_version=5.4#:~:text=%E5%A7%BF%E5%8A%BF%E6%89%AD%E6%9B%B2-,%E5%A7%BF%E5%8A%BF%E6%89%AD%E6%9B%B2,-%E5%A7%BF%E5%8A%BF%E6%89%AD%E6%9B%B2%E4%BC%9A&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;）。 当启用效果时，下半身将转向运动方向，而上半身依据Spine层级逐层递减以保证朝向维持一致。 &lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;874&quot; height=&quot;734&quot; src=&quot;https://image.gcores.com/a6a37cf929d34e67c15574f2dcf17f58-874-734.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt; 在自己个人案例中进行如下设置：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;在非Strafe状态下权重为0，即不启用效果 &lt;/li&gt;&lt;li&gt;Strafe状态下，读取当前正播放的动画序列的名为EnalbeOrientationWarping曲线值，将其作为启用节点的启用权重。若当前动画资产不含该曲线，但与含有该曲线的动画进行混合时，其权重也会按照混合程度输出&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1707&quot; height=&quot;418&quot; src=&quot;https://image.gcores.com/32e24922ce10f1b545535a6a7a07d12c-1707-418.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;2338&quot; height=&quot;1257&quot; src=&quot;https://image.gcores.com/7c31a231ae36991fda33fbe58b06c08d-2338-1257.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt;&lt;p&gt;对于角色的运动系统先到这里，然后来看看NPC的运动表现（这里暂时不讨论大喵的运动情况）&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;360&quot; height=&quot;240&quot; src=&quot;https://image.gcores.com/bddf89122c9cbd0fbe87c855922e8e7b-360-240.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;NPC起步也有左右脚的区分，只是似乎没有根据待机状态下左右脚的相对位置进行选择。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;360&quot; height=&quot;240&quot; src=&quot;https://image.gcores.com/039e7727e50fb4e84289339f143e4c5b-360-240.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;360&quot; height=&quot;240&quot; src=&quot;https://image.gcores.com/00c327f2efd9465dcc21d35b7bd028a0-360-240.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt; 转身起步也有对应到左右脚的区分 。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;360&quot; height=&quot;240&quot; src=&quot;https://image.gcores.com/321dee42a5ee1abe68c072a634668f8e-360-240.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;          &lt;figure&gt;&lt;img width=&quot;360&quot; height=&quot;240&quot; src=&quot;https://image.gcores.com/258b0129430f0fd1b78928facfd45023-360-240.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;若无针对角色当前姿势进行匹配，则可以不设置骨骼位置等相关的PSC（或将相关的PSC权重降低），只要当前情况符合转身起步的PSD的筛选条件，即可找到合适的转身起步动画进行衔接。 &lt;/p&gt;&lt;p&gt;对需要转弯的情况，项目采用延长转向转弯时间，逐渐插值到目标方向的方案。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;360&quot; height=&quot;240&quot; src=&quot;https://image.gcores.com/3ea556f87d5601f0e2e5ac512a8296f9-360-240.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;个人项目中采用类似的方法在AI角色前进时实时调整方向，但目前只应用在转弯角度较小的情况上，对于转弯角度较大的情况个人更倾向使用播放转向蒙太奇并使用MotionWarping设置骨骼体旋转的方案。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;360&quot; height=&quot;240&quot; src=&quot;https://image.gcores.com/928fa5aa5aad5de3bf7fe607e6476837-360-240.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;NPC在正常运动过程中，很少会出现滑步的情况。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;360&quot; height=&quot;240&quot; src=&quot;https://image.gcores.com/997442831df822a531fe1c23d2628e5e-360-240.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt;&lt;p&gt;到此就是个人对《无限暖暖》运动系统的解析。再次声明：本文是基于&lt;span style=&quot;font-weight: bold&quot;&gt;假设《无限暖暖》使用MM系统&lt;/span&gt;的前提下进行讲解，且文章内容全部基于个人理解，若有错误敬请见谅。先不讲技术实现，跟后期调整的工作量，单是区分左右脚的动作资产就可以看出制作组在运动系统下了很多心思，就为了制作这些几乎不被察觉的细节，叠纸你是这个👍，Respect！&lt;/p&gt; </description><link>https://www.gcores.com/articles/191992</link><guid isPermaLink="false">gcores-191992</guid><pubDate>Wed, 11 Dec 2024 05:30:00 GMT</pubDate><author>提子味芬达</author><enclosure url="https://image.gcores.com/e1ff925c05365aa83fe1bbc035ea3d7d-1200-350.jpg" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/e1ff925c05365aa83fe1bbc035ea3d7d-1200-350.jpg"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/8e87b332-7a83-4f32-b018-26a80620994a.mp3" length="426" type="audio/mp3"></enclosure><itunes:duration>0:07:06</itunes:duration><category>知识挖掘机</category></item><item><title>《CATO》使用的 20 款 Unity 插件</title><description>&lt;figure&gt;&lt;img alt=&quot;《CATO》使用的 20 款 Unity 插件&quot; src=&quot;https://image.gcores.com/66263b682a353e094addebe9fe9dc748-1750-1064.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/33c4d9b8-3945-478d-b36e-ea2ae91152fa.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/33c4d9b8-3945-478d-b36e-ea2ae91152fa.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/33c4d9b8-3945-478d-b36e-ea2ae91152fa.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;善用插件，效率倍增&lt;/blockquote&gt;   &lt;p&gt;自己开发工具很容易自嗨，经常忘记做工具是为了开发游戏，我在开发 CATO 关卡编辑器时候，难以克制自己不增加需求、优化性能。如果不是为了磨练技术或者需求特殊，我还是尽量使用插件，把精力放在游戏内容开发上，避免感动自己。 &lt;/p&gt;&lt;p&gt;这次分享的是 CATO 这个项目用上的 20 款 Unity 插件。我使用 Unity 2021.3 版本，所有插件都在两年开发周期内在 PC、Mac、iOS、Android、NS、PS5 上得到验证。&lt;/p&gt;&lt;h1&gt;LeanTween&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://assetstore.unity.com/packages/tools/animation/leantween-3595&quot; target=&quot;_blank&quot;&gt;Asset Store 链接&lt;/a&gt;&lt;/p&gt;&lt;p&gt;tween 是一种区别于时间轴动画的工具，可以在代码层面控制物体的位移旋转动画。CATO 的旋转、合体、钻管道，包括 UI 等等小动画都是靠 tween 实现的。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;844&quot; height=&quot;593&quot; src=&quot;https://image.gcores.com/31d8fe377a6f40595cfa96c5c6db5709-844-593.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;理论上用啥 tween 插件都一样，我用自己魔改的 LeanTween，但 DoTween 更新勤快，下个项目可能会换过去。关于 CATO 的程序生成动画可能会另开一篇讲。&lt;/p&gt;&lt;p&gt;下面的代码分别是永动机旋转的代码与合体后的压缩形变动画代码，用 tween 的方式写起来偏描述性，调教参数看效果也方便。比如压缩形变动画（squash and stretch）的要点是体积恒定，这种就能靠方程直接计算出来，比手 key 稳定方便。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1144&quot; height=&quot;744&quot; src=&quot;https://image.gcores.com/930610a94473ea1b5f54f9bf0504a006-1144-744.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h1&gt;UniTask&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Cysharp/UniTask&quot; target=&quot;_blank&quot;&gt;Github 链接&lt;/a&gt;&lt;/p&gt;&lt;p&gt;延时或延帧是常见的需求，但 Unity 默认的 async 或者 coroutine 写起来很啰嗦，而用 UniTask 就有很优雅的封装，建议直接看主页丰富的例子。我常在一连串演出的 tween 用上 UniTask。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1392&quot; height=&quot;1026&quot; src=&quot;https://image.gcores.com/94ca3b9fd56912f64d582f7d8d274862-1392-1026.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h1&gt;Tail Animator&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://assetstore.unity.com/packages/tools/animation/tail-animator-121819&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-weight: bold; text-decoration: underline&quot;&gt;Asset Store 链接&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;这款尾巴插件设置起来方便，能调教的参数也很多。例如猫咪在静止时候尾巴会瞎摆，如果靠动画控制除了曲线编辑费劲，还容易有循环感；而用这个插件的话就能很容易调出无序的摆尾感。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;418&quot; height=&quot;205&quot; src=&quot;https://image.gcores.com/a373ef8cfeb499fcc6c6e1f6db2fe1a6-418-205.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;当 CATO 跑动时候，尾巴会跟随位置角度摆动，就像 Celeste 的角色头发动画，这种程序生成动画会让角色移动更加丝滑生动。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;412&quot; height=&quot;323&quot; src=&quot;https://image.gcores.com/ca4910027e5e30519664c6338544dee8-412-323.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h1&gt;Rewired&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://assetstore.unity.com/packages/tools/utilities/rewired-21676&quot; target=&quot;_blank&quot;&gt;Asset Store 链接&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Rewired 是一款输入方案插件，直接与手柄硬件底层通信，不是简单的 Unity Input 封装，支持大量的手柄和平台，会帮玩家解决手柄断联等等繁琐的问题。&lt;/p&gt;&lt;p&gt;Rewired 上手有门槛，没那么直觉，但经过配置是可以实现复杂需求的，比如菜单和游戏内可以区分两套不同的输入方案，比如代码上可以直接读取短按长按的状态等等。它也封装了触屏相关的输入，触屏按钮在 Rewired 概念里也是一种手柄，所以移植手机端在代码层面几乎不需要适配。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1920&quot; height=&quot;1080&quot; src=&quot;https://image.gcores.com/f22046c034e355303efaccbe34aeaa75-1920-1080.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在开发过程中，我需要一个入口来绑定关卡编辑器的操作快捷键，Rewired 自带的 Control mapper 完全符合需求，交互与界面繁杂了一些，但好在功能全面，直接把 prefab 实例化就能使用。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1920&quot; height=&quot;1080&quot; src=&quot;https://image.gcores.com/187cdb54dfd30fa1789f4d4be914f13a-1920-1080.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;我见过几个游戏是直接集成 Control mapper 的，当然了 UI 样式会匹配游戏。但如果像我们一样需求更加刁钻，也可以用 Rewired 封装的 InputMapper 实现自己的按键绑定逻辑。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;2560&quot; height=&quot;1440&quot; src=&quot;https://image.gcores.com/b899afbfcace030a51c99e860799fbbf-2560-1440.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;此外推荐一下 &lt;a href=&quot;https://kenney.nl/assets/input-prompts&quot; target=&quot;_blank&quot;&gt;Kenny 的免费按键图示库&lt;/a&gt;，样式全面包含键盘与御三家手柄，甚至有 Steam Deck 版本。Rewired 的最新版本可以配合这套素材，直接显示 UI 按键图示。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;918&quot; height=&quot;515&quot; src=&quot;https://image.gcores.com/dafe79d78245cfb9e7e1318d62ceedbf-918-515.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h1&gt;Nice Vibration&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://assetstore.unity.com/packages/tools/particles-effects/feel-183370?aid=1011lKhG&quot; target=&quot;_blank&quot;&gt;Asset Store 链接&lt;/a&gt;&lt;/p&gt;&lt;p&gt;手柄震动适配方面，我使用的是 Nice Vibration 这款插件，但现在 Nice Vibration 被收购了已经不单卖了，我建议直接购买 Feel 这款插件，它包里自带最新版本的 Nice Vibration。Feel 与本篇文章 Corgi Engine 是同一个作者。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1950&quot; height=&quot;1300&quot; src=&quot;https://image.gcores.com/8db1ff037fb24e9bf30aa62543585041-1950-1300.jpeg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;CATO 在出入管道口、爬墙、飞天等等都有对应的震动手感，无论是手柄震动还是 iOS 上的 Haptic Engine，都可以做到一处编写处处调用，十分方便。但目前 Nice Vibration 对多手柄震动的支持不是很友好，在使用前需要试试它的能力范围。&lt;/p&gt;&lt;h1&gt;Dreamteck Spline&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://assetstore.unity.com/packages/tools/utilities/dreamteck-splines-61926&quot; target=&quot;_blank&quot;&gt;Asset Store 链接&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Dreamteck Spline 是一款曲线编辑插件，游戏中的管道、线缆就是配合插件制作的。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;500&quot; height=&quot;321&quot; src=&quot;https://image.gcores.com/5910032b6dc358710138e6e770d5ef65-500-321.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;实际上，游戏中的管道猫/液体猫也是这个插件实现的，其实就是截取曲线片段，实时生成 mesh。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;604&quot; height=&quot;431&quot; src=&quot;https://image.gcores.com/9cd0840aa563b63b24deb2c6c25842f1-604-431.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;游戏中的过山车赛道也是这个插件制作的，只需要拖放节点，曲线就会自动拟合，操作很直觉。赛道上的障碍物摆放也可以通过插件的位置映射功能实现。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;900&quot; height=&quot;644&quot; src=&quot;https://image.gcores.com/c201bd2b995b7f3af5b40d099231185b-900-644.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h1&gt;Shape&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://assetstore.unity.com/packages/tools/particles-effects/shapes-173167&quot; target=&quot;_blank&quot;&gt;Asset Store 链接&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Shape 这款插件可以在 Unity 场景绘制向量图形，十分强大。接口直觉，文档也全面，你永远可以相信 Freya 做出来的工具易用性。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1950&quot; height=&quot;1300&quot; src=&quot;https://image.gcores.com/6af4092c056b1eb86cdd0a105658c43c-1950-1300.jpeg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;我会用它来做一些小动画，像下图 CATO 合体后头顶的小动画就是用 Shape 做的，我起名为 blip，因为是程序控制的动画，节奏把控很方便，从其他项目一直保留到现在。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;782&quot; height=&quot;422&quot; src=&quot;https://image.gcores.com/3fff11bfb482354e984a5b86991124eb-782-422.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;Shape 可以实现描绘外边、虚线等等需求，颜色支持 HDR，比如下图的黄色高亮镜头框就是配合 bloom 实现的效果。绿色选中框使用 Immediate-mode 绘制出动态模糊效果。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;481&quot; height=&quot;269&quot; src=&quot;https://image.gcores.com/5ce2f5e69c70dc5ca4bfe0503fcb61a8-481-269.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;Immediate-mode 用起来像是 Unity 多了一个 Draw() 回调，可以控制每一帧的渲染内容，用起来有些古典。例如下图的吐司预览曲线也是采样数学结果，用 Shape 实时绘制出来的。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;587&quot; height=&quot;317&quot; src=&quot;https://image.gcores.com/ac544633ccaaf8d7e5864d919fc63069-587-317.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;Shape 不便宜，但它是一款孤品，这种高级工具只能靠付费支持才能存在，Unity 的插件生态也是我难以离开到 Godot 的原因之一。&lt;/p&gt;&lt;h1&gt;Trajectory&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/starikcetin/Eflatun.Trajectory?tab=readme-ov-file&quot; target=&quot;_blank&quot;&gt;Github 链接&lt;/a&gt;&lt;/p&gt;&lt;p&gt;物理学中抛物线采样的插件，我用这个插件来计算吐司的抛物线，效果如上图。和我一样数学菜又懒得学的朋友可以试试看。&lt;/p&gt;&lt;h1&gt;Corgi Engine&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://assetstore.unity.com/packages/templates/systems/corgi-engine-2d-2-5d-platformer-26617&quot; target=&quot;_blank&quot;&gt;Asset Store 链接&lt;/a&gt;&lt;/p&gt;&lt;p&gt;大名鼎鼎 Corgi Engine，2D 平台跳跃框架，功能丰富，自带的 demo 也很多。因为过于强大，想要拓展功能的话需要些时间阅读代码，搞明白框架的工作方式。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1950&quot; height=&quot;1300&quot; src=&quot;https://image.gcores.com/8688a28d567f3f0a7ffa94aeebb8bdab-1950-1300.jpeg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;Corgi Engine 的角色控制器拓展能力很强，像 CATO 的跳跃、加速、起飞、爬墙甚至死亡，都各是一种能力，每种能力独立一个 GameObject 挂在角色子节点下，管理方便。角色的状态机也好用，实现帧级别的控制没问题。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;914&quot; height=&quot;774&quot; src=&quot;https://image.gcores.com/7ba32282f172d12f8cc03844cb5538ae-914-774.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;CATO 发售后我给插件作者发了邮件，他说没想到 CATO 也是使用 Corgi Engine 做出来的。另外推荐一下这位作者在 Youtube 上关于快熟原型的演讲，我定期拿出来复习，受益匪浅。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;2190&quot; height=&quot;612&quot; src=&quot;https://image.gcores.com/3328e99a3c94eed040d881fadcf2e4cb-2190-612.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h1&gt;Easy Performant Outline&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://assetstore.unity.com/packages/vfx/shaders/fullscreen-camera-effects/easy-performant-outline-2d-3d-urp-hdrp-and-built-in-renderer-157187&quot; target=&quot;_blank&quot;&gt;Asset Store 链接&lt;/a&gt;&lt;/p&gt;&lt;p&gt;CATO 的画面像素化稳定有两个原因，一个是镜头固定，所以采样内容不会有太大变化；另外一个是 EPO 这个描边插件，它可以稳定输出 1 pixel 宽的描边，我们游戏里使用双描边来突出角色位置。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;309&quot; height=&quot;197&quot; src=&quot;https://image.gcores.com/1d544e5002f2836cd860feb0dd322cbc-309-197.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;EPO 只是一个普通描边插件，但为什么能在我们游戏里渲染出稳定的 1 pixel 描边不虚化，至今我都没搞明白。我试过像素化的采样高度和 EPO 的采样高度即使对上了，有时也会虚化翻车。所以我用了一个极度草台班子的方法：穷举游戏的像素化分辨率高度，并把 EPO 调至描边正常的参数，再把这些参数硬编码进代码里，怎么说呢，到现在全平台都没翻车过😂。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1188&quot; height=&quot;326&quot; src=&quot;https://image.gcores.com/46f670140a96996d69ac5cc486a7d4f4-1188-326.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h1&gt;EPO 插曲&lt;/h1&gt;&lt;p&gt;2024 年初我在移植主机时候，发现 EPO 这款插件在 PS5 上不起作用。尝试在官方 Discord 寻求帮助，发现多人都遇到此问题，但插件作者联系不上了，因为他在乌克兰。&lt;/p&gt;&lt;p&gt;搁置了快两个月，我试图使用 ChatGPT 分析错误，没想到真的成功定位并修改了 BUG。找到这个解决方案相当开心，半夜跑到的 Discord bug 频道报告，恰巧有个法国团队两天后就要打 PS5 首日补丁，因为这个问题解决了，对方激动到想请我喝啤酒！他们的游戏叫《泰拉往事》。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1222&quot; height=&quot;756&quot; src=&quot;https://image.gcores.com/2baf0db5d4e8703151f13499175d20ef-1222-756.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;喜报，2024 年 11月，作者已经定居英国开始新生活，插件的更新也频繁起来了。一个小技巧，如果一个插件上架好几年，最近还在维护更新，那这个插件基本就值得购买。&lt;/p&gt;&lt;h1&gt;Easy Save 3&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://assetstore.unity.com/packages/tools/utilities/easy-save-the-complete-save-game-data-serializer-system-768&quot; target=&quot;_blank&quot;&gt;Asset Store 链接&lt;/a&gt;&lt;/p&gt;&lt;p&gt;把游戏存档保存为文件的插件，封装了常用的存档加密、备份等功能，接口直觉，文档易读。据我所知《小飞船大冒险》、《迷你空管》都在用。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1838&quot; height=&quot;430&quot; src=&quot;https://image.gcores.com/0e3a4ac30c609296b879d14222cb3404-1838-430.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;ES3 可以直接序列化 class 保存为 json，CATO 的关卡编辑器文件都是直接用 ES3 序列化的，保存后可读性强，用 git 管理起来也方便。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;2524&quot; height=&quot;1748&quot; src=&quot;https://image.gcores.com/072d1469215bdd05ffcf0a68e359012b-2524-1748.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;ES3 读写灵活度很高，比如在 NS、PS5 主机上是无法直觉操控文件读写的，我就用 ES3 的 cache 模式输出为 raw bytes，再读写到主机的文件系统，绕了点弯但移植主机也没问题就是了。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1414&quot; height=&quot;694&quot; src=&quot;https://image.gcores.com/55d4270167789a869222acfbc3724463-1414-694.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h1&gt;Hierachy 2&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://assetstore.unity.com/packages/tools/utilities/hierarchy-4-242660&quot; target=&quot;_blank&quot;&gt;Asset Store 链接&lt;/a&gt;&lt;/p&gt;&lt;p&gt;应该不少朋友也会在 Hierachy 插入空物体命名分割符，而这款插件让分割符更加清晰，一点简单的视觉提升。我用的这款插件已经开始收费了，理论上替代品还是不少，随便搜搜看需求下载免费的就行。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;518&quot; height=&quot;378&quot; src=&quot;https://image.gcores.com/27480c088f81216bedf762847ca637a5-518-378.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h1&gt;InGame Debug Console&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://assetstore.unity.com/packages/tools/gui/in-game-debug-console-68068&quot; target=&quot;_blank&quot;&gt;Asset Store 链接&lt;/a&gt;&lt;/p&gt;&lt;p&gt;打包后也能在游戏内看日志的插件。集成起来超简单，把插件的 prefab 扔到启动场景就能常驻，使用时靠快捷键唤醒。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1920&quot; height=&quot;1080&quot; src=&quot;https://image.gcores.com/4d58493ff3008a56eb3eae8869cf6531-1920-1080.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;但我觉得这个插件最强的是作弊命令功能，只需在代码内给回调方法注释 ConsoleMethod 作弊属性，就能直接终端调用，支持参数。测试游戏时候很常用，比如解锁所有关卡、设置帧率等等。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;942&quot; height=&quot;478&quot; src=&quot;https://image.gcores.com/a10139d5e35efb4d63a0e2d615da6425-942-478.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h1&gt;Graphy&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://assetstore.unity.com/packages/tools/gui/graphy-ultimate-fps-counter-stats-monitor-debugger-105778&quot; target=&quot;_blank&quot;&gt;Asset Store 链接&lt;/a&gt;&lt;/p&gt;&lt;p&gt;性能监测工具，全平台无痛集成，可以配合 InGame Debug Console 的作弊功能来启用。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;3024&quot; height=&quot;1890&quot; src=&quot;https://image.gcores.com/93f039b407ae7c17bba4eb6e5f685403-3024-1890.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h1&gt;I2&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://assetstore.unity.com/packages/tools/localization/i2-localization-14884&quot; target=&quot;_blank&quot;&gt;Asset Store 链接&lt;/a&gt;&lt;/p&gt;&lt;p&gt;I2 自称是目前 Unity 最完善的本地化系统，支持文本以外内容的本地化（虽然我没用上）。&lt;/p&gt;&lt;p&gt;I2 在 Unity 编辑器下比较难用，不建议使用，正确使用方式还是要靠 excel 表格导入。但我用的是 Google Sheet 模式，配置后就能一键同步，甚至可以在运行时直接同步，迭代效率极高，有在考虑下回作为数值源文件使用。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1284&quot; height=&quot;394&quot; src=&quot;https://image.gcores.com/3db56bfd5fbe50875639772a0cd6ea2e-1284-394.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;使用 Google Sheet 的好处就是协作管理方便，我使用了一个主表格来同步若干个子表格，各个表格又与相应本地化人员共享编辑权限，打版本前只需同步主表格即可。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;2754&quot; height=&quot;1726&quot; src=&quot;https://image.gcores.com/ced7492c9a6cc2df232a479d44e6547f-2754-1726.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h1&gt;Build Manager + Version&lt;/h1&gt;&lt;p&gt;CATO 的打包流程魔改于这两款插件，Version 这款插件可以一键增加版本号，避免繁琐的编辑和人类错误。而 Build Manager 则能方便管理多个平台的打包配置，例如路径、Scripting Desfines 等等，我只需按下一个按钮就能自动打包 Win、Mac、Linux 三个平台。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;924&quot; height=&quot;776&quot; src=&quot;https://image.gcores.com/1055bc84d67949b3704f4897e46b48c7-924-776.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这两个插件的名字过于普通，所以需要通过原链接查看，难以搜索，我都是在 OpenUPM 找到的。&lt;/p&gt;&lt;p&gt;Github 链接：&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Team-on/UnityBuildManager&quot; target=&quot;_blank&quot;&gt;https://github.com/Team-on/UnityBuildManager&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/LotteMakesStuff/LMS.Version&quot; target=&quot;_blank&quot;&gt;https://github.com/LotteMakesStuff/LMS.Version&lt;/a&gt;&lt;/p&gt;&lt;h1&gt;Smart Library&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://assetstore.unity.com/packages/tools/utilities/smart-library-asset-manager-200724&quot; target=&quot;_blank&quot;&gt;Asset Store 链接&lt;/a&gt;&lt;/p&gt;&lt;p&gt;一款类似 Blender 资源管理的插件，可以把当前工作常用资源组织起来。例如我在编辑一个吐司皮肤，就把相关的模型、材质、prefab、配置等等内容放到一个组下快速访问。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;806&quot; height=&quot;382&quot; src=&quot;https://image.gcores.com/466c98e3b2d790ae72a28927a31d16ef-806-382.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h1&gt;UEvent&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ls9512/UEvent&quot; target=&quot;_blank&quot;&gt;Github 链接&lt;/a&gt;&lt;/p&gt;&lt;p&gt;在我的编写习惯中，极度依赖事件来解耦代码，用来用去最顺手的就是 UEvent 这款插件。简单来说，派发事件无需指定对象，且可传递任意参数。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1000&quot; height=&quot;292&quot; src=&quot;https://image.gcores.com/244d3609f77ef42b9c8f1dc6e66d448b-1000-292.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;想要监听事件，只需给回调方法加上 Listen + 事件名，写起来很简洁。这种事件监听模式的好处之一，就是删除图中任意事件代码都不影响程序运行，因为不存在引用依赖。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;892&quot; height=&quot;232&quot; src=&quot;https://image.gcores.com/2f67618999a81842bd154fe4dcd0765e-892-232.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h1&gt;Odin Inspector&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://assetstore.unity.com/packages/tools/utilities/odin-inspector-and-serializer-89041&quot; target=&quot;_blank&quot;&gt;Asset Store 链接&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Odin Inspector 是一款功能强大的编辑器增强插件，它的使用案例建议到官网查看才够全面，这里我简单举例 CATO 的使用场景。&lt;/p&gt;&lt;p&gt;OnValueChanged 可以监测数值变动进行回调，在 Editor 模式直接调参查看编辑效果。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;990&quot; height=&quot;700&quot; src=&quot;https://image.gcores.com/e092bc0e98b2a0991d0f0dd21555cc53-990-700.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;Inspector 的变量多起来阅读不方便，可以用 [Title] 属性注释给变量分组。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;930&quot; height=&quot;758&quot; src=&quot;https://image.gcores.com/505360b7725fbc9dbb1852267c6ce2d5-930-758.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;给方法加上 [Button] 属性注释就能直接在 Inspector 变成按钮。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;934&quot; height=&quot;602&quot; src=&quot;https://image.gcores.com/f361f2d976c17e0783bb9f5e9426a84f-934-602.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;给 reference 的 ScriptableObject 加上 [InlineEditor] 属性注释就能直接在 Inspector 内编辑，无需繁复跳转。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;938&quot; height=&quot;848&quot; src=&quot;https://image.gcores.com/c15904e8707c912dabe71aa58f54e1fb-938-848.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;数值类 ScriptableObject 很适合用 [TableList] 属性注释来格式化内容，阅读与编辑方便不少。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1490&quot; height=&quot;542&quot; src=&quot;https://image.gcores.com/275dda3f686a7d618e73b16054b3d71e-1490-542.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h1&gt;Toolbar Extender&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/marijnz/unity-toolbar-extender&quot; target=&quot;_blank&quot;&gt;Github 链接&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Toolbar Extender 是直接覆盖 Unity 编辑器工具栏的一款插件，可以方便植入操作按钮。我加了一个帧率按钮，一键切换低中高帧率，在 debug 动作和物理游戏的帧敏感 bug 特别实用。此外也可以用来跳转常见场景，比如图中的 LD 按钮就是快速跳转关卡编辑器的按钮。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1750&quot; height=&quot;118&quot; src=&quot;https://image.gcores.com/bb1f1fb13f5eda2b273e548433446b71-1750-118.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;用过 Scriptable Object 的朋友都知道，它内容的变动经常不自动保存，所以每次都需要疯狂 ctrl+s 或者去菜单操作才安心些，于是我给编辑器加入一个顺手的保存按钮，就是上图的 S 按钮。&lt;/p&gt;&lt;h1&gt;结语&lt;/h1&gt;&lt;p&gt;这篇文章主要传播使用插件的可能性，并不代表每个工具都对你的项目好使。我觉得挑插件最重要的是知道自己需求，多试试插件的 demo。如果不是亲自试用过，和别人交流就会泛泛而谈：有人说这个插件有坑，有人说很牛逼，有人说性能不好。希望各位保持开放灵活的开发态度，不被工具束缚住。&lt;/p&gt; </description><link>https://www.gcores.com/articles/191584</link><guid isPermaLink="false">gcores-191584</guid><pubDate>Tue, 10 Dec 2024 04:00:00 GMT</pubDate><author>BlasinRee</author><enclosure url="https://image.gcores.com/66263b682a353e094addebe9fe9dc748-1750-1064.png" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/66263b682a353e094addebe9fe9dc748-1750-1064.png"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/33c4d9b8-3945-478d-b36e-ea2ae91152fa.mp3" length="988" type="audio/mp3"></enclosure><itunes:duration>0:16:28</itunes:duration><category>创作笔记</category></item><item><title>SIGGRAPH 粗读丨看看《使命的召唤》中的大地形渲染（上）</title><description>&lt;figure&gt;&lt;img alt=&quot;SIGGRAPH 粗读丨看看《使命的召唤》中的大地形渲染（上）&quot; src=&quot;https://image.gcores.com/e94c6f7a68a976717db74545b50872cc-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/ac89aca1-3af7-4887-909e-242328cdd631.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/ac89aca1-3af7-4887-909e-242328cdd631.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/ac89aca1-3af7-4887-909e-242328cdd631.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;看看地形渲染的一万个细节&lt;/blockquote&gt;   &lt;h1&gt;前言&lt;/h1&gt;&lt;p&gt;这次读的是2023年SIG中，来自High Moon Studios的CTO——&lt;span style=&quot;font-weight: bold&quot;&gt;Stephan Etienne&lt;/span&gt;的一篇分享。（这个工作室是动视旗下的一间工作室） &lt;/p&gt;&lt;p&gt;虽然我没玩过《使命的召唤》系列，但是在我的印象里这个系列无论好玩与否，基本是画面和运行性能都很顶格的游戏。而大地形系统，作为一个战场中“打底”的模块，要做到近处精细，远处自动LOD，同时兼顾剔除与分块；所以虽然其实每个3D引擎几乎都有自己的地形系统，但细看下来又有一些细节上的取舍和不同。&lt;/p&gt;&lt;p&gt;本文还是以翻译原文PPT页及解说稿为主，打星号的部分则是我个人的补充。虽然页数不算多，但是由于每页文字量比较大，篇幅原因还是会拆成上下两篇。   &lt;/p&gt;&lt;h1&gt;正文&lt;/h1&gt;&lt;p&gt;*这次的正文比较整体，或者说分节比较碎，基本一两篇就是一个小课题。当然，内容量还是比较足的。而且这篇分享配图相对比较清晰，讨论的课题从图上把握的话其实比较明白了。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;大地形如何工作&quot; width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/bb1ddfe69b337771d70c5b2994da4e84-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;超大地形是一组地形表面的集合。&lt;/p&gt;&lt;p&gt;在这个截图中，每个紫色的矩形是一个地形表面。每个红色的区块是一个兴趣点，有着各自单独的地形表面。&lt;/p&gt;&lt;p&gt;有这么多地形表面的其中一个原因是——我们在同一个地图上有很多并行的开发制作；另一个原因是我们想有丰富的细节。&lt;/p&gt;&lt;p&gt;地形表面有着一些限制——它们不能被缩放或旋转；它们也需要是方形（拼合）的，这能使代码变得简单高效。&lt;/p&gt;&lt;p&gt;地形中标红的部分呈现出并非方形，并且经过了旋转的状态，这是通过cut out体积来实现的——后续会介绍到。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;几何体&quot; width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/7c045b175abd2dfec51f2201a92da4d1-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;地形技术对于&lt;span style=&quot;font-weight: bold&quot;&gt;四叉树&lt;/span&gt;有着深度的使用。&lt;/p&gt;&lt;p&gt;每个地形表面有一颗四叉树，在每个节点上，我们存储了渲染必须的&lt;span style=&quot;font-weight: bold&quot;&gt;顶点&lt;/span&gt;和&lt;span style=&quot;font-weight: bold&quot;&gt;索引&lt;/span&gt;缓冲；不需要被选择的节点则不用加载顶点和索引数据。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;网格简化&quot; width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/fa3d7b10417f790859c63f6440cc7368-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;一个地形表面包含一个&lt;span style=&quot;font-weight: bold&quot;&gt;高度图&lt;/span&gt;（height map）和一个&lt;span style=&quot;font-weight: bold&quot;&gt;四叉树&lt;/span&gt;（quad tree）。四叉树的每一个节点，是一个地形&lt;span style=&quot;font-weight: bold&quot;&gt;补丁&lt;/span&gt;（patch）。&lt;/p&gt;&lt;p&gt;在最低级别，地形补丁使用程序生成的顶点，并且所有顶点被放置在一个传统栅格（grid）中；在分支（branches）处，我们进行网格简化。网格简化器在每个顶点输出2个float值，分别是X和Y，而Z通过采样高度图被重构。&lt;/p&gt;&lt;p&gt;这使我们得以用少量的顶点来维持显著的细节。我们得到了视觉质量以及性能，因为GPU更倾向处理大三角形而不是小三角形（*这里和之前一篇可见性缓冲又联动了）。&lt;/p&gt;&lt;p&gt;地形补丁也会引用它们的低精度网格。在摄像机远离网格时，顶点会向低精度的一侧部分做插值（合并）。&lt;/p&gt;&lt;p&gt;当相机离网格足够远（sufficiently）时，所有顶点最终都折叠到最低精度的网格——我们就将其（整体）切换到低精度网格。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;cut out贴图&quot; width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/4d090e7c33ee3a13b5d80f03baeca469-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;当制作地形时，艺术家们通常使用cutout体积来标记不希望生成地形的区域。&lt;/p&gt;&lt;p&gt;这有时是因为低分辨率远景的地形中需要让出（性能）空间给其它位置，在可游玩的区域提供更紧密的地形网格；这也用于在地形上挖洞，以开辟山洞或是放置建筑。&lt;/p&gt;&lt;p&gt;cutout体积在每个地形上会烘焙到一个纹理上，它在内存方面非常高效，每个顶点只需要1bit。一个字节（byte）中编码了8个顶点——2行各4个顶点。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;材质层级&quot; width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/e0d06289a690dfc3e2f8370078f01357-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;一个地形表面由一组材质构成，我们称为地形层级。传统的地形层级可能是草地、沙地、泥土等。&lt;/p&gt;&lt;p&gt;在我们原始的地形技术实现中，每个地形层有一个单独的alpha遮罩。&lt;/p&gt;&lt;p&gt;我们只支持32层地形层，但所有的alpha遮罩仍然需要大量的内存。（*memory，英文不区分，但其实基本是说显存）&lt;/p&gt;&lt;p&gt;同时shader的开销也是不可控的，多数像素可能只使用了1层，但也没有办法阻止一个像素使用全部32层来渲染。除此之外，32作为限制也是一个过低的值，我们希望提高它。&lt;/p&gt;&lt;p&gt;*这里主要是说想把分层做得动态一些，在旧的结构里32层即使没有用到也有很多需要计算的部分。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;逐顶点材质(OMPV)&quot; width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/ead621339b4eb9d8ab66422e77156539-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在Black Ops Cold War（黑色行动冷战）中，Treyarch将地形层遮罩技术替换成了一项新技术——&lt;span style=&quot;font-weight: bold&quot;&gt;逐顶点材质&lt;/span&gt;，简称&lt;span style=&quot;font-weight: bold&quot;&gt;OMPV&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;OMPV使用一个索引映射图，我们在图中展示为红色——它为每个像素存储一个字节数据；以及一个颜色映射图，展示在索引映射图的左侧，为每个像素存储RGB值。&lt;/p&gt;&lt;p&gt;通过OMPV，层遮罩就不再需要了，而由于颜色是采用BC1格式压缩的，这能显著的节省内存。&lt;/p&gt;&lt;p&gt;对于每个像素，索引映射图记录了最重要的的层，而颜色映射图为该层提供了染色（tint）的数据。&lt;/p&gt;&lt;p&gt;*注意这里是映射（map）数据的贴图，不是材质贴图。后面会混合具体的材质纹理。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;OMPV分析&quot; width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/183357ddb2fc188c5cc3ed14c86dbaa6-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;通过OMPV，假设要为T纹素着色，shader代码中会收集周围4个顶点的&lt;span style=&quot;font-weight: bold&quot;&gt;索引&lt;/span&gt;和&lt;span style=&quot;font-weight: bold&quot;&gt;颜色&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;我们用每个顶点中定义的贡献度（contribution）计算alpha值。而纹素越靠近一个顶点，则该顶点对应的alpha值就越大。&lt;/p&gt;&lt;p&gt;每个顶点的索引指向一个地形层。由于每个顶点可能会引用同一层，我们可以通过累加alpha值来加速重复层的处理过程。&lt;/p&gt;&lt;p&gt;例如，假设所有4个顶点恰好引用了同一层——而这也是很常见的情况，这样相比于采样同一材质4次，我们将只采样一次就够了。&lt;/p&gt;&lt;p&gt;基于JT在他的GDC演讲中介绍的“定义不清”（ill defined）的问题，我们将alpha值乘2，之后再收缩到0至1的范围内。（*精度问题）&lt;/p&gt;&lt;p&gt;之后我们通过艺术家制作的&lt;span style=&quot;font-weight: bold&quot;&gt;显示纹理&lt;/span&gt;（reveal map）来混合所有层，这样他们也可以对混合的过程有控制力。&lt;/p&gt;&lt;p&gt;并不是所有层都被同样处理。所有层会基于索引排序，有着最低索引的层作为基础层不会被合并——它始终有着1的alpha值。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;扭曲&quot; width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/906a83b80da8c4a39675ad10fb3c945b-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;与节省性能相对的，OMPV也有其自身的问题。（*原文是has its fair share of，公平份额的issue）&lt;/p&gt;&lt;p&gt;第一个问题是，通过之前介绍的方法，绘制的结果看起来是“像素化”（pixelated）的。从右侧上方的图中可以明显看出。&lt;/p&gt;&lt;p&gt;为解决这一问题，我们通过一个全局256X256的&lt;span style=&quot;font-weight: bold&quot;&gt;扭曲贴图&lt;/span&gt;来扭曲UV——如图所示。&lt;/p&gt;&lt;p&gt;艺术家可以逐层控制扭曲的&lt;span style=&quot;font-weight: bold&quot;&gt;幅度&lt;/span&gt;和&lt;span style=&quot;font-weight: bold&quot;&gt;频率&lt;/span&gt;。这是一个映射层面的概念，因为UV在索引和颜色映射被采样前就被扭曲了。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;Tile隐藏&quot; width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/73bce4e8398334349fd116ebd72e23f3-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;不管是否用OMPV，当一个地形层被用于地图上大画幅（原文是swath ，直译是刈幅）的部分时，平铺视觉故障就变得显眼了。解决这一问题需要用到我们称为&lt;span style=&quot;font-weight: bold&quot;&gt;tile隐藏&lt;/span&gt;的技术。&lt;/p&gt;&lt;p&gt;在每一个顶点，我们基于世界空间位置为顶点计算了一个&lt;span style=&quot;font-weight: bold&quot;&gt;随机旋转&lt;/span&gt;。这个旋转是0-15之间的一个整形值，从角度转化成弧度。&lt;/p&gt;&lt;p&gt;这种方式能有效掩盖平铺视觉故障，但由于添加的随机旋转，我们不能混合重复的地形层了——除非它们有着相同的旋转值。&lt;/p&gt;&lt;p&gt;在上方的图中，由于大部分顶点都会引用草地材质，通常着色一个像素只需要采样草地材质一次。&lt;/p&gt;&lt;p&gt;在执行了隐藏步骤后，由于4个顶点可能有不同旋转值，着色一个像素可能需要采样4次，每次使用不同的UV。不过为了这种视觉提升付出的开销是值得的。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;远景连续UV&quot; width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/d05cfdf21f12c7db258ae660286f5925-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;另一个问题是当同一个纹理被用于地图上大画幅时，最终所有最高的mip中的细节塌陷成了一个单色。这个问题的解决方法被称为远景连续UV（Vista Uvs）。&lt;/p&gt;&lt;p&gt;使用Vista Uv，我们计算了第二套UV的集合，和原始的UV类似——除了缩小UV以放大被采样的纹理。我们重新采样了漫反射系数（albedo）和法线（normal）以计算这些&lt;span style=&quot;font-weight: bold&quot;&gt;宏观的贡献度&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;我们在常规贡献度和宏观贡献度之间插值，基于摄像机距离来计算最终的贡献度。&lt;/p&gt;&lt;p&gt;在某些类型的素材上——例如岩石，Vista Uv能在远景出产生很好的细节表现。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;OMPV的问题&quot; width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/1427fbd3aa1802579bf9a0296f749010-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;OMPV的另一个问题是材质之间过渡的边界太明显。这里（图中）我们展示了从泥土到沙子的过渡发生了什么。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;围绕地形的内容工作&quot; width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/4f00fa0183125d8227b3f2541f62d8fa-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;目前为止我们采用的方案是艺术家手动调整过渡材质。这样效果不错，但会带来很大的手动工作量。&lt;/p&gt;&lt;p&gt;而由于每次过渡都是一组全新的纹理，这也会增加纹理streaming系统的压力，并消耗宝贵的内存。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;多层地形材质(MLTM)&quot; width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/b766bfd08d5c50b5e53d3b255e49314c-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;目前我们为这个问题实现了一套方案，被称为&lt;span style=&quot;font-weight: bold&quot;&gt;多层地形材质&lt;/span&gt;（Multi-Layered Terrain Materials），缩写为&lt;span style=&quot;font-weight: bold&quot;&gt;MLTM&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;一个多层地形材质接收2个地形材质的输入，以及一个用于混合两种材质的&lt;span style=&quot;font-weight: bold&quot;&gt;阈值&lt;/span&gt;（threshold）。它对应的reveal map被用于计算混合效果。&lt;/p&gt;&lt;p&gt;实际上这也类似Photoshop制作的过渡效果，但不需要额外内存开销。&lt;/p&gt;&lt;p&gt;所有混合过程都是运行时执行的。这确实会增加shader的开销，但由于这种材质只用于（两种材质的）过渡计算，因此是能接受的。&lt;/p&gt;&lt;p&gt;*这里说的几个点都是相对前一页，艺术家手动调整制作过渡纹理的情况。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;虚拟纹理&quot; width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/0cb512eba922047ba0c7844afa99f016-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;虚拟纹理&lt;/span&gt;是在运行时被用来模拟（emulated）超大纹理的一种处理。&lt;/p&gt;&lt;p&gt;类似虚拟内存为计算机显著地在物理内存的基础上增加内存一样，虚拟纹理能使本来特别大（超过尺寸限制）的纹理变得可行。&lt;/p&gt;&lt;p&gt;这个模拟的关键是2类纹理：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;首先，有一个&lt;span style=&quot;font-weight: bold&quot;&gt;物理纹理&lt;/span&gt;（physical texture）以管理超大纹理的页——一个页对应模拟纹理的一小块方形区域，或它的mip。一个页通常有256X256像素，但它也可以是你需要的任何尺寸。&lt;/li&gt;&lt;li&gt;其次，有一个&lt;span style=&quot;font-weight: bold&quot;&gt;间接纹理&lt;/span&gt;（indirection texture）存储足够的信息，以便GPU能重定向采样物理纹理中存储的纹理数据。其中的一个像素将指向物理纹理中的一个页。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;例如，一个4K的物理纹理包含256x256页，再乘以2K的间接纹理就能覆盖512K的纹理。&lt;/p&gt;&lt;p&gt;虚拟纹理通常也被称为&lt;span style=&quot;font-weight: bold&quot;&gt;程序化&lt;/span&gt;（procedural）的虚拟纹理，因为最终的模拟纹理是程序化组合材质及其它绘制单元的结果。&lt;/p&gt;&lt;p&gt;在本次分享中，程序化这个词被省略了，但它实际上是很重要而值得被记住的——因为最终的纹理是一系列复杂的混合处理的结果，并不存在于硬盘上。&lt;/p&gt;&lt;p&gt;*现在VT已经不止用于处理超大尺寸纹理的问题了，但最初针对超大尺寸的这个思路确实是约翰卡马克提出的。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;自适应虚拟纹理(AVT)&quot; width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/a03545a3eeee5217544ad7eba5954b7e-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;虚拟纹理对于模拟不符合GPU尺寸要求的纹理是很有效的。&lt;/p&gt;&lt;p&gt;然而，其数量级对于模拟更庞大的纹理还是不足。&lt;/p&gt;&lt;p&gt;例如，512K的虚拟纹理只能覆盖大约3平方英里、每英寸（inch）25像素的地表。&lt;/p&gt;&lt;p&gt;对于更大的虚拟纹理，育碧公司的Ka Chen在2015年的GDC上介绍了&lt;span style=&quot;font-weight: bold&quot;&gt;自适应虚拟纹理&lt;/span&gt;（Adaptive Virtual Texturing）的方案。之后我会把它缩写成&lt;span style=&quot;font-weight: bold&quot;&gt;AVT&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;AVT可以模拟最多包含24层mip的纹理。以每英寸25像素作为精度时，这足以覆盖10.6平方英里的区域。&lt;/p&gt;&lt;p&gt;作为算法的基础，世界被切分为210英尺（feet）左右的很多&lt;span style=&quot;font-weight: bold&quot;&gt;部分&lt;/span&gt;（sectors）；每个部分通过一个&lt;span style=&quot;font-weight: bold&quot;&gt;虚拟图像&lt;/span&gt;（virtual image）来管理——这部分实质上就是传统的VT。&lt;/p&gt;&lt;p&gt;虚拟图像的尺寸是动态的，它会随摄像机距离的不同而变化——这就是它被称为自适应的原因。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;虚拟图像&quot; width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/41110e6a737952384b25e651aae634e3-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;一个虚拟图像有16个mip。通过它们，我们能覆盖210平方英尺，每英寸25像素精度的区域。&lt;/p&gt;&lt;p&gt;只有靠近摄像机的sector是被激活的，我们只支持最多255个sector。&lt;/p&gt;&lt;p&gt;也有一个默认的sector覆盖整个世界，而它总是使用16mip的虚拟图像。&lt;/p&gt;&lt;p&gt;屏幕左上方的方形区域展示了这种方案的间接纹理——它只有512X512像素。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;默认的sector是灰绿色的，它占据了左上角。虚拟图像在这个间接纹理中为它们各自分配空间。&lt;/li&gt;&lt;li&gt;从图中可以看出虚拟图像中的哪一部分图样（scheme）是负责为哪一部分地形着色的。当我们靠近一个sector，你可以看到它的虚拟图像变得更大；当远离时，它对应的虚拟图像就会缩小。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;*这里作者演示了一段视频，文稿中虽然没有但从颜色对应能理解作者的意思。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;虚拟图像四叉树&quot; width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/7d2bd9273cc7b2727104e74ff1fb0b5e-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;一个虚拟图像的&lt;span style=&quot;font-weight: bold&quot;&gt;四叉树&lt;/span&gt;（quad tree）比起普通的四叉树更复杂，因为它要追踪GPU中使用的页。&lt;/p&gt;&lt;p&gt;当展开四叉树的分支时，部分子节点可能没有对应的页，这时它们需要指向父节点的页。图中展示了这一过程。&lt;/p&gt;&lt;p&gt;例如，在深度1，根节点的4个子节点需要被展开，以创建棕色的页；另外3个子节点则直接指向父节点（以此类推）。&lt;/p&gt;&lt;p&gt;每一帧，这些页可能变为准备好的状态，或相反地变为无效的状态。&lt;/p&gt;&lt;p&gt;当一个新的页被合成时，四叉树直到下一帧才更新。这是因为我们无法承受GPU中使用了合成中的页的风险。（*基于多线程的原因）&lt;/p&gt;&lt;p&gt;当一页不再被请求时，它会进入缓存中进行计时。它在四叉树中被（逻辑）删除了，但内存中它会存在至少3帧。这对于GPU不会使用回收中的页已经绰绰有余（more than enough）了。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;间接纹理&quot; width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/8f68fa0e3adb1e372e4041989d7d38a9-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;CPU版本的四叉树对于GPU来说太复杂了。（*这里我理解是这个算法对于偏并行计算的GPU不友好）&lt;/p&gt;&lt;p&gt;作为替代，我们把四叉树烘焙到一个间接纹理上。每一帧，游戏会计算前一帧和当前帧的四叉树的区别。&lt;/p&gt;&lt;p&gt;这一步会被转换成指令，并在一个compute shader中执行，它负责更新这个间接纹理。&lt;/p&gt;&lt;blockquote&gt;The picture here shows what the CPU quad trees looks like from the perspective of the GPU.&lt;/blockquote&gt;&lt;p&gt;图中展示了从GPU的角度来看CPU中的四叉树的状态。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;动态尺寸&quot; width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/d3cdcf17853743f60edc273b62744d21-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;当摄像机移动到和sector足够近，游戏会决定启用新的mip并添加。&lt;/p&gt;&lt;p&gt;它首先会从主间接纹理中分配更大的子间接纹理，之后会用每帧填充间接纹理同样的算法填充它。&lt;/p&gt;&lt;p&gt;当摄像机移动得足够远，相反的处理会被执行。最终mip会被从间接纹理中移除。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;间接纹理的纹素&quot; width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/d76559389fac8bed060a5e8e095813ce-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;一个32bit的间接纹素（texel）提供了物理页中的坐标。它也指出了页在四叉树中的mip级别。&lt;/p&gt;&lt;p&gt;所有这些信息在从sector的Uv定位到物理页Uv的过程中都是需要的——这里的代码片段展示了这一转换过程。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;动作中的间接纹理&quot; width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/45b14232878b578c4847d8aed018bc0e-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;我们也开发了工具以帮助可视化和debug间接纹理——如图所示。&lt;/p&gt;&lt;p&gt;每个地形的方块代表了间接纹素的32bit，并被展现为一个albedo颜色——而通常它们会被以物理页（实际的纹理）填充。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/952d6e3870b233da223f00969ba32682-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;地形的渲染在prepass和opaque pass中都执行了。&lt;/p&gt;&lt;blockquote&gt;During the prepass, terrain writes to the depth buffer and to a stencil bit reserved for super terrain. We also write the geometric normal to a g-buffer.&lt;/blockquote&gt;&lt;p&gt;在prepass阶段，地形写入深度缓冲（depth buffer），对于超大地形还会写入一个模板bit。我们也会将几何法线写入gBuffer。&lt;/p&gt;&lt;blockquote&gt;During the opaque pass, terrain is deferred rendered using a full screen quad. Every pixels that have the stencil bit set, sample from the virtual texture to shade the current pixel.&lt;/blockquote&gt;&lt;p&gt;在不透明着色阶段，地形以延迟渲染的方式通过一个全屏的quad来渲染。每个设置了模板bit的像素，从虚拟纹理中采样来为当前像素着色。&lt;/p&gt;&lt;p&gt;*这模板bit的具体数据结构作者没有介绍，但基本是和之前介绍的虚拟纹理索引有关。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/0676154554e4ef6100fe05cec7f31bad-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;虚拟纹理的一个核心面向就是GPU驱动（driven）。&lt;/p&gt;&lt;p&gt;在opaque pass中，它既为每个像素着色，也计算可用的情况下会使用的物理页。这些信息被存储在一个&lt;span style=&quot;font-weight: bold&quot;&gt;回馈buffer&lt;/span&gt;中（feedback buffer）——它在3帧之后被CPU读取。&lt;/p&gt;&lt;p&gt;它的分辨率是240X136像素，不过我们也在研究在低端硬件上使用更小分辨率的可能。&lt;/p&gt;&lt;p&gt;基于性能方面的考虑，这部分也没有线程同步（thread synchronization）的过程。&lt;/p&gt;&lt;p&gt;*这里的feedback buffer主要是起到纹理计算与分派的作用。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/8eaae36c614c807723c95d9ae45caccb-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在opaque pass阶段，每个地形像素存储一个32bit的值到feedback buffer中。&lt;/p&gt;&lt;p&gt;它写入了虚拟纹理的mip级别，像素的sector ID以及间接纹理四叉树节点中的四叉树坐标。&lt;/p&gt;&lt;p&gt;其中最困难的部分是mip级别。它是通过查找UV的梯度（gradients）来计算的，而图中的代码片段展示了这一过程。&lt;/p&gt;&lt;p&gt;*简单分析下，这里用&lt;span style=&quot;font-weight: bold&quot;&gt;偏导数&lt;/span&gt;（ddx，ddy）计算了UV（textcoords就是纹理坐标，缩写就是UV）的&lt;span style=&quot;font-weight: bold&quot;&gt;变化率&lt;/span&gt;，来确定应该采用的lod或者说mip级别。如果不是虚拟纹理，这一过程一般已经封装在纹理采样的函数中了。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/d0465da895a2146fbbd3b18898edf226-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在GPU写入feedback buffer完成后，CPU从中读取。在其精度是240X136时，这意味着要处理32000个值。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;首先，我们计算所有唯一的值。&lt;/li&gt;&lt;li&gt;之后，我们将子节点的计数传递给它们的父节点。这是为了确保当子节点没有足够的hits（内存命中）时，期望父节点能有（对应的内存数据）。&lt;/li&gt;&lt;li&gt;最后我们按照流行度（popularity）来排序。我们希望最先请求的页是最需要合成的页。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我们对sector的根页做了偏移（bias），因此如果一个sector是全部可见的，至少有一页空间是留给这个sector的。我们也基于相机速度对高分辨率的页做了偏移。&lt;/p&gt;&lt;p&gt;由于feedback buffer是通过非同步的线程来更新的，因此它可能会有很多噪声（noisy）。我们通过引入一个阈值来解决这一问题，因为我们不希望影响页的合成。&lt;/p&gt;&lt;p&gt;有时，接近阈值的页会有一帧超过这个阈值，而下一帧又低于这个阈值。因此，我们也需要抢救（rescue）已经可见的页，以避免视觉故障；我们也从不请求（缓存中）超过1/3的总数的页，以避免视觉扰动（churn）。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1440&quot; height=&quot;810&quot; src=&quot;https://image.gcores.com/1ab7e0afd88f3fc898f9fe114bdd7c18-1440-810.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;尽管前面已经介绍了很多（数据和优化细节），游戏中仍然会时不时地看到低分辨率的虚拟纹理。（*这里指预期外的一些视觉故障情况）&lt;/p&gt;&lt;p&gt;例如，如果你的摄像机面向一个方向，之后快速朝向侧面，使屏幕渲染内容的请求填满了缓存区域，之后再做180度旋转看向身后，新的页就会经过几帧才能添加到缓存——这种情况就显得很明显。&lt;/p&gt;&lt;p&gt;解决方案是为每个sector选择最接近的中等分辨率的页，并将它们添加到请求页的列表中。&lt;/p&gt;&lt;p&gt;我们经常进行摄像机位置的瞬移（teleport），或很快的摄像机切换——例如从天空切换到玩家实际出生（spawn）的位置。游戏会提前告知摄像机瞬移的目标位置，因而我们可以提前stream合适的资源。（*通过带有预判的加载来解决快速切换问题）。&lt;/p&gt;&lt;p&gt;AVT技术也肩负着创建中等分辨率页的任务。&lt;/p&gt;&lt;blockquote&gt;Virtual texturing is essentially a cache. Typically, you only want to populate caches with up-to-date data. If the VT wants to composite a page, we need to make sure all the mips that are needed for that page are loaded before the page is composited.&lt;/blockquote&gt;&lt;p&gt;虚拟纹理实际上是一个缓存。通常来说，你只希望缓存中填充合用的数据。如果VT希望合成一个页，我们需要确认相关的mip都已经被加载了。&lt;/p&gt;&lt;p&gt;不幸的是，在存取速度很慢的硬件上，可能需要数秒来加载需要的mip。这会导致视觉上的BUG，摄像机会很快用尽VT的空间，而整个地形看起来就像PS游戏（那么糊）。&lt;/p&gt;&lt;p&gt;我们发现更好的方式是在页被请求是立刻去合成，但标记它是低分辨率的。&lt;/p&gt;&lt;p&gt;15帧之后，如果它还没有准备好，我们会重新合成一次，并假定我们有足够的带宽来执行。&lt;/p&gt;&lt;p&gt;之后这一延迟会加倍成30帧，我们会再次尝试合成它——直到这个页被标记为准备完成，我们会最后一次合成它（作为合适的分辨率）。&lt;/p&gt;&lt;p&gt;*这里更多是在加载很慢的设备上的一种取舍，即性能实在不行的时候如何尽量看起来舒服一点。这里实际上说的就是VT方式下进行了从低精度mip开始的加载。&lt;/p&gt;&lt;h1&gt;结语&lt;/h1&gt;&lt;p&gt;读的上半部分更多是基于虚拟纹理的介绍，这项技术提出已经有相对不短的时间了，但对于硬件还是有一定基本要求的。&lt;/p&gt;&lt;p&gt;值得一提的是，虚拟纹理也不仅仅用来处理超大纹理的问题，例如虚幻引擎中的SVT和RVT，虽然不完全是一回事，但是其中有很多映射和缓存思想是相似的。同时VT也是渲染调用上的一种优化，例如能减少材质绑定的过程，调整渲染批次等。&lt;/p&gt;&lt;p&gt;而VT似乎也是卡马克大神在游戏领域提出的最后一项有前瞻性的技术，可惜对应的游戏《Rage》表现就一般了。&lt;/p&gt;&lt;p&gt;下周会继续更新这篇文章的下篇，看看更多地形合成上的细节。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;最后是资料链接：&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://discourse.threejs.org/t/virtual-textures/53353&quot; target=&quot;_blank&quot;&gt;国外一篇比较好的Virtual Texture总结介绍&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;Large-Scale Terrain Rendering in&lt;/span&gt;Large-Scale Terrain Rendering in&lt;a href=&quot;https://advances.realtimerendering.com/s2023/Etienne(ATVI)-Large%20Scale%20Terrain%20Rendering%20with%20notes%20(Advances%202023).pptx&quot; target=&quot;_blank&quot;&gt;Large-Scale Terrain Rendering in Call of Duty 的PPTX&lt;/a&gt;Call of Duty 的PPTX&lt;span style=&quot;font-weight: bold; font-style: italic&quot;&gt;Call of Duty&lt;/span&gt; 的PPTX&lt;/p&gt; </description><link>https://www.gcores.com/articles/191717</link><guid isPermaLink="false">gcores-191717</guid><pubDate>Sat, 07 Dec 2024 05:00:00 GMT</pubDate><author>Hakumen</author><enclosure url="https://image.gcores.com/e94c6f7a68a976717db74545b50872cc-1440-810.png" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/e94c6f7a68a976717db74545b50872cc-1440-810.png"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/ac89aca1-3af7-4887-909e-242328cdd631.mp3" length="1517" type="audio/mp3"></enclosure><itunes:duration>0:25:17</itunes:duration><category>知识挖掘机</category></item><item><title>SIGGRAPH 粗读丨看看虚幻5的复杂材质系统（下）</title><description>&lt;figure&gt;&lt;img alt=&quot;SIGGRAPH 粗读丨看看虚幻5的复杂材质系统（下）&quot; src=&quot;https://image.gcores.com/7069e37efb2c25cb355ddf562303357e-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/82bf7435-c7c8-49f6-995e-df593e219ad3.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/82bf7435-c7c8-49f6-995e-df593e219ad3.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/82bf7435-c7c8-49f6-995e-df593e219ad3.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;从概念拆分、数据组织到工业化落地的细节&lt;/blockquote&gt;   &lt;h1&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.gcores.com/articles/191119&quot; target=&quot;_blank&quot;&gt;上篇&lt;/a&gt; 中铺垫了很多关于基底（&lt;span style=&quot;font-weight: bold&quot;&gt;Substrate&lt;/span&gt;）材质系统，主要是关于“材料”这一部分的抽象提炼——每个部分被称为一个slab，而相互的组织方式是通过运算符。&lt;/p&gt;&lt;p&gt;有了单个Substrate，下一步就是考虑其上的一些组织方式、数据传输及计算——让我们从Substrate Tree开始。&lt;/p&gt;&lt;p&gt;本文还是以翻译原文PPT页及解说稿为主，打星号的部分则是我个人的补充。由于篇幅原因拆成了上下两篇，这是其中的下篇。    &lt;/p&gt;&lt;h1&gt;1 基底树——&lt;span style=&quot;font-weight: bold&quot;&gt;Substrate Tree&lt;/span&gt;&lt;/h1&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/30f1dfd156a828de99569e22d5dc5b6f-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;首先让我们假设你想渲染图中的黄色粗糙金属，它被有着蓝色高光的清漆包裹。&lt;/p&gt;&lt;p&gt;在使用Substrate的情况下，我们会用slab B表达粗糙金属，用覆盖在其上的slab A表达清漆层，通过一个垂直层叠（vertical layering）运算来组合。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;但我们不能直接分别计算两个slab再对光照贡献进行累加&lt;/span&gt;。这会得到错误的结果，因为我们需要先计算slab A在slab B上层产生的效果，例如材质透射或fresnel效果等。（*即光线并不是全部到达了slab B）&lt;/p&gt;&lt;p&gt;为了正确计算这种效果，我们使用一个树状结构来作为材质的拓扑表达——运算符作为节点（nodes），slab作为叶子（leaves）。&lt;/p&gt;&lt;blockquote&gt;We are going to process/walk/evaluate this tree in order to be able to output closures. Closures represent a bag of parameters that can be sent to the renderer for lighting evaluation, accounting for all the different operators effects on the visual result.&lt;/blockquote&gt;&lt;p&gt;我们将逐步处理、遍历、计算这颗树以便输出结果的闭包（closures）。这里的闭包代表了一组参数，用以传递给光照计算渲染的阶段，基于所有不同的运算符需要的效果来计算最终的视觉结果。&lt;/p&gt;&lt;p&gt;在图中的例子里，我们可以看到Slab A在材质拓扑的顶层，因此光照可以直接计算；而slab B在层级的底部，因此我们需要考虑Slab A中通过的光线，以便能计算slab B的光照。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;一旦经过求值计算（evaluated），一个Slab会输出一个闭包&lt;/span&gt;。每个闭包能以任意顺序或并行进行计算得出——每个闭包计算会输出一个亮度颜色（luminance color），然后所有闭包结果进行组合运算就得到最后的图像。&lt;/p&gt;&lt;p&gt;*这部分主要是说闭包是每个slab能自己算出的参数或属性单元（基于材料特性可以算一些例如颜色、法线、分布函数PDF等），闭包参数计算是顺序无关的，只在对树求值的阶段需要关注顺序。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/a660d30f3dd61b0d7cfd193b6cdc8c35-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt; 让我们再看一个更复杂的例子。&lt;/p&gt;&lt;p&gt;图中我们有碳纤维（carbon fiber），水平混合了粗糙金属。你可以看到两个slab间的过渡区域——这就是两种slab通过一个水平混合（horizontal mixing）运算符链接的原因。&lt;/p&gt;&lt;p&gt;在这之上，你可以看到一个通过垂直层叠运算连接的清漆层。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/49070cc6757f2d968836bc7089e5e596-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在这颗树中我们需要计算大量的闭包，以便对slab之间的各种运算进行求值。例如：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;ToViewThroughput&lt;/span&gt;（可以翻译成：视觉方向的吞吐量），它受水平混合权重、上层吞吐量或覆盖率权重的影响。&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;TopTransmittance&lt;/span&gt;（可以翻译成：上层传播系数，上篇讲过它是一个0到1之间的值），它代表了一个给定的slab的传播系数，我们可以在光照计算中使用它——通过一个简单的公式将实际的光线方向进行重映射（remapping）就能实现。&lt;/li&gt;&lt;li&gt;我们也输出&lt;span style=&quot;font-weight: bold&quot;&gt;粗糙度&lt;/span&gt;和&lt;span style=&quot;font-weight: bold&quot;&gt;厚度&lt;/span&gt;用于粗糙折射效果（后续展开细节）&lt;span style=&quot;font-weight: bold&quot;&gt;。&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;2559&quot; height=&quot;1429&quot; src=&quot;https://image.gcores.com/282cc68ac8f202d14a07981fb3c2e44d-2559-1429.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;那么我们如何处理和遍历这颗树？为了保持展示页的相对简单，我们仅展示一下如何通过闭包计算光的&lt;span style=&quot;font-weight: bold&quot;&gt;覆盖率&lt;/span&gt;（Coverage）和&lt;span style=&quot;font-weight: bold&quot;&gt;传播系数&lt;/span&gt;（Transmittance）。&lt;/p&gt;&lt;p&gt;首先，我们计算每个slab的覆盖率和传播系数。可以看到图中底部的slab都是不透明的，因此它们的覆盖率是1，传播系数是0。&lt;/p&gt;&lt;blockquote&gt;The colored coat slab has coverage of 1 and a transmittance mapping resulting from the mean free path as seen when viewing the material in isolation along the normal of the surface.&lt;/blockquote&gt;&lt;p&gt;清漆层也有着1的覆盖率，而其传播系数的一组映射，是由沿着表面的不同法线方向单独“观察”这一层的mean free path（上篇中的一个概念）得出的。&lt;/p&gt;&lt;p&gt;*这里作者没有明确说这组参数的含义，个人猜想是最大、中位数、最小值。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;2559&quot; height=&quot;1433&quot; src=&quot;https://image.gcores.com/b092cdfbc1b54802eaa72fcbb4d4413a-2559-1433.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;其次，我们将处理每个运算符——&lt;span style=&quot;font-weight: bold&quot;&gt;深度优先&lt;/span&gt;，以便从slab中汇集信息。&lt;/p&gt;&lt;p&gt;因此，水平运算符收集了（其叶子节点的）覆盖率、传播系数的值。在图中的情况，两个不透明的slab共同组成了一个不透明的表面。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;2559&quot; height=&quot;1434&quot; src=&quot;https://image.gcores.com/0b92e14525c6efa0ca4f42ad97b54914-2559-1434.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;之后，处理根节点的垂直运算符——它也从叶子节点中汇集了覆盖率、传播系数。&lt;/p&gt;&lt;p&gt;在不透明表面覆盖清漆层，整体得到的仍是不透明表面。（*最终传播系数是0）&lt;/p&gt;&lt;p&gt;根节点的覆盖率、传播系数的值很重要：它代表了材质的整体覆盖率和整体传播系数，用以计算&lt;span style=&quot;font-weight: bold&quot;&gt;光吞吐量&lt;/span&gt;——如果用户选择了alpha blend混合和半透明渲染方式，则材质会按规则和场景颜色进行混合。（*即到了根节点才考虑计算和场景的半透明混合，之前都只计算闭包值）&lt;/p&gt;&lt;p&gt;另外，需要注意顶层的覆盖率和传播系数是被单独存储的，以便后续的一些计算用使用。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;2559&quot; height=&quot;1431&quot; src=&quot;https://image.gcores.com/c2f51bf28483e3ad216f9de4fbee371d-2559-1431.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;第三步，我们从每个slat开始向根节点遍历，以便计算其它的一些值，例如之前提到的&lt;span style=&quot;font-weight: bold&quot;&gt;ToViewThrouput&lt;/span&gt;或是&lt;span style=&quot;font-weight: bold&quot;&gt;TopTransmittance&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;我们可以看到，在清漆层向顶层执行垂直运算时，这两个系数都是没有变化的。（*个人觉得这两个参数的取名有一定误导性，最终还是要结合后面的步骤如何计算来看）&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;2559&quot; height=&quot;1437&quot; src=&quot;https://image.gcores.com/6d81cc678028896b6353ba1c550fa523-2559-1437.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;碳纤维slab首先遍历到了水平混合运算。因而，它的&lt;span style=&quot;font-weight: bold&quot;&gt;ToViewThroupu&lt;/span&gt;t会被混合权重影响&lt;span style=&quot;font-weight: bold&quot;&gt;。&lt;/span&gt;&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;2559&quot; height=&quot;1433&quot; src=&quot;https://image.gcores.com/2e6674ffb98ebdc1e05e3242d4668818-2559-1433.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;之后碳纤维层遍历到了垂直运算节点，因此它的&lt;span style=&quot;font-weight: bold&quot;&gt;ToViewThrouput&lt;/span&gt;和&lt;span style=&quot;font-weight: bold&quot;&gt;TopTransmittance&lt;/span&gt;被节点中存储的&lt;span style=&quot;font-weight: bold&quot;&gt;TopCoverage&lt;/span&gt;和&lt;span style=&quot;font-weight: bold&quot;&gt;TopTransmittance&lt;/span&gt;影响了。（*可以看图中，都相乘了）&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;2559&quot; height=&quot;1431&quot; src=&quot;https://image.gcores.com/ce258cbcb514589c8a915fbac774e8c7-2559-1431.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;继续对每个slab都执行类似的操作。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/88bca2cacdd865666a5d108a0937b8b0-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;处理substrate树时我们其实还计算了更多数据：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;Energy preservative&lt;/span&gt;（可以翻译成：能量驻留），代表slab间的能量传递信息。&lt;/li&gt;&lt;li&gt;我们使用&lt;span style=&quot;font-weight: bold&quot;&gt;粗糙度追踪&lt;/span&gt;（roughness tracking）来体现粗糙的顶层对其底层的高光效果的&lt;span style=&quot;font-weight: bold&quot;&gt;锐利程度&lt;/span&gt;的影响。（*即粗糙的顶层会使光散射，使本来清晰的高光变模糊）&lt;/li&gt;&lt;li&gt;我们也考虑了&lt;span style=&quot;font-weight: bold&quot;&gt;顶层的粗糙度对于光线折射的影响&lt;/span&gt;——因而粗糙表面下的底层也会显得模糊（基于顶层的粗糙度和厚度）。其中使用的Point Spread Function是一个使用高斯模糊特殊计算的波瓣（lobe *之前多次介绍过，是光分布的一种描述），其中硬编码了空气到水体的折射路径——我们基于折射高光波瓣（refracted specular lobe）来计算底层表面的模糊程度。（*这部分的效果可以看图）&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/1b4a897a48f4a6c07b9c772cf5ccd788-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;blockquote&gt;Some more details: &lt;span style=&quot;font-weight: bold&quot;&gt;when we compile a material topology, we do it for the worst case topology&lt;/span&gt;. This is needed because we need to flatten the tree parsing code. Compilers could not handle dynamic tree processing using for loop unfortunately (weird behaviors and crashes at compilation time would happen).&lt;/blockquote&gt;&lt;p&gt;再介绍一些细节：当编译一个材质的拓扑数据时，我们的编译器计算了&lt;span style=&quot;font-weight: bold&quot;&gt;最差的拓扑情况&lt;/span&gt;。这是因为我们需要将树的解析代码尽量展平（flatten），因为（不幸的是）编译器无法处理动态树操作中的循环（会导致发生奇怪的问题和崩溃）。&lt;/p&gt;&lt;p&gt;我们也收集了例如&lt;span style=&quot;font-weight: bold&quot;&gt;切线&lt;/span&gt;（tangent）等slab之间基准的共享参数，只在GBuffer中存储一份数据拷贝。&lt;/p&gt;&lt;p&gt;你可以从图中蓝色部分看出，我们也追踪了每个slab启用的特性（features），以便得知最差情况的复杂度和每像素的GBuffer字节需求。这也可以通过项目设置中的最大每像素GBuffer字节（maximum GBuffer bytes per pixel）来进行简化，后续会解释到。 &lt;/p&gt;&lt;h1&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;2 规模控制——Scalability&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;*这一节主要介绍通过工程设置来控制闭包规模，最终影响画质的流程。Scalability在考虑规模变大时也会翻译成可扩展性，但这里更多是说控制规模。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/9221deb472a9c465437e63df2ea70cad-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;首先，我们需要克服闭包组合过多的问题（原文是&lt;span style=&quot;font-weight: bold&quot;&gt;closure combinatorial explosion&lt;/span&gt;）。&lt;/p&gt;&lt;p&gt;我们要演示的这个例子展示了标号3的slab与其上两层不同覆盖率的层有着复杂的拓扑结构（如图）。如果想要以可信的方式表达出材质的拓扑结构，我们需要考虑不同的光路径。（*图中黄色箭头）&lt;/p&gt;&lt;p&gt;例如，光可以通过S0，之后通过S2到达S3；或者它可以通过S0，然后直接到达S3。以此类推，能得到6种不同的路径及（从S3观测的）&lt;span style=&quot;font-weight: bold&quot;&gt;吞吐率&lt;/span&gt;和&lt;span style=&quot;font-weight: bold&quot;&gt;感官粗糙度&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;这会直接导致需要计算6种不同的闭包（有着不同的ToViewThroughput、TopTransmittance和高光粗糙度）。这种计算过于昂贵。&lt;/p&gt;&lt;p&gt;为了简化这种情况，我们得出了一种能够&lt;span style=&quot;font-weight: bold&quot;&gt;在统计上表达slab组合&lt;/span&gt;（基于之间的运算）的方式。在本例种，slab3将被一个单独的虚拟slab覆盖，综合了其它slab的参数。这样就会仅得到一个闭包并计算。&lt;/p&gt;&lt;p&gt;*这里用的trick感觉也近似掉了不少东西。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/2bee5ab5fbe646c94ce2de84a2a172b9-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在我们的统计表达中，一个slab，或者说多个slab的合计，可以表达为以下参数：传播系数、覆盖率、粗糙度和折射波瓣。（transmittance, coverage, roughness and a refraction lobe）&lt;/p&gt;&lt;blockquote&gt;It assumes there is no correlation between the coverage of the matter of each Slab.&lt;/blockquote&gt;&lt;p&gt;这个方式假设不同slab的材料的覆盖率之间没有相关性。（*例如上层材料必须覆盖在下层材料之上）&lt;/p&gt;&lt;p&gt;例如，slab的覆盖率运算是怎样的？它仅仅减少slab的覆盖率，而不影响材料的其它几项参数。&lt;/p&gt;&lt;p&gt;我们也为水平混合和垂直层叠运算提供了更复杂的方案，具体可以参照bonus页。&lt;/p&gt;&lt;p&gt;*bonus页中有5页介绍了这部分内容，简单来说覆盖率主要通过基于权重的加和乘来计算，而传播系数的计算还要考虑各自覆盖率的影响。篇幅原因就不列出bonus页了，有兴趣可以去看看原文。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/853968c3574e786aaf5758f62418646c-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;现在我们控制了闭包的数量，下一步就是基于不同平台和画质的设置。例如，我们可以动态适配：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;着色质量&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;启用的特性&lt;/span&gt;（&lt;span style=&quot;font-weight: bold&quot;&gt;enabled features&lt;/span&gt;，粗糙追踪或粗糙折射等）&lt;/li&gt;&lt;li&gt;通过设置每像素的缓冲区字节上限，可以控制GBuffer中的数据精度，甚至能调整例如移动端前向渲染使用的数据精度。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/d5f102e211ede5e9912f9f143c52d7a2-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;所以对于图中的包含水平混合和垂直层叠的例子，我们如何简化闭包的输出？&lt;/p&gt;&lt;p&gt;需要记住的是，&lt;span style=&quot;font-weight: bold&quot;&gt;一个slab是一个材料的基础表达方式&lt;/span&gt;。因此在理解这一构成的基础上我们可以构思合并不同slab的方式。&lt;/p&gt;&lt;blockquote&gt;Thus &lt;span style=&quot;font-weight: bold&quot;&gt;our solution to the simplification problem: progressive tree simplification using parameter blend of slabs&lt;/span&gt; descriptions based on some empirical rules. If that is not enough, we can even simplify by disabling special features.&lt;/blockquote&gt;&lt;p&gt;对于这一简化问题，我们的方案如下：使用激进的树简化方案，采用一些经验规则来做slab的参数混合。如果还不够，我们也能直接关闭特定的feature。&lt;/p&gt;&lt;p&gt;需要着重注意的是，这对于通过MDL或MaterialX标准提出的一些BSDF是不可行的——例如特定的BSDF和DiffuseBSDF无法通过这个方式合并。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/1587f395416994f550a6d99fcc052ed5-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt; 这里是一个简单的例子：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Slab A包含了diffuse, F0, F90和normal这几个参数（F0、F90上篇介绍过）&lt;/li&gt;&lt;li&gt;Slab B包含了不同的diffuse，F0, F90和normal参数&lt;/li&gt;&lt;li&gt;一个相当直接的想法就是通过一定的插值方式来对参数做混合&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/6728bab8cc25bdef00530ee8b4a67477-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这里的默认材质包含了所有的lobe和3个闭包，存储在72字节。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/9794411dd631341ad50bb968b7a4776b-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;我们可以简化这一材质，通过对最深的子树做水平混合操作。此时，我们只需要2个slab，2个闭包存储在48字节里。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/f0b38a5cf1a178c9cf015c6bcef4fb60-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;最终，我们可以通过混合垂直运算将它简化成一个材质——这时就只有1个slab，一个闭包存储在12字节里。&lt;/p&gt;&lt;h1&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;3 存储与计算——Storage &amp;amp; Evaluation&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;*Evaluation这个词虽然翻译成计算，但其实完整的信息应该包括计算求值，而且这里特指的主要是光照计算求值。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/d93f896366d1b2aaf6a152e043e15380-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这里的设计理念（原文用了philosophy一词，直译是哲学）是，你应该只为有效使用的数据付出内存和光照计算的开销。&lt;/p&gt;&lt;p&gt;我们可以逐像素适配它的内存分配规模——基于对应渲染内容的复杂度。如果材质的大部分都比较简单，则开销就比较小。这种特性又能允许某些场合出现很复杂的材质。&lt;/p&gt;&lt;p&gt;如你所知，虚幻引擎有多种不同的光照路径（管线）：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;延迟渲染，其中闭包数据存储在gbuffer，之后在光照pass读取&lt;/li&gt;&lt;li&gt;前向渲染，光照计算在基础pass中进行&lt;/li&gt;&lt;li&gt;Lumen光线追踪，材质属性存储在一个光线追踪的数据交换区（payload，直译是荷载）&lt;/li&gt;&lt;li&gt;以及类似的，传统光线追踪&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/1277ee888cea281a176757655af3d3b2-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;让我们看看材质的生命周期中发生了什么：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;材质被编译&lt;/span&gt;。编译器确定出权重始终为0的slab，它们会被静态编译分析出并剔除，之后对生成的代码进行平整。&lt;/li&gt;&lt;li&gt;当&lt;span style=&quot;font-weight: bold&quot;&gt;基础pass的材质shader被执行&lt;/span&gt;时。闭包被计算并写入gbuffer——如果一个闭包的权重是0，它将被跳过并从待写入的列表移除。 &lt;/li&gt;&lt;li&gt;之后，&lt;span style=&quot;font-weight: bold&quot;&gt;闭包就被准备好&lt;/span&gt;用于光照pass的计算。&lt;/li&gt;&lt;/ol&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/2272bb1e3bc138f60e903193fb5e4105-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;让我们看看更多gbuffer使用上的细节：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;材质&lt;span style=&quot;font-weight: bold&quot;&gt;闭包在gbuffer的存储采用激进的压缩策略&lt;/span&gt;，以尽量减少字节数。&lt;/li&gt;&lt;li&gt;gbuffer中的第一位表达了每个像素的复杂度，然后&lt;span style=&quot;font-weight: bold&quot;&gt;屏幕被基于着色复杂度分成不同类型的tile块&lt;/span&gt;（简单slab，slab+features，多个slab等等）&lt;/li&gt;&lt;li&gt;我们的每&lt;span style=&quot;font-weight: bold&quot;&gt;个光照pass都是tile化的&lt;/span&gt;（支持并行），因而shader代码可以被优化，以便在读取和处理闭包时能高效进行。这些都可以减少数据注册的压力，提高数据容量并减少GPU的渲染开销。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;*材质复杂度在UE中直接就有一个调试工具，输出在屏幕上就是图中绿底的图。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/2955027cb5ad66485e879290d5d8e216-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这里简单演示了一下闭包的动态剔除（前两中页介绍的内容）。&lt;/p&gt;&lt;p&gt;图中可以看到2个slab水平混合。在tile分类的debug视图（右侧）中，你可以看到我们只为复杂的tile付出开销——这部分材质每像素输出两个闭包；而混合权重为0的闭包则被计算pass直接移除掉了。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/70f79c7f567fab596249c39e02f41f7f-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;那么我们是如何在GBuffer或材质buffer中逐像素存储数据的呢？&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;数据头&lt;/span&gt;（header）代表了材质的复杂度，例如分类、闭包数量、切线基（&lt;span style=&quot;font-weight: bold&quot;&gt;tangent bases&lt;/span&gt;）的数量等。&lt;/li&gt;&lt;li&gt;之后基于启用的特性不同，我们有&lt;span style=&quot;font-weight: bold&quot;&gt;一组闭包列表&lt;/span&gt;——每个闭包对应不同特性，例如SSS或Fuzz。&lt;/li&gt;&lt;li&gt;在之后我们有&lt;span style=&quot;font-weight: bold&quot;&gt;切线基的列表&lt;/span&gt;（所有闭包计算共用的）。&lt;/li&gt;&lt;li&gt;最后但是同样重要的是，我们存储了&lt;span style=&quot;font-weight: bold&quot;&gt;其它数据&lt;/span&gt;例如TopLayer数据（法线、粗糙度等）和SSS数据以便传递给我们的后处理部分——例如SSR、SSAO、DFAO或SSS，以避免届时需要读取全部材质数据。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;基于不同的复杂度情况我们有着不同的数据打包（压缩）方式。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/019cbc87605e05038a3eb22c18565be5-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;例如，对于图中的&lt;span style=&quot;font-weight: bold&quot;&gt;简单&lt;/span&gt;材质——仅依赖diffuse、specular和roughness，只需要12字节数据。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/d2e973ae1584c1ce748b4c5b8f001c22-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这里是一个&lt;span style=&quot;font-weight: bold&quot;&gt;单独&lt;/span&gt;材质——一个slab包含一些feature。在这个例子中，用到了朦胧（haziness）特性，字节数上升到20字节每像素。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/146f11fe892a57c5da41b535eb599c20-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这里是一个&lt;span style=&quot;font-weight: bold&quot;&gt;复杂&lt;/span&gt;材质，包含很多slab。&lt;/p&gt;&lt;p&gt;你或许认出了我们上一个GDC的DEMO中展示的蛋白石（Opal ）材质。它由2个用到了raymarch的高度场的slab组成，以及一层高光的透明覆盖层。&lt;/p&gt;&lt;p&gt;这里使用了闭包的通用表达格式，每像素需要76个字节。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/8c1ff531b5d0431e004988c896db575c-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这里是一个&lt;span style=&quot;font-weight: bold&quot;&gt;特殊&lt;/span&gt;的材质，包含了例如Glint和SpecularLUT等进阶的视觉要素，它能够用来精确表现有着闪烁的车漆或进阶的珍珠形式的外观。（*图中表明了，闭包部分92个字节，总共100）&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/8c78216bff4f10bc2b6ada4ac92902ff-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;对于每个闭包，它们的参数被激进地使用离散化（quantization）的方式压缩。并且我们使用了dithering以避免出现带状伪影（banding artefact）。所有这些闭包数据最终都以UINT流的形式写入我们的GBuffer。&lt;/p&gt;&lt;p&gt;我们的GBuffer是一个UINT作为数据格式的2D纹理数组——被我们称为材质buffer。&lt;/p&gt;&lt;p&gt;在基础pass中，最初的&lt;span style=&quot;font-weight: bold&quot;&gt;3个层被映射为Render Target输出&lt;/span&gt;，以便在部分硬件上利用其混合输出的缓冲区机制。剩余的层被映射为一个单独的UAV，超出之前Render Target输出范围所有的UINT数据被写入其中。（*UAV是一个着色的中间概念，是Unordered Access view的缩写）&lt;/p&gt;&lt;p&gt;在低端平台上，我们的目标是避免昂贵的UAV写入，因此所有旧材质都有3UINT的数据上限。&lt;/p&gt;&lt;p&gt;而关于buffer的的分配策略：我们允许它增长，基于屏幕上渲染哪种材质；但我们从不收缩它的容量，以避免内存重分配导致的内存碎片和显示故障。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/93a1f98b0ab4ad07f704c6ce0b43398d-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;一旦闭包被压缩存储到GBuffer中，后续就可以读取并用于计算光照了。&lt;/p&gt;&lt;p&gt;我们简单地循环所有闭包，并加载它们，之后基于启用的feature来计算光照。&lt;/p&gt;&lt;p&gt;如前所述，tile复杂度的分类能帮助我们优化这些pass中的GPU开销。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/67c06b4db20e85aa49b511da23783b3e-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;对于硬件光线追踪，我们需要把材质数据发送给射线生成Shader（RGS——Ray Generation Shader）。这一步在光线追踪的payload结构中完成，并且这一结构需要保持尽量小且高效——我们将其限制在了64字节。&lt;/p&gt;&lt;p&gt;然而，我们不能传入整个材质的substrate tree的数据到RGS中，因为这无法匹配多个slab的表达形式——类似的，多闭包也在很多情况下无法适配。&lt;/p&gt;&lt;p&gt;对于&lt;span style=&quot;font-weight: bold&quot;&gt;Lumen&lt;/span&gt;，所有的lobe和反射细节相对没有那么重要——对于全局光照来说。我们&lt;span style=&quot;font-weight: bold&quot;&gt;对一个substrate tree执行了一个全面的简化&lt;/span&gt;——简化成一个单独的slab，只输出一个闭包。这样它就能符合payload的需求，并在lumen的RGS中计算了。&lt;/p&gt;&lt;p&gt;而对于传统的光线追踪，我们需要关注所有的反射细节和光的互相影响。我们简单地&lt;span style=&quot;font-weight: bold&quot;&gt;随机选择一个闭包，并基于直接光照的albedo在hit shader中进行处理&lt;/span&gt;。这个闭包的PDF会基于所有闭包的直接光照的albedo进行重新分配权重，之后光线追踪器就可以对这个闭包的lobe进行选择和采样了。&lt;/p&gt;&lt;p&gt;这是一个选择，牺牲了丰富的变化来换取更好的性能。通过些微更多的采样数，结合我们的降噪器，就能得出图中展示的例子。&lt;/p&gt;&lt;p&gt;*光追这一步看着虽然差不多，但实际上已经不是多个slab组合这么回事了。所以之前那么多slab特性主要还是针对直接光照的，在简介光照上精度其实损失了很多。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/b2a228a1a7eccbb04392236fc5b0c769-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*这里给出了不同复杂度材质在PS5 1080P时的耗时，提供了传统材质和Substrate材质的对比。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/db3e7c6644222d377578d499637ef7f0-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*最后是一些内存占用对比。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/59dad7c8026ea60caf4725183dbd03b3-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*不同材质复杂度的数据字节占用。&lt;/p&gt;&lt;h1&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;4 总结&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;*总结的部分不长，好处就不重复了，上篇中都提到过。这里主要看看目前的局限。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/0280e57397d3236f1ea7da80508bc58e-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;首先，我们需要一个&lt;span style=&quot;font-weight: bold&quot;&gt;深度prepass&lt;/span&gt;（即预先绘制深度，而不是深度+着色的方式进行）。这是由于某些材质和闭包可能需要在UAV中写入数据。&lt;/p&gt;&lt;p&gt;其次，我们需要一个单独的贴花加速pass（&lt;span style=&quot;font-weight: bold&quot;&gt;decal accumulation pass&lt;/span&gt;），通常被称为DBuffer。这是因为我们新设计的GBuffer不再能混合了，一些贴花需要在闭包生成之后的pass再被合成进去。&lt;/p&gt;&lt;p&gt;也有一些shader编译方面的挑战： 在base pass可能遇到更多编译和数据打包的情况，因此shader会变得更大并且需要编译更久。虽然凡事都是有代价的（Nothing comes for free 更好的效果就要付出更多时间成本），但我们会持续改进这一点。&lt;/p&gt;&lt;p&gt;我们也希望减轻额外buffers写入相关的额外开销——主要是与后处理pass通信的TopLayer和SSS数据缓冲的部分。&lt;/p&gt;&lt;p&gt;最后但是同样重要的是，我们也希望基于更多的用户体验来进行调整改进。因为slab参数化方式自身相比原有的材质参数化方式有着一定的学习曲线，最终可能我们会提供一定的方式来提供简化的参数化方式，例如映射成类似传统shading model的形式。&lt;/p&gt;&lt;p&gt;*作者似乎很喜欢用Last but not least这个词组。总的来说，新系统的开销会略高于目前的材质系统，并有着更长的着色器编译时间，目前方案的可接受程度踩在工业化能接受的临界线上。&lt;/p&gt;&lt;h1&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;结语&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;原文中还针对其中2项问题及工具化的细节有10页左右的的Bonus，这里就不展开了，有兴趣可以去详细看看具体技术细节。&lt;/p&gt;&lt;p&gt;目前作为一个可选插件来说，Substrate材质在虚幻5中还是被标记为“实验性”阶段，距离实际可稳定用于产品还有一定距离。&lt;/p&gt;&lt;p&gt;不过回看之前的一些实验阶段的成功案例，至少在虚幻的路线图中成功在工业化领域落地的比例比较多。除了一整套基于实景扫描及网格自动处理的高清资源管线外，典型的还比如逐渐广泛用于动作游戏的&lt;span style=&quot;font-weight: bold&quot;&gt;Motion Matching&lt;/span&gt;（动作自动匹配混合）系统。在《黑神话：悟空》的研发中期就曾经在一次分享会上提到这个技术，介绍了当时的一些局限及应用细节——距离当时2年之后，现在随便一个开发者都可以对着UE的范例工程配置出相当丰富的实时混合动作了，而且这项技术最终也在黑猴游戏中得到了不错的产品级验证。&lt;/p&gt;&lt;p&gt;正如在Motion Matching之前踩在硬件CPU性能的平均线上一样，Substrate材质系统目前也基本踩在GPU性能的平均线以上，但是我估计很快就会有以Substrate材质作为视觉特点的产品出现了，毕竟这能够大幅缩短图形和材质Feature的开发时间。&lt;/p&gt;&lt;p&gt;如果说之前只是看渲染相关的方面，近期我确实逐步了解了虚幻5这个引擎的方方面面。以我目前的了解来看，之后的3D游戏不管是任何开发规模，至少在画面精细程度和动作流畅度上都会有着相当高的起点——高质量只是一个方面，最重要的是工具链非常的高效。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;最后是资料链接：&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold; text-decoration: underline&quot;&gt;Authoring Materials That Matters - Substrate in&lt;/span&gt;Authoring Materials That Matters - Substrate in&lt;a href=&quot;https://www.gcores.com/link?target=https%3A%2F%2Fadvances.realtimerendering.com%2Fs2023%2F2023%2520Siggraph%2520-%2520Substrate.pptx&quot; target=&quot;_blank&quot;&gt;Authoring Materials That Matters - Substrate in Unreal Engine 5 的PPTX&lt;/a&gt;Unreal Engine 5 的PPTX&lt;span style=&quot;font-weight: bold; text-decoration: underline&quot;&gt;Unreal Engine 5 的PPTX&lt;/span&gt;Unreal Engine 5 的PPTX&lt;span style=&quot;font-style: italic&quot;&gt;Unreal Engine 5&lt;/span&gt; 的PPTX&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;作者提供的参考资料谱系&quot; width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/c7c472fe311e71ae300faa57107f77cf-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt; </description><link>https://www.gcores.com/articles/191425</link><guid isPermaLink="false">gcores-191425</guid><pubDate>Wed, 27 Nov 2024 12:51:28 GMT</pubDate><author>Hakumen</author><enclosure url="https://image.gcores.com/7069e37efb2c25cb355ddf562303357e-1080-607.png" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/7069e37efb2c25cb355ddf562303357e-1080-607.png"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/82bf7435-c7c8-49f6-995e-df593e219ad3.mp3" length="1627" type="audio/mp3"></enclosure><itunes:duration>0:27:07</itunes:duration><category>知识挖掘机</category></item><item><title>SIGGRAPH 粗读丨看看虚幻5的复杂材质系统（上）</title><description>&lt;figure&gt;&lt;img alt=&quot;SIGGRAPH 粗读丨看看虚幻5的复杂材质系统（上）&quot; src=&quot;https://image.gcores.com/64a002b5f263a8c5f674609111fa4da2-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/507b5d7c-09e1-4910-b4c8-1d654e5cc0d0.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/507b5d7c-09e1-4910-b4c8-1d654e5cc0d0.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/507b5d7c-09e1-4910-b4c8-1d654e5cc0d0.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;从近似的经验模型到复杂的写实模型&lt;/blockquote&gt;   &lt;h1&gt;前言&lt;/h1&gt;&lt;p&gt;提到&lt;span style=&quot;font-weight: bold&quot;&gt;渲染材质&lt;/span&gt;，很多人能想到的可能最常被提到的“PBR材质”或是“SSS材质”之类的缩写，或是“毛发”、“衣料”、“水体”等更接近现实中物体的概念。 &lt;/p&gt;&lt;p&gt;其实仔细想想就会发现，前两者更接近一种&lt;span style=&quot;font-weight: bold&quot;&gt;经验模型&lt;/span&gt;，通过近似归纳的算法来提供尽量写实的效果；后两者的实现则是一套或多套不同复杂度的&lt;span style=&quot;font-weight: bold&quot;&gt;组合方案&lt;/span&gt;，基于不同引擎、不同开发者、不同平台都会有多元的方案，但几乎都无法通过一次简单的绘制来完成。&lt;/p&gt;&lt;p&gt;但不管是哪种方案，在目前大多数的情况下，在实时渲染的引擎中还是以提炼好的功能模块为主——这意味着一旦需要一个新的复合材质，就需要一定程度的自定义开发，而且往往有比较多的限制（后面文中也会介绍到）。&lt;/p&gt;&lt;p&gt;本次会介绍的是虚幻5引擎中2023年提出的一套被称为&lt;span style=&quot;font-weight: bold&quot;&gt;基底（Substrate）&lt;/span&gt;组合的方案，这是一套艺术家易用性为主的复杂材质方案。&lt;/p&gt;&lt;p&gt;本文还是以翻译原文PPT页及解说稿为主，打星号的部分则是我个人的补充。由于篇幅原因还是会拆成上下两篇，上篇介绍Introduction、Slab、Operators这几部分。  &lt;/p&gt;&lt;h1&gt;1 引入动机——Introduction / Motivations&lt;/h1&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/d730d810a701c9d58ab95e6695b03fe0-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;blockquote&gt;The current material model in UE is based around the notion of Shading Models. A shading model target a specific set of visual features, proper to a given appearance. For instance, we have a shading mode for general dielectric/conductor, for ClearCoat, for Subsurface scattering, for Cloth, ..&lt;/blockquote&gt;&lt;p&gt;当前UE中的材质模型是基于&lt;span style=&quot;font-weight: bold&quot;&gt;着色模型（Shading Models）&lt;/span&gt;的概念建立的。一个shading model是以一组视觉特性为目标，为实现一种特定的外观。例如对于绝缘体、导体、清漆、次表面散射、布料等。&lt;/p&gt;&lt;p&gt;每个shading model能覆盖一定范围的外观谱系（spectrum）。&lt;/p&gt;&lt;p&gt;多数现存的shading model使用的是艺术家的实现方案，同时保持了高性能。例如《堡垒之夜》最高能以120Hz运行。&lt;/p&gt;&lt;p&gt;另外，所有这些shading models在我们的不同渲染路径之间保持&lt;span style=&quot;font-weight: bold&quot;&gt;视觉一致&lt;/span&gt;（visually consistent），无论是光栅化路径，还是光线追踪方式的Lumen或path tracer路径。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/2bb18d4da9050e7ee2042f4edd512faf-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt; 然而，尽管内置了大量特定的shading model，这种方式还是阻止了艺术家自由的进行创作。（*原文用了silo一词，直译过来的一个意思是发射井）&lt;/p&gt;&lt;p&gt;例如，一个艺术家希望将SSS表面与金属表面混合。&lt;/p&gt;&lt;p&gt;在shading model的方案中，由于我们对一个像素只能提供一个shading model，这种混合就会导致硬边界或不连续。&lt;/p&gt;&lt;p&gt;在合适的混合后，过渡外观会变得更平滑。（使用了Substrate方式来演示）&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/31faac10562e79eec7cbc94d3d98f66e-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;另一个例子，如果一个艺术家想创造一个基于次表面的材质，但包裹在塑料壳或被汗水环绕呢。&lt;/p&gt;&lt;p&gt;同样的，仅通过shading model的方式，无法同时兼顾SSS模型和覆盖层（Coat）模型的特性。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/38b2152f251dc7ca6687ca2b02028628-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;另一个更进阶的例子。想象艺术家想构建一个进阶的布料材质。这种布料有着两种丝线的集合（例如，有着各向异性高光），相互垂直以模仿某种编织图案。并且布料还会被一层塑料层覆盖。&lt;/p&gt;&lt;p&gt;再次的，这种需求也无法通过shading model方式实现。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/b3b138cff2a8ae886efea44c224095e5-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt; 这个例子是我们现有shading model中的一个限制，更多是与我们的实现方式有关。&lt;/p&gt;&lt;blockquote&gt;UE default shading model uses the notion of metalness to make the distinction between conductor and metallic. When transiting between the two types, an undesired halo can appear. This is a known limitation in PBR, but something we couldn’t address before dropping the notion of metalness in Substrate. &lt;/blockquote&gt;&lt;p&gt;UE的默认shading model使用了基于金属性（metalness）这一概念来区分导体和金属。当在两种类型之间过渡时，会出现一个预期外的光晕。这是PBR中一个已知的局限，不过在引入Substrate之前我们无法解决。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/180f02aaed62db44a212a6c086710b96-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;所有这些例子都突出了这项事实——如果一个艺术家想得到特定的进阶外观效果，都需要对现有shading model的一些修改，甚至创建全新的shading model。&lt;/p&gt;&lt;p&gt;每次都为这种例子添加新shading model，可能会导致参数排列组合式的爆发。&lt;/p&gt;&lt;p&gt;同时，添加新的shading model也需要工程师花时间来实现并确保其如预期一样生效。&lt;/p&gt;&lt;p&gt;长期来看，这样做也增加了整体的着色开销。一个更复杂的shading model在实现时，通常也会增加分支逻辑和参数注册上的压力，最终拖慢整体着色的性能。&lt;/p&gt;&lt;p&gt;为了应对这种性能倒退，人们可以调整项目设置，按需启用这些进阶shading model。但这又带来维护和测试上的问题。&lt;/p&gt;&lt;p&gt;此外，UE是基于延迟渲染架构，这限制了可存储的输入的数量。（*下篇介绍数据存储中会提到）&lt;/p&gt;&lt;p&gt;在所有这些限制下，我们感觉很难引入并支持进阶材质。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/a5338e0ce40b56b092255c2720045f95-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这时Substrate方案出现在了视野里。&lt;/p&gt;&lt;p&gt;Substrate是一套复合框架，基于内建好的材料模块艺术家可以集成或创建复杂的外观。&lt;/p&gt;&lt;p&gt;然而，这套框架需要能保持和旧系统一样的性能，也要能保持和旧方案在不同渲染路径上的视觉一致性。&lt;/p&gt;&lt;p&gt;此外，这套框架需要是动态规模的（scalable）。对于一种复杂材质，我们不希望为高端设备和低端设备重新指定不同的变体。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/d3b519d7394193aa1048713d2f84ff47-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在工业界存在很多材质的标准和规范。MaterialX似乎是在工业界有着最广泛应用的框架——然而，这些规范都有一些不符合我们需求的限制。&lt;/p&gt;&lt;p&gt;要么它们依赖具体的拓扑定义（Autodesk Std Surface, Adobe Surface, OpenPBR），使我们无法创建更多进阶的表面模型；要么它们依赖一堆BSDF（*原文是a soup of），这阻碍了高性能地进行实现（有着太多分支和循环），也很难基于简单的规则来动态控制材质复杂度。&lt;/p&gt;&lt;p&gt;*&lt;span style=&quot;font-style: italic&quot;&gt;BSDF&lt;/span&gt;(Bidirectional Scattering Distribution Function) ，双向散射分布函数。和BRDF差一个字母，但这个复杂度往往高很多。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/ddbfc470e4d15d96122d2c7d75b2db94-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这就是我们开始开发Substrate的原因。如前所述，Substrate是一个框架，它基于以下3个概念构成：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Slab是我们描述具体&lt;span style=&quot;font-weight: bold&quot;&gt;材料&lt;/span&gt;（&lt;span style=&quot;font-weight: bold&quot;&gt;matter &lt;/span&gt;也可以理解成材质特性）的方式。&lt;/li&gt;&lt;li&gt;操作符Operators是我们对其做组合操作的方式。&lt;/li&gt;&lt;li&gt;树结构Tree是材质的拓扑结构描述方式。例如，不同的材料之间的相互关系和组织方式。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/ae896755adc2a0147ab3a1f41e0ccedf-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;为了演示，让我们举一个例子。这里是一个由两种材质特性构成的材质：&lt;/p&gt;&lt;p&gt;一个基础层，由金属和各向异性纤维构成，这被表达为一个&lt;span style=&quot;font-weight: bold&quot;&gt;Slab&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;另一层由有一定吸收率的绝缘体构成，这被表达为另一个&lt;span style=&quot;font-weight: bold&quot;&gt;Slab&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;两个Slabs之间通过上下层方式来组织，通过一个&lt;span style=&quot;font-weight: bold&quot;&gt;垂直层操作符（vertical layering operator）&lt;/span&gt;连接。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/80016f97059ef4c08e778f7ec4ae1baf-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;*这里是演讲人的全部章节安排。这里我的上篇中覆盖了：Slab、Operators这两部分。&lt;/p&gt;&lt;h1&gt;2 Slab定义材料——&lt;span style=&quot;font-weight: bold&quot;&gt;Slab &lt;/span&gt;Defining Matter&lt;/h1&gt;&lt;p&gt;*Slab直译是厚板、 板坯等，后续以作者拆解的多层结构作为理解方式，本身保持英文不翻译了。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/02a2b8316ab665d28a96ea62f4322b3c-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在这个架构中，slab被用来表达一类材料。这也是我们与大多数已有shading model统一化的方式。&lt;/p&gt;&lt;p&gt;你可以把一片材料想象成一个&lt;span style=&quot;font-weight: bold&quot;&gt;表面&lt;/span&gt;（interface）和有着一定厚度的一层&lt;span style=&quot;font-weight: bold&quot;&gt;介质&lt;/span&gt;（medium）组合而成。&lt;/p&gt;&lt;p&gt;所有属性都基于物理属性，这帮助我们不通过太多复杂的再参数化（convoluted reparametrization）就能描述一个材料。通过使用参数单元也能帮助我们保持一致性——它帮助我们思考如何控制光照与这些属性的交互（计算）方式。&lt;/p&gt;&lt;p&gt;一个反例就是gltf，或是其它有着漫反射透射（diffuse transmission）或是颜色吸收（color absorption）等等特性的规范，你控制的是完全不符合整体直觉的一些单一的影响项。&lt;/p&gt;&lt;p&gt;*gltf是一套3D模型的行业规范，包含了材质部分。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/ec47ba7796262172455f99a5258fcb76-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;表面层如你能想象的一样简单——它定义了两层介质之间的分割层，以一个微表面场的方式被建模。这部分的工业标准是简单而实用的。&lt;/p&gt;&lt;p&gt;这层表面通过一些不同的属性进行参数化，下面我们会介绍其中的一部分。&lt;/p&gt;&lt;p&gt;*这里的参数有的描述起来可能很复杂，但只要理解最终影响的都是某一像素最终计算的光照值即可。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/fbb1f5b225168bb55a262480ef7837dd-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;为描述反射率，我们使用了一个F0参数（这里指一个表面的法向入射的反射率）——它是便利且归一化了的，不像一些复杂的折射率（如IOR）参数。（*这里说反射率也包含了折射吸收，稍微了解的应该知道这本来就是光传播在介质同时发生的一种材质特性，如图）&lt;/p&gt;&lt;p&gt;为了描述更进阶的导体材料，我们使用了一个F90参数，它影响色度（chromaticity 对应HSV颜色空间）而不是强度，不减少透射时的能量。这个参数是其中最不“物理”的一个参数，后续我们可能用Adobe的F82来替代它。这个特性是一个可选项，意味着你只有当用到它时才会额外消耗性能。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/a6bb1c0122c264087187fe7186443dc2-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;对于微表面描述，我们使用一个简单的基于GGX的NDF。再次的，工业标准在这里是足够好的，我们不用自己从头造轮子。（NDF是&lt;span style=&quot;font-weight: bold&quot;&gt;Normal Distribution Function&lt;/span&gt;法线分布函数。GGX、NDF在Games101中有介绍，另外参数如图所示）&lt;/p&gt;&lt;p&gt;作为默认，我们的原始高光粗糙度是与漫反射粗糙度结合的。&lt;/p&gt;&lt;p&gt;对于各向异性（anisotropy），我们使用了Kulla&amp;amp;Conty参数标准。&lt;/p&gt;&lt;blockquote&gt;We adapt our tangent basis representation based on usage. If a surface is isotropic we will store a simple normal, but if the surface is anisotropic we will store a full tangent basis with two octahedral encoding (quantized onto 32bits).&lt;/blockquote&gt;&lt;p&gt;基于自身使用情况，我们调整了基于切线的表达方式。 如果表面是各向同性（isotropic）的，我们仅存储一个简单的法线，而对于各项异性表面我们需要存储基于两个八面体编码（two octahedral encoding 离散化装入32bits数据）的切线数据。&lt;/p&gt;&lt;p&gt;备注：后续我们会发现，一个材质可能由多个Slab构成，但都共享内存中同一份切线数据。更多的说明会在后续讲存储的章节介绍。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/3cbc816fee68c15d04f399861a912dee-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;可能有点神秘的是（原文用了esoteric这个词），我们有一个第二级的GGX波瓣（lobe），它以较低的权重混合进了第一级的波瓣中。&lt;/p&gt;&lt;p&gt;这样做的主要意图是为表面描述添加更长的“高光尾段”（‘specular tail’ 参考图中分布函数）。一个基础的GGX NDF有其自身的尾段分布，不过对于特定的制成材料，它的高光波瓣尾段可能更长。通过混合两种特定波瓣，我们可以重现这一朦胧的外观效果，使我们同时可以看到锐利的反射和朦胧模糊的部分。&lt;/p&gt;&lt;p&gt;我们也开放出了一个辅助节点（材质蓝图中的）用于以特定方式混合两个波瓣。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/f4cade5f9476193fe0d96651a46967aa-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;一个Slab可以描述其表面层的粗糙。经过这一粗糙层光以水平方式散射（图中右侧的波瓣分布），而不像高光波瓣那样（垂直分布）。&lt;/p&gt;&lt;p&gt;这些粗糙层总是在高光波瓣的上层，并且有着完全的参数化表达（roughness, albedo, coverage *图中以Fuzz开头的部分）。&lt;/p&gt;&lt;p&gt;*这里举例的就是衣料表面的绒毛——Fuzz。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/62441b557b2b3c3eae31da0a091ec8d6-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;正如所提到的，我们使用一个微表面场来为表面建模。这些微表面有着特定的尺寸，因此当我们靠的足够近时，我们就会看到它们。这时就会出现“闪亮”（glints）的效果。&lt;/p&gt;&lt;p&gt;你可以有选择地接入glint特性，并通过一个密度控制器来控制它们的尺寸，在表面UV上参数化。为了达到实时渲染的要求，我们使用了Chermain的方案——使用预计算的LUT来定义不同LOD下的glint行为。（*LUT——LookUpTable）&lt;/p&gt;&lt;p&gt;对于给定的glint密度，当你的视野远离表面时，像素的覆盖范围内逐渐会包含越来越多的glint。在达到特定距离后，它就会通过一个单一的GGX波瓣来覆盖。&lt;/p&gt;&lt;p&gt;这主要用于车漆、雪和其它需要闪亮效果的地方。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/d35f111834033c41a1b570b9258b59d5-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;作为前述的反射率参数的补充，一个Slab可以补充提供一个SpecularLUT。这个LUT定义了一个统一化的“染色”效果，参数化基于视线和光照角度。&lt;/p&gt;&lt;p&gt;这一LUT可以通过颜色坡度或纹理的方式来控制——参数化也是基于视线和光照角度。&lt;/p&gt;&lt;p&gt;*这里解释下，这是一个二维的LUT，即一个轴是编码好的视线角度，另一个轴是光照角度，坐标对应的唯一点是Tint结果值。&lt;/p&gt;&lt;p&gt;这在表现乳白色（opalescence）外观或一些复杂的车漆模拟时都会使用到。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/9be3cf5a58cc8f324199f93827df255d-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;当表面有粗糙度时，光线会被散射（折射）。这能创造出一个粗糙传播的外观效果。在这种情况下，粗糙的外观是由表面造成，而不是介质散射（例如次表面传播）造成。&lt;/p&gt;&lt;p&gt;为模拟这一效果，我们从表面的反射率参数中恢复出IOR折射率。&lt;/p&gt;&lt;p&gt;对于我们的光栅化路径，我们预计算了以粗糙度和深度（厚度）为维度的LUT，以计算光的分布。之后通过一个后处理pass来计算相应的模糊效果。&lt;/p&gt;&lt;p&gt;对于光追路径，我们可以简单地依赖一个射线检测来计算这个效果。&lt;/p&gt;&lt;p&gt;*这里的粗糙度散射和之前绒毛的粗糙度不一样，而且这里更多关注的是折射问题。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/2d972c3c68de2de484b73f6e4920f11e-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;目前为止我们没有涉及的一个方面是管理不同slab之间的能量传播。&lt;/p&gt;&lt;blockquote&gt;When an incident light ray hits the interface, it will hit a given microfacet. At that point, it might be reflected, transmitted, or hit another microfacet as it get reflected&lt;/blockquote&gt;&lt;p&gt;当一个间接光照的射线命中表面时，它会命中给定的微表面。在特定点上，它可能被折射、穿过或命中另一个微表面而被反射。&lt;/p&gt;&lt;p&gt;在后一种情况下，我们需要模拟这里的多次“弹射”以避免损失能量。这在高粗糙度的表面会非常明显，尤其是对导体而言。为模拟这一能量传递过程，我们采用了Turquin的方案。（对比图见图中红框部分，用经验性的方式补充了一部分应该反射的能量）&lt;/p&gt;&lt;p&gt;第二个重要的方面是，我们需要确保传递了正确数量的能量到下层介质中。例如，所有未被表面层折射或吸收的光能，需要传递到介质中去。对于这一点我们使用了表面定向的预计算查找表——也如Turquin的方案中所述。&lt;/p&gt;&lt;p&gt;*篇幅原理这里就不展开解释Turquin的方案了，有兴趣可以去搜搜原文。文末附了论文链接，另外我记得在Games202中也有相关讲述。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/2ce2be1abb7ba89c2436c80e3dae841d-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;结束了表面层的介绍，让我们深入介质层的部分。&lt;/p&gt;&lt;blockquote&gt;Our medium is based on a volumetric formulation. The intent was to have a unique parameterization which can represent the continuum between diffuse to fully transparent surface and abstract any artistic parametrization.&lt;/blockquote&gt;&lt;p&gt;我们的介质层是基于一个&lt;span style=&quot;font-weight: bold&quot;&gt;体积化表达式&lt;/span&gt;（volumetric formulation）。这样设计的意图是能有一种独特的参数化方式，以连续体（continuum）的方式描述从漫反射到全透明表面的材质，以及抽象出任何艺术表达用的参数。&lt;/p&gt;&lt;p&gt;因此，一个介质由以下部分来描述：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;无效区段（Mean free path），例如一个光子命中介质的粒子前自由通过的距离。后面缩写成MFP。&lt;/li&gt;&lt;li&gt;反照率（Albedo 也翻译成漫反射系数或反射率），例如用以总括多次弹射后的介质反射率。它是散射和吸收两个系数的结合。（*Albedo are just the dual of scattering &amp;amp; absorption coefficients）&lt;/li&gt;&lt;li&gt;各项异性的相函数（Phase function），用以描述命中介质粒子后的散射方向。&lt;/li&gt;&lt;li&gt;厚度（Thickness），用以描述介质的深度。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/5b31746554a3f427a15e47f6654f747f-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;通过这样的参数化方式我们可以覆盖完整的外观谱系——从全向漫反射到全透射。&lt;/p&gt;&lt;p&gt;简单来说，你也可以把它看成：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Diffuse albedo控制外观的“乳白色”程度&lt;/li&gt;&lt;li&gt;Mean free path控制表面的透射程度&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/0a95f3b6a9689b4f46186fed8cc1f953-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt; 从方案实现的视角来看，你也可以把这个外观空间划分为4部分：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;不透明漫反射&lt;/span&gt;（&lt;span style=&quot;font-weight: bold&quot;&gt;opaque diffuse&lt;/span&gt;）部分，视线无法透过材质表面，光也无法从像素覆盖区 中漏出&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;光学厚&lt;/span&gt;（&lt;span style=&quot;font-weight: bold&quot;&gt;optical thick&lt;/span&gt;）的部分，视线无法透过材质表面，但像素覆盖区中有些光能漏出&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;光学薄&lt;/span&gt;（&lt;span style=&quot;font-weight: bold&quot;&gt;optical thin&lt;/span&gt;）的部分，视线能透过材质表面，同时仍有一些光散射发生&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;透明&lt;/span&gt;（&lt;span style=&quot;font-weight: bold&quot;&gt;translucent&lt;/span&gt;）部分，作为前者的一种特殊情况，没有任何内部散射&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下面让我们看看如何实现这几部分。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/1a22a0cdd287b89b3671a2800c63197b-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;对于漫反射的部分，我们使用了一个反光（retroreflective）模型——基于Chan的方案。&lt;/p&gt;&lt;blockquote&gt;This approximates a diffuse microfacet model, who the roughness is coupled with the primary specular.&lt;/blockquote&gt;&lt;p&gt;这种方案提出了一种漫反射微表面模型的近似，将粗糙度与基础高光相结合。&lt;/p&gt;&lt;p&gt;其中粗糙度控制反光的量，例如光在掠射角（几乎90度的夹角）方向反弹的量，这在高粗糙度时会尤其明显。&lt;/p&gt;&lt;p&gt;如图表中所示，这种“管理方式”（原文是regime，直译是体制）是在像素覆盖区相对MFP时足够大时采用的。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/ab8b8e164816122fe1237bcedf97e76a-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;当像素覆盖区和MFP相比较小时，我们就进入了optical thick的模式。&lt;/p&gt;&lt;p&gt;此时我们应用常规的SSS技术：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;对于光栅化路径，我们使用基于Xie的方案的后处理pass&lt;/li&gt;&lt;li&gt;对于光追路径，我们使用随机游走算法（random walk algo）&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;需要注意，在我们的实现中，如果一个材质由多个slab构成，这一计算只应用于最底层的可见slab。对于光栅化路径，我们可以退回到例如wrap lighting等方案以提升性能。&lt;/p&gt;&lt;p&gt;*wrap lighting是次表面散射近似方案中的一种简化方法，它的核心思想是做颜色移位来模拟吸收与散射。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/93ec68e3e1a5356b0fc018efea10e093-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;Optically thin的情况是实时渲染中很不常见的，因此也很难处理。它拼合了一部分视线能透过的半透明，以及一些大范围的散射（朦胧）效果。&lt;/p&gt;&lt;p&gt;在我们的情况中，我们聚焦于它在&lt;span style=&quot;font-weight: bold&quot;&gt;叠在另一个slab上层&lt;/span&gt;的情况。&lt;/p&gt;&lt;p&gt;这个技术方案包含两部分：光线散射回弹，以及光线透射通过表面。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;对于透射的部分我们使用一个简单的Beer Lambert模型来计算吸收。&lt;/li&gt;&lt;li&gt;对于散射的部分，我们依据预计算的LUT——参数化来自单次散射的反照率（从漫反射率估计），重新缩放后的MFP（相对于1M的厚slab），以及视线、光照角度。这一LUT通过离线计算这些条件组合的情况来得出（MFP/albedo/view/light）。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这一方案目前只解决了第一步，也就是能量的部分，但没有处理光的“扩散”以显示成朦胧表面的部分。（*原文这里提到以后再加这个特性）&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/a3b7aca1b8bf6239ea379ca9cba8396b-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;最终这种特定情况下的optically-thin表面，虽然有了视觉“透过”的效果，但没有任何散射效果。&lt;/p&gt;&lt;p&gt;对于光栅化路径，我们使用双来源混合（dual source blending）的方式来处理透射的部分。没有任何神奇的部分，都是工业标准方式。（*这里就是常说的Alpha blend）&lt;/p&gt;&lt;blockquote&gt;The important part here is that we decoupled the notion of transmission from the notion of coverage. This split the convoluted ‘opacity’ term into two explicit notions. More on that later.&lt;/blockquote&gt;&lt;p&gt;重要的部分是我们将光传播（transmission）的概念从光覆盖（coverage）的概念中解耦出来了。通过这么做把晦涩难懂的“不透明度”（opacity）概念拆分成了两个确定的概念，后面我们会提到。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/5d8278322c0f72c3c8b3a9a8ba8326ed-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;从中我们可以看出，表面材质元素在视觉上的&lt;span style=&quot;font-weight: bold&quot;&gt;规模（scale）&lt;/span&gt;决定了我们在材质用应用的策略。（*基于MFP和Pixel Footprint像素覆盖区的比较）&lt;/p&gt;&lt;p&gt;我需要强调，采用的&lt;span style=&quot;font-weight: bold&quot;&gt;单位&lt;/span&gt;是很重要的。使两者都采用合适的世界空间单位，能有助于如何渲染一个材质的外观。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/3ba1c7a4c4452cad2c906efd03494f8d-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;最后，介质的厚度也需要列入考虑。它定义了光在其中传播的距离，这会影响“光的衰减“结果。&lt;/p&gt;&lt;p&gt;当它是单一层，或多层材质中的最底层介质，我们需要考虑这两种情况：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;如果表面被视为是“厚”的，它的厚度是被几何体的范围来定义的。在光栅化路径中，我们可以使用一个常量、一个SDF或一个shadow map来估计厚度值。对于光线追踪路径，它能够通过射线相交计算得出。&lt;/li&gt;&lt;li&gt;如果表面是“薄”的，例如几何体是一个平面（植物、衣物等），它的厚度需要通过另外的方式定义。此时我们在材质层级来定义它的厚度，在根节点上以Surface Thickness参数输入。&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;For other layer, we also define the thickness through the graph. This is only necessary when a slab is ‘coating’/’layered on top of’ another slab. In such case, the thickness of the top slab is provided by the Vertical operator.&lt;/blockquote&gt;&lt;p&gt;对于其它层，我们也能通过材质图来定义厚度。这只在slab是其它层上的覆盖层（coat）时是必须的。此时，上层slab的厚度是通过Vertical运算符来提供的。&lt;/p&gt;&lt;p&gt;*小结一下，这里位置slab方案主要提炼了目前为止的主要的透射材质方案，并为之设计了组合的可能性。其中在介质层有其独创的设计，而在表面层方面更多的是把现有的工业化方案进行组合。&lt;/p&gt;&lt;h1&gt;3 运算符——Operators &lt;/h1&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/ec04c681bee2d3b0674a418a2e805050-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;我们有3种主要的运算符：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;水平混合（Horizontal mixing）——类似之前两种材质之间的过渡和混合&lt;/li&gt;&lt;li&gt;垂直层叠（Vertical layering）——想象两个材质之前的覆盖层关系&lt;/li&gt;&lt;li&gt;覆盖权重（Coverage weighting）——可以把它想象成alpha blending，使一种材质看起来更“透明”&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/737c41139e48aa1fde6e55a6798ff3f9-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;但首先，我们需要适当地定义一些术语（terminology）来确保谈的是同一件事。&lt;/p&gt;&lt;p&gt;假设我们有一个粗糙金属球体作为基础。当光照命中表面时，它直接基于它的粗糙金属性反射。&lt;/p&gt;&lt;p&gt;现在，假设我们把它覆盖在一层绿色的绝缘体材质下。&lt;/p&gt;&lt;p&gt;在图中最左侧，材质的厚度很大，因此当光线命中表面时，它只通过绝缘体层反射。所有光传播都被绝缘体层吸收了。此时，绝缘体层的&lt;span style=&quot;font-weight: bold&quot;&gt;传播系数&lt;/span&gt;（transmittance）是0。&lt;/p&gt;&lt;p&gt;如果我们降低绝缘体层的厚度，仅有一部分光会被它吸收，光线就会达到下方的粗糙金属表面。此时，绝缘体层的传播系数就大于0。&lt;/p&gt;&lt;p&gt;如果我们进一步降低厚度，更少的光会被吸收，则传播系数会进一步增加。&lt;/p&gt;&lt;p&gt;在前三个例子中，绝缘体层始终存在——从任何角度的光都会命中它。因此绝缘体层的&lt;span style=&quot;font-weight: bold&quot;&gt;覆盖率&lt;/span&gt;（coverage）是1；另一方面，在最后一个例子中，绝缘体层不存在，它的覆盖率就是0。&lt;/p&gt;&lt;p&gt;依此推演，0.5的覆盖率意味着光有50%的几率命中绝缘体层和粗糙金属表面，以及另50%几率直接命中金属表面。&lt;/p&gt;&lt;p&gt;因此覆盖率定义了slab的存在率，而传播系数定义了一个slab的“1-衰减系数”。&lt;/p&gt;&lt;p&gt;组合在一起，两者共同定义了一个slab的&lt;span style=&quot;font-weight: bold&quot;&gt;通过率&lt;/span&gt;（throughput）。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/a814b0e5fbbc85a7aab87f55eafee03b-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;水平混合运算混合两种材质slab。&lt;/p&gt;&lt;p&gt;假设有一个金属材质，我们将其“水平混合”至一个SSS材质。这意味着我们将分别计算两种材质，并混合两者的计算结果。混合系数源自slab覆盖率的定义。第一个slab将有着等于mix值的覆盖率，同时第二个有着“1-mix”值的覆盖率。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/3285418cf67182a3c24c03e065fec44e-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;而垂直层叠操作，则允许一个材质slab覆盖在另一个之上。&lt;/p&gt;&lt;p&gt;假设我们有一个各向异性的纤维材质。我们想为它覆盖一层绝缘体材质，这样它的传播系数就会影响纤维材质的外观，产生一层微红的染色效果（如图）。&lt;/p&gt;&lt;p&gt;多层效果可以合并，例如我们再将另一层粉尘材质覆盖再其上，它又会影响传播系数以及底部层的通过率。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/c847434723220170b4adaee172d0261c-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;最后，则是覆盖权重运算。&lt;/p&gt;&lt;p&gt;我们从一层有着一定吸收率的绝缘体开始。光传播通过这层表面，被部分吸收，产生图中所示的微黄的传播系数。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/b102b70f7f321bafd65a11bd28900ee6-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;通过覆盖率的权重调整，slab表面“存在”的像素数量被修改了：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;如果覆盖率是1，我们能看到完整的表面。&lt;/li&gt;&lt;li&gt;如果覆盖率是0，则完全看不到。&lt;/li&gt;&lt;li&gt;在两者之间的覆盖率参数，我们能看到表面的一部分。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;*类似天气预报的降雨概率，也是一种覆盖率。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1080&quot; height=&quot;607&quot; src=&quot;https://image.gcores.com/5f753194ed6273ce1346f534601a581a-1080-607.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;很重要的一点是，这种组合操作能明确区分出调整厚度和调整覆盖率的外观区别。&lt;/p&gt;&lt;p&gt;以图中的橙色绝缘体为例：&lt;/p&gt;&lt;p&gt;通过垂直层叠操作，我们可以调整顶层的厚度来影响底层的光传播系数及顶层的通过率，但始终能看到这一层的高光反射。&lt;/p&gt;&lt;p&gt;而通过覆盖率操作，当我们调整顶层的覆盖率，上层的光传播系数保持不变，但它的通过率改变了（由于覆盖率的变化）。（*以图中为例，覆盖的分布是一种离散的情况）&lt;/p&gt;&lt;h1&gt;结语&lt;/h1&gt;&lt;p&gt;以前常有“五彩斑斓的黑”这个调侃，确实从静态的绘制来说某种意义上是无法实现这种效果的。但实际上自然界人们确实能从昆虫的甲壳上观察到这种视觉现象，而实际上虽然“五彩斑斓”“一闪一闪”和“黑”在同一时间确实不是同时存在的——这和观察角度、光照等都有关系，但在一个动态时间的尺度上，这种材质确实是存在的。&lt;/p&gt;&lt;p&gt;通过这次介绍的复合材质系统，这种材质确实能做到了，而这是之前通过普通的shader model无法实现的。&lt;/p&gt;&lt;p&gt;下篇会介绍这篇分享的后面部分，覆盖一些更偏向架构和数据设计的部分。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;最后是资料链接：&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;Authoring Materials That Matters - Substrate in&lt;/span&gt;Authoring Materials That Matters - Substrate in&lt;a href=&quot;https://advances.realtimerendering.com/s2023/2023%20Siggraph%20-%20Substrate.pptx&quot; target=&quot;_blank&quot;&gt;Authoring Materials That Matters - Substrate in Unreal Engine 5 的PPTX&lt;/a&gt;Unreal Engine 5 的PPTX&lt;span style=&quot;font-weight: bold; font-style: italic&quot;&gt;Unreal Engine 5&lt;/span&gt; 的PPTX&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.semanticscholar.org/paper/Practical-multiple-scattering-compensation-for-Turquin/a438914b611ce91f1a819535d3a56cbc407a69f7&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;Practical multiple scattering compensation for microfacet models这篇论文的一个下载地址&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-style: italic&quot;&gt;Real-time subsurface scattering with single pass variance-guided adaptive importance sampling&lt;/span&gt;Real-time subsurface scattering with single pass variance-guided adaptive importance sampling&lt;a href=&quot;https://dl.acm.org/doi/10.1145/3384536&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;Real-time subsurface scattering with single pass variance-guided adaptive importance sampling 论文的一个下载地址&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-style: italic&quot;&gt;Material Advances in Call of Duty: WWII&lt;/span&gt;Material Advances in Call of Duty: WWII&lt;a href=&quot;https://research.activision.com/publications/archives/material-advances-in-call-of-dutywwii&quot; target=&quot;_blank&quot;&gt;Material Advances in Call of Duty: WWII 在动视的文章地址&lt;/a&gt;&lt;/p&gt; </description><link>https://www.gcores.com/articles/191119</link><guid isPermaLink="false">gcores-191119</guid><pubDate>Thu, 21 Nov 2024 07:00:00 GMT</pubDate><author>Hakumen</author><enclosure url="https://image.gcores.com/64a002b5f263a8c5f674609111fa4da2-1080-607.png" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/64a002b5f263a8c5f674609111fa4da2-1080-607.png"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/507b5d7c-09e1-4910-b4c8-1d654e5cc0d0.mp3" length="1893" type="audio/mp3"></enclosure><itunes:duration>0:31:33</itunes:duration><category>知识挖掘机</category></item><item><title>Godot入门到弃坑：3D空间中的化身</title><description>&lt;figure&gt;&lt;img alt=&quot;Godot入门到弃坑：3D空间中的化身&quot; src=&quot;https://image.gcores.com/a7beb40effea25bf211488383e8505cc-1696-930.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/47b356de-c01a-44d7-98b0-1d5e0e89996e.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/47b356de-c01a-44d7-98b0-1d5e0e89996e.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/47b356de-c01a-44d7-98b0-1d5e0e89996e.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;阿凡达&lt;/blockquote&gt;   &lt;h2&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;3D的CharacterBody&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;我们之前已经使用过&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;CharacterBody2D&lt;/span&gt;——一个便于创建2D场景角色的节点。&lt;/p&gt;&lt;p&gt;在3D场景中也有对等的&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;CharacterBody3D&lt;/span&gt;。我们再一次新建一个Player场景，用&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;CharacterBody3D&lt;/span&gt;作为其根节点。&lt;span style=&quot;font-weight: bold&quot;&gt;模板保持默认&lt;/span&gt;，如果默认不是Basic Movement请手动选择，我们稍后在模板代码的基础上修改。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;930&quot; height=&quot;201&quot; src=&quot;https://image.gcores.com/3b4f2fa354ebe360bef531b6cab6b207-930-201.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;实际上从模板中可以看出，3D的&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;CharacterBody&lt;/span&gt;很多属性、方法和2D版本的名字是一样的——只不过相关类型从&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Vector2&lt;/span&gt;变成了&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Vector3&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;总之模板给我们实现了移动和跳，我们暂时不看它是怎么实现的。其实大部分代码和2D版本差不多。模板默认把移动绑定到了箭头上下左右，跳是空格。按照我的习惯，我选择重新定义相关的输入操作，然后绑定。&lt;/p&gt;&lt;p&gt;类似地，我们需要给它一个&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;CollisionShape&lt;/span&gt;，自然，在3D场景中我们需要一个&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;CollisionShape3D&lt;/span&gt;。一般来说对于类人形的角色，大家都爱选胶囊状（capsule）的——就是类似于一个球中间拉开了的感觉。 &lt;/p&gt;&lt;h2&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;别掉下去了&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;有可能，你现在启动游戏你的角色会穿过地板。如果你的地板或者其它场景是用CSG搭建的，那么你只需要在检视面板中找到&lt;span style=&quot;font-weight: bold&quot;&gt;Use Collision&lt;/span&gt;勾选启用碰撞即可。&lt;/p&gt;&lt;p&gt;如果你用的是MeshInstance搭建的场景，那么就需要给它套上一个&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;StaticBody3D&lt;/span&gt;并配置&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;CollisionShape&lt;/span&gt;。所以相比之下CSG确实方便。&lt;/p&gt;&lt;h2&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;摄像机&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;之前我们把摄像机放在了场景中。&lt;/p&gt;&lt;p&gt;当然，有不少3D游戏的摄像机的位置确实（至少在部分场景中）是固定的。比如早期的《生化危机》和《潜龙谍影》。&lt;/p&gt;&lt;p&gt;不过在接一下来的一系列文章里，我主要以FPS的典型形式来讲解。毕竟FPS从3D游戏诞生之初至今都是非常受欢迎的门类。&lt;/p&gt;&lt;p&gt;对于一个典型的第一人称视角游戏来说，摄像机通常放在直接受（真实世界的）玩家控制的东西上。这个东西作为玩家的化身，它身上的摄像机就相当于我们的眼睛。&lt;/p&gt;&lt;p&gt;因此一般来说我们就把摄像机放在接近这个胶囊顶部的位置。&lt;/p&gt;&lt;p&gt;不过……&lt;/p&gt;&lt;h2&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;前面是哪个前面&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;要注意Godot的摄像机的“前方”总是朝向&lt;span style=&quot;font-weight: bold&quot;&gt;z的负方向&lt;/span&gt;。你或许会觉得有点别扭，但这样做的原因之一是为了和OpenGL的选择保持一致。&lt;/p&gt;&lt;p&gt;可以看到在往场景中加入&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Camera3D&lt;/span&gt;节点后，摄像机默认朝向-z方向。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;556&quot; height=&quot;778&quot; src=&quot;https://image.gcores.com/baf00ca24e9978c781600f809c684105-556-778.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;基于这样的决定，很多和方向相关的概念都是围绕它来确定的。在&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Vector3&lt;/span&gt;类型上定义了四个常量，FORWARD、BACK、LEFT、RIGHT分别代表前后左右四个方向（四个长度为1的向量）。其中代表前方的FORWARD就是(0, 0, -1)，其他方向对应的值也就不言而喻了。&lt;/p&gt;&lt;p&gt;另外，&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Vector3&lt;/span&gt;上还有好几个以MODEL（模型）开头的和方向对应的常量。这是为导入的3D素材选用的坐标系，其实就是和3D模型格式glTF相对应的方向。对于一些有涉及朝向的模型来说，需要注意这些坐标系之间的区别。&lt;/p&gt;&lt;h2&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;旋转的表示&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;接下来着手实现用鼠标调整摄像机的角度。&lt;/p&gt;&lt;p&gt;你会说OK，很简单，就是调整一下rotation属性呗。&lt;/p&gt;&lt;p&gt;确实没错。但是你很快就会发现事情比想象的复杂。&lt;/p&gt;&lt;p&gt;在2D中，&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Node2D&lt;/span&gt;的rotation属性是一个标量、一个小数而已。因为在一个2D画面中，我们可以想象观察游戏场景的方向（视线方向）始终是穿过屏幕的一个向量。所以物体&lt;span style=&quot;font-weight: bold&quot;&gt;自身的&lt;/span&gt;旋转始终始终是绕这个方向来谈的。&lt;/p&gt;&lt;p&gt;然而在3D空间中，你可以随便点一个&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Node3D&lt;/span&gt;节点看看它的rotation，可以注意到它的类型是&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Vector3&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;想象一下飞机——或者你可以拿一个飞机模型在手上。它自身在3D空间中的“旋转”涉及三种动作：机头抬头低头、机头绕竖直方向左右旋转、“机翼一边抬高的同时另一边降低”。&lt;/p&gt;&lt;p&gt;虽然上面我是用非常随意的语言描述的，但是它们都分别对应着飞机绕不同的坐标轴旋转。用Godot的坐标系来说，分别就对应着绕x轴、y轴、z轴旋转。因此自然而然地，3D空间中的旋转需要用&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Vector3&lt;/span&gt;来描述。&lt;/p&gt;&lt;p&gt;在这样的场景中，我们有更专业的术语来指代这三种旋转（角度）。Pitch（俯仰）、yaw（偏航）、roll（翻滚），这些术语在航空器相关的领域内应该有更专业的中文说法，欢迎相关行业的读者补充。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;借用维基百科的图&quot; width=&quot;1920&quot; height=&quot;1444&quot; src=&quot;https://image.gcores.com/26b5c9bf315851d9075ab0f43e3bed05-1920-1444.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;使用这三个单词除了可以很好地对应约定熟成的术语之外，还有个好处就是它的含义是和具体的坐标系无关的。例如Unreal的API中很多地方就是直接使用这三个词。&lt;/p&gt;&lt;h2&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;控制摄像机&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;至少近十多二十年典型的FPS操作是用鼠标来控制摄像机以表现“四处看”的感觉。&lt;/p&gt;&lt;p&gt;我们要做的“很简单”，无非是在前后移动鼠标时，让摄像机也跟着调整俯仰角度。在左右移动鼠标时……&lt;/p&gt;&lt;p&gt;这里值得一个停顿。如果不假思索地说在此时让摄像机也调整围绕y轴的旋转角度，那么就会得到一种可能不符合预期的行为——不叫它“问题”是因为在某些类型的游戏中可能就是需要这种行为。&lt;/p&gt;&lt;p&gt;左右移动鼠标时如果只旋转摄像机，那么就会出现视线和玩家角色的前方不在同一直线的问题。在目前主流的FPS中并没有采取这种做法，你肯定知道，我们左右移动鼠标时，整个玩家角色也会同时旋转，然后带动摄像机旋转，进而保持视线前方和玩家角色的前方在同一方向上。另一方面，我们在移动过程中也可以保持移动方向的前方和摄像机的前方指的是同一个方向。&lt;/p&gt;&lt;p&gt;当然，也有一些游戏并不是这样。比如很多有坦克的游戏，鼠标一般是控制炮塔的角度——也同时对应摄像机的角度。而移动是按照坦克底盘的前方来决定方向的。&lt;/p&gt;&lt;p&gt;不过话说回来，典型的FPS操控也是“很假的”。毕竟我们在现实生活中很多时候头部的方向和移动方向都并不一致。但是在快节奏的FPS中，这种真实感很容易让操作变得复杂而影响流畅度。&lt;/p&gt;&lt;p&gt;因此，这里我们希望在左右移动鼠标时直接旋转整个玩家角色。&lt;/p&gt;&lt;h2&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;抓老鼠&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;我的意思是“捕获鼠标”（capture mouse）。&lt;/p&gt;&lt;pre&gt;func _ready() -&amp;gt; void:&lt;br&gt;    Input.mouse_mode = Input.MOUSE_MODE_CAPTURED&lt;/pre&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;喜报：我换了个软件写，代码样式可以直接复制粘贴到机核的编辑器了，不用发图片了。机核的编辑器真的还有很多改善空间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;默认情况下在游戏里你是看得见鼠标指针，也可以把鼠标指针移动到游戏画面外的。将鼠标模式设置为captured就可以实现一般FPS游戏的效果。&lt;/p&gt;&lt;h2&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;获得鼠标移动&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Godot对于鼠标移动的处理目前来看比较奇怪，它没法直接映射到InputMap中。不过经常和鼠标移动对应的手柄摇杆倒是可以——我这里还是以鼠标来讲解。&lt;/p&gt;&lt;p&gt;为此我们需要实现/重写节点的&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;_input(event)&lt;/span&gt;方法。要用到这个方法，原因自然是因为鼠标移动没法映射为一个action然后通过&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Input&lt;/span&gt;的静态方法来处理。&lt;/p&gt;&lt;p&gt;但是聪明的你可能会问，如果两者都可以处理输入，那么如何选择呢？&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;_input&lt;/span&gt;方法会在&lt;span style=&quot;font-weight: bold&quot;&gt;任意输入事件发生时&lt;/span&gt;，&lt;span style=&quot;font-weight: bold&quot;&gt;被&lt;/span&gt;调用。&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Input&lt;/span&gt;的相关方法则是我们主动调用的。因此两者首先在执行频率（时机）上有区别。前者和输入事件保持同步，而后者是我们自行控制、主动查询输入事件的发生。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;_input&lt;/span&gt;唯一的参数是类型为&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;InputEvent&lt;/span&gt;的事件对象，其中包含了各种输入事件的属性。由于&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;_input&lt;/span&gt;会在&lt;span style=&quot;font-weight: bold&quot;&gt;任意&lt;/span&gt;输入事件发生时执行，所以我们必须对事件进行筛选，以便只在感兴趣的输入事件发生时运行相关代码。&lt;/p&gt;&lt;p&gt;尽早返回是个好习惯，只要不感兴趣就直接return：&lt;/p&gt;&lt;pre&gt;func _input(event: InputEvent) -&amp;gt; void:&lt;br&gt;    if event is not InputEventMouseMotion:&lt;br&gt;        return&lt;br&gt;    var mouse_input = event as InputEventMouseMotion&lt;br&gt;    var motion = mouse_input.screen_relative&lt;br&gt;    # TODO&lt;/pre&gt;&lt;p&gt;⚠&lt;span style=&quot;font-weight: bold&quot;&gt;注意&lt;/span&gt;：这段代码中的&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;is not&lt;/span&gt;必须要&lt;span style=&quot;font-weight: bold&quot;&gt;4.3+&lt;/span&gt;的版本才能够正常运作。尽管is和not在之前的版本就已经存在，但是在进行类型检查的时候连着这样用在4.3才开始支持。在之前的版本中只能把not写在最前面。&lt;/p&gt;&lt;p&gt;首先，只要不是鼠标移动我就不管（比如按下左键我们暂也时不管）。&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;InputEvent&lt;/span&gt;是所有输入事件的基类，鼠标相关事件是&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;InputEventMouse&lt;/span&gt;，鼠标移动事件是更具体的&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;InputEventMouseMotion&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;InputEventMouseMotion&lt;/span&gt;中定义了很多和事件有关的属性，其中&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;screen_relative&lt;/span&gt;顾名思义是鼠标移动前后的坐标差值，得到的向量就表示我们鼠标移动的方向和距离。&lt;/p&gt;&lt;p&gt;实际上还存在一个叫&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;relative&lt;/span&gt;的属性。不过如果你的游戏画面设置了某种拉伸（stretch，还记得我们在之前的文章中一开始为适应像素游戏风格素材设置画面拉伸模式的时候吗），&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;relative&lt;/span&gt;可能会被缩放，进而造成不同分辨率情况下移动鼠标给人的感觉不一样。&lt;/p&gt;&lt;h2&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;基本实现&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;可以写点控制摄像机的代码了。&lt;/p&gt;&lt;p&gt;按照刚才说的，鼠标前后移动，摄像机也要跟着“俯仰”。因此定义一个&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;look_up&lt;/span&gt;方法：&lt;/p&gt;&lt;pre&gt;func _input(event: InputEvent) -&amp;gt; void:&lt;br&gt;    # ...&lt;br&gt;    look_up(motion.y * 0.01 * mouse_sensitivity)&lt;br&gt;    &lt;br&gt;func look_up(value: float):&lt;br&gt;    camera.rotate_x(deg_to_rad(-value))&lt;/pre&gt;&lt;p&gt;毕竟已经写到这里了，很多东西的定义我就不展示了，免得占篇幅。&lt;/p&gt;&lt;p&gt;camera是对摄像机节点的引用。我们在&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;_input&lt;/span&gt;中获得的鼠标移动状况会传入到&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;look_up&lt;/span&gt;中。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;rotate_x&lt;/span&gt;方法的名称已经很直白了，就是绕x轴旋转，但是它的参数是以&lt;span style=&quot;font-weight: bold&quot;&gt;弧度&lt;/span&gt;为单位，所以需要转换一下。或者你也可以采用另一种写法：&lt;/p&gt;&lt;pre&gt;camera.rotattion_degrees.x -= value&lt;/pre&gt;&lt;p&gt;&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;rotation_degrees&lt;/span&gt;和&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;rotation&lt;/span&gt;是对应的，只不过是以角度表示的，对于人类来说可能方便一点。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;mouse_sensitivity&lt;/span&gt;是一个export了的整数属性，也就是鼠标灵敏度，我这里默认值设置为50。鼠标移动得到的&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;screen_relative&lt;/span&gt;从一位数到三位数都有可能。如果直接把这个值当成度数传给&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;look_up&lt;/span&gt;，我觉得一般人类可能是无法接受那么快的旋转速度的。因此这里乘以一个系数再乘上灵敏度便于调整。当然这里的数字不是什么魔法数，你可以根据自己的需要调整。&lt;/p&gt;&lt;p&gt;现在上下（前后）移动鼠标，可以看到我们的视野跟着在旋转了。&lt;/p&gt;&lt;p&gt;你的问题可能是，value前面这个负号哪来的？&lt;/p&gt;&lt;h2&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;角度的正负&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;首先，你可以试一下不要这个符号是什么效果。&lt;/p&gt;&lt;p&gt;角度在很多场合中有符号，如果我们把角看成是一条线段/射线/向量绕“起点”旋转出来产生的，那么它的符号体现了角度“是从哪个方向转出来的”。习惯上，你可能接受逆时针为正，顺时针为负。&lt;/p&gt;&lt;p&gt;有可能，这种习惯源自于上学的时候，2D坐标系+x方向朝上，+y方向朝右，一条线段/直线和y轴正方向形成的夹角，其角度我们视作一个正的角度。Godot在2D中以逆时针为负，顺时针为正——但是这和前面提到的习惯来说，也没毛病，毕竟Godot的2D坐标系原点在左上角，即+y方向朝下，+x方向朝右。&lt;/p&gt;&lt;p&gt;在3D中情况还要复杂一些，因为我们有更多的观察角度。例如以围绕x轴的角度为例，&lt;span style=&quot;font-weight: bold&quot;&gt;如果我们顺着x轴正方向看&lt;/span&gt;，那么逆时针为负；&lt;span style=&quot;font-weight: bold&quot;&gt;如果顺着x轴负方向看&lt;/span&gt;，那么逆时针为正。&lt;/p&gt;&lt;p&gt;你可以在场景中使用旋转工具观察一下这些角度的变化。&lt;/p&gt;&lt;p&gt;回到代码的问题。我们的摄像机朝向-z方向。从右边来看（顺着-x方向），“抬头”是逆时针旋转，摄像机的rotation的x分量会加上一个正数。“那为什么value要加负号啊？”，因为&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;InputEventMouseMotion&lt;/span&gt;的&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;screen_relative&lt;/span&gt;是一个2D向量，其坐标的定义和Godot的2D坐标系是一致的，也就是说鼠标向前是在朝&lt;span style=&quot;font-weight: bold&quot;&gt;-y&lt;/span&gt;方向移动，得到的是一个负数。&lt;/p&gt;&lt;h2&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;限制角度&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;目前如果持续前后移动鼠标的话，摄像机会360度旋转。无论是从现实还是FPS的典型设计来说，我们都最多只能转一定角度。简单，还是用clamp：&lt;/p&gt;&lt;pre&gt;camera.rotation_degrees.x = \&lt;br&gt;        clampf(camera.rotation_degrees.x, -70, 70)&lt;/pre&gt;&lt;p&gt;这里的70度是我自己随便选的，你可以自己定义一个export属性。&lt;/p&gt;&lt;h2&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;环顾四周&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;正如前面所说，鼠标左右移动时，我们不再旋转摄像机，而是直接旋转整个玩家角色，因此定义一个turn方法：&lt;/p&gt;&lt;pre&gt;func trun(value: float):&lt;br&gt;    rotate_y(-value)&lt;/pre&gt;&lt;p&gt;实现它要比俯仰简单得多。并且它是不需要限制角度的，毕竟我们可以转圈。类似地，这里也要加个负号。这个函数放在&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;look_up&lt;/span&gt;下方调用就行。&lt;/p&gt;&lt;p&gt;注意，正如前面所说，这里是直接在自己身上调用&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;rotate_y&lt;/span&gt;而不是在camera上面。我们是直接转整个角色，而不是旋转摄像机。&lt;/p&gt;&lt;h3&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;移动的实现&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;模板已经为我们实现了移动的功能。我们简单看一下是如何实现的。&lt;/p&gt;&lt;pre&gt;var input_dir := Input.get_vector(&quot;move_left&quot;, &quot;move_right&quot;, &quot;move_forward&quot;, &quot;move_backward&quot;)&lt;br&gt;    var direction := (transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()&lt;/pre&gt;&lt;p&gt;主要需要看的就是在&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;_physics_process&lt;/span&gt;中这两行代码。&lt;/p&gt;&lt;p&gt;当然首先介绍一个之前在我的代码中没有用到的运算符&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;:=&lt;/span&gt;。鉴于GDScript和Python的相似性，需要提醒一句它和Python中的“海象运算符”（walrus operator，横着看）有&lt;span style=&quot;font-weight: bold&quot;&gt;不同&lt;/span&gt;的语义。&lt;/p&gt;&lt;p&gt;在GDScript中这个运算符意味着在变量初始化时，对变量的类型进行推断，这样就不用自己主动写类型。&lt;/p&gt;&lt;p&gt;言归正传。这两行代码要求出想要移动的方向（最终的direction是一个长度为1的向量）。首先是求玩家输入的方向，&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;Input.get_vector&lt;/span&gt;根据传入的四个输入操作名称来构造一个2D向量。四个参数分别是-x、+x、-y、+y方向。&lt;/p&gt;&lt;p&gt;实际上如果你接受了摄像机朝-z方向的设定，这里反而就更有道理了。这里的-x方向是左，+y方向是向后。实际上，如果我们从上往下看，让-z为前方（正北），+z和+y方向刚好就和Godot的2D坐标系的+y和+x对齐了！是不是一下就不觉得哪里别扭了。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;从上往下看&quot; width=&quot;518&quot; height=&quot;495&quot; src=&quot;https://image.gcores.com/8b1c583429892711b15609302d4dab59-518-495.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;求得输入的方向后，进行“某种运算”求得角色要移动的方向&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;direction&lt;/span&gt;并归一化。这里不得不卖个关子，因为没有一些额外的解释可能无法理解这个“某种运算”怎么就让从输入得到的方向和玩家角色的朝向对齐了。&lt;/p&gt;&lt;p&gt;接下来的代码就没什么新鲜的了。它会根据SPEED的定义来控制移动的速率，然后根据direction的值设置速度，最后调用和&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;CharacterBody2D&lt;/span&gt;功能一样的&lt;span style=&quot;font-family: monospace; word-wrap: break-word&quot;&gt;move_and_slide&lt;/span&gt;实现移动。&lt;/p&gt;&lt;p&gt;跳跃在模板中也实现了，和2D版基本上一样，不多解释。&lt;/p&gt;&lt;p&gt;至此，一个典型的可以在3D空间中漫游的第一人称角色就基本实现了。&lt;/p&gt; </description><link>https://www.gcores.com/articles/191069</link><guid isPermaLink="false">gcores-191069</guid><pubDate>Tue, 19 Nov 2024 02:34:29 GMT</pubDate><author>cameLcAsE</author><enclosure url="https://image.gcores.com/a7beb40effea25bf211488383e8505cc-1696-930.png" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/a7beb40effea25bf211488383e8505cc-1696-930.png"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/47b356de-c01a-44d7-98b0-1d5e0e89996e.mp3" length="1054" type="audio/mp3"></enclosure><itunes:duration>0:17:34</itunes:duration><category>创作笔记</category></item><item><title>《黄金树幽影》地图设计分析——实属遗憾的箱庭化开放世界</title><description>&lt;figure&gt;&lt;img alt=&quot;《黄金树幽影》地图设计分析——实属遗憾的箱庭化开放世界&quot; src=&quot;https://image.gcores.com/a536fc2b6108432852438cba1b9757d8-1920-1080.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/cf27eabc-6d28-4359-80c3-fbe359bcf709.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/cf27eabc-6d28-4359-80c3-fbe359bcf709.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/cf27eabc-6d28-4359-80c3-fbe359bcf709.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;略有瑕疵的尝试&lt;/blockquote&gt;   &lt;h1&gt;前言&lt;/h1&gt;&lt;p&gt;黄金树幽影无疑是一个略有争议的DLC，有些人会因为他纵横交错的地图以及一如既往的神秘感吸引，也有人会因为其探索的不顺畅，奖励的缺失，以及变态的boss机能而给予差评。&lt;/p&gt;&lt;p&gt;本文将谈论FS社在DLC中的开放世界设计思路——开放世界箱庭化，分析FS社如何构建出如此纵横交错的地图以及出现的问题。&lt;/p&gt;&lt;p&gt;在开启正文之前，感谢无音RF制作出的DLC的2D地图，在这个纵深度比较复杂的DLC中，有一个合适的2d地图能更加便于我们去深入探讨黄金树幽影的地图设计。如果读者想直接查看整体2D地图，可自行跳转链接：&lt;a href=&quot;https://www.gcores.com/articles/184022&quot; target=&quot;_blank&quot;&gt;点击跳转&lt;/a&gt;。&lt;/p&gt;&lt;h1&gt;大箱庭制作思路分析&lt;/h1&gt;&lt;p&gt;魂系列箱庭总是和人物机能有很大的关系，在传统魂系列当中，玩家没有办法跳跃，人物的移动也相对缓慢，并且极其容易死亡。受限制的人物机能让玩家能够在不断的死亡中更容易记住箱庭关卡整体构造（hmm死的多就记住了）。而&lt;span style=&quot;font-weight: bold&quot;&gt;环路设计&lt;/span&gt;能让玩家提供充足的奖励，让玩家对探索本身产生浓厚的兴趣。最为经典的环路设计即玩家因为高度问题够不着放在高台上的奖励，选择继续探索最后从高空掉落捡到高台上的奖励的情况。这种方式既提供了玩家物质奖励，也让玩家获得了探索的成就感。同时也让玩家熟悉了箱庭的整体构造。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1496&quot; height=&quot;747&quot; src=&quot;https://image.gcores.com/bac699baaa9b12c3bea89c53dd6e7ab9-1496-747.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt;&lt;p&gt;那么，黄金树幽影是在设计开放世界大箱庭的时候是怎么做的呢？我个人猜想他们做了以下四点。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;以制作艾尔登法环本体地图的思路制作弱纵深地图，确定地图主支线。&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;确认各路线的高度，让各个路线区域形成高低差。&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;利用环形路径将路线区域紧密分布。&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;增加区域作为纵深空缺的填补。&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;首先我们先确定一下黄金树幽影一共有几条线路，黄金树幽影支线一共有四条支线，加上主线总共加起来一共有五条线路。但由于指头路线是需要穿插于其他支线，并没有一个非常明确的区域只服务于该支线，所以理论上来讲，在地图设计中，我们需要设计的一共是四条线路：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;幽影城-&amp;gt;劳弗古遗迹-&amp;gt;神之塔的米凯拉主线。&lt;/li&gt;&lt;li&gt;城的前方-&amp;gt;青蓝海岸-&amp;gt;石棺大洞的托莉娜的支线。&lt;/li&gt;&lt;li&gt;城的前方-&amp;gt;龙洞-&amp;gt;尖刺山的狂龙贝勒支线。&lt;/li&gt;&lt;li&gt;幽影城-&amp;gt;隐者河-&amp;gt;驱暗地下墓地-&amp;gt;谷底的颠火之王支线。&lt;/li&gt;&lt;/ul&gt;   &lt;figure&gt;&lt;img width=&quot;1600&quot; height=&quot;1518&quot; src=&quot;https://image.gcores.com/fa9dfc2a8de633fdff9626e6154f1d89-1600-1518.webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;那么，我们该怎么比较路线的高度呢？由于幽影城和城的前方这两个地方都是我们必定探索的地方，路线前半段的高度并不影响我们探索该支线，所以在这里我们可以用Greedy的思想，剔除掉相同的路线，只针对到达线路最终区域需要的高度来去评判路线的高度。&lt;/p&gt;&lt;p&gt;但我们应该用什么因素去比较呢？这里需要引入到 Kevin Lynch 的城市设计五要素：&lt;span style=&quot;font-weight: bold&quot;&gt;道路（Path）、边界（Edge）、区域（District）、节点（Node）、地标（Landmark）&lt;/span&gt;。在这里，我会选择&lt;span style=&quot;font-weight: bold&quot;&gt;边界&lt;/span&gt;去比较线路的高度而非&lt;span style=&quot;font-weight: bold&quot;&gt;区域&lt;/span&gt;。因为&lt;span style=&quot;font-weight: bold&quot;&gt;只有边界的高度会影响开放世界线路的探索，而区域的高度只会影响内部区域的构造&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;举个简单的例子，幽影城的高度非常显著， 而幽影城本身代表了一个区域。它的入口位于地面，这个入口则是幽影亚坛与幽影城之间的边界。因此，从幽影亚坛到达幽影城时，我们只需关注幽影城入口的高度。换句话说，我们需要考虑的是“-&amp;gt;”的高度，而不是区域本身的高度。 &lt;/p&gt;&lt;p&gt;因此，我们需要确认各条线路的边界及其高度，即：&lt;span style=&quot;font-weight: bold&quot;&gt;劳弗古遗迹（花蕾教堂）&amp;gt;龙洞(龙洞终点）&amp;gt; 青蓝海岸（大洞旁）&amp;gt; 驱暗地下墓地（墓地终点）。&lt;/span&gt;在比较四条线路边界的高度后，我们可以得出结论，在高度上，&lt;span style=&quot;font-weight: bold&quot;&gt;米凯拉主线 &amp;gt; 狂龙贝勒支线 &amp;gt; 托莉娜支线 &amp;gt; 谷底的癫火之王支线。&lt;/span&gt;&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;938&quot; height=&quot;529&quot; src=&quot;https://image.gcores.com/ed72be776c58065e94c4207ca92e4bf0-938-529.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt;&lt;h1&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;缺陷：设计环路，但不完美&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;黄金树幽影的地图环路设计可以说和传统魂系列的环路设计一脉相承，尤其是在主线线路当中有非常明显的环形路线。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;明显的环线路径&quot; width=&quot;1382&quot; height=&quot;368&quot; src=&quot;https://image.gcores.com/d7779dffbbb325cd1f657257bd031ab0-1382-368.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;就像我之前说的一样，黄金树幽影的环路设计让每个区域分布更加紧密，能够让玩家在刚进入幽影之地时，就能感受到极度浓厚的地图纵深感。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;看似比本体小的地图，实际可探索面积是本体的2-3倍&quot; width=&quot;1112&quot; height=&quot;1079&quot; src=&quot;https://image.gcores.com/da55856d1a0925babf743a920cf49b42-1112-1079.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;    &lt;figure&gt;&lt;img alt=&quot;前有绝景，敬请见证&quot; width=&quot;2560&quot; height=&quot;1440&quot; src=&quot;https://image.gcores.com/62b4ac228cfed50e8de4fbcc6d7ad4b1-2560-1440.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;但是，当我到达第一塔的时候，我却并没有任何的“啊哈” 时刻，这种感觉令我感到非常的疑惑，他并没有让我感觉到传统魂系列的探索成就感，带着这种疑惑，我尝试着去分析该线路的环路设计哪一个环节出现了问题。&lt;/p&gt;&lt;p&gt;说到环路设计，我认为环路设计必备的要素就是&lt;span style=&quot;font-weight: bold&quot;&gt;锁钥结构&lt;/span&gt;，无论是低矮城墙高低差，还是单向门，无一例外的夹杂着显性或者隐性的锁钥结构。而黄金树幽影的主线线路也同样如此。在游戏最开始，玩家会在三岔口的赐福中由于法环出色的弱引导前往塔之镇探索，并且在打败舞狮之后，发现神之塔入口被幽影树挡住&lt;span style=&quot;font-weight: bold&quot;&gt;（发现锁）&lt;/span&gt;。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;被树挡住的支路，玩家大概率选择塔之镇或者大桥&quot; width=&quot;1757&quot; height=&quot;1010&quot; src=&quot;https://image.gcores.com/9fe58660bb13c17836c89b450a4f2ab3-1757-1010.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;    &lt;figure&gt;&lt;img alt=&quot;探索成本低，更大概率选择塔之镇&quot; width=&quot;1799&quot; height=&quot;1004&quot; src=&quot;https://image.gcores.com/bf6c04cf40f2e304e48773fd442df02d-1799-1004.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;    &lt;figure&gt;&lt;img alt=&quot;到达神之塔阶梯，发现“锁”&quot; width=&quot;1625&quot; height=&quot;955&quot; src=&quot;https://image.gcores.com/cd3aadb6b138db709fc99882413045b0-1625-955.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;    &lt;figure&gt;&lt;img alt=&quot;地图总览明细&quot; width=&quot;1062&quot; height=&quot;833&quot; src=&quot;https://image.gcores.com/5923508ed8274d4c973cabedf4fa928f-1062-833.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;而经过环形探索之后到达花蕾教堂，我们可以看到一颗小黑树，选择烧树&lt;span style=&quot;font-weight: bold&quot;&gt;（解开锁）&lt;/span&gt;。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;911&quot; height=&quot;743&quot; src=&quot;https://image.gcores.com/fb08d02412b7725b1dbc429e244d4349-911-743.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在烧树之后，玩家会被传送到神之塔城墙外，再走几步路之后下电梯就能到达神之塔阶梯。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;神之塔城墙外&quot; width=&quot;1823&quot; height=&quot;1278&quot; src=&quot;https://image.gcores.com/87f64e8b45048c55c02ac919c58c2819-1823-1278.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;最后，总结一下，主线大致流程如下。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1447&quot; height=&quot;598&quot; src=&quot;https://image.gcores.com/0a451b464bd1255753a8c32ee95e1d3c-1447-598.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt; 大致来看，这个环路设计没有明显的缺陷。然而，我认为它存在一个致命的问题：&lt;span style=&quot;font-weight: bold&quot;&gt;面对面传送&lt;/span&gt;。在魂系列中，这种强制传送几乎在每一作中都会出现，通常是在打败几个Boss之后传送到最终区域。这种设计在法环本体和魂系列中并不会造成太大问题，因为它使玩家不必从较远的区域传送或走回最终区域，从而更便于探索。&lt;/p&gt;&lt;p&gt; 然而，在这个设计中，花蕾教堂与神之塔的距离如此之近，却选择了面对面的快速传送，而不是通过大桥连接劳弗古遗迹与神之塔。这导致整条线路在最后断开，玩家直观地感受到劳弗古遗迹和神之塔并不互通，缺乏一种重新回到起点的连贯感。本应是一个非常出色的开放世界环路设计，却因为不知为何的面对面快速传送，削弱了探索的成就感，实在令人遗憾。 &lt;/p&gt;&lt;h1&gt;缺陷：为了填补空缺不得不增加的新区域&lt;/h1&gt;&lt;p&gt;这是我认为的FS社地图设计做的第四步，也是最后一步。而这一步仅仅是为了前三步产生的纵深空缺而做的，在之后我会把这些区域统称为“额外区域”。最具有代表性的区域就是劳弗古遗迹下方以及教区大道（隐者河上方）。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;898&quot; height=&quot;400&quot; src=&quot;https://image.gcores.com/02ca785c689905a0f9ea2b82e2635c2a-898-400.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;正如前文所述，幽影城负责了高度最高的主线与最矮的谷底支线。由于幽影城与劳弗古遗迹通过高耸的大桥相连以及劳弗古遗迹本身偏高，导致大桥下方和劳弗古遗迹下方如果不增加新区域便会形成空洞。为保持地图的纵深感，劳弗古遗迹下方新增了一个区域。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;高耸的大桥&quot; width=&quot;1582&quot; height=&quot;869&quot; src=&quot;https://image.gcores.com/b0034226d3baed2ccef4a58ce25c4735-1582-869.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;同样，幽影城本身的高度较高，因此过渡到谷底需要更长的线路，这也是玩家觉得谷底支线冗长的原因之一。隐者河则是一个重要的过渡区域，但由于其自身高度偏低，隐者河右侧的教堂大道需要进行一定的抬升，以便作为幽影城的次通道，还能维持地图的纵深感。因此教堂大道应运而生。&lt;/p&gt;&lt;p&gt;而额外区域的根本目的导致了它们在FS社紧张的工期下成为了牺牲品，与主要区域形成巨大的反差。其中包括：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;区域奖励偏少&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;箱庭设计导致区域地图更加的空&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;弱引导质量与主区域差异过大&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;区域奖励少大家都知道这里也不必重复说，我们具体分析一下第二点，制作大箱庭毫无疑问是FS社的目标，而在箱庭中区域与区域之间的连接需要大量的连通区域（类似于2d类银河恶魔城的走廊）。在有限的资源都投入到了主要区域之后，仅剩不多的资源除了要填充额外区域，还要填充额外区域所附带的连通区域，这导致了整个地图有大量的真空，为了填补这种真空，就不得不用一些低级素材去填充这些地方，导致了奖励如同排泄物，地图又大又空。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1450&quot; height=&quot;680&quot; src=&quot;https://image.gcores.com/0742aa28db0233267eaab747d88c5ae0-1450-680.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;在谈第三点，在我看来黄金树幽影的弱引导质量是参差不齐的，尤其在比较主要区域和额外区域的时候会更加明显。举个例子，主要线路当中，线路与线路之间存在着优先级。米凯拉主线要远远大于其他支线，而在这里FS社做出的弱引导可谓是教科书级别。&lt;/p&gt;&lt;p&gt;城的前方可以说是主支线的分岔口，那该怎么隐性的让玩家往主线路线前进成为了该区域需要着重设计的地方。游戏先在艾拉克大桥上通过敌人摆放强迫玩家冲锋，并且在放置了篝火，幽影碎片等作为POI（Point of Interest）来弱引导玩家往恩希斯城的方向去探索，用优秀的弱引导来分清了线路的主次关系。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;优秀的POI放置&quot; width=&quot;1487&quot; height=&quot;965&quot; src=&quot;https://image.gcores.com/910497b61e7c57cd2a3ef4e2ed3e619d-1487-965.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;    &lt;figure&gt;&lt;img alt=&quot;具体路线&quot; width=&quot;754&quot; height=&quot;589&quot; src=&quot;https://image.gcores.com/cd3274f1227e50c718b0adea4cbf4da9-754-589.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;对于额外区域的弱引导，FS社的表现可谓灾难级别。糟糕的引导设计使得玩家在寻找劳弗古遗迹下方时遇到了极大的困难。首先，我们需要引入一个关卡设计的重要概念：&lt;span style=&quot;font-weight: bold&quot;&gt;功能可供性（Affordance）&lt;/span&gt;。这个词可能有些难以理解，我个人的理解是一种能够吸引人们与之进行特定功能交互的特性。如果一个功能是让玩家探索，那么它的affordance就是吸引玩家进行探索的能力。可以将某个物品视为一个钩子，如果它具有足够的功能可供性（诱饵），玩家就会被吸引过去。例如，具有明显路径的道路拥有更高的探索可供性，而在树木密布、缺乏明显路径的地方，探索可供性则显著降低。在理解功能可供性之后，我们可以通过这个概念去分析dlc中额外区域的弱引导。&lt;/p&gt;&lt;p&gt;首先我们分析一下教区大道和古遗迹下方线路，两者路线都是从穆斯废墟开始，如果单看2d地图，我们无法感知每条路线的探索可供性，但可以给我们一个大局上的参考。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;绿：遗迹下方，黄：教区，红：主区域，实：清晰路径，虚：模糊路径&quot; width=&quot;1112&quot; height=&quot;426&quot; src=&quot;https://image.gcores.com/925aef703856dcb55463a023a4ac2865-1112-426.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;而在实际游戏中，玩家需要通过探索穆斯废墟才能到达波尼村，需要穿过一片森林才可以到达废墟北侧湖，旁边还有一个主道路。同样，我们可以通过分析它们的功能可供性（Affordance）来看看这里到底除了什么问题。&lt;/p&gt;&lt;p&gt;我们来谈谈穆斯废墟，它是一个非常典型的基于玩法机制去吸引玩家探索的例子， 由于废墟内部通常藏有优质装备，玩家为了获取这些装备，自然会被吸引，进而展开探索。因此，穆斯废墟具有较强的探索可供性，激发了玩家的探索欲望。 &lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;废墟内部有装备奖励，这是玩家默认的共识&quot; width=&quot;2560&quot; height=&quot;1440&quot; src=&quot;https://image.gcores.com/b7a3928549e1e922fc9ab5d9b5deb270-2560-1440.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;通往废墟北侧湖的路则是树木密布，没有明显清晰道路的模糊路径这导致了废墟北侧湖的路径的探索可供性偏弱。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;树木密布的模糊路径&quot; width=&quot;2560&quot; height=&quot;1440&quot; src=&quot;https://image.gcores.com/b1d519e81169b4e9d5e4adcf9c66e97f-2560-1440.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;    &lt;figure&gt;&lt;img alt=&quot;穿过树林到达废墟北侧湖&quot; width=&quot;2560&quot; height=&quot;1440&quot; src=&quot;https://image.gcores.com/ee4101e13c70209387b51baa3ad0ada3-2560-1440.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;通往幽影城的主路是有明显道路的清晰路径，这代表其探索可供性会更强。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;2560&quot; height=&quot;1440&quot; src=&quot;https://image.gcores.com/3106c8327aaf206536a6cf982acf5c5a-2560-1440.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt; 当玩家遇到穆斯废墟时，他们很可能会选择探索废墟进而到达教堂大道。如果他们不选择探索，通常也会继续沿着主路前进。无论玩家做出怎样的决策，几乎都很难直接到达劳弗古遗迹下方的线路入口。然而，地图碎片却位于遗迹下方，而低质量的额外区域弱引导也间接导致了许多玩家在地图探索过程中遇到困难。 &lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1938&quot; height=&quot;695&quot; src=&quot;https://image.gcores.com/835fb74333cc88843fa648b3bb04aad8-1938-695.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h1&gt;缺陷： 难以被感知的地图纵深&lt;/h1&gt;&lt;p&gt;黄金树幽影无疑是FS社在地图纵深的大胆尝试，玩家在一开头就能直接看到整个地图无以伦比的纵深。但是在探索过程中，大部分玩家没有办法感受到区域与区域之间的上下关系，看地图寻找目标的时候也并不会去考虑地图的纵深。接下来，我将深入探讨为什么这种地图纵深难以被感知。我认为，以下三点是造成这种情况的主要因素。 &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;悬崖的不可探索性&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;z轴路径的缺失&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;灵泉的大材小用&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;悬崖的不可探索性&lt;/h1&gt;&lt;p&gt; 当我们判断自己能否探索某个地方时，往往与我们的能力息息相关。如果角色无法游泳，那么大海的探索可供性(Affordance)几乎为零。在《黄金树幽影》中，虽然角色可以跳跃并骑乘灵马，但我们并不能像林克那样在空中滑翔，悬崖的坠落会导致角色死亡，这使得悬崖的探索可供性非常低。 &lt;/p&gt;&lt;p&gt; 正如前文所提到的，SOTE（《黄金树幽影》）将魂系列中高台的设计替换为悬崖，这在流程上似乎没有问题。 然而在发现奖励（发现锁）的环节中，悬崖的高度导致玩家发现奖励极其困难，玩家在没有意识到奖励（锁）的情况下，通过了环形路径之后到达高台（解开锁）也不会感觉到任何的“啊哈”时刻。&lt;/p&gt;&lt;p&gt;另一方面由于悬崖的存在， 玩家探索区域边缘的意愿降低，从而无法看到关卡的起点。悬崖的高度也使得玩家无法直接跳下到达起点，这直接导致了他们无法感受到相邻两个区域之间的纵深关系。玩家就像是在走一条漫长的平地，无法真正体会到地图的纵深感。 &lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1145&quot; height=&quot;544&quot; src=&quot;https://image.gcores.com/bf01f785a1d6369951b81543f837c9de-1145-544.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这也可以从劳弗古遗迹下方的路径看出来，劳弗古遗迹下方坐落在幽影亚坛下方，但由于悬崖的不可探索性玩家没有办法发现两者的上下关系。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;难以感知的上下关系&quot; width=&quot;391&quot; height=&quot;257&quot; src=&quot;https://image.gcores.com/a167237b5a2ce87cbb13cd3feec34405-391-257.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h1&gt;Z轴路径的缺失&lt;/h1&gt;&lt;p&gt; 当今开放世界游戏中，专注于Z轴探索的作品并不多，比较知名的可能只有黄金树幽影和塞尔达传说：王国之泪。在王国之泪中，林克获得了新的能力：倒转乾坤和遁地术。这些能力与Z轴探索密切相关。例如，空岛上的石头可以通过倒转乾坤的技能被运送到空中，而遁地术则允许玩家穿过头顶的地面。这两种技能展现了《王国之泪》在Z轴探索方面的创新。此外，游戏的地图也被划分为空中、地面和地下，进一步体现了对Z轴的大胆尝试。倒转乾坤和遁地术为玩家提供了隐藏的Z轴路径，尽管《王国之泪》的开放世界地图并不要求玩家具备复杂的脑内地图，但这些Z轴路径却增强了游戏世界的纵深感。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;603&quot; height=&quot;333&quot; src=&quot;https://image.gcores.com/cbb094c2a8fb304a86477d4b6cf06934-603-333.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;黄金树幽影同样也在地图上充分利用了z轴，但却缺乏适配的Z轴路径 。平面上两个区域虽然紧邻，仅存在上下关系，但是却没有z轴路径让它们连接起来。在魂系列箱庭设计中，跳下这个动作就好像是整个环形路径中的一节隐藏路径一样，当你跳下时瞬间明白了整个箱庭的纵深结构。黄金树幽影同样也有类似的环形路径，当你穿过龙飨大祭坛，来到卡罗地下墓地的时候，看见美丽动人的红花海，下方紧邻的就是神秘的青蓝海岸。当你从红花海跳下直接到达青蓝海岸的时候，龙洞和青蓝海岸的纵深关系在你脑海加深并迅速构建出3d地图，即使它并不像严丝合缝的魂系列箱庭给你的记忆点那么的大，但是也能让你感觉到有纵深的地图是有趣的，而不是设计师强迫你绕远路。可惜的是，像这样的跨区域环形路径，黄金树幽影只有一条。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;真美啊！&quot; width=&quot;2560&quot; height=&quot;1440&quot; src=&quot;https://image.gcores.com/94dcff99e7975adac7d8a5504205ed55-2560-1440.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;另一方面，悬崖的不可探索性让玩家很难发现宫崎老贼最爱的跳跳乐，跳跳乐本身作为z轴路径的作用大打折扣。&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;经典之作&quot; width=&quot;2560&quot; height=&quot;1440&quot; src=&quot;https://image.gcores.com/36483b02773e0a0e78f8121bc1c6e6b2-2560-1440.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt;&lt;h1&gt;灵泉的大材效用&lt;/h1&gt;&lt;p&gt; 在不添加任何人物技能的情况下，灵泉气流是大地图中唯一能够充当Z轴路径的元素。虽然黄金树幽影确实大量应用了灵泉气流，但它们主要集中在区域内探索，鲜有用于大区域与大区域之间的情况。灵泉气流本可以与配套的灵泉封印石结合，形成一个有效的锁钥结构。然而，在五个灵泉封印石中，只有一个是用于古遗迹的捷径，其余四个主要用于探索魔法师塔、山上的无名灵庙以及赐福小区域探索。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1493&quot; height=&quot;1105&quot; src=&quot;https://image.gcores.com/3a57758bd81521793d0fea988c083957-1493-1105.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt; 在整整13个灵泉中，只有位于老者破屋的两个灵泉位于区域边界，其余的灵泉仅限于区域内的探索。这意味着整个地图缺乏区域与区域之间的Z轴路径。这些灵泉本可以作为上下区域的捷径，但FS社并没有充分发挥它们的潜力。 &lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;灵泉分布基本位于区域内，很少位于区域边界&quot; width=&quot;904&quot; height=&quot;867&quot; src=&quot;https://image.gcores.com/7b6f9b49462dabd4546d64cbae6174c4-904-867.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;&lt;/p&gt;&lt;h1&gt;可能的解决方案——跨区域双锁钥结构&lt;/h1&gt;&lt;p&gt;那么，如果在不增加任何游戏机制的情况下有什么解决方案呢，笔者可以给出自己的一个设计方案，仅供参考。&lt;/p&gt;&lt;p&gt;首先我会针对幽影亚坛-&amp;gt;劳弗古遗迹下方路线进行优化，我会用到的东西：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;拉巴斯魔法师塔的玩法&lt;/li&gt;&lt;li&gt;灵泉以及灵泉封印石&lt;/li&gt;&lt;li&gt;圣战教堂的地点&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下面则是我对整个路线的调整：&lt;/p&gt;&lt;p&gt; 首先，我计划将劳弗古遗迹下方的神殿镇灵魂气流封印石和灵魂气流设置在圣战教堂的山崖下。圣战教堂的设计将与拉巴斯魔法师塔类似，上层将放置丰厚奖励。玩家可以通过山崖下的灵泉气流到达教堂的上层，获取这些奖励。 &lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;561&quot; height=&quot;365&quot; src=&quot;https://image.gcores.com/1c68258cd3a79ced957d3bddd02b0bf1-561-365.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;这样让一个灵魂气流同时作为跨区域的捷径以及探索圣战教堂的钥匙。因此我把灵魂气流称为探索圣战教堂的奖励钥，而封印石称为解开灵魂气流的捷径钥，最后形成跨区域三物体双锁钥结构。&lt;/p&gt;   &lt;figure&gt;&lt;img width=&quot;1203&quot; height=&quot;194&quot; src=&quot;https://image.gcores.com/762355740f22b1b5a1e64f864bf0713b-1203-194.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;根据双锁钥结构，该线路整体如下：&lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;黄：奖励锁钥，紫：捷径锁钥，蓝：区域&quot; width=&quot;1953&quot; height=&quot;797&quot; src=&quot;https://image.gcores.com/21de962f3f3df21412603db9b478a714-1953-797.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;p&gt;由于奖励（圣战教堂）仍在幽影亚坛区域内，玩家在线路起点就能发现奖励锁（无法探索圣战教堂），这解决了因悬崖高度而看不到奖励、导致玩家无法感知锁的情况。此外，捷径锁钥结构的存在保留了幽影亚坛与劳弗古遗迹之间的环形路径。灵泉气流为两个区域提供了缺失的Z轴路径，让玩家能够感受到幽影亚坛与劳弗古遗迹下方的上下关系。通过灵泉气流飞升至圣战教堂上层并获得奖励，玩家会体验到谜题解开的“啊哈”时刻。 &lt;/p&gt;   &lt;figure&gt;&lt;img alt=&quot;优美的幽影亚坛毫无疑问是最让人印象深刻的区域&quot; width=&quot;2560&quot; height=&quot;1440&quot; src=&quot;https://image.gcores.com/2c92aea17dbc542708326ce40a1678e9-2560-1440.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;    &lt;figure&gt;&lt;img alt=&quot;圣战教堂下的幽影亚坛&quot; width=&quot;2560&quot; height=&quot;1440&quot; src=&quot;https://image.gcores.com/8a48728498d03b157ae5f596053d7b11-2560-1440.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;h1&gt;总结&lt;/h1&gt;&lt;p&gt;黄金树幽影在箱庭化开放世界上并没有给予我们一个满分答卷，它乍一看给了一个错综复杂，震撼无比的地图设计，但是细究各个路线时，却缺乏作为一个箱庭应该有的细节。有些人可能会说黄金树幽影迷路只是因为人类很难以处理z轴信息，但是我认为这种观点略显偏颇。在现实生活中，我们并非无法处理z轴，而是由于重力影响，通常缺乏直接飞升的z轴路径供我们去处理。但是游戏不一样，游戏赋予了人类突破现实的枷锁去实现自己的理想的幻想乡的能力，设计师可以去设计出现实世界没有办法做到的路径，比如遁地术，比如倒转乾坤的空中石梯，这些都给了我们良好的纵深探索体验。 然而黄金树幽影献给了我们纵深度拉满的地图，却没有在探索上给予我们相对应的纵深体验。而这正是我认为《黄金树幽影》的箱庭化开放世界令人遗憾之处。&lt;/p&gt;&lt;blockquote&gt;前有结尾，敬请见证！&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt; </description><link>https://www.gcores.com/articles/190458</link><guid isPermaLink="false">gcores-190458</guid><pubDate>Wed, 13 Nov 2024 08:30:00 GMT</pubDate><author>UGotM3</author><enclosure url="https://image.gcores.com/a536fc2b6108432852438cba1b9757d8-1920-1080.jpg" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/a536fc2b6108432852438cba1b9757d8-1920-1080.jpg"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/cf27eabc-6d28-4359-80c3-fbe359bcf709.mp3" length="1314" type="audio/mp3"></enclosure><itunes:duration>0:21:54</itunes:duration><category>知识挖掘机</category></item><item><title>从零开始认识谜题设计</title><description>&lt;figure&gt;&lt;img alt=&quot;从零开始认识谜题设计&quot; src=&quot;https://image.gcores.com/602f31a0037cbc57952852b8bc0052e0-1456-816.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;       &lt;audio controls=&quot;&quot;&gt;&lt;source src=&quot;https://alioss.gcores.com/uploads/audio/83864a1c-17d6-4542-a5b3-f4acd6f63af0.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;object data=&quot;https://alioss.gcores.com/uploads/audio/83864a1c-17d6-4542-a5b3-f4acd6f63af0.mp3&quot;&gt;&lt;embed src=&quot;https://alioss.gcores.com/uploads/audio/83864a1c-17d6-4542-a5b3-f4acd6f63af0.mp3&quot;&gt;&lt;/object&gt;&lt;/audio&gt;      &lt;blockquote&gt;探讨什么是好谜题和一些设计要点&lt;/blockquote&gt;   &lt;p&gt;本文面向的是没怎么做过解谜游戏又想做这个方向的新人设计师（欢迎专业设计师莅临指导！），意在系统化地讲一下谜题设计是怎么回事，归纳一些全品类解谜（不仅是电子游戏）的通用注意事项，一部分观点来自《游戏设计艺术》一书，另一部分来自经验总结，仅供大家参考。&lt;/p&gt;&lt;h1&gt;一、什么样的谜题是（最）好的？&lt;/h1&gt;&lt;p&gt;在动手设计之前，我们首先要明确这个问题。&lt;/p&gt;&lt;p&gt;谜题和故事不同，一百个读者心中会有一百个哈姆雷特，但一百个玩家心中不太可能有一百套谜题评价标准。玩家对谜题的评价只源自一件事——我在解谜过程中的体验好不好。&lt;/p&gt;&lt;p&gt;所以标题的问题换种说法就是：什么样的谜题设计，才能让玩家在解谜过程中体验好？&lt;/p&gt;&lt;p&gt;再进一步，&lt;span style=&quot;font-weight: bold&quot;&gt;当玩家获得很好的解谜体验时，这一过程中究竟发生了什么？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在给出结论前，我想举一个生活中的例子。&lt;/p&gt;&lt;p&gt;也许大家玩过线下的密室逃脱游戏（密室逃脱可以简单理解成把玩家关在屋子里解谜，只有解开了才能走出屋子，中间穿插着NPC的表演），假设你现在就在玩密室，你的面前出现了一个密码盘，上面有1-6六个数字键，你要输入正确的答案才能打开下一扇门。&lt;/p&gt;&lt;p&gt;【情况①】除了密码盘本身，什么信息都没有了。你的体验好么？&lt;/p&gt;&lt;p&gt;——不好。谜题&lt;span style=&quot;font-weight: bold&quot;&gt;不能没有引导&lt;/span&gt;，不然玩家不知道怎么做。&lt;/p&gt;&lt;p&gt;【情况②】密码盘旁边还放了一张提示卡，上面写着“三个数字”。你的体验好么？&lt;/p&gt;&lt;p&gt;——不好。是有提示了，但跟没说一样。谜题的引导如果&lt;span style=&quot;font-weight: bold&quot;&gt;不清晰，就和没有一样&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;【情况③】密码盘旁边有提示卡，卡上的信息也全，但你没看懂。你只是在键盘上乱按一气，恰巧按到了正确答案机关就打开了。你的体验好么？&lt;/p&gt;&lt;p&gt;——不太好。你只是通关了，但你根本没明白解题的逻辑，你只会觉得解开得莫名其妙。&lt;/p&gt;&lt;p&gt;这类问题是设计师视角里的盲区。谜题被用来作为关卡的障碍，但&lt;span style=&quot;font-weight: bold&quot;&gt;玩家通关了没有被卡住和谜题设计合理不能完全划等号&lt;/span&gt;。如果没有合理推导的过程，单纯把谜题解开并不会带给人成就感，顶多是觉得“哦，解开了”。&lt;/p&gt;&lt;p&gt;同样的逻辑，试错虽然是通向答案的常见验证手法，但不要把试错刻意设计成解谜的一环。一旦玩家放弃思考只用试错的方式来通关，就会特别无聊。&lt;/p&gt;&lt;p&gt;【情况④】密码盘旁边有提示卡，卡上画着三种颜色，红绿蓝。你低头看键盘，发现键盘全是彩色的，有三个数字键正好对应着这三个颜色。你按顺序按下三个数字键，机关打开。你的体验好么？&lt;/p&gt;&lt;p&gt;——还是不太好。你可能会觉得“这太简单了”。看见颜色、找到颜色、按下颜色，这几个步骤靠本能就能完成，这其实不算一道谜题，&lt;span style=&quot;font-weight: bold&quot;&gt;只是一个操作&lt;/span&gt;，执行操作同样不会带给人多大的成就感。&lt;/p&gt;&lt;p&gt;更好的处理是在颜色对应的逻辑里加一步or多步阻碍，比方说密码盘其实重刷过一遍漆，你要还原真正的对应关系什么的。总之是在真相上扔一个烟雾弹（推理和解谜在这一点上完全一致），玩家在识破障眼法的同时就会动脑筋，哪怕只动一点点，状况也会变得有意思。&lt;/p&gt;&lt;p&gt;现在回归问题，最好的解谜体验（我自己说的）只有一种——&lt;/p&gt;&lt;blockquote&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;玩家依靠自己的聪明才智，通过设计师清晰的引导，在感到失望之前就“灵光乍现”，成功越过了设计师设下的障碍，这一刻玩家获得了与其跨越障碍时的用心程度相匹配的成就感。&lt;/span&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;灵光乍现&lt;/span&gt;一词源自《游戏设计艺术》这本书，指的是玩家突然领悟到谜题解法的那一刻（类比柯南听到少年侦探团随便说些什么结果就想到犯人是谁）。灵光乍现本来就不容易，有时候灵光就是不出现，玩家和设计师都只能干着急。为了避免这种卡死了的情况，书中有给出一种保底方案，我这里再补充三点个人思考，一并列在下面：&lt;/p&gt;&lt;p&gt;1、 通过设计，&lt;span style=&quot;font-weight: bold&quot;&gt;让玩家（近乎）百分百做错一遍，再百分百做对一遍&lt;/span&gt;&lt;/p&gt;&lt;p&gt;玩家解不开迷就会一直尝试一直出错，那为什么不在出错的同时引导TA？我的同事曾经出过一道实物解谜，玩家会拿到一支注射器，加水后利用特定方向的光线折射就能在一张字阵上找到对应的答案。那么要给注射器加水的提示写在哪里呢？&lt;/p&gt;&lt;p&gt;明面上是没有提示的，不过当玩家拿着空注射器解谜时，就会在字阵上找到对应的两个字——加、水。&lt;/p&gt;&lt;p&gt;当时大家只觉得这个提示方法颇为恶趣味，但回过头来看，我认为这是相当好的谜题设计，让我记了好多年。&lt;/p&gt;&lt;p&gt;2、 抛出一个or多个&lt;span style=&quot;font-weight: bold&quot;&gt;显眼的误导项&lt;/span&gt;，让玩家先大概率做错，再大概率做对&lt;/p&gt;&lt;p&gt;最近在玩解谜推理游戏《金像迷案》，它的玩法是搜集信息后选词填空验证答案。在太多关卡里，这个游戏都让我达成了“排除所有的错误选项后，我才能找到正确答案”的惊奇体验。我琢磨了一下它是怎么做到的，发现就是利用大量误导项，把误导信息放在更显眼的地方，把关键信息放在不起眼的角落，往往只是画面上的一个小点。如果不仔细观察，第一遍推理时必会漏掉，但如果刻意寻找，又会意识到“可恶，这明明一开始就在这里啊！”&lt;/p&gt;&lt;p&gt;新手在设计谜题时，往往会害怕把谜题设计得太过简单，认为上难度才会带给玩家成就感。然而，一旦玩家被彻底难住了，在灵光乍现之前就会失去耐心，甚至直接退出游戏。当一道题真的很难时，&lt;span style=&quot;font-weight: bold&quot;&gt;错误反馈会指向正确的路径&lt;/span&gt;，&lt;span style=&quot;font-weight: bold&quot;&gt;困难在一次次挑战中逐渐递减&lt;/span&gt;，玩家的体验才会更好。&lt;/p&gt;&lt;p&gt;解谜游戏和魂类游戏不一样，不是靠受苦和征服来达成目标的。打不过动作游戏时，我们可以欣然说出“我菜，我不是这类受众”，但在死活解不开谜题时，玩家一半时间会怀疑“难道我是笨蛋么”，另一半时间会质疑“设计师根本不会出题！”&lt;/p&gt;&lt;p&gt;3、 给出谜题提示，让玩家&lt;span style=&quot;font-weight: bold&quot;&gt;自行选择&lt;/span&gt;是否要看&lt;/p&gt;&lt;p&gt;这就是书中提到的那种保底方法，你能在大量手机解谜游戏上看到类似的设计。画面右上角会放一个“？”，点开后有三个谜题提示按钮，提示程度是逐渐直给的。通常还伴随着不看提示通关就能获得更高排名这样的奖励设置。&lt;/p&gt;&lt;p&gt;看提示必然会折损玩家的成就感，但无论如何，也比卡死了要好。&lt;/p&gt;&lt;p&gt;4、 制造一个虚假的灵光乍现&lt;/p&gt;&lt;p&gt;我的另一位同事曾经接手过一个设计得很复杂的谜题，正确答案是AABCC，但玩家基本只能得出ABC。出于某些原因谜题已经无法修改了，所以他动了程序判定的逻辑，让玩家无论得出哪种答案都能通关。善意的欺骗建立在一个前提上——玩家此时想要的正是证明自己有能力，并且还付钱了。&lt;/p&gt;&lt;p&gt;我还想指出一点，努力制造良好的解谜体验，这么做不单是服务玩家，也服务于设计师本人。有什么会比你向玩家输出了一套意图，结果玩家完全领悟了你的意图更让人开心呢？特别是如果你就在一旁观测了玩家的解谜全过程，看着对方的每一个行动都落在你的预期内，你一定会暗爽并认可自己。&lt;/p&gt;&lt;p&gt;谜题设计本身就是一场游戏，一场属于玩家和设计师的博弈。对于玩家来说，那是“你设计得有点水平，可惜都被我看穿了”；对于设计师来说，那是“我就知道你会那么想，所以我才这么做。”&lt;/p&gt;&lt;p&gt;好的谜题设计，在解开谜题的那一刻，&lt;span style=&quot;font-weight: bold&quot;&gt;设计师与玩家心意相通。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;这就是我们设计的终极目标。&lt;/p&gt;&lt;h1&gt;二、谜题的分类——叙事解谜&lt;/h1&gt;&lt;p&gt;借用同事的说法，解谜游戏可以直接分成两大类：叙事解谜和关卡解谜。前者就是《锈湖》，后者就是《推箱子》。二者的一大区别在于是否有核心机制。&lt;/p&gt;&lt;p&gt;叙事解谜顾名思义是以剧情为主导，中间穿插谜题。设计的流程是先写一个故事，把故事拆成一个个场景，在每个场景里因地制宜寻找解谜要素。&lt;/p&gt;&lt;p&gt;叙事解谜不需要核心机制，每道题与每道题之间相对独立，没有内在的联系。解谜的逻辑是一种天然的、生活化的逻辑，例如：&lt;br&gt; &lt;br&gt;&lt;span style=&quot;font-style: italic&quot;&gt;看见上锁的门，我们就知道寻找钥匙；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-style: italic&quot;&gt;得到一个打火机时，我们就知道是用来照明/点燃东西的；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-style: italic&quot;&gt;拿到一根老头乐时，我们就知道它可以够到高处的物品/捞起低处的物品。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在我看来，叙事解谜的谜题设计相对简单，出得好不好另说，但是好出。比如“在停电的黑暗厕所里用打火机照明，发现镜子上写着字，冲三次马桶。冲水之后发现马桶堵了，水箱里沉着一把钥匙，用老头乐够出来打开卫生间上锁的门”，诸如此类，基本靠想象力就能出一大堆。&lt;/p&gt;&lt;p&gt;但是，尽管设计的自由度很高，还是有一些注意事项。我会把我想到的都列一下：&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;1、 不要出数学题！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;不要出数学题，也不要出化学题/物理题但本质上还是数学题的题，比如让玩家计算化学式的分子质量……（此处点名批评《买个可乐饼吧》），不管你文案怎么包装，如果本质就是这个，那就真成了做卷子。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;2、 不要出常识题&lt;/span&gt;&lt;/p&gt;&lt;p&gt;并不是常识题不能出，而是你判断不了到底什么是“常识”，这就是我在前文写出密室逃脱的定义的原因。你不能假定所有人都知道你习以为常的东西。红光+蓝光=紫光？如果你不给出一张光谱图，就不能想当然地使用这个逻辑。彩虹的颜色是赤橙黄绿青蓝紫？勉强可以算常识，但还是不建议拿来用，会有人分不清青色到底是什么颜色。&lt;/p&gt;&lt;p&gt;没错，这些问题只是会卡住小一撮人，对大多数玩家都没影响。但是如果你有能力设计出适用性更广的谜题，还请大家将心比心。我们每个人都有成为“个例”的可能，当你被别人的门槛绊住了的时候，你也会希望设计师更宽容。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;3、谜题和剧情的调性要统一&lt;/span&gt;&lt;/p&gt;&lt;p&gt;简单来说，谜题体现的逻辑不要破坏剧情线的逻辑。&lt;/p&gt;&lt;p&gt;游戏《三伏》里有一段剧情是主角被穷凶极恶的坏人关进了房间里，但是开始解谜后，朝着房间内这一侧的门上居然挂着一把挂锁，方便主角两下子打开……这合理吗？这会让人怀疑反派的智商。&lt;/p&gt;&lt;p&gt;顺便说，现实里从里侧反锁房门再打开是不用钥匙的，但在游戏里我们都默认了用钥匙打开的操作，也不会较真。不过在我自己做的游戏里，我还是想改善这一点，所以把房门打不开是被锁住了换成了打不开是门把手掉了，玩家要找一个新的门把手才能把门转开。同时在剧情进度上，握紧门把手开门的过程，也象征着主角第一次打开心门。这是我很满意的一个设计，它做到了让谜题和剧情讲的是同一回事。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;4.、推荐使用“人”的逻辑出题&lt;/span&gt;&lt;/p&gt;&lt;p&gt;主要是方便玩家理解，因为玩家是人类，人很难从非人的角度去思考问题。举个例子，操作人类主角时，面对一只突然爬到身上的大虫子，玩家会本能地想到接下来要驱逐虫子。但主角是一棵树时，这个逻辑就不成立了，没人知道树面对虫子爬上来会是什么反应。当然，要是按照自然规律这种树和这种虫子就是有某种关系，那可以把设定给出来，作为解谜的补充信息。&lt;/p&gt;&lt;h1&gt;三、谜题的分类——关卡解谜&lt;/h1&gt;&lt;p&gt;我自己是不会做关卡解谜的（心虚），不过在这方面有思考很多，还是可以列出几条设计要点： &lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;1、&lt;/span&gt; &lt;span style=&quot;font-weight: bold&quot;&gt;寻找一个核心机制&lt;/span&gt;&lt;/p&gt;&lt;p&gt;关卡解谜最重要的就是核心机制，所有关卡都是在这个机制上拓展的，它将直接决定玩法的优劣。那么，这个机制从哪里来？我能通过冥思苦想原创一个吗？&lt;/p&gt;&lt;p&gt;可以，天才可以，但是普通人也不用那么辛苦地要求自己必须从零原创。市面上绝大多数的机制都是在一些经久不衰的玩法上改的。&lt;/p&gt;&lt;p&gt;让我们请出机制参考三件套——&lt;span style=&quot;font-weight: bold&quot;&gt;扑克牌、国际象棋/象棋、推箱子。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在这些玩法的基础上加入你自己想加的东西，排列组合也好，缝合融合也好，总之一个属于你的新机制就诞生了。然后做一个原型出来，验证一下它是否成立。&lt;/p&gt;&lt;p&gt;还有另一种方法是从生活中寻找能用在游戏里的机制，比方说做菜的时候、用PS作图的时候……不一定是什么东西会带给你启发，不过一旦“移植”过来的机制成立，你将会获得一个在&lt;span style=&quot;font-weight: bold&quot;&gt;市面上不撞款&lt;/span&gt;的核心玩法。这是关卡设计时真正的灵光乍现、妙手偶得。&lt;/p&gt;&lt;p&gt;又及，如果你做的是以走格子为基础的关卡解谜，原型不需要上来就在引擎里做。问过好几位策划，大家都说最开始只用纸笔，然后是在excel里画图，最后才会放到引擎里验证。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;2、规则尽量短、深度尽量深&lt;/span&gt;&lt;/p&gt;&lt;p&gt;简单的规则会降低玩家的学习成本。只用图案和操作反馈就能说明白解谜的规则最好的，而不是用文字，特别是一大串文字。&lt;/p&gt;&lt;p&gt;复杂的规则并不是不行，但要保证玩家的学习体验和游戏体验成正比。如果在理解规则时花费了大量精力，正式玩的时候却只爽了一下下就结束了，那玩家就会不爽。 &lt;/p&gt;&lt;p&gt;关卡的深度体现在机制的搭配上。不同机制在游戏里不应该是一字排开的，最好能摞成一列，排列组合、随意拆解。所以尽量不要设计一个&lt;span style=&quot;font-weight: bold&quot;&gt;和其他机制根本无法组合&lt;/span&gt;的独立机制，或是一个&lt;span style=&quot;font-weight: bold&quot;&gt;过强or过弱难以和其他机制组合&lt;/span&gt;的机制。比如《海天岛传说》里“火元素”十分没用，在不少关卡里根本用不上它，“风元素”又过于强力，使其他机制在它面前都变得不好用了。&lt;/p&gt;&lt;p&gt;对了，如果你的游戏是能通过穷举等手段暴力通关的，记得加上回合数限制来&lt;span style=&quot;font-weight: bold&quot;&gt;防爆破&lt;/span&gt;。不过设计师也不是每次都要堵死除正确路径以外所有的路，偶尔也会允许玩家捡漏走捷径，这要视具体情况而定。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;3、记得做新手教学&lt;/span&gt;&lt;/p&gt;&lt;p&gt;原本我是会平等批判每一个不做新手教学的游戏的，哪怕是在gj里。现在我的态度缓和了一些，有三种情况可以不做新手教学：&lt;/p&gt;&lt;p&gt;1、 你做的是一个demo。时间有限的情况下你想尽可能多做些关卡、展示美术和全方位的制作力，你的目的除了吸引普通玩家还有吸引投资方。&lt;/p&gt;&lt;p&gt;2、 你的游戏有绝对长处，可能是时髦的设定或是美术，玩家会一边抱怨一边耐着性子继续摸索。（说真的这样的游戏还挺多）&lt;/p&gt;&lt;p&gt;3、 你是真正的设计大师！你的游戏看似没做新手教学，真正的教学却融入了游戏中。玩家从行动的第一步就开始领会规则，探索怎么玩也是玩法中的一环。&lt;/p&gt;&lt;p&gt;除此之外，建议大家还是一定做新手教学，道理很简单，就是防止玩家因为&lt;span style=&quot;font-weight: bold&quot;&gt;开局不会玩就退出&lt;/span&gt;游戏了，看不到你后面那么好的设计。为什么平白无故让玩家流失呢？&lt;/p&gt;&lt;p&gt;教学也不单是关于机制的，还包括基础的&lt;span style=&quot;font-weight: bold&quot;&gt;操作说明&lt;/span&gt;。是用鼠标还是用键盘，是点击还是拖拽，要是没机会在游戏里说，至少在介绍页面上提一下吧。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;4、难度曲线回落&lt;/span&gt;&lt;/p&gt;&lt;p&gt;和想象中不同，关节解谜的难度不是从易到难逐步上升的，它是↗↗↗↘↗↗↗↘这样的，每过一段时间，难度曲线就有一次回落。&lt;/p&gt;&lt;p&gt;每次&lt;span style=&quot;font-weight: bold&quot;&gt;引入新机制时，难度曲线必须回落。&lt;/span&gt;因为现在你要教玩家一个新机制了，让人把新机制学会才是这一关真正的目标，其他地方不妨就弄简单点。&lt;/p&gt;&lt;p&gt;其次，就算没有新机制，难度适当回落也是好的。因为一直动脑很累，在一段紧张的脑力考验时间后，一个稍显简单的关卡能给予人休息时间。同时这也是让玩家建立自信心的机会，要是你的游戏超难，玩家玩到一半就会痛苦“我好笨啊我不想玩了”，这个时候插播个简单的，告诉TA“你比你自己想象中更聪明，加油，再坚持一下！”&lt;/p&gt;&lt;h1&gt;四、叙事关卡解谜&lt;/h1&gt;&lt;p&gt;上述两种解谜类型能不能融合呢？当然可以。不过我的经验是两者一混合就没办法五五开了，你可以自行选择要偏重哪一方，是做一个【包含关卡解谜玩法的叙事游戏】，还是【带有叙事要素的关卡解谜游戏】。前者的第一目标受众是喜爱看故事的人，关卡可以做得相对简单点；后者的第一目标受众是解谜核心玩家，关卡可以做得更复杂，文字量相对少。&lt;/p&gt;&lt;p&gt;我非常推荐的一种形式是，把剧情独立出来，让游戏流程变成看一段剧情、玩一个关卡、再看一段剧情、再玩一个关卡，穿插着来。看故事的时候不用绞尽脑汁，动脑的时候不用看太多字，玩家会玩得很舒服。&lt;/p&gt;&lt;p&gt;并且从&lt;span style=&quot;font-weight: bold&quot;&gt;开发效率&lt;/span&gt;来说，这么做能让文案和关卡策划同时动工，两个人可以各做各的，这边的修改几乎不影响另一边。都完成后再让文案对关卡内容进行包装，使二者调性统一。&lt;/p&gt;&lt;p&gt;……&lt;/p&gt;&lt;p&gt;正文的内容就到这里了，再往下讲还有在电子游戏中如何利用镜头/光效引导谜题的大学问，但是我就不了解了，站内应该有其他文章讲过这一块。&lt;/p&gt;&lt;p&gt;以及，理论是理论，实践是实践，在实际的谜题设计中一定是更灵活的，上述所有理论依然只是参考而非束缚。道理上明白但实践中做不到也是常事（写下这些的我本人就很不擅长谜题设计，也不是专门干这个的）。不过我相信一个朴素的道理，工欲善其事必先利其器。如果在行动前就提前知道路上有哪些别人踩过的坑，我就能更好地避开它们，更快一步达到终点。&lt;/p&gt;&lt;p&gt;希望这篇文章对你有所帮助！欢迎大家在评论里补充更多！&lt;/p&gt; </description><link>https://www.gcores.com/articles/190249</link><guid isPermaLink="false">gcores-190249</guid><pubDate>Thu, 31 Oct 2024 06:30:51 GMT</pubDate><author>觉熊</author><enclosure url="https://image.gcores.com/602f31a0037cbc57952852b8bc0052e0-1456-816.png" type="image/jpeg"></enclosure><itunes:image href="https://image.gcores.com/602f31a0037cbc57952852b8bc0052e0-1456-816.png"></itunes:image><enclosure url="https://alioss.gcores.com/uploads/audio/83864a1c-17d6-4542-a5b3-f4acd6f63af0.mp3" length="1250" type="audio/mp3"></enclosure><itunes:duration>0:20:50</itunes:duration><category>创作笔记</category></item></channel></rss>