<?xml version="1.0" encoding="UTF-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>掘金iOS本月最热</title><link>https://juejin.im/ios?sort=monthly_hottest</link><atom:link href="http://rss.datuan.dev/juejin/trending/ios/monthly" rel="self" type="application/rss+xml"></atom:link><description>掘金iOS本月最热 - Powered by RSSHub</description><generator>RSSHub</generator><webMaster>contact@rsshub.app (RSSHub)</webMaster><language>en</language><lastBuildDate>Wed, 19 Mar 2025 23:07:40 GMT</lastBuildDate><ttl>5</ttl><item><title>开箱即食Flutter通用脚手架</title><description>&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/a12c61618d584aec9c62f5a81a70dd04~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU3Vuc2hpbmVCcm90aGVy:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742894767&amp;amp;x-signature=jgC5l%2F2RGk0eERX4ShTH%2ByeRr3M%3D&quot; alt=&quot;Flutter跟原生混编架构&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;这是一款全功能 Flutter 开发脚手架，提供模块化架构与多端适配能力。业务层采用 MVVM 模式，通过 BaseViewModel 实现响应式状态管理及生命周期控制，BaseWidgetPage 统一页面生命周期与 UI 规范。数据层封装网络请求、数据库操作、文件存储及本地缓存，支持加密通信与数据解析。基础组件涵盖屏幕适配、工具类、日志系统、路由管理及事件总线，集成暗黑模式、图片缓存、弹窗队列等实用功能。给你省出一个月的摸鱼时间
，欢迎点赞交流&lt;/p&gt;
&lt;h2 data-id=&quot;heading-0&quot;&gt;业务层&lt;/h2&gt;
&lt;p&gt;业务层我采取的是借助&lt;strong&gt;MVVM（Model-View-ViewModel）模式&lt;/strong&gt; ，定义抽象类&lt;code&gt;BaseViewModel&lt;/code&gt;帮我统一管理&lt;code&gt;ViewModel&lt;/code&gt;，定义抽象类&lt;code&gt;BaseWidgetPage&lt;/code&gt;帮我统一管理&lt;code&gt;WidgetPage&lt;/code&gt;的生命周期&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BaseViewModel&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、&lt;strong&gt;数据绑定&lt;/strong&gt;通过 &lt;code&gt;ChangeNotifier&lt;/code&gt; + &lt;code&gt;Provider&lt;/code&gt; 实现自动响应式更新&lt;/li&gt;
&lt;li&gt;2、&lt;strong&gt;状态管理&lt;/strong&gt;：内置标准状态机（loading/error/success），统一处理异步操作状态&lt;/li&gt;
&lt;li&gt;3、&lt;strong&gt;生命周期管理&lt;/strong&gt;：自动处理资源释放，避免内存泄漏&lt;/li&gt;
&lt;li&gt;4、&lt;strong&gt;错误处理中心化&lt;/strong&gt;：通过 &lt;code&gt;handleError&lt;/code&gt; 统一捕获和处理异常&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;BaseWidgetPage&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、UI管理
&lt;ul&gt;
&lt;li&gt;统一APPBar&lt;/li&gt;
&lt;li&gt;AppBar 标题&lt;/li&gt;
&lt;li&gt;pageID&lt;/li&gt;
&lt;li&gt;buildBody：构建页面主体内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2、声明周期管理
&lt;ul&gt;
&lt;li&gt;1、onPageInit：可以被子类重写的初始化方法&lt;/li&gt;
&lt;li&gt;2、onPageDispose：可以被子类重写的资源释放方法&lt;/li&gt;
&lt;li&gt;3、onPageVisible：页面变为可见&lt;/li&gt;
&lt;li&gt;4、onPageHidden：页面变为隐藏&lt;/li&gt;
&lt;li&gt;5、didChangeAppLifecycleState：应用回到前台页面可见，应用进入后台页面隐藏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FSunshineBrother%2Fflutter-tool%2Ftree%2Fmaster%2Fflutter_module%2Flib%2Fcore%2FbaseWidget&quot; target=&quot;_blank&quot; title=&quot;https://github.com/SunshineBrother/flutter-tool/tree/master/flutter_module/lib/core/baseWidget&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;具体实现代码，请参考这里&lt;/a&gt;&lt;/p&gt;
&lt;h2 data-id=&quot;heading-1&quot;&gt;数据层&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-2&quot;&gt;Flutter跟原生通讯ChannelHandler&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;MyAppMethodChannelHandler统一 Channel 管理类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MyAppMethodChannelHandler&lt;/code&gt;主要提供两个函数&lt;code&gt;setMethodCallHandler&lt;/code&gt;和&lt;code&gt;callNativeMethod&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我还定义了一个&lt;code&gt;APPChannelModel&lt;/code&gt; 类，这是一个数据模型类，用于封装从原生代码接收或发送到原生代码的数据。它包含三个属性：&lt;code&gt;code&lt;/code&gt;、&lt;code&gt;message&lt;/code&gt; 和 &lt;code&gt;data&lt;/code&gt;，并提供了 &lt;code&gt;fromJson&lt;/code&gt; 和 &lt;code&gt;toJson&lt;/code&gt; 方法，用于 JSON 数据和 &lt;code&gt;APPChannelModel&lt;/code&gt; 对象之间的转换。&lt;/p&gt;
&lt;h4 data-id=&quot;heading-3&quot;&gt;使用案例&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;flutter向原生传值,接收到返回值&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-php&quot; lang=&quot;php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;_postData&lt;/span&gt;() async {
    APPChannelModel _model = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;APPChannelModel&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;code&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;message&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;传值成功&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: {&lt;span class=&quot;hljs-string&quot;&gt;&quot;one&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;});
    APPChannelModel? _resultModel =  await MyAppMethodChannelHandler.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;callNativeMethod&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;method&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;post_data&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;model&lt;/span&gt;: _model);
    &lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;flutter向原生传值,接收到返回值:${_resultModel.toJson()}&quot;&lt;/span&gt;);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;监听原生向flutter发送消息&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-scss&quot; lang=&quot;scss&quot;&gt;MyAppMethodChannelHandler&lt;span class=&quot;hljs-selector-class&quot;&gt;.setMethodCallHandler&lt;/span&gt;(Router_Page_Method,
    (model, method) async {
  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(model.toString());
  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(method);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-4&quot;&gt;外观管理&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;ColorManager&lt;/code&gt;：适配暗黑模式&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-kotlin&quot; lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 定义颜色模式枚举&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; ColorMode {
  light,
  dark,
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 颜色管理类&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ColorManager&lt;/span&gt; {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;TextSizeManager&lt;/code&gt;不同屏幕文字大小适配&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-scss&quot; lang=&quot;scss&quot;&gt;class TextSizeManager {
  &lt;span class=&quot;hljs-comment&quot;&gt;// 设计稿基准宽度，根据实际设计稿修改&lt;/span&gt;
  static const double baseWidth = &lt;span class=&quot;hljs-number&quot;&gt;375&lt;/span&gt;;

  &lt;span class=&quot;hljs-comment&quot;&gt;// 根据设备宽度计算适配后的文字大小&lt;/span&gt;
  static double &lt;span class=&quot;hljs-built_in&quot;&gt;getAdaptiveTextSize&lt;/span&gt;(BuildContext context, double originalSize) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 获取当前设备的屏幕宽度&lt;/span&gt;
    double screenWidth = MediaQuery&lt;span class=&quot;hljs-selector-class&quot;&gt;.of&lt;/span&gt;(context)&lt;span class=&quot;hljs-selector-class&quot;&gt;.size&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.width&lt;/span&gt;;
    &lt;span class=&quot;hljs-comment&quot;&gt;// 计算缩放比例&lt;/span&gt;
    double scale = screenWidth / baseWidth;
    &lt;span class=&quot;hljs-comment&quot;&gt;// 返回适配后的文字大小&lt;/span&gt;
    return originalSize * scale;
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;// 提供不同字号的获取方法&lt;/span&gt;
  static double &lt;span class=&quot;hljs-built_in&quot;&gt;getSmallTextSize&lt;/span&gt;(BuildContext context) {
    return &lt;span class=&quot;hljs-built_in&quot;&gt;getAdaptiveTextSize&lt;/span&gt;(context, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;);
  }

  static double &lt;span class=&quot;hljs-built_in&quot;&gt;getMediumTextSize&lt;/span&gt;(BuildContext context) {
    return &lt;span class=&quot;hljs-built_in&quot;&gt;getAdaptiveTextSize&lt;/span&gt;(context, &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);
  }

  static double &lt;span class=&quot;hljs-built_in&quot;&gt;getLargeTextSize&lt;/span&gt;(BuildContext context) {
    return &lt;span class=&quot;hljs-built_in&quot;&gt;getAdaptiveTextSize&lt;/span&gt;(context, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FSunshineBrother%2Fflutter-tool%2Ftree%2Fmaster%2Fflutter_module%2Flib%2Fapp%2Fglobal%2Fconstants&quot; target=&quot;_blank&quot; title=&quot;https://github.com/SunshineBrother/flutter-tool/tree/master/flutter_module/lib/app/global/constants&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;具体实现代码，请参考这里&lt;/a&gt;&lt;/p&gt;
&lt;h2 data-id=&quot;heading-5&quot;&gt;底座业务组件&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-6&quot;&gt;1、基于dio的网络封装&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;实现功能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、get、post请求&lt;/li&gt;
&lt;li&gt;2、自定义RequestOptions&lt;/li&gt;
&lt;li&gt;3、dio请求管理队列，用于统一管理请求&lt;/li&gt;
&lt;li&gt;4、HttpClient链接管理，用于获取解析DNS时间、TCP连接开始时间、SSL握手开始时间（如果是HTTPS）、首包时间&lt;/li&gt;
&lt;li&gt;5、json转model&lt;/li&gt;
&lt;li&gt;6、缓存管理&lt;/li&gt;
&lt;li&gt;7、日志管理拦截器&lt;/li&gt;
&lt;li&gt;8、数据转换管理拦截器&lt;/li&gt;
&lt;li&gt;9、loading拦截器&lt;/li&gt;
&lt;li&gt;10、token续租拦截器&lt;/li&gt;
&lt;li&gt;11、错误处理拦截器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7475651131449819136&quot; target=&quot;_blank&quot; title=&quot;https://juejin.cn/post/7475651131449819136&quot;&gt;参考文章：Flutter dio 手把手教你封装一个实用网络工具&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FSunshineBrother%2Fflutter-tool%2Ftree%2Fmaster%2Fflutter_module%2Flib%2Fcore%2Fhttp&quot; target=&quot;_blank&quot; title=&quot;https://github.com/SunshineBrother/flutter-tool/tree/master/flutter_module/lib/core/http&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;具体实现代码，请参考这里&lt;/a&gt;&lt;/p&gt;
&lt;h3 data-id=&quot;heading-7&quot;&gt;2、基于cached_network_image图片缓存库&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-8&quot;&gt;1、CachedImageWidget图片缓存widget&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-bash&quot; lang=&quot;bash&quot;&gt;CachedImageWidget(imageUrl: _imageUrl, onSuccess: (image,iconUrl){
              &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;图片下载成功：&lt;span class=&quot;hljs-variable&quot;&gt;${image}&lt;/span&gt;,=====&lt;span class=&quot;hljs-variable&quot;&gt;${iconUrl}&lt;/span&gt;&quot;&lt;/span&gt;);
            },onError: (error,iconUrl){
              &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;图片下载失败：&lt;span class=&quot;hljs-variable&quot;&gt;${error}&lt;/span&gt;,=====&lt;span class=&quot;hljs-variable&quot;&gt;${iconUrl}&lt;/span&gt;&quot;&lt;/span&gt;);
            }),
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-9&quot;&gt;2、MyCacheImageManager图片缓存管理&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1、指定缓存目录，缓存有效期、最大缓存数量&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-less&quot; lang=&quot;less&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;MyCustomCacheManager&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;._&lt;/span&gt;()
      : &lt;span class=&quot;hljs-selector-tag&quot;&gt;super&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;Config&lt;/span&gt;(
          key,
          &lt;span class=&quot;hljs-attribute&quot;&gt;stalePeriod&lt;/span&gt;: const &lt;span class=&quot;hljs-built_in&quot;&gt;Duration&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;days&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;), &lt;span class=&quot;hljs-comment&quot;&gt;// 缓存有效期&lt;/span&gt;
          &lt;span class=&quot;hljs-attribute&quot;&gt;maxNrOfCacheObjects&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;// 最大缓存数量&lt;/span&gt;
          &lt;span class=&quot;hljs-attribute&quot;&gt;repo&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;JsonCacheInfoRepository&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;databaseName&lt;/span&gt;: key),
        ));
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2、&lt;code&gt;getFilePath(String imageUrl)&lt;/code&gt; 获取本地目录&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-rust&quot; lang=&quot;rust&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/// 获取图片本地路径&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Future&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;?&amp;gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;getFilePath&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; imageUrl) &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; FileInfo? fileInfo = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; _cacheManager.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;getFileFromCache&lt;/span&gt;(imageUrl);
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fileInfo?.file.path;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3、&lt;code&gt;clearImageCache(String imageUrl)&lt;/code&gt; 移除指定路径下图片&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-dart&quot; lang=&quot;dart&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;移除指定路径下图片&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Future&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;&amp;gt; clearImageCache(&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; imageUrl) &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 移除单个文件的缓存&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
      &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; _cacheManager.removeFile(imageUrl);
      &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39; 移除指定路径下图片已成功移除&#39;&lt;/span&gt;);
    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {
      &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39; 移除指定路径下图片缓存时出错: &lt;span class=&quot;hljs-subst&quot;&gt;$e&lt;/span&gt;&#39;&lt;/span&gt;);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4、&lt;code&gt;clearAllCache()&lt;/code&gt;  移除所有图片&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-dart&quot; lang=&quot;dart&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;移除所有图片&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Future&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;&amp;gt; clearAllCache() &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
      &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; _cacheManager.emptyCache();
      &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;移除所有图片缓存已成功移除&#39;&lt;/span&gt;);
    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {
      &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;移除所有图片缓存时出错: &lt;span class=&quot;hljs-subst&quot;&gt;$e&lt;/span&gt;&#39;&lt;/span&gt;);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5、&lt;code&gt;getCacheSize()&lt;/code&gt;  获取缓存大小&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-arduino&quot; lang=&quot;arduino&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/// 获取缓存大小&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; Future&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;getCacheSize&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; async &lt;/span&gt;{
    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; size = await _cacheManager.store.&lt;span class=&quot;hljs-built_in&quot;&gt;getCacheSize&lt;/span&gt;();
    &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; cacheSize = size / &lt;span class=&quot;hljs-number&quot;&gt;1024&lt;/span&gt; / &lt;span class=&quot;hljs-number&quot;&gt;1024&lt;/span&gt;;
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; cacheSize.&lt;span class=&quot;hljs-built_in&quot;&gt;toStringAsFixed&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FSunshineBrother%2Fflutter-tool%2Ftree%2Fmaster%2Fflutter_module%2Flib%2Fcore%2FcacheImage&quot; target=&quot;_blank&quot; title=&quot;https://github.com/SunshineBrother/flutter-tool/tree/master/flutter_module/lib/core/cacheImage&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;具体实现代码，请参考这里&lt;/a&gt;&lt;/p&gt;
&lt;h3 data-id=&quot;heading-10&quot;&gt;3、ToastUtil&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1、showToast：普通提示信息&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-php&quot; lang=&quot;php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/// 提示信息&lt;/span&gt;
  &lt;span class=&quot;hljs-built_in&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;showToast&lt;/span&gt;(
      {required String msg, &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; duration = &lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt; dismissOnTap = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;}) {
    EasyLoading.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;showToast&lt;/span&gt;(msg,
        &lt;span class=&quot;hljs-attr&quot;&gt;duration&lt;/span&gt;: &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Duration&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;milliseconds&lt;/span&gt;: duration),
        &lt;span class=&quot;hljs-attr&quot;&gt;toastPosition&lt;/span&gt;: EasyLoadingToastPosition.center,
        &lt;span class=&quot;hljs-attr&quot;&gt;dismissOnTap&lt;/span&gt;: dismissOnTap);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2、showLoading：loading加载框&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ini&quot; lang=&quot;ini&quot;&gt;/// 加载框
  static void showLoading({String? msg, bool &lt;span class=&quot;hljs-attr&quot;&gt;dismissOnTap&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;}) {
    EasyLoading.instance
      ..&lt;span class=&quot;hljs-attr&quot;&gt;indicatorType&lt;/span&gt; = EasyLoadingIndicatorType.ring
      ..&lt;span class=&quot;hljs-attr&quot;&gt;loadingStyle&lt;/span&gt; = EasyLoadingStyle.dark
      ..&lt;span class=&quot;hljs-attr&quot;&gt;radius&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;5.0&lt;/span&gt;
      ..&lt;span class=&quot;hljs-attr&quot;&gt;maskColor&lt;/span&gt; = Colors.white.withOpacity(&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;

    EasyLoading.show(
        status: msg,
        maskType: EasyLoadingMaskType.custom,
        dismissOnTap: dismissOnTap)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3、dismiss：隐藏loading&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-csharp&quot; lang=&quot;csharp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; 隐藏loading&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;dismiss&lt;/span&gt;()&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (EasyLoading.isShow) {
      EasyLoading.dismiss(animation: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FSunshineBrother%2Fflutter-tool%2Ftree%2Fmaster%2Fflutter_module%2Flib%2Fcore%2Ftoast&quot; target=&quot;_blank&quot; title=&quot;https://github.com/SunshineBrother/flutter-tool/tree/master/flutter_module/lib/core/toast&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;具体实现代码，请参考这里&lt;/a&gt;&lt;/p&gt;
&lt;h3 data-id=&quot;heading-11&quot;&gt;4、弹窗队列管理器&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;弹窗类型枚举&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-scss&quot; lang=&quot;scss&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 弹窗类型枚举&lt;/span&gt;
enum DialogType {
  center, &lt;span class=&quot;hljs-comment&quot;&gt;// 中间弹窗&lt;/span&gt;
  &lt;span class=&quot;hljs-attribute&quot;&gt;bottom&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;// 底部弹窗&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;弹窗队列实现&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-less&quot; lang=&quot;less&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 添加弹窗到队列&lt;/span&gt;
  &lt;span class=&quot;hljs-selector-tag&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;add&lt;/span&gt;({
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;BuildContext&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;context&lt;/span&gt;,
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;WidgetBuilder&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;builder&lt;/span&gt;,
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;DialogType&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;type&lt;/span&gt; = &lt;span class=&quot;hljs-selector-tag&quot;&gt;DialogType&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.center&lt;/span&gt;,
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;VoidCallback&lt;/span&gt;? &lt;span class=&quot;hljs-selector-tag&quot;&gt;onDismiss&lt;/span&gt;,
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;Color&lt;/span&gt;? &lt;span class=&quot;hljs-selector-tag&quot;&gt;backgroundColor&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;// 底部弹窗专用参数&lt;/span&gt;
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;ShapeBorder&lt;/span&gt;? &lt;span class=&quot;hljs-selector-tag&quot;&gt;shape&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;// 底部弹窗专用参数&lt;/span&gt;
  }) {
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;_queue&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.add&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;DialogConfig&lt;/span&gt;(
      &lt;span class=&quot;hljs-attribute&quot;&gt;context&lt;/span&gt;: context,
      &lt;span class=&quot;hljs-attribute&quot;&gt;builder&lt;/span&gt;: builder,
      &lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;: type,
      &lt;span class=&quot;hljs-attribute&quot;&gt;onDismiss&lt;/span&gt;: onDismiss,
      &lt;span class=&quot;hljs-attribute&quot;&gt;backgroundColor&lt;/span&gt;: backgroundColor,
      &lt;span class=&quot;hljs-attribute&quot;&gt;shape&lt;/span&gt;: shape,
    ));

    &lt;span class=&quot;hljs-selector-tag&quot;&gt;_checkNext&lt;/span&gt;();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;使用案例&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-less&quot; lang=&quot;less&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;_showQueueDiaLog&lt;/span&gt;() {
    &lt;span class=&quot;hljs-comment&quot;&gt;// // 在任意位置添加弹窗&lt;/span&gt;
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;DialogQueue&lt;/span&gt;()&lt;span class=&quot;hljs-selector-class&quot;&gt;.add&lt;/span&gt;(
      &lt;span class=&quot;hljs-attribute&quot;&gt;context&lt;/span&gt;: context,
      &lt;span class=&quot;hljs-attribute&quot;&gt;builder&lt;/span&gt;: (context) =&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;AlertDialog&lt;/span&gt;(
        &lt;span class=&quot;hljs-attribute&quot;&gt;title&lt;/span&gt;: const &lt;span class=&quot;hljs-built_in&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;提示1&#39;&lt;/span&gt;),
        &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: const &lt;span class=&quot;hljs-built_in&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;这是第一个弹窗&#39;&lt;/span&gt;),
        &lt;span class=&quot;hljs-attribute&quot;&gt;actions&lt;/span&gt;: [
          &lt;span class=&quot;hljs-built_in&quot;&gt;TextButton&lt;/span&gt;(
            &lt;span class=&quot;hljs-attribute&quot;&gt;child&lt;/span&gt;: const &lt;span class=&quot;hljs-built_in&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;关闭&#39;&lt;/span&gt;),
            &lt;span class=&quot;hljs-attribute&quot;&gt;onPressed&lt;/span&gt;: () =&amp;gt; Navigator.&lt;span class=&quot;hljs-built_in&quot;&gt;pop&lt;/span&gt;(context),
          ),
        ],
      ),
      &lt;span class=&quot;hljs-attribute&quot;&gt;onDismiss&lt;/span&gt;: () =&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;第一个弹窗关闭&#39;&lt;/span&gt;),
    );

    &lt;span class=&quot;hljs-comment&quot;&gt;// 添加底部弹窗&lt;/span&gt;
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;DialogQueue&lt;/span&gt;()&lt;span class=&quot;hljs-selector-class&quot;&gt;.add&lt;/span&gt;(
        &lt;span class=&quot;hljs-attribute&quot;&gt;context&lt;/span&gt;: context,
        &lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;: DialogType.bottom,
        &lt;span class=&quot;hljs-attribute&quot;&gt;builder&lt;/span&gt;: (_) =&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;CustomBottomSheetContent&lt;/span&gt;(),
        &lt;span class=&quot;hljs-attribute&quot;&gt;backgroundColor&lt;/span&gt;: Colors.grey[&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;],
        &lt;span class=&quot;hljs-attribute&quot;&gt;shape&lt;/span&gt;: const &lt;span class=&quot;hljs-built_in&quot;&gt;RoundedRectangleBorder&lt;/span&gt;(
            &lt;span class=&quot;hljs-attribute&quot;&gt;borderRadius&lt;/span&gt;: BorderRadius.&lt;span class=&quot;hljs-built_in&quot;&gt;vertical&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: Radius.&lt;span class=&quot;hljs-built_in&quot;&gt;circular&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;))));

    &lt;span class=&quot;hljs-selector-tag&quot;&gt;DialogQueue&lt;/span&gt;()&lt;span class=&quot;hljs-selector-class&quot;&gt;.add&lt;/span&gt;(
      &lt;span class=&quot;hljs-attribute&quot;&gt;context&lt;/span&gt;: context,
      &lt;span class=&quot;hljs-attribute&quot;&gt;builder&lt;/span&gt;: (BuildContext context) {
        &lt;span class=&quot;hljs-selector-tag&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;CustomDialog&lt;/span&gt;();
      },
      &lt;span class=&quot;hljs-selector-tag&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-selector-tag&quot;&gt;DialogType&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.center&lt;/span&gt;,
      &lt;span class=&quot;hljs-selector-tag&quot;&gt;onDismiss&lt;/span&gt;: () {
        &lt;span class=&quot;hljs-selector-tag&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;自定义弹窗已关闭&#39;&lt;/span&gt;);
      },
    );
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FSunshineBrother%2Fflutter-tool%2Ftree%2Fmaster%2Fflutter_module%2Flib%2Fcore%2Fdialog&quot; target=&quot;_blank&quot; title=&quot;https://github.com/SunshineBrother/flutter-tool/tree/master/flutter_module/lib/core/dialog&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;具体实现代码，请参考这里&lt;/a&gt;&lt;/p&gt;
&lt;h3 data-id=&quot;heading-12&quot;&gt;5、刷新组件&lt;/h3&gt;
&lt;p&gt;刷新组件基于&lt;code&gt;pull_to_refresh_flutter3&lt;/code&gt; 封装，支持onRefresh和onLoading回调，是否启用上拉加载，以及子内容。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-less&quot; lang=&quot;less&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 封装的刷新组件&lt;/span&gt;
&lt;span class=&quot;hljs-selector-tag&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;CustomRefreshWidget&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;StatelessWidget&lt;/span&gt; {
  &lt;span class=&quot;hljs-selector-tag&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;RefreshController&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;controller&lt;/span&gt;;
  &lt;span class=&quot;hljs-selector-tag&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;Future&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;void&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;Function&lt;/span&gt;() &lt;span class=&quot;hljs-selector-tag&quot;&gt;onRefresh&lt;/span&gt;;
  &lt;span class=&quot;hljs-selector-tag&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;Future&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;void&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;Function&lt;/span&gt;()? &lt;span class=&quot;hljs-selector-tag&quot;&gt;onLoading&lt;/span&gt;;
  &lt;span class=&quot;hljs-selector-tag&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;dataList&lt;/span&gt;;
  &lt;span class=&quot;hljs-selector-tag&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;Function&lt;/span&gt;(BuildContext context, int index) &lt;span class=&quot;hljs-selector-tag&quot;&gt;itemBuilder&lt;/span&gt;;

  &lt;span class=&quot;hljs-selector-tag&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;CustomRefreshWidget&lt;/span&gt;({
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;Key&lt;/span&gt;? &lt;span class=&quot;hljs-selector-tag&quot;&gt;key&lt;/span&gt;,
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.controller&lt;/span&gt;,
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.onRefresh&lt;/span&gt;,
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.onLoading&lt;/span&gt;,
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.dataList&lt;/span&gt;,
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.itemBuilder&lt;/span&gt;,
  }) : &lt;span class=&quot;hljs-selector-tag&quot;&gt;super&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;key&lt;/span&gt;: key);

  &lt;span class=&quot;hljs-selector-tag&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;headerBuilder&lt;/span&gt;(BuildContext context, RefreshStatus? mode) {
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt;;
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;if&lt;/span&gt; (mode == RefreshStatus.idle) {
      &lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; = &lt;span class=&quot;hljs-selector-tag&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;下拉刷新&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attribute&quot;&gt;style&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;TextStyle&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;fontSize&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;));
    } &lt;span class=&quot;hljs-selector-tag&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;if&lt;/span&gt; (mode == RefreshStatus.refreshing) {
      &lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; = &lt;span class=&quot;hljs-selector-tag&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;CircularProgressIndicator&lt;/span&gt;(
        &lt;span class=&quot;hljs-attribute&quot;&gt;valueColor&lt;/span&gt;: AlwaysStoppedAnimation&amp;lt;Color&amp;gt;(Colors.grey),
      );
    } &lt;span class=&quot;hljs-selector-tag&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;if&lt;/span&gt; (mode == RefreshStatus.canRefresh) {
      &lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; = &lt;span class=&quot;hljs-selector-tag&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;释放立即刷新&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attribute&quot;&gt;style&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;TextStyle&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;fontSize&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;));
    } &lt;span class=&quot;hljs-selector-tag&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;if&lt;/span&gt; (mode == RefreshStatus.completed) {
      &lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; = &lt;span class=&quot;hljs-selector-tag&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;刷新完成&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attribute&quot;&gt;style&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;TextStyle&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;fontSize&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;));
    } &lt;span class=&quot;hljs-selector-tag&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;if&lt;/span&gt; (mode == RefreshStatus.failed) {
      &lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; = &lt;span class=&quot;hljs-selector-tag&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;刷新失败&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attribute&quot;&gt;style&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;TextStyle&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;fontSize&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;));
    } &lt;span class=&quot;hljs-selector-tag&quot;&gt;else&lt;/span&gt; {
      &lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; = &lt;span class=&quot;hljs-selector-tag&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;未知状态&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attribute&quot;&gt;style&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;TextStyle&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;fontSize&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;));
    }
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;Container&lt;/span&gt;(
      &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;80.0&lt;/span&gt;,
      &lt;span class=&quot;hljs-attribute&quot;&gt;alignment&lt;/span&gt;: Alignment.center,
      &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: Colors.white, &lt;span class=&quot;hljs-comment&quot;&gt;// 设置背景颜色&lt;/span&gt;
      &lt;span class=&quot;hljs-attribute&quot;&gt;child&lt;/span&gt;: body,
    );
  }

  &lt;span class=&quot;hljs-selector-tag&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;footerBuilder&lt;/span&gt;(BuildContext context, LoadStatus? mode) {
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt;;
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;if&lt;/span&gt; (mode == LoadStatus.idle) {
      &lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; = &lt;span class=&quot;hljs-selector-tag&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;Text&lt;/span&gt;(
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;上拉加载&quot;&lt;/span&gt;,
        &lt;span class=&quot;hljs-attribute&quot;&gt;style&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;TextStyle&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;fontSize&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;),
      );
    } &lt;span class=&quot;hljs-selector-tag&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;if&lt;/span&gt; (mode == LoadStatus.loading) {
      &lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; = &lt;span class=&quot;hljs-selector-tag&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;CircularProgressIndicator&lt;/span&gt;();
    } &lt;span class=&quot;hljs-selector-tag&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;if&lt;/span&gt; (mode == LoadStatus.failed) {
      &lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; = &lt;span class=&quot;hljs-selector-tag&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;加载失败！点击重试！&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attribute&quot;&gt;style&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;TextStyle&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;fontSize&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;));
    } &lt;span class=&quot;hljs-selector-tag&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;if&lt;/span&gt; (mode == LoadStatus.canLoading) {
      &lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; = &lt;span class=&quot;hljs-selector-tag&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;释放加载更多&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attribute&quot;&gt;style&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;TextStyle&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;fontSize&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;));
    } &lt;span class=&quot;hljs-selector-tag&quot;&gt;else&lt;/span&gt; {
      &lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; = &lt;span class=&quot;hljs-selector-tag&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;没有更多数据了&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attribute&quot;&gt;style&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;TextStyle&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;fontSize&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;));
    }
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;SizedBox&lt;/span&gt;(
      &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;55.0&lt;/span&gt;,
      &lt;span class=&quot;hljs-attribute&quot;&gt;child&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;Center&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;child&lt;/span&gt;: body),
    );
  }

  @&lt;span class=&quot;hljs-selector-tag&quot;&gt;override&lt;/span&gt;
  &lt;span class=&quot;hljs-selector-tag&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;build&lt;/span&gt;(BuildContext context) {
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;RefreshConfiguration&lt;/span&gt;(
      &lt;span class=&quot;hljs-attribute&quot;&gt;springDescription&lt;/span&gt;:
          const &lt;span class=&quot;hljs-built_in&quot;&gt;SpringDescription&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;stiffness&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;hljs-attribute&quot;&gt;damping&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-attribute&quot;&gt;mass&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;),
      &lt;span class=&quot;hljs-comment&quot;&gt;// 调整弹簧动画属性&lt;/span&gt;
      &lt;span class=&quot;hljs-attribute&quot;&gt;maxOverScrollExtent&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;,
      &lt;span class=&quot;hljs-comment&quot;&gt;// 减少最大下拉距离&lt;/span&gt;
      &lt;span class=&quot;hljs-attribute&quot;&gt;maxUnderScrollExtent&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,
      &lt;span class=&quot;hljs-attribute&quot;&gt;enableScrollWhenRefreshCompleted&lt;/span&gt;: true,
      &lt;span class=&quot;hljs-attribute&quot;&gt;enableLoadingWhenFailed&lt;/span&gt;: true,
      &lt;span class=&quot;hljs-attribute&quot;&gt;hideFooterWhenNotFull&lt;/span&gt;: false,
      &lt;span class=&quot;hljs-attribute&quot;&gt;enableBallisticLoad&lt;/span&gt;: true,
      &lt;span class=&quot;hljs-attribute&quot;&gt;child&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;SmartRefresher&lt;/span&gt;(
        &lt;span class=&quot;hljs-attribute&quot;&gt;controller&lt;/span&gt;: controller,
        &lt;span class=&quot;hljs-attribute&quot;&gt;enablePullDown&lt;/span&gt;: true,
        &lt;span class=&quot;hljs-attribute&quot;&gt;enablePullUp&lt;/span&gt;: onLoading != null,
        &lt;span class=&quot;hljs-attribute&quot;&gt;header&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;CustomHeader&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;builder&lt;/span&gt;: headerBuilder),
        &lt;span class=&quot;hljs-attribute&quot;&gt;footer&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;CustomFooter&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;builder&lt;/span&gt;: footerBuilder),
        &lt;span class=&quot;hljs-attribute&quot;&gt;onRefresh&lt;/span&gt;: onRefresh,
        &lt;span class=&quot;hljs-attribute&quot;&gt;onLoading&lt;/span&gt;: onLoading,
        &lt;span class=&quot;hljs-attribute&quot;&gt;child&lt;/span&gt;: ListView.&lt;span class=&quot;hljs-built_in&quot;&gt;builder&lt;/span&gt;(
          &lt;span class=&quot;hljs-attribute&quot;&gt;itemCount&lt;/span&gt;: dataList.length,
          &lt;span class=&quot;hljs-attribute&quot;&gt;itemBuilder&lt;/span&gt;: itemBuilder,
        ),
      ),
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 data-id=&quot;heading-13&quot;&gt;底座数据层&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-14&quot;&gt;1、数据库&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-15&quot;&gt;1、db封装&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1、插入数据&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-python&quot; lang=&quot;python&quot;&gt;/*
  &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; dbHelper.insert({&lt;span class=&quot;hljs-string&quot;&gt;&#39;name&#39;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;Alice&#39;&lt;/span&gt;}, &lt;span class=&quot;hljs-string&quot;&gt;&#39;my_table&#39;&lt;/span&gt;);
  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Inserted with ID: $id&#39;&lt;/span&gt;);
  * */
  // 插入数据
  Future&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt; insert(Map&amp;lt;String, dynamic&amp;gt; row, String tableName) &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; {
    Database db = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; database;
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; db.insert(tableName, row);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2、 查询所有数据&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*
  List&amp;lt;Map&amp;lt;String, dynamic&amp;gt;&amp;gt; allRows = await dbHelper.queryAll(&#39;my_table&#39;);
  print(&#39;All rows: $allRows&#39;);
  * */&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;// 查询所有数据&lt;/span&gt;
  &lt;span class=&quot;hljs-type&quot;&gt;Future&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;dynamic&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; queryAll(&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; tableName) &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; {
    &lt;span class=&quot;hljs-type&quot;&gt;Database&lt;/span&gt; db &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; database;
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; db.query(tableName);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3、根据条件查询数据&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-vbnet&quot; lang=&quot;vbnet&quot;&gt;/*
  // 根据条件查询数据
  List&amp;lt;Map&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;, dynamic&amp;gt;&amp;gt; filteredRows = &lt;span class=&quot;hljs-built_in&quot;&gt;await&lt;/span&gt; dbHelper.query(
    &lt;span class=&quot;hljs-comment&quot;&gt;&#39;my_table&#39;,&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt;: &lt;span class=&quot;hljs-comment&quot;&gt;&#39;name = ?&#39;,&lt;/span&gt;
    whereArgs: [&lt;span class=&quot;hljs-comment&quot;&gt;&#39;Alice&#39;],&lt;/span&gt;
  );
  print(&lt;span class=&quot;hljs-comment&quot;&gt;&#39;Filtered rows: $filteredRows&#39;);&lt;/span&gt;
  * */
  // 根据条件查询数据
  Future&amp;lt;List&amp;lt;Map&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;, dynamic&amp;gt;&amp;gt;&amp;gt; query(&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; tableName,
      {&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;? &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt;,
      List&amp;lt;dynamic&amp;gt;? whereArgs,
      &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;? orderBy,
      int? limit,
      int? offset}) &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; {
    Database db = &lt;span class=&quot;hljs-built_in&quot;&gt;await&lt;/span&gt; database;
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;await&lt;/span&gt; db.query(
      tableName,
      &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt;,
      whereArgs: whereArgs,
      orderBy: orderBy,
      limit: limit,
      offset: offset,
    );
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4、更新数据&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-vbnet&quot; lang=&quot;vbnet&quot;&gt;/*
  int updatedRows = &lt;span class=&quot;hljs-built_in&quot;&gt;await&lt;/span&gt; dbHelper.update(
    &lt;span class=&quot;hljs-comment&quot;&gt;&#39;my_table&#39;,&lt;/span&gt;
    {&lt;span class=&quot;hljs-comment&quot;&gt;&#39;name&#39;: &#39;Bob&#39;},&lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;&#39;id = ?&#39;,&lt;/span&gt;
    whereArgs: [id],
  );
  print(&lt;span class=&quot;hljs-comment&quot;&gt;&#39;Updated $updatedRows rows&#39;);&lt;/span&gt;
  * */
  // 更新数据
  Future&amp;lt;int&amp;gt; update(&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; tableName, Map&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;, dynamic&amp;gt; row, &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt;,
      {List&amp;lt;dynamic&amp;gt;? whereArgs}) &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; {
    Database db = &lt;span class=&quot;hljs-built_in&quot;&gt;await&lt;/span&gt; database;
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;await&lt;/span&gt; db.update(
      tableName,
      row,
      &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt;,
      whereArgs: whereArgs,
    );
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;5、删除数据&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-vbnet&quot; lang=&quot;vbnet&quot;&gt;/*
  int deletedRows = &lt;span class=&quot;hljs-built_in&quot;&gt;await&lt;/span&gt; dbHelper.delete(
    &lt;span class=&quot;hljs-comment&quot;&gt;&#39;my_table&#39;,&lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;&#39;id = ?&#39;,&lt;/span&gt;
    whereArgs: [id],
  );
  print(&lt;span class=&quot;hljs-comment&quot;&gt;&#39;Deleted $deletedRows rows&#39;);&lt;/span&gt;
  * */
  // 删除数据
  Future&amp;lt;int&amp;gt; delete(&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; tableName, &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt;,
      {List&amp;lt;dynamic&amp;gt;? whereArgs}) &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; {
    Database db = &lt;span class=&quot;hljs-built_in&quot;&gt;await&lt;/span&gt; database;
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;await&lt;/span&gt; db.delete(
      tableName,
      &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt;,
      whereArgs: whereArgs,
    );
  }

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;6、关闭数据库&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-csharp&quot; lang=&quot;csharp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 关闭数据库&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;Future &lt;span class=&quot;hljs-title&quot;&gt;close&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt;&lt;/span&gt; {
    Database db = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; database;
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; db.close();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-16&quot;&gt;2、file文件读写&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1、写入文件&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-dart&quot; lang=&quot;dart&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;写入文件&lt;/span&gt;&lt;/span&gt;
  Future&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;&amp;gt; writeFile({&lt;span class=&quot;hljs-keyword&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; fileName,&lt;span class=&quot;hljs-keyword&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; content, &lt;span class=&quot;hljs-built_in&quot;&gt;String?&lt;/span&gt; moduleName}) &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
      &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; file = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; _localFile(fileName: fileName, moduleName: moduleName);
      Log.debug(&lt;span class=&quot;hljs-string&quot;&gt;&quot;文件地址：&lt;span class=&quot;hljs-subst&quot;&gt;${file.path}&lt;/span&gt;&quot;&lt;/span&gt;);
      &lt;span class=&quot;hljs-comment&quot;&gt;// 等待写入操作完成&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; file.writeAsString(content);
    } &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; PlatformException &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {
      Log.debug(&lt;span class=&quot;hljs-string&quot;&gt;&#39;写入文件时发生平台异常: &lt;span class=&quot;hljs-subst&quot;&gt;${e.message}&lt;/span&gt;&#39;&lt;/span&gt;);
      &lt;span class=&quot;hljs-keyword&quot;&gt;rethrow&lt;/span&gt;;
    } &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; FileSystemException &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {
      Log.debug(&lt;span class=&quot;hljs-string&quot;&gt;&#39;文件系统写入出错: &lt;span class=&quot;hljs-subst&quot;&gt;${e.message}&lt;/span&gt;&#39;&lt;/span&gt;);
      &lt;span class=&quot;hljs-keyword&quot;&gt;rethrow&lt;/span&gt;;
    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {
      Log.debug(&lt;span class=&quot;hljs-string&quot;&gt;&#39;文件写入失败: &lt;span class=&quot;hljs-subst&quot;&gt;$e&lt;/span&gt;&#39;&lt;/span&gt;);
      &lt;span class=&quot;hljs-keyword&quot;&gt;rethrow&lt;/span&gt;;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2、追加内容到文件&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-dart&quot; lang=&quot;dart&quot;&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// 追加内容到文件&lt;/span&gt;
  Future&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;&amp;gt; appendToFile({&lt;span class=&quot;hljs-keyword&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; fileName,&lt;span class=&quot;hljs-keyword&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; content, &lt;span class=&quot;hljs-built_in&quot;&gt;String?&lt;/span&gt; moduleName}) &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
      &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; file = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; _localFile(fileName: fileName, moduleName: moduleName);
      &lt;span class=&quot;hljs-comment&quot;&gt;// 以追加模式写入内容&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; file.writeAsString(content, mode: FileMode.append);
      Log.debug(&lt;span class=&quot;hljs-string&quot;&gt;&#39;内容已成功追加到文件: &lt;span class=&quot;hljs-subst&quot;&gt;${file.path}&lt;/span&gt;&#39;&lt;/span&gt;);
    } &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; PlatformException &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {
      Log.debug(&lt;span class=&quot;hljs-string&quot;&gt;&#39;追加内容时发生平台异常: &lt;span class=&quot;hljs-subst&quot;&gt;${e.message}&lt;/span&gt;&#39;&lt;/span&gt;);
      &lt;span class=&quot;hljs-keyword&quot;&gt;rethrow&lt;/span&gt;;
    } &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; FileSystemException &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {
      Log.debug(&lt;span class=&quot;hljs-string&quot;&gt;&#39;文件系统操作出错: &lt;span class=&quot;hljs-subst&quot;&gt;${e.message}&lt;/span&gt;&#39;&lt;/span&gt;);
      &lt;span class=&quot;hljs-keyword&quot;&gt;rethrow&lt;/span&gt;;
    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {
      Log.debug(&lt;span class=&quot;hljs-string&quot;&gt;&#39;追加内容到文件时出现未知错误: &lt;span class=&quot;hljs-subst&quot;&gt;$e&lt;/span&gt;&#39;&lt;/span&gt;);
      &lt;span class=&quot;hljs-keyword&quot;&gt;rethrow&lt;/span&gt;;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3、读取文件&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-dart&quot; lang=&quot;dart&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;读取文件&lt;/span&gt;&lt;/span&gt;
  Future&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;String?&lt;/span&gt;&amp;gt; getFile({&lt;span class=&quot;hljs-keyword&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; fileName, &lt;span class=&quot;hljs-built_in&quot;&gt;String?&lt;/span&gt; moduleName}) &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
      &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; file = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; _localFile(fileName: fileName, moduleName: moduleName);
      Log.debug(&lt;span class=&quot;hljs-string&quot;&gt;&quot;读取文件路径：&lt;span class=&quot;hljs-subst&quot;&gt;${file.path}&lt;/span&gt;&quot;&lt;/span&gt;);
      &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; contents = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; file.readAsString();
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; contents;
    } &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; PlatformException &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {
      Log.debug(&lt;span class=&quot;hljs-string&quot;&gt;&#39;读取文件时发生平台异常: &lt;span class=&quot;hljs-subst&quot;&gt;${e.message}&lt;/span&gt;&#39;&lt;/span&gt;);
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;
    } &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; FileSystemException &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {
      Log.debug(&lt;span class=&quot;hljs-string&quot;&gt;&#39;文件系统读取出错: &lt;span class=&quot;hljs-subst&quot;&gt;${e.message}&lt;/span&gt;&#39;&lt;/span&gt;);
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;
    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {
      Log.debug(&lt;span class=&quot;hljs-string&quot;&gt;&#39;文件读取失败: &lt;span class=&quot;hljs-subst&quot;&gt;$e&lt;/span&gt;&#39;&lt;/span&gt;);
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4、移除指定文件&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-dart&quot; lang=&quot;dart&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;移除指定文件&lt;/span&gt;&lt;/span&gt;
  Future&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;&amp;gt; removeFilePath({&lt;span class=&quot;hljs-keyword&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; fileName, &lt;span class=&quot;hljs-built_in&quot;&gt;String?&lt;/span&gt; moduleName}) &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
      &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; file = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; _localFile(fileName: fileName,moduleName: moduleName);
      &lt;span class=&quot;hljs-comment&quot;&gt;// 检查文件是否存在&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; file.exists()) {
        &lt;span class=&quot;hljs-comment&quot;&gt;// 移除文件&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; file.delete();
        Log.debug(&lt;span class=&quot;hljs-string&quot;&gt;&#39;文件删除成功: &lt;span class=&quot;hljs-subst&quot;&gt;${file.path}&lt;/span&gt;&#39;&lt;/span&gt;);
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;;
      } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        Log.debug(&lt;span class=&quot;hljs-string&quot;&gt;&#39;文件不存在，无需删除: &lt;span class=&quot;hljs-subst&quot;&gt;${file.path}&lt;/span&gt;&#39;&lt;/span&gt;);
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;;
      }
    } &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; PlatformException &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {
      Log.debug(&lt;span class=&quot;hljs-string&quot;&gt;&#39;删除文件时发生平台异常: &lt;span class=&quot;hljs-subst&quot;&gt;${e.message}&lt;/span&gt;&#39;&lt;/span&gt;);
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;;
    } &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; FileSystemException &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {
      Log.debug(&lt;span class=&quot;hljs-string&quot;&gt;&#39;文件系统删除出错: &lt;span class=&quot;hljs-subst&quot;&gt;${e.message}&lt;/span&gt;&#39;&lt;/span&gt;);
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;;
    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {
      Log.debug(&lt;span class=&quot;hljs-string&quot;&gt;&#39;移除文件时出现未知错误: &lt;span class=&quot;hljs-subst&quot;&gt;$e&lt;/span&gt;&#39;&lt;/span&gt;);
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-17&quot;&gt;3、基于shared_preferences封装小数据读写&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-scss&quot; lang=&quot;scss&quot;&gt;class PreferencesHelper {
  &lt;span class=&quot;hljs-comment&quot;&gt;/// 异步设置字符串值&lt;/span&gt;
  static Future&amp;lt;void&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;setString&lt;/span&gt;(String key, String value) async {
    SharedPreferences prefs = await SharedPreferences&lt;span class=&quot;hljs-selector-class&quot;&gt;.getInstance&lt;/span&gt;();
    prefs&lt;span class=&quot;hljs-selector-class&quot;&gt;.setString&lt;/span&gt;(key, value);
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// 异步获取字符串值，带默认值&lt;/span&gt;
  static Future&amp;lt;String?&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;getString&lt;/span&gt;(String key) async {
    SharedPreferences prefs = await SharedPreferences&lt;span class=&quot;hljs-selector-class&quot;&gt;.getInstance&lt;/span&gt;();
    String? value = prefs&lt;span class=&quot;hljs-selector-class&quot;&gt;.getString&lt;/span&gt;(key);
    return value;
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// 异步设置整数值&lt;/span&gt;
  static Future&amp;lt;void&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;setInt&lt;/span&gt;(String key, int value) async {
    SharedPreferences prefs = await SharedPreferences&lt;span class=&quot;hljs-selector-class&quot;&gt;.getInstance&lt;/span&gt;();
    prefs&lt;span class=&quot;hljs-selector-class&quot;&gt;.setInt&lt;/span&gt;(key, value);
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// 异步获取整数值，带默认值&lt;/span&gt;
  static Future&amp;lt;int?&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;getInt&lt;/span&gt;(String key) async {
    SharedPreferences prefs = await SharedPreferences&lt;span class=&quot;hljs-selector-class&quot;&gt;.getInstance&lt;/span&gt;();
    int? value = prefs&lt;span class=&quot;hljs-selector-class&quot;&gt;.getInt&lt;/span&gt;(key);
    return value;
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// 异步设置布尔值&lt;/span&gt;
  static Future&amp;lt;void&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;setBool&lt;/span&gt;(String key, bool value) async {
    SharedPreferences prefs = await SharedPreferences&lt;span class=&quot;hljs-selector-class&quot;&gt;.getInstance&lt;/span&gt;();
    prefs&lt;span class=&quot;hljs-selector-class&quot;&gt;.setBool&lt;/span&gt;(key, value);
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// 异步获取布尔值，带默认值&lt;/span&gt;
  static Future&amp;lt;bool?&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;getBool&lt;/span&gt;(String key) async {
    SharedPreferences prefs = await SharedPreferences&lt;span class=&quot;hljs-selector-class&quot;&gt;.getInstance&lt;/span&gt;();
    bool? value = prefs&lt;span class=&quot;hljs-selector-class&quot;&gt;.getBool&lt;/span&gt;(key);
    return value;
  }

&lt;span class=&quot;hljs-comment&quot;&gt;/// 异步设置双精度浮点数值&lt;/span&gt;
  static Future&amp;lt;void&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;setDouble&lt;/span&gt;(String key, double value) async {
    SharedPreferences prefs = await SharedPreferences&lt;span class=&quot;hljs-selector-class&quot;&gt;.getInstance&lt;/span&gt;();
    prefs&lt;span class=&quot;hljs-selector-class&quot;&gt;.setDouble&lt;/span&gt;(key, value);
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// 异步获取双精度浮点数值，带默认值&lt;/span&gt;
  static Future&amp;lt;double?&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;getDouble&lt;/span&gt;(String key) async {
    SharedPreferences prefs = await SharedPreferences&lt;span class=&quot;hljs-selector-class&quot;&gt;.getInstance&lt;/span&gt;();
    double? value = prefs&lt;span class=&quot;hljs-selector-class&quot;&gt;.getDouble&lt;/span&gt;(key);
    return value;
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// get keys.&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;/// 获取sp中所有的key&lt;/span&gt;
  static Future&amp;lt;Set&amp;lt;String&amp;gt;&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;getKeys&lt;/span&gt;() async {
    SharedPreferences prefs = await SharedPreferences&lt;span class=&quot;hljs-selector-class&quot;&gt;.getInstance&lt;/span&gt;();
    return prefs&lt;span class=&quot;hljs-selector-class&quot;&gt;.getKeys&lt;/span&gt;();
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// remove.&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;/// 移除sp中key的值&lt;/span&gt;
  static Future&amp;lt;bool&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;remove&lt;/span&gt;(String key) async {
    SharedPreferences prefs = await SharedPreferences&lt;span class=&quot;hljs-selector-class&quot;&gt;.getInstance&lt;/span&gt;();
    return await prefs&lt;span class=&quot;hljs-selector-class&quot;&gt;.remove&lt;/span&gt;(key);
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// 清除所有键值对&lt;/span&gt;
  static Future&amp;lt;void&amp;gt; &lt;span class=&quot;hljs-attribute&quot;&gt;clear&lt;/span&gt;() async {
    SharedPreferences prefs = await SharedPreferences&lt;span class=&quot;hljs-selector-class&quot;&gt;.getInstance&lt;/span&gt;();
    await prefs&lt;span class=&quot;hljs-selector-class&quot;&gt;.clear&lt;/span&gt;();
  }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-18&quot;&gt;2、jsonConverter类型解析失败问题&lt;/h3&gt;
&lt;p&gt;主要扩展了下面几个类型转换器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、JsonTypeAdapter&lt;/li&gt;
&lt;li&gt;2、SafeConvertModel&lt;/li&gt;
&lt;li&gt;3、SafeDateTimeConverter&lt;/li&gt;
&lt;li&gt;4、SafeListConverter&lt;/li&gt;
&lt;li&gt;5、SafeMapConverter&lt;/li&gt;
&lt;li&gt;6、SafeNumConverter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7472785299732496418&quot; target=&quot;_blank&quot; title=&quot;https://juejin.cn/post/7472785299732496418&quot;&gt;参考文章：Flutter 一招教你解决json_annotation类型解析失败问题&lt;/a&gt;&lt;/p&gt;
&lt;h3 data-id=&quot;heading-19&quot;&gt;3、日志Log&lt;/h3&gt;
&lt;p&gt;日志Log是基于&lt;code&gt;logger&lt;/code&gt;封装实现的，主要实现一下功能&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;多级别日志支持&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;Verbose (详细)&lt;/li&gt;
&lt;li&gt;Debug (调试)&lt;/li&gt;
&lt;li&gt;Info (信息)&lt;/li&gt;
&lt;li&gt;Warning (警告)&lt;/li&gt;
&lt;li&gt;Error (错误)&lt;/li&gt;
&lt;li&gt;WTF (严重错误)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置选项&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;控制堆栈跟踪显示行数&lt;/li&gt;
&lt;li&gt;自定义输出颜色&lt;/li&gt;
&lt;li&gt;设置日志行长度&lt;/li&gt;
&lt;li&gt;显示打印时间&lt;/li&gt;
&lt;li&gt;表情符号开关&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能优化&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;支持全局日志开关&lt;/li&gt;
&lt;li&gt;生产环境默认过滤敏感信息&lt;/li&gt;
&lt;li&gt;自动处理对象转字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;错误处理&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;支持携带错误对象&lt;/li&gt;
&lt;li&gt;可记录堆栈跟踪信息&lt;/li&gt;
&lt;li&gt;错误日志显示更多上下文&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;hljs language-kotlin&quot; lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/// 日志配置选项&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LogOptions&lt;/span&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; int methodCount;
  &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; int errorMethodCount;
  &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; int lineLength;
  &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; bool colors;
  &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; bool printEmojis;
  &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; bool printTime;

  LogOptions({
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.methodCount = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.errorMethodCount = &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.lineLength = &lt;span class=&quot;hljs-number&quot;&gt;120&lt;/span&gt;,
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.colors = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.printEmojis = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.printTime = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,
  });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-20&quot;&gt;4、crypto加解密封装&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1、MD5 加密&lt;/li&gt;
&lt;li&gt;2、SHA-256 加密&lt;/li&gt;
&lt;li&gt;3、AES 加密解密&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-id=&quot;heading-21&quot;&gt;5、router路由组件&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-22&quot;&gt;1、跳转工具类&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1、路由跳转&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-dart&quot; lang=&quot;dart&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Future&amp;lt;T?&amp;gt; router&amp;lt;T &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Object?&lt;/span&gt;&amp;gt;(
      {&lt;span class=&quot;hljs-keyword&quot;&gt;required&lt;/span&gt; RouterURL routerURL,
      &lt;span class=&quot;hljs-keyword&quot;&gt;required&lt;/span&gt; BuildContext context,
      &lt;span class=&quot;hljs-built_in&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt;? param,
      MyRouterEnum routerType = MyRouterEnum.push}) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; name = routerURL.name;
    &lt;span class=&quot;hljs-built_in&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt; queryParameters = param ?? &lt;span class=&quot;hljs-built_in&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt;();
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (routerType == MyRouterEnum.push) {
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; context.pushNamed(name, queryParameters: queryParameters);
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
      context.goNamed(name, queryParameters: queryParameters);
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Future.value();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2、pop 返回&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-dart&quot; lang=&quot;dart&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; pop&amp;lt;T &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Object?&lt;/span&gt;&amp;gt;(BuildContext context, [T? result]) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (context.canPop()) {
      context.pop(result);
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
      &lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&#39;不能pop&#39;&lt;/span&gt;);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3、返回到指定界面&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ini&quot; lang=&quot;ini&quot;&gt;static void popUntil(
      {required BuildContext context, required RouterURL routerURL}) {
    try {
      List&amp;lt;Route&amp;lt;dynamic&amp;gt;&amp;gt; &lt;span class=&quot;hljs-attr&quot;&gt;list&lt;/span&gt; = getAllRoutes()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
      bool &lt;span class=&quot;hljs-attr&quot;&gt;isCanPop&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
      for (Route _router in list) {
        if(&lt;span class=&quot;hljs-attr&quot;&gt;_router.settings.name&lt;/span&gt; == routerURL.name) {
          &lt;span class=&quot;hljs-attr&quot;&gt;isCanPop&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
        }
      }

      if (isCanPop) {
        final &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt; = routerURL.name&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
        Navigator.popUntil(context, ModalRoute.withName(name))&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
      } else {
        assert(false, &#39;不能pop&#39;)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
      }

    } catch (e) {
      Log.error(&quot;返回到指定界面错误：${e.toString()}&quot;)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4、获取当前路由栈里面的全部路由&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/// 获取当前路由栈里面的全部路由&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;Route&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;dynamic&lt;/span&gt;&amp;gt;&amp;gt; getAllRoutes() {
    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;MyRouteObserver&lt;/span&gt; routeObserver &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;MyRouteObserver&lt;/span&gt;();
    &lt;span class=&quot;hljs-type&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;Route&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;dynamic&lt;/span&gt;&amp;gt;&amp;gt; routes &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; routeObserver.routeStack;
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; routes;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-23&quot;&gt;2、添加路由观察者&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-scss&quot; lang=&quot;scss&quot;&gt;class MyRouteObserver extends NavigatorObserver {
  static final MyRouteObserver _instance = MyRouteObserver&lt;span class=&quot;hljs-selector-class&quot;&gt;._internal&lt;/span&gt;();

  factory &lt;span class=&quot;hljs-built_in&quot;&gt;MyRouteObserver&lt;/span&gt;() {
    return _instance;
  }

  MyRouteObserver&lt;span class=&quot;hljs-selector-class&quot;&gt;._internal&lt;/span&gt;();

  final List&amp;lt;Route&amp;lt;dynamic&amp;gt;&amp;gt; routeStack = &lt;span class=&quot;hljs-selector-attr&quot;&gt;[]&lt;/span&gt;;
  final Map&amp;lt;Route&amp;lt;dynamic&amp;gt;, List&amp;lt;RouteAware&amp;gt;&amp;gt; _routeAwareSubscriptions = {};

  &lt;span class=&quot;hljs-comment&quot;&gt;/// 订阅路由变化&lt;/span&gt;
  void &lt;span class=&quot;hljs-built_in&quot;&gt;subscribe&lt;/span&gt;(RouteAware routeAware, Route&amp;lt;dynamic&amp;gt; route) {
    _routeAwareSubscriptions&lt;span class=&quot;hljs-selector-class&quot;&gt;.putIfAbsent&lt;/span&gt;(route, () =&amp;gt; &lt;span class=&quot;hljs-selector-attr&quot;&gt;[]&lt;/span&gt;)&lt;span class=&quot;hljs-selector-class&quot;&gt;.add&lt;/span&gt;(routeAware);
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// 取消订阅路由变化&lt;/span&gt;
  void &lt;span class=&quot;hljs-built_in&quot;&gt;unsubscribe&lt;/span&gt;(RouteAware routeAware) {
    for (final route in _routeAwareSubscriptions.keys) {
      _routeAwareSubscriptions&lt;span class=&quot;hljs-selector-attr&quot;&gt;[route]&lt;/span&gt;?&lt;span class=&quot;hljs-selector-class&quot;&gt;.remove&lt;/span&gt;(routeAware);
    }
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// 当一个新的路由被推送到导航栈时，此方法会被调用。&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;@override&lt;/span&gt;
  void didPush(Route&amp;lt;dynamic&amp;gt; route, Route&amp;lt;dynamic&amp;gt;? previousRoute) {
    super&lt;span class=&quot;hljs-selector-class&quot;&gt;.didPush&lt;/span&gt;(route, previousRoute);
    routeStack&lt;span class=&quot;hljs-selector-class&quot;&gt;.add&lt;/span&gt;(route);
    Log&lt;span class=&quot;hljs-selector-class&quot;&gt;.debug&lt;/span&gt;(
        &#39;新的路由被推送到导航栈: ${route.settings.name} param:${route.settings.arguments}, previousRoute= ${previousRoute?.settings.name}&#39;);
    &lt;span class=&quot;hljs-built_in&quot;&gt;_handleRouteVisibility&lt;/span&gt;(previousRoute, route);
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// 当一个路由从导航栈中弹出时，此方法会被调用。route 参数表示被弹出的路由，previousRoute 参数&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;@override&lt;/span&gt;
  void didPop(Route&amp;lt;dynamic&amp;gt; route, Route&amp;lt;dynamic&amp;gt;? previousRoute) {
    super&lt;span class=&quot;hljs-selector-class&quot;&gt;.didPop&lt;/span&gt;(route, previousRoute);
    routeStack&lt;span class=&quot;hljs-selector-class&quot;&gt;.remove&lt;/span&gt;(route);
    Log&lt;span class=&quot;hljs-selector-class&quot;&gt;.debug&lt;/span&gt;(
        &#39;路由被弹出，当前路由堆栈: ${route.settings.name},param:${route.settings.arguments}, previousRoute= ${previousRoute?.settings.name}&#39;);
    &lt;span class=&quot;hljs-built_in&quot;&gt;_handleRouteVisibility&lt;/span&gt;(route, previousRoute);
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// 当一个路由从导航栈中被移除时，此方法会被调用。移除路由和弹出路由不同，移除操作可以移除导航栈中任意位置的路由，而弹出操作只能移除栈顶的路由。&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;/// route 参数表示被移除的路由，previousRoute 参数表示在该路由移除后，其下一个路由（如果存在的话）。&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;@override&lt;/span&gt;
  void didRemove(Route&amp;lt;dynamic&amp;gt; route, Route&amp;lt;dynamic&amp;gt;? previousRoute) {
    super&lt;span class=&quot;hljs-selector-class&quot;&gt;.didRemove&lt;/span&gt;(route, previousRoute);
    routeStack&lt;span class=&quot;hljs-selector-class&quot;&gt;.remove&lt;/span&gt;(route);

    Log&lt;span class=&quot;hljs-selector-class&quot;&gt;.debug&lt;/span&gt;(
        &#39;路由被移除，当前路由堆栈: ${route.settings.name}, previousRoute= ${previousRoute?.settings.name}&#39;);
    &lt;span class=&quot;hljs-built_in&quot;&gt;_handleRouteVisibility&lt;/span&gt;(route, previousRoute);
  }

  &lt;span class=&quot;hljs-keyword&quot;&gt;@override&lt;/span&gt;
  void didReplace({Route&amp;lt;dynamic&amp;gt;? newRoute, Route&amp;lt;dynamic&amp;gt;? oldRoute}) {
    super&lt;span class=&quot;hljs-selector-class&quot;&gt;.didReplace&lt;/span&gt;(newRoute: newRoute, oldRoute: oldRoute);
    if (oldRoute != null) {
      routeStack&lt;span class=&quot;hljs-selector-class&quot;&gt;.remove&lt;/span&gt;(oldRoute);
    }
    if (newRoute != null) {
      routeStack&lt;span class=&quot;hljs-selector-class&quot;&gt;.add&lt;/span&gt;(newRoute);
    }
    Log&lt;span class=&quot;hljs-selector-class&quot;&gt;.debug&lt;/span&gt;(
        &#39;路由被替换，当前路由堆栈: new= ${newRoute?.settings.name}, old= ${oldRoute?.settings.name}&#39;);
    &lt;span class=&quot;hljs-built_in&quot;&gt;_handleRouteVisibility&lt;/span&gt;(oldRoute, newRoute);
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// 当用户开始进行一个导航手势（如在 iOS 上从屏幕边缘向左滑动返回上一页）时，此方法会被调用。&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;/// route 参数表示当前正在操作的路由，previousRoute 参数表示在手势操作后可能会显示的前一个路由（如果存在的话）。&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;@override&lt;/span&gt;
  void didStartUserGesture(
      Route&amp;lt;dynamic&amp;gt; route, Route&amp;lt;dynamic&amp;gt;? previousRoute) {
    Log&lt;span class=&quot;hljs-selector-class&quot;&gt;.debug&lt;/span&gt;(&#39;手势事件 didStartUserGesture: ${route.settings.name}, &#39;
        &#39;previousRoute= ${previousRoute?.settings.name}&#39;);
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// 用户结束导航手势时，此方法会被调用。无论手势是否成功完成导航操作，只要手势结束，就会触发这个方法。&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;@override&lt;/span&gt;
  void didStopUserGesture() {
    Log&lt;span class=&quot;hljs-selector-class&quot;&gt;.debug&lt;/span&gt;(&#39;手势结束：didStopUserGesture&#39;);
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// 处理路由可见性变化&lt;/span&gt;
  void &lt;span class=&quot;hljs-built_in&quot;&gt;_handleRouteVisibility&lt;/span&gt;(
      Route&amp;lt;dynamic&amp;gt;? oldRoute, Route&amp;lt;dynamic&amp;gt;? newRoute) {
    if (oldRoute != null) {
      &lt;span class=&quot;hljs-built_in&quot;&gt;_notifyRouteAware&lt;/span&gt;(oldRoute, false);
    }
    if (newRoute != null) {
      &lt;span class=&quot;hljs-built_in&quot;&gt;_notifyRouteAware&lt;/span&gt;(newRoute, true);
    }
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// 通知订阅者路由可见性变化&lt;/span&gt;
  void &lt;span class=&quot;hljs-built_in&quot;&gt;_notifyRouteAware&lt;/span&gt;(Route&amp;lt;dynamic&amp;gt; route, bool isVisible) {
    final routeAwares = _routeAwareSubscriptions&lt;span class=&quot;hljs-selector-attr&quot;&gt;[route]&lt;/span&gt;;
    if (routeAwares != null) {
      for (final routeAware in routeAwares) {
        if (isVisible) {
          routeAware&lt;span class=&quot;hljs-selector-class&quot;&gt;.didPush&lt;/span&gt;();
        } else {
          routeAware&lt;span class=&quot;hljs-selector-class&quot;&gt;.didPopNext&lt;/span&gt;();
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-24&quot;&gt;3、定义路由映射url&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-dart&quot; lang=&quot;dart&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;路由映射url&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;RouterURL&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;名称&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; name;
  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;路径&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; path;

  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; RouterURL({&lt;span class=&quot;hljs-keyword&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.name, &lt;span class=&quot;hljs-keyword&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.path});
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-25&quot;&gt;6、eventBus封装&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1、&lt;strong&gt;单例模式&lt;/strong&gt;：全局唯一事件总线实例，通过 &lt;code&gt;AppEventBus.instance&lt;/code&gt; 访问核心功能&lt;/li&gt;
&lt;li&gt;2、&lt;strong&gt;类型安全&lt;/strong&gt;：强类型事件处理，编译时类型检查&lt;/li&gt;
&lt;li&gt;3、&lt;strong&gt;生命周期管理&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;EventBusMixin&lt;/code&gt; 自动取消订阅&lt;/li&gt;
&lt;li&gt;手动订阅返回 &lt;code&gt;StreamSubscription&lt;/code&gt; 便于管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;4、&lt;strong&gt;安全防护&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;异常捕获机制防止事件处理崩溃&lt;/li&gt;
&lt;li&gt;错误处理回调支持&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;hljs language-dart&quot; lang=&quot;dart&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 封装后的高级事件总线&lt;/span&gt;
&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AppEventBus&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; EventBus _instance = EventBus();

  &lt;span class=&quot;hljs-comment&quot;&gt;// 私有构造，确保单例&lt;/span&gt;
  AppEventBus._internal();

  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;获取单例实例&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; EventBus &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; instance =&amp;gt; _instance;

  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;发送事件&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; sendEvent&amp;lt;T&amp;gt;(T event) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (kDebugMode) {
      &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;[EventBus] Firing event: &lt;span class=&quot;hljs-subst&quot;&gt;${event.runtimeType}&lt;/span&gt;&#39;&lt;/span&gt;);
    }
    instance.fire(event);
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;订阅事件，返回可取消的订阅对象&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; StreamSubscription&amp;lt;T&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt;&amp;lt;T&amp;gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Function&lt;/span&gt;(T event) handler, {
    &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; handleError = &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;,
    ErrorCallback? onError,
  }) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; subscription = instance.&lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt;&amp;lt;T&amp;gt;().listen((event) {
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (kDebugMode) {
        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;[EventBus] Received event: &lt;span class=&quot;hljs-subst&quot;&gt;${event.runtimeType}&lt;/span&gt;&#39;&lt;/span&gt;);
      }
      _safeRun(() =&amp;gt; handler(event), onError: onError);
    }, onError: handleError ? (error, stack) {
      _safeRun(() =&amp;gt; onError?.call(error, stack));
    } : &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;);

    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; subscription;
  }

  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; _safeRun(&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Function&lt;/span&gt;() action, {ErrorCallback? onError}) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
      action();
    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e, s) {
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (kDebugMode) {
        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;[EventBus] Handler error: &lt;span class=&quot;hljs-subst&quot;&gt;$e&lt;/span&gt;\n&lt;span class=&quot;hljs-subst&quot;&gt;$s&lt;/span&gt;&#39;&lt;/span&gt;);
      }
      onError?.call(e, s);
    }
  }
}

&lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;Flutter Widget 集成扩展&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;mixin&lt;/span&gt; EventBusMixin&amp;lt;T &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; StatefulWidget&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; State&amp;lt;T&amp;gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;List&lt;/span&gt;&amp;lt;StreamSubscription&amp;gt; _eventSubscriptions = [];

  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;安全订阅事件，自动管理生命周期&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; subscribe&amp;lt;Event&amp;gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Function&lt;/span&gt;(Event event) handler, {
    &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; handleError = &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;,
    ErrorCallback? onError,
  }) {
    _eventSubscriptions.add(
        AppEventBus.&lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt;&amp;lt;Event&amp;gt;(handler, handleError: handleError, onError: onError)
    );
  }

  &lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; dispose() {
    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; sub &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; _eventSubscriptions) {
      sub.cancel();
    }
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (kDebugMode) {
      &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;[EventBus] Canceled &lt;span class=&quot;hljs-subst&quot;&gt;${_eventSubscriptions.length}&lt;/span&gt; subscriptions&#39;&lt;/span&gt;);
    }
    &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.dispose();
  }
}

&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; ErrorCallback = &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Function&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;Object&lt;/span&gt; error, StackTrace stackTrace);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-26&quot;&gt;7、Stream结合RxDart封装&lt;/h3&gt;
&lt;p&gt;Stream可以简单的处理数据流，但遇到更复杂的需求时，发现原生Stream的操作符不够用。这个时候我们就可以借助于RxDart。RxDart可以提供更多的操作符的链式调用、错误处理、流的组合。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-csharp&quot; lang=&quot;csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;RxStream&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt; {
  final BehaviorSubject&amp;lt;T&amp;gt; _subject = BehaviorSubject&amp;lt;T&amp;gt;();

  Stream&amp;lt;T&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; stream =&amp;gt; _subject.stream;

  &lt;span class=&quot;hljs-comment&quot;&gt;// 添加数据&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;T &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt; =&amp;gt; _subject.sink.&lt;span class=&quot;hljs-keyword&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;);

  &lt;span class=&quot;hljs-comment&quot;&gt;// 链式操作符示例：防抖 + 过滤空值&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;Stream&amp;lt;T&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;debounceAndFilter&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Duration duration&lt;/span&gt;)&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; stream
        .debounceTime(duration) &lt;span class=&quot;hljs-comment&quot;&gt;// 防抖&lt;/span&gt;
        .&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt;((&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 过滤空值&lt;/span&gt;
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;// 合并多个流（例如：搜索输入 + 筛选条件）&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Stream&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;R&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;combineStreams&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;A&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;B&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;R&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;
      Stream&amp;lt;A&amp;gt; streamA,
      Stream&amp;lt;B&amp;gt; streamB,
      R Function(A, B&lt;/span&gt;) combiner,
      )&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Rx.combineLatest2(streamA, streamB, combiner);
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;// 关闭资源&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;dispose&lt;/span&gt;()&lt;/span&gt; =&amp;gt; _subject.close();
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7477921821285433384&quot; target=&quot;_blank&quot; title=&quot;https://juejin.cn/post/7477921821285433384&quot;&gt;参考文章：flutter 流(Stream)介绍&amp;amp;结合RxDart使用&lt;/a&gt;&lt;/p&gt;
&lt;h2 data-id=&quot;heading-27&quot;&gt;底座基础组件&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-28&quot;&gt;1、布局类&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-29&quot;&gt;ScreenAdapter屏幕适配&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-arduino&quot; lang=&quot;arduino&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ScreenAdapter&lt;/span&gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// 初始化屏幕适配&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(BuildContext context, {&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; width = &lt;span class=&quot;hljs-number&quot;&gt;375&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; height = &lt;span class=&quot;hljs-number&quot;&gt;812&lt;/span&gt;})&lt;/span&gt; &lt;/span&gt;{
    ScreenUtil.&lt;span class=&quot;hljs-built_in&quot;&gt;init&lt;/span&gt;(
      context,
      designSize: &lt;span class=&quot;hljs-built_in&quot;&gt;Size&lt;/span&gt;(width, height),
    );
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;// 获取屏幕宽度&lt;/span&gt;
  &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; get screenWidth =&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;ScreenUtil&lt;/span&gt;().screenWidth;

  &lt;span class=&quot;hljs-comment&quot;&gt;// 获取屏幕高度&lt;/span&gt;
  &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; get screenHeight =&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;ScreenUtil&lt;/span&gt;().screenHeight;

  &lt;span class=&quot;hljs-comment&quot;&gt;// 获取状态栏高度&lt;/span&gt;
  &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; get statusBarHeight =&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;ScreenUtil&lt;/span&gt;().statusBarHeight;

  &lt;span class=&quot;hljs-comment&quot;&gt;// 获取底部安全区高度&lt;/span&gt;
  &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; get bottomBarHeight =&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;ScreenUtil&lt;/span&gt;().bottomBarHeight;

  &lt;span class=&quot;hljs-comment&quot;&gt;// 适配宽度&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setWidth&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; width)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; width.w;
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;// 适配高度&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setHeight&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; height)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; height.h;
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;// 适配字体大小&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setSp&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; fontSize)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fontSize.sp;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-30&quot;&gt;IntScreenExtensions&amp;amp;DoubleScreenExtensions&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-dart&quot; lang=&quot;dart&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 为 int 类型添加扩展&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;extension&lt;/span&gt; IntScreenExtensions &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;转换为适配后的像素值&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-built_in&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; px =&amp;gt; toDouble().w;

  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;转换为适配后的响应式像素值（这里使用与 px 相同逻辑，可按需调整）&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-built_in&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; rpx =&amp;gt; toDouble().w;
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 为 double 类型添加扩展&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;extension&lt;/span&gt; DoubleScreenExtensions &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;double&lt;/span&gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;转换为适配后的像素值&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-built_in&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; px =&amp;gt; w;

  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;转换为适配后的响应式像素值（这里使用与 px 相同逻辑，可按需调整）&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-built_in&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; rpx =&amp;gt; w;
}
 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-31&quot;&gt;2、utils工具&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-32&quot;&gt;date_untils时间工具&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1、获取当前时间戳（毫秒）&lt;/li&gt;
&lt;li&gt;2、获取当前时间&lt;/li&gt;
&lt;li&gt;3、将某个格式时间转化成时间戳（毫秒）&lt;/li&gt;
&lt;li&gt;4、将某个格式时间转化为指定格式时间&lt;/li&gt;
&lt;li&gt;5、获取当前年、月、日&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-33&quot;&gt;DoubleExtension&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1、保留指定小数位数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-34&quot;&gt;StringExtension&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1、md5加密&lt;/li&gt;
&lt;li&gt;2、将字符串转换为 Map&amp;lt;String, dynamic&amp;gt;&lt;/li&gt;
&lt;li&gt;3、Base64 编码、Base64 解码&lt;/li&gt;
&lt;li&gt;4、截取指定长度字符串&lt;/li&gt;
&lt;li&gt;5、 按索引范围替换字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-35&quot;&gt;ExtensionList&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1、 将list转化为json字符串&lt;/li&gt;
&lt;li&gt;2、判断对象是否为null&lt;/li&gt;
&lt;li&gt;3、字符串拼接&lt;/li&gt;
&lt;li&gt;4、列表元素去重&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-36&quot;&gt;ExtensionMap&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1、将map转化为json字符串&lt;/li&gt;
&lt;li&gt;2、合并两个 Map&lt;/li&gt;
&lt;li&gt;3、筛选符合条件的键值对&lt;/li&gt;
&lt;li&gt;4、将 Map 的值转换为另一种类型&lt;/li&gt;
&lt;li&gt;5、获取 Map 中第一个满足条件的键值对&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-37&quot;&gt;ColorExtension&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1、十六进制颜色设置&lt;/li&gt;
&lt;li&gt;2、 hex颜色设置&lt;/li&gt;
&lt;li&gt;3、取随机颜色&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-38&quot;&gt;WidgetExtension&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1、切圆角&lt;/li&gt;
&lt;li&gt;2、点击事件&lt;/li&gt;
&lt;li&gt;3、 长按事件&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-39&quot;&gt;ImageExtension&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1、根据指定的角度旋转图片&lt;/li&gt;
&lt;li&gt;2、图片灰度&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-40&quot;&gt;TextFieldExtension&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1、自动获取焦点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2、限制长度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3、手机号格式化&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-41&quot;&gt;JsonUtils&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1、将 Map 转换为 String&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2、 将 String 转换为 Map&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3、 将 List 转换为 String&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4、将 String 转换为 List&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><link>https://juejin.cn/post/7482789772362317864</link><guid isPermaLink="false">https://juejin.cn/post/7482789772362317864</guid><pubDate>Tue, 18 Mar 2025 09:21:13 GMT</pubDate><author>SunshineBrother</author><category>iOS</category><category>Flutter</category><category>Android</category></item><item><title>Flutter默认字体坑了我们整整一年</title><description>&lt;p&gt;如果你用Flutter做iOS应用，默认的系统字体是 SF Pro Text，但是！它在显示中文字的时候，不支持 w500（中等加粗）！&lt;/p&gt;
&lt;p&gt;也就是说，你在代码里设置 FontWeight.w500，中文部分可能根本不会变粗！肉眼看几乎跟普通字重没区别…… 这坑我整整一年才发现！😤&lt;/p&gt;
&lt;p&gt;对于Together App来说，最典型的就是我们每个页面的标题，我们其实都用了w500，但是默认情况下，标题并不会变粗一点点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/d9ba5aa752c748148cab42b44198b565~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bCP5Yib:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742876463&amp;amp;x-signature=7Z%2BOfJmQuaUYBcg20oQVMLCKMtI%3D&quot; alt=&quot;IMG_7875.PNG&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
解决方案：&lt;/p&gt;
&lt;p&gt;在主题里面手动指定字体&#39;PingFang SC&#39;，这样中文也能自动能应用上w500.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-less&quot; lang=&quot;less&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;MaterialApp&lt;/span&gt;(
    &lt;span class=&quot;hljs-attribute&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Together&quot;&lt;/span&gt;,
    &lt;span class=&quot;hljs-attribute&quot;&gt;theme&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;ThemeData&lt;/span&gt;(
        &lt;span class=&quot;hljs-attribute&quot;&gt;fontFamily&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;PingFang SC&quot;&lt;/span&gt;,
        &lt;span class=&quot;hljs-comment&quot;&gt;//....&lt;/span&gt;
    ),
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;加上这个以后，标题自然就能变成恰当的粗细了，当然其他用了w500的地方也一样。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/af9e9122e3be40b0a478a64cddadcea2~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bCP5Yib:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742876463&amp;amp;x-signature=EmfZ1Q%2F3qsGz25JBL%2FpVNnFNWSU%3D&quot; alt=&quot;IMG_7875.PNG&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;为了解决这个问题，我们当时还特地引入了阿里的普惠体，导致包体积无辜增大了好几个M，真是，无发可说！&lt;/p&gt;
&lt;p&gt;总结:&lt;/p&gt;
&lt;p&gt;👉 如果你在 iOS 上发现中文 w500 没有变粗，要手动指定 PingFang SC！&lt;/p&gt;
&lt;p&gt;👉 别被 Flutter 默认字体坑了！这东西可能让你的 UI 一年都不对劲！🔥🔥🔥&lt;/p&gt;
&lt;p&gt;这坑了我一年，别让它坑了你！⚠️ 如果你也遇到过 Flutter 的坑问题，一起在评论区交流一下！🗣️&lt;/p&gt;</description><link>https://juejin.cn/post/7482692656989978676</link><guid isPermaLink="false">https://juejin.cn/post/7482692656989978676</guid><pubDate>Tue, 18 Mar 2025 04:21:03 GMT</pubDate><author>小创</author><category>iOS</category><category>Flutter</category></item><item><title>iOS Swift UIKit 编程规范指南</title><description>&lt;h2 data-id=&quot;heading-0&quot;&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-1&quot;&gt;控制器命名规范&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;使用描述性名称&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;控制器的名称应该清晰地描述其功能和职责。例如，&lt;code&gt;PersonViewController&lt;/code&gt; 表示该控制器用于管理与人员信息相关的视图。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 data-id=&quot;heading-2&quot;&gt;方法命名规范&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;使用动宾结构&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;方法名应该是一个动词或动词短语，描述该方法执行的操作。例如，&lt;code&gt;loadData()&lt;/code&gt;、&lt;code&gt;saveUserInfo()&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;清晰性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可读性&lt;/strong&gt;：新成员快速理解方法作用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可维护性&lt;/strong&gt;：减少因命名歧义引发的 Bug&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一致性&lt;/strong&gt;：团队协作风格统一&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过良好的命名，可以让代码更加易于理解、扩展和维护。&lt;/p&gt;
&lt;p&gt;UI从上往下添加，初始化UI，add，添加约束。这样在相邻上下文中就能找到，好阅读。&lt;/p&gt;
&lt;p&gt;不使用过多if else判断，后期维护很麻烦。&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;好的，用户问的是在使用MVC架构做一个iOS项目时，项目的层次应该如何组织。我需要详细分析这个问题，确保覆盖MVC的各个层面以及实际项目中的常见结构。&lt;/p&gt;
&lt;p&gt;首先，用户可能已经了解MVC的基本概念，但需要具体的项目结构示例。他们可能希望了解如何将不同的组件（模型、视图、控制器）组织到不同的目录中，以及如何处理服务、工具类等其他部分。&lt;/p&gt;
&lt;p&gt;接下来，我得考虑用户可能的背景。可能是刚接触MVC的开发者，或者在团队协作中需要统一结构，所以需要明确且规范的目录划分。用户可能关心如何避免Massive View Controller，如何分离业务逻辑，数据持久化如何处理，网络请求放在哪里等等。&lt;/p&gt;
&lt;p&gt;然后，我需要回顾标准的MVC结构，并扩展到实际项目中常见的子目录。例如，模型可能分为实体、DTO、Core Data模型等。视图部分可能需要自定义UI组件，使用xib或纯代码。控制器可能按功能模块分组，同时需要处理服务层、工具类、资源管理等。&lt;/p&gt;
&lt;p&gt;还需要考虑依赖管理，比如第三方库的位置，常量、扩展方法的组织方式。测试部分的目录结构也是重要的一环，确保单元测试和UI测试有明确的归属。&lt;/p&gt;
&lt;p&gt;另外，用户可能希望目录结构示例能够直观展示，所以提供一个树状结构的例子会很有帮助。同时，需要解释每个目录的作用，比如Services用于网络请求和数据持久化，Utilities放置工具类和扩展，Resources管理资源文件等。&lt;/p&gt;
&lt;p&gt;最后，要强调一些最佳实践，比如避免在控制器中堆积业务逻辑，合理使用扩展和子类化，保持模块化以便于维护和协作。可能还需要提到常见的陷阱，如过度依赖控制器，或者模型层过于臃肿，以及如何通过协议和依赖注入来解耦。&lt;/p&gt;
&lt;p&gt;总结来说，用户需要一个清晰、可维护的项目结构示例，以及每个部分的职责说明，同时结合MVC的最佳实践，帮助他们组织代码，提高项目的可维护性和扩展性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下是一个基于 &lt;strong&gt;MVC 模式&lt;/strong&gt; 的 iOS 项目标准层次结构，适用于中大型项目。通过清晰的模块划分和职责分离，可大幅提升代码可维护性和团队协作效率：&lt;/p&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-3&quot;&gt;&lt;strong&gt;项目目录结构示例&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-bash&quot; lang=&quot;bash&quot;&gt;ProjectName/
├── Application/         &lt;span class=&quot;hljs-comment&quot;&gt;# 应用全局配置&lt;/span&gt;
│   ├── AppDelegate.swift
│   └── SceneDelegate.swift
│
├── Modules/             &lt;span class=&quot;hljs-comment&quot;&gt;# **核心模块**（按功能划分）&lt;/span&gt;
│   ├── Home/            &lt;span class=&quot;hljs-comment&quot;&gt;# 首页模块&lt;/span&gt;
│   │   ├── Controller/
│   │   │   └── HomeViewController.swift
│   │   ├── Model/
│   │   │   ├── HomeDataModel.swift      &lt;span class=&quot;hljs-comment&quot;&gt;# 数据模型&lt;/span&gt;
│   │   │   └── HomeAPIService.swift     &lt;span class=&quot;hljs-comment&quot;&gt;# 网络请求服务&lt;/span&gt;
│   │   └── View/
│   │       ├── HomeHeaderView.swift     &lt;span class=&quot;hljs-comment&quot;&gt;# 自定义视图&lt;/span&gt;
│   │       └── HomeCollectionViewCell.swift
│   │
│   ├── Product/         &lt;span class=&quot;hljs-comment&quot;&gt;# 商品模块&lt;/span&gt;
│   └── User/            &lt;span class=&quot;hljs-comment&quot;&gt;# 用户模块&lt;/span&gt;
│
├── Common/              &lt;span class=&quot;hljs-comment&quot;&gt;# 公共资源&lt;/span&gt;
│   ├── Extensions/      &lt;span class=&quot;hljs-comment&quot;&gt;# 扩展方法&lt;/span&gt;
│   │   └── UIView+Extensions.swift
│   ├── Utilities/       &lt;span class=&quot;hljs-comment&quot;&gt;# 工具类&lt;/span&gt;
│   │   ├── DateFormatter.swift
│   │   └── ImageCacheManager.swift
│   ├── Protocols/       &lt;span class=&quot;hljs-comment&quot;&gt;# 协议定义&lt;/span&gt;
│   │   └── ReusableView.swift
│   └── Constants/       &lt;span class=&quot;hljs-comment&quot;&gt;# 常量&lt;/span&gt;
│       └── AppConstants.swift
│
├── Resources/           &lt;span class=&quot;hljs-comment&quot;&gt;# 静态资源&lt;/span&gt;
│   ├── Assets.xcassets  &lt;span class=&quot;hljs-comment&quot;&gt;# 图片/图标&lt;/span&gt;
│   ├── Localizable.strings  &lt;span class=&quot;hljs-comment&quot;&gt;# 多语言&lt;/span&gt;
│   └── Colors.swift     &lt;span class=&quot;hljs-comment&quot;&gt;# 颜色常量&lt;/span&gt;
│
├── Services/            &lt;span class=&quot;hljs-comment&quot;&gt;# 全局服务&lt;/span&gt;
│   ├── Network/         &lt;span class=&quot;hljs-comment&quot;&gt;# 网络层&lt;/span&gt;
│   │   ├── APIClient.swift
│   │   └── APIError.swift
│   └── Database/        &lt;span class=&quot;hljs-comment&quot;&gt;# 数据库层&lt;/span&gt;
│       └── CoreDataManager.swift
│
└── SupportingFiles/     &lt;span class=&quot;hljs-comment&quot;&gt;# 工程配置文件&lt;/span&gt;
    ├── Info.plist
    └── LaunchScreen.storyboard
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-4&quot;&gt;&lt;strong&gt;核心模块内部结构详解（以 &lt;code&gt;Home&lt;/code&gt; 模块为例）&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-5&quot;&gt;1. &lt;strong&gt;Controller 层&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;职责&lt;/strong&gt;：处理视图生命周期、用户交互、数据传递&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最佳实践&lt;/strong&gt;：
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// HomeViewController.swift&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HomeViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIViewController&lt;/span&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// MARK: - Properties&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; dataModel: &lt;span class=&quot;hljs-type&quot;&gt;HomeDataModel&lt;/span&gt;!
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; apiService &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;HomeAPIService&lt;/span&gt;()

    &lt;span class=&quot;hljs-comment&quot;&gt;// MARK: - UI Components&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; collectionView: &lt;span class=&quot;hljs-type&quot;&gt;UICollectionView&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }()

    &lt;span class=&quot;hljs-comment&quot;&gt;// MARK: - Lifecycle&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {
        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()
        setupUI()
        loadData()
    }

    &lt;span class=&quot;hljs-comment&quot;&gt;// MARK: - Data Loading&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;loadData&lt;/span&gt;() {
        apiService.fetchHomeData { [&lt;span class=&quot;hljs-keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;] result &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.dataModel &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;HomeDataModel&lt;/span&gt;(result)
            &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.collectionView.reloadData()
        }
    }
}

&lt;span class=&quot;hljs-comment&quot;&gt;// MARK: - UICollectionViewDataSource&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HomeViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UICollectionViewDataSource&lt;/span&gt; { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-6&quot;&gt;2. &lt;strong&gt;Model 层&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;职责&lt;/strong&gt;：数据解析、业务逻辑处理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代码示例&lt;/strong&gt;：
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// HomeDataModel.swift&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HomeDataModel&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; banners: [&lt;span class=&quot;hljs-type&quot;&gt;Banner&lt;/span&gt;]
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; products: [&lt;span class=&quot;hljs-type&quot;&gt;Product&lt;/span&gt;]

    &lt;span class=&quot;hljs-keyword&quot;&gt;init&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;apiResponse&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;APIResponse&lt;/span&gt;) {
        &lt;span class=&quot;hljs-comment&quot;&gt;// 数据转换逻辑&lt;/span&gt;
        banners &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; apiResponse.banners.map { &lt;span class=&quot;hljs-type&quot;&gt;Banner&lt;/span&gt;(dto: &lt;span class=&quot;hljs-variable&quot;&gt;$0&lt;/span&gt;) }
        products &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; apiResponse.products.map { &lt;span class=&quot;hljs-type&quot;&gt;Product&lt;/span&gt;(dto: &lt;span class=&quot;hljs-variable&quot;&gt;$0&lt;/span&gt;) }
    }
}

&lt;span class=&quot;hljs-comment&quot;&gt;// HomeAPIService.swift&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HomeAPIService&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetchHomeData&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;completion&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;@escaping&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;Result&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;APIResponse&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;Error&lt;/span&gt;&amp;gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt;) {
        &lt;span class=&quot;hljs-type&quot;&gt;APIClient&lt;/span&gt;.shared.request(.home, completion: completion)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-7&quot;&gt;3. &lt;strong&gt;View 层&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;职责&lt;/strong&gt;：UI 组件定义、布局、样式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代码示例&lt;/strong&gt;：
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// HomeHeaderView.swift&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HomeHeaderView&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIView&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; titleLabel: &lt;span class=&quot;hljs-type&quot;&gt;UILabel&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; {
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; label &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UILabel&lt;/span&gt;()
        label.font &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; .systemFont(ofSize: &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;, weight: .bold)
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; label
    }()

    &lt;span class=&quot;hljs-comment&quot;&gt;// SnapKit 布局&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setupLayout&lt;/span&gt;() {
        addSubview(titleLabel)
        titleLabel.snp.makeConstraints { make &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;
            make.edges.equalToSuperview().in&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-8&quot;&gt;&lt;strong&gt;关键分层原则&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;严格职责分离&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Controller&lt;/strong&gt;：仅协调数据和视图，不处理业务逻辑&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Model&lt;/strong&gt;：独立处理数据转换、验证、存储&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;View&lt;/strong&gt;：只关注 UI 展示和布局&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;依赖关系方向&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-markdown&quot; lang=&quot;markdown&quot;&gt;View → Controller ← Model
&lt;span class=&quot;hljs-code&quot;&gt;      ↑
      Services/Network
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;禁止 View 直接访问 Model&lt;/li&gt;
&lt;li&gt;禁止 Model 依赖 Controller&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;模块化开发&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个功能模块独立成文件夹&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;@_exported import ModuleName&lt;/code&gt; 实现模块间隔离（Swift 5.9+）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-9&quot;&gt;&lt;strong&gt;进阶扩展建议&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;依赖注入&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DataServiceProtocol&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetchData&lt;/span&gt;() -&amp;gt; [&lt;span class=&quot;hljs-type&quot;&gt;Data&lt;/span&gt;]
}

&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HomeViewController&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; dataService: &lt;span class=&quot;hljs-type&quot;&gt;DataServiceProtocol&lt;/span&gt;

    &lt;span class=&quot;hljs-keyword&quot;&gt;init&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;dataService&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;DataServiceProtocol&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;DefaultDataService&lt;/span&gt;()) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.dataService &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; dataService
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;路由导航&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Router.swift&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;AppRoute&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; productDetail(id: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;)
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; userProfile(userId: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;)
}

&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Router&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;navigate&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;route&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;AppRoute&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;context&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UIViewController&lt;/span&gt;) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; route {
        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; .productDetail(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; id):
            &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; vc &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;ProductDetailViewController&lt;/span&gt;(productId: id)
            context.navigationController&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.pushViewController(vc, animated: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)
        &lt;span class=&quot;hljs-comment&quot;&gt;// 其他路由处理...&lt;/span&gt;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;状态管理&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HomeState&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; isLoading: &lt;span class=&quot;hljs-type&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; data: &lt;span class=&quot;hljs-type&quot;&gt;HomeDataModel&lt;/span&gt;?
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; error: &lt;span class=&quot;hljs-type&quot;&gt;Error&lt;/span&gt;?
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 在 Controller 中观察状态变化&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;observeState&lt;/span&gt;() {
    homeState.&lt;span class=&quot;hljs-variable&quot;&gt;$isLoading&lt;/span&gt;
        .receive(on: &lt;span class=&quot;hljs-type&quot;&gt;DispatchQueue&lt;/span&gt;.main)
        .sink { [&lt;span class=&quot;hljs-keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;] isLoading &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.loadingIndicator.isHidden &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;isLoading
        }
        .store(in: &lt;span class=&quot;hljs-operator&quot;&gt;&amp;amp;&lt;/span&gt;cancellables)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-10&quot;&gt;&lt;strong&gt;典型文件命名规范&lt;/strong&gt;&lt;/h3&gt;






























&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;类型&lt;/th&gt;&lt;th&gt;命名模式&lt;/th&gt;&lt;th&gt;示例&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Controller&lt;/td&gt;&lt;td&gt;&lt;code&gt;[功能]ViewController&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;ProductListViewController&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Model&lt;/td&gt;&lt;td&gt;&lt;code&gt;[功能]Model&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;UserProfileModel&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Service&lt;/td&gt;&lt;td&gt;&lt;code&gt;[功能]Service&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;PaymentService&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;View&lt;/td&gt;&lt;td&gt;&lt;code&gt;[功能][元素类型]View&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;ProductCardView&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;hr&gt;
&lt;p&gt;通过这种结构化的组织方式，您的项目将具备以下优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;快速定位&lt;/strong&gt;：新人可快速找到对应模块代码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;低耦合&lt;/strong&gt;：模块间依赖清晰，易于单元测试&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高扩展性&lt;/strong&gt;：新增功能只需添加模块目录&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;团队协作&lt;/strong&gt;：多人并行开发不冲突&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;以下是一个基于 &lt;strong&gt;MVC 模式&lt;/strong&gt;、&lt;strong&gt;纯代码 UI&lt;/strong&gt; 和 &lt;strong&gt;SnapKit 约束&lt;/strong&gt; 的完整示例，涵盖用户列表展示场景：&lt;/p&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-11&quot;&gt;&lt;strong&gt;1. Model 层&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// User.swift&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;User&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; id: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; name: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; email: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-12&quot;&gt;&lt;strong&gt;2. View 层&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-13&quot;&gt;&lt;strong&gt;自定义 UITableViewCell&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// UserTableViewCell.swift&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UserTableViewCell&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UITableViewCell&lt;/span&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// MARK: - UI Elements&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; nameLabel: &lt;span class=&quot;hljs-type&quot;&gt;UILabel&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; {
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; label &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UILabel&lt;/span&gt;()
        label.font &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; .systemFont(ofSize: &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;, weight: .bold)
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; label
    }()
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; emailLabel: &lt;span class=&quot;hljs-type&quot;&gt;UILabel&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; {
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; label &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UILabel&lt;/span&gt;()
        label.font &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; .systemFont(ofSize: &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;)
        label.textColor &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; .gray
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; label
    }()
    
    &lt;span class=&quot;hljs-comment&quot;&gt;// MARK: - Initialization&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;init&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;style&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UITableViewCell&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;CellStyle&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;reuseIdentifier&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;?) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;init&lt;/span&gt;(style: style, reuseIdentifier: reuseIdentifier)
        setupUI()
    }
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;init?&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;coder&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;NSCoder&lt;/span&gt;) {
        &lt;span class=&quot;hljs-built_in&quot;&gt;fatalError&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;init(coder:) has not been implemented&quot;&lt;/span&gt;)
    }
    
    &lt;span class=&quot;hljs-comment&quot;&gt;// MARK: - UI Setup&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setupUI&lt;/span&gt;() {
        [nameLabel, emailLabel].forEach { contentView.addSubview(&lt;span class=&quot;hljs-variable&quot;&gt;$0&lt;/span&gt;) }
        
        &lt;span class=&quot;hljs-comment&quot;&gt;// SnapKit 约束&lt;/span&gt;
        nameLabel.snp.makeConstraints { make &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;
            make.top.left.equalToSuperview().in&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;)
            make.right.lessThanOrEqualToSuperview().offset(&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;)
        }
        
        emailLabel.snp.makeConstraints { make &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;
            make.top.equalTo(nameLabel.snp.bottom).offset(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;)
            make.left.bottom.equalToSuperview().in&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;)
        }
    }
    
    &lt;span class=&quot;hljs-comment&quot;&gt;// MARK: - Data Binding&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;configure&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;user&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;User&lt;/span&gt;) {
        nameLabel.text &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; user.name
        emailLabel.text &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; user.email
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-14&quot;&gt;&lt;strong&gt;3. Controller 层&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-15&quot;&gt;&lt;strong&gt;ViewController&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// UserListViewController.swift&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UserListViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIViewController&lt;/span&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// MARK: - Properties&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; users: [&lt;span class=&quot;hljs-type&quot;&gt;User&lt;/span&gt;] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; []
    
    &lt;span class=&quot;hljs-comment&quot;&gt;// MARK: - UI Elements&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; tableView: &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;! 
  
    
    &lt;span class=&quot;hljs-comment&quot;&gt;// MARK: - Lifecycle&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {
        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()
        setupUI()
        loadData()
    }
    
    &lt;span class=&quot;hljs-comment&quot;&gt;// MARK: - Data Loading&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;loadData&lt;/span&gt;() {
        &lt;span class=&quot;hljs-comment&quot;&gt;// 模拟网络请求&lt;/span&gt;
        &lt;span class=&quot;hljs-type&quot;&gt;UserService&lt;/span&gt;.fetchUsers { [&lt;span class=&quot;hljs-keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;] result &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; }
            
            &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; result {
            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; .success(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; users):
                &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.users &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; users
                &lt;span class=&quot;hljs-type&quot;&gt;DispatchQueue&lt;/span&gt;.main.async {
                    &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.tableView.reloadData()
                }
            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; .failure(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; error):
                &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Error: &lt;span class=&quot;hljs-subst&quot;&gt;\(error.localizedDescription)&lt;/span&gt;&quot;&lt;/span&gt;)
            }
        }
    }
    
  &lt;span class=&quot;hljs-comment&quot;&gt;// MARK: - Actions&lt;/span&gt;


    
    &lt;span class=&quot;hljs-comment&quot;&gt;// MARK: - UI Setup (代码太多放在最后)&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setupUI&lt;/span&gt;() {
        view.backgroundColor &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; .white
        tableView &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;()
        tableView.register(&lt;span class=&quot;hljs-type&quot;&gt;UserTableViewCell&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;, forCellReuseIdentifier: &lt;span class=&quot;hljs-string&quot;&gt;&quot;UserCell&quot;&lt;/span&gt;)
        tableView.delegate &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;
        tableView.dataSource &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;
        view.addSubview(tableView)
        
        &lt;span class=&quot;hljs-comment&quot;&gt;// SnapKit 约束&lt;/span&gt;
        tableView.snp.makeConstraints { make &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;
            make.edges.equalToSuperview()
        }
    }
}

&lt;span class=&quot;hljs-comment&quot;&gt;// MARK: - UITableViewDataSource &amp;amp; Delegate&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UserListViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UITableViewDataSource&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;UITableViewDelegate&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tableView&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;tableView&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;numberOfRowsInSection&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;section&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt; {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; users.count
    }
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tableView&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;tableView&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;cellForRowAt&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;indexPath&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;IndexPath&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableViewCell&lt;/span&gt; {
        &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; cell &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; tableView.dequeueReusableCell(withIdentifier: &lt;span class=&quot;hljs-string&quot;&gt;&quot;UserCell&quot;&lt;/span&gt;, for: indexPath) &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UserTableViewCell&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableViewCell&lt;/span&gt;()
        }
        cell.configure(with: users[indexPath.row])
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; cell
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-16&quot;&gt;&lt;strong&gt;4. Service 层&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// UserService.swift&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UserService&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetchUsers&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;completion&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;@escaping&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;Result&lt;/span&gt;&amp;lt;[&lt;span class=&quot;hljs-type&quot;&gt;User&lt;/span&gt;], &lt;span class=&quot;hljs-type&quot;&gt;Error&lt;/span&gt;&amp;gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt;) {
        &lt;span class=&quot;hljs-comment&quot;&gt;// 模拟异步请求&lt;/span&gt;
        &lt;span class=&quot;hljs-type&quot;&gt;DispatchQueue&lt;/span&gt;.global().asyncAfter(deadline: .now() &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {
            &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; mockUsers &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; [
                &lt;span class=&quot;hljs-type&quot;&gt;User&lt;/span&gt;(id: &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;, name: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Alice&quot;&lt;/span&gt;, email: &lt;span class=&quot;hljs-string&quot;&gt;&quot;alice@example.com&quot;&lt;/span&gt;),
                &lt;span class=&quot;hljs-type&quot;&gt;User&lt;/span&gt;(id: &lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;, name: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bob&quot;&lt;/span&gt;, email: &lt;span class=&quot;hljs-string&quot;&gt;&quot;bob@example.com&quot;&lt;/span&gt;)
            ]
            &lt;span class=&quot;hljs-type&quot;&gt;DispatchQueue&lt;/span&gt;.main.async {
                completion(.success(mockUsers))
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-17&quot;&gt;&lt;strong&gt;关键点说明&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;MVC 分层清晰&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Model&lt;/strong&gt;: &lt;code&gt;User&lt;/code&gt; 结构体表示数据&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;View&lt;/strong&gt;: &lt;code&gt;UserTableViewCell&lt;/code&gt; 处理 UI 展示&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Controller&lt;/strong&gt;: &lt;code&gt;UserListViewController&lt;/code&gt; 协调数据和视图&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;纯代码 UI&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;init(style:reuseIdentifier:)&lt;/code&gt; 初始化 Cell&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;snp.makeConstraints&lt;/code&gt; 添加 SnapKit 约束&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;避免循环引用&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在闭包中使用 &lt;code&gt;[weak self]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;guard let self = self else { return }&lt;/code&gt; 安全解包&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;异步处理&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;DispatchQueue&lt;/code&gt; 模拟网络请求&lt;/li&gt;
&lt;li&gt;主线程更新 UI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;代码可维护性&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;MARK&lt;/code&gt; 注释分隔代码块&lt;/li&gt;
&lt;li&gt;将 Service 逻辑独立到单独类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-18&quot;&gt;&lt;strong&gt;效果预览&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt=&quot;Simulator Screen Recording转存失败，建议直接上传图片文件&quot; src=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
（实际运行后会显示包含 Alice 和 Bob 的用户列表）&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这种结构符合 Apple 推荐的 MVC 模式，同时通过 SnapKit 简化了 Auto Layout 代码，适合中大型项目的可维护性要求。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;给控制器 方法命名
业务明确、不易混淆&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;好的，我现在需要帮用户解决如何给控制器的方法命名的问题。用户之前已经询问了关于iOS Swift UIKit的编程规范，特别是MVC架构下按钮点击事件的处理位置。现在他们进一步想知道控制器方法的命名规范。&lt;/p&gt;
&lt;p&gt;首先，我得回顾之前的对话，确保这次的回答和之前的指南一致。之前的回答中提到了命名规范，比如类型和协议使用大驼峰，变量和函数用小驼峰，布尔属性以is、has等开头。同时，在控制器处理按钮点击事件时，方法名如didTapButton，遵循了清晰的动作描述。&lt;/p&gt;
&lt;p&gt;接下来，我需要确定用户的具体需求。他们可能希望了解控制器中的方法应该如何命名，特别是不同职责的方法，比如生命周期方法、事件处理、数据加载、导航等。命名规范对于代码的可读性和可维护性非常重要，尤其是在团队协作中。&lt;/p&gt;
&lt;p&gt;用户可能想知道如何区分私有方法和公有方法，是否需要使用特定前缀或后缀。此外，是否有常见的命名模式或Apple的官方建议可以参考。比如，Apple的文档中通常使用动词开头的方法名，如viewDidLoad, prepare(for:sender:)，这些都是标准的生命周期方法。&lt;/p&gt;
&lt;p&gt;还要考虑方法的作用域。私有方法是否需要使用下划线或其他标记？在Swift中，通常使用private关键字，并且方法名不需要下划线，但有些团队可能有自己的规范。另外，是否需要使用// MARK:来分组方法，提高代码的可读性。&lt;/p&gt;
&lt;p&gt;此外，事件处理方法如按钮点击、手势识别等，通常以didTap、handle等动词开头，明确表示用户交互触发的动作。数据相关的方法可能以load、fetch、update、delete等动词开头，表明其功能。&lt;/p&gt;
&lt;p&gt;可能需要举一些具体的例子，涵盖不同场景下的命名，比如初始化UI、处理按钮点击、网络请求回调、导航跳转等。同时，要强调一致性的重要性，避免混合使用不同的命名风格。&lt;/p&gt;
&lt;p&gt;另外，用户可能在处理复杂逻辑时，如何命名辅助方法。比如，验证表单的方法可以命名为validateForm，显示警告的方法为showErrorAlert，这样方法名即表达了其功能。&lt;/p&gt;
&lt;p&gt;还要注意避免使用模糊的命名，比如doSomething或processData，这样的名称无法清晰传达方法的作用。应该使用更具描述性的名称，比如fetchUserData或updateProfileImage。&lt;/p&gt;
&lt;p&gt;最后，可能需要提到一些工具，如SwiftLint，来强制执行命名规范，确保团队代码风格统一。同时，参考Apple的API设计指南，遵循Swift的命名惯例，使用自然语言和清晰的表达方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下是针对 &lt;strong&gt;控制器方法命名&lt;/strong&gt; 的规范化指南，结合 Apple 官方建议和 Swift 社区最佳实践：&lt;/p&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-19&quot;&gt;&lt;strong&gt;1. 核心原则&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;清晰性优先&lt;/strong&gt;：方法名应直接反映其行为或意图（如 &lt;code&gt;updateUI&lt;/code&gt; 优于 &lt;code&gt;refresh&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动词开头&lt;/strong&gt;：表示动作（&lt;code&gt;fetch&lt;/code&gt;、&lt;code&gt;handle&lt;/code&gt;、&lt;code&gt;navigate&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免缩写&lt;/strong&gt;：&lt;code&gt;configureCell&lt;/code&gt; 优于 &lt;code&gt;configCell&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用域标识&lt;/strong&gt;：私有方法使用 &lt;code&gt;private&lt;/code&gt; 修饰，无需添加 &lt;code&gt;_&lt;/code&gt; 前缀&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-20&quot;&gt;&lt;strong&gt;2. 分类命名规范&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-21&quot;&gt;&lt;strong&gt;(1) 生命周期方法&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;直接使用 Apple 预设方法名，禁止修改：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }
&lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewWillAppear&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;animated&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;Bool&lt;/span&gt;) { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }
&lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;traitCollectionDidChange&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;previousTraitCollection&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UITraitCollection&lt;/span&gt;?) { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 data-id=&quot;heading-22&quot;&gt;&lt;strong&gt;(2) UI 初始化与布局&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：创建视图、设置约束、配置样式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;命名模式&lt;/strong&gt;：&lt;code&gt;setup[元素名]&lt;/code&gt; 或 &lt;code&gt;configure[功能]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 初始化所有 UI 元素&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setupUI&lt;/span&gt;() {
    setupTableView()
    setupNavigationBar()
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 配置特定组件&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setupTableView&lt;/span&gt;() {
    tableView.register(&lt;span class=&quot;hljs-type&quot;&gt;Cell&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;, forCellReuseIdentifier: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Cell&quot;&lt;/span&gt;)
    &lt;span class=&quot;hljs-comment&quot;&gt;// SnapKit 约束&lt;/span&gt;
    tableView.snp.makeConstraints { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 动态样式配置&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;configureDarkMode&lt;/span&gt;() {
    view.backgroundColor &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; .systemBackground
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 data-id=&quot;heading-23&quot;&gt;&lt;strong&gt;(3) 用户交互事件&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：按钮点击、手势、输入框回调&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;命名模式&lt;/strong&gt;：&lt;code&gt;didTap[元素名]&lt;/code&gt; 或 &lt;code&gt;handle[动作]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 按钮点击（明确目标）&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;@objc&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;didTapSubmitButton&lt;/span&gt;() {
    validateForm()
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 手势识别（通用处理）&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;@objc&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;handlePanGesture&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;gesture&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UIPanGestureRecognizer&lt;/span&gt;) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 处理拖拽逻辑&lt;/span&gt;
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 输入框回调（带参数）&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;@objc&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;textFieldDidChange&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;textField&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UITextField&lt;/span&gt;) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; text &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; textField.text &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; }
    search(keyword: text)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 data-id=&quot;heading-24&quot;&gt;&lt;strong&gt;(4) 数据操作&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：网络请求、本地数据加载、缓存处理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;命名模式&lt;/strong&gt;：&lt;code&gt;load/fetch/update/delete[数据对象]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 加载本地数据&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;loadCachedData&lt;/span&gt;() {
    &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; data &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; cacheManager.getData() &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; }
    process(data)
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 发起网络请求&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetchUserProfile&lt;/span&gt;() {
    &lt;span class=&quot;hljs-type&quot;&gt;APIService&lt;/span&gt;.fetchProfile { [&lt;span class=&quot;hljs-keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;] result &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.handleProfileResult(result)
    }
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 处理请求结果（私有方法）&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;handleProfileResult&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;Result&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;User&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;Error&lt;/span&gt;&amp;gt;) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; result {
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; .success(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; user): updateUI(with: user)
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; .failure(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; error): showErrorAlert(message: error.localizedDescription)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 data-id=&quot;heading-25&quot;&gt;&lt;strong&gt;(5) 导航与页面跳转&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：跳转到下一页、模态弹窗、关闭页面&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;命名模式&lt;/strong&gt;：&lt;code&gt;navigateTo[目标]&lt;/code&gt; 或 &lt;code&gt;show/dismiss[页面]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 跳转到详情页&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;navigateToDetailPage&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;Item&lt;/span&gt;) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; vc &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;DetailViewController&lt;/span&gt;(item: item)
    navigationController&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.pushViewController(vc, animated: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 显示模态弹窗&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;showFilterOptions&lt;/span&gt;() {
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; filterVC &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;FilterViewController&lt;/span&gt;()
    filterVC.delegate &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;
    present(filterVC, animated: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 关闭当前页&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;@objc&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;dismissCurrentPage&lt;/span&gt;() {
    dismiss(animated: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 data-id=&quot;heading-26&quot;&gt;&lt;strong&gt;(6) 工具方法&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：数据验证、格式化、工具函数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;命名模式&lt;/strong&gt;：&lt;code&gt;validate[对象]&lt;/code&gt; / &lt;code&gt;format[数据类型]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 表单验证&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;validateForm&lt;/span&gt;() -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Bool&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;usernameTextField.text&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;.isEmpty &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        showValidationError(&lt;span class=&quot;hljs-string&quot;&gt;&quot;用户名不能为空&quot;&lt;/span&gt;)
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
    }
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 日期格式化&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;formatDate&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;date&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; formatter &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;DateFormatter&lt;/span&gt;()
    formatter.dateStyle &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; .medium
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; formatter.string(from: date)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-27&quot;&gt;&lt;strong&gt;3. 进阶技巧&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-28&quot;&gt;&lt;strong&gt;(1) 使用 &lt;code&gt;// MARK:&lt;/code&gt; 分组方法&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;提升代码可读性：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// MARK: - UITableViewDataSource&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UITableViewDataSource&lt;/span&gt; { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }

&lt;span class=&quot;hljs-comment&quot;&gt;// MARK: - Network Handling&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewController&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetchData&lt;/span&gt;() { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }
    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;handleNetworkError&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;error&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;Error&lt;/span&gt;) { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-29&quot;&gt;&lt;strong&gt;(2) 闭包参数命名&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;若方法接受闭包参数，需明确其用途：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;loadData&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;completion&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;@escaping&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;Result&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;Data&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;Error&lt;/span&gt;&amp;gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt;) { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-30&quot;&gt;&lt;strong&gt;(3) 避免冗余前缀&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Swift 的命名空间机制不需要类名前缀：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// ✅ 正确&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;configureHeaderView&lt;/span&gt;() { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }

&lt;span class=&quot;hljs-comment&quot;&gt;// ❌ 避免&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;vc_configureHeaderView&lt;/span&gt;() { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-31&quot;&gt;&lt;strong&gt;4. 典型错误示例与修正&lt;/strong&gt;&lt;/h3&gt;






























&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;错误命名&lt;/strong&gt;&lt;/th&gt;&lt;th&gt;&lt;strong&gt;问题&lt;/strong&gt;&lt;/th&gt;&lt;th&gt;&lt;strong&gt;修正方案&lt;/strong&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;func get() { ... }&lt;/code&gt;&lt;/td&gt;&lt;td&gt;无意义动词&lt;/td&gt;&lt;td&gt;&lt;code&gt;func fetchUserData() { ... }&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;func update() { ... }&lt;/code&gt;&lt;/td&gt;&lt;td&gt;缺少操作对象&lt;/td&gt;&lt;td&gt;&lt;code&gt;func updateProfileImage() { ... }&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;func btnClick() { ... }&lt;/code&gt;&lt;/td&gt;&lt;td&gt;非标准缩写&lt;/td&gt;&lt;td&gt;&lt;code&gt;func didTapSubmitButton() { ... }&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;func process() { ... }&lt;/code&gt;&lt;/td&gt;&lt;td&gt;模糊职责&lt;/td&gt;&lt;td&gt;&lt;code&gt;func handleImageUpload() { ... }&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-32&quot;&gt;&lt;strong&gt;5. 命名检查工具&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SwiftLint 规则&lt;/strong&gt;：启用 &lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Frealm.github.io%2FSwiftLint%2Fidentifier_name.html&quot; target=&quot;_blank&quot; title=&quot;https://realm.github.io/SwiftLint/identifier_name.html&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;&lt;code&gt;identifier_name&lt;/code&gt;&lt;/a&gt; 规则限制命名风格&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Xcode 重构工具&lt;/strong&gt;：右键方法名 → Refactor → Rename 安全重命名&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;通过遵循这些规范，您的控制器代码将具备以下优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可读性&lt;/strong&gt;：新成员快速理解方法作用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可维护性&lt;/strong&gt;：减少因命名歧义引发的 Bug&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一致性&lt;/strong&gt;：团队协作风格统一&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是针对 &lt;strong&gt;控制器（ViewController）命名&lt;/strong&gt; 的规范化指南，结合 Apple 官方建议和 Swift 社区最佳实践：&lt;/p&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-33&quot;&gt;&lt;strong&gt;1. 核心原则&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;明确职责&lt;/strong&gt;：名称应直接反映其功能或管理的视图内容（如 &lt;code&gt;LoginViewController&lt;/code&gt; 管理登录页）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用 &lt;code&gt;ViewController&lt;/code&gt; 后缀&lt;/strong&gt;：统一标识控制器类型&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免冗余前缀&lt;/strong&gt;：Swift 的模块化特性无需添加项目缩写（如 &lt;code&gt;XXUserVC&lt;/code&gt; 不符合规范）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;大驼峰式（UpperCamelCase）&lt;/strong&gt;：首字母大写，无下划线或连字符&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-34&quot;&gt;&lt;strong&gt;2. 具体场景命名规范&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-35&quot;&gt;&lt;strong&gt;(1) 基础页面控制器&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;模式&lt;/strong&gt;：&lt;code&gt;[功能]ViewController&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;：
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// ✅ 正确&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HomeViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIViewController&lt;/span&gt; { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }      &lt;span class=&quot;hljs-comment&quot;&gt;// 首页&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ProfileViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIViewController&lt;/span&gt; { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }  &lt;span class=&quot;hljs-comment&quot;&gt;// 用户资料页&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SettingsViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIViewController&lt;/span&gt; { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; } &lt;span class=&quot;hljs-comment&quot;&gt;// 设置页&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-36&quot;&gt;&lt;strong&gt;(2) 列表/集合视图控制器&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;模式&lt;/strong&gt;：&lt;code&gt;[数据对象]ListViewController&lt;/code&gt; 或 &lt;code&gt;[功能]CollectionViewController&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;：
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ProductListViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UITableViewController&lt;/span&gt; { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }       &lt;span class=&quot;hljs-comment&quot;&gt;// 商品列表&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PhotoCollectionViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UICollectionViewController&lt;/span&gt; { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; } &lt;span class=&quot;hljs-comment&quot;&gt;// 图片集合视图&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-37&quot;&gt;&lt;strong&gt;(3) 详情页控制器&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;模式&lt;/strong&gt;：&lt;code&gt;[主对象]DetailViewController&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;：
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArticleDetailViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIViewController&lt;/span&gt; { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }  &lt;span class=&quot;hljs-comment&quot;&gt;// 文章详情页&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;OrderDetailViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIViewController&lt;/span&gt; { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }    &lt;span class=&quot;hljs-comment&quot;&gt;// 订单详情页&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-38&quot;&gt;&lt;strong&gt;(4) 容器类控制器&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;模式&lt;/strong&gt;：&lt;code&gt;[布局类型]ContainerViewController&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;：
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TabContainerViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UITabBarController&lt;/span&gt; { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }    &lt;span class=&quot;hljs-comment&quot;&gt;// Tab 容器&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PageContainerViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIPageViewController&lt;/span&gt; { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; } &lt;span class=&quot;hljs-comment&quot;&gt;// 分页容器&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-39&quot;&gt;&lt;strong&gt;(5) 弹窗/浮层控制器&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;模式&lt;/strong&gt;：&lt;code&gt;[功能]PopupViewController&lt;/code&gt; 或 &lt;code&gt;[动作]ActionSheetViewController&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;：
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FilterPopupViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIViewController&lt;/span&gt; { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }       &lt;span class=&quot;hljs-comment&quot;&gt;// 筛选弹窗&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ShareActionSheetViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIViewController&lt;/span&gt; { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }  &lt;span class=&quot;hljs-comment&quot;&gt;// 分享动作面板&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-40&quot;&gt;&lt;strong&gt;3. 高级场景命名&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-41&quot;&gt;&lt;strong&gt;(1) 组合功能控制器&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;使用连词明确多职责：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SearchAndFilterViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIViewController&lt;/span&gt; { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }  &lt;span class=&quot;hljs-comment&quot;&gt;// 集成搜索+筛选功能&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-42&quot;&gt;&lt;strong&gt;(2) 子模块控制器&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;通过路径层级体现关系：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 用户模块的子页面&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UserNotificationSettingsViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIViewController&lt;/span&gt; { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }  &lt;span class=&quot;hljs-comment&quot;&gt;// 用户通知设置页&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-43&quot;&gt;&lt;strong&gt;(3) 通用组件控制器&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;强调复用性：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ImagePickerViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIImagePickerController&lt;/span&gt; { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }  &lt;span class=&quot;hljs-comment&quot;&gt;// 通用图片选择器&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-44&quot;&gt;&lt;strong&gt;4. 错误命名示例与修正&lt;/strong&gt;&lt;/h3&gt;






























&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;错误命名&lt;/strong&gt;&lt;/th&gt;&lt;th&gt;&lt;strong&gt;问题&lt;/strong&gt;&lt;/th&gt;&lt;th&gt;&lt;strong&gt;修正方案&lt;/strong&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;class VC1: UIViewController&lt;/code&gt;&lt;/td&gt;&lt;td&gt;无意义缩写&lt;/td&gt;&lt;td&gt;&lt;code&gt;class LoginViewController&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;class UserVC: UIViewController&lt;/code&gt;&lt;/td&gt;&lt;td&gt;冗余缩写&lt;/td&gt;&lt;td&gt;&lt;code&gt;class UserProfileViewController&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;class MyHomePage: UIViewController&lt;/code&gt;&lt;/td&gt;&lt;td&gt;缺少后缀&lt;/td&gt;&lt;td&gt;&lt;code&gt;class HomeViewController&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;class product_list_vc: UIViewController&lt;/code&gt;&lt;/td&gt;&lt;td&gt;蛇形命名法&lt;/td&gt;&lt;td&gt;&lt;code&gt;class ProductListViewController&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-45&quot;&gt;&lt;strong&gt;5. 特殊类型控制器命名&lt;/strong&gt;&lt;/h3&gt;






























&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;控制器类型&lt;/strong&gt;&lt;/th&gt;&lt;th&gt;&lt;strong&gt;命名规范&lt;/strong&gt;&lt;/th&gt;&lt;th&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;UITableViewController&lt;/code&gt;&lt;/td&gt;&lt;td&gt;保持 &lt;code&gt;ViewController&lt;/code&gt; 后缀&lt;/td&gt;&lt;td&gt;&lt;code&gt;class OrderListViewController: UITableViewController&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;UICollectionViewController&lt;/code&gt;&lt;/td&gt;&lt;td&gt;同上&lt;/td&gt;&lt;td&gt;&lt;code&gt;class GalleryViewController: UICollectionViewController&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;子视图控制器&lt;/td&gt;&lt;td&gt;体现父子关系&lt;/td&gt;&lt;td&gt;&lt;code&gt;class ProfileHeaderViewController: UIViewController&lt;/code&gt; (作为 Profile 页的子控制器)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;通用基类控制器&lt;/td&gt;&lt;td&gt;添加 &lt;code&gt;Base&lt;/code&gt; 前缀&lt;/td&gt;&lt;td&gt;&lt;code&gt;class BaseViewController: UIViewController&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-46&quot;&gt;&lt;strong&gt;6. 配套文件命名规范&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;保持与控制器类名一致，方便检索：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Storyboard/XIB 文件&lt;/strong&gt;：&lt;code&gt;LoginViewController.storyboard&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ViewModel&lt;/strong&gt;：&lt;code&gt;LoginViewModel.swift&lt;/code&gt; (MVVM 模式)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;单元测试类&lt;/strong&gt;：&lt;code&gt;LoginViewControllerTests.swift&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-47&quot;&gt;&lt;strong&gt;7. 工具辅助&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SwiftLint 规则&lt;/strong&gt;：通过 &lt;code&gt;type_name&lt;/code&gt; 规则强制后缀检测
&lt;pre&gt;&lt;code class=&quot;hljs language-yaml&quot; lang=&quot;yaml&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# .swiftlint.yml&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;type_name:&lt;/span&gt;
  &lt;span class=&quot;hljs-attr&quot;&gt;validates_start_with_lowercase:&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;hljs-attr&quot;&gt;allowed_symbols:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;ViewController&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Xcode 模板&lt;/strong&gt;：自定义 File Template 统一生成规范名称&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;遵循这些规范将带来以下优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;快速定位文件&lt;/strong&gt;：通过名称直接判断控制器功能&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;减少命名冲突&lt;/strong&gt;：清晰的层级和模块划分&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提升团队协作&lt;/strong&gt;：统一命名风格降低沟通成本&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;我先来分析用户的问题。用户在之前的对话中提到了使用MVC设计模式、代码添加UI以及使用SnapKit进行约束布局的例子，现在进一步询问如何给控制器以及里面的方法命名。这表明用户对代码规范和可读性有较高的关注，可能希望在实际开发中写出清晰、易维护的代码。&lt;/p&gt;
&lt;p&gt;我需要先回顾之前的回答内容，确保上下文连贯。之前的回答已经给出了一个完整的MVC示例，包括模型、视图和控制器的实现。用户现在的问题更聚焦在控制器和方法的命名上，这意味着我需要从命名规范的角度去回答，而不是重复之前的代码实现。&lt;/p&gt;
&lt;p&gt;接下来，我思考如何组织回答。命名规范是一个比较常见的话题，我需要从几个方面来展开，比如控制器的命名、方法的命名，以及如何让名字清晰、准确地表达其功能。我还需要结合MVC的背景，说明控制器和方法在MVC中的角色，这样用户能更好地理解为什么这样命名。&lt;/p&gt;
&lt;p&gt;在具体回答时，我会先从控制器的命名开始，因为控制器是用户提问的第一部分。控制器的命名需要体现其职责，比如管理哪个模块或功能。然后，我会转到方法的命名，强调动宾结构和语义清晰的重要性。最后，我会补充一些通用的命名建议，比如避免模糊词汇、保持一致性等。&lt;/p&gt;
&lt;p&gt;在语气上，我会保持专业但不失亲切，尽量用通俗易懂的语言来解释，同时提供一些具体的例子，帮助用户更好地理解和应用这些建议。&lt;/p&gt;
&lt;p&gt;总结一下，我的回答会围绕以下几个点展开：控制器命名的规则、方法命名的技巧、以及一些通用的命名建议。这些内容既要符合规范，又要结合实际开发场景，确保用户能学以致用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在iOS开发中，给控制器和方法命名时，应该遵循一些通用的命名规范和最佳实践，以确保代码的可读性、可维护性和一致性。以下是一些具体的建议：&lt;/p&gt;
&lt;h3 data-id=&quot;heading-48&quot;&gt;控制器命名规范&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用描述性名称&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;控制器的名称应该清晰地描述其功能和职责。例如，&lt;code&gt;PersonViewController&lt;/code&gt; 表示该控制器用于管理与人员信息相关的视图。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;遵循命名约定&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;控制器类名通常以 &quot;ViewController&quot; 结尾，例如 &lt;code&gt;SettingsViewController&lt;/code&gt;、&lt;code&gt;ProfileViewController&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用驼峰命名法&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类名采用大驼峰命名法（PascalCase），即每个单词的首字母大写，例如 &lt;code&gt;ProductDetailViewController&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;避免使用模糊的名称&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免使用模糊或不具体的名称，如 &lt;code&gt;MainViewController&lt;/code&gt; 或 &lt;code&gt;DataViewController&lt;/code&gt;，除非它们确实对应于应用中的主视图或数据视图。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 data-id=&quot;heading-49&quot;&gt;方法命名规范&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用动宾结构&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法名应该是一个动词或动词短语，描述该方法执行的操作。例如，&lt;code&gt;loadData()&lt;/code&gt;、&lt;code&gt;saveUserInfo()&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;遵循命名约定&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法名采用小驼峰命名法（camelCase），即第一个单词的首字母小写，后续单词的首字母大写，例如 &lt;code&gt;fetchRemoteData()&lt;/code&gt;、&lt;code&gt;updateUI()&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;参数命名清晰&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法的参数名也应该清晰描述其用途，例如 &lt;code&gt;configure(with:)&lt;/code&gt;、&lt;code&gt;handleEvent(for:at:)&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;避免使用模糊的名称&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免使用模糊或不具体的名称，如 &lt;code&gt;doSomething()&lt;/code&gt;，除非方法确实执行一个非常通用的操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 data-id=&quot;heading-50&quot;&gt;示例&lt;/h3&gt;
&lt;p&gt;以下是一个遵循上述命名规范的控制器和方法的示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; UIKit

&lt;span class=&quot;hljs-comment&quot;&gt;// 模型&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; age: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 视图&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PersonView&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIView&lt;/span&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 视图相关代码&lt;/span&gt;
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 控制器&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PersonViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIViewController&lt;/span&gt; {
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; person: &lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt;?
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; personView &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;PersonView&lt;/span&gt;()
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;loadView&lt;/span&gt;() {
        view &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; personView
    }
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {
        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()
        title &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Person Information&quot;&lt;/span&gt;
        setupActions()
        updateView()
    }
    
    &lt;span class=&quot;hljs-comment&quot;&gt;// 设置动作&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setupActions&lt;/span&gt;() {
        personView.saveButton.addTarget(&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;, action: &lt;span class=&quot;hljs-keyword&quot;&gt;#selector&lt;/span&gt;(saveButtonTapped), for: .touchUpInside)
    }
    
    &lt;span class=&quot;hljs-comment&quot;&gt;// 更新视图&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;updateView&lt;/span&gt;() {
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; person &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; person {
            personView.nameTextField.text &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; person.name
            personView.ageTextField.text &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;(person.age)
        }
    }
    
    &lt;span class=&quot;hljs-comment&quot;&gt;// 保存按钮点击处理&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;@objc&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;saveButtonTapped&lt;/span&gt;() {
        &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; personView.nameTextField.text, &lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;name.isEmpty,
              &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; ageText &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; personView.ageTextField.text, &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; age &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;(ageText) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
            showAlert(message: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter valid name and age.&quot;&lt;/span&gt;)
            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;
        }
        
        person &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt;(name: name, age: age)
        showAlert(message: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Person information saved successfully!&quot;&lt;/span&gt;)
    }
    
    &lt;span class=&quot;hljs-comment&quot;&gt;// 显示警告&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;showAlert&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;message&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; alert &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UIAlertController&lt;/span&gt;(title: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Alert&quot;&lt;/span&gt;, message: message, preferredStyle: .alert)
        alert.addAction(&lt;span class=&quot;hljs-type&quot;&gt;UIAlertAction&lt;/span&gt;(title: &lt;span class=&quot;hljs-string&quot;&gt;&quot;OK&quot;&lt;/span&gt;, style: .default, handler: &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;))
        present(alert, animated: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, completion: &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-51&quot;&gt;总结&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;控制器命名&lt;/strong&gt;：使用描述性名称，遵循 &quot;ViewController&quot; 后缀约定，采用大驼峰命名法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;方法命名&lt;/strong&gt;：使用动宾结构，遵循小驼峰命名法，参数命名清晰，避免模糊名称。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过遵循这些命名规范，可以使代码更加清晰、易读和易维护，有助于团队协作和长期项目的可持续发展。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;命名控制器及其方法时，遵循清晰、简洁和易于理解的原则非常重要。下面是一些关于控制器和方法命名的建议：&lt;/p&gt;
&lt;h3 data-id=&quot;heading-52&quot;&gt;1. 控制器命名&lt;/h3&gt;
&lt;p&gt;控制器的命名应根据其所管理的视图或功能进行命名。通常情况下，控制器的命名采用 &lt;strong&gt;&lt;code&gt;&amp;lt;功能/视图&amp;gt;ViewController&lt;/code&gt;&lt;/strong&gt; 的格式。以下是一些常见的命名模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基于功能的命名&lt;/strong&gt;：
如果控制器的功能比较清晰，可以直接使用功能来命名控制器。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LoginViewController&lt;/code&gt;：用于处理登录界面。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SettingsViewController&lt;/code&gt;：用于处理设置界面。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ProfileViewController&lt;/code&gt;：用于处理用户资料页面。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HomeViewController&lt;/code&gt;：用于展示首页内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基于视图的命名&lt;/strong&gt;：
如果控制器管理的是某个具体的视图，可以结合视图进行命名：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LoginScreenViewController&lt;/code&gt;：表示登录屏幕。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DashboardViewController&lt;/code&gt;：表示仪表盘页面。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MainMenuViewController&lt;/code&gt;：表示主菜单页面。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;命名时应该避免使用过于宽泛的名称，如 &lt;code&gt;ViewController&lt;/code&gt; 或 &lt;code&gt;MainController&lt;/code&gt;，因为这些名称过于通用，可能会导致代码的可读性下降。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-53&quot;&gt;2. 方法命名&lt;/h3&gt;
&lt;p&gt;方法的命名应该根据它所执行的操作来命名，确保能够清楚地表明方法的功能。以下是一些常见的命名规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;事件或动作相关的命名&lt;/strong&gt;：
如果方法是用来响应用户操作或事件的，方法名称通常以 &lt;strong&gt;&lt;code&gt;handle&lt;/code&gt;&lt;/strong&gt; 或 &lt;strong&gt;&lt;code&gt;perform&lt;/code&gt;&lt;/strong&gt; 开头，接着是描述行为的名词。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;handleLoginButtonTapped()&lt;/code&gt;：处理登录按钮点击事件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;performSearch()&lt;/code&gt;：执行搜索操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;handleLogout()&lt;/code&gt;：处理用户注销。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;performAction(for:)&lt;/code&gt;：执行特定操作，参数描述行为的对象或参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;状态更新相关的命名&lt;/strong&gt;：
如果方法用于更新 UI 或数据状态，可以使用 &lt;strong&gt;&lt;code&gt;update&lt;/code&gt;&lt;/strong&gt;、&lt;strong&gt;&lt;code&gt;set&lt;/code&gt;&lt;/strong&gt; 或 &lt;strong&gt;&lt;code&gt;refresh&lt;/code&gt;&lt;/strong&gt; 等词。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;updateProfileInformation()&lt;/code&gt;：更新用户资料信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setUsername(_:)&lt;/code&gt;：设置用户名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;refreshData()&lt;/code&gt;：刷新数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;获取数据的方法命名&lt;/strong&gt;：
如果方法是用来获取某些数据，通常命名为 &lt;strong&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/strong&gt; 或 &lt;strong&gt;&lt;code&gt;get&lt;/code&gt;&lt;/strong&gt;，并且加上适当的描述。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fetchUserData()&lt;/code&gt;：获取用户数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getWeatherData()&lt;/code&gt;：获取天气数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fetchPosts()&lt;/code&gt;：获取帖子数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;生命周期相关的命名&lt;/strong&gt;：
这些方法通常与控制器的生命周期（如视图的加载和销毁）相关。比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;viewDidLoad()&lt;/code&gt;：视图加载时调用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;viewWillAppear()&lt;/code&gt;：视图即将显示时调用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;viewDidAppear()&lt;/code&gt;：视图已经显示时调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-id=&quot;heading-54&quot;&gt;3. 命名示例&lt;/h3&gt;
&lt;p&gt;假设你正在开发一个包含登录界面的应用，以下是一些命名示例：&lt;/p&gt;
&lt;h4 data-id=&quot;heading-55&quot;&gt;控制器命名：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LoginViewController&lt;/strong&gt;：处理登录界面相关逻辑。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SignupViewController&lt;/strong&gt;：处理注册界面相关逻辑。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ForgotPasswordViewController&lt;/strong&gt;：处理忘记密码界面。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-56&quot;&gt;方法命名：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;handleLoginButtonTapped()&lt;/code&gt;：处理登录按钮点击事件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;validateInputFields()&lt;/code&gt;：验证用户输入的用户名和密码。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;showError(message:)&lt;/code&gt;：显示错误信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;performLogin()&lt;/code&gt;：执行登录操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;navigateToHomeScreen()&lt;/code&gt;：导航到首页屏幕。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-id=&quot;heading-57&quot;&gt;4. 代码示例&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-58&quot;&gt;LoginViewController.swift&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LoginViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIViewController&lt;/span&gt; {
    
    &lt;span class=&quot;hljs-comment&quot;&gt;// UI 元素&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; usernameTextField: &lt;span class=&quot;hljs-type&quot;&gt;UITextField&lt;/span&gt;!
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; passwordTextField: &lt;span class=&quot;hljs-type&quot;&gt;UITextField&lt;/span&gt;!
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; loginButton: &lt;span class=&quot;hljs-type&quot;&gt;UIButton&lt;/span&gt;!
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {
        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()
        setupUI()
    }

    &lt;span class=&quot;hljs-comment&quot;&gt;// 设置 UI&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setupUI&lt;/span&gt;() {
        &lt;span class=&quot;hljs-comment&quot;&gt;// 这里代码添加 UI 元素&lt;/span&gt;
    }

    &lt;span class=&quot;hljs-comment&quot;&gt;// 处理登录按钮点击事件&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;@objc&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;handleLoginButtonTapped&lt;/span&gt;() {
        &lt;span class=&quot;hljs-comment&quot;&gt;// 获取输入内容&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; username &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; usernameTextField.text &lt;span class=&quot;hljs-operator&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; password &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; passwordTextField.text &lt;span class=&quot;hljs-operator&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;
        
        &lt;span class=&quot;hljs-comment&quot;&gt;// 验证输入内容&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; validateInputFields(username: username, password: password) {
            performLogin(username: username, password: password)
        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
            showError(message: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid input&quot;&lt;/span&gt;)
        }
    }

    &lt;span class=&quot;hljs-comment&quot;&gt;// 验证输入字段&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;validateInputFields&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;password&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Bool&lt;/span&gt; {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;username.isEmpty &lt;span class=&quot;hljs-operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;password.isEmpty
    }

    &lt;span class=&quot;hljs-comment&quot;&gt;// 执行登录&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;performLogin&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;password&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;) {
        &lt;span class=&quot;hljs-comment&quot;&gt;// 登录逻辑&lt;/span&gt;
        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Logging in with username: &lt;span class=&quot;hljs-subst&quot;&gt;\(username)&lt;/span&gt; and password: &lt;span class=&quot;hljs-subst&quot;&gt;\(password)&lt;/span&gt;&quot;&lt;/span&gt;)
        navigateToHomeScreen()
    }

    &lt;span class=&quot;hljs-comment&quot;&gt;// 显示错误信息&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;showError&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;message&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;) {
        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(message)
    }

    &lt;span class=&quot;hljs-comment&quot;&gt;// 导航到首页&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;navigateToHomeScreen&lt;/span&gt;() {
        &lt;span class=&quot;hljs-comment&quot;&gt;// 导航到首页逻辑&lt;/span&gt;
        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Navigating to Home Screen&quot;&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-59&quot;&gt;5. 总结&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;控制器命名&lt;/strong&gt;：应根据功能或视图命名，例如 &lt;code&gt;LoginViewController&lt;/code&gt;、&lt;code&gt;HomeViewController&lt;/code&gt;，避免使用过于模糊的名称。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;方法命名&lt;/strong&gt;：应清晰表达方法的功能，使用动词来描述操作，确保方法名具备可读性和语义清晰性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;命名习惯&lt;/strong&gt;：遵循一致性和可读性的原则，使代码在团队合作时容易理解与维护。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过良好的命名，可以让代码更加易于理解、扩展和维护。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以下是一份针对 iOS Swift UIKit 开发的编程规范指南，涵盖代码结构、命名、最佳实践和可维护性等方面：&lt;/p&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-60&quot;&gt;&lt;strong&gt;1. 命名规范&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;类型和协议&lt;/strong&gt;：使用大驼峰式（UpperCamelCase）。
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIViewController&lt;/span&gt; { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }
&lt;span class=&quot;hljs-keyword&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DataFetchable&lt;/span&gt; { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;变量和函数&lt;/strong&gt;：使用小驼峰式（lowerCamelCase）。
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; userNameLabel: &lt;span class=&quot;hljs-type&quot;&gt;UILabel&lt;/span&gt;!
&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetchDataFromAPI&lt;/span&gt;() { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;布尔属性&lt;/strong&gt;：以 &lt;code&gt;is&lt;/code&gt;、&lt;code&gt;has&lt;/code&gt;、&lt;code&gt;should&lt;/code&gt; 等开头。
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; isUserLoggedIn: &lt;span class=&quot;hljs-type&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缩写词&lt;/strong&gt;：全大写（如 &lt;code&gt;URL&lt;/code&gt;、&lt;code&gt;ID&lt;/code&gt;）。
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; apiURL: &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; userID: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-61&quot;&gt;&lt;strong&gt;2. 代码结构&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;遵循 MVC/MVVM&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;ViewController 保持轻量化，仅处理视图生命周期和用户交互。&lt;/li&gt;
&lt;li&gt;业务逻辑和网络请求抽离到 &lt;code&gt;ViewModel&lt;/code&gt; 或 &lt;code&gt;Service&lt;/code&gt; 类中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用扩展（Extension）&lt;/strong&gt;：按功能拆分代码块。
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// MARK: - UITableViewDataSource&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UITableViewDataSource&lt;/span&gt; { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }

&lt;span class=&quot;hljs-comment&quot;&gt;// MARK: - Private Methods&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyViewController&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setupUI&lt;/span&gt;() { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免 Massive ViewController&lt;/strong&gt;：复杂 UI 拆分为子视图或自定义 &lt;code&gt;UIView&lt;/code&gt; 子类。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-62&quot;&gt;&lt;strong&gt;3. UI 开发规范&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用 Interface Builder 或纯代码&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;若使用 Storyboard/XIB，确保约束清晰，避免 Magic Number。&lt;/li&gt;
&lt;li&gt;纯代码布局推荐 SnapKit 或原生 Auto Layout。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复用组件&lt;/strong&gt;：通用 UI 组件（如按钮、表格单元格）封装为独立类。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适配深色模式&lt;/strong&gt;：通过 &lt;code&gt;UIColor(dynamicProvider:)&lt;/code&gt; 处理颜色和图片。
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; backgroundColor &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UIColor&lt;/span&gt; { trait &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;
    trait.userInterfaceStyle &lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt; .dark &lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt; .black : .white
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-63&quot;&gt;&lt;strong&gt;4. 内存管理与闭包&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;避免循环引用&lt;/strong&gt;：在闭包中使用 &lt;code&gt;[weak self]&lt;/code&gt; 或 &lt;code&gt;[unowned self]&lt;/code&gt;。
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;networkService.fetchData { [&lt;span class=&quot;hljs-keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;] result &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; }
    &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.updateUI()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;懒加载属性&lt;/strong&gt;：使用 &lt;code&gt;lazy var&lt;/code&gt; 延迟初始化视图。
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; tableView: &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; table &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;()
    table.delegate &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; table
}()
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-64&quot;&gt;&lt;strong&gt;5. 错误处理与异步&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用 Result 类型&lt;/strong&gt;：处理网络请求结果。
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetchData&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;completion&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;@escaping&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;Result&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;Data&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;Error&lt;/span&gt;&amp;gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt;) { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主线程更新 UI&lt;/strong&gt;：确保 UI 操作在 &lt;code&gt;DispatchQueue.main.async&lt;/code&gt; 中执行。
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;DispatchQueue&lt;/span&gt;.global().async {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 后台处理&lt;/span&gt;
    &lt;span class=&quot;hljs-type&quot;&gt;DispatchQueue&lt;/span&gt;.main.async {
        &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.label.text &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Updated&quot;&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-65&quot;&gt;&lt;strong&gt;6. 代码可维护性&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;注释与文档&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;复杂逻辑添加注释。&lt;/li&gt;
&lt;li&gt;公共 API 使用文档注释（&lt;code&gt;///&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/// 根据用户ID获取用户信息&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;/// - Parameter userId: 用户唯一标识&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetchUser&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;userId&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;) { &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代码格式化&lt;/strong&gt;：使用 SwiftFormat 或 SwiftLint 统一风格。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;单元测试&lt;/strong&gt;：核心逻辑编写测试用例。
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testLoginSuccess&lt;/span&gt;() {
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; viewModel &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;LoginViewModel&lt;/span&gt;()
    viewModel.login(username: &lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;, password: &lt;span class=&quot;hljs-string&quot;&gt;&quot;123&quot;&lt;/span&gt;)
    &lt;span class=&quot;hljs-type&quot;&gt;XCTAssertTrue&lt;/span&gt;(viewModel.isLoggedIn)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-66&quot;&gt;&lt;strong&gt;7. 兼容性与版本控制&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;API 可用性检查&lt;/strong&gt;：使用 &lt;code&gt;@available&lt;/code&gt; 或 &lt;code&gt;#available&lt;/code&gt;。
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;#available&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;iOS&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;15.0&lt;/span&gt;, &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;) {
    tableView.sectionHeaderTopPadding &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第三方库管理&lt;/strong&gt;：推荐 Swift Package Manager (SPM)，避免过度依赖。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-67&quot;&gt;&lt;strong&gt;8. 其他最佳实践&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;避免强制解包&lt;/strong&gt;：使用 &lt;code&gt;if let&lt;/code&gt; 或 &lt;code&gt;guard let&lt;/code&gt; 处理可选值。
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; data &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; data &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Data is nil&quot;&lt;/span&gt;)
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;常量集中管理&lt;/strong&gt;：使用 &lt;code&gt;enum&lt;/code&gt; 或 &lt;code&gt;struct&lt;/code&gt; 组织常量。
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Constants&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; apiKey &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;ABC123&quot;&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; maxRetryCount &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通知名称&lt;/strong&gt;：使用扩展统一管理。
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Notification&lt;/span&gt;.&lt;span class=&quot;hljs-title class_&quot;&gt;Name&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; userDidLogin &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Notification&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Name&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;UserDidLoginNotification&quot;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-68&quot;&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;遵循规范可提升代码可读性、可维护性和团队协作效率。实际开发中可根据团队需求调整，但需保持一致性。建议结合工具（如 SwiftLint）自动化检查代码风格。&lt;/p&gt;</description><link>https://juejin.cn/post/7480740128693829658</link><guid isPermaLink="false">https://juejin.cn/post/7480740128693829658</guid><pubDate>Wed, 12 Mar 2025 08:48:58 GMT</pubDate><author>ZRD1112</author><category>iOS</category><category>Swift</category></item><item><title>货拉拉基于“声明式”的埋点方案实践</title><description>&lt;h2 data-id=&quot;heading-0&quot;&gt;1.  背景&lt;/h2&gt;
&lt;p&gt;业务埋点的开发和维护一直以来都是研发环节中的一个痛点，对于产品来说埋点数据可以帮助判断需求上线后的运行情况，对于开发而言则需要在编写业务逻辑的同时，还需要增加一些数据采集上报埋点平台的任务，我们也一直在探索一些提效的解决方案，这里先简单概述下埋点开发中的几个痛点：&lt;/p&gt;
&lt;h4 data-id=&quot;heading-1&quot;&gt;&lt;strong&gt;主要痛点概述：&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无法完全自动化：&lt;/strong&gt; 埋点逻辑主要集中在业务数据采集，无法通过类似AOP等技术来解决全部的埋点需求&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;埋点&lt;/strong&gt; &lt;strong&gt;的属性数据繁多：&lt;/strong&gt; 主要属性都集中在业务逻辑数据中，和业务紧密相关&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;埋点&lt;/strong&gt; &lt;strong&gt;逻辑掺杂&lt;/strong&gt; &lt;strong&gt;业务&lt;/strong&gt; &lt;strong&gt;逻辑：&lt;/strong&gt; 业务逻辑中掺杂了很多埋点逻辑代码，不便于维护和排查问题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新增&lt;/strong&gt; &lt;strong&gt;埋点&lt;/strong&gt; &lt;strong&gt;逻辑占用太多开发时间：&lt;/strong&gt; 遇到埋点稍多的需求，会占用太多开发时间，需要一种高效的方式来让开发人员快速的增加埋点逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述的这些显而易见的问题，是我们一直以来不断去探索埋点方案的一个重要原因，在不断的需求开发节奏中，找出一种能快速实现埋点需求，又能和业务逻辑解耦合，同时还能提高我们的编写埋点代码的效率，这也是我们本文将要讨论的埋点方案和具体的实践过程。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-2&quot;&gt;2. 目前面临的问题&lt;/h2&gt;
&lt;p&gt;这部分主要从货拉拉APP开发中，针对埋点遇到的一些痛点，进行详细的描述，也让大家了解后续我们的方案主要解决的核心问题是什么，以及如何在现有的情况下，来通过我们这套方案去改善现状，优化我们的架构。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-3&quot;&gt;2.1 埋点现状架构图&lt;/h3&gt;
&lt;p&gt;在讲述痛点之前，我先用一张目前我们业务中埋点现状的架构图，从宏观的角度来看下当前的埋点逻辑情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/61c230f76dd2429486c68f64c2114386~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6LSn5ouJ5ouJ5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742868903&amp;amp;x-signature=%2FUUDepyW9HAK5CemS4AjlwFZnrA%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;从这幅架构简图中，我们可以看到项目在基于MVP架构模式开发下，对于埋点数据的采集、聚合、以及最后的上报，都没有一个合适的设计来支撑，也可能是项目在初期就对埋点这种逻辑不敏感，忽略了它在日后不断增量所带来的问题，因此造就了现在开发所面临的问题挑战。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-4&quot;&gt;2.2 痛点一：组件间数据传递繁琐&lt;/h3&gt;
&lt;p&gt;在组件化的架构模式下，大到模块之间的信息传递，小到组件内部的MVP(单元)之间的数据交互，组件之间的交互是非常频繁的，拿MVP模式的&lt;code&gt;Protocol&lt;/code&gt;为例，通常使用&lt;code&gt;协议&lt;/code&gt;来定义一个类的功能接口，每个类的&lt;code&gt;Protocol&lt;/code&gt; 只开放和这个类功能息息相关的接口，符合“单一原则”和“开放封闭原则”。&lt;/p&gt;
&lt;p&gt;那接下来我来看下业务中的埋点事件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-scss&quot; lang=&quot;scss&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//埋点属性通常都是 key-value 的形式Map形式&lt;/span&gt;
事件名：test_eventName_key
属性值（map）：
{
    key_a:value_a
    key_b:value_b    } 模块&lt;span class=&quot;hljs-built_in&quot;&gt;x&lt;/span&gt;(比如：车型、地址...)
    key_c:value_c
        ...
    key_d:value_d
    key_e:value_e    } 模块&lt;span class=&quot;hljs-built_in&quot;&gt;x&lt;/span&gt;(比如：支付方式、发票...)
    key_f:value_f
        ...
    key_z:value_z    } 模块&lt;span class=&quot;hljs-built_in&quot;&gt;x&lt;/span&gt;(比如：额外服务、订单备注、货物信息...)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;埋点数据通常情况下覆盖了当前业务&lt;code&gt;Page&lt;/code&gt; 中的大部分的模块，这在货拉拉APP中十分场景，比如：首页、确认下单页、订单详情页、等待应答页等页面，每个页面包含的组件少则5-6，多则10+种小模块，如果埋点要求上报这些模块内的数据，那就需要将这些数据先采集组合成&lt;code&gt;map&lt;/code&gt;,然后上报给埋点平台，那么采集过程中，大部分的逻辑都落在了各个类的 &lt;code&gt;Protocol&lt;/code&gt; 中，因为模块之间的交互都是通过接口来传递的，所以&lt;code&gt;Protocol&lt;/code&gt;中就会出现一些埋点相关的接口。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-scss&quot; lang=&quot;scss&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;@protocol&lt;/span&gt; xxx {
     func &lt;span class=&quot;hljs-built_in&quot;&gt;trace&lt;/span&gt;(x,y) 
          ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因为埋点的触发逻辑可能在任意的类中任意地方出现，因此每个类都要做好获取上述所有埋点数据的能力准备，这就造成了我们业务代码中，本来就比较复杂的业务逻辑，再混入一些埋点相关的逻辑，就会变得更加的难以维护。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-5&quot;&gt;2.3 痛点二：埋点属性采集方式不统一&lt;/h3&gt;
&lt;p&gt;埋点事件中具体属性值的采集，严格来说应该是声明和修改的地方保持单一，通常由所属的模块负责，比如车型的名称和国标ID，都是由车型模块进行维护，其他模块使用的时候通过统一的方式读取即可，这样如果变量值有改动，则各个引用的地方会同步修改，而现实中这些值在上述讲到的模块传递问题中，会出现不同模块，传递的形式也不同，有的可能是作为方法的参数获取的，有的则是通过其他对象持有获取的，维护起来会特别麻烦。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-6&quot;&gt;2.4 小结&lt;/h3&gt;
&lt;p&gt;开发中上述痛点，是主要的影响点，数据的采集和组装占据了大部分的埋点开发工作量，同时这些痛点也会对架构有所腐蚀，因为需求的迭代和周期，有时候并不能同步到埋点中，这就导致维护滞后等副作用。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-7&quot;&gt;3.  埋点方案设计&lt;/h2&gt;
&lt;p&gt;在正式介绍方案之前呢，我们先看了解下目前业内APP埋点的一些主流方案：&lt;/p&gt;





























&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;代码埋点&lt;/th&gt;&lt;th&gt;可视化埋点&lt;/th&gt;&lt;th&gt;自动埋点&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;优势&lt;/td&gt;&lt;td&gt;灵活性强，精准控制，轻量&lt;/td&gt;&lt;td&gt;无需开发，实时生效，不依赖版本发布&lt;/td&gt;&lt;td&gt;实现简单，自动化，实时数据分析&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;劣势&lt;/td&gt;&lt;td&gt;工作量大、易出错，调试困难，无法动态下发&lt;/td&gt;&lt;td&gt;埋点数据存在局限性&lt;/td&gt;&lt;td&gt;灵活性差，数据冗余，隐私问题&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;适用场景&lt;/td&gt;&lt;td&gt;需要精细控制收集数据和埋点数据结构的情况。&lt;/td&gt;&lt;td&gt;比较规范和简单的页面，主要分析一些点击事件场景&lt;/td&gt;&lt;td&gt;数据收集需求较为标准的场景，如应用的日常运营、用户行为分析等&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;上述三类方案，基本涵盖了业内主流的埋点方案，而还有一种是采用混合（代码埋点 + 自动埋点）埋点，这也是一种主流的方案之一，货拉拉用户端也是采用了这种模式，通用的页面浏览和控件点击都通过自动埋点实现，而其余的则是通过代码埋点实现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以本次方案优化改造的核心是围绕代码埋点这部分进行的，宗旨是如何高效且尽量无侵入的方式，对代码埋点进行改造和优化。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 data-id=&quot;heading-8&quot;&gt;3.1 方案整体概述&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;方案的大致核心功能点如下：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;独立出埋点管理模块，各组件间直接通过埋点管理模块读取和注册数据&lt;/li&gt;
&lt;li&gt;移除各个组件的&lt;code&gt;Protocol&lt;/code&gt;文件中显式的埋点相关逻辑&lt;/li&gt;
&lt;li&gt;各组件间不再直接和埋点数据进行通讯，组件间只需要通过特定方式暴露自己的埋点所需数据即可&lt;/li&gt;
&lt;li&gt;埋点统一管理，引入&lt;code&gt;Scope&lt;/code&gt; 概念&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;改造后的埋点架构简图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/6f37fe852d454be38d7c85197bc4bbac~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6LSn5ouJ5ouJ5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742868903&amp;amp;x-signature=pm5pjEEI7Ou9f8CEQQzut3u03HM%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;上述架构图中可以看出，我们对埋点的采集和上报做了比较大的改动，去除了各个组件内关于埋点数据需要暴露出来的接口API，另外还引入了“公共数据”以及“Scope”概念，通过各个模块独立的埋点数据“声明”，来将该模块的数据提前暴露出来，注意这个时候数据只是被“声明”出来，并不是提前保存，只有埋点用到时，采取实时获取确定的值。&lt;/p&gt;
&lt;p&gt;下面就对这些概念进行详细说明。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-9&quot;&gt;3.2 独立出埋点管理模块（TrackifyKit）&lt;/h3&gt;
&lt;p&gt;如需从业务中剥离解耦埋点这部分逻辑，那么就需要独立出一个单独的模块来承接。模块作为二方库的形式引入进来，并且由一个&lt;code&gt;TraceManager&lt;/code&gt;单例类来和业务进行交互，&lt;code&gt;TraceManager&lt;/code&gt;会对外暴露出三种类型的API，来供业务模块去调用，这三种分别是：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/09d865c55d7a45c9a9fd8f3be4ab487a~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6LSn5ouJ5ouJ5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742868903&amp;amp;x-signature=GRj%2BDq53zIVpVSch5RWiH9vk1CM%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;traceUpdateCommonData&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;dataDic&lt;/span&gt;:&lt;span class=&quot;hljs-type&quot;&gt;Dictionary&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;Any&lt;/span&gt;&amp;gt;)
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;traceRegisterCatcher&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;scope&lt;/span&gt;:&lt;span class=&quot;hljs-type&quot;&gt;TraceEventScope&lt;/span&gt;, 
                              &lt;span class=&quot;hljs-params&quot;&gt;host&lt;/span&gt;:&lt;span class=&quot;hljs-type&quot;&gt;AnyObject&lt;/span&gt;,
                              &lt;span class=&quot;hljs-params&quot;&gt;pageVC&lt;/span&gt;:&lt;span class=&quot;hljs-type&quot;&gt;UIViewController&lt;/span&gt;?,
                              &lt;span class=&quot;hljs-params&quot;&gt;catcher&lt;/span&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Catcher&lt;/span&gt;)
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;traceTrigger&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;eventName&lt;/span&gt;:&lt;span class=&quot;hljs-type&quot;&gt;EventName&lt;/span&gt;,
                      &lt;span class=&quot;hljs-params&quot;&gt;withProperties&lt;/span&gt;:[&lt;span class=&quot;hljs-params&quot;&gt;PropertiesName&lt;/span&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;Any&lt;/span&gt;]&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;,
                      &lt;span class=&quot;hljs-params&quot;&gt;pageVC&lt;/span&gt;:&lt;span class=&quot;hljs-type&quot;&gt;UIViewController&lt;/span&gt;?)
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;traceTrigger&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;eventName&lt;/span&gt;:&lt;span class=&quot;hljs-type&quot;&gt;EventName&lt;/span&gt;,
                      &lt;span class=&quot;hljs-params&quot;&gt;withProperties&lt;/span&gt;:[&lt;span class=&quot;hljs-params&quot;&gt;PropertiesName&lt;/span&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;Any&lt;/span&gt;]&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;,
                      &lt;span class=&quot;hljs-params&quot;&gt;scopeKeys&lt;/span&gt;:[&lt;span class=&quot;hljs-params&quot;&gt;TraceEventScope&lt;/span&gt;:[&lt;span class=&quot;hljs-type&quot;&gt;PropertiesName&lt;/span&gt;]]&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;,
                      &lt;span class=&quot;hljs-params&quot;&gt;alias&lt;/span&gt;:[&lt;span class=&quot;hljs-params&quot;&gt;String&lt;/span&gt;:&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;]&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;,
                      &lt;span class=&quot;hljs-params&quot;&gt;pageVC&lt;/span&gt;:&lt;span class=&quot;hljs-type&quot;&gt;UIViewController&lt;/span&gt;?)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面对这三类API做更详细的解释:&lt;/p&gt;
&lt;h3 data-id=&quot;heading-10&quot;&gt;3.3 更新公共属性&lt;/h3&gt;
&lt;p&gt;考虑到项目中会有一些公共属性需要统一上报，比如：城市定位、个人信息等相关信息，这里为了方便业务使用，可以允许业务更新一些全局的数据，你可以把他理解为一个全局的map，方便后续埋点上报组合数据的的时候使用&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/// 埋全局通用数据&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;/// - Parameter dataDic: [k,v]]&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;traceUpdateCommonData&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;dataDic&lt;/span&gt;:&lt;span class=&quot;hljs-type&quot;&gt;Dictionary&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;Any&lt;/span&gt;&amp;gt;) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-11&quot;&gt;3.4 注册Catcher捕获器提前声明埋点字段&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Catcher&lt;/strong&gt; 概念是我们这次方案的核心，它的原理是通过业务组件，主动向 Eventbus 中注册一个 Catcher 对象，它并不会强引用业务组件类，而这个 Catcher 会在埋点触发的时候，自动去动态的获取注册类中的数据，这部分数据就会通过Catcher 对象，进入EventBus，从而和其他埋点数据进行组合、过滤、处理等操作，最终完成数据上报。&lt;/p&gt;
&lt;p&gt;接下来看下如何在业务中注册 Catcher 捕获器：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-less&quot; lang=&quot;less&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/// 注册一个埋点Catcher ⚠️注意 weak self&lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;/// - Parameters:&lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;///   - scope: Catcher 所属的 Scope&lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;///   - host: Catcher 所在的生命周期对象&lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;///   - catcher: Catcher block&lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;///   - pageVC: 关联的页面&lt;/span&gt;
    &lt;span class=&quot;hljs-variable&quot;&gt;@objc&lt;/span&gt; public func &lt;span class=&quot;hljs-built_in&quot;&gt;traceRegisterCatcher&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;scope&lt;/span&gt;:TraceEventScope,
                                           &lt;span class=&quot;hljs-attribute&quot;&gt;host&lt;/span&gt;:AnyObject,
                                           &lt;span class=&quot;hljs-attribute&quot;&gt;pageVC&lt;/span&gt;:UIViewController?,
                                           &lt;span class=&quot;hljs-attribute&quot;&gt;catcher&lt;/span&gt;: &lt;span class=&quot;hljs-variable&quot;&gt;@escaping&lt;/span&gt; Catcher) {
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;业务中所有的类，只要是需要提供一些埋点属性，都可以在类的初始化时机，调用上面API，来进行埋点属性注册，通过这个注册，将内部需要的属性值提前准备好，等待埋点管理Eventbus内部使用。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;registerTraceCatcher&lt;/span&gt;() {
        &lt;span class=&quot;hljs-type&quot;&gt;TraceManager&lt;/span&gt;.shared.traceRegisterCatcher(scope: &lt;span class=&quot;hljs-string&quot;&gt;&quot;vehicleScope&quot;&lt;/span&gt;,
                                                    host: &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;,
                                                    pageVC: &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;) { [&lt;span class=&quot;hljs-keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; }
            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [
                &lt;span class=&quot;hljs-string&quot;&gt;&quot;key&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;vaule&quot;&lt;/span&gt;,
                &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt;
                &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt;
            ]
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个方法首先需要入参一个 &lt;code&gt;scope&lt;/code&gt; 参数，这个可以根据业务模块进行不同粒度的划分，&lt;code&gt;host&lt;/code&gt;则是当前类对象，这个参数主要是在埋点管理器内部通过 host 对已经释放的业务类进行 &lt;code&gt;catcher&lt;/code&gt; 清理使用，&lt;code&gt;pageVC&lt;/code&gt; 参数是应对导航栈中可重复&lt;code&gt;push&lt;/code&gt;多个同一类，则不同示例的页面，为了做socpe 区分，相同对象的内部数据必须进行区分获取。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-12&quot;&gt;3.5 埋点上报&lt;/h3&gt;
&lt;p&gt;说完了catcher 其实埋点的数据准备工作已经讲完了，各个模块类的内部已经通过 &lt;code&gt;traceRegisterCatcher&lt;/code&gt;方式将各个埋点事件所需要的数据提前准备好了，接下来就看下埋点触发的逻辑。&lt;/p&gt;
&lt;p&gt;下面是埋点触发所需API：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;/// 埋点上报&lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;/// - Parameters:&lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;///   - eventName: 埋点事件名&lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;///   - withProperties: 埋点属性[k,v]&lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;///   - scopeKeys: scope-keys 对&lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;///   - alias：字段别名&lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;///   - pageVC: 关联的页面&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;@objc&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;traceTrigger&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;eventName&lt;/span&gt;:&lt;span class=&quot;hljs-type&quot;&gt;EventName&lt;/span&gt;,
                                   &lt;span class=&quot;hljs-params&quot;&gt;withProperties&lt;/span&gt;:[&lt;span class=&quot;hljs-params&quot;&gt;PropertiesName&lt;/span&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;Any&lt;/span&gt;]&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;,
                                   &lt;span class=&quot;hljs-params&quot;&gt;scopeKeys&lt;/span&gt;:[&lt;span class=&quot;hljs-params&quot;&gt;TraceEventScope&lt;/span&gt;:[&lt;span class=&quot;hljs-type&quot;&gt;PropertiesName&lt;/span&gt;]]&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;,
                                   &lt;span class=&quot;hljs-params&quot;&gt;alias&lt;/span&gt;:[&lt;span class=&quot;hljs-params&quot;&gt;String&lt;/span&gt;:&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;]&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;,
                                   &lt;span class=&quot;hljs-params&quot;&gt;pageVC&lt;/span&gt;:&lt;span class=&quot;hljs-type&quot;&gt;UIViewController&lt;/span&gt;?) {

    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;入参分析：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;eventName：&lt;/strong&gt; 埋点的事件名，也是埋点信息中必不可少。&lt;/p&gt;
&lt;p&gt;withProperties：埋点的属性值，这里的属性值不要求必须传入埋点所有的必要字段，只需要传入当前类Context 中能够直接获取到的字段，那其余的字段怎么获取呢？这就用到我们前面 3.4 讲的Catcher 捕获器了，通过它去其他模块试试获取数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;scopeKeys：&lt;/strong&gt; 这个参数需要传入的类型是 &lt;code&gt;Map&amp;lt;scope,[PropertiesName]&amp;gt;&lt;/code&gt;，key 代表 scope 也就是每个类在调用 &lt;code&gt;traceRegisterCatcher&lt;/code&gt;方法注册 &lt;code&gt;catcher&lt;/code&gt; 的时候声明的 &lt;code&gt;scope&lt;/code&gt; 参数，有了这个scope ，埋点管理器才知道需要去哪个类中获取埋点字段，因此前提是你要提前在各个类中调用 &lt;code&gt;traceRegisterCatcher&lt;/code&gt; 方法。&lt;code&gt;[PropertiesName]&lt;/code&gt;这个数组就是需要的字段名称 key，根据埋点文档传入即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;alias：&lt;/strong&gt; 这个入参则是一个修改字段名称的别名方式，可能各个埋点会有相同数据，但是字段上报的key会不相同，这里可以做下别名配置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pageVC：&lt;/strong&gt; 这个入也是和 &lt;code&gt;traceRegisterCatcher&lt;/code&gt;方法的入参中 pageVC 一一对应，用来区分导航栈中相同类不同实例的页面。&lt;/p&gt;
&lt;p&gt;接下来再看下埋点上报的一个demo实例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-less&quot; lang=&quot;less&quot;&gt;        &lt;span class=&quot;hljs-selector-tag&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;scopeKeys&lt;/span&gt; = &lt;span class=&quot;hljs-selector-attr&quot;&gt;[            module_a_scope:[                &lt;span class=&quot;hljs-string&quot;&gt;&quot;properties_name_x&quot;&lt;/span&gt;,                ...            ]&lt;/span&gt;,
            &lt;span class=&quot;hljs-selector-tag&quot;&gt;module_b_scope&lt;/span&gt;:&lt;span class=&quot;hljs-selector-attr&quot;&gt;[                &lt;span class=&quot;hljs-string&quot;&gt;&quot;properties_name_x&quot;&lt;/span&gt;,                ...            ]&lt;/span&gt;,
            &lt;span class=&quot;hljs-selector-tag&quot;&gt;module_c_scope&lt;/span&gt;:&lt;span class=&quot;hljs-selector-attr&quot;&gt;[                &lt;span class=&quot;hljs-string&quot;&gt;&quot;properties_name_x&quot;&lt;/span&gt;,                ...            ]&lt;/span&gt;
        ]
        &lt;span class=&quot;hljs-selector-tag&quot;&gt;TraceManager&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.shared&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.traceTrigger&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;eventName&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;confirmorder_click&quot;&lt;/span&gt;,
                                            &lt;span class=&quot;hljs-attribute&quot;&gt;withProperties&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&quot;module_name&quot;&lt;/span&gt;:moduleName],
                                            &lt;span class=&quot;hljs-attribute&quot;&gt;scopeKeys&lt;/span&gt;: scopeKeys)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样上报埋点，字段的获取全部通过埋点管理器的 scope 去各个类中注册的 catcher 里面实时获取，然后在管理器内部进行过滤、组合、更名等操作后，再交给埋点平台上报，整个流程不需要再各个类的业务&lt;code&gt;Interface&lt;/code&gt; 类中声明埋点相关的逻辑，这部分逻辑统一由管理器去管理，实现了和业务逻辑解耦的效果。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-13&quot;&gt;3.6 渐进式改造&lt;/h3&gt;
&lt;p&gt;新的方案并不需要项目中所有的埋点都进行同时改造，而是可以和之前的代码埋点逻辑并存，开发人员可以根据节奏逐渐替换，货拉拉用户端在接入该方案后，埋点代码逻辑更加的清晰，且和业务解耦，业务层只负责提供属于自己的那部分数据等待获取，而埋点触发的地方也只需要根据不同的key去取相应的数据即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;某业务模块：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// MARK: -- Module_A_Presenter 模块&lt;/span&gt;
&lt;span class=&quot;hljs-meta&quot;&gt;@class&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Module_A_Presenter&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;init&lt;/span&gt;() {
        registerTraceCatcher()
    }   
}

&lt;span class=&quot;hljs-comment&quot;&gt;// MARK: -- 埋点注册&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Module_A_Presenter&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;registerTraceCatcher&lt;/span&gt;() {
        &lt;span class=&quot;hljs-type&quot;&gt;TraceManager&lt;/span&gt;.shared.traceRegisterCatcher(scope: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Module_A_Presenter_Scop&quot;&lt;/span&gt;,
                                                    host: &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;,
                                                    pageVC: &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;) { [&lt;span class=&quot;hljs-keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; }
            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [
                &lt;span class=&quot;hljs-string&quot;&gt;&quot;key_1&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.key_1,
                &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt;
            ]
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样就完成了该模块的改造，而无需像之前那种方式，把这些数据通过 &lt;code&gt;Interface&lt;/code&gt; 暴露出去，造成埋点逻辑和业务逻辑混杂在一起。另外声明式的这种埋点方式，也大大提高了埋点逻辑的可维护性，各自模块各自维护，数据收集再分别去各个模块获取，减少了模块之间的交互频率。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-14&quot;&gt;4.  总结&lt;/h2&gt;
&lt;p&gt;以上内容就是本期给大家分享的一个基于“声明式”的管理复杂业务埋点的方案，该方案实现起来并不复杂，主要是改变出一种新的埋点思路，来去解决现有代码埋点的问题，俗话说“没有最好的架构，只有最适合的架构”，适合的架构都是一点点优化重构堆砌出来的，就像本文所分享的方案，优化埋点的上报形式也是对项目架构的一种优化，让我们的产品迭代和维护都更加的高效。&lt;/p&gt;</description><link>https://juejin.cn/post/7480087984310861863</link><guid isPermaLink="false">https://juejin.cn/post/7480087984310861863</guid><pubDate>Tue, 11 Mar 2025 02:19:21 GMT</pubDate><author>货拉拉技术</author><category>iOS</category><category>程序员</category></item><item><title>iOS开发之网络代码进化史</title><description>&lt;h2 data-id=&quot;heading-0&quot;&gt;介绍&lt;/h2&gt;
&lt;p&gt;目前，iOS 原生网络请求数据共有 4 种方式，分别是&lt;strong&gt;传统 Completion 回调&lt;/strong&gt;、&lt;strong&gt;Completion 回调 + Result&lt;/strong&gt;、&lt;strong&gt;Combine 框架&lt;/strong&gt;与&lt;strong&gt;Swift Concurrency (async/await)&lt;/strong&gt;。本文以下载图片为例，详细讲解 4 种网络请求的差异。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-1&quot;&gt;传统Completion回调&lt;/h2&gt;
&lt;p&gt;一种最基础的异步处理方式，使用闭包作为回调函数。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-2&quot;&gt;代码&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/// 错误枚举&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FetchError&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; badURL
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; badRequest
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; badImage
}

&lt;span class=&quot;hljs-comment&quot;&gt;/// 1. 传统completion回调&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetchImage&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;completion&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;@escaping&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;UIImage&lt;/span&gt;?, &lt;span class=&quot;hljs-type&quot;&gt;Error&lt;/span&gt;?) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt;) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; url &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt;(string: url) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        completion(&lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;FetchError&lt;/span&gt;.badURL)
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;
    }
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; request &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URLRequest&lt;/span&gt;(url: url)
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; task &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URLSession&lt;/span&gt;.shared.dataTask(with: request) { data, response, error &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; error &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; error {
            completion(&lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;, error)
        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (response &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;HTTPURLResponse&lt;/span&gt;)&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.statusCode &lt;span class=&quot;hljs-operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt; {
            completion(&lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;FetchError&lt;/span&gt;.badRequest)
        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; data &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; data,
                  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; image &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UIImage&lt;/span&gt;(data: data) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
                completion(&lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;FetchError&lt;/span&gt;.badImage)
                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;
            }
            completion(image, &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;)
        }
    }
    task.resume()
}

fetchImage(from: &lt;span class=&quot;hljs-string&quot;&gt;&quot;https://search-operate.cdn.bcebos.com/7e85570b817e17e8f3ae93134cc78451.gif&quot;&lt;/span&gt;) { image, error &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; image {
        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(image)
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; error {
        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(error)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-3&quot;&gt;优点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;简单易懂，学习曲线低。&lt;/li&gt;
&lt;li&gt;兼容性好，适用于所有 iOS 版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-id=&quot;heading-4&quot;&gt;缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可能导致&quot;回调地狱&quot;。&lt;/li&gt;
&lt;li&gt;错误处理比较分散，每个回调都需要单独处理错误。&lt;/li&gt;
&lt;li&gt;取消操作比较麻烦。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 data-id=&quot;heading-5&quot;&gt;Completion回调+Result&lt;/h2&gt;
&lt;p&gt;对传统 Completion 回调的改进，使用 Swift 的 Result 类型统一处理成功和失败情况。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-6&quot;&gt;代码&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FetchError&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; badURL
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; badRequest
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; badImage
}

&lt;span class=&quot;hljs-comment&quot;&gt;/// 2. completion回调+Result&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetchImage&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;completion&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;@escaping&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;Result&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;UIImage&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;Error&lt;/span&gt;&amp;gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt;) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; url &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt;(string: url) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        completion(.failure(&lt;span class=&quot;hljs-type&quot;&gt;FetchError&lt;/span&gt;.badURL))
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;
    }
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; request &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URLRequest&lt;/span&gt;(url: url)
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; task &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URLSession&lt;/span&gt;.shared.dataTask(with: request) { data, response, error &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; error &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; error {
            completion(.failure(error))
        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (response &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;HTTPURLResponse&lt;/span&gt;)&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.statusCode &lt;span class=&quot;hljs-operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt; {
            completion(.failure(&lt;span class=&quot;hljs-type&quot;&gt;FetchError&lt;/span&gt;.badRequest))
        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; data &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; data,
                  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; image &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UIImage&lt;/span&gt;(data: data) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
                completion(.failure(&lt;span class=&quot;hljs-type&quot;&gt;FetchError&lt;/span&gt;.badImage))
                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;
            }
            completion(.success(image))
        }
    }
    task.resume()
}

fetchImage(from: &lt;span class=&quot;hljs-string&quot;&gt;&quot;https://search-operate.cdn.bcebos.com/7e85570b817e17e8f3ae93134cc78451.gif&quot;&lt;/span&gt;) { result &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; result {
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; .success(image):
        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(image)
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; .failure(error):
        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(error)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-7&quot;&gt;优点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;相比传统回调，代码更加清晰和统一。&lt;/li&gt;
&lt;li&gt;能够明确区分成功和失败状态。&lt;/li&gt;
&lt;li&gt;兼容所有 iOS 版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-id=&quot;heading-8&quot;&gt;缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;仍然会导致回调嵌套问题。&lt;/li&gt;
&lt;li&gt;取消机制同样需要额外处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 data-id=&quot;heading-9&quot;&gt;Combine框架&lt;/h2&gt;
&lt;p&gt;Combine 是 Apple 在 iOS 13 引入的响应式编程框架，专为处理异步事件流设计。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-10&quot;&gt;代码&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FetchError&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; badURL
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; badRequest
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; badImage
}

&lt;span class=&quot;hljs-comment&quot;&gt;/// 3. Combine&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetchImage&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;AnyPublisher&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;UIImage&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;Error&lt;/span&gt;&amp;gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; url &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt;(string: url) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Fail&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;UIImage&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;Error&lt;/span&gt;&amp;gt;(error: &lt;span class=&quot;hljs-type&quot;&gt;FetchError&lt;/span&gt;.badURL).eraseToAnyPublisher() }
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; request &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URLRequest&lt;/span&gt;(url: url)
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; session &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URLSession&lt;/span&gt;.shared
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; dataPublisher &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; session.dataTaskPublisher(for: request)
        .retry(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)
        .timeout(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, scheduler: &lt;span class=&quot;hljs-type&quot;&gt;DispatchQueue&lt;/span&gt;.global())
        .tryMap { data, response -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; (response &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;HTTPURLResponse&lt;/span&gt;)&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.statusCode &lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;FetchError&lt;/span&gt;.badRequest }
            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; data
        }
        .tryMap { data -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; image &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UIImage&lt;/span&gt;(data: data) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;FetchError&lt;/span&gt;.badImage}
            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; image
        }
        .receive(on: &lt;span class=&quot;hljs-type&quot;&gt;DispatchQueue&lt;/span&gt;.main)
        .subscribe(on: &lt;span class=&quot;hljs-type&quot;&gt;DispatchQueue&lt;/span&gt;.global())
        .eraseToAnyPublisher()
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; dataPublisher
}

&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cancellables &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;AnyCancellable&lt;/span&gt;&amp;gt;()
fetchImage(from: &lt;span class=&quot;hljs-string&quot;&gt;&quot;https://search-operate.cdn.bcebos.com/7e85570b817e17e8f3ae93134cc78451.gif&quot;&lt;/span&gt;)
    .sink(
        receiveCompletion: { completion &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; completion {
            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; .finished:
                &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Image download completed successfully&quot;&lt;/span&gt;)
            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; .failure(error):
                &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(error)
            }
        }, receiveValue: { image &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(image)
        }
    )
    .store(in: &lt;span class=&quot;hljs-operator&quot;&gt;&amp;amp;&lt;/span&gt;cancellables)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-11&quot;&gt;优点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;声明式编程风格，代码更简洁。&lt;/li&gt;
&lt;li&gt;强大的操作符支持。&lt;/li&gt;
&lt;li&gt;优雅的错误处理和转换机制。&lt;/li&gt;
&lt;li&gt;提供标准的取消机制。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-id=&quot;heading-12&quot;&gt;缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;学习曲线较陡峭。&lt;/li&gt;
&lt;li&gt;仅支持 iOS 13 及以上版本。&lt;/li&gt;
&lt;li&gt;长链式调用可能影响代码可读性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 data-id=&quot;heading-13&quot;&gt;4. Swift Concurrency (async/await)&lt;/h2&gt;
&lt;p&gt;Swift 5.5 引入的现代异步编程模型，使用结构化并发的概念。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-14&quot;&gt;代码&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FetchError&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; badURL
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; badRequest
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; badImage
}

&lt;span class=&quot;hljs-comment&quot;&gt;/// 4. Concurrency&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetchImage&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;UIImage&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; url &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt;(string: url) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;FetchError&lt;/span&gt;.badURL }
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; request &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URLRequest&lt;/span&gt;(url: url)
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; (data, response) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URLSession&lt;/span&gt;.shared.data(for: request)
    &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; (response &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;HTTPURLResponse&lt;/span&gt;)&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.statusCode &lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;FetchError&lt;/span&gt;.badRequest }
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; image &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UIImage&lt;/span&gt;(data: data)
    &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; image &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; image &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;FetchError&lt;/span&gt;.badImage }
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; image
}

&lt;span class=&quot;hljs-type&quot;&gt;Task&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; image &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; fetchImage(from: &lt;span class=&quot;hljs-string&quot;&gt;&quot;https://search-operate.cdn.bcebos.com/7e85570b817e17e8f3ae93134cc78451.gif&quot;&lt;/span&gt;)
        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(image)
    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; {
        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(error)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-15&quot;&gt;优点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;代码简洁直观，接近同步代码的阅读体验。&lt;/li&gt;
&lt;li&gt;易于理解的错误处理。&lt;/li&gt;
&lt;li&gt;内置取消支持和结构化并发。&lt;/li&gt;
&lt;li&gt;易于调试和维护。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-id=&quot;heading-16&quot;&gt;缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一定的学习曲线。&lt;/li&gt;
&lt;li&gt;需要 iOS 15 及以上版本。&lt;/li&gt;
&lt;/ul&gt;</description><link>https://juejin.cn/post/7479818027484905522</link><guid isPermaLink="false">https://juejin.cn/post/7479818027484905522</guid><pubDate>Mon, 10 Mar 2025 07:05:05 GMT</pubDate><author>YungFan</author><category>iOS</category><category>Swift</category></item><item><title>Flutter - iOS编译加速</title><description>&lt;blockquote&gt;
&lt;p&gt;欢迎关注微信公众号：&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fp3-juejin.byteimg.com%2Ftos-cn-i-k3u1fbpfcp%2F31960a996f1f4b0da35d69ab7480f7d6~tplv-k3u1fbpfcp-zoom-1.image&quot; target=&quot;_blank&quot; title=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/31960a996f1f4b0da35d69ab7480f7d6~tplv-k3u1fbpfcp-zoom-1.image&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;FSA全栈行动&lt;/a&gt; 👋&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 data-id=&quot;heading-0&quot;&gt;一、前言&lt;/h2&gt;
&lt;p&gt;在项目完全重构成纯 &lt;code&gt;Flutter&lt;/code&gt; 之后 ，&lt;code&gt;iOS&lt;/code&gt; 端在 &lt;code&gt;i7 Mac Mini&lt;/code&gt; 构建机上的打包时间差不多在 &lt;code&gt;12分钟&lt;/code&gt; 左右，而在升级了 &lt;code&gt;Xcode 16&lt;/code&gt; 之后，构建机的打包时间有了质的 &lt;code&gt;“提升”&lt;/code&gt;，来到了 &lt;code&gt;25分钟&lt;/code&gt;，换成 &lt;code&gt;M1&lt;/code&gt; 来了也压不住，甚至更久~&lt;/p&gt;
&lt;p&gt;这种情况在退回 &lt;code&gt;Xcode 15&lt;/code&gt; 是可以解决的，但是这并不是长久之计，因为苹果早晚会强制要求升级的，好在申请了台 &lt;code&gt;M4 Mac Mini&lt;/code&gt; 来打包，时间来到了 &lt;code&gt;15 分钟&lt;/code&gt;，不过随着业务功能不断迭代，构建时间也慢慢增加，目前来到了 &lt;code&gt;17、18分钟&lt;/code&gt;，但一旦哪天对 &lt;code&gt;M4&lt;/code&gt; 构建机进行维护，让 &lt;code&gt;i7&lt;/code&gt; 和 &lt;code&gt;M1&lt;/code&gt; 顶上时，再加上多个打包任务并行，完成打包的时间动不动就得 &lt;code&gt;半小时&lt;/code&gt; 起步，真的很令人绝望~&lt;/p&gt;
&lt;p&gt;这里先给出优化后的打包时间&lt;/p&gt;




















&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;构建机&lt;/th&gt;&lt;th&gt;优化前(min)&lt;/th&gt;&lt;th&gt;优化后(min)&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;i7&lt;/code&gt;&lt;/td&gt;&lt;td&gt;25+&lt;/td&gt;&lt;td&gt;14+&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;M4&lt;/code&gt;&lt;/td&gt;&lt;td&gt;16+&lt;/td&gt;&lt;td&gt;8+&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;优化前 : &lt;code&gt;Profile&lt;/code&gt; + &lt;code&gt;源码依赖&lt;/code&gt; 原生插件&lt;/li&gt;
&lt;li&gt;优化后 : &lt;code&gt;Release&lt;/code&gt; + &lt;code&gt;二进制依赖&lt;/code&gt; 原生插件&lt;/li&gt;
&lt;li&gt;环境 : &lt;code&gt;Xcode 16&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 data-id=&quot;heading-1&quot;&gt;二、编译模式对比&lt;/h2&gt;
&lt;p&gt;这里我拿了一个业务组件来做测试，分别使用 &lt;code&gt;Xcode 15&lt;/code&gt; 和 &lt;code&gt;Xcode 16&lt;/code&gt; 对 &lt;code&gt;Profile&lt;/code&gt; 和 &lt;code&gt;Release&lt;/code&gt; 两种模式来观察编译用时&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/c936376c02544df681a5f09acdba3d78~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTGluWHVuRmVuZw==:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742733406&amp;amp;x-signature=G2QnPIV98C8OlfAJY4De9kvMTrM%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;




















&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;版本&lt;/th&gt;&lt;th&gt;&lt;code&gt;Profile&lt;/code&gt; (s)&lt;/th&gt;&lt;th&gt;&lt;code&gt;Release&lt;/code&gt; (s)&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;Xcode 15&lt;/code&gt;&lt;/td&gt;&lt;td&gt;389&lt;/td&gt;&lt;td&gt;384.6&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;Xcode 16&lt;/code&gt;&lt;/td&gt;&lt;td&gt;952.3&lt;/td&gt;&lt;td&gt;477.4&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;可以看到升级到 &lt;code&gt;Xcode 16&lt;/code&gt; 后，两种模式的编译时间都比使用 &lt;code&gt;Xcode 15&lt;/code&gt; 的要久，特别是 &lt;code&gt;Profile&lt;/code&gt; 模式下的编译时间更离谱，是 &lt;code&gt;Release&lt;/code&gt; 的 &lt;code&gt;2倍&lt;/code&gt; 多~&lt;/p&gt;
&lt;p&gt;而我们的项目为了方便，是以编译模式进行环境区分的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Profile&lt;/code&gt; : 测试包使用，对应 &lt;code&gt;kProfileMode&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Release&lt;/code&gt; : 上架包使用，对应 &lt;code&gt;kReleaseMode&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 data-id=&quot;heading-2&quot;&gt;三、调整环境判断&lt;/h2&gt;
&lt;p&gt;基于现状，只能调整项目中对环境的区分逻辑，改用 &lt;code&gt;Dart Define&lt;/code&gt; 将环境参数传入。&lt;/p&gt;
&lt;p&gt;这里使用 &lt;code&gt;--dart-define-from-file&lt;/code&gt; 传递文件的方式&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-shell&quot; lang=&quot;shell&quot;&gt;fvm spawn 3.24.5 build ipa --release --export-options-plist=path/to/ad_hoc.plist --dart-define-from-file=path/to/test.env
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;test.env&lt;/code&gt; 文件以键值对的方式设置环境变量&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ini&quot; lang=&quot;ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;APP_ENV&lt;/span&gt;=test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;取值方式如下，注意，一定要加上 &lt;code&gt;const&lt;/code&gt;！&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-dart&quot; lang=&quot;dart&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;dart define 环境变量&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; appEnv =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;.fromEnvironment(&lt;span class=&quot;hljs-string&quot;&gt;&#39;APP_ENV&#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;判断是否为 &lt;code&gt;release&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-dart&quot; lang=&quot;dart&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; AppBuildMode {
  release,
  debug,
  test,
}

AppBuildMode? fetchAppEnvType() {
  &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (appEnv.toLowerCase()) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;debug&quot;&lt;/span&gt;:
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; AppBuildMode.debug;
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;:
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; AppBuildMode.test;
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;release&quot;&lt;/span&gt;:
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; AppBuildMode.release;
    &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;:
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;
  }
}

&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; isRelease() {
  &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; envType = fetchAppEnvType();
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (envType == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 没有使用 dart define 设置环境变量&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; kReleaseMode;
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; AppBuildMode.release == envType;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 data-id=&quot;heading-3&quot;&gt;四、浅探索耗时&lt;/h2&gt;
&lt;p&gt;当然，我们也可以尝试去探索一下，到底是哪里耗时这么久。&lt;/p&gt;
&lt;p&gt;通过 &lt;code&gt;Xcode&lt;/code&gt; 自身去查看编译耗时会发现最长的是 &lt;code&gt;Run Script&lt;/code&gt;，其主要负责编译 &lt;code&gt;Flutter&lt;/code&gt; 侧的代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/0d2298b054ed4d47a0db5f6c4e8231fa~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTGluWHVuRmVuZw==:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742733406&amp;amp;x-signature=WxMlPtE0PHoNGHlYCCEejEG0HsQ%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：这里的时间是 Xcode 16 + Release 下的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是展开详细内容会发现一点有用的信息都没有，无法定位到具体问题。&lt;/p&gt;
&lt;p&gt;经过对 &lt;code&gt;flutter_tools&lt;/code&gt; 的代码进行阅读后发现，可以通过设置环境变量 &lt;code&gt;VERBOSE_SCRIPT_LOGGING&lt;/code&gt; 来使其加上 &lt;code&gt;--verbose&lt;/code&gt; 参数，进而将打包过程中的一些信息打印出来。&lt;/p&gt;
&lt;p&gt;具体操作: &lt;code&gt;Runner&lt;/code&gt; -&amp;gt; &lt;code&gt;Build Phases&lt;/code&gt; -&amp;gt; &lt;code&gt;Run Script&lt;/code&gt; 中补充一句 &lt;code&gt;export VERBOSE_SCRIPT_LOGGING=1&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-shell&quot; lang=&quot;shell&quot;&gt;&lt;span class=&quot;hljs-meta prompt_&quot;&gt;# &lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;补充这一句&lt;/span&gt;
export VERBOSE_SCRIPT_LOGGING=1

/bin/sh &quot;$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh&quot; build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再次编译就可以看到详细的 &lt;code&gt;flutter&lt;/code&gt; 命令打包信息，可以将其导出后慢慢查看。&lt;/p&gt;
&lt;p&gt;下面是摘出的主要耗时记录和文件大小&lt;/p&gt;
&lt;p&gt;Profile&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-shell&quot; lang=&quot;shell&quot;&gt;&lt;span class=&quot;hljs-meta prompt_&quot;&gt;# &lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;Xcode 15&lt;/span&gt;
[   +2 ms] executing: xcrun cc -arch arm64 -miphoneos-version-min=12.0 -isysroot /Applications/Xcode-15.4.0.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS17.5.sdk -c /Users/lxf/.../.dart_tool/flutter_build/80c2b96b2938ac2118bcd57be8744d2f/arm64/snapshot_assembly.S -o /Users/lxf/.../.dart_tool/flutter_build/80c2b96b2938ac2118bcd57be8744d2f/arm64/snapshot_assembly.o
[+165207 ms] executing: xcrun clang -arch arm64 -miphoneos-version-min=12.0 -isysroot /Applications/Xcode-15.4.0.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS17.5.sdk -dynamiclib -Xlinker -rpath -Xlinker @executable_path/Frameworks -Xlinker -rpath -Xlinker @loader_path/Frameworks -fapplication-extension -install_name @rpath/App.framework/App -o /Users/lxf/.../.dart_tool/flutter_build/80c2b96b2938ac2118bcd57be8744d2f/arm64/App.framework/App /Users/lxf/.../.dart_tool/flutter_build/80c2b96b2938ac2118bcd57be8744d2f/arm64/snapshot_assembly.o
[ +289 ms] ...
[   +1 ms] executing: /Users/lxf/fvm/versions/3.24.5/bin/cache/artifacts/engine/ios-profile/gen_snapshot_arm64 --deterministic --snapshot_kind=app-aot-assembly --assembly=/Users/lxf/.../.dart_tool/flutter_build/80c2b96b2938ac2118bcd57be8744d2f/arm64/snapshot_assembly.S /Users/lxf/.../.dart_tool/flutter_build/80c2b96b2938ac2118bcd57be8744d2f/app.dill
[+96580 ms] ...
&lt;span class=&quot;hljs-meta prompt_&quot;&gt;

# &lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;Xcode 16&lt;/span&gt;
[        ] executing: xcrun cc -arch arm64 -miphoneos-version-min=12.0 -isysroot /Applications/Xcode-16.0.0.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.sdk -c /Users/lxf/.../.dart_tool/flutter_build/503cc01726bac6c42836b48ae4a747ed/arm64/snapshot_assembly.S -o /Users/lxf/.../.dart_tool/flutter_build/503cc01726bac6c42836b48ae4a747ed/arm64/snapshot_assembly.o
[+596589 ms] executing: xcrun clang -arch arm64 -miphoneos-version-min=12.0 -isysroot /Applications/Xcode-16.0.0.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.sdk -dynamiclib -Xlinker -rpath -Xlinker @executable_path/Frameworks -Xlinker -rpath -Xlinker @loader_path/Frameworks -fapplication-extension -install_name @rpath/App.framework/App -o /Users/lxf/.../.dart_tool/flutter_build/503cc01726bac6c42836b48ae4a747ed/arm64/App.framework/App /Users/lxf/.../.dart_tool/flutter_build/503cc01726bac6c42836b48ae4a747ed/arm64/snapshot_assembly.o
[ +290 ms] ...
[   +1 ms] executing: /Users/lxf/fvm/versions/3.24.5/bin/cache/artifacts/engine/ios-profile/gen_snapshot_arm64 --deterministic --snapshot_kind=app-aot-assembly --assembly=/Users/lxf/.../.dart_tool/flutter_build/503cc01726bac6c42836b48ae4a747ed/arm64/snapshot_assembly.S /Users/lxf/.../.dart_tool/flutter_build/503cc01726bac6c42836b48ae4a747ed/app.dill
[+92259 ms] ...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-shell&quot; lang=&quot;shell&quot;&gt;&lt;span class=&quot;hljs-meta prompt_&quot;&gt;# &lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;Xcode 15、Xcode 16 一样&lt;/span&gt;

ls -lh
total 853368
drwxr-xr-x@ 3 lxf  staff    96B  3  7 15:48 App.framework
drwxr-xr-x@ 3 lxf  staff    96B  3  7 15:48 App.framework.dSYM
-rw-r--r--@ 1 lxf  staff   323M  3  7 15:38 snapshot_assembly.S
-rw-r--r--@ 1 lxf  staff    93M  3  7 15:48 snapshot_assembly.o
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Release&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-shell&quot; lang=&quot;shell&quot;&gt;&lt;span class=&quot;hljs-meta prompt_&quot;&gt;# &lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;Xcode 15&lt;/span&gt;
[        ] executing: xcrun cc -arch arm64 -miphoneos-version-min=12.0 -isysroot /Applications/Xcode-15.4.0.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS17.5.sdk -c /Users/lxf/.../.dart_tool/flutter_build/a403cb206ef9086380afa3baff59c37e/arm64/snapshot_assembly.S -o /Users/lxf/.../.dart_tool/flutter_build/a403cb206ef9086380afa3baff59c37e/arm64/snapshot_assembly.o
[+92077 ms] executing: xcrun clang -arch arm64 -miphoneos-version-min=12.0 -isysroot /Applications/Xcode-15.4.0.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS17.5.sdk -dynamiclib -Xlinker -rpath -Xlinker @executable_path/Frameworks -Xlinker -rpath -Xlinker @loader_path/Frameworks -fapplication-extension -install_name @rpath/App.framework/App -o /Users/lxf/.../.dart_tool/flutter_build/a403cb206ef9086380afa3baff59c37e/arm64/App.framework/App /Users/lxf/.../.dart_tool/flutter_build/a403cb206ef9086380afa3baff59c37e/arm64/snapshot_assembly.o
[ +245 ms] ...
[   +1 ms] executing: /Users/lxf/fvm/versions/3.24.5/bin/cache/artifacts/engine/ios-release/gen_snapshot_arm64 --deterministic --snapshot_kind=app-aot-assembly --assembly=/Users/lxf/.../.dart_tool/flutter_build/a403cb206ef9086380afa3baff59c37e/arm64/snapshot_assembly.S /Users/lxf/.../.dart_tool/flutter_build/a403cb206ef9086380afa3baff59c37e/app.dill
[+88256 ms] ...
&lt;span class=&quot;hljs-meta prompt_&quot;&gt;
# &lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;========== 华丽的分割线 ========== &lt;span class=&quot;hljs-comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-meta prompt_&quot;&gt;
# &lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;Xcode 16&lt;/span&gt;
[        ] executing: xcrun cc -arch arm64 -miphoneos-version-min=12.0 -isysroot /Applications/Xcode-16.0.0.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.sdk -c /Users/lxf/.../.dart_tool/flutter_build/6294397816f76932cad621f56d6b967b/arm64/snapshot_assembly.S -o /Users/lxf/.../.dart_tool/flutter_build/6294397816f76932cad621f56d6b967b/arm64/snapshot_assembly.o
[+246277 ms] executing: xcrun clang -arch arm64 -miphoneos-version-min=12.0 -isysroot /Applications/Xcode-16.0.0.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.sdk -dynamiclib -Xlinker -rpath -Xlinker @executable_path/Frameworks -Xlinker -rpath -Xlinker @loader_path/Frameworks -fapplication-extension -install_name @rpath/App.framework/App -o /Users/lxf/.../.dart_tool/flutter_build/6294397816f76932cad621f56d6b967b/arm64/App.framework/App /Users/lxf/.../.dart_tool/flutter_build/6294397816f76932cad621f56d6b967b/arm64/snapshot_assembly.o
[ +237 ms] ...
[   +1 ms] executing: /Users/lxf/fvm/versions/3.24.5/bin/cache/artifacts/engine/ios-release/gen_snapshot_arm64 --deterministic --snapshot_kind=app-aot-assembly --assembly=/Users/lxf/.../.dart_tool/flutter_build/6294397816f76932cad621f56d6b967b/arm64/snapshot_assembly.S /Users/lxf/.../.dart_tool/flutter_build/6294397816f76932cad621f56d6b967b/app.dill
[+88139 ms] ...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-shell&quot; lang=&quot;shell&quot;&gt;&lt;span class=&quot;hljs-meta prompt_&quot;&gt;# &lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;Xcode 15、Xcode 16 一样&lt;/span&gt;

ls -lh
total 572808
drwxr-xr-x@ 3 lxf  staff    96B  3  7 17:08 App.framework
drwxr-xr-x@ 3 lxf  staff    96B  3  7 16:02 App.framework.dSYM
-rw-r--r--@ 1 lxf  staff   213M  3  7 17:04 snapshot_assembly.S
-rw-r--r--@ 1 lxf  staff    67M  3  7 17:08 snapshot_assembly.o
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你可能会觉得最耗时的是 &lt;code&gt;xcrun clang&lt;/code&gt;，但其实每一行前面的中括号内的时间，是上一行的命令的耗时，即 &lt;code&gt;xcrun cc&lt;/code&gt; 最耗时，而其它命令的执行时间是差不多的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;xcrun cc&lt;/code&gt; 命令是用于将&amp;nbsp;&lt;code&gt;Flutter&lt;/code&gt;&amp;nbsp;生成的汇编代码（&lt;code&gt;snapshot_assembly.S&lt;/code&gt;）编译为目标文件（&lt;code&gt;snapshot_assembly.o&lt;/code&gt;），不知道苹果使用的 &lt;code&gt;clang&lt;/code&gt; 版本是有什么问题，在 &lt;code&gt;Profile&lt;/code&gt; 下的编译时长是 &lt;code&gt;Release&lt;/code&gt; 下的 &lt;code&gt;2倍&lt;/code&gt; 多，它就是造成编译时间变长的主要原因，到这我就没继续往下研究了，有兴趣的小伙伴可以尝试研究看看。&lt;/p&gt;
&lt;p&gt;除此之外，汇编文件 &lt;code&gt;snapshot_assembly.S&lt;/code&gt; 的大小相差 &lt;code&gt;100M+&lt;/code&gt;，我们可以在日志中找到生成汇编代码的 &lt;code&gt;gen_snapshot_*&lt;/code&gt; 命令，如下所示&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-shell&quot; lang=&quot;shell&quot;&gt;executing: /Users/lxf/fvm/versions/3.24.5/bin/cache/artifacts/engine/ios-release/gen_snapshot_arm64 --deterministic --snapshot_kind=app-aot-assembly --assembly=/Users/lxf/.../.dart_tool/flutter_build/0385e340094e836ea63c75553c018e82/arm64/snapshot_assembly.S /Users/lxf/.../.dart_tool/flutter_build/0385e340094e836ea63c75553c018e82/app.dill
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;给 &lt;code&gt;gen_snapshot_*&lt;/code&gt; 命令加上 &lt;code&gt;--trace-compiler&lt;/code&gt; 标志并重新运行，让其提供每个函数的编译时间，并记录到 &lt;code&gt;result.txt&lt;/code&gt; 中，精简命令如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-shell&quot; lang=&quot;shell&quot;&gt;gen_snapshot_* --trace-compiler ... app.dill &amp;gt; result.txt 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;result.txt&lt;/code&gt; 中的内容长这个样子&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-txt&quot; lang=&quot;txt&quot;&gt;Precompiling optimized function: &#39;dart:core_StateError_StateError.&#39; @ token 21950, size 52
--&amp;gt; &#39;dart:core_StateError_StateError.&#39; entry: 0x108d00090 size: 56 time: 935 us
Precompiling optimized function: &#39;dart:core_RangeError_RangeError.&#39; @ token 9976, size 94
--&amp;gt; &#39;dart:core_RangeError_RangeError.&#39; entry: 0x108d000e0 size: 72 time: 133 us
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据 &lt;code&gt;result.txt&lt;/code&gt; 中的耗时（&lt;code&gt;time&lt;/code&gt;）进行从大到小排序，并输出到 &lt;code&gt;sorted_result.txt&lt;/code&gt; 中&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-shell&quot; lang=&quot;shell&quot;&gt;grep &#39;^--&amp;gt;&#39; result.txt | awk &#39;{for(i=1;i&amp;lt;=NF;i++) if($i==&quot;time:&quot;) print $(i+1), $0}&#39; | sort -nr | cut -d&#39; &#39; -f2- &amp;gt; sorted_result.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;排序后我们就可以清晰的知道哪些方法是比较耗时的，大家自行判断是否优化即可。&lt;/p&gt;
&lt;p&gt;经过对比两个 &lt;code&gt;sorted_result.txt&lt;/code&gt; 后发现，一些方法在 &lt;code&gt;Profile&lt;/code&gt; 中存在而 &lt;code&gt;Release&lt;/code&gt; 中没有，即发生了 &lt;code&gt;Tree Shaking&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;Flutter&lt;/code&gt; 中，&lt;code&gt;Tree Shaking&lt;/code&gt; 是一种优化技术，用于删除未使用的代码，以减小应用的大小并提高性能。对于不同的构建模式，&lt;code&gt;Tree Shaking&lt;/code&gt; 的行为有所不同：&lt;/p&gt;





















&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;模式&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;Debug&lt;/code&gt;&lt;/td&gt;&lt;td&gt;不会进行 &lt;code&gt;Tree Shaking&lt;/code&gt;。&lt;br&gt;因为 Debug 模式主要用于开发和调试，保留所有代码和调试信息，以便于开发者进行调试。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;Profile&lt;/code&gt;&lt;/td&gt;&lt;td&gt;会进行部分 &lt;code&gt;Tree Shaking&lt;/code&gt;。&lt;br&gt;主要用于性能分析，尽可能地优化代码，同时保留一些调试信息，以便开发者能分析性能问题。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;Release&lt;/code&gt;&lt;/td&gt;&lt;td&gt;会进行全面的 &lt;code&gt;Tree Shaking&lt;/code&gt;。&lt;br&gt;会删除未使用的代码，并进行其他优化，以确保应用的体积尽可能小，并且性能最佳。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;关于构建模式的详细说明，可以看官方文档 &lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fdocs.flutter.dev%2Ftesting%2Fbuild-modes&quot; target=&quot;_blank&quot; title=&quot;https://docs.flutter.dev/testing/build-modes&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;docs.flutter.dev/testing/bui…&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因此，如果我们希望最大限度地减少应用的体积并提高性能，建议在 &lt;code&gt;Release&lt;/code&gt; 模式下构建 &lt;code&gt;Flutter&lt;/code&gt; 应用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;将 &lt;code&gt;Profile&lt;/code&gt; 模式切到 &lt;code&gt;Release&lt;/code&gt; 模式后的打包时间如下&lt;/p&gt;




















&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;构建机&lt;/th&gt;&lt;th&gt;&lt;code&gt;Profile&lt;/code&gt;(min)&lt;/th&gt;&lt;th&gt;&lt;code&gt;Release&lt;/code&gt;(min)&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;i7&lt;/code&gt;&lt;/td&gt;&lt;td&gt;25+&lt;/td&gt;&lt;td&gt;18+&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;M4&lt;/code&gt;&lt;/td&gt;&lt;td&gt;16+&lt;/td&gt;&lt;td&gt;9+&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;可以看到，切换编译模式已经很大程度地优化了编译时长，不过我们还可以再进一步优化。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-4&quot;&gt;五、二进制依赖&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;二进制依赖&lt;/code&gt; 是 &lt;code&gt;iOS&lt;/code&gt; 端老生常谈的优化点了，通过直接使用编译好的库或模块，从而避免编译的时间和资源消耗。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因此，原生插件越多，编译速度就越慢，二进制依赖的优化效果越好，二进制依赖的优化效果越好，编译速度就越快，所以编译越慢，编译越快 ~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这里我使用的是 &lt;code&gt;Rugby&lt;/code&gt; 这个工具。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-5&quot;&gt;安装&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-shell&quot; lang=&quot;shell&quot;&gt;curl -Ls https://swiftyfinch.github.io/rugby/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装完成后输出如下内容&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-shell&quot; lang=&quot;shell&quot;&gt;🏈 Rugby has been installed ✓

/Users/lxf/.rugby/clt is not in your $PATH
Add it manually to your shell profile.
For example, if you use zsh, run this command:
&lt;span class=&quot;hljs-meta prompt_&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;\nexport PATH=$PATH:~/.rugby/clt&#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.zshrc&lt;/span&gt;
Than open a new window or tab in the terminal for applying changes.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据提示，将 &lt;code&gt;rugby&lt;/code&gt; 添加到环境变量中。&lt;/p&gt;
&lt;p&gt;完成后新开个终端，执行如下命令验证 &lt;code&gt;rugby&lt;/code&gt; 是否可以被正常使用&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-shell&quot; lang=&quot;shell&quot;&gt;rugby --version
&lt;span class=&quot;hljs-meta prompt_&quot;&gt;
# &lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;输出&lt;/span&gt;
2.10.2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-6&quot;&gt;使用&lt;/h3&gt;
&lt;p&gt;在执行完 &lt;code&gt;pod install&lt;/code&gt; 后，再执行 &lt;code&gt;rugby cache&lt;/code&gt; 即可将原生插件从源码依赖转成二进制依赖了&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-shell&quot; lang=&quot;shell&quot;&gt;rugby cache \
  --arch arm64 \
  --sdk ios \
  --except chat_bottom_container realm dart_native \
  --config Release
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里通过 &lt;code&gt;--except&lt;/code&gt; 将一些不做二进制依赖的包过滤掉了。&lt;/p&gt;
&lt;p&gt;当这些参数太多之后，命令会变得很长，不好看，可以将这些参数整理到 &lt;code&gt;plans.yml&lt;/code&gt; 文件中&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-yaml&quot; lang=&quot;yaml&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;profile:&lt;/span&gt;
&lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;command:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;cache&lt;/span&gt;
  &lt;span class=&quot;hljs-attr&quot;&gt;sdk:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;ios&lt;/span&gt;
  &lt;span class=&quot;hljs-attr&quot;&gt;config:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;Profile&lt;/span&gt;
  &lt;span class=&quot;hljs-attr&quot;&gt;except:&lt;/span&gt;
    &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;chat_bottom_container&lt;/span&gt;
    &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;realm&lt;/span&gt;
    &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;dart_native&lt;/span&gt;

&lt;span class=&quot;hljs-attr&quot;&gt;release:&lt;/span&gt;
&lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;command:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;cache&lt;/span&gt;
  &lt;span class=&quot;hljs-attr&quot;&gt;sdk:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;ios&lt;/span&gt;
  &lt;span class=&quot;hljs-attr&quot;&gt;config:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;Release&lt;/span&gt;
  &lt;span class=&quot;hljs-attr&quot;&gt;except:&lt;/span&gt;
    &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;chat_bottom_container&lt;/span&gt;
    &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;realm&lt;/span&gt;
    &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;dart_native&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后改为 &lt;code&gt;rugby plan&lt;/code&gt; 去执行，并且指定使用 &lt;code&gt;plans.yml&lt;/code&gt; 中的 &lt;code&gt;release&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-shell&quot; lang=&quot;shell&quot;&gt;rugby plan release -p /User/lxf/.../plans.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不过需要注意的是，如果你再次执行 &lt;code&gt;pod install&lt;/code&gt; 将会还原为源码依赖！&lt;code&gt;rugby&lt;/code&gt; 的修改就会失效~&lt;/p&gt;
&lt;p&gt;而我们平时执行的 &lt;code&gt;flutter build ipa&lt;/code&gt; 命令，其内部是有可能会去执行 &lt;code&gt;pod install&lt;/code&gt; 的，那如何避免呢？&lt;/p&gt;
&lt;p&gt;经过 &lt;code&gt;flutter_tools&lt;/code&gt; 的源码阅读，发现它会做如下判断&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;涉及的文件是否存在&lt;/li&gt;
&lt;li&gt;对比 &lt;code&gt;pod_inputs.fingerprint&lt;/code&gt; 中的各项 &lt;code&gt;MD5&lt;/code&gt; 值&lt;/li&gt;
&lt;li&gt;对比 &lt;code&gt;Podfile.lock&lt;/code&gt; 与 &lt;code&gt;Pods/Manifest.lock&lt;/code&gt; 内容&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;pod_inputs.fingerprint&lt;/code&gt; 位于 &lt;code&gt;build/ios&lt;/code&gt; 目录，内容如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-json&quot; lang=&quot;json&quot;&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;files&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;/Users/lxf/.../ios/Runner.xcodeproj/project.pbxproj&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;21b527dc18081de6eabe26c6a4e851b2&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;/Users/lxf/.../ios/Podfile&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;25baa69590b287fd88a578ae5fa2f964&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;.../flutter/packages/flutter_tools/bin/podhelper.rb&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;29abcfc3297c225fc1d1ae2380787cd6&quot;&lt;/span&gt;
    &lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所以现在很明确，我们需要调整打包步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;flutter pub get/upgrade&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd ios &amp;amp;&amp;amp; pod install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;切成二进制依赖&lt;/li&gt;
&lt;li&gt;自己生成 &lt;code&gt;pod_inputs.fingerprint&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;拷贝 &lt;code&gt;Podfile.lock&lt;/code&gt;&amp;nbsp;至&amp;nbsp;&lt;code&gt;Pods/Manifest.lock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flutter build ipa&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中第 &lt;code&gt;3&lt;/code&gt; ~ 第 &lt;code&gt;5&lt;/code&gt; 步我已经做了封装在我的 &lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FLinXunFeng%2Fcondor&quot; target=&quot;_blank&quot; title=&quot;https://github.com/LinXunFeng/condor&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;github.com/LinXunFeng/…&lt;/a&gt; 项目中，使用如下&lt;/p&gt;
&lt;h3 data-id=&quot;heading-7&quot;&gt;Condor&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-8&quot;&gt;安装 &lt;code&gt;condor&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-shell&quot; lang=&quot;shell&quot;&gt;brew tap LinXunFeng/tap &amp;amp;&amp;amp; brew install condor
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-9&quot;&gt;指定编译模式&lt;/h4&gt;
&lt;p&gt;设置环境变量 &lt;code&gt;CONDOR_BUILD_MODE&lt;/code&gt;，对应 &lt;code&gt;plans.yml&lt;/code&gt; 里的 &lt;code&gt;profile&lt;/code&gt; 和 &lt;code&gt;release&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-shell&quot; lang=&quot;shell&quot;&gt;export CONDOR_BUILD_MODE=release
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也可以使用 &lt;code&gt;--mode&lt;/code&gt; 参数来指定模式&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-arduino&quot; lang=&quot;arduino&quot;&gt;condor optimize-build --mode release
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-10&quot;&gt;二进制依赖与同步文件&lt;/h4&gt;
&lt;p&gt;进入到 &lt;code&gt;Flutter&lt;/code&gt; 项目的根目录，执行如下命令&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-shell&quot; lang=&quot;shell&quot;&gt;cd path/to/your/flutter_project

condor optimize-build --config path/to/rugby/plans.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果你想指定 &lt;code&gt;fvm&lt;/code&gt; 安装的且非全局默认的 &lt;code&gt;flutter&lt;/code&gt;，则可以加上 &lt;code&gt;--flutter&lt;/code&gt; 参数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-shell&quot; lang=&quot;shell&quot;&gt;condor optimize-build --config path/to/rugby/plans.yml --flutter &quot;fvm spawn 3.24.5&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后执行打包命令即可。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-11&quot;&gt;六、最后&lt;/h2&gt;
&lt;p&gt;希望苹果下一个版本的 &lt;code&gt;Xcode&lt;/code&gt; 可以解决这个问题吧，不然的话，emmm，我也不会升级电脑的~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果文章对您有所帮助, 请不吝点击关注一下我的微信公众号：&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fp3-juejin.byteimg.com%2Ftos-cn-i-k3u1fbpfcp%2F31960a996f1f4b0da35d69ab7480f7d6~tplv-k3u1fbpfcp-zoom-1.image&quot; title=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fp3-juejin.byteimg.com%2Ftos-cn-i-k3u1fbpfcp%2F31960a996f1f4b0da35d69ab7480f7d6~tplv-k3u1fbpfcp-zoom-1.image&quot; target=&quot;_blank&quot;&gt;FSA全栈行动&lt;/a&gt;, 这将是对我最大的激励. 公众号不仅有 &lt;code&gt;iOS&lt;/code&gt; 技术，还有 &lt;code&gt;Android&lt;/code&gt;，&lt;code&gt;Flutter&lt;/code&gt;，&lt;code&gt;Python&lt;/code&gt; 等文章, 可能有你想要了解的技能知识点哦~&lt;/p&gt;
&lt;/blockquote&gt;</description><link>https://juejin.cn/post/7479399201999683584</link><guid isPermaLink="false">https://juejin.cn/post/7479399201999683584</guid><pubDate>Sun, 09 Mar 2025 12:37:56 GMT</pubDate><author>LinXunFeng</author><category>iOS</category><category>Flutter</category><category>Xcode</category><category>Apple</category></item><item><title>xcode集成deepseek插件实现AI编程</title><description>&lt;h2 data-id=&quot;heading-0&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;Apple在Xcode16下推出了人工智能产品Swift Assist以及预测性代码补齐(Predictive Code Completion)。
但是Swift Assist一直没上线。而预测性代码补齐(Predictive Code Completion)又锁国区。在vscode各种AI插件各种浪的当下，Xcode苦AI久矣！&lt;/p&gt;
&lt;p&gt;这次介绍一下一个非常牛逼的xcode插件，给我们带来了AI辅助。他就是&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fintitni%2FCopilotForXcode&quot; target=&quot;_blank&quot; title=&quot;https://github.com/intitni/CopilotForXcode&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;CopilotForXcode&lt;/a&gt;。CopilotForXcode的readme写的是&lt;code&gt;Copilot for Xcode is an Xcode Source Editor Extension that provides GitHub Copilot, Codeium and ChatGPT support for Xcode.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;而今天我们的核心目的是基于CopilotForXcode插件的能力让Xcode集成deepseek。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-1&quot;&gt;优缺点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Xcode直接集成deepseek的优点在于可以直接传递代码的上下文，省却了从网页来回搬运代码的问题。并且可以直接在代码中体现deepseek的修改建议，一键accept。最后他的回答的质量还是可以的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点就是费API token，要充值，但这个不是最大的问题。最败体验的是撸完码，抬起手要等3秒才能回来一个建议，速度太慢了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 data-id=&quot;heading-2&quot;&gt;准备工作&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Xcode，不用多说。&lt;/li&gt;
&lt;li&gt;能上网，能打开deepseek开放平台网站&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fplatform.deepseek.com&quot; target=&quot;_blank&quot; title=&quot;https://platform.deepseek.com&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;platform.deepseek.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;需要能访问Github。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 data-id=&quot;heading-3&quot;&gt;详细步骤&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-4&quot;&gt;配置deepseek&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fplatform.deepseek.com&quot; target=&quot;_blank&quot; title=&quot;https://platform.deepseek.com&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;deepseek开放平台&lt;/a&gt;。接着手机验证码一键登录或者微信扫一扫&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;页面的左侧有一个最醒目的黄色的按钮叫做&lt;strong&gt;充值&lt;/strong&gt;，想用就充值吧，不充不让用，充了才能变强。最小金额好像是10块钱。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/2835646a7a044729af8bb9fcfb28a55c~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6YKT5bCP5LmQ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742910010&amp;amp;x-signature=11%2FOKdVXrGSZxq7rBryxu%2BILkr8%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;&lt;strong&gt;充值&lt;/strong&gt;按钮的上方有一个叫做&lt;strong&gt;API Keys&lt;/strong&gt;的入口。接下来重中之重，让我们创建一个API Key吧&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/e2c6fd11af0940b2ae7fb5aaaa0b6bcc~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6YKT5bCP5LmQ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742910010&amp;amp;x-signature=9qcW6Z7SF22sbXVm4EpaP5X8%2FNc%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;注意！！！请一定要保存好你这个key，接下来要配置在Xcode插件中。然后这个key千万别泄漏了，否则充值的钱就没了。能不能退不退款，我也就不知道了。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 data-id=&quot;heading-5&quot;&gt;下载CopilotForXcode&lt;/h3&gt;
&lt;p&gt;CopilotForXcode插件的链接是&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fintitni%2FCopilotForXcode&quot; target=&quot;_blank&quot; title=&quot;https://github.com/intitni/CopilotForXcode&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;github.com/intitni/Cop…&lt;/a&gt;
下载安装方式有多种，项目的readme里面都有介绍。我平时有使用homebrew，我就直接用方式二brew命令安装了。
下载完后就长这个样子&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/93635e2bd03c440cbd41654ec92df418~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6YKT5bCP5LmQ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742910010&amp;amp;x-signature=8XRMFsiRfAjF28AhuKOJcnFzQKc%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h4 data-id=&quot;heading-6&quot;&gt;第一种方式，直接下载&lt;/h4&gt;
&lt;p&gt;直接打开网站下载它最新的release版本&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fintitni%2FCopilotForXcode%2Freleases%2Fdownload%2F0.35.6%2FCopilot.for.Xcode.app.zip&quot; target=&quot;_blank&quot; title=&quot;https://github.com/intitni/CopilotForXcode/releases/download/0.35.6/Copilot.for.Xcode.app.zip&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;Copilot.for.Xcode.app.zip&lt;/a&gt;，然后解压丢到Mac的Applications文件夹内，一气呵成。&lt;/p&gt;
&lt;h4 data-id=&quot;heading-7&quot;&gt;第二种方式，用brew安装&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-shell&quot; lang=&quot;shell&quot;&gt;brew install --cask copilot-for-xcode
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-8&quot;&gt;开启Copilot插件权限&lt;/h3&gt;
&lt;p&gt;下载完毕后，丢到应用程序文件夹(Applications)内直接打开程序。就会提示获取权限，一路允许就对了。
需要注意的点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;系统设置-通用-登录项与扩展。有一个允许在后台的Toggle开关记得打开。
&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/cd18ca6904bd4f14895bf47a27155852~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6YKT5bCP5LmQ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742910010&amp;amp;x-signature=VE%2BmVeFfCnm7A%2F2tg7b%2F6uB1wms%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;还是系统设置-通用-登录项与扩展。在允许在后台设置区域的下方还有一个设置扩展区域。注意点击箭头所示区域，有一个弹层，再把Copilot for Xcode的开关打开。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/446aa0c2e9d94264b782df52b0e49115~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6YKT5bCP5LmQ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742910010&amp;amp;x-signature=3yatDGA%2FIDXFpgT1FMWU7ueCFKQ%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果是MacOS14，设置扩展的位置有点不太一样。在系统设置-隐私与安全下面。下面是人家官方的文档，写的比我的详细&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-perl&quot; lang=&quot;perl&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#### macOS 15&lt;/span&gt;
From the Apple menu located in the top-left corner of your screen click &lt;span class=&quot;hljs-string&quot;&gt;`System Settings`&lt;/span&gt;. Navigate to &lt;span class=&quot;hljs-string&quot;&gt;`General`&lt;/span&gt; then &lt;span class=&quot;hljs-string&quot;&gt;`Login Items &amp;amp; Extensions`&lt;/span&gt;. Click &lt;span class=&quot;hljs-string&quot;&gt;`Xcode Source Editor`&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; tick &lt;span class=&quot;hljs-string&quot;&gt;`Copilot for Xcode`&lt;/span&gt;.

&lt;span class=&quot;hljs-comment&quot;&gt;#### MacOS 14&lt;/span&gt;
From the Apple menu located in the top-left corner of your screen click &lt;span class=&quot;hljs-string&quot;&gt;`System Settings`&lt;/span&gt;. Navigate to &lt;span class=&quot;hljs-string&quot;&gt;`Privacy &amp;amp; Security`&lt;/span&gt; then toward the bottom click &lt;span class=&quot;hljs-string&quot;&gt;`Extensions`&lt;/span&gt;. Click &lt;span class=&quot;hljs-string&quot;&gt;`Xcode Source Editor`&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; tick &lt;span class=&quot;hljs-string&quot;&gt;`Copilot`&lt;/span&gt;.

&lt;span class=&quot;hljs-comment&quot;&gt;#### Older Versions&lt;/span&gt;
If you are using macOS Monterey, enter the &lt;span class=&quot;hljs-string&quot;&gt;`Extensions`&lt;/span&gt; menu in &lt;span class=&quot;hljs-string&quot;&gt;`System Preferences.app`&lt;/span&gt; with its dedicated icon.

&lt;span class=&quot;hljs-comment&quot;&gt;### Granting Permissions to the App&lt;/span&gt;

The first &lt;span class=&quot;hljs-keyword&quot;&gt;time&lt;/span&gt; the app is &lt;span class=&quot;hljs-keyword&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; command run, the extension will ask &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; the necessary permissions.

Alternatively, you may manually grant the required permissions by navigating to the &lt;span class=&quot;hljs-string&quot;&gt;`Privacy &amp;amp; Security`&lt;/span&gt; tab in the &lt;span class=&quot;hljs-string&quot;&gt;`System Settings.app`&lt;/span&gt;.

- To grant permissions &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; the Accessibility API, click &lt;span class=&quot;hljs-string&quot;&gt;`Accessibility`&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; drag &lt;span class=&quot;hljs-string&quot;&gt;`CopilotForXcodeExtensionService.app`&lt;/span&gt; to the list. You can locate the extension app by clicking &lt;span class=&quot;hljs-string&quot;&gt;`Reveal Extension App in Finder`&lt;/span&gt; in the host app.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-9&quot;&gt;配置Copilot插件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;打开CopilotForXcode插件后界面如下，我们主要关心Service的配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/424cfa82c2d1411daf8762c430ff4d80~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6YKT5bCP5LmQ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742910010&amp;amp;x-signature=MhGKG5FacHTCP%2FEqenCINYGMhfY%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开Service后，我们找到Chat Models这一列，点击add model。准备添加deepseek。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/e94fe59b4426484cbb7b10c5ba70b05d~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6YKT5bCP5LmQ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742910010&amp;amp;x-signature=oYZ%2FM6gqEtOtv%2BbuYd6XuZho66o%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击后弹层长这个样子&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/2a55803aa5284d46861a1840224c73bc~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6YKT5bCP5LmQ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742910010&amp;amp;x-signature=YRixx709Ac%2F%2BXajxK5j9YSW3EBs%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们先取名字，就叫做deepseek吧。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/6401deab0aca4b2fabf70086ed094cfa~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6YKT5bCP5LmQ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742910010&amp;amp;x-signature=JA4fOKu%2FB%2FkPDlM%2FcnE1mpUapgQ%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;然后我们选择格式，选完后的结果就如上面这张图一样了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/84436e2aed284c6da3084d2f5c3224a6~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6YKT5bCP5LmQ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742910010&amp;amp;x-signature=7g92yC1yOvjbb3SIALTnjL3pgsM%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接下来我们处理API Key。对，就是之前从deepseek开放平台申请的那个字符串。如下图所示，在点击了加号后，会有一个弹层，让你取个名字然后输入deepseek的APIKey。之后就添加好了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/7b9a9cb7017d4351884ea43608762159~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6YKT5bCP5LmQ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742910010&amp;amp;x-signature=cnzSpOyb4zDNrYMQGiMxazBNd4A%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择使用API Key&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/f764a880e4db447193f7c10f4aaa1187~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6YKT5bCP5LmQ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742910010&amp;amp;x-signature=8yjtyTceY9KN68%2FndHhqsoJPm50%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择模型
直接填&lt;code&gt;deepseek-chat&lt;/code&gt;就可以了，这里千万别乱填。这个是网络请求的参数，告诉deepseek那边使用哪个模型处理数据，不是随便取名字的。之后直接点击右下角的save就OK了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/b02259190c2b475cbbf130a0e7b6619c~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6YKT5bCP5LmQ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742910010&amp;amp;x-signature=5yqpYmhPIDUXQQ%2FOeR%2B5%2FnP7Sfc%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by the way，有哪些模型可以使用呢？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当前的deepseek只有2个模型可以选择&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/5fb7d169379a4c9f8971a2de1fabbe1f~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6YKT5bCP5LmQ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742910010&amp;amp;x-signature=zvwH5grw0P8zjpIT2fSDCWG0B8A%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看文档
&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fapi-docs.deepseek.com%2Fzh-cn%2Fquick_start%2Fpricing&quot; target=&quot;_blank&quot; title=&quot;https://api-docs.deepseek.com/zh-cn/quick_start/pricing&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;api-docs.deepseek.com/zh-cn/quick…&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;再检查一下feature配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/53933b90ad8d461eb144c9b63d01959a~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6YKT5bCP5LmQ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742910010&amp;amp;x-signature=lMQFwhmVs9p7HPfC0h658JZhqgM%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;到此，我们的chat差不多就配置好了&lt;/p&gt;
&lt;h3 data-id=&quot;heading-10&quot;&gt;Hello deepseek&lt;/h3&gt;
&lt;p&gt;插件配置好了后，顶部menubar可以看到一个小触手。那就是插件的快捷入口，点击后有一个open chat的按钮。我们接下来就可以开始聊天了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/53fb5436c33641f6ad1072e5f2508619~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6YKT5bCP5LmQ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742910010&amp;amp;x-signature=xfU4QPPEDEA2MV97373k2NwZwwQ%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/83a42ded44fa4eb6bd80d61f2a28fafa~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6YKT5bCP5LmQ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742910010&amp;amp;x-signature=Q14rrl8MgvFMabVJuBM3%2BSThpnc%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h3 data-id=&quot;heading-11&quot;&gt;Suggestion&lt;/h3&gt;
&lt;p&gt;现在我们还需要处理代码建议，也就是自动补全。也是这位作者名下的另外一个库。叫做CustomSuggestionServiceForCopilotForXcode，我们接下来基于这个库来实现deepseek的FIM补全功能。&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fapi-docs.deepseek.com%2Fzh-cn%2Fguides%2Ffim_completion&quot; target=&quot;_blank&quot; title=&quot;https://api-docs.deepseek.com/zh-cn/guides/fim_completion&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;api-docs.deepseek.com/zh-cn/guide…&lt;/a&gt;&lt;/p&gt;
&lt;h4 data-id=&quot;heading-12&quot;&gt;CustomSuggestionServiceForCopilotForXcode&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fintitni%2FCustomSuggestionServiceForCopilotForXcode&quot; target=&quot;_blank&quot; title=&quot;https://github.com/intitni/CustomSuggestionServiceForCopilotForXcode&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;CustomSuggestionServiceForCopilotForXcode&lt;/a&gt;的下载地址是&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fintitni%2FCustomSuggestionServiceForCopilotForXcode&quot; target=&quot;_blank&quot; title=&quot;https://github.com/intitni/CustomSuggestionServiceForCopilotForXcode&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;github.com/intitni/Cus…&lt;/a&gt;
打开后直接去release页面下载它的最新的&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fintitni%2FCustomSuggestionServiceForCopilotForXcode%2Freleases%2Fdownload%2F0.6.0%2FCustom.Suggestion.Service.app.zip&quot; target=&quot;_blank&quot; title=&quot;https://github.com/intitni/CustomSuggestionServiceForCopilotForXcode/releases/download/0.6.0/Custom.Suggestion.Service.app.zip&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;Custom.Suggestion.Service.app.zip&lt;/a&gt;
解压后我直接丢应用文件夹(Applications)了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/a8cc1d20ac974749893d76c66613fe8a~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6YKT5bCP5LmQ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742910010&amp;amp;x-signature=sSSKKWaC4h5Vw3HUBu5spwKjOyg%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h5 data-id=&quot;heading-13&quot;&gt;安装CustomSuggestionServiceForCopilotForXcode&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;打开CustomSuggestionServiceForCopilotForXcode App&lt;/li&gt;
&lt;li&gt;再打开我们的小章鱼jio，也就是&lt;strong&gt;CopilotForXcode&lt;/strong&gt;(别搞错了和上面的是2个不同的app)，点击open Copilot for Xcode。会打开Copilot的控制面板，然后我们这次点击Extension-SelectExtensions&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/39b7c3548b6d4f2582de80c072a57544~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6YKT5bCP5LmQ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742910010&amp;amp;x-signature=b%2FW076%2FnjUbZ3Qm3e0CD9G7sc6Y%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/0c8a277ab53c4010b115cd09742f8bdd~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6YKT5bCP5LmQ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742910010&amp;amp;x-signature=EoUjsuVjsGvLU19MfXlSil0boiM%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/5ab76e32bc63445780f63831ee3d82bb~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6YKT5bCP5LmQ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742910010&amp;amp;x-signature=seBFYEAC%2B%2FPST0mNz17iNZyKO7k%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;enable它&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/2cc9e5ee659d4a6fbd77d2e81a80b391~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6YKT5bCP5LmQ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742910010&amp;amp;x-signature=V42C2Cw7pIylIo9QasCZ10SYMEI%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;feature设置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/382e06b728c04833906bf8988ee4ebd7~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6YKT5bCP5LmQ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742910010&amp;amp;x-signature=Y2R3Ii7AhbbV9tYBZoPcnTha3UE%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h5 data-id=&quot;heading-14&quot;&gt;配置CustomSuggestionServiceForCopilotForXcode&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;让我们再回到CustomSuggestionServiceForCopilotForXcode，她的样子和下面一样，按照箭头点击。选择Custom Model(FIM API)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/54730e05a76a43939db61e986dfce2cd~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6YKT5bCP5LmQ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742910010&amp;amp;x-signature=0h8yoMR48v6uJNyB2calWnyYFfk%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接着点击旁边的Edit Model按钮&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/9f93b30d0b424918ad4cbab07ea0c8fc~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6YKT5bCP5LmQ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742910010&amp;amp;x-signature=%2F7z1zYINi8bql45T33oXvDoGgog%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;如图选择&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mistral&lt;/li&gt;
&lt;li&gt;Full URL，&lt;code&gt;https://api.deepseek.com/beta/completions&lt;/code&gt; url的出处参考的是deepseek官方文档&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fapi-docs.deepseek.com%2Fzh-cn%2Fapi%2Fcreate-completion&quot; target=&quot;_blank&quot; title=&quot;https://api-docs.deepseek.com/zh-cn/api/create-completion&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;api-docs.deepseek.com/zh-cn/api/c…&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;API Key选择如之前的一样，我们创建的deepseek&lt;/li&gt;
&lt;li&gt;model name还是&lt;code&gt;deepseek-chat&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;点击右下角的save&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后配置完成。可以安安静静地享受AI编程的愉快了。附上提示代码图如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/3ed01898ad5d49b182ad1a9576d7d676~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6YKT5bCP5LmQ:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742910010&amp;amp;x-signature=4ZFrvB22GsQy0lZCXwutTB%2FlB6U%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;</description><link>https://juejin.cn/post/7479084726709288979</link><guid isPermaLink="false">https://juejin.cn/post/7479084726709288979</guid><pubDate>Sat, 08 Mar 2025 13:07:13 GMT</pubDate><author>邓小乐</author><category>iOS</category><category>Xcode</category></item><item><title>Flutter性能优化细节</title><description>&lt;h2 data-id=&quot;heading-0&quot;&gt;&lt;strong&gt;一、渲染性能优化&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-1&quot;&gt;1、减少Widget重建&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;使用&lt;code&gt;const&lt;/code&gt;构造函数&lt;/strong&gt;
对静态Widget使用&lt;code&gt;const&lt;/code&gt;，减少重复构建：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-scss&quot; lang=&quot;scss&quot;&gt;const Text(&#39;Hello World&#39;), &lt;span class=&quot;hljs-comment&quot;&gt;// ✅ 编译时即确定，不会重复创建&lt;/span&gt;
Text(&#39;Hello World&#39;),        &lt;span class=&quot;hljs-comment&quot;&gt;// ❌ 每次build都会新建实例&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;分离动画与子组件&lt;/strong&gt;
使用&lt;code&gt;AnimatedBuilder&lt;/code&gt;避免动画导致整个子树重建：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-less&quot; lang=&quot;less&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;AnimatedBuilder&lt;/span&gt;(
  &lt;span class=&quot;hljs-attribute&quot;&gt;animation&lt;/span&gt;: _animation,
  &lt;span class=&quot;hljs-attribute&quot;&gt;builder&lt;/span&gt;: (context, child) =&amp;gt; Transform.&lt;span class=&quot;hljs-built_in&quot;&gt;rotate&lt;/span&gt;(
    &lt;span class=&quot;hljs-attribute&quot;&gt;angle&lt;/span&gt;: _animation.value,
    &lt;span class=&quot;hljs-attribute&quot;&gt;child&lt;/span&gt;: child, &lt;span class=&quot;hljs-comment&quot;&gt;// ✅ 复用child，不重复构建&lt;/span&gt;
  ),
  &lt;span class=&quot;hljs-attribute&quot;&gt;child&lt;/span&gt;: const &lt;span class=&quot;hljs-built_in&quot;&gt;HeavyWidget&lt;/span&gt;(), &lt;span class=&quot;hljs-comment&quot;&gt;// 静态子组件&lt;/span&gt;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-2&quot;&gt;2、&lt;strong&gt;重绘区域隔离&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;用&lt;code&gt;RepaintBoundary&lt;/code&gt;包裹频繁重绘的组件（如游戏角色）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-less&quot; lang=&quot;less&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;RepaintBoundary&lt;/span&gt;(
  &lt;span class=&quot;hljs-attribute&quot;&gt;child&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;CustomPaint&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;painter&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;MyDynamicPainter&lt;/span&gt;()),
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-3&quot;&gt;3、&lt;strong&gt;避免在build()中创建对象&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-scss&quot; lang=&quot;scss&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// ❌ 错误：每次build都新建&lt;/span&gt;
Widget &lt;span class=&quot;hljs-built_in&quot;&gt;build&lt;/span&gt;() {
  final logger = &lt;span class=&quot;hljs-built_in&quot;&gt;Logger&lt;/span&gt;();
  return ...;
}

&lt;span class=&quot;hljs-comment&quot;&gt;// ✅ 正确：提前创建或使用const&lt;/span&gt;
static const _logger = &lt;span class=&quot;hljs-built_in&quot;&gt;Logger&lt;/span&gt;();
Widget &lt;span class=&quot;hljs-built_in&quot;&gt;build&lt;/span&gt;() =&amp;gt; ...;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-4&quot;&gt;4、&lt;strong&gt;避免不必要的布局计算&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;动态高度布局导致重复计算&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-less&quot; lang=&quot;less&quot;&gt;优化前：
&lt;span class=&quot;hljs-selector-tag&quot;&gt;Column&lt;/span&gt;(
  &lt;span class=&quot;hljs-attribute&quot;&gt;children&lt;/span&gt;: [
    const &lt;span class=&quot;hljs-built_in&quot;&gt;HeaderWidget&lt;/span&gt;(),
    &lt;span class=&quot;hljs-built_in&quot;&gt;ListView&lt;/span&gt;( &lt;span class=&quot;hljs-comment&quot;&gt;// ❌ ListView在Column中会引发布局冲突&lt;/span&gt;
      &lt;span class=&quot;hljs-attribute&quot;&gt;children&lt;/span&gt;: items.&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;((e) =&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;ItemWidget&lt;/span&gt;(e)).&lt;span class=&quot;hljs-built_in&quot;&gt;toList&lt;/span&gt;(),
    ),
  ],
)

优化后：
&lt;span class=&quot;hljs-selector-tag&quot;&gt;Column&lt;/span&gt;(
  &lt;span class=&quot;hljs-attribute&quot;&gt;children&lt;/span&gt;: [
    const &lt;span class=&quot;hljs-built_in&quot;&gt;HeaderWidget&lt;/span&gt;(),
    &lt;span class=&quot;hljs-built_in&quot;&gt;Expanded&lt;/span&gt;( &lt;span class=&quot;hljs-comment&quot;&gt;// ✅ 使用Expanded约束ListView高度&lt;/span&gt;
      &lt;span class=&quot;hljs-attribute&quot;&gt;child&lt;/span&gt;: ListView.&lt;span class=&quot;hljs-built_in&quot;&gt;builder&lt;/span&gt;(
        &lt;span class=&quot;hljs-attribute&quot;&gt;itemCount&lt;/span&gt;: items.length,
        &lt;span class=&quot;hljs-attribute&quot;&gt;itemBuilder&lt;/span&gt;: (ctx, i) =&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;ItemWidget&lt;/span&gt;(items[i]),
      ),
    ),
  ],
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-5&quot;&gt;5、&lt;strong&gt;拆分复杂Widget树&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;复杂页面导致单帧渲染时间过长&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-scss&quot; lang=&quot;scss&quot;&gt;优化前：
Widget &lt;span class=&quot;hljs-built_in&quot;&gt;build&lt;/span&gt;(BuildContext context) {
  return &lt;span class=&quot;hljs-built_in&quot;&gt;Scaffold&lt;/span&gt;(
    body: Column(
      children: [
        // &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;行嵌套布局...
      ],
    ),
  );
}

优化后：
Widget &lt;span class=&quot;hljs-built_in&quot;&gt;build&lt;/span&gt;(BuildContext context) {
  return &lt;span class=&quot;hljs-built_in&quot;&gt;Scaffold&lt;/span&gt;(
    body: Column(
      children: [
        const HeaderSection(),  &lt;span class=&quot;hljs-comment&quot;&gt;// 拆分为独立组件&lt;/span&gt;
        const &lt;span class=&quot;hljs-built_in&quot;&gt;_ContentSection&lt;/span&gt;(), &lt;span class=&quot;hljs-comment&quot;&gt;// 使用private组件&lt;/span&gt;
        &lt;span class=&quot;hljs-built_in&quot;&gt;_buildFooter&lt;/span&gt;(),          &lt;span class=&quot;hljs-comment&quot;&gt;// 提取方法&lt;/span&gt;
      ],
    ),
  );
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 拆分成独立的组件或方法&lt;/span&gt;
Widget &lt;span class=&quot;hljs-built_in&quot;&gt;_buildFooter&lt;/span&gt;() =&amp;gt; ... ;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-6&quot;&gt;&lt;strong&gt;6、减少&lt;code&gt;Opacity&lt;/code&gt;使用&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-less&quot; lang=&quot;less&quot;&gt;优化前
&lt;span class=&quot;hljs-selector-tag&quot;&gt;Opacity&lt;/span&gt;(
  &lt;span class=&quot;hljs-attribute&quot;&gt;opacity&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;,
  &lt;span class=&quot;hljs-attribute&quot;&gt;child&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;ComplexWidgetTree&lt;/span&gt;(), &lt;span class=&quot;hljs-comment&quot;&gt;// ❌ 整个子树都会参与混合计算&lt;/span&gt;
)

优化后：
&lt;span class=&quot;hljs-selector-tag&quot;&gt;Container&lt;/span&gt;(
  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: Colors.black.&lt;span class=&quot;hljs-built_in&quot;&gt;withOpacity&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;), &lt;span class=&quot;hljs-comment&quot;&gt;// ✅ 仅背景透明&lt;/span&gt;
  &lt;span class=&quot;hljs-attribute&quot;&gt;child&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;ComplexWidgetTree&lt;/span&gt;(),
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-7&quot;&gt;7、&lt;strong&gt;使用&lt;code&gt;ShaderMask&lt;/code&gt;替代复杂遮罩&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-less&quot; lang=&quot;less&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;ShaderMask&lt;/span&gt;(
  &lt;span class=&quot;hljs-attribute&quot;&gt;blendMode&lt;/span&gt;: BlendMode.modulate,
  &lt;span class=&quot;hljs-attribute&quot;&gt;shaderCallback&lt;/span&gt;: (Rect bounds) =&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;LinearGradient&lt;/span&gt;(
    &lt;span class=&quot;hljs-attribute&quot;&gt;colors&lt;/span&gt;: [Colors.red, Colors.blue],
  ).&lt;span class=&quot;hljs-built_in&quot;&gt;createShader&lt;/span&gt;(bounds),
  &lt;span class=&quot;hljs-attribute&quot;&gt;child&lt;/span&gt;: Image.&lt;span class=&quot;hljs-built_in&quot;&gt;network&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;...&#39;&lt;/span&gt;),
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-8&quot;&gt;&lt;strong&gt;8、动画性能优化&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;使用&lt;code&gt;AnimatedWidget&lt;/code&gt;替代&lt;code&gt;setState&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-scala&quot; lang=&quot;scala&quot;&gt;优化前：

&lt;span class=&quot;hljs-type&quot;&gt;AnimationController&lt;/span&gt; _controller;
&lt;span class=&quot;hljs-type&quot;&gt;Widget&lt;/span&gt; build() {
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Transform&lt;/span&gt;.rotate(
    angle: _controller.value,
    child: &lt;span class=&quot;hljs-type&quot;&gt;Button&lt;/span&gt;(
      onPressed: () =&amp;gt; setState(() {}), &lt;span class=&quot;hljs-comment&quot;&gt;// ❌ 触发整个页面重建&lt;/span&gt;
    ),
  );
}


优化后：

&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;_RotatingButton&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AnimatedWidget&lt;/span&gt; &lt;/span&gt;{
  const _RotatingButton({required &lt;span class=&quot;hljs-type&quot;&gt;Animation&lt;/span&gt;&amp;lt;double&amp;gt; animation})
      : &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;(listenable: animation);

  &lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;hljs-type&quot;&gt;Widget&lt;/span&gt; build(&lt;span class=&quot;hljs-type&quot;&gt;BuildContext&lt;/span&gt; context) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; animation = listenable as &lt;span class=&quot;hljs-type&quot;&gt;Animation&lt;/span&gt;&amp;lt;double&amp;gt;;
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Transform&lt;/span&gt;.rotate(
      angle: animation.value,
      child: const &lt;span class=&quot;hljs-type&quot;&gt;Button&lt;/span&gt;(),
    );
  }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 data-id=&quot;heading-9&quot;&gt;&lt;strong&gt;二、列表性能优化&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-10&quot;&gt;1、&lt;strong&gt;ListView.builder按需构建&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;长列表必须使用&lt;code&gt;ListView.builder&lt;/code&gt;，避免一次性构建所有子项：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-less&quot; lang=&quot;less&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;ListView&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.builder&lt;/span&gt;(
  &lt;span class=&quot;hljs-attribute&quot;&gt;itemCount&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;,
  &lt;span class=&quot;hljs-attribute&quot;&gt;itemBuilder&lt;/span&gt;: (ctx, i) =&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;ListTile&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Item $i&#39;&lt;/span&gt;)),
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-11&quot;&gt;2、&lt;strong&gt;保持滚动位置状态&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;AutomaticKeepAliveClientMixin&lt;/code&gt;保持Tab页状态：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-scala&quot; lang=&quot;scala&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;_TabPageState&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;State&amp;lt;TabPage&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AutomaticKeepAliveClientMixin&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;
  bool get wantKeepAlive =&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// ✅ 切换Tab不重新加载&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;// build方法...&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-12&quot;&gt;3、&lt;strong&gt;固定列表项高度&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;明确设置&lt;code&gt;itemExtent&lt;/code&gt;提升滚动流畅度：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-less&quot; lang=&quot;less&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;ListView&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.builder&lt;/span&gt;(
  &lt;span class=&quot;hljs-attribute&quot;&gt;itemExtent&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;// 每个列表项高度固定为80&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-13&quot;&gt;&lt;strong&gt;4、使用&lt;code&gt;Sliver&lt;/code&gt;实现高性能复杂列表&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-less&quot; lang=&quot;less&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;CustomScrollView&lt;/span&gt;(
  &lt;span class=&quot;hljs-attribute&quot;&gt;slivers&lt;/span&gt;: [
    &lt;span class=&quot;hljs-built_in&quot;&gt;SliverAppBar&lt;/span&gt;(...), &lt;span class=&quot;hljs-comment&quot;&gt;// 可折叠的AppBar&lt;/span&gt;
    &lt;span class=&quot;hljs-built_in&quot;&gt;SliverPersistentHeader&lt;/span&gt;(...), &lt;span class=&quot;hljs-comment&quot;&gt;// 固定Header&lt;/span&gt;
    &lt;span class=&quot;hljs-built_in&quot;&gt;SliverList&lt;/span&gt;(
      &lt;span class=&quot;hljs-attribute&quot;&gt;delegate&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;SliverChildBuilderDelegate&lt;/span&gt;(
        (ctx, i) =&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;ListItem&lt;/span&gt;(data[i]),
        &lt;span class=&quot;hljs-attribute&quot;&gt;childCount&lt;/span&gt;: data.length,
      ),
    ),
    &lt;span class=&quot;hljs-built_in&quot;&gt;SliverGrid&lt;/span&gt;(...), &lt;span class=&quot;hljs-comment&quot;&gt;// 混合网格布局&lt;/span&gt;
  ],
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 data-id=&quot;heading-14&quot;&gt;&lt;strong&gt;三、内存优化&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-15&quot;&gt;1、&lt;strong&gt;图片资源优化&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;cached_network_image&lt;/code&gt;缓存网络图片：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-less&quot; lang=&quot;less&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;CachedNetworkImage&lt;/span&gt;(
  &lt;span class=&quot;hljs-attribute&quot;&gt;imageUrl&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;https://example.com/image.jpg&#39;&lt;/span&gt;,
  &lt;span class=&quot;hljs-attribute&quot;&gt;placeholder&lt;/span&gt;: (ctx, url) =&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;CircularProgressIndicator&lt;/span&gt;(),
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;加载本地图片时指定尺寸：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-arduino&quot; lang=&quot;arduino&quot;&gt;Image.&lt;span class=&quot;hljs-built_in&quot;&gt;asset&lt;/span&gt;(
  &lt;span class=&quot;hljs-string&quot;&gt;&#39;assets/large_image.png&#39;&lt;/span&gt;,
  width: &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;,
  height: &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;// ✅ 避免解码原始大图&lt;/span&gt;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-16&quot;&gt;2、&lt;strong&gt;及时释放资源&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;dispose()&lt;/code&gt;中释放控制器、监听器&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-java&quot; lang=&quot;java&quot;&gt;late &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; ScrollController _controller;
&lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;dispose&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {
  _controller.dispose(); &lt;span class=&quot;hljs-comment&quot;&gt;// ✅ 防止内存泄漏&lt;/span&gt;
  &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;.dispose();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 data-id=&quot;heading-17&quot;&gt;&lt;strong&gt;四、启动优化&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-18&quot;&gt;&lt;strong&gt;1、延迟插件初始化&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;将非必要插件延迟到首帧后加载：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-csharp&quot; lang=&quot;csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt;&lt;/span&gt; {
  WidgetsFlutterBinding.ensureInitialized();
  runApp(MyApp());
  &lt;span class=&quot;hljs-comment&quot;&gt;// 首帧渲染后初始化&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; Future.delayed(Duration.zero);
  &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; ThirdPartyPlugin.&lt;span class=&quot;hljs-keyword&quot;&gt;init&lt;/span&gt;();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-19&quot;&gt;&lt;strong&gt;2、按需加载插件&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-csharp&quot; lang=&quot;csharp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 首页不使用相机功能，延迟加载&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;onProfilePageOpen&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt;&lt;/span&gt; {
  final cameraPlugin = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; CameraPlugin.load();
  &lt;span class=&quot;hljs-comment&quot;&gt;// 使用插件...&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-20&quot;&gt;&lt;strong&gt;3、Isolate处理耗时任务&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;compute&lt;/code&gt;函数执行密集计算：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-java&quot; lang=&quot;java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_processData&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; async {
  &lt;span class=&quot;hljs-type&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; await &lt;span class=&quot;hljs-title function_&quot;&gt;compute&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(heavyCalculation, data)&lt;/span&gt;;
  &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-21&quot;&gt;&lt;strong&gt;五、状态管理优化&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 data-id=&quot;heading-22&quot;&gt;&lt;strong&gt;1、局部刷新&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Provider中使用&lt;code&gt;Consumer&lt;/code&gt;或&lt;code&gt;Selector&lt;/code&gt;避免全局刷新：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Selector&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;AppState&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;&amp;gt;(
  &lt;span class=&quot;hljs-attr&quot;&gt;selector&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_, state&lt;/span&gt;) =&amp;gt;&lt;/span&gt; state.&lt;span class=&quot;hljs-property&quot;&gt;username&lt;/span&gt;,
  &lt;span class=&quot;hljs-attr&quot;&gt;builder&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_, username, __&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Text&lt;/span&gt;(username),
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-23&quot;&gt;&lt;strong&gt;2、防抖与节流&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;rxdart&lt;/code&gt;控制频繁触发的事件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-scss&quot; lang=&quot;scss&quot;&gt;searchInput&lt;span class=&quot;hljs-selector-class&quot;&gt;.onTextChanged&lt;/span&gt;
  &lt;span class=&quot;hljs-selector-class&quot;&gt;.debounceTime&lt;/span&gt;(Duration(milliseconds: &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;// 500ms内只取最后一次&lt;/span&gt;
  &lt;span class=&quot;hljs-selector-class&quot;&gt;.listen&lt;/span&gt;((text) =&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;fetchData&lt;/span&gt;(text));
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 data-id=&quot;heading-24&quot;&gt;六、&lt;strong&gt;工具使用技巧&lt;/strong&gt;&lt;/h2&gt;
&lt;h4 data-id=&quot;heading-25&quot;&gt;&lt;strong&gt;1、性能Overlay快速诊断&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ini&quot; lang=&quot;ini&quot;&gt;void main() {
  &lt;span class=&quot;hljs-attr&quot;&gt;debugProfileBuildsEnabled&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;; // 启用构建分析&lt;/span&gt;
  &lt;span class=&quot;hljs-attr&quot;&gt;debugProfilePaintsEnabled&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;; // 查看重绘区域&lt;/span&gt;
  runApp(MyApp())&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-26&quot;&gt;&lt;strong&gt;2、分步引擎初始化&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-scss&quot; lang=&quot;scss&quot;&gt;void &lt;span class=&quot;hljs-selector-tag&quot;&gt;main&lt;/span&gt;() {
  &lt;span class=&quot;hljs-built_in&quot;&gt;runApp&lt;/span&gt;(SplashScreen()); &lt;span class=&quot;hljs-comment&quot;&gt;// 极简启动屏&lt;/span&gt;
  
  Future&lt;span class=&quot;hljs-selector-class&quot;&gt;.wait&lt;/span&gt;([
    _warmupEngine(),
    &lt;span class=&quot;hljs-built_in&quot;&gt;_preloadCriticalData&lt;/span&gt;(),
  ])&lt;span class=&quot;hljs-selector-class&quot;&gt;.then&lt;/span&gt;((_) =&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;_enterMainApp&lt;/span&gt;());
}

Future&amp;lt;void&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;_warmupEngine&lt;/span&gt;() async {
  &lt;span class=&quot;hljs-comment&quot;&gt;// 后台初始化非必要引擎模块&lt;/span&gt;
  await Firebase&lt;span class=&quot;hljs-selector-class&quot;&gt;.initializeApp&lt;/span&gt;();
  await Hive&lt;span class=&quot;hljs-selector-class&quot;&gt;.initFlutter&lt;/span&gt;();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-27&quot;&gt;&lt;strong&gt;3、使用 &lt;code&gt;Dart Wasm&lt;/code&gt; 预编译&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-yaml&quot; lang=&quot;yaml&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# pubspec.yaml&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;flutter:&lt;/span&gt;
  &lt;span class=&quot;hljs-attr&quot;&gt;module:&lt;/span&gt;
    &lt;span class=&quot;hljs-attr&quot;&gt;web:&lt;/span&gt;
      &lt;span class=&quot;hljs-attr&quot;&gt;wasm:&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-bash&quot; lang=&quot;bash&quot;&gt;flutter build web --wasm &lt;span class=&quot;hljs-comment&quot;&gt;# 生成WebAssembly版本&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-28&quot;&gt;&lt;strong&gt;4、使用 &lt;code&gt;Impeller&lt;/code&gt; 渲染引擎&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-arduino&quot; lang=&quot;arduino&quot;&gt;flutter run --enable-impeller # 启用下一代渲染引擎
&lt;/code&gt;&lt;/pre&gt;</description><link>https://juejin.cn/post/7478246730586898466</link><guid isPermaLink="false">https://juejin.cn/post/7478246730586898466</guid><pubDate>Thu, 06 Mar 2025 03:52:29 GMT</pubDate><author>SunshineBrother</author><category>iOS</category><category>Flutter</category><category>Android</category></item><item><title>Xcode16默认不再支持iOS15以下系统真机调试</title><description>&lt;h3 data-id=&quot;heading-0&quot;&gt;一、自2025年4月起，所有上传至 App Store Connect 的App都必须使用Xcode16打包&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;自 2025 年 4 月起，所有上传至 App Store Connect 的 iOS 和 iPadOS App 都必须使用 iOS 18 SDK 来构建。&lt;br&gt;
来源：&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.apple.com%2Fcn%2Fios%2Fsubmit%2F&quot; target=&quot;_blank&quot; title=&quot;https://developer.apple.com/cn/ios/submit/&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;苹果官网&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;距离苹果强制升级Xcode16只有不到一个月的时间了，大家都升到Xcode16了吗？&lt;/p&gt;
&lt;h3 data-id=&quot;heading-1&quot;&gt;二、Xcode16默认支持的最低版本调整为iOS15&lt;/h3&gt;
&lt;p&gt;前阵子我升到Xcode16.2后发现，Xcode16直接把支持的最低系统版本干到iOS15了。&lt;/p&gt;
&lt;p&gt;最直观的感受就是，如果你在Xcode中设置系统版本低于iOS15，General面板直接给你显示空白。&lt;strong&gt;你仍然可以在BuildSetting中设置并生效，比如我设置iOS13.0，但 General 面板里始终会是空白。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/564e3fc42bc047548e123c0b60db67d6~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgQ29jb2FLaWVy:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742986797&amp;amp;x-signature=H7cWJyk1Wc7JnAmyhlwfvS2MZEg%3D&quot; alt=&quot;iShot_2025-03-05_18.05.23.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/c7358ecbc4814df082a6e70321ba543d~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgQ29jb2FLaWVy:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742986797&amp;amp;x-signature=QfMPX%2B4wTPa4UQkzkkhvfK4mCHw%3D&quot; alt=&quot;iShot_2025-03-05_18.05.06.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/c159a2335e0c4a0e86040e39f5d82161~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgQ29jb2FLaWVy:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742986797&amp;amp;x-signature=NX8yK4bBpOMCH8vhz1rR6T1xPhg%3D&quot; alt=&quot;图片.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h3 data-id=&quot;heading-2&quot;&gt;三、Xcode16默认不再支持iOS15以下系统真机调试，需要自己下载DeviceSupport文件&lt;/h3&gt;
&lt;p&gt;上面的问题倒还好，让人比较头疼的是&lt;strong&gt;Xcode16默认不再支持iOS15以下系统的真机调试&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;iOS15以下的设备连上Xcode调试会报错：&lt;strong&gt;“Could not locate device support files”&lt;/strong&gt;。“You may be able to resolve the issue by installing the latest version of Xcode from the Mac App Store or developer.apple.com.”&lt;br&gt;
&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/babe0c9200af4958b09a3a68602cc020~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgQ29jb2FLaWVy:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742986797&amp;amp;x-signature=CsaeaCR%2BLN3lDMqxnrpfWvvrsKk%3D&quot; alt=&quot;iShot_2025-03-05_17.55.05.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;报错的原因：&lt;/strong&gt;&lt;br&gt;
以前，当真机连上Xcode，Xcode会检测本地是有对应系统的支持文件，没有会自动帮你下载。由于Xcode16不再支持iOS15以下设备了，所以现在不会自动帮你下载iOS15以下的支持文件了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决办法：&lt;/strong&gt;&lt;br&gt;
很简单，自己手动下载DeviceSupport文件放到对应的目录就可以了：&lt;br&gt;
1、打开这个网站（&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Ffilsv%2FiOSDeviceSupport%3Ftab%3Dreadme-ov-file&quot; target=&quot;_blank&quot; title=&quot;https://github.com/filsv/iOSDeviceSupport?tab=readme-ov-file&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;github.com/filsv/iOSDe…&lt;/a&gt;）搜索你要下载的系统版本对应的DeviceSupport文件，比如 14.7.1.zip。&lt;br&gt;
2、大退关闭Xcode，断开连接在电脑上所有的真机设备。&lt;br&gt;
3、解压下载的压缩包（14.7.1.zip =&amp;gt; 14.7.1文件夹），将文件夹拷贝到下面这个目录，&lt;br&gt;
&lt;code&gt;/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport/&lt;/code&gt;  &lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/cc9fae6982a045d2b1bb4e7a8b1fea5a~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgQ29jb2FLaWVy:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742986797&amp;amp;x-signature=XdgKEXCVPLQuPSJM7e7ce2Ad1dM%3D&quot; alt=&quot;图片.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
4、重启Xcode，连上设备又可以愉快地调试啦！&lt;/p&gt;</description><link>https://juejin.cn/post/7478182398409703476</link><guid isPermaLink="false">https://juejin.cn/post/7478182398409703476</guid><pubDate>Wed, 05 Mar 2025 10:49:51 GMT</pubDate><author>CocoaKier</author><category>iOS</category><category>Xcode</category></item><item><title>iOS 新思路两个不同 App之间的通信</title><description>&lt;h2 data-id=&quot;heading-0&quot;&gt;常用通信方式总结&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-1&quot;&gt;Universal&amp;nbsp;Links、URL&amp;nbsp;Scheme&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Universal&amp;nbsp;Links：需要在服务器根目录下配置apple-app-site-association文件，服务器必须支持&amp;nbsp;https.&amp;nbsp;&amp;nbsp;例如：&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2F%25E8%2587%25AA%25E5%25B7%25B1%25E5%259F%259F%25E5%2590%258D.com%2F.well-known%2Fapple-app-site-association&quot; target=&quot;_blank&quot; title=&quot;https://%E8%87%AA%E5%B7%B1%E5%9F%9F%E5%90%8D.com/.well-known/apple-app-site-association&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;https://自己域名.com/.well-known/apple-app-site-association&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;URL&amp;nbsp;Scheme：需要在&amp;nbsp;Xcode&amp;nbsp;&amp;nbsp;info.plist&amp;nbsp;&amp;nbsp;配置好&amp;nbsp;Scheme&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-id=&quot;heading-2&quot;&gt;Keychain&amp;nbsp;钥匙串&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;只有&amp;nbsp;2&amp;nbsp;个&amp;nbsp;App&amp;nbsp;在同一个&amp;nbsp;Group&amp;nbsp;（同一个开发者账号），这样才能够共享钥匙串&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-id=&quot;heading-3&quot;&gt;UIPasteboard&amp;nbsp;粘贴板&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;主要痛点是，需要用户授权粘贴板，才能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-id=&quot;heading-4&quot;&gt;&amp;nbsp;XPC&amp;nbsp;进程之间&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;主要是针对&amp;nbsp;MacOs&amp;nbsp;,&amp;nbsp;iOS&amp;nbsp;和&amp;nbsp;iOS&amp;nbsp;之间还不可以，并且主要用于扩展通信&amp;nbsp;方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-id=&quot;heading-5&quot;&gt;同一台设备，根据设备维度唯一标识识别&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;根据设备维度生成&lt;/strong&gt;：例如设备更新时间、以及系统文件夹第一次创建日期/名字、系统更新时间、设备重启时间等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务器&lt;/strong&gt;：通过把生成的唯一标识上传到服务器上面、另一个&amp;nbsp;App&amp;nbsp;根据生成的标识去服务器匹配，能够匹配上就可以拉取相关的配置&lt;/p&gt;
&lt;h2 data-id=&quot;heading-6&quot;&gt;本地&amp;nbsp;Socket&amp;nbsp;通信&lt;/h2&gt;
&lt;p&gt;简单陈述原理：socket&amp;nbsp;通信原理（TCP&amp;nbsp;或者&amp;nbsp;UDP），一个作为服务端、一个作为客户端，服务端监听客户端链接状态,两者链接成功后，就可以互相发送消息。（如果想要详细了解&amp;nbsp;socket&amp;nbsp;原理，可以自行&amp;nbsp;deepseek&amp;nbsp;和&amp;nbsp;豆包&amp;nbsp;支持国产）&lt;/p&gt;
&lt;p&gt;废话不多说直接上代码&lt;/p&gt;
&lt;p&gt;采用&amp;nbsp;&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Frobbiehanson%2FCocoaAsyncSocket&quot; target=&quot;_blank&quot; title=&quot;https://github.com/robbiehanson/CocoaAsyncSocket&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;CocoaAsyncSocket&lt;/a&gt;&amp;nbsp;第三方库实现&amp;nbsp;socket&amp;nbsp;通信&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务端&amp;nbsp;Server代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-objective-c&quot; lang=&quot;objective-c&quot;&gt;@interface ViewController ()&amp;lt;GCDAsyncSocketDelegate&amp;gt;

@property (nonatomic, strong) GCDAsyncSocket *serverSocket;
@property (nonatomic, strong) NSMutableArray *clientSocket;
@property (nonatomic, strong) NSTimer *heartbeatTimer;
@property (nonatomic, strong) AVAudioPlayer *audioPlayer;
@property (nonatomic, assign) BOOL isBackground;
@property (nonatomic, strong) UITextView *msgTextView;
@property (nonatomic, strong) NSMutableString *muString;

@end


-(void)initSocket{
    //初始化
    self.serverSocket = [[GCDAsyncSocket alloc] initWithDelegate:self delegateQueue:dispatch_get_main_queue()];
    self.serverSocket.autoDisconnectOnClosedReadStream = YES;
    
    NSError *error = nil;
    if([self.serverSocket acceptOnPort:1111 error:&amp;amp;error]){
        // 启动心跳包定时器
        self.heartbeatTimer = [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(sendHeartbeat) userInfo:nil repeats:YES];
    }
    // 前后台通知
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(appDidEnterBackground) name:UIApplicationDidEnterBackgroundNotification object:nil];
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(appWillEnterForeground) name:UIApplicationWillEnterForegroundNotification object:nil];
}

#pragma mark GCDAsyncSocketDelegate

- (void)socket:(GCDAsyncSocket *)sock didConnectToUrl:(NSURL *)url{
    NSLog(@&quot;socket = %s&quot;,__FUNCTION__);
    NSData *data = [@&quot;connect sucess&quot; dataUsingEncoding:NSUTF8StringEncoding];
    [sock writeData:data withTimeout:-1 tag:0];
}

-(void)socket:(GCDAsyncSocket *)sock didConnectToHost:(NSString *)host port:(uint16_t)port{
    NSLog(@&quot;socket = %s&quot;,__FUNCTION__);
    
    NSData *data = [@&quot;connect sucess___&quot; dataUsingEncoding:NSUTF8StringEncoding];
    [sock readDataWithTimeout:-1 tag:0];
}


-(void)socket:(GCDAsyncSocket *)sock didAcceptNewSocket:(GCDAsyncSocket *)newSocket{
    NSLog(@&quot;socket = %s&quot;,__FUNCTION__);
    // 注意注意，这里要保存当前链接的客户端 socket ,链接成功之后立刻回断开
    [self.clientSocket addObject:newSocket];
    newSocket.delegate = self;
    //newSocket为客户端的Socket。这里读取数据

    // 这里timeout -1 可能表示无超时限制
    [newSocket readDataWithTimeout:-1 tag:100];

    ///刚刚链接的时候，服务器已经进入到后台了，开始后台任务，保证 app 存活
    if (_isBackground) {
        [self startBackgroundTask];
    }
}

// 读取数据
- (void)socket:(GCDAsyncSocket *)sock didReadData:(NSData *)data withTag:(long)tag{
    NSLog(@&quot;socket = %s&quot;,__FUNCTION__);
    //接收到数据
    NSString *receiverStr = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
    
    receiverStr = [receiverStr stringByReplacingOccurrencesOfString:@&quot;\r&quot; withString:@&quot;&quot;];
    receiverStr = [receiverStr stringByReplacingOccurrencesOfString:@&quot;\n&quot; withString:@&quot;&quot;];
    
    [_muString appendString:receiverStr];
    [_muString appendString:@&quot;\n&quot;];
    
    self.msgTextView.text = _muString;
    [sock readDataWithTimeout:-1 tag:0];
    NSLog(@&quot;socket_reivece = %@&quot;,receiverStr);
}


#pragma mark 服务器写数据给客户端
- (void)socket:(GCDAsyncSocket *)sock didWriteDataWithTag:(long)tag{
    
    NSLog(@&quot;socket = %s&quot;,__FUNCTION__);
    
    [sock readDataWithTimeout:-1 tag:0];
}

- (void)socketDidDisconnect:(GCDAsyncSocket *)sock withError:(NSError *)err{
    NSLog(@&quot;socket = %s&quot;,__FUNCTION__);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;客户端代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-objective-c&quot; lang=&quot;objective-c&quot;&gt;@interface ViewController ()&amp;lt;GCDAsyncSocketDelegate&amp;gt;

@property (nonatomic, strong) GCDAsyncSocket *listenSocket;
@property (nonatomic, strong) NSMutableArray *clientSocket;
@property (nonatomic, strong) UITextView *msgTextView;
@property (nonatomic, strong) NSMutableString *muString;
@end

-(void)initSocket{
    // 客户端初始化
    self.listenSocket =  [[GCDAsyncSocket alloc] initWithDelegate:self delegateQueue:dispatch_get_main_queue()];
}

/// 开始链接127.0.0.1 端口 1111 服务器
-(void)start{ 
    /// 使用本地 127.0.0.1 作为 host , 端口 1111，根据自己情况修改
    NSError *error = nil;
    [self.listenSocket connectToHost:@&quot;127.0.0.1&quot; onPort:1111 error:&amp;amp;error];
    NSLog(@&quot;error = %@&quot;,error);
    [self.listenSocket readDataWithTimeout:-1 tag:0];
}

- (void)sendHeartbeatResponse:(GCDAsyncSocket *)socket {
    NSString *responseMessage = @&quot;HEARTBEAT_ACK&quot;;
    NSData *data = [responseMessage dataUsingEncoding:NSUTF8StringEncoding];
    [socket writeData:data withTimeout:-1 tag:0];
    NSLog(@&quot;发送心跳回应&quot;);
}

#pragma mark - GCDAsyncSocketDelegate

- (void)socket:(GCDAsyncSocket *)sock didConnectToUrl:(NSURL *)url{
    NSLog(@&quot;socket = %s&quot;,__FUNCTION__);
    NSData *data = [@&quot;connect sucess&quot; dataUsingEncoding:NSUTF8StringEncoding];
    [sock writeData:data withTimeout:-1 tag:0];
}

-(void)socket:(GCDAsyncSocket *)sock didConnectToHost:(NSString *)host port:(uint16_t)port{
    NSLog(@&quot;socket = %s&quot;,__FUNCTION__);
    
    NSData *data = [@&quot;connect sucess___&quot; dataUsingEncoding:NSUTF8StringEncoding];
    [sock readDataWithTimeout:-1 tag:0];
}

- (void)socket:(GCDAsyncSocket *)sock didReadData:(NSData *)data withTag:(long)tag{
    NSLog(@&quot;socket = %s&quot;,__FUNCTION__);
    
    //接收到数据
    NSString *receiverStr = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
    if ([receiverStr containsString:@&quot;HEARTBEAT&quot;]) {
        // 收到心跳包，进行回应
        [self sendHeartbeatResponse:sock];
    }
    
    receiverStr = [receiverStr stringByReplacingOccurrencesOfString:@&quot;\r&quot; withString:@&quot;&quot;];
    receiverStr = [receiverStr stringByReplacingOccurrencesOfString:@&quot;\n&quot; withString:@&quot;&quot;];
    
    [_muString appendString:receiverStr];
    [_muString appendString:@&quot;\n&quot;];
    
    self.msgTextView.text = _muString;
    
    [sock readDataWithTimeout:-1 tag:0];

    NSLog(@&quot;socket——receive = %@ -- %ld&quot;,receiverStr, tag);
}

-(void)socket:(GCDAsyncSocket *)sock didWriteDataWithTag:(long)tag{
    NSLog(@&quot;socket = %s&quot;,__FUNCTION__);
}

-(void)socketDidDisconnect:(GCDAsyncSocket *)sock withError:(NSError *)err{
    NSLog(@&quot;socket = %s&quot;,__FUNCTION__);
}

- (NSMutableArray *)clientSocket{
    if (!_clientSocket) {
        _clientSocket = [NSMutableArray new];
    }
    return _clientSocket;
}

- (UITextView *)msgTextView{
    if (_msgTextView == nil) {
        _msgTextView = [[UITextView alloc] init];
        _msgTextView.frame = CGRectMake(10, [UIScreen mainScreen].bounds.size.height - 200, [UIScreen mainScreen].bounds.size.width - 20, 200);
    }
    return _msgTextView;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/c3a03fbd3aeb4a2b835e4a99e7d4ed75~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZyG6KeJ5aaZ5b-D:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742796643&amp;amp;x-signature=R2at6w2OMJdAqQbkuqCTqEWzsp0%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h2 data-id=&quot;heading-7&quot;&gt;遇见问题及解决&lt;/h2&gt;
&lt;p&gt;遇见问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;服务端进入后台程序就暂停运行&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当客户端给服务器发送数据的时候，服务器是不能够接受到数据的，只有当服气器从后台回到前台的时候才能够正常接收到，并且会一次性把之前没有接受到的信息接受回来&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;strong&gt;开启后台任务，只能够维持&amp;nbsp;30s&amp;nbsp;的活跃状态（测试机&amp;nbsp;iPhone&amp;nbsp;XS）&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-objective-c&quot; lang=&quot;objective-c&quot;&gt;- (void)applicationDidEnterBackground:(UIApplication *)application {  
    [self startBackgroundTask];
}

- (void)applicationDidBecomeActive:(UIApplication *)application {
    [self stopBackgroundTask];
}

/// 在 iPhone xs 测试在 3
- (void)startBackgroundTask {
    if (self.backgroundTask == UIBackgroundTaskInvalid) {
        NSLog(@&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Start background upload task =============&quot;);
        _startTime = CACurrentMediaTime();
        self.backgroundTask = [[UIApplication sharedApplication] beginBackgroundTaskWithExpirationHandler:^{
          // 如果在系统规定时间内任务还没有完成，在时间到之前会调用到这个方法，一般是10分钟
            NSLog(@&quot;taskExpiration = %f&quot;,CACurrentMediaTime() - self-&amp;gt;_startTime);
          [self stopBackgroundTask];
        }];
    }
}

- (void)stopBackgroundTask {
    if (self.backgroundTask != UIBackgroundTaskInvalid) {
        NSLog(@&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Stop background upload task =============&quot;);
        [[UIApplication sharedApplication] endBackgroundTask:self.backgroundTask];
    }
    self.backgroundTask = UIBackgroundTaskInvalid;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;&lt;strong&gt;解决办法，开始后台播放模式&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;xcode&amp;nbsp;开启后台音频播放模式&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/cf5e363560d744f48f06d3673bb34bcc~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZyG6KeJ5aaZ5b-D:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742796643&amp;amp;x-signature=bH5Y1Su3VuXdeARs5wMRQfqKDE8%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;在进入后台的时候，启动一个没有任何声音的音频播放&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-objective-c&quot; lang=&quot;objective-c&quot;&gt;- (void)setupAudioSession {
    AVAudioSession *audioSession = [AVAudioSession sharedInstance];
    NSError *error;
    if ([audioSession setCategory:AVAudioSessionCategoryPlayback  withOptions:AVAudioSessionCategoryOptionMixWithOthers error:&amp;amp;error]) {
        if ([audioSession setActive:YES error:&amp;amp;error]) {
            NSLog(@&quot;音频会话设置成功&quot;);
        } else {
            NSLog(@&quot;激活音频会话出错: %@&quot;, error.localizedDescription);
        }
    } else {
        NSLog(@&quot;设置音频会话类别出错: %@&quot;, error.localizedDescription);
    }
}

- (void)playAudio {
    NSURL *audioURL = [[NSBundle mainBundle] URLForResource:@&quot;test&quot; withExtension:@&quot;mp3&quot;];
    NSLog(@&quot;audioURL = %@&quot;,audioURL);
    if (!audioURL) {
        NSLog(@&quot;未找到音频文件&quot;);
        return;
    }
    NSError *error;
    self.audioPlayer = [[AVAudioPlayer alloc] initWithContentsOfURL:audioURL error:&amp;amp;error];
    if (error) {
        NSLog(@&quot;音频播放出错: %@&quot;, error.localizedDescription);
        return;
    }
    self.audioPlayer.numberOfLoops = -1; // 设置为 -1 表示无限循环播放
    [self.audioPlayer play];
    NSLog(@&quot;播放音频------&quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 data-id=&quot;heading-8&quot;&gt;注意&amp;nbsp;Apple&amp;nbsp;审核机制限制&lt;/h2&gt;
&lt;p&gt;有用开启了后台相关任务，例如后台播放声音，审核会根据你当前&amp;nbsp;App所在的领域，是否满足后台播放权限，例如音乐类、说书类、视频类、等符合后台播放模式。这些都是满足。其他领域根据自己的实际情况申请。&lt;/p&gt;</description><link>https://juejin.cn/post/7477188513415593995</link><guid isPermaLink="false">https://juejin.cn/post/7477188513415593995</guid><pubDate>Mon, 03 Mar 2025 05:58:26 GMT</pubDate><author>圆觉妙心</author><category>iOS</category><category>APP</category></item><item><title>不要升级，Flutter Debug 在 iOS 18.4 beta 无法运行，提示 mprotect failed: Permission denied</title><description>&lt;p&gt;近期如果有开发者的 iOS 真机升级到 18.4 beta，大概率会发现在 debug 运行时会有 &lt;code&gt;Permission denied&lt;/code&gt; 的相关错误提示，其实从 log 可以很直观看出来，就是 Dart VM 在初始化时，对内核文件「解释运行（JIT）」时出现权限不足的问题：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ruby&quot; lang=&quot;ruby&quot;&gt;../../../flutter/third_party/dart/runtime/vm/virtual_memory_posix.&lt;span class=&quot;hljs-symbol&quot;&gt;cc:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;428&lt;/span&gt;: &lt;span class=&quot;hljs-symbol&quot;&gt;error:&lt;/span&gt; mprotect &lt;span class=&quot;hljs-symbol&quot;&gt;failed:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Permission&lt;/span&gt; denied)
version=&lt;span class=&quot;hljs-number&quot;&gt;3.6&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; (stable) (&lt;span class=&quot;hljs-title class_&quot;&gt;Thu&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dec&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2024&lt;/span&gt; -0800) on &lt;span class=&quot;hljs-string&quot;&gt;&quot;ios_arm64&quot;&lt;/span&gt;
pid=&lt;span class=&quot;hljs-number&quot;&gt;3252&lt;/span&gt;, thread=&lt;span class=&quot;hljs-number&quot;&gt;259&lt;/span&gt;, isolate_group=vm-isolate(&lt;span class=&quot;hljs-number&quot;&gt;0x107205400&lt;/span&gt;), isolate=vm-isolate(&lt;span class=&quot;hljs-number&quot;&gt;0x107369000&lt;/span&gt;)
os=ios, arch=arm64, comp=no, sim=no
isolate_instructions=108e375a0, vm_instructions=108e375a0
fp=16bb19560, sp=16bb19540, pc=&lt;span class=&quot;hljs-number&quot;&gt;109889864&lt;/span&gt;
  pc &lt;span class=&quot;hljs-number&quot;&gt;0x0000000109889864&lt;/span&gt; fp &lt;span class=&quot;hljs-number&quot;&gt;0x000000016bb19560&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dart&lt;/span&gt;_DumpNativeStackTrace+&lt;span class=&quot;hljs-number&quot;&gt;0x18&lt;/span&gt;
  pc &lt;span class=&quot;hljs-number&quot;&gt;0x000000010943aeb8&lt;/span&gt; fp &lt;span class=&quot;hljs-number&quot;&gt;0x000000016bb19580&lt;/span&gt; dart::&lt;span class=&quot;hljs-title class_&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:Fail&lt;/span&gt;(char const*, ...) const+&lt;span class=&quot;hljs-number&quot;&gt;0x30&lt;/span&gt;
  pc &lt;span class=&quot;hljs-number&quot;&gt;0x0000000109536100&lt;/span&gt; fp &lt;span class=&quot;hljs-number&quot;&gt;0x000000016bb19a30&lt;/span&gt; dart::&lt;span class=&quot;hljs-title class_&quot;&gt;Code&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:FinalizeCode&lt;/span&gt;(dart::&lt;span class=&quot;hljs-title class_&quot;&gt;FlowGraphCompiler&lt;/span&gt;*, dart::compiler::&lt;span class=&quot;hljs-title class_&quot;&gt;Assembler&lt;/span&gt;*, dart::&lt;span class=&quot;hljs-title class_&quot;&gt;Code&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:PoolAttachment&lt;/span&gt;, bool, dart::&lt;span class=&quot;hljs-title class_&quot;&gt;CodeStatistics&lt;/span&gt;*)+&lt;span class=&quot;hljs-number&quot;&gt;0x82c&lt;/span&gt;
  pc &lt;span class=&quot;hljs-number&quot;&gt;0x00000001095f51c8&lt;/span&gt; fp &lt;span class=&quot;hljs-number&quot;&gt;0x000000016bb1a040&lt;/span&gt; dart::&lt;span class=&quot;hljs-title class_&quot;&gt;StubCode&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:Init&lt;/span&gt;()+&lt;span class=&quot;hljs-number&quot;&gt;0x31c&lt;/span&gt;
  pc &lt;span class=&quot;hljs-number&quot;&gt;0x0000000109485c30&lt;/span&gt; fp &lt;span class=&quot;hljs-number&quot;&gt;0x000000016bb1ab00&lt;/span&gt; dart::&lt;span class=&quot;hljs-title class_&quot;&gt;Dart&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:DartInit&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Dart&lt;/span&gt;_InitializeParams const*)+&lt;span class=&quot;hljs-number&quot;&gt;0x2a9c&lt;/span&gt;
  pc &lt;span class=&quot;hljs-number&quot;&gt;0x0000000109870310&lt;/span&gt; fp &lt;span class=&quot;hljs-number&quot;&gt;0x000000016bb1ab20&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dart&lt;/span&gt;_Initialize+&lt;span class=&quot;hljs-number&quot;&gt;0x3c&lt;/span&gt;
  pc &lt;span class=&quot;hljs-number&quot;&gt;0x0000000108f1aaf4&lt;/span&gt; fp &lt;span class=&quot;hljs-number&quot;&gt;0x000000016bb1b0f0&lt;/span&gt; flutter::&lt;span class=&quot;hljs-title class_&quot;&gt;Dart&lt;/span&gt;VM::&lt;span class=&quot;hljs-title class_&quot;&gt;Create&lt;/span&gt;(flutter::&lt;span class=&quot;hljs-title class_&quot;&gt;Settings&lt;/span&gt; const&amp;amp;, fml::&lt;span class=&quot;hljs-title class_&quot;&gt;RefPtr&lt;/span&gt;&amp;lt;flutter::&lt;span class=&quot;hljs-title class_&quot;&gt;DartSnapshot&lt;/span&gt; const&amp;gt;, fml::&lt;span class=&quot;hljs-title class_&quot;&gt;RefPtr&lt;/span&gt;&amp;lt;flutter::&lt;span class=&quot;hljs-title class_&quot;&gt;DartSnapshot&lt;/span&gt; const&amp;gt;, std::&lt;span class=&quot;hljs-symbol&quot;&gt;_fl:&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:shared_ptr&amp;lt;flutter&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:IsolateNameServer&amp;gt;&lt;/span&gt;)+&lt;span class=&quot;hljs-number&quot;&gt;0x1d60&lt;/span&gt;
  pc &lt;span class=&quot;hljs-number&quot;&gt;0x00000001093f17dc&lt;/span&gt; fp &lt;span class=&quot;hljs-number&quot;&gt;0x000000016bb1b850&lt;/span&gt; flutter::&lt;span class=&quot;hljs-title class_&quot;&gt;Shell&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:Create&lt;/span&gt;(flutter::&lt;span class=&quot;hljs-title class_&quot;&gt;PlatformData&lt;/span&gt; const&amp;amp;, flutter::&lt;span class=&quot;hljs-title class_&quot;&gt;TaskRunners&lt;/span&gt; const&amp;amp;, flutter::&lt;span class=&quot;hljs-title class_&quot;&gt;Settings&lt;/span&gt;, std::&lt;span class=&quot;hljs-symbol&quot;&gt;_fl:&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:function&amp;lt;std&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:_fl&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:unique_ptr&amp;lt;flutter&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:PlatformView&lt;/span&gt;, std::&lt;span class=&quot;hljs-symbol&quot;&gt;_fl:&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:default_delete&amp;lt;flutter&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:PlatformView&amp;gt;&amp;gt;&lt;/span&gt; (flutter::&lt;span class=&quot;hljs-title class_&quot;&gt;Shell&lt;/span&gt;&amp;amp;)&amp;gt; const&amp;amp;, std::&lt;span class=&quot;hljs-symbol&quot;&gt;_fl:&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:function&amp;lt;std&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:_fl&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:unique_ptr&amp;lt;flutter&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:Rasterizer&lt;/span&gt;, std::&lt;span class=&quot;hljs-symbol&quot;&gt;_fl:&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:default_delete&amp;lt;flutter&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:Rasterizer&amp;gt;&amp;gt;&lt;/span&gt; (flutter::&lt;span class=&quot;hljs-title class_&quot;&gt;Shell&lt;/span&gt;&amp;amp;)&amp;gt; const&amp;amp;, bool)+&lt;span class=&quot;hljs-number&quot;&gt;0x310&lt;/span&gt;
  pc &lt;span class=&quot;hljs-number&quot;&gt;0x0000000108e3b060&lt;/span&gt; fp &lt;span class=&quot;hljs-number&quot;&gt;0x000000016bb1c5c0&lt;/span&gt; -[&lt;span class=&quot;hljs-title class_&quot;&gt;FlutterEngine&lt;/span&gt; &lt;span class=&quot;hljs-symbol&quot;&gt;createShell:&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;libraryURI:&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;initialRoute:&lt;/span&gt;]+&lt;span class=&quot;hljs-number&quot;&gt;0x934&lt;/span&gt;
  pc &lt;span class=&quot;hljs-number&quot;&gt;0x0000000108e42c4c&lt;/span&gt; fp &lt;span class=&quot;hljs-number&quot;&gt;0x000000016bb1c630&lt;/span&gt; -[&lt;span class=&quot;hljs-title class_&quot;&gt;FlutterViewController&lt;/span&gt; &lt;span class=&quot;hljs-symbol&quot;&gt;sharedSetupWithProject:&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;initialRoute:&lt;/span&gt;]+&lt;span class=&quot;hljs-number&quot;&gt;0x1cc&lt;/span&gt;
  pc &lt;span class=&quot;hljs-number&quot;&gt;0x0000000108e42a58&lt;/span&gt; fp &lt;span class=&quot;hljs-number&quot;&gt;0x000000016bb1c660&lt;/span&gt; -[&lt;span class=&quot;hljs-title class_&quot;&gt;FlutterViewController&lt;/span&gt; awakeFromNib]+&lt;span class=&quot;hljs-number&quot;&gt;0x58&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;具体原理就是在于：&lt;strong&gt;从目前 iOS 18.4 beta 上看，iOS 加强了对应用运行时修改内存权限的限制，也就是上面出现 &lt;code&gt;mprotect failed: 13 (Permission denied) &lt;/code&gt;的原因&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mprotect 全称是 &quot;memory protect&quot; ，可以用于修改内存页的保护属性，让 App 可以动态调整某块内存的访问权限，例如将 RX 只读执行权限切换为 RW 可读写权限。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/96a053174d66498f90562016452818b2~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5oGL54yrZGXlsI_pg60=:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742894379&amp;amp;x-signature=lS0iiykNi6ZbJ8QeL7i31KO6qcY%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;而为什么 Flutter 在 Debug 时需要 mprotect ？其实这就要说到 Dart VM ，虽然在 Debug 模式下 Dart VM 是通过 JIT 模式解释执行的，但是&lt;strong&gt;从 Dart 2.0 之后就不再支持直接从源码运行&lt;/strong&gt;，对于 Dart 代码现在会统一编译成一种「预处理」形式的&lt;strong&gt;二进制 dill 文件&lt;/strong&gt;，我们一般称它会 Kernel AST 文件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/8191aa10466e4745b8a5d1e84a2fbe73~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5oGL54yrZGXlsI_pg60=:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742894379&amp;amp;x-signature=mlrHkraRn8Nyb0aqclbXeZyeeJI%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;也就是如今在 Dart 里，就算你是 JIT 运行，那么你也是跑着一个二进制的 Kernel dill&lt;/strong&gt; ，只是 Kernel AST 不包含解析和优化：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简单说，它仅仅是对源码进行了二进制加工转化， 让 Dart 代码从高级语法转换为统一且平台无关的中间格式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以 Flutter 在 debug 运行时， JIT 运行的是一个&lt;strong&gt;未签名的二进制文件&lt;/strong&gt;，并且需要直接 hotload ，也就是需要 Dart VM 在运行时根据 Kernel 二进制文件生成机械码，并且在可以接受 hotload 的热更新，所以它是通过 VM 来“解释”和“生成“，所以它会需要 mprotect 的系统调用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;比如上面的 StubCode 相关部分，在当前的 kernel JIT 模式下就极度依赖 VM 运行时的动态生成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然，这个过程依赖于 &lt;code&gt;get-task-allow &lt;/code&gt;，&lt;code&gt;get-task-allow &lt;/code&gt;可以允许其他进程 （如调试器） 附加到当前 App 上，让额外的进程获取到当前应用的任务端口，从而让它们可以执行诸如在内存上写入和读取内容之类的行为，最终达到 hotload 的目的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;那为什么在 release/profile 就不会有问题呢？很简单，代码已经被完全打包成机械码，并且需要生成的代码都包括在 snapshot 内，所以并不需要上述这些“魔法加持”&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;那么回过头来，从 iOS 18.4 开始， 系统加强了对应用运行时修改内存权限的限制，具体来说就是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;系统不再允许未经代码签名的二进制文件通过 JIT 编译直接执行，之前可以是因为这是一个“安全漏洞”，因为之前的机制允许开发者在真机上绕过某些签名要求&lt;/strong&gt;，也就是 iOS 18.4 的新安全策略禁止了这种未经签名的动态代码生成支持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么到这里你应该大概了解了问题的原因，目前 Flutter 官方表示：&lt;strong&gt;在他们热修复此问题之前，尽可能先请不要升级到 iOS 18.4 beta&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;而目前官方修复的思路主要大概是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 Flutter debug 构建时使用解释代码支持&lt;/li&gt;
&lt;li&gt;在解释代码下支持 &lt;code&gt;dart：ffi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解决 debug 解释字节码可能带来的性能下降问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而目前暂时评估的方向有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加 simarm64（Simulator for ARM64）配置支持，让 Dart VM 可以解释生成的代码&lt;/li&gt;
&lt;li&gt;恢复 Dart 字节码运行&lt;/li&gt;
&lt;li&gt;混合模式执行，其中 App 通过 AOT/JIT 签名编译，并且仅解释修改后的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实这里的第三点「混合模式执行」很有趣，因为这是 Flutter 热更新框架 shorebird 在 iOS 上目前的热更新方案：&lt;strong&gt;App 整体通过 AOT 运行，只有热更新 patch 存在的时候，针对该部分进行解释执行&lt;/strong&gt; ，也就是 shorebird 针对 Dart VM 自己“魔改”并“插入”了一个解释器，所以可以看到 shorebird 的 Eric (Flutter 前创始人) 针对和这个也和 Dart/Flutter 团队进行了密切的沟通：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/a63853fd1bd649b28336699a3b0c0b0a~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5oGL54yrZGXlsI_pg60=:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742894379&amp;amp;x-signature=ZRvbdrMvB%2FkLjX2WzzKcPoF2wcQ%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;事实上，Eric 对于 Dart VM 这部分工作还是很“担心的”，毕竟 shorebird 作为分支方，这种修改合并无疑会给他们带来许多工作量，而如果 Dart 团队的方案能尽可能贴近 shorebird ，那就最好不过了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/70e3e4e47cb849b6904a14f8535c611e~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5oGL54yrZGXlsI_pg60=:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742894379&amp;amp;x-signature=jPz8I84pGL%2BafL62sN2dlmOGWTg%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;目前来说，好消息在于，只要你的真机不升级到 iOS 18.4 beta ，那么就不会有影响，而 Flutter/Dart 团队大概率会在 iOS 18.4 正式发布前修复这个问题，毕竟方向都有了。&lt;/p&gt;
&lt;p&gt;当然，这也体现了“利用漏洞”完成需求的可靠性很低，因为你不知道哪天平台就把后门关闭了。&lt;/p&gt;
&lt;p&gt;----------- 2025-03-4 -----------&lt;/p&gt;
&lt;p&gt;6666，iOS 18 beta2 该“漏洞”又可以正常使用了，Flutter 的紧急调整从 P0 改为 P2&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/e0220d56eacd440cbf6412f7a613115d~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5oGL54yrZGXlsI_pg60=:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742894379&amp;amp;x-signature=PqfSQhiaBCW0ctNpkxYLyQvWPJg%3D&quot; alt=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;</description><link>https://juejin.cn/post/7476743827202736143</link><guid isPermaLink="false">https://juejin.cn/post/7476743827202736143</guid><pubDate>Sun, 02 Mar 2025 07:06:44 GMT</pubDate><author>恋猫de小郭</author><category>iOS</category><category>前端</category><category>Flutter</category><category>Android</category></item><item><title>哦豁，该来的还是来了。等等党该升级Xcode了！</title><description>&lt;h3 data-id=&quot;heading-0&quot;&gt;序言&lt;/h3&gt;
&lt;p&gt;一年一度的&lt;code&gt;Xcode升级&lt;/code&gt;又到了，一线开发的小伙伴如果电脑系统不能顺利升级。那么恭喜你，有正当的理由可以向公司申请更换设备咯~&lt;/p&gt;
&lt;h3 data-id=&quot;heading-1&quot;&gt;苹果原文&lt;/h3&gt;
&lt;p&gt;SDK版本问题。这个应用程序是用iOS 17.5 SDK构建的。&lt;/p&gt;
&lt;p&gt;从2025年4月24日开始，所有iOS和iPadOS应用程序都&lt;code&gt;必须被构建iOS 18 SDK或更高版本&lt;/code&gt;，包含在&lt;code&gt;Xcode 16或更高版本&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;以便上传到App Store Connect的提交或发布。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-sql&quot; lang=&quot;sql&quot;&gt;SDK version issue. This app was built &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; the iOs &lt;span class=&quot;hljs-number&quot;&gt;17.5&lt;/span&gt; SDK. 
Starting April &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2025&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt; iOS &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; iPadOS apps must be built 
&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; the iOs &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt; SDK &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; later, included &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; Xcode &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; later, 
&lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; beuploaded &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; App Store &lt;span class=&quot;hljs-keyword&quot;&gt;Connect&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; submitted 
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; distribution.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所以，还没有升级或者适配Xcode16相关的小伙伴可以开始动身了，不然可能会影响开发进度。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;遵守规则，方得长治久安&lt;/code&gt;，最后祝大家大吉大利，今晚过审！&lt;/p&gt;</description><link>https://juejin.cn/post/7476270025129787403</link><guid isPermaLink="false">https://juejin.cn/post/7476270025129787403</guid><pubDate>Fri, 28 Feb 2025 07:48:44 GMT</pubDate><author>iOS阿玮</author><category>iOS</category><category>前端</category><category>Apple</category></item><item><title>Flutter dio 手把手教你封装一个实用网络工具</title><description>&lt;p&gt;&lt;img src=&quot;https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/3b524788f99b4aacbae349a7f14bb543~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU3Vuc2hpbmVCcm90aGVy:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742436467&amp;amp;x-signature=1fwnoxoqhpcUgJ8nQgDdR%2F51Eeg%3D&quot; alt=&quot;未命名文件&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FSunshineBrother%2Fflutter-tool&quot; target=&quot;_blank&quot; title=&quot;https://github.com/SunshineBrother/flutter-tool&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;代码github地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现功能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、get、post请求&lt;/li&gt;
&lt;li&gt;2、自定义RequestOptions&lt;/li&gt;
&lt;li&gt;3、dio请求管理队列，用于统一管理请求&lt;/li&gt;
&lt;li&gt;4、HttpClient链接管理，用于获取解析DNS时间、TCP连接开始时间、SSL握手开始时间（如果是HTTPS）、首包时间&lt;/li&gt;
&lt;li&gt;5、json转model&lt;/li&gt;
&lt;li&gt;6、缓存管理&lt;/li&gt;
&lt;li&gt;7、日志管理拦截器&lt;/li&gt;
&lt;li&gt;8、数据转换管理拦截器&lt;/li&gt;
&lt;li&gt;9、loading拦截器&lt;/li&gt;
&lt;li&gt;10、token续租拦截器&lt;/li&gt;
&lt;li&gt;11、错误处理拦截器&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 data-id=&quot;heading-0&quot;&gt;1、基础使用&lt;/h2&gt;
&lt;p&gt;在 Flutter 中，&lt;code&gt;dio&lt;/code&gt; 是一个强大的 HTTP 客户端，用于发送各种网络请求，如 GET、POST、PUT、DELETE 等。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;pubspec.yaml&lt;/code&gt; 文件中添加 &lt;code&gt;dio&lt;/code&gt; 依赖：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-yaml&quot; lang=&quot;yaml&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;dependencies:&lt;/span&gt;
  &lt;span class=&quot;hljs-attr&quot;&gt;dio:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;^5.3.2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 data-id=&quot;heading-1&quot;&gt;GET 请求&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-dart&quot; lang=&quot;dart&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;package:dio/dio.dart&#39;&lt;/span&gt;;

&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; fetchData() &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 创建 Dio 实例&lt;/span&gt;
    Dio dio = Dio();
    &lt;span class=&quot;hljs-comment&quot;&gt;// 发送 GET 请求&lt;/span&gt;
    Response response = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; dio.&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;https://jsonplaceholder.typicode.com/posts/1&#39;&lt;/span&gt;);
    &lt;span class=&quot;hljs-comment&quot;&gt;// 打印响应数据&lt;/span&gt;
    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(response.data);
  } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 打印错误信息&lt;/span&gt;
    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;请求出错: &lt;span class=&quot;hljs-subst&quot;&gt;$e&lt;/span&gt;&#39;&lt;/span&gt;);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 data-id=&quot;heading-2&quot;&gt;POST 请求&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-dart&quot; lang=&quot;dart&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;package:dio/dio.dart&#39;&lt;/span&gt;;

&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; postData() &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
    Dio dio = Dio();
    &lt;span class=&quot;hljs-comment&quot;&gt;// 定义请求数据&lt;/span&gt;
    &lt;span class=&quot;hljs-built_in&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt; data = {
      &lt;span class=&quot;hljs-string&quot;&gt;&#39;title&#39;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;foo&#39;&lt;/span&gt;,
      &lt;span class=&quot;hljs-string&quot;&gt;&#39;body&#39;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;bar&#39;&lt;/span&gt;,
      &lt;span class=&quot;hljs-string&quot;&gt;&#39;userId&#39;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;
    };
    &lt;span class=&quot;hljs-comment&quot;&gt;// 发送 POST 请求&lt;/span&gt;
    Response response = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; dio.post(&lt;span class=&quot;hljs-string&quot;&gt;&#39;https://jsonplaceholder.typicode.com/posts&#39;&lt;/span&gt;, data: data);
    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(response.data);
  } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {
    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;请求出错: &lt;span class=&quot;hljs-subst&quot;&gt;$e&lt;/span&gt;&#39;&lt;/span&gt;);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 data-id=&quot;heading-3&quot;&gt;2、自定义RequestOptions&lt;/h2&gt;
&lt;p&gt;因为我们项目中可能需要自定义&lt;code&gt;header&lt;/code&gt;，&lt;code&gt;设置mockUrl&lt;/code&gt;等需求，我们这个时候可以自定义一个RequestOptions，帮组我们来统一管理&lt;code&gt;Request&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-dart&quot; lang=&quot;dart&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;请求方式&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; MyRequestMethod { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;, post }

&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyRequestOptions&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;请求方式&lt;/span&gt;&lt;/span&gt;
  MyRequestMethod method = MyRequestMethod.&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;;

  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;基础url&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; baseUrl =
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;https://mockapi.eolink.com/uvemJdBf6d6fe15694c6ce211778969e0cfaacf4f97f262&quot;&lt;/span&gt;;

  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;请求路径&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; urlPath = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;

  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;参数&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-built_in&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt; params = &lt;span class=&quot;hljs-built_in&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt;();

  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;HTTP 请求头。&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-built_in&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt; headers = &lt;span class=&quot;hljs-built_in&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt;();

  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;连接服务器超时时间.&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-built_in&quot;&gt;Duration&lt;/span&gt; connectTimeout = &lt;span class=&quot;hljs-built_in&quot;&gt;Duration&lt;/span&gt;(seconds: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);

  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;接收数据的超时设置。&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;///&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;这里的超时对应的时间是：&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;&lt;span class=&quot;hljs-bullet&quot;&gt; -&lt;/span&gt; 在建立连接和第一次收到响应数据事件之前的超时。&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;&lt;span class=&quot;hljs-bullet&quot;&gt; -&lt;/span&gt; 每个数据事件传输的间隔时间，而不是接收的总持续时间。&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;///&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;超时时会抛出类型为 [DioExceptionType.receiveTimeout] 的&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;[DioException]。&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;///&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;&lt;span class=&quot;hljs-code&quot;&gt;`null`&lt;/span&gt; 或 &lt;span class=&quot;hljs-code&quot;&gt;`Duration.zero`&lt;/span&gt; 即不设置超时。&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-built_in&quot;&gt;Duration&lt;/span&gt; receiveTimeout = &lt;span class=&quot;hljs-built_in&quot;&gt;Duration&lt;/span&gt;(seconds: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);

  MyRequestOptions({&lt;span class=&quot;hljs-keyword&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; url, &lt;span class=&quot;hljs-built_in&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt;? paramsMap}) {
    urlPath = url;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (paramsMap != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {
      params.addAll(paramsMap);
    }

    &lt;span class=&quot;hljs-comment&quot;&gt;// 设置默认header&lt;/span&gt;
    _addDefaultHeader();
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;设置Mockurl&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; setMockUrl({&lt;span class=&quot;hljs-keyword&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; mockUrl}) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (kDebugMode) {
      baseUrl = mockUrl;
    }
  }

  &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; getMethod() {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (method == MyRequestMethod.&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;) {
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;get&quot;&lt;/span&gt;;
    }
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;post&quot;&lt;/span&gt;;
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;设置默认header&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; _addDefaultHeader() {
    &lt;span class=&quot;hljs-built_in&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt; defaultHeader = {
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json; charset=utf-8&quot;&lt;/span&gt;,
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;Accept&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;
    };
    headers.addAll(defaultHeader);
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;设置header&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; setHeader({&lt;span class=&quot;hljs-keyword&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt; headerMap}) {
    headers.addAll(headerMap);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 data-id=&quot;heading-4&quot;&gt;3、dio请求管理队列，用于统一管理请求&lt;/h2&gt;
&lt;p&gt;在发起请求以后，我们可能会因为各种情况需要管理这个请求，如取消某一个请求，或者取消全部请求等等，这个时候我们最好有一个管理工具类&lt;/p&gt;
&lt;h4 data-id=&quot;heading-5&quot;&gt;取消请求&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-dart&quot; lang=&quot;dart&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; cancelMultipleRequests() &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; {
  Dio dio = Dio();
  CancelToken cancelToken = CancelToken();

  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 第一个请求&lt;/span&gt;
    dio.&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;(
      &lt;span class=&quot;hljs-string&quot;&gt;&#39;https://jsonplaceholder.typicode.com/posts/1&#39;&lt;/span&gt;,
      cancelToken: cancelToken,
    );
  } &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; DioException &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (e.type == DioExceptionType.cancel) {
      &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;请求已取消: &lt;span class=&quot;hljs-subst&quot;&gt;${e.message}&lt;/span&gt;&#39;&lt;/span&gt;);
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
      &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;请求出错: &lt;span class=&quot;hljs-subst&quot;&gt;${e.message}&lt;/span&gt;&#39;&lt;/span&gt;);
    }
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;// 取消所有使用该 CancelToken 的请求&lt;/span&gt;
  cancelToken.cancel(&lt;span class=&quot;hljs-string&quot;&gt;&#39;批量取消请求&#39;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-6&quot;&gt;管理类&lt;/h4&gt;
&lt;p&gt;我们为每一个请求都创建一个cancelToken来管理，cancelToken的生成是根据&lt;code&gt;MyRequestOptions&lt;/code&gt;来生成的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;获取CancelTokenKey&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ini&quot; lang=&quot;ini&quot;&gt;String getCancelTokenKey({required MyRequestOptions options}) {
    String &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt; = options.baseUrl + options.urlPath&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    String &lt;span class=&quot;hljs-attr&quot;&gt;paramString&lt;/span&gt; = options.params.toString()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    String &lt;span class=&quot;hljs-attr&quot;&gt;cancelTokenKey&lt;/span&gt; = (url + paramString).md5Hash()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    return cancelTokenKey&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;获取CancelToken&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ini&quot; lang=&quot;ini&quot;&gt;CancelToken getCancelToken({required MyRequestOptions options}) {
    String &lt;span class=&quot;hljs-attr&quot;&gt;cancelTokenKey&lt;/span&gt; = getCancelTokenKey(options: options)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    CancelToken? cancelToken&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;hljs-attr&quot;&gt;cancelToken&lt;/span&gt; = cancelTokens[cancelTokenKey]&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    if (&lt;span class=&quot;hljs-attr&quot;&gt;cancelToken&lt;/span&gt; == null) {
      &lt;span class=&quot;hljs-attr&quot;&gt;cancelToken&lt;/span&gt; = CancelToken()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
      cancelTokens&lt;span class=&quot;hljs-section&quot;&gt;[cancelTokenKey]&lt;/span&gt; = cancelToken&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    }
    return cancelToken&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们使用一个单例来管理我们的&lt;strong&gt;CancelToken&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-scss&quot; lang=&quot;scss&quot;&gt;class MyDioManager {
  final Map&amp;lt;String, CancelToken&amp;gt; cancelTokens = {};
  &lt;span class=&quot;hljs-comment&quot;&gt;// 静态私有实例，初始值为 null&lt;/span&gt;
  static MyDioManager? _instance;
  &lt;span class=&quot;hljs-comment&quot;&gt;// 私有构造函数&lt;/span&gt;
  MyDioManager&lt;span class=&quot;hljs-selector-class&quot;&gt;._privateConstructor&lt;/span&gt;();

  &lt;span class=&quot;hljs-comment&quot;&gt;// 静态工厂方法，用于获取单例实例&lt;/span&gt;
  static MyDioManager get instance {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 创建一个锁对象&lt;/span&gt;
    final Lock lock = &lt;span class=&quot;hljs-built_in&quot;&gt;Lock&lt;/span&gt;();
    lock&lt;span class=&quot;hljs-selector-class&quot;&gt;.synchronized&lt;/span&gt;(() {
      _instance ??= MyDioManager&lt;span class=&quot;hljs-selector-class&quot;&gt;._privateConstructor&lt;/span&gt;();
    });
    return _instance!;
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;// 取消某个请求&lt;/span&gt;
  void &lt;span class=&quot;hljs-built_in&quot;&gt;cancelRequest&lt;/span&gt;(String cancelTokenKey) {
    final cancelToken = cancelTokens&lt;span class=&quot;hljs-selector-attr&quot;&gt;[cancelTokenKey]&lt;/span&gt;;
    if (cancelToken != null) {
      cancelToken&lt;span class=&quot;hljs-selector-class&quot;&gt;.cancel&lt;/span&gt;(&#39;Request cancelled by user&#39;);
      cancelTokens&lt;span class=&quot;hljs-selector-class&quot;&gt;.remove&lt;/span&gt;(cancelTokenKey);
    }
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;// 取消全部请求&lt;/span&gt;
  void &lt;span class=&quot;hljs-built_in&quot;&gt;cancelAllRequests&lt;/span&gt;() {
    cancelTokens&lt;span class=&quot;hljs-selector-class&quot;&gt;.forEach&lt;/span&gt;((key, cancelToken) {
      cancelToken&lt;span class=&quot;hljs-selector-class&quot;&gt;.cancel&lt;/span&gt;(&#39;All requests cancelled by user&#39;);
    });
    cancelTokens&lt;span class=&quot;hljs-selector-class&quot;&gt;.clear&lt;/span&gt;();
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 data-id=&quot;heading-7&quot;&gt;4、HttpClient链接管理，用于获取解析DNS时间、TCP连接开始时间、SSL握手开始时间（如果是HTTPS）、首包时间&lt;/h2&gt;
&lt;p&gt;Dio是基于Dart的http包开发的，但Dart本身在标准库中不提供这些底层的网络指标。我们可以通过一些自定义的方式来实现这些统计&lt;/p&gt;
&lt;h3 data-id=&quot;heading-8&quot;&gt;DNS解析耗时&lt;/h3&gt;
&lt;p&gt;DNS解析通常发生在建立TCP连接之前。Dart的Socket类在连接时会解析DNS，但是dio并没有暴露相关信息，我们需要自己实现一个自定义的连接器，比如继承自Dio的&lt;code&gt;CustomHttpClientAdapter&lt;/code&gt;，然后重写一些方法，在发起请求时记录时间。&lt;/p&gt;
&lt;p&gt;对于DNS时间，可以在打开连接时记录开始时间，当Socket连接建立时，DNS解析已经完成，这时候可以计算DNS耗时&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ini&quot; lang=&quot;ini&quot;&gt;    // DNS解析开始时间
    final &lt;span class=&quot;hljs-attr&quot;&gt;dnsStartTime&lt;/span&gt; = DateTime.now()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    // 创建HttpClient
    final &lt;span class=&quot;hljs-attr&quot;&gt;httpClient&lt;/span&gt; = HttpClient()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;hljs-attr&quot;&gt;httpClient.badCertificateCallback&lt;/span&gt; =
        (X509Certificate cert, String host, int port) =&amp;gt; true&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    // 解析DNS
    final &lt;span class=&quot;hljs-attr&quot;&gt;uri&lt;/span&gt; = options.uri&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    final &lt;span class=&quot;hljs-attr&quot;&gt;addresses&lt;/span&gt; = await InternetAddress.lookup(uri.host)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    // DNS解析结束时间
    final &lt;span class=&quot;hljs-attr&quot;&gt;dnsEndTime&lt;/span&gt; = DateTime.now()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    final &lt;span class=&quot;hljs-attr&quot;&gt;dnsTime&lt;/span&gt; = dnsEndTime.difference(dnsStartTime).inMilliseconds&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-9&quot;&gt;TCP三次握手耗时&lt;/h3&gt;
&lt;p&gt;TCP连接的时间是从开始连接到连接成功的时间差。同样需要在发起连接的时候记录开始时间，连接成功后记录结束时间，计算差值&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ini&quot; lang=&quot;ini&quot;&gt;// TCP 连接耗时
    final &lt;span class=&quot;hljs-attr&quot;&gt;tcpStart&lt;/span&gt; = DateTime.now()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    var &lt;span class=&quot;hljs-attr&quot;&gt;socket&lt;/span&gt; = await Socket.connect(
      addresses.first,
      options.uri.port ?? (&lt;span class=&quot;hljs-attr&quot;&gt;options.uri.scheme&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;&#39;https&#39;&lt;/span&gt; ? &lt;span class=&quot;hljs-number&quot;&gt;443&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;),
    )&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    timings&lt;span class=&quot;hljs-section&quot;&gt;[&#39;tcpTime&#39;]&lt;/span&gt; = DateTime.now().difference(tcpStart).inMilliseconds&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-10&quot;&gt;SSL 握手耗时（HTTPS）&lt;/h3&gt;
&lt;p&gt;SSL握手时间的话，如果是HTTPS请求，在建立TCP连接之后会进行SSL握手。这时候可以在SecureSocket.connect的时候记录时间，计算SSL握手的时间差。这需要覆盖处理HTTPS的部&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ini&quot; lang=&quot;ini&quot;&gt;    // SSL握手开始时间（如果是HTTPS）
    final &lt;span class=&quot;hljs-attr&quot;&gt;sslStartTime&lt;/span&gt; = DateTime.now()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    SecureSocket? secureSocket&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    if (&lt;span class=&quot;hljs-attr&quot;&gt;uri.scheme&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;&#39;https&#39;&lt;/span&gt;) {
      &lt;span class=&quot;hljs-attr&quot;&gt;secureSocket&lt;/span&gt; = await SecureSocket.secure(
        socket,
        host: uri.host,
        onBadCertificate: (cert) =&amp;gt; true,
      )&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    }
    // SSL握手结束时间
    final &lt;span class=&quot;hljs-attr&quot;&gt;sslEndTime&lt;/span&gt; = DateTime.now()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-11&quot;&gt;首包时间&lt;/h3&gt;
&lt;p&gt;即从请求发送到接收到第一个响应包的时间。这个可以通过拦截器来记录。在发送请求前记录时间，然后在接收到响应时记录第一个字节到达的时间，计算差值&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ini&quot; lang=&quot;ini&quot;&gt;// 首包时间开始记录
    final &lt;span class=&quot;hljs-attr&quot;&gt;firstPacketStartTime&lt;/span&gt; = DateTime.now()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    // 使用默认适配器发送请求
    final &lt;span class=&quot;hljs-attr&quot;&gt;response&lt;/span&gt; = await _defaultAdapter.fetch(
      options,
      requestStream,
      cancelFuture,
    )&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    // 首包时间结束记录
    final &lt;span class=&quot;hljs-attr&quot;&gt;firstPacketEndTime&lt;/span&gt; = DateTime.now()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    final &lt;span class=&quot;hljs-attr&quot;&gt;firstPacketTime&lt;/span&gt; =
        firstPacketEndTime.difference(firstPacketStartTime).inMilliseconds&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-12&quot;&gt;完整代码&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ini&quot; lang=&quot;ini&quot;&gt;import &#39;dart:async&#39;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
import &#39;dart:io&#39;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
import &#39;dart:typed_data&#39;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
import &#39;package:dio/dio.dart&#39;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
import &#39;package:dio/io.dart&#39;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;

class CustomHttpClientAdapter implements HttpClientAdapter {
  final HttpClientAdapter &lt;span class=&quot;hljs-attr&quot;&gt;_defaultAdapter&lt;/span&gt; = DefaultHttpClientAdapter()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;

  @override
  Future&amp;lt;ResponseBody&amp;gt; fetch(
    RequestOptions options,
    Stream&amp;lt;Uint8List&amp;gt;? requestStream,
    Future? cancelFuture,
  ) async {
    final &lt;span class=&quot;hljs-attr&quot;&gt;timings&lt;/span&gt; = &amp;lt;String, num&amp;gt;{}&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;

    // 记录开始时间
    final &lt;span class=&quot;hljs-attr&quot;&gt;startTime&lt;/span&gt; = DateTime.now()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;

    // DNS解析开始时间
    final &lt;span class=&quot;hljs-attr&quot;&gt;dnsStartTime&lt;/span&gt; = DateTime.now()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;

    // 创建HttpClient
    final &lt;span class=&quot;hljs-attr&quot;&gt;httpClient&lt;/span&gt; = HttpClient()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;hljs-attr&quot;&gt;httpClient.badCertificateCallback&lt;/span&gt; =
        (X509Certificate cert, String host, int port) =&amp;gt; true&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;

    // 解析DNS
    final &lt;span class=&quot;hljs-attr&quot;&gt;uri&lt;/span&gt; = options.uri&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    final &lt;span class=&quot;hljs-attr&quot;&gt;addresses&lt;/span&gt; = await InternetAddress.lookup(uri.host)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    // DNS解析结束时间
    final &lt;span class=&quot;hljs-attr&quot;&gt;dnsEndTime&lt;/span&gt; = DateTime.now()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    final &lt;span class=&quot;hljs-attr&quot;&gt;dnsTime&lt;/span&gt; = dnsEndTime.difference(dnsStartTime).inMilliseconds&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;

    // TCP连接开始时间
    final &lt;span class=&quot;hljs-attr&quot;&gt;tcpStartTime&lt;/span&gt; = DateTime.now()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    final &lt;span class=&quot;hljs-attr&quot;&gt;socket&lt;/span&gt; = await Socket.connect(
      addresses.first,
      uri.port,
      timeout: const Duration(seconds: 10),
    )&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    // TCP连接结束时间
    final &lt;span class=&quot;hljs-attr&quot;&gt;tcpEndTime&lt;/span&gt; = DateTime.now()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    final &lt;span class=&quot;hljs-attr&quot;&gt;tcpTime&lt;/span&gt; = tcpEndTime.difference(tcpStartTime).inMilliseconds&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;

    // SSL握手开始时间（如果是HTTPS）
    final &lt;span class=&quot;hljs-attr&quot;&gt;sslStartTime&lt;/span&gt; = DateTime.now()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    SecureSocket? secureSocket&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    if (&lt;span class=&quot;hljs-attr&quot;&gt;uri.scheme&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;&#39;https&#39;&lt;/span&gt;) {
      &lt;span class=&quot;hljs-attr&quot;&gt;secureSocket&lt;/span&gt; = await SecureSocket.secure(
        socket,
        host: uri.host,
        onBadCertificate: (cert) =&amp;gt; true,
      )&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    }
    // SSL握手结束时间
    final &lt;span class=&quot;hljs-attr&quot;&gt;sslEndTime&lt;/span&gt; = DateTime.now()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    final &lt;span class=&quot;hljs-attr&quot;&gt;sslTime&lt;/span&gt; = sslEndTime.difference(sslStartTime).inMilliseconds&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    // 首包时间开始记录
    final &lt;span class=&quot;hljs-attr&quot;&gt;firstPacketStartTime&lt;/span&gt; = DateTime.now()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    // 使用默认适配器发送请求
    final &lt;span class=&quot;hljs-attr&quot;&gt;response&lt;/span&gt; = await _defaultAdapter.fetch(
      options,
      requestStream,
      cancelFuture,
    )&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    // 首包时间结束记录
    final &lt;span class=&quot;hljs-attr&quot;&gt;firstPacketEndTime&lt;/span&gt; = DateTime.now()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    final &lt;span class=&quot;hljs-attr&quot;&gt;firstPacketTime&lt;/span&gt; =
        firstPacketEndTime.difference(firstPacketStartTime).inMilliseconds&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    // 总耗时
    final &lt;span class=&quot;hljs-attr&quot;&gt;totalTime&lt;/span&gt; = DateTime.now().difference(startTime).inMilliseconds&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;

    // 打印统计信息
    timings&lt;span class=&quot;hljs-section&quot;&gt;[&#39;dns&#39;]&lt;/span&gt; = dnsTime&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    timings&lt;span class=&quot;hljs-section&quot;&gt;[&#39;tcp&#39;]&lt;/span&gt; = tcpTime&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    timings&lt;span class=&quot;hljs-section&quot;&gt;[&#39;ssl&#39;]&lt;/span&gt; = sslTime&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    timings&lt;span class=&quot;hljs-section&quot;&gt;[&#39;first_packet&#39;]&lt;/span&gt; = firstPacketTime&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    timings&lt;span class=&quot;hljs-section&quot;&gt;[&#39;totalTime&#39;]&lt;/span&gt; = totalTime&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;

    // print(&#39;DNS解析耗时: $dnsTime ms&#39;)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    // print(&#39;TCP三次握手耗时: $tcpTime ms&#39;)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    // print(&#39;SSL握手耗时: $sslTime ms&#39;)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    // print(&#39;首包时间: $firstPacketTime ms&#39;)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    // print(&#39;总耗时: $totalTime ms&#39;)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;

    // 将耗时数据存入请求配置的 extra 字段
    options.extra.addAll(timings)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    return response&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
  }

  @override
  void close({bool &lt;span class=&quot;hljs-attr&quot;&gt;force&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;}) {
    _defaultAdapter.close(force: force)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
  }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;使用时&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ini&quot; lang=&quot;ini&quot;&gt; &lt;span class=&quot;hljs-attr&quot;&gt;_dio.httpClientAdapter&lt;/span&gt; = CustomHttpClientAdapter()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们可以把将耗时数据存入请求配置的 extra 字段，方便我们使用日志拦截器时，打印整个请求详细的信息&lt;/p&gt;
&lt;h2 data-id=&quot;heading-13&quot;&gt;5、json转model&lt;/h2&gt;
&lt;p&gt;json转model我是借助于&lt;code&gt;json_annotation&lt;/code&gt;实现的，我定义了两个基类model，用于解析普通类型&lt;code&gt;MyBaseModel&lt;/code&gt;和数组类型&lt;code&gt;MyBaseListModel&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-kotlin&quot; lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@JsonSerializable(genericArgumentFactories: true, converters: [SafeNumConverter()])&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyBaseModel&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SafeConvertModel&lt;/span&gt; {
  &lt;span class=&quot;hljs-meta&quot;&gt;@JsonKey(name: &lt;span class=&quot;hljs-string&quot;&gt;&#39;code&#39;&lt;/span&gt;)&lt;/span&gt;
  num? code;
  &lt;span class=&quot;hljs-meta&quot;&gt;@JsonKey(name: &lt;span class=&quot;hljs-string&quot;&gt;&#39;message&#39;&lt;/span&gt;)&lt;/span&gt;
  String? message;
  T? &lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;;
 
  &lt;span class=&quot;hljs-comment&quot;&gt;/// 是否成功&lt;/span&gt;
  bool isSucess() {
    bool result = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.code?.toInt() == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;
  }
}
&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyBaseListModel&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;&amp;gt; {
  &lt;span class=&quot;hljs-meta&quot;&gt;@JsonKey(name: &lt;span class=&quot;hljs-string&quot;&gt;&#39;code&#39;&lt;/span&gt;)&lt;/span&gt;
  num? code;
  &lt;span class=&quot;hljs-meta&quot;&gt;@JsonKey(name: &lt;span class=&quot;hljs-string&quot;&gt;&#39;message&#39;&lt;/span&gt;)&lt;/span&gt;
  String? message;
  List&amp;lt;T&amp;gt;? &lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;;
  &lt;span class=&quot;hljs-comment&quot;&gt;/// 是否成功&lt;/span&gt;
  bool isSucess() {
    bool result = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.code == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;在&lt;code&gt;NetworkService&lt;/code&gt;中封装json转model&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-dart&quot; lang=&quot;dart&quot;&gt;Future&amp;lt;MyBaseModel&amp;lt;T&amp;gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;&amp;lt;T&amp;gt;(
      {&lt;span class=&quot;hljs-keyword&quot;&gt;required&lt;/span&gt; MyRequestOptions options,
      &lt;span class=&quot;hljs-keyword&quot;&gt;required&lt;/span&gt; T &lt;span class=&quot;hljs-built_in&quot;&gt;Function&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;Object?&lt;/span&gt; json) fromJsonT}) &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 发起请求&lt;/span&gt;
    MyResopnseModel response = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; _request(options: options);
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (response.isHttpSucess() == &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;) {
      &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; MyBaseModel.fromJson(
          response.data,
          fromJsonT,
        );
      } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e, stackTrace) {
        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;json转model失败: &lt;span class=&quot;hljs-subst&quot;&gt;$e&lt;/span&gt;&#39;&lt;/span&gt;);
        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; e;
      }
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
      &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; _handleError(resopnse: response);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;使用示例&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-dart&quot; lang=&quot;dart&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 发起 GET 请求获取用户信息&lt;/span&gt;
    MyBaseModel&amp;lt;User&amp;gt; result = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; networkService.&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;&amp;lt;User&amp;gt;(
      &lt;span class=&quot;hljs-string&quot;&gt;&#39;/user&#39;&lt;/span&gt;,
      fromJsonT: (json) =&amp;gt; User.fromJson(json &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt;),
    );

    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (result.isSucess()) {
      &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;User name: &lt;span class=&quot;hljs-subst&quot;&gt;${result.data?.name}&lt;/span&gt;&#39;&lt;/span&gt;);
      &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;User age: &lt;span class=&quot;hljs-subst&quot;&gt;${result.data?.age}&lt;/span&gt;&#39;&lt;/span&gt;);
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
      &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Request failed: &lt;span class=&quot;hljs-subst&quot;&gt;${result.message}&lt;/span&gt;&#39;&lt;/span&gt;);
    }
  } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {
    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Error: &lt;span class=&quot;hljs-subst&quot;&gt;$e&lt;/span&gt;&#39;&lt;/span&gt;);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果&lt;code&gt;T&lt;/code&gt;是基础类型&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-dart&quot; lang=&quot;dart&quot;&gt;MyBaseModel&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt; model = MyBaseModel.fromJson(
    jsonMap,
    (json) =&amp;gt; json &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;// 直接将 JSON 值转换为 int&lt;/span&gt;
  );
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 data-id=&quot;heading-14&quot;&gt;6、&lt;code&gt;Interceptor&lt;/code&gt;（拦截器）&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Interceptor&lt;/code&gt; 是 &lt;code&gt;dio&lt;/code&gt; 库中的一个抽象类，它允许你在请求发送前、响应返回后以及请求发生错误时插入自定义逻辑。通过实现 &lt;code&gt;Interceptor&lt;/code&gt; 类的方法，你可以对请求和响应进行拦截和修改。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Interceptor&lt;/code&gt; 类有三个主要的方法，分别用于&lt;strong&gt;处理请求、响应和错误：&lt;/strong&gt;&lt;/p&gt;
&lt;h5 data-id=&quot;heading-15&quot;&gt;&lt;code&gt;onRequest&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;：在请求发送之前被调用，可用于修改请求选项，如添加请求头、修改请求参数等。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-scala&quot; lang=&quot;scala&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AuthInterceptor&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Interceptor&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;
  void onRequest(&lt;span class=&quot;hljs-type&quot;&gt;RequestOptions&lt;/span&gt; options, &lt;span class=&quot;hljs-type&quot;&gt;RequestInterceptorHandler&lt;/span&gt; handler) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 添加授权头&lt;/span&gt;
    options.headers[&#39;&lt;span class=&quot;hljs-type&quot;&gt;Authorization&lt;/span&gt;&#39;] = &#39;&lt;span class=&quot;hljs-type&quot;&gt;Bearer&lt;/span&gt; your_token&#39;;
    handler.next(options);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 data-id=&quot;heading-16&quot;&gt;&lt;code&gt;onResponse&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;：在响应返回之后被调用，可用于处理响应数据，如解析数据、缓存数据等。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-scala&quot; lang=&quot;scala&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;DataParserInterceptor&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Interceptor&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;
  void onResponse(&lt;span class=&quot;hljs-type&quot;&gt;Response&lt;/span&gt; response, &lt;span class=&quot;hljs-type&quot;&gt;ResponseInterceptorHandler&lt;/span&gt; handler) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 解析响应数据&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (response.data is &lt;span class=&quot;hljs-type&quot;&gt;Map&lt;/span&gt;) {
      &lt;span class=&quot;hljs-comment&quot;&gt;// 处理 Map 类型的数据&lt;/span&gt;
    }
    handler.next(response);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 data-id=&quot;heading-17&quot;&gt;&lt;code&gt;onError&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;：在请求发生错误时被调用，可用于统一处理错误，如重试请求、显示错误信息等。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-scala&quot; lang=&quot;scala&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;RetryInterceptor&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Interceptor&lt;/span&gt; &lt;/span&gt;{
  int maxRetries = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;

  &lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;
  void onError(&lt;span class=&quot;hljs-type&quot;&gt;DioException&lt;/span&gt; err, &lt;span class=&quot;hljs-type&quot;&gt;ErrorInterceptorHandler&lt;/span&gt; handler) async {
    int retryCount = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (retryCount &amp;lt; maxRetries) {
      &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
        &lt;span class=&quot;hljs-comment&quot;&gt;// 重试请求&lt;/span&gt;
        &lt;span class=&quot;hljs-type&quot;&gt;Response&lt;/span&gt; response = await err.requestOptions.createDio().fetch(err.requestOptions);
        handler.resolve(response);
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
      } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {
        retryCount++;
      }
    }
    handler.next(err);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 data-id=&quot;heading-18&quot;&gt;拦截器的执行顺序&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;dio&lt;/code&gt; 中的拦截器是按照添加的顺序依次执行的。在请求阶段，拦截器按照添加顺序依次处理请求；在响应阶段，拦截器按照相反的顺序依次处理响应。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-csharp&quot; lang=&quot;csharp&quot;&gt;dio.interceptors.&lt;span class=&quot;hljs-keyword&quot;&gt;add&lt;/span&gt;(Interceptor1());
dio.interceptors.&lt;span class=&quot;hljs-keyword&quot;&gt;add&lt;/span&gt;(Interceptor2());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;请求处理顺序：&lt;code&gt;Interceptor1&lt;/code&gt; -&amp;gt; &lt;code&gt;Interceptor2&lt;/code&gt;
响应处理顺序：&lt;code&gt;Interceptor2&lt;/code&gt; -&amp;gt; &lt;code&gt;Interceptor1&lt;/code&gt;&lt;/p&gt;
&lt;h3 data-id=&quot;heading-19&quot;&gt;1、缓存拦截器&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-20&quot;&gt;缓存策略&lt;/h4&gt;
&lt;p&gt;根据以往的业务需求，我定义了下面缓存策略&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-arduino&quot; lang=&quot;arduino&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/// 缓存策略&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyNetworkCachePolicy&lt;/span&gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;/// 不用缓存&lt;/span&gt;
  none,
  &lt;span class=&quot;hljs-comment&quot;&gt;/// 先用缓存，在请求网络，得到网络数据后覆盖缓存&lt;/span&gt;
  firstCache,
  &lt;span class=&quot;hljs-comment&quot;&gt;/// 先请求网络，失败后再返回缓存&lt;/span&gt;
  firstRequest,
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-21&quot;&gt;缓存管理类&lt;/h4&gt;
&lt;p&gt;缓存管理类主要任务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、定义缓存策略&lt;/li&gt;
&lt;li&gt;2、定义缓存时间&lt;/li&gt;
&lt;li&gt;3、实现保存和删除操作&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ini&quot; lang=&quot;ini&quot;&gt;class MyNetworkCacheManager {
  /// 缓存策略
  final MyNetworkCachePolicy &lt;span class=&quot;hljs-attr&quot;&gt;cachePolicy&lt;/span&gt; = MyNetworkCachePolicy.none&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
  /// 缓存过期时间（单位：秒）
  final int &lt;span class=&quot;hljs-attr&quot;&gt;cacheExpirationTime&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;

  /// 获取缓存
  Future&amp;lt;String?&amp;gt; getCacheData(RequestOptions options) async {
    final &lt;span class=&quot;hljs-attr&quot;&gt;filePath&lt;/span&gt; = _getFilePath(options)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    final &lt;span class=&quot;hljs-attr&quot;&gt;fileUtils&lt;/span&gt; = FileUtils()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    String? &lt;span class=&quot;hljs-attr&quot;&gt;jsonString&lt;/span&gt; = await fileUtils.getFile(filePath)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;

    if (jsonString != null) {
      Map&amp;lt;String, dynamic&amp;gt; &lt;span class=&quot;hljs-attr&quot;&gt;jsonMap&lt;/span&gt; = jsonString.toMap()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
      int &lt;span class=&quot;hljs-attr&quot;&gt;timestamp&lt;/span&gt; = jsonMap[&lt;span class=&quot;hljs-string&quot;&gt;&#39;timestamp&#39;&lt;/span&gt;]&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
      // 检查缓存是否过期
      if (DateTime.now().millisecondsSinceEpoch - timestamp &amp;lt; cacheExpirationTime * 1000) {
        return jsonMap&lt;span class=&quot;hljs-section&quot;&gt;[&#39;data&#39;]&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
      }
      // 若缓存过期，删除缓存
      await _remove(options)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
      return null&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    }
    return null&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
  }

  /// 保存缓存
  Future&amp;lt;void&amp;gt; saveCache(RequestOptions options, String data) async {
    final &lt;span class=&quot;hljs-attr&quot;&gt;filePath&lt;/span&gt; = _getFilePath(options)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    final &lt;span class=&quot;hljs-attr&quot;&gt;fileUtils&lt;/span&gt; = FileUtils()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    Map&amp;lt;String, dynamic&amp;gt; &lt;span class=&quot;hljs-attr&quot;&gt;cachedData&lt;/span&gt; = {
      &#39;timestamp&#39;: DateTime.now().millisecondsSinceEpoch,
      &#39;data&#39;: data
    }&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    final &lt;span class=&quot;hljs-attr&quot;&gt;jsonString&lt;/span&gt; = json.encode(cachedData)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    fileUtils.writeFile(filePath, jsonString)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
  }


  Future&amp;lt;void&amp;gt; _remove(RequestOptions options) async{
    final &lt;span class=&quot;hljs-attr&quot;&gt;filePath&lt;/span&gt; = _getFilePath(options)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    final &lt;span class=&quot;hljs-attr&quot;&gt;fileUtils&lt;/span&gt; = FileUtils()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    fileUtils.removeFilePath(filePath)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
  }

  /// 获取文件路径
  String _getFilePath(RequestOptions options) {
    String &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt; = options.uri.toString()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    String &lt;span class=&quot;hljs-attr&quot;&gt;paramJsonString&lt;/span&gt; = options.queryParameters.toString()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    String &lt;span class=&quot;hljs-attr&quot;&gt;method&lt;/span&gt; = options.method&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    return (method + url + paramJsonString).md5Hash()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
  }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-22&quot;&gt;缓存拦截器&lt;/h4&gt;
&lt;h5 data-id=&quot;heading-23&quot;&gt;&lt;strong&gt;onRequest&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;1、&lt;code&gt;firstCache&lt;/code&gt;缓存策略下，如果我们能够拿到缓存可以直接执行&lt;code&gt;handler.resolve(response);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2、对于其他策略，继续原始请请求网络&lt;code&gt;handler.next(options);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;hljs language-ini&quot; lang=&quot;ini&quot;&gt;@override
  void onRequest(
      RequestOptions options, RequestInterceptorHandler handler) async {
    final MyNetworkCachePolicy &lt;span class=&quot;hljs-attr&quot;&gt;cachePolicy&lt;/span&gt; = cacheManager.cachePolicy&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    if (&lt;span class=&quot;hljs-attr&quot;&gt;cachePolicy&lt;/span&gt; == MyNetworkCachePolicy.firstCache) {
      final &lt;span class=&quot;hljs-attr&quot;&gt;cacheJsonString&lt;/span&gt; = await cacheManager.getCacheData(options)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
      if (cacheJsonString != null) {
        // 有缓存数据，先返回缓存响应
        final &lt;span class=&quot;hljs-attr&quot;&gt;response&lt;/span&gt; = Response(
          requestOptions: options,
          data: json.decode(cacheJsonString),
          statusCode: 200,
        )&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
        handler.resolve(response)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
        return&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
      }
    }

    // 继续请求网络
    handler.next(options)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 data-id=&quot;heading-24&quot;&gt;&lt;strong&gt;onResponse&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;只缓存GET请求成功响应以及缓存策略是&lt;code&gt;none&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ini&quot; lang=&quot;ini&quot;&gt;@override
  void onResponse(Response response, ResponseInterceptorHandler handler) {
    // 只缓存GET请求成功响应
    if (&lt;span class=&quot;hljs-attr&quot;&gt;response.requestOptions.method&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;&#39;GET&#39;&lt;/span&gt; &amp;amp;&amp;amp;
        &lt;span class=&quot;hljs-attr&quot;&gt;response.statusCode&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt; &amp;amp;&amp;amp;
        cacheManager.cachePolicy != MyNetworkCachePolicy.none) {
      try {
        String &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt; = json.encode(response.data)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
        cacheManager.saveCache(response.requestOptions, data)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
      } catch (e) {}
    }

    handler.next(response)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;onError&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-scss&quot; lang=&quot;scss&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;@override&lt;/span&gt;
  Future&amp;lt;void&amp;gt; onError(
      DioException err, ErrorInterceptorHandler handler) async {
    if (cacheManager.cachePolicy == MyNetworkCachePolicy.firstRequest) {
      final cacheJsonString =
          await cacheManager&lt;span class=&quot;hljs-selector-class&quot;&gt;.getCacheData&lt;/span&gt;(err.requestOptions);
      if (cacheJsonString != null) {
        &lt;span class=&quot;hljs-comment&quot;&gt;// 有缓存数据，先返回缓存响应&lt;/span&gt;
        final response = &lt;span class=&quot;hljs-built_in&quot;&gt;Response&lt;/span&gt;(
          requestOptions: err.requestOptions,
          data: json.decode(cacheJsonString),
          statusCode: &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;,
        );
        &lt;span class=&quot;hljs-comment&quot;&gt;// 返回正确的响应&lt;/span&gt;
        return handler&lt;span class=&quot;hljs-selector-class&quot;&gt;.resolve&lt;/span&gt;(response);
      }
    }

    &lt;span class=&quot;hljs-comment&quot;&gt;// 继续传递错误&lt;/span&gt;
    handler&lt;span class=&quot;hljs-selector-class&quot;&gt;.next&lt;/span&gt;(err);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-25&quot;&gt;2、token续租拦截器&lt;/h3&gt;
&lt;p&gt;根据以往业务需求，我希望token续租拦截器有能够实现一下功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、如果同时发起多个网络请求，当某个请求判读token不存在或者过期时，不要继续发起其他请求了，而是等待token续租成功以后，在发起刚才没有发起的请求&lt;/li&gt;
&lt;li&gt;2、实现无感刷新token&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于以上要求，我可以借助&lt;code&gt;QueuedInterceptorsWrapper&lt;/code&gt;拦截器帮我们实现相关功能&lt;/p&gt;
&lt;h4 data-id=&quot;heading-26&quot;&gt;&lt;strong&gt;QueuedInterceptorsWrapper&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;QueuedInterceptorsWrapper&lt;/code&gt; 是 &lt;code&gt;dio&lt;/code&gt; 库中的一个拦截器包装器。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;QueuedInterceptorsWrapper&lt;/code&gt; 的主要作用是确保多个拦截器按照队列的顺序依次执行。它会将多个拦截器的处理逻辑包装起来，使得每个拦截器的处理逻辑依次执行，并且可以处理异步操作。&lt;/p&gt;
&lt;h4 data-id=&quot;heading-27&quot;&gt;实现原理&lt;/h4&gt;
&lt;h5 data-id=&quot;heading-28&quot;&gt;1、初始化&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;QueuedInterceptorsWrapper&lt;/code&gt; 会接收多个拦截器作为参数，并将它们存储在一个列表中。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-scala&quot; lang=&quot;scala&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &#39;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt;:dio/dio.dart&#39;;

&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;QueuedInterceptorsWrapper&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;InterceptorsWrapper&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;Interceptor&lt;/span&gt;&amp;gt; _interceptors;

  &lt;span class=&quot;hljs-type&quot;&gt;QueuedInterceptorsWrapper&lt;/span&gt;({required &lt;span class=&quot;hljs-type&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;Interceptor&lt;/span&gt;&amp;gt; interceptors})
      : _interceptors = interceptors;

  &lt;span class=&quot;hljs-comment&quot;&gt;// 其他方法...&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 data-id=&quot;heading-29&quot;&gt;2、请求拦截&lt;/h5&gt;
&lt;p&gt;在 &lt;code&gt;onRequest&lt;/code&gt; 方法中，&lt;code&gt;QueuedInterceptorsWrapper&lt;/code&gt; 会依次调用每个拦截器的 &lt;code&gt;onRequest&lt;/code&gt; 方法。如果某个拦截器返回 &lt;code&gt;RequestOptions&lt;/code&gt; 或者 &lt;code&gt;Response&lt;/code&gt;，则会终止后续拦截器的执行。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-dart&quot; lang=&quot;dart&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;
Future&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;&amp;gt; onRequest(
    RequestOptions options, RequestInterceptorHandler handler) &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; interceptor &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; _interceptors) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; shouldContinue = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; _handleInterceptor(
      interceptor.onRequest,
      options,
      (newOptions) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (newOptions &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; RequestOptions) {
          options = newOptions;
        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (newOptions &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; Response) {
          handler.resolve(newOptions);
          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;;
        }
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;;
      },
    );
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!shouldContinue) {
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
    }
  }
  handler.next(options);
}

Future&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;&amp;gt; _handleInterceptor(
    FutureOr&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Function&lt;/span&gt;(RequestOptions, RequestInterceptorHandler)
        interceptorFunction,
    RequestOptions options,
    &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Function&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;) resultHandler) &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; interceptorFunction(options, RequestInterceptorHandler());
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; resultHandler(result);
  } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 data-id=&quot;heading-30&quot;&gt;3、 响应拦截&lt;/h5&gt;
&lt;p&gt;在 &lt;code&gt;onResponse&lt;/code&gt; 方法中，&lt;code&gt;QueuedInterceptorsWrapper&lt;/code&gt; 会依次调用每个拦截器的 &lt;code&gt;onResponse&lt;/code&gt; 方法。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-typescript&quot; lang=&quot;typescript&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;
&lt;span class=&quot;hljs-title class_&quot;&gt;Future&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onResponse&lt;/span&gt;(
    &lt;span class=&quot;hljs-title class_&quot;&gt;Response&lt;/span&gt; response, &lt;span class=&quot;hljs-title class_&quot;&gt;ResponseInterceptorHandler&lt;/span&gt; handler) &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; interceptor &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; _interceptors) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; shouldContinue = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_handleInterceptor&lt;/span&gt;(
      &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;options, _&lt;/span&gt;) =&amp;gt;&lt;/span&gt; interceptor.&lt;span class=&quot;hljs-title function_&quot;&gt;onResponse&lt;/span&gt;(response, &lt;span class=&quot;hljs-title class_&quot;&gt;ResponseInterceptorHandler&lt;/span&gt;()),
      response.&lt;span class=&quot;hljs-property&quot;&gt;requestOptions&lt;/span&gt;,
      (newResponse) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (newResponse is &lt;span class=&quot;hljs-title class_&quot;&gt;Response&lt;/span&gt;) {
          response = newResponse;
        }
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;
      },
    );
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!shouldContinue) {
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
    }
  }
  handler.&lt;span class=&quot;hljs-title function_&quot;&gt;next&lt;/span&gt;(response);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 data-id=&quot;heading-31&quot;&gt;4、错误拦截&lt;/h5&gt;
&lt;p&gt;在 &lt;code&gt;onError&lt;/code&gt; 方法中，&lt;code&gt;QueuedInterceptorsWrapper&lt;/code&gt; 会依次调用每个拦截器的 &lt;code&gt;onError&lt;/code&gt; 方法。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-typescript&quot; lang=&quot;typescript&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;
&lt;span class=&quot;hljs-title class_&quot;&gt;Future&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onError&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;DioError&lt;/span&gt; err, &lt;span class=&quot;hljs-title class_&quot;&gt;ErrorInterceptorHandler&lt;/span&gt; handler) &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; interceptor &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; _interceptors) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; shouldContinue = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_handleInterceptor&lt;/span&gt;(
      &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;options, _&lt;/span&gt;) =&amp;gt;&lt;/span&gt; interceptor.&lt;span class=&quot;hljs-title function_&quot;&gt;onError&lt;/span&gt;(err, &lt;span class=&quot;hljs-title class_&quot;&gt;ErrorInterceptorHandler&lt;/span&gt;()),
      err.&lt;span class=&quot;hljs-property&quot;&gt;requestOptions&lt;/span&gt;,
      (newError) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (newError is &lt;span class=&quot;hljs-title class_&quot;&gt;DioError&lt;/span&gt;) {
          err = newError;
        }
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;
      },
    );
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!shouldContinue) {
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
    }
  }
  handler.&lt;span class=&quot;hljs-title function_&quot;&gt;next&lt;/span&gt;(err);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-32&quot;&gt;token续租拦截器&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-dart&quot; lang=&quot;dart&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;CsrfTokenInterceptor&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;QueuedInterceptor&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-built_in&quot;&gt;String?&lt;/span&gt; _csrfToken;
  &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; _isFetchingToken = &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;;

  &lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;
  Future&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;&amp;gt; onRequest(
    RequestOptions options,
    RequestInterceptorHandler handler,
  ) &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 1. 检查是否需要添加 CSRF Token（根据实际需求调整条件）&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (options.path.startsWith(&lt;span class=&quot;hljs-string&quot;&gt;&#39;/secure/&#39;&lt;/span&gt;)) {
      &lt;span class=&quot;hljs-comment&quot;&gt;// 2. 如果没有 token 且不在获取中&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (_csrfToken == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !_isFetchingToken) {
        _isFetchingToken = &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;;
        
        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
          &lt;span class=&quot;hljs-comment&quot;&gt;// 3. 获取新 token&lt;/span&gt;
          &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; newToken = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; _fetchCsrfToken();
          _csrfToken = newToken;
          _isFetchingToken = &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;;
          
          &lt;span class=&quot;hljs-comment&quot;&gt;// 4. 更新当前请求的 header&lt;/span&gt;
          options.headers[&lt;span class=&quot;hljs-string&quot;&gt;&#39;X-CSRF-TOKEN&#39;&lt;/span&gt;] = newToken;
          
          &lt;span class=&quot;hljs-comment&quot;&gt;// 5. 放行当前请求&lt;/span&gt;
          handler.next(options);
        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {
          &lt;span class=&quot;hljs-comment&quot;&gt;// 6. 获取 token 失败，终止请求链&lt;/span&gt;
          _isFetchingToken = &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;;
          handler.reject(DioException(
            requestOptions: options,
            error: &lt;span class=&quot;hljs-string&quot;&gt;&#39;Failed to get CSRF token: &lt;span class=&quot;hljs-subst&quot;&gt;$e&lt;/span&gt;&#39;&lt;/span&gt;,
          ));
        }
      } 
      &lt;span class=&quot;hljs-comment&quot;&gt;// 7. 如果 token 正在获取中，等待直到获取完成&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (_isFetchingToken) {
        &lt;span class=&quot;hljs-comment&quot;&gt;// 延迟重试逻辑&lt;/span&gt;
        Future.delayed(&lt;span class=&quot;hljs-built_in&quot;&gt;Duration&lt;/span&gt;(milliseconds: &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;), () {
          onRequest(options, handler);
        });
      }
      &lt;span class=&quot;hljs-comment&quot;&gt;// 8. 已有 token 直接添加&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        options.headers[&lt;span class=&quot;hljs-string&quot;&gt;&#39;X-CSRF-TOKEN&#39;&lt;/span&gt;] = _csrfToken;
        handler.next(options);
      }
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
      &lt;span class=&quot;hljs-comment&quot;&gt;// 不需要 CSRF token 的请求直接放行&lt;/span&gt;
      handler.next(options);
    }
  }

  Future&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;&amp;gt; _fetchCsrfToken() &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; {
    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;开始获取 CSRF Token...&#39;&lt;/span&gt;);
    &lt;span class=&quot;hljs-comment&quot;&gt;// 模拟网络请求延迟&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; Future.delayed(&lt;span class=&quot;hljs-built_in&quot;&gt;Duration&lt;/span&gt;(seconds: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));
    
    &lt;span class=&quot;hljs-comment&quot;&gt;// 模拟获取 token（实际应该发送真实请求）&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; mockToken = &lt;span class=&quot;hljs-string&quot;&gt;&#39;csrf_token_&lt;span class=&quot;hljs-subst&quot;&gt;${DateTime.now().millisecondsSinceEpoch}&lt;/span&gt;&#39;&lt;/span&gt;;
    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;获取到 CSRF Token: &lt;span class=&quot;hljs-subst&quot;&gt;$mockToken&lt;/span&gt;&#39;&lt;/span&gt;);
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; mockToken;
  }

  &lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; onError(DioException err, ErrorInterceptorHandler handler) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 401 状态码时清除 token（示例逻辑）&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err.response?.statusCode == &lt;span class=&quot;hljs-number&quot;&gt;401&lt;/span&gt;) {
      _csrfToken = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;
      &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;CSRF Token 已失效，已清除&#39;&lt;/span&gt;);
    }
    handler.next(err);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 data-id=&quot;heading-33&quot;&gt;关键点解释&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;串行队列处理&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;继承 &lt;code&gt;QueuedInterceptor&lt;/code&gt; 确保所有请求按顺序进入拦截器&lt;/li&gt;
&lt;li&gt;即使并发发起多个请求，拦截器也会逐个处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Token 获取锁&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_isFetchingToken&lt;/code&gt; 标志位防止重复请求&lt;/li&gt;
&lt;li&gt;第一个请求触发 token 获取后，后续请求进入等待状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动重试机制&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;当检测到正在获取 token 时（第7步），使用延迟递归调用实现自动重试&lt;/li&gt;
&lt;li&gt;100ms 重试间隔避免立即重试造成的性能问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;错误处理&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;onError&lt;/code&gt; 中处理 401 未授权情况，自动清除失效 token&lt;/li&gt;
&lt;li&gt;获取 token 失败时会终止当前请求链&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;条件判断&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;根据请求路径决定是否需要添加 CSRF Token&lt;/li&gt;
&lt;li&gt;可根据实际需求扩展判断逻辑（如根据请求方法等）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 data-id=&quot;heading-34&quot;&gt;3、loading拦截器&lt;/h3&gt;
&lt;p&gt;loading拦截器实现比较简单：就一个参数是否显示loading&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-scss&quot; lang=&quot;scss&quot;&gt;class LoadingInterceptor extends Interceptor {
  &lt;span class=&quot;hljs-comment&quot;&gt;/// 是否显示loading&lt;/span&gt;
  final bool isShowLoading;
  &lt;span class=&quot;hljs-built_in&quot;&gt;LoadingInterceptor&lt;/span&gt;({required this.isShowLoading});

  &lt;span class=&quot;hljs-keyword&quot;&gt;@override&lt;/span&gt;
  void onRequest(RequestOptions options, RequestInterceptorHandler handler) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 在请求发起时显示加载提示&lt;/span&gt;
    if (isShowLoading) {
      &lt;span class=&quot;hljs-built_in&quot;&gt;_showLoading&lt;/span&gt;();
    }
    super&lt;span class=&quot;hljs-selector-class&quot;&gt;.onRequest&lt;/span&gt;(options, handler);
  }

  &lt;span class=&quot;hljs-keyword&quot;&gt;@override&lt;/span&gt;
  void onError(DioError err, ErrorInterceptorHandler handler) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 在请求出错时隐藏加载提示&lt;/span&gt;
    if (isShowLoading) {
      &lt;span class=&quot;hljs-built_in&quot;&gt;_hideLoading&lt;/span&gt;();
    }
    super&lt;span class=&quot;hljs-selector-class&quot;&gt;.onError&lt;/span&gt;(err, handler);
  }

  &lt;span class=&quot;hljs-keyword&quot;&gt;@override&lt;/span&gt;
  void onResponse(Response response, ResponseInterceptorHandler handler) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 在请求成功响应后隐藏加载提示&lt;/span&gt;
    if (isShowLoading) {
      &lt;span class=&quot;hljs-built_in&quot;&gt;_hideLoading&lt;/span&gt;();
    }

    super&lt;span class=&quot;hljs-selector-class&quot;&gt;.onResponse&lt;/span&gt;(response, handler);
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// 弹窗&lt;/span&gt;
  void &lt;span class=&quot;hljs-built_in&quot;&gt;_showLoading&lt;/span&gt;() {
    ToastUtil&lt;span class=&quot;hljs-selector-class&quot;&gt;.showLoading&lt;/span&gt;();
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// 隐藏弹窗&lt;/span&gt;
  void &lt;span class=&quot;hljs-built_in&quot;&gt;_hideLoading&lt;/span&gt;() {
    ToastUtil&lt;span class=&quot;hljs-selector-class&quot;&gt;.dismiss&lt;/span&gt;();
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-35&quot;&gt;4、异常处理拦截器&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-dart&quot; lang=&quot;dart&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;&amp;gt; _errorCodeMessage = {
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;400&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;状态码：400 请求参数错误&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;401&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;状态码：401 身份验证错误&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;403&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;状态码：403 服务器拒绝请求&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;404&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;状态码：404 找不到服务器地址&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;407&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;状态码：407 需要代理授权&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;408&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;状态码：408 请求超时&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;500&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;状态码：500 服务器内部错误&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;501&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;状态码：501 尚未实施&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;502&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;状态码：502 错误网关&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;503&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;状态码：503 服务不可用&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;504&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;状态码：504 网关超时&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;505&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;HTTP 版本不受支持&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;-1000&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;解析不到数据&quot;&lt;/span&gt;
};

&lt;span class=&quot;hljs-comment&quot;&gt;/*
 * 特殊状态code处理的拦截器，
 * 401 弹出弹窗提示用户重新登录
 */&lt;/span&gt;
&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ErrorHandleInterceptor&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Interceptor&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;是否显示http网络请求错误&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; isShowHttpErrorMsg;
  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;响应code不为0异常&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; isShowDataErrorMsg;

  ErrorHandleInterceptor(
      {&lt;span class=&quot;hljs-keyword&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.isShowHttpErrorMsg, &lt;span class=&quot;hljs-keyword&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.isShowDataErrorMsg});

  &lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; onError(DioError error, ErrorInterceptorHandler handler) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 自定义错误处理逻辑&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isShowHttpErrorMsg) {
      _handleHttpError(error);
    }
    handler.next(error);
  }

  &lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; onResponse(Response response, ResponseInterceptorHandler handler) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isShowDataErrorMsg) {
      _handleDataError(response);
    }
    &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.onResponse(response, handler);
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;网络异常&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; _handleHttpError(DioError error) {
    &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; errorMsg = &lt;span class=&quot;hljs-string&quot;&gt;&quot;网络异常&quot;&lt;/span&gt;;
    &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (error.type) {
      &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; DioExceptionType.connectionTimeout:
        errorMsg = &lt;span class=&quot;hljs-string&quot;&gt;&#39;连接超时&#39;&lt;/span&gt;;
      &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; DioExceptionType.sendTimeout:
        errorMsg = &lt;span class=&quot;hljs-string&quot;&gt;&#39;发送超时&#39;&lt;/span&gt;;
      &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; DioExceptionType.receiveTimeout:
        errorMsg = &lt;span class=&quot;hljs-string&quot;&gt;&#39;接受超时&#39;&lt;/span&gt;;
      &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; DioExceptionType.badCertificate:
        errorMsg = &lt;span class=&quot;hljs-string&quot;&gt;&#39;无效证书&#39;&lt;/span&gt;;
      &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; DioExceptionType.badResponse:
        errorMsg = &lt;span class=&quot;hljs-string&quot;&gt;&#39;无效响应&#39;&lt;/span&gt;;
      &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; DioExceptionType.cancel:
        errorMsg = &lt;span class=&quot;hljs-string&quot;&gt;&#39;请求取消&#39;&lt;/span&gt;;
      &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; DioExceptionType.connectionError:
        errorMsg = &lt;span class=&quot;hljs-string&quot;&gt;&#39;链接错误&#39;&lt;/span&gt;;
      &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; DioExceptionType.unknown:
        errorMsg = &lt;span class=&quot;hljs-string&quot;&gt;&#39;未知错误&#39;&lt;/span&gt;;
    }

    &lt;span class=&quot;hljs-built_in&quot;&gt;int?&lt;/span&gt; code = error.response?.statusCode;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (code != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {
      &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; codeString = code.toString();
      errorMsg = _errorCodeMessage[codeString] ?? &lt;span class=&quot;hljs-string&quot;&gt;&quot;网络异常&quot;&lt;/span&gt;;
    }

    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isShowHttpErrorMsg) {
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (kDebugMode) {
        errorMsg = &lt;span class=&quot;hljs-string&quot;&gt;&quot;网络异常&quot;&lt;/span&gt;;
      }
      ToastUtil.showToast(msg: errorMsg);
    }
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;网络异常&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; _handleDataError(Response response) {
    &lt;span class=&quot;hljs-built_in&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt; _data = {};
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (response.data &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Map&lt;/span&gt;) {
      _data = response.data &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt;;
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (response.data &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;) {
      _data = response.data.toMap();
    }
    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;num?&lt;/span&gt; code = JsonTypeAdapter.safeParseNumber(_data[&lt;span class=&quot;hljs-string&quot;&gt;&#39;code&#39;&lt;/span&gt;]);
    &lt;span class=&quot;hljs-comment&quot;&gt;// 检查 code 是否为 0&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (code != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; code.toInt() != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {
      &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; message = _data[&lt;span class=&quot;hljs-string&quot;&gt;&#39;message&#39;&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;String?&lt;/span&gt; ?? &lt;span class=&quot;hljs-string&quot;&gt;&#39;未知错误&#39;&lt;/span&gt;;
      ToastUtil.showToast(msg: message);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-36&quot;&gt;5、日志拦截器&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;主要打印整个请求过程中的各个参数&amp;amp;状态&amp;amp;耗时&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、请求方式: ${options.method}&lt;/li&gt;
&lt;li&gt;2、请求URL: ${options.uri}&lt;/li&gt;
&lt;li&gt;3、请求Headers: ${options.headers}&lt;/li&gt;
&lt;li&gt;4、网络请求耗时：${entTime - startTime} ms&lt;/li&gt;
&lt;li&gt;5、DNS: ${timings[&#39;dns&#39;]}ms&lt;/li&gt;
&lt;li&gt;6、TCP: ${timings[&#39;tcp&#39;]}ms&lt;/li&gt;
&lt;li&gt;7、SSL: ${timings[&#39;ssl&#39;]}ms&lt;/li&gt;
&lt;li&gt;8、首包: ${timings[&#39;first_packet&#39;]}ms&lt;/li&gt;
&lt;li&gt;9、响应状态码: ${response.statusCode}&lt;/li&gt;
&lt;li&gt;10、响应头：${response.headers}&lt;/li&gt;
&lt;li&gt;11、响应: ${response.data}&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-dart&quot; lang=&quot;dart&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;CustomLogInterceptor&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Interceptor&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-comment&quot;&gt;// 用于存储每个请求的开始时间&lt;/span&gt;
  &lt;span class=&quot;hljs-built_in&quot;&gt;Map&lt;/span&gt;&amp;lt;RequestOptions, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt; requestStartTimeMap = {};

  &lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; onRequest(RequestOptions options, RequestInterceptorHandler handler) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 记录请求开始时间&lt;/span&gt;
    requestStartTimeMap[options] = MyDateTimeUtil.getTimeStamp();
    handler.next(options);
  }

  &lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; onResponse(Response response, ResponseInterceptorHandler handler) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 记录响应日志&lt;/span&gt;
    _logResponse(response);
    handler.next(response);
  }

  &lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; onError(DioError error, ErrorInterceptorHandler handler) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 记录错误日志&lt;/span&gt;
    _logError(error);
    handler.next(error);
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;// 记录响应日志&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; _logResponse(Response response) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 获取请求开始时间&lt;/span&gt;
    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; startTime = requestStartTimeMap[response.requestOptions] ?? &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;hljs-comment&quot;&gt;// 当前时间戳&lt;/span&gt;
    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; entTime = MyDateTimeUtil.getTimeStamp();
    &lt;span class=&quot;hljs-comment&quot;&gt;// 从 extra 中读取耗时指标&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; timings = response.requestOptions.extra &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt;;
    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; options = response.requestOptions;
    Log.error(&lt;span class=&quot;hljs-string&quot;&gt;&#39;&#39;&#39;
 
      请求方式: &lt;span class=&quot;hljs-subst&quot;&gt;${options.method}&lt;/span&gt;
      请求URL: &lt;span class=&quot;hljs-subst&quot;&gt;${options.uri}&lt;/span&gt;
      请求Headers: &lt;span class=&quot;hljs-subst&quot;&gt;${options.headers}&lt;/span&gt;
      网络请求耗时：&lt;span class=&quot;hljs-subst&quot;&gt;${entTime - startTime}&lt;/span&gt; ms
      DNS: &lt;span class=&quot;hljs-subst&quot;&gt;${timings[&lt;span class=&quot;hljs-string&quot;&gt;&#39;dns&#39;&lt;/span&gt;]}&lt;/span&gt;ms
      TCP: &lt;span class=&quot;hljs-subst&quot;&gt;${timings[&lt;span class=&quot;hljs-string&quot;&gt;&#39;tcp&#39;&lt;/span&gt;]}&lt;/span&gt;ms
      SSL: &lt;span class=&quot;hljs-subst&quot;&gt;${timings[&lt;span class=&quot;hljs-string&quot;&gt;&#39;ssl&#39;&lt;/span&gt;]}&lt;/span&gt;ms 
      首包: &lt;span class=&quot;hljs-subst&quot;&gt;${timings[&lt;span class=&quot;hljs-string&quot;&gt;&#39;first_packet&#39;&lt;/span&gt;]}&lt;/span&gt;ms
      响应状态码: &lt;span class=&quot;hljs-subst&quot;&gt;${response.statusCode}&lt;/span&gt;
      响应头：&lt;span class=&quot;hljs-subst&quot;&gt;${response.headers}&lt;/span&gt;
      响应: &lt;span class=&quot;hljs-subst&quot;&gt;${response.data}&lt;/span&gt;
    &#39;&#39;&#39;&lt;/span&gt;);
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;// 记录错误日志&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; _logError(DioError error) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 获取请求开始时间&lt;/span&gt;
    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; startTime = requestStartTimeMap[error.requestOptions] ?? &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;hljs-comment&quot;&gt;// 当前时间戳&lt;/span&gt;
    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; entTime = MyDateTimeUtil.getTimeStamp();
    &lt;span class=&quot;hljs-comment&quot;&gt;// 从 extra 中读取耗时指标&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; timings =
        error.response?.requestOptions.extra &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt;;
    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; options = error.requestOptions;
    Log.error(&lt;span class=&quot;hljs-string&quot;&gt;&#39;&#39;&#39;
    网络请求错误:
      请求方式: &lt;span class=&quot;hljs-subst&quot;&gt;${options.method}&lt;/span&gt;
      请求URL: &lt;span class=&quot;hljs-subst&quot;&gt;${options.uri}&lt;/span&gt;
      请求Headers: &lt;span class=&quot;hljs-subst&quot;&gt;${options.headers}&lt;/span&gt;
      网络请求耗时：&lt;span class=&quot;hljs-subst&quot;&gt;${entTime - startTime}&lt;/span&gt; 毫秒
      DNS: &lt;span class=&quot;hljs-subst&quot;&gt;${timings[&lt;span class=&quot;hljs-string&quot;&gt;&#39;dns&#39;&lt;/span&gt;]}&lt;/span&gt;ms
      TCP: &lt;span class=&quot;hljs-subst&quot;&gt;${timings[&lt;span class=&quot;hljs-string&quot;&gt;&#39;tcp&#39;&lt;/span&gt;]}&lt;/span&gt;ms
      SSL: &lt;span class=&quot;hljs-subst&quot;&gt;${timings[&lt;span class=&quot;hljs-string&quot;&gt;&#39;ssl&#39;&lt;/span&gt;]}&lt;/span&gt;ms 
      首包: &lt;span class=&quot;hljs-subst&quot;&gt;${timings[&lt;span class=&quot;hljs-string&quot;&gt;&#39;first_packet&#39;&lt;/span&gt;]}&lt;/span&gt;ms
      &lt;span class=&quot;hljs-subst&quot;&gt;${error.toString()}&lt;/span&gt;
    &#39;&#39;&#39;&lt;/span&gt;);
  }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-37&quot;&gt;6、数据转换拦截器&lt;/h3&gt;
&lt;p&gt;数据转换拦截器将请求或响应的数据在发送或接收时进行转换，例如将 JSON 数据转换为自定义的数据模型，或者对数据进行加密 / 解密。可以确保数据的格式和安全性符合应用的要求&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-kotlin&quot; lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DataTransformInterceptor&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Interceptor&lt;/span&gt; {
  &lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;
  void onRequest(RequestOptions options, RequestInterceptorHandler handler) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (options.&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt; != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; options.&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; Map&amp;lt;String, &lt;span class=&quot;hljs-keyword&quot;&gt;dynamic&lt;/span&gt;&amp;gt;) {
      options.&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt; = jsonEncode(options.&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;);
    }
    handler.next(options);
  }

  &lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;
  void onResponse(Response response, ResponseInterceptorHandler handler) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (response.&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; String) {
      response.&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt; = jsonDecode(response.&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;);
    }
    handler.next(response);
  }
}

&lt;/code&gt;&lt;/pre&gt;</description><link>https://juejin.cn/post/7475651131449819136</link><guid isPermaLink="false">https://juejin.cn/post/7475651131449819136</guid><pubDate>Thu, 27 Feb 2025 02:14:43 GMT</pubDate><author>SunshineBrother</author><category>iOS</category><category>Flutter</category><category>Android</category></item><item><title>关于我在 iOS 开发中用 Swift 实现的两个交互效果</title><description>&lt;h2 data-id=&quot;heading-0&quot;&gt;Swift + UIView 实现通过透明度的判读进行事件穿透&lt;/h2&gt;
&lt;p&gt;在开发过程中会有这样一种场景：在一个页面A上有一个透明或者半透明的view B，希望在点击ViewB的透明或者半透明区域的时候，将点击事件透传给下层页面A。像下面这样，在蓝色的发布球动画播放播放结束后，有一部分发布球区域是透明的，此时我们希望这部分区域不响应发布球的点击事件，而是将手势透传到背后的背景，可能点击或者滑动。
&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/12cd59fdb36043489cc47769ed6a8fb7~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5piO6L-c5rmW5LmL6bG8:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742804448&amp;amp;x-signature=elUcdaJSN5sfJk%2Bw2icc9hpf684%3D&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;废话不多说，swift实现如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;@objc&lt;/span&gt;Members
&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewB&lt;/span&gt; : &lt;span class=&quot;hljs-title class_&quot;&gt;UIView&lt;/span&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 如果点击点是透明的，则手势透传&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;point&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;inside&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;point&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;CGPoint&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UIEvent&lt;/span&gt;?) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Bool&lt;/span&gt; {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; alphaOfPoint(point: point) &lt;span class=&quot;hljs-operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
    }
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;alphaOfPoint&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;point&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;CGPoint&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt; {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; alphaOfPointFromLayer(point: point)
    }

    &lt;span class=&quot;hljs-comment&quot;&gt;// 判断点击点的透明度&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;alphaOfPointFromLayer&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;point&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;CGPoint&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt; {
        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; pixel &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;hljs-type&quot;&gt;UInt8&lt;/span&gt;](&lt;span class=&quot;hljs-built_in&quot;&gt;repeatElement&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, count: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;))
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; colorSpace &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;CGColorSpaceCreateDeviceRGB&lt;/span&gt;()
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; context &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;CGContext&lt;/span&gt;(data: &lt;span class=&quot;hljs-operator&quot;&gt;&amp;amp;&lt;/span&gt;pixel, width: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, height: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, bitsPerComponent: &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, bytesPerRow: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, space: colorSpace, bitmapInfo: &lt;span class=&quot;hljs-type&quot;&gt;CGImageAlphaInfo&lt;/span&gt;.premultipliedLast.rawValue)
               context&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.setBlendMode(.copy)
               context&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.translateBy(x: &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;point.x, y: &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;point.y)
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; context &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; context {
            layer.render(in: context)
        }
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; alpha &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt;(pixel[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]) &lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;255.0&lt;/span&gt;)
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; alpha
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;point(inside:with:)方法是&amp;nbsp;UIView&amp;nbsp;的一个覆盖方法，用于判断某个点是否在视图的可响应区域内。返回&amp;nbsp;true&amp;nbsp;表示该点在视图的边界内，返回false表示该点在视图的边界外。&lt;/li&gt;
&lt;li&gt;如果子视图不透明部分覆盖了&amp;nbsp;ViewB&amp;nbsp;的某个区域，那么在相应点上的透明度将是子视图的透明度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 data-id=&quot;heading-1&quot;&gt;Swift + UIScrollView 实现简易的多Tab横滑组件&lt;/h2&gt;
&lt;p&gt;在开发中，嵌套滚动视图（NestScrollView）是一种常见的UI组件，通常用于实现类似于Tab栏与内容页联动的效果。&lt;br&gt;&lt;img src=&quot;https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/7c6cbac6c2dd45489af06b902b520fb6~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5piO6L-c5rmW5LmL6bG8:q75.awebp?rk3s=f64ab15b&amp;amp;x-expires=1742804448&amp;amp;x-signature=nnILy8Q2CHnSTgGHdo3nUK5juYg%3D&quot; alt=&quot;NestScrollView.gif&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;p&gt;在代码实现中，updateTabButtonSelection(selectedIndex:)&amp;nbsp;和&amp;nbsp;scrollViewDidScroll(_:)&amp;nbsp;是实现&amp;nbsp;Tab 栏与内容页联动&amp;nbsp;的核心方法，联动协作流程:&lt;/p&gt;
&lt;p&gt;1.用户点击 Tab 按钮：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-scss&quot; lang=&quot;scss&quot;&gt;→ 触发&amp;nbsp;&lt;span class=&quot;hljs-built_in&quot;&gt;tabButtonTapped&lt;/span&gt;(_:)
→ 调用&amp;nbsp;&lt;span class=&quot;hljs-built_in&quot;&gt;updateTabButtonSelection&lt;/span&gt;(selectedIndex:)
→ 更新按钮状态并滚动 Tab 栏。
→ 手动设置&amp;nbsp;contentScrollView&amp;nbsp;的偏移量。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2.用户滑动内容页：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-scss&quot; lang=&quot;scss&quot;&gt;→ 触发&amp;nbsp;&lt;span class=&quot;hljs-built_in&quot;&gt;scrollViewDidScroll&lt;/span&gt;(_:)
→ 计算当前页面索引。
→ 超过阈值时更新&amp;nbsp;curSelectedIndex。
→ 调用&amp;nbsp;&lt;span class=&quot;hljs-built_in&quot;&gt;updateTabButtonSelection&lt;/span&gt;(selectedIndex:)
→ 同步 Tab 栏状态。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;废话不多说，swift实现如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; UIKit

&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; mockData: [[&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;]] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; [
    [&lt;span class=&quot;hljs-string&quot;&gt;&quot;tabName&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;tab0&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;tabContent&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;page0&quot;&lt;/span&gt;],
    [&lt;span class=&quot;hljs-string&quot;&gt;&quot;tabName&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;tab1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;tabContent&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;page1&quot;&lt;/span&gt;],
    [&lt;span class=&quot;hljs-string&quot;&gt;&quot;tabName&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;tab2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;tabContent&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;page2&quot;&lt;/span&gt;],
    [&lt;span class=&quot;hljs-string&quot;&gt;&quot;tabName&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;tab3&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;tabContent&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;page3&quot;&lt;/span&gt;],
    [&lt;span class=&quot;hljs-string&quot;&gt;&quot;tabName&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;tab4&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;tabContent&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;page4&quot;&lt;/span&gt;],
    [&lt;span class=&quot;hljs-string&quot;&gt;&quot;tabName&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;tab5&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;tabContent&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;page5&quot;&lt;/span&gt;],
    [&lt;span class=&quot;hljs-string&quot;&gt;&quot;tabName&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;tab6&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;tabContent&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;page6&quot;&lt;/span&gt;]
]

&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NestScrollView&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIView&lt;/span&gt; {
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; buttonWidth: &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// 按钮的宽度&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; tabBarHeight: &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// TabBar的高度&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; pageHeight: &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;200.0&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// PageView的高度&lt;/span&gt;
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; numberOfItems: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// 页面的数量&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; curSelectedIndex: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// 跟踪当前选中的索引&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; colors: [&lt;span class=&quot;hljs-type&quot;&gt;UIColor&lt;/span&gt;] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; [.red, .black, .orange, .brown, .green, .cyan, .purple]

    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; containerView: &lt;span class=&quot;hljs-type&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UIView&lt;/span&gt;()
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; tabBarScrollView: &lt;span class=&quot;hljs-type&quot;&gt;UIScrollView&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UIScrollView&lt;/span&gt;()
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; buttons: [&lt;span class=&quot;hljs-type&quot;&gt;UIButton&lt;/span&gt;] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; []
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; contentScrollView: &lt;span class=&quot;hljs-type&quot;&gt;UIScrollView&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UIScrollView&lt;/span&gt;()
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;init&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;frame&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;CGRect&lt;/span&gt;) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;init&lt;/span&gt;(frame: frame)
        numberOfItems &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; mockData.count
        setupView()
    }
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;init?&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;coder&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;NSCoder&lt;/span&gt;) {
        &lt;span class=&quot;hljs-built_in&quot;&gt;fatalError&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;init(coder:) has not been implemented&quot;&lt;/span&gt;)
    }
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setupView&lt;/span&gt;() {
        tabBarScrollView.backgroundColor &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; .lightGray
        tabBarScrollView.showsHorizontalScrollIndicator &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
        addSubview(tabBarScrollView)
        
        contentScrollView.backgroundColor &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; .clear
        contentScrollView.isPagingEnabled &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
        contentScrollView.showsHorizontalScrollIndicator &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
        contentScrollView.delegate &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;//        contentScrollView.isScrollEnabled = false // 禁用滚动，只通过按钮点击切换页面&lt;/span&gt;
        addSubview(contentScrollView)
    }
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;layoutSubviews&lt;/span&gt;() {
        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.layoutSubviews()
        containerView.frame &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;CGRect&lt;/span&gt;(x: &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;, y: &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;, width: bounds.width, height: bounds.height);
        layoutTabBar()
        layoutContentScrollView()
    }
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;layoutTabBar&lt;/span&gt;() {
        tabBarScrollView.frame &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;CGRect&lt;/span&gt;(x: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, y: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, width: bounds.width, height: tabBarHeight)
        tabBarScrollView.contentSize &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;CGSize&lt;/span&gt;(width: buttonWidth &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt;(numberOfItems), height: tabBarHeight)
        
        &lt;span class=&quot;hljs-comment&quot;&gt;// 移除已存在的子视图&lt;/span&gt;
        buttons.forEach { &lt;span class=&quot;hljs-variable&quot;&gt;$0&lt;/span&gt;.removeFromSuperview() }
        buttons.removeAll()
        
        &lt;span class=&quot;hljs-comment&quot;&gt;// 添加每一个 tabView&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (index, data) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; mockData.enumerated() {
            &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; button &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UIButton&lt;/span&gt;(type: .system)
            button.setTitle(data[&lt;span class=&quot;hljs-string&quot;&gt;&quot;tabName&quot;&lt;/span&gt;], for: .normal)
            button.tag &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; index
            button.addTarget(&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;, action: &lt;span class=&quot;hljs-keyword&quot;&gt;#selector&lt;/span&gt;(tabButtonTapped(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt;:)), for: .touchUpInside)
            button.frame &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;CGRect&lt;/span&gt;(x: buttonWidth &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt;(index), y: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, width: buttonWidth, height: tabBarHeight)
            buttons.append(button)
            tabBarScrollView.addSubview(button)
        }
        
        &lt;span class=&quot;hljs-comment&quot;&gt;// 初始化选中&lt;/span&gt;
        updateTabButtonSelection(selectedIndex: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)
    }
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;layoutContentScrollView&lt;/span&gt;() {
        &lt;span class=&quot;hljs-comment&quot;&gt;// 下面内容区的布局&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; pageWidth &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; containerView.frame.width

        contentScrollView.frame &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;CGRect&lt;/span&gt;(x: &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;, y: tabBarHeight, width: pageWidth, height: pageHeight)
        contentScrollView.contentSize &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;CGSize&lt;/span&gt;(width: &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt;(numberOfItems) &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; pageWidth, height: pageHeight)

        &lt;span class=&quot;hljs-comment&quot;&gt;// 移除已存在的子视图&lt;/span&gt;
        contentScrollView.subviews.forEach { &lt;span class=&quot;hljs-variable&quot;&gt;$0&lt;/span&gt;.removeFromSuperview() }
        
        &lt;span class=&quot;hljs-comment&quot;&gt;// 添加每一个 pageView&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (index, data) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; mockData.enumerated() {
            &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; pageView &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UIView&lt;/span&gt;(frame: &lt;span class=&quot;hljs-type&quot;&gt;CGRect&lt;/span&gt;(x: &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt;(index) &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; pageWidth, y: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, width: pageWidth, height: pageHeight))
            &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; colorIndex &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; index &lt;span class=&quot;hljs-operator&quot;&gt;%&lt;/span&gt; colors.count &lt;span class=&quot;hljs-comment&quot;&gt;// 颜色循环&lt;/span&gt;
            pageView.backgroundColor &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; colors[colorIndex]
            
            &lt;span class=&quot;hljs-comment&quot;&gt;// 添加一个标签到每个 pageView&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; label &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UILabel&lt;/span&gt;(frame: pageView.bounds)
            label.text &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; data[&lt;span class=&quot;hljs-string&quot;&gt;&quot;tabContent&quot;&lt;/span&gt;]
            label.textAlignment &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; .center
            label.textColor &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; .white
            label.font &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UIFont&lt;/span&gt;.boldSystemFont(ofSize: &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;)
            
            pageView.addSubview(label)
            
            contentScrollView.addSubview(pageView)
        }
    }

    
    &lt;span class=&quot;hljs-keyword&quot;&gt;@objc&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tabButtonTapped&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;sender&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UIButton&lt;/span&gt;) {
        curSelectedIndex &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sender.tag
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; offset &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;CGPoint&lt;/span&gt;(x: &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt;(curSelectedIndex) &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; contentScrollView.bounds.width, y: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)
        contentScrollView.setContentOffset(offset, animated: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)
        updateTabButtonSelection(selectedIndex: curSelectedIndex)
    }
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;updateTabButtonSelection&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;selectedIndex&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (index, button) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; buttons.enumerated() {
            button.isSelected &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (index &lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt; selectedIndex)
            button.setTitleColor(button.isSelected &lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt; .white : .black, for: .normal)
            button.backgroundColor &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; button.isSelected &lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt; .blue : .clear
        }
        
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; selectedButton &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; buttons[selectedIndex]
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; buttonFrame &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; selectedButton.frame
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; buttonLeftX &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; buttonFrame.minX
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; buttonRightX &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; buttonFrame.maxX
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; scrollOffset &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; tabBarScrollView.contentOffset.x
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; scrollWidth &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; tabBarScrollView.bounds.width
        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newOffset: &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; scrollOffset
        
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; buttonLeftX &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; scrollOffset {
            newOffset &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; buttonLeftX
        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; buttonRightX &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; scrollOffset &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; scrollWidth {
            newOffset &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; buttonRightX &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; scrollWidth
        }
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; maxOffset &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; tabBarScrollView.contentSize.width &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; scrollWidth
        newOffset &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(newOffset, maxOffset))
        tabBarScrollView.setContentOffset(&lt;span class=&quot;hljs-type&quot;&gt;CGPoint&lt;/span&gt;(x: newOffset, y: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), animated: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)
    }
}

&lt;span class=&quot;hljs-keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NestScrollView&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIScrollViewDelegate&lt;/span&gt; {
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;scrollViewDidScroll&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;scrollView&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UIScrollView&lt;/span&gt;) {
        &lt;span class=&quot;hljs-comment&quot;&gt;// 根据当前页面计算边界&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; pageWidth &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; containerView.frame.width
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; scrollThreshold &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; pageWidth &lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;
        
        &lt;span class=&quot;hljs-comment&quot;&gt;// 检测滚动距离，只有当距离超过阈值时才更新页面&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; contentOffset &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; scrollView.contentOffset.x
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; pageIndex &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;((contentOffset &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; (pageWidth &lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)) &lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt; pageWidth) &lt;span class=&quot;hljs-comment&quot;&gt;// 计算出当前页索引&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; scrollDelta &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; contentOffset &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt;(curSelectedIndex) &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; pageWidth
        
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;abs&lt;/span&gt;(scrollDelta) &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; scrollThreshold &lt;span class=&quot;hljs-operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; pageIndex &lt;span class=&quot;hljs-operator&quot;&gt;!=&lt;/span&gt; curSelectedIndex &lt;span class=&quot;hljs-operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; pageIndex &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; pageIndex &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; numberOfItems {
            curSelectedIndex &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; pageIndex
            updateTabButtonSelection(selectedIndex: curSelectedIndex)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意：评论区有朋友提到tab按钮不定宽时怎么处理，我实际开发中遇到的也是这种情况（只不过demo简易处理了）。我的做法是手动计算内容宽度使得每个按钮宽度正确和tabBar总宽度正确，文本按钮可以用tabName.boundingRec计算（传入字体、字号等参数就可以了），图片按钮可以用图片宽高实现缩放计算（因为渲染时高度是固定的，注意图片加载是异步的，得加载完成才能计算）。计算宽度时需要注意的细节是计算出来的宽度可能处于临界值丢精度导致出现文字内容显示省略号，因此宽度+1。&lt;/strong&gt;&lt;/p&gt;</description><link>https://juejin.cn/post/7475262113431339046</link><guid isPermaLink="false">https://juejin.cn/post/7475262113431339046</guid><pubDate>Tue, 25 Feb 2025 14:57:10 GMT</pubDate><author>明远湖之鱼</author><category>iOS</category><category>前端</category><category>Swift</category></item><item><title>Appstore更新了过审发送的邮件，现在不说Congratulations!</title><description>&lt;h3 data-id=&quot;heading-0&quot;&gt;背景&lt;/h3&gt;
&lt;p&gt;最近提交代码更新维护，突然发现苹果邮件文案发生了变化。以为是被拒审核，结果是修改了文案。&lt;/p&gt;
&lt;p&gt;之前关于Appstore审核通过会发送两封邮件的。&lt;/p&gt;
&lt;h4 data-id=&quot;heading-1&quot;&gt;第一封：&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ruby&quot; lang=&quot;ruby&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Your&lt;/span&gt; submission was accepted
&lt;span class=&quot;hljs-title class_&quot;&gt;Congratulations&lt;/span&gt;! &lt;span class=&quot;hljs-title class_&quot;&gt;Your&lt;/span&gt; submission was
accepted &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; distribution.&lt;span class=&quot;hljs-title class_&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:xxxx&lt;/span&gt;..
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-2&quot;&gt;第二封：&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-erlang&quot; lang=&quot;erlang&quot;&gt;The status &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; your (ios) app,xxxx - x..
Hello xxxx xxxxx, The following app has beerapproved for distribution: App Name: xxxx.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-3&quot;&gt;改版邮件模板&lt;/h3&gt;
&lt;p&gt;修改文案之后，Appstore审核完成后依旧是发送两封邮件。所以看到&lt;code&gt;distribution&lt;/code&gt;。无须担心，你已经顺利通过审核了。✿✿ヽ(°▽°)ノ✿撒花~&lt;/p&gt;
&lt;h3 data-id=&quot;heading-4&quot;&gt;新版本邮件【一】&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-csharp&quot; lang=&quot;csharp&quot;&gt;Review of your submission &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; complete

Review of your submission has been completedIt &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; now eligible &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; distribution.Submission ..
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-5&quot;&gt;新版本邮件【二】&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-erlang&quot; lang=&quot;erlang&quot;&gt;Your app,xxxx-xxxxxx,is....
Hello xxxxx xx, The following app isready for distribution: App Name: xxxxx...
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-6&quot;&gt;最近情况&lt;/h3&gt;
&lt;p&gt;通过最近来咨询的客户了解到，苹果在进行一轮的复查。如果自身App存在问题或违规行为，请不要顶风作案。俗话说的好，&lt;code&gt;不打勤的不打懒得，专打不长眼的！&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;遵守规则，方得长治久安&lt;/code&gt;，最后祝大家大吉大利，今晚过审！&lt;/p&gt;</description><link>https://juejin.cn/post/7475204762359693322</link><guid isPermaLink="false">https://juejin.cn/post/7475204762359693322</guid><pubDate>Tue, 25 Feb 2025 09:15:56 GMT</pubDate><author>iOS阿玮</author><category>iOS</category><category>前端</category></item><item><title>Flutter 混合架构方案：多引擎</title><description>&lt;p&gt;在 Flutter 中，单引擎和多引擎是两种不同的应用开发模式，它们在性能、资源管理和使用场景等方面存在差异。&lt;/p&gt;
&lt;h3 data-id=&quot;heading-0&quot;&gt;单引擎模式&lt;/h3&gt;
&lt;p&gt;单引擎模式是指在一个 Flutter 应用中只使用一个 Flutter 引擎实例。这个引擎负责处理所有 Flutter 界面的渲染、动画、输入事件等。大多数简单的 Flutter 应用默认采用单引擎模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;资源占用少&lt;/strong&gt;：由于只使用一个引擎实例，内存和 CPU 等系统资源的占用相对较少，有助于提高应用的性能和电池续航能力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;状态管理简单&lt;/strong&gt;：整个应用的状态管理相对简单，因为所有的 Flutter 界面都在同一个引擎上下文中运行，数据共享和状态同步更加容易。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;启动速度快&lt;/strong&gt;：单引擎模式下，应用启动时只需初始化一个引擎实例，启动速度相对较快。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;灵活性差&lt;/strong&gt;：如果应用需要在不同的界面或模块之间进行复杂的隔离和交互，单引擎模式可能无法满足需求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;稳定性受影响&lt;/strong&gt;：一旦引擎出现问题，整个应用可能会受到影响。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-id=&quot;heading-1&quot;&gt;多引擎模式&lt;/h3&gt;
&lt;p&gt;多引擎模式是指在一个应用中使用多个 Flutter 引擎实例。每个引擎实例可以独立运行，负责不同的 Flutter 界面或模块。多引擎模式通常用于复杂的应用场景，如在一个原生应用中嵌入多个独立的 Flutter 页面。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;隔离性好&lt;/strong&gt;：不同的引擎实例之间相互隔离，一个引擎出现问题不会影响其他引擎的运行，提高了应用的稳定性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;灵活性高&lt;/strong&gt;：可以根据需要独立控制每个引擎的生命周期、状态和资源，实现更复杂的界面和交互逻辑。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;与原生集成更方便&lt;/strong&gt;：在原生应用中嵌入多个独立的 Flutter 页面时，多引擎模式可以更好地与原生代码进行集成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;资源占用多&lt;/strong&gt;：每个引擎实例都需要占用一定的系统资源，多个引擎实例会增加内存和 CPU 的负担，可能影响应用的性能和电池续航能力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;状态管理复杂&lt;/strong&gt;：不同引擎实例之间的数据共享和状态同步相对复杂，需要额外的机制来实现。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-2&quot;&gt;多引擎的典型场景&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;同一页面嵌入多个 Flutter 视图&lt;/strong&gt;
例如：一个原生 Android/iOS 页面中同时显示两个独立的 Flutter 界面。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多模块隔离&lt;/strong&gt;
不同 Flutter 模块需要独立的状态管理或插件环境。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;混合栈管理&lt;/strong&gt;
在原生和 Flutter 混合导航时，为不同页面分配独立引擎以避免状态冲突。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 data-id=&quot;heading-3&quot;&gt;多引擎方案 FlutterEngineGroup&lt;/h2&gt;
&lt;h3 data-id=&quot;heading-4&quot;&gt;简单使用&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-5&quot;&gt;1. &lt;strong&gt;Android 平台&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;使用 &lt;code&gt;FlutterEngineGroup&lt;/code&gt;（推荐）或手动创建多个 &lt;code&gt;FlutterEngine&lt;/code&gt; 实例。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-scss&quot; lang=&quot;scss&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 使用 FlutterEngineGroup 创建引擎&lt;/span&gt;
val engineGroup = &lt;span class=&quot;hljs-built_in&quot;&gt;FlutterEngineGroup&lt;/span&gt;(context)
val engine1 = engineGroup&lt;span class=&quot;hljs-selector-class&quot;&gt;.createAndRunEngine&lt;/span&gt;(
    context, DartExecutor.DartEntrypoint.createDefault()
)
val engine2 = engineGroup&lt;span class=&quot;hljs-selector-class&quot;&gt;.createAndRunEngine&lt;/span&gt;(
    context, DartExecutor.DartEntrypoint.createDefault()
)

&lt;span class=&quot;hljs-comment&quot;&gt;// 将引擎绑定到 FlutterView&lt;/span&gt;
val flutterView1 = &lt;span class=&quot;hljs-built_in&quot;&gt;FlutterView&lt;/span&gt;(context)&lt;span class=&quot;hljs-selector-class&quot;&gt;.apply&lt;/span&gt; {
    &lt;span class=&quot;hljs-built_in&quot;&gt;attachToFlutterEngine&lt;/span&gt;(engine1)
}
val flutterView2 = &lt;span class=&quot;hljs-built_in&quot;&gt;FlutterView&lt;/span&gt;(context)&lt;span class=&quot;hljs-selector-class&quot;&gt;.apply&lt;/span&gt; {
    &lt;span class=&quot;hljs-built_in&quot;&gt;attachToFlutterEngine&lt;/span&gt;(engine2)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-6&quot;&gt;2. &lt;strong&gt;iOS 平台&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;使用 &lt;code&gt;FlutterEngineGroup&lt;/code&gt;（iOS 13+）或手动创建多个 &lt;code&gt;FlutterEngine&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-less&quot; lang=&quot;less&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 创建引擎组&lt;/span&gt;
&lt;span class=&quot;hljs-selector-tag&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;engineGroup&lt;/span&gt; = &lt;span class=&quot;hljs-selector-tag&quot;&gt;FlutterEngineGroup&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;group&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attribute&quot;&gt;project&lt;/span&gt;: nil)

&lt;span class=&quot;hljs-comment&quot;&gt;// 生成引擎实例&lt;/span&gt;
&lt;span class=&quot;hljs-selector-tag&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;engine1&lt;/span&gt; = &lt;span class=&quot;hljs-selector-tag&quot;&gt;engineGroup&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.makeEngine&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;withEntrypoint&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;main&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attribute&quot;&gt;libraryURI&lt;/span&gt;: nil)
&lt;span class=&quot;hljs-selector-tag&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;engine2&lt;/span&gt; = &lt;span class=&quot;hljs-selector-tag&quot;&gt;engineGroup&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.makeEngine&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;withEntrypoint&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;main&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attribute&quot;&gt;libraryURI&lt;/span&gt;: nil)

&lt;span class=&quot;hljs-comment&quot;&gt;// 绑定到 FlutterViewController&lt;/span&gt;
&lt;span class=&quot;hljs-selector-tag&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;flutterVC1&lt;/span&gt; = &lt;span class=&quot;hljs-selector-tag&quot;&gt;FlutterViewController&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;engine&lt;/span&gt;: engine1, &lt;span class=&quot;hljs-attribute&quot;&gt;nibName&lt;/span&gt;: nil, &lt;span class=&quot;hljs-attribute&quot;&gt;bundle&lt;/span&gt;: nil)
&lt;span class=&quot;hljs-selector-tag&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;flutterVC2&lt;/span&gt; = &lt;span class=&quot;hljs-selector-tag&quot;&gt;FlutterViewController&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;engine&lt;/span&gt;: engine2, &lt;span class=&quot;hljs-attribute&quot;&gt;nibName&lt;/span&gt;: nil, &lt;span class=&quot;hljs-attribute&quot;&gt;bundle&lt;/span&gt;: nil)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-7&quot;&gt;3. &lt;strong&gt;Flutter 侧配置&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;每个引擎默认独立运行，需确保入口点（&lt;code&gt;main()&lt;/code&gt;）支持多实例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-csharp&quot; lang=&quot;csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;()&lt;/span&gt; {
  runApp(MyApp()); &lt;span class=&quot;hljs-comment&quot;&gt;// 确保无全局静态状态冲突&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-8&quot;&gt;注意事项&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1、&lt;strong&gt;内存开销&lt;/strong&gt;：每个引擎实例约占用 &lt;strong&gt;5-20MB&lt;/strong&gt; 内存，需根据设备性能合理控制引擎数量。&lt;/li&gt;
&lt;li&gt;2、&lt;strong&gt;插件注册&lt;/strong&gt;：每个引擎需单独注册插件（通过 &lt;code&gt;GeneratedPluginRegistrant&lt;/code&gt;）。若插件依赖原生上下文（如相机），需确保多引擎下的兼容性。&lt;/li&gt;
&lt;li&gt;3、&lt;strong&gt;生命周期管理&lt;/strong&gt;：在页面销毁时调用 &lt;code&gt;destroy()&lt;/code&gt; 释放引擎&lt;/li&gt;
&lt;li&gt;4、&lt;strong&gt;共享数据&lt;/strong&gt;：不同引擎间无法直接共享内存，需通过原生层中转（如 &lt;code&gt;MethodChannel&lt;/code&gt; 或 &lt;code&gt;EventChannel&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-id=&quot;heading-9&quot;&gt;引擎池（iOS端）&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FlutterEnginePool&lt;/span&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// MARK: - 单例&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; shared &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;FlutterEnginePool&lt;/span&gt;()
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;init&lt;/span&gt;() {}
    
    &lt;span class=&quot;hljs-comment&quot;&gt;// MARK: - 核心属性&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; engineGroup &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;FlutterEngineGroup&lt;/span&gt;(name: &lt;span class=&quot;hljs-string&quot;&gt;&quot;flutter_engine_pool&quot;&lt;/span&gt;, project: &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;)
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; activeEngines: [&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;FlutterEngine&lt;/span&gt;] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; [:]  &lt;span class=&quot;hljs-comment&quot;&gt;// 使用中的引擎 [路由标识: 引擎]&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; idleEngines: [&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;FlutterEngine&lt;/span&gt;] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; [:]    &lt;span class=&quot;hljs-comment&quot;&gt;// 闲置引擎池&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; queue &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;DispatchQueue&lt;/span&gt;(label: &lt;span class=&quot;hljs-string&quot;&gt;&quot;com.flutter.engine.pool.lock&quot;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;// 线程安全队列&lt;/span&gt;
    
    &lt;span class=&quot;hljs-comment&quot;&gt;// MARK: - 配置参数&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; maxIdleCount &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;           &lt;span class=&quot;hljs-comment&quot;&gt;// 最大闲置引擎数&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; maxIdleTime: &lt;span class=&quot;hljs-type&quot;&gt;TimeInterval&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// 闲置超时时间（秒）&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; timer: &lt;span class=&quot;hljs-type&quot;&gt;Timer&lt;/span&gt;?              &lt;span class=&quot;hljs-comment&quot;&gt;// 闲置检测定时器&lt;/span&gt;
    
    &lt;span class=&quot;hljs-comment&quot;&gt;// MARK: - 公开方法&lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;/// 获取引擎（按路由标识）&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getEngine&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;route&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;FlutterEngine&lt;/span&gt; {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; queue.sync {
            &lt;span class=&quot;hljs-comment&quot;&gt;// 1. 查找可用闲置引擎&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; engine &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; idleEngines.removeValue(forKey: route) {
                activeEngines[route] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; engine
                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; engine
            }
            
            &lt;span class=&quot;hljs-comment&quot;&gt;// 2. 创建新引擎&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; engine &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; engineGroup.makeEngine(
                withEntrypoint: &lt;span class=&quot;hljs-string&quot;&gt;&quot;main&quot;&lt;/span&gt;,
                libraryURI: &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;,
                initialRoute: route
            )
            &lt;span class=&quot;hljs-type&quot;&gt;GeneratedPluginRegistrant&lt;/span&gt;.register(with: engine)
            activeEngines[route] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; engine
            
            &lt;span class=&quot;hljs-comment&quot;&gt;// 3. 启动闲置检测&lt;/span&gt;
            startIdleCheckTimer()
            
            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; engine
        }
    }
    
    &lt;span class=&quot;hljs-comment&quot;&gt;/// 归还引擎到池中&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;recycleEngine&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;route&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;) {
        queue.async {
            &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; engine &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.activeEngines.removeValue(forKey: route) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; }
            
            &lt;span class=&quot;hljs-comment&quot;&gt;// 1. 超过最大闲置数时销毁最旧的引擎&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.idleEngines.count &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.maxIdleCount, &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; firstKey &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.idleEngines.keys.first {
                &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.idleEngines.removeValue(forKey: firstKey)&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.destroyContext()
            }
            
            &lt;span class=&quot;hljs-comment&quot;&gt;// 2. 记录闲置时间戳（用于LRU回收）&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; metadata &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;hljs-string&quot;&gt;&quot;recycleTime&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;()]
            engine.setMetadata(metadata)
            
            &lt;span class=&quot;hljs-comment&quot;&gt;// 3. 存入闲置池&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.idleEngines[route] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; engine
        }
    }
    
    &lt;span class=&quot;hljs-comment&quot;&gt;/// 强制销毁所有引擎（用于内存警告）&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;purgeAllEngines&lt;/span&gt;() {
        queue.async {
            &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.activeEngines.values.forEach { &lt;span class=&quot;hljs-variable&quot;&gt;$0&lt;/span&gt;.destroyContext() }
            &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.idleEngines.values.forEach { &lt;span class=&quot;hljs-variable&quot;&gt;$0&lt;/span&gt;.destroyContext() }
            &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.activeEngines.removeAll()
            &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.idleEngines.removeAll()
        }
    }
    
    &lt;span class=&quot;hljs-comment&quot;&gt;// MARK: - 私有方法&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;startIdleCheckTimer&lt;/span&gt;() {
        &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; timer &lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; }
        
        timer &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Timer&lt;/span&gt;.scheduledTimer(withTimeInterval: &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;, repeats: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;) { [&lt;span class=&quot;hljs-keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.checkIdleEngines()
        }
    }
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;checkIdleEngines&lt;/span&gt;() {
        queue.async {
            &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; now &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;()
            
            &lt;span class=&quot;hljs-comment&quot;&gt;// 清理超时引擎&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.idleEngines &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.idleEngines.filter { route, engine &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;
                &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; metadata &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; engine.metadata &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; [&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;Any&lt;/span&gt;],
                      &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; recycleTime &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; metadata[&lt;span class=&quot;hljs-string&quot;&gt;&quot;recycleTime&quot;&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
                }
                
                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; now.timeIntervalSince(recycleTime) &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.maxIdleTime {
                    engine.destroyContext()
                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
                }
                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
            }
        }
    }
}

&lt;span class=&quot;hljs-comment&quot;&gt;// MARK: - 内存警告扩展&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FlutterEnginePool&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setupMemoryWarningObserver&lt;/span&gt;() {
        &lt;span class=&quot;hljs-type&quot;&gt;NotificationCenter&lt;/span&gt;.default.addObserver(
            &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;,
            selector: &lt;span class=&quot;hljs-keyword&quot;&gt;#selector&lt;/span&gt;(handleMemoryWarning),
            name: &lt;span class=&quot;hljs-type&quot;&gt;UIApplication&lt;/span&gt;.didReceiveMemoryWarningNotification,
            object: &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;
        )
    }
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;@objc&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;handleMemoryWarning&lt;/span&gt;() {
        purgeAllEngines()
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-10&quot;&gt;&lt;strong&gt;在 App 启动时初始化&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// AppDelegate.swift&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;@main&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;AppDelegate&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;FlutterAppDelegate&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;application&lt;/span&gt;(
        &lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;application&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UIApplication&lt;/span&gt;,
        &lt;span class=&quot;hljs-params&quot;&gt;didFinishLaunchingWithOptions&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;launchOptions&lt;/span&gt;: [&lt;span class=&quot;hljs-type&quot;&gt;UIApplication&lt;/span&gt;.&lt;span class=&quot;hljs-params&quot;&gt;LaunchOptionsKey&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;Any&lt;/span&gt;]&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;
    ) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Bool&lt;/span&gt; {
        &lt;span class=&quot;hljs-comment&quot;&gt;// 初始化引擎池并启动内存监听&lt;/span&gt;
        &lt;span class=&quot;hljs-type&quot;&gt;FlutterEnginePool&lt;/span&gt;.shared.setupMemoryWarningObserver()
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.application(application, didFinishLaunchingWithOptions: launchOptions)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-11&quot;&gt;&lt;strong&gt;在原生界面中跳转 Flutter&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NativeViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIViewController&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;navigateToFlutterPage&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;route&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;) {
        &lt;span class=&quot;hljs-comment&quot;&gt;// 获取引擎&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; engine &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;FlutterEnginePool&lt;/span&gt;.shared.getEngine(for: route)
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; flutterVC &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;FlutterViewController&lt;/span&gt;(engine: engine, nibName: &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;, bundle: &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;)
        
        &lt;span class=&quot;hljs-comment&quot;&gt;// 跳转页面&lt;/span&gt;
        navigationController&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.pushViewController(flutterVC, animated: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)
    }
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onReturnFromFlutter&lt;/span&gt;() {
        &lt;span class=&quot;hljs-comment&quot;&gt;// 归还引擎（通常在 viewDidDisappear 或 Flutter 侧触发返回时调用）&lt;/span&gt;
        &lt;span class=&quot;hljs-type&quot;&gt;FlutterEnginePool&lt;/span&gt;.shared.recycleEngine(for: &lt;span class=&quot;hljs-string&quot;&gt;&quot;your_route_identifier&quot;&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-12&quot;&gt;&lt;strong&gt;Flutter 侧返回通知&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-php&quot; lang=&quot;php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 在 Flutter 页面中添加返回按钮逻辑&lt;/span&gt;
&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ElevatedButton&lt;/span&gt;(
  &lt;span class=&quot;hljs-attr&quot;&gt;onPressed&lt;/span&gt;: () {
    Navigator.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;pop&lt;/span&gt;(context); &lt;span class=&quot;hljs-comment&quot;&gt;// 退出当前页面&lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;// 通知 iOS 归还引擎&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;channel&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;MethodChannel&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;com.example/engine_channel&#39;&lt;/span&gt;);
    channel.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;invokeMethod&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;recycleEngine&#39;&lt;/span&gt;);
  },
  child: &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;返回原生&#39;&lt;/span&gt;),
)

&lt;span class=&quot;hljs-comment&quot;&gt;// iOS 端监听（在 AppDelegate 中）&lt;/span&gt;
&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;MethodChannel&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;com.example/engine_channel&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;binaryMessenger&lt;/span&gt;: engine.binaryMessenger)
  .setMethodCallHandler { call, _ in
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; call.method == &lt;span class=&quot;hljs-string&quot;&gt;&quot;recycleEngine&quot;&lt;/span&gt; {
      FlutterEnginePool.shared.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;recycleEngine&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;for&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;your_route_identifier&quot;&lt;/span&gt;)
    }
  }
&lt;/code&gt;&lt;/pre&gt;</description><link>https://juejin.cn/post/7474995524337500212</link><guid isPermaLink="false">https://juejin.cn/post/7474995524337500212</guid><pubDate>Tue, 25 Feb 2025 03:43:38 GMT</pubDate><author>SunshineBrother</author><category>iOS</category><category>Flutter</category></item><item><title>iOS 隐私清单配置指南（2024最新）| 含AFNetworking/SDWebImage等第三方库适配教程</title><description>&lt;p&gt;&lt;strong&gt;导语&lt;/strong&gt;：2024年5月起，苹果强制要求所有应用配置隐私清单（Privacy Manifest）。本文手把手教你为老项目适配隐私清单，并详解AFNetworking、SDWebImage等常用库的处理方案，避免审核被拒！&lt;/p&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-0&quot;&gt;一、为什么必须配置隐私清单？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;政策要求&lt;/strong&gt;：2024年5月1日后，未声明隐私清单的应用将无法通过App Store审核。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户信任&lt;/strong&gt;：明确数据收集行为（如位置、设备ID），提升用户对隐私保护的感知。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;规避风险&lt;/strong&gt;：未声明敏感API（如剪切板、文件路径）的使用可能导致下架。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-1&quot;&gt;二、隐私清单配置全流程（含代码示例）&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-2&quot;&gt;步骤1：创建主工程隐私清单文件&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;在Xcode中添加文件&lt;/strong&gt;：&lt;br&gt;
&lt;code&gt;File → New → File → iOS → Resource → Privacy Manifest File&lt;/code&gt;，命名为&lt;code&gt;PrivacyInfo.xcprivacy&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;声明数据收集类型&lt;/strong&gt;（示例）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-XML&quot; lang=&quot;XML&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;NSPrivacyCollectedDataTypes&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dict&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;NSPrivacyCollectedDataType&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;User ID&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;NSPrivacyCollectedDataTypeLinkedToUser&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;true&lt;/span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;NSPrivacyCollectedDataTypeTracking&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;false&lt;/span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;NSPrivacyCollectedDataTypePurposes&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;Analytics&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dict&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;声明敏感API使用&lt;/strong&gt;（以文件时间戳为例）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-XML&quot; lang=&quot;XML&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;NSPrivacyAccessedAPITypes&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dict&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;NSPrivacyAccessedAPIType&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;NSPrivacyAccessedAPICategoryFileTimestamp&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;NSPrivacyAccessedAPITypeReasons&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;DDA9.1&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- 原因代码 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dict&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-3&quot;&gt;三、常用第三方库的适配方案&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-4&quot;&gt;1.&amp;nbsp;&lt;strong&gt;AFNetworking（已停止维护）&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;：旧版本无隐私清单，需手动适配。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;解决方案&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;手动添加文件&lt;/strong&gt;：在AFNetworking目录中创建&lt;code&gt;PrivacyInfo.xcprivacy&lt;/code&gt;，声明其可能访问的API（如网络状态）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-XML&quot; lang=&quot;XML&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;NSPrivacyAccessedAPITypes&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dict&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;NSPrivacyAccessedAPIType&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;NSPrivacyAccessedAPICategoryNetwork&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;NSPrivacyAccessedAPITypeReasons&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;8FFB.1&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- 网络请求功能实现 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dict&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;替代方案&lt;/strong&gt;：迁移至Alamofire（内置隐私清单）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-5&quot;&gt;2.&amp;nbsp;&lt;strong&gt;SDWebImage（已适配）&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;推荐操作&lt;/strong&gt;：升级至最新版本（≥5.18.0），无需额外配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-6&quot;&gt;3.&amp;nbsp;&lt;strong&gt;Alamofire（官方推荐）&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优势&lt;/strong&gt;：原生支持隐私清单，无需手动处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-7&quot;&gt;四、常见错误与排查工具&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;审核被拒&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;错误原因&lt;/strong&gt;：未声明第三方库的数据收集（如广告SDK的IDFA）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;排查工具&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-Bash&quot; lang=&quot;Bash&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# 扫描二进制文件中的隐私API调用&lt;/span&gt;
nm YourApp.app/YourApp | grep -i &lt;span class=&quot;hljs-string&quot;&gt;&#39;CAAnimation|NSFileCreationDate&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;编译冲突&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;解决方案&lt;/strong&gt;：在Podfile中排除重复的隐私清单文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-Ruby&quot; lang=&quot;Ruby&quot;&gt;post_install &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;hljs-params&quot;&gt;installer&lt;/span&gt;|
  installer.pods_project.targets.each &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;hljs-params&quot;&gt;target&lt;/span&gt;|
    target.build_configurations.each &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;hljs-params&quot;&gt;config&lt;/span&gt;|
      &lt;span class=&quot;hljs-comment&quot;&gt;# 移除第三方库的隐私清单编译&lt;/span&gt;
      config.build_settings[&lt;span class=&quot;hljs-string&quot;&gt;&#39;CODE_SIGN_ENTITLEMENTS&#39;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&#39;&#39;&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;结语&lt;/strong&gt;：隐私清单配置已成为iOS开发者的必修课。本文提供的代码模板和第三方库适配方案，可帮助开发者快速满足苹果审核要求。立即行动，为你的应用添加隐私保护合规护盾！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;相关资源&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.apple.com%2Fdocumentation%2Fbundleresources%2Fprivacy_manifest_files&quot; target=&quot;_blank&quot; title=&quot;https://developer.apple.com/documentation/bundleresources/privacy_manifest_files&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;苹果官方隐私清单文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fprivacymanifest.dev%2F&quot; target=&quot;_blank&quot; title=&quot;https://privacymanifest.dev/&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;隐私API原因代码查询工具&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><link>https://juejin.cn/post/7474860598568697906</link><guid isPermaLink="false">https://juejin.cn/post/7474860598568697906</guid><pubDate>Mon, 24 Feb 2025 09:55:12 GMT</pubDate><author>JQShan</author><category>iOS</category><category>Apple</category></item><item><title>告别回调地狱！Swift 并发编程的新时代</title><description>&lt;p&gt;在 iOS 开发中，异步编程一直是一个绕不开的话题。从最初的 Block 回调，到 Combine 框架，再到现在的 async/await，Apple 一步步改进异步编程的方式，使代码更易读、更易维护。今天，我们就来聊聊 async/await 的优势，并深入探讨它如何帮助我们解决并发问题。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-0&quot;&gt;1. 回调地狱：异步编程的噩梦&lt;/h2&gt;
&lt;p&gt;在 iOS 早期，我们使用回调（Block）来处理异步任务，比如网络请求：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-less&quot; lang=&quot;less&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;fetchData&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;completion&lt;/span&gt;: &lt;span class=&quot;hljs-variable&quot;&gt;@escaping&lt;/span&gt; (Result&amp;lt;String, Error&amp;gt;) -&amp;gt; Void) {
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;DispatchQueue&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.global&lt;/span&gt;()&lt;span class=&quot;hljs-selector-class&quot;&gt;.async&lt;/span&gt; {
        &lt;span class=&quot;hljs-comment&quot;&gt;// 模拟网络请求&lt;/span&gt;
        &lt;span class=&quot;hljs-selector-tag&quot;&gt;sleep&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)
        &lt;span class=&quot;hljs-selector-tag&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;success&lt;/span&gt; = &lt;span class=&quot;hljs-selector-tag&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.random&lt;/span&gt;()
        &lt;span class=&quot;hljs-selector-tag&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;success&lt;/span&gt; {
            &lt;span class=&quot;hljs-selector-tag&quot;&gt;completion&lt;/span&gt;(.&lt;span class=&quot;hljs-built_in&quot;&gt;success&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;数据加载成功&quot;&lt;/span&gt;))
        } &lt;span class=&quot;hljs-selector-tag&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;hljs-selector-tag&quot;&gt;completion&lt;/span&gt;(.&lt;span class=&quot;hljs-built_in&quot;&gt;failure&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;NSError&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;domain&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;网络错误&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attribute&quot;&gt;code&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)))
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;虽然这样可以工作，但当任务依赖增多时，就会形成&lt;strong&gt;回调地狱&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;fetchData { result &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; result {
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; .&lt;span class=&quot;hljs-title function_&quot;&gt;success&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; data):
        &lt;span class=&quot;hljs-title function_&quot;&gt;processData&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;) { processedData &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;hljs-title function_&quot;&gt;saveToDatabase&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;processedData&lt;/span&gt;) { success &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;
                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; success {
                    &lt;span class=&quot;hljs-title function_&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;数据处理完成&quot;&lt;/span&gt;)
                }
            }
        }
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; .&lt;span class=&quot;hljs-title function_&quot;&gt;failure&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; error):
        &lt;span class=&quot;hljs-title function_&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;发生错误: \(error)&quot;&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;层层嵌套的回调不仅使代码可读性变差，还增加了错误处理的复杂度。Apple 需要一种更优雅的方式。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-1&quot;&gt;2. Combine 的改进，但仍然复杂&lt;/h2&gt;
&lt;p&gt;Combine 通过声明式 API 改进了回调问题，使代码更加流畅：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-scss&quot; lang=&quot;scss&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;fetchDataPublisher&lt;/span&gt;()
    &lt;span class=&quot;hljs-selector-class&quot;&gt;.map&lt;/span&gt; { &lt;span class=&quot;hljs-built_in&quot;&gt;processData&lt;/span&gt;($&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) }
    &lt;span class=&quot;hljs-selector-class&quot;&gt;.flatMap&lt;/span&gt; { &lt;span class=&quot;hljs-built_in&quot;&gt;saveToDatabase&lt;/span&gt;($&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) }
    &lt;span class=&quot;hljs-selector-class&quot;&gt;.sink&lt;/span&gt;(receiveCompletion: { completion in
        if case .failure(let error) = completion {
            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&quot;发生错误: \(error)&quot;)
        }
    }, receiveValue: { success in
        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&quot;数据处理完成: \(success)&quot;)
    })
    &lt;span class=&quot;hljs-selector-class&quot;&gt;.store&lt;/span&gt;(in: &amp;amp;cancellables)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但 Combine 仍然需要繁琐的操作符，且新手入门成本较高。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-2&quot;&gt;3. async/await：更优雅的异步解决方案&lt;/h2&gt;
&lt;p&gt;Swift 5.5 引入了 async/await，使异步代码看起来像同步代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetchData&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Task&lt;/span&gt;.sleep(nanoseconds: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1_000_000_000&lt;/span&gt;)
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Bool&lt;/span&gt;.random() {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;数据加载成功&quot;&lt;/span&gt;
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NSError&lt;/span&gt;(domain: &lt;span class=&quot;hljs-string&quot;&gt;&quot;网络错误&quot;&lt;/span&gt;, code: &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)
    }
}

&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;process&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; data &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; fetchData()
        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;数据处理完成: &lt;span class=&quot;hljs-subst&quot;&gt;\(data)&lt;/span&gt;&quot;&lt;/span&gt;)
    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; {
        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;发生错误: &lt;span class=&quot;hljs-subst&quot;&gt;\(error)&lt;/span&gt;&quot;&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码逻辑清晰、可读性高，没有回调地狱。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-3&quot;&gt;4. 并发问题：为什么需要 actor？&lt;/h2&gt;
&lt;p&gt;在引入 async/await 之前，我们使用 GCD 和 OperationQueue 进行并发处理。但并发访问共享资源时，可能会发生&lt;strong&gt;数据竞争&lt;/strong&gt;，导致难以复现的 bug。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-scss&quot; lang=&quot;scss&quot;&gt;class Counter {
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;var&lt;/span&gt; count = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
    
    func &lt;span class=&quot;hljs-built_in&quot;&gt;increment&lt;/span&gt;() {
        count += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;
    }
}

let counter = &lt;span class=&quot;hljs-built_in&quot;&gt;Counter&lt;/span&gt;()
DispatchQueue&lt;span class=&quot;hljs-selector-class&quot;&gt;.concurrentPerform&lt;/span&gt;(iterations: &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;) { _ in
    counter&lt;span class=&quot;hljs-selector-class&quot;&gt;.increment&lt;/span&gt;()
}
&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(counter.count) &lt;span class=&quot;hljs-comment&quot;&gt;// 可能不是 1000，出现数据竞争&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;原因在于&lt;strong&gt;值类型存储在栈上，线程独享；引用类型存储在堆上，多个线程共享&lt;/strong&gt;，如果多个线程同时修改 &lt;code&gt;count&lt;/code&gt;，结果可能是不确定的。&lt;/p&gt;
&lt;p&gt;Swift 通过&lt;strong&gt;actor&lt;/strong&gt; 解决了这个问题。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-4&quot;&gt;5. actor：解决并发数据竞争&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;actor&lt;/code&gt; 是 Swift 引入的一种并发安全的引用类型，确保同一时间只有一个任务可以访问它的内部状态。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SafeCounter&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; count &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;() {
        count &lt;span class=&quot;hljs-operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;
    }
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getCount&lt;/span&gt;() -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt; {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; count
    }
}

&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; counter &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;SafeCounter&lt;/span&gt;()
&lt;span class=&quot;hljs-type&quot;&gt;Task&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; counter.increment()
    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; counter.getCount())
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 &lt;code&gt;actor&lt;/code&gt; 内部，Swift 自动确保并发访问安全，使代码更易维护。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-5&quot;&gt;6. SwiftUI 中的 Task 和 .task 修饰符&lt;/h2&gt;
&lt;p&gt;在 SwiftUI 中，我们可以使用 &lt;code&gt;.task&lt;/code&gt; 修饰符启动异步任务：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-kotlin&quot; lang=&quot;kotlin&quot;&gt;struct ContentView: View {
    &lt;span class=&quot;hljs-meta&quot;&gt;@State&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;加载中...&quot;&lt;/span&gt;
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; body: some View {
        Text(&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;)
            .task {
                &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {
                    &lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; await fetchData()
                } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; {
                    &lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;发生错误&quot;&lt;/span&gt;
                }
            }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样，视图在加载时会自动调用 &lt;code&gt;fetchData()&lt;/code&gt;，避免使用 &lt;code&gt;onAppear {}&lt;/code&gt; 处理异步操作。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-6&quot;&gt;7. TaskGroup 处理多个异步任务&lt;/h2&gt;
&lt;p&gt;如果我们有多个并发任务需要执行，比如并行加载多张图片，可以使用 &lt;code&gt;TaskGroup&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-csharp&quot; lang=&quot;csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;func &lt;span class=&quot;hljs-title&quot;&gt;fetchMultipleData&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; -&amp;gt; [String]&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; withTaskGroup(of: String.self) { &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1.&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;.3&lt;/span&gt; {
            &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt;.addTask {
                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; fetchData() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\(i)&quot;&lt;/span&gt;
            }
        }
        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; results = [String]()
        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; result &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; {
            results.append(result)
        }
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; results
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;TaskGroup&lt;/code&gt; 允许多个任务并行执行，并在所有任务完成后收集结果。&lt;/p&gt;
&lt;h2 data-id=&quot;heading-7&quot;&gt;8. 总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;回调容易导致回调地狱，可读性差&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Combine 解决了部分问题，但学习成本高&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;async/await 让代码更简洁，解决异步回调问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;actor 解决并发数据竞争，保证线程安全&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SwiftUI &lt;code&gt;.task&lt;/code&gt; 让异步任务管理更方便&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;TaskGroup&lt;/code&gt; 适用于多个异步任务的并发处理&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;未来的 Swift 可能会继续演进并发模型，但目前 async/await 和 actor 已经是最佳实践，赶快用起来吧！&lt;/p&gt;</description><link>https://juejin.cn/post/7473143257456361523</link><guid isPermaLink="false">https://juejin.cn/post/7473143257456361523</guid><pubDate>Thu, 20 Feb 2025 03:32:54 GMT</pubDate><author>Aaron0927</author><category>iOS</category><category>Swift</category></item><item><title>Flutter go_router 路由管理详解&amp;封装</title><description>&lt;p&gt;&lt;code&gt;go_router&lt;/code&gt; 是一个用于 Flutter 应用的第三方路由管理库，它简化了应用内的路由导航逻辑，提供了声明式的路由配置方式，同时对 URL 有很好的支持，在 Web、移动端和桌面端都能表现出色。开始了解以前，你可以先看一下原生路由导航：&lt;a href=&quot;https://juejin.cn/post/6930508768983646216&quot; target=&quot;_blank&quot; title=&quot;https://juejin.cn/post/6930508768983646216&quot;&gt;Flutter 路由与导航&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FSunshineBrother%2Fflutter-tool%2Ftree%2Fmaster%2Fflutter_module%2Flib%2Fcore%2Frouter&quot; target=&quot;_blank&quot; title=&quot;https://github.com/SunshineBrother/flutter-tool/tree/master/flutter_module/lib/core/router&quot; ref=&quot;nofollow noopener noreferrer&quot;&gt;github地址&lt;/a&gt;&lt;/p&gt;
&lt;h3 data-id=&quot;heading-0&quot;&gt;go_router特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GoRouter的配置（routes, redirect, errorBuilder）&lt;/li&gt;
&lt;li&gt;导航方法（go, push, pop）&lt;/li&gt;
&lt;li&gt;命名路由（goNamed, pushNamed）&lt;/li&gt;
&lt;li&gt;路由参数传递（queryParams, extra）&lt;/li&gt;
&lt;li&gt;路由守卫（redirect函数）&lt;/li&gt;
&lt;li&gt;错误处理（errorBuilder）&lt;/li&gt;
&lt;li&gt;路由状态获取（location, route名称）&lt;/li&gt;
&lt;li&gt;嵌套路由（ShellRoute）&lt;/li&gt;
&lt;li&gt;监听路由变化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-id=&quot;heading-1&quot;&gt;1、 路由配置&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;GoRouter&lt;/code&gt; 是 &lt;code&gt;go_router&lt;/code&gt; 库的核心类，用于配置路由信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GoRouter 构造函数&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-swift&quot; lang=&quot;swift&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;GoRouter&lt;/span&gt;({
  &lt;span class=&quot;hljs-keyword&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;RouteBase&lt;/span&gt;&amp;gt; routes,
  &lt;span class=&quot;hljs-type&quot;&gt;GoRouterRedirect&lt;/span&gt;? redirect,
  &lt;span class=&quot;hljs-type&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;NavigatorObserver&lt;/span&gt;&amp;gt;? observers,
  &lt;span class=&quot;hljs-type&quot;&gt;GlobalKey&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;NavigatorState&lt;/span&gt;&amp;gt;? navigatorKey,
  &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;? initialLocation,
  bool&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt; debugLogDiagnostics,
  &lt;span class=&quot;hljs-type&quot;&gt;RouteInformationParser&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;Uri&lt;/span&gt;&amp;gt;? routeInformationParser,
  &lt;span class=&quot;hljs-type&quot;&gt;RouterDelegate&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;Uri&lt;/span&gt;&amp;gt;? routerDelegate,
  &lt;span class=&quot;hljs-type&quot;&gt;BackButtonDispatcher&lt;/span&gt;? backButtonDispatcher,
  &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; restorationScopeId,
})
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;routes&lt;/code&gt;：必填参数，用于定义应用的路由列表。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redirect&lt;/code&gt;：可选参数，用于在导航时进行重定向。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;observers&lt;/code&gt;：可选参数，用于监听导航事件的观察者列表。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;navigatorKey&lt;/code&gt;：可选参数，用于访问底层的 &lt;code&gt;Navigator&lt;/code&gt; 实例。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;initialLocation&lt;/code&gt;：可选参数，指定应用启动时的初始路由。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;debugLogDiagnostics&lt;/code&gt;：可选参数，是否在调试模式下打印路由诊断信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;使用示例&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-php&quot; lang=&quot;php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; GoRouter _router = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;GoRouter&lt;/span&gt;(
  &lt;span class=&quot;hljs-attr&quot;&gt;routes&lt;/span&gt;: &amp;lt;RouteBase&amp;gt;[
    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;GoRoute&lt;/span&gt;(
      &lt;span class=&quot;hljs-attr&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;/&#39;&lt;/span&gt;,
      &lt;span class=&quot;hljs-attr&quot;&gt;builder&lt;/span&gt;: (BuildContext context, GoRouterState state) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;HomePage&lt;/span&gt;();
      },
    ),
    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;GoRoute&lt;/span&gt;(
      &lt;span class=&quot;hljs-attr&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;/details&#39;&lt;/span&gt;,
      &lt;span class=&quot;hljs-attr&quot;&gt;builder&lt;/span&gt;: (BuildContext context, GoRouterState state) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;DetailsPage&lt;/span&gt;();
      },
    ),
  ],
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;GoRoute 路由定义&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-dart&quot; lang=&quot;dart&quot;&gt;GoRoute({
  &lt;span class=&quot;hljs-keyword&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; path,
  &lt;span class=&quot;hljs-keyword&quot;&gt;required&lt;/span&gt; WidgetBuilder builder,
  &lt;span class=&quot;hljs-built_in&quot;&gt;List&lt;/span&gt;&amp;lt;RouteBase&amp;gt;? routes,
  GoRouterRedirect? redirect,
  LocalKey? key,
  &lt;span class=&quot;hljs-built_in&quot;&gt;String?&lt;/span&gt; name,
  PageBuilder? pageBuilder,
  &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; maintainState = &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;,
  &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; fullscreenDialog = &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;,
})
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;required String path&lt;/code&gt;：这是一个必填参数，用于指定该路由对应的路径。路径可以是固定的字符串，也可以包含路径参数。路径参数使用冒号 &lt;code&gt;:&lt;/code&gt; 开头，用于匹配动态的值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;required WidgetBuilder builder&lt;/code&gt;：同样是必填参数，它是一个函数，用于构建该路由对应的 &lt;code&gt;Widget&lt;/code&gt;。该函数接收两个参数：&lt;code&gt;BuildContext context&lt;/code&gt; 和 &lt;code&gt;GoRouterState state&lt;/code&gt;，并返回一个 &lt;code&gt;Widget&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-csharp&quot; lang=&quot;csharp&quot;&gt;GoRoute(
  path: &lt;span class=&quot;hljs-string&quot;&gt;&#39;/&#39;&lt;/span&gt;,
  builder: (BuildContext context, GoRouterState state) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HomePage&lt;/span&gt;()&lt;/span&gt;;
  },
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;List&amp;lt;RouteBase&amp;gt;? routes&lt;/code&gt;：可选参数，用于定义该路由的子路由列表。子路由可以进一步细分当前路由的导航结构。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-less&quot; lang=&quot;less&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;GoRoute&lt;/span&gt;(
  &lt;span class=&quot;hljs-attribute&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;/settings&#39;&lt;/span&gt;,
  &lt;span class=&quot;hljs-attribute&quot;&gt;builder&lt;/span&gt;: (context, state) =&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;SettingsPage&lt;/span&gt;(),
  &lt;span class=&quot;hljs-attribute&quot;&gt;routes&lt;/span&gt;: [
    &lt;span class=&quot;hljs-built_in&quot;&gt;GoRoute&lt;/span&gt;(
      &lt;span class=&quot;hljs-attribute&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;notifications&#39;&lt;/span&gt;,
      &lt;span class=&quot;hljs-attribute&quot;&gt;builder&lt;/span&gt;: (context, state) =&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;NotificationSettingsPage&lt;/span&gt;(),
    ),
  ],
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/settings&lt;/code&gt; 是父路由，&lt;code&gt;/settings/notifications&lt;/code&gt; 是它的子路由。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;GoRouterRedirect? redirect&lt;/code&gt;：是一个重定向函数。该函数接收 &lt;code&gt;BuildContext context&lt;/code&gt; 和 &lt;code&gt;GoRouterState state&lt;/code&gt; 作为参数，并返回一个字符串或 &lt;code&gt;null&lt;/code&gt;。如果返回一个字符串，则表示重定向到该路径；如果返回 &lt;code&gt;null&lt;/code&gt;，则正常导航到当前路由。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;GoRoute&lt;/span&gt;(
  &lt;span class=&quot;hljs-attr&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;/secret&#39;&lt;/span&gt;,
  &lt;span class=&quot;hljs-attr&quot;&gt;redirect&lt;/span&gt;: (context, state) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 假设 isUserAuthenticated 是一个检查用户是否认证的函数&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title function_&quot;&gt;isUserAuthenticated&lt;/span&gt;()) {
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;/login&#39;&lt;/span&gt;;
    }
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;
  },
  &lt;span class=&quot;hljs-attr&quot;&gt;builder&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;context, state&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SecretPage&lt;/span&gt;(),
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果用户未认证，访问 &lt;code&gt;/secret&lt;/code&gt; 路径时会重定向到 &lt;code&gt;/login&lt;/code&gt; 路径。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LocalKey? key&lt;/code&gt;：于给该路由的 &lt;code&gt;Widget&lt;/code&gt; 提供一个唯一的键。键可以帮助 Flutter 更准确地识别和更新 &lt;code&gt;Widget&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;String? name&lt;/code&gt; ：为该路由指定一个名称。通过名称可以更方便地进行导航，而不需要记住具体的路径。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pageBuilder&lt;/code&gt;：是一个用于构建 &lt;code&gt;Page&lt;/code&gt; 对象的函数。与 &lt;code&gt;builder&lt;/code&gt; 不同，&lt;code&gt;pageBuilder&lt;/code&gt; 可以自定义页面的过渡效果等。如果同时提供了 &lt;code&gt;builder&lt;/code&gt; 和 &lt;code&gt;pageBuilder&lt;/code&gt;，&lt;code&gt;pageBuilder&lt;/code&gt; 会优先使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-less&quot; lang=&quot;less&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;GoRoute&lt;/span&gt;(
  &lt;span class=&quot;hljs-attribute&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;/details&#39;&lt;/span&gt;,
  &lt;span class=&quot;hljs-attribute&quot;&gt;pageBuilder&lt;/span&gt;: (context, state) {
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;MaterialPage&lt;/span&gt;(
      &lt;span class=&quot;hljs-attribute&quot;&gt;key&lt;/span&gt;: state.pageKey,
      &lt;span class=&quot;hljs-attribute&quot;&gt;child&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;DetailsPage&lt;/span&gt;(),
    );
  },
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;maintainState = true&lt;/code&gt;：表示当该路由离开导航栈时，是否保留其状态。如果设置为 &lt;code&gt;true&lt;/code&gt;，当再次返回该路由时，会恢复之前的状态；如果设置为 &lt;code&gt;false&lt;/code&gt;，每次进入该路由都会重新创建 &lt;code&gt;Widget&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;fullscreenDialog = false&lt;/code&gt;： 表示该路由是否以全屏对话框的形式显示。如果设置为 &lt;code&gt;true&lt;/code&gt;，在 Android 上会以全屏对话框的样式显示，在 iOS 上会有不同的过渡效果。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-id=&quot;heading-2&quot;&gt;路由参数&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;GoRouter&lt;/code&gt; 的每一个路由都通过 &lt;code&gt;GoRoute&lt;/code&gt;对象来配置，我们可以在构建 &lt;code&gt;GoRoute&lt;/code&gt; 对象时来配置路由参数。路由参数典型的就是路径参数，比如&lt;code&gt; /path/:{路径参数}&lt;/code&gt;，这个时候 &lt;code&gt;GoRoute&lt;/code&gt;的路径参数和很多 Web 框架的路由是一样的，通过一个英文冒号加参数名称就可以配置，之后我们可以在回调方法中通过 &lt;code&gt;GoRouterState&lt;/code&gt; 对象获取路径参数，这个参数就可以传递到路由跳转目的页面。&lt;/p&gt;
&lt;h5 data-id=&quot;heading-3&quot;&gt;1、路径参数（Path Parameters）&lt;/h5&gt;
&lt;p&gt;路径参数用于在路由路径中传递动态值，例如用户 ID、文章 ID 等。在定义路由时，使用冒号 &lt;code&gt;:&lt;/code&gt; 来标记路径参数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-dart&quot; lang=&quot;dart&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;package:flutter/material.dart&#39;&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;package:go_router/go_router.dart&#39;&lt;/span&gt;;

&lt;span class=&quot;hljs-comment&quot;&gt;// 定义一个接收路径参数的页面&lt;/span&gt;
&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UserPage&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StatelessWidget&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; userId;

  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; UserPage({Key? key, &lt;span class=&quot;hljs-keyword&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.userId}) : &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;(key: key);

  &lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;
  Widget build(BuildContext context) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Scaffold(
      appBar: AppBar(title: Text(&lt;span class=&quot;hljs-string&quot;&gt;&#39;User &lt;span class=&quot;hljs-subst&quot;&gt;$userId&lt;/span&gt;&#39;&lt;/span&gt;)),
      body: Center(
        child: Text(&lt;span class=&quot;hljs-string&quot;&gt;&#39;User ID: &lt;span class=&quot;hljs-subst&quot;&gt;$userId&lt;/span&gt;&#39;&lt;/span&gt;),
      ),
    );
  }
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 配置 GoRouter，定义包含路径参数的路由&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; GoRouter _router = GoRouter(
  routes: &amp;lt;RouteBase&amp;gt;[
    GoRoute(
      path: &lt;span class=&quot;hljs-string&quot;&gt;&#39;/users/:id&#39;&lt;/span&gt;,
      builder: (BuildContext context, GoRouterState state) {
        &lt;span class=&quot;hljs-comment&quot;&gt;// 从 GoRouterState 中获取路径参数&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; userId = state.params[&lt;span class=&quot;hljs-string&quot;&gt;&#39;id&#39;&lt;/span&gt;]!;
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; UserPage(userId: userId);
      },
    ),
  ],
);

&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; main() {
  runApp(
    MaterialApp.router(
      routerConfig: _router,
    ),
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;导航到包含路径参数的路由&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-go&quot; lang=&quot;go&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 导航到包含路径参数的路由&lt;/span&gt;
GoRouter.of(context).&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;/users/123&#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 data-id=&quot;heading-4&quot;&gt;2、查询参数（Query Parameters）&lt;/h5&gt;
&lt;p&gt;查询参数用于在 URL 中传递额外的信息，通常用于过滤、排序等操作。查询参数以问号 &lt;code&gt;?&lt;/code&gt; 开头，多个参数之间用 &lt;code&gt;&amp;amp;&lt;/code&gt; 分隔。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-php&quot; lang=&quot;php&quot;&gt;import &lt;span class=&quot;hljs-string&quot;&gt;&#39;package:flutter/material.dart&#39;&lt;/span&gt;;
import &lt;span class=&quot;hljs-string&quot;&gt;&#39;package:go_router/go_router.dart&#39;&lt;/span&gt;;

&lt;span class=&quot;hljs-comment&quot;&gt;// 定义一个接收查询参数的页面&lt;/span&gt;
&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SearchPage&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StatelessWidget&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String? query;

  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;SearchPage&lt;/span&gt;({Key? key, this.query}) : &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;super&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt;: key);

  @override
  Widget &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;build&lt;/span&gt;(BuildContext context) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Scaffold&lt;/span&gt;(
      &lt;span class=&quot;hljs-attr&quot;&gt;appBar&lt;/span&gt;: &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;AppBar&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Search&#39;&lt;/span&gt;)),
      &lt;span class=&quot;hljs-attr&quot;&gt;body&lt;/span&gt;: &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Center&lt;/span&gt;(
        &lt;span class=&quot;hljs-attr&quot;&gt;child&lt;/span&gt;: &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Search query: ${query ?? &#39;&lt;/span&gt;No query&lt;span class=&quot;hljs-string&quot;&gt;&#39;}&#39;&lt;/span&gt;),
      ),
    );
  }
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 配置 GoRouter，定义接收查询参数的路由&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; GoRouter _router = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;GoRouter&lt;/span&gt;(
  &lt;span class=&quot;hljs-attr&quot;&gt;routes&lt;/span&gt;: &amp;lt;RouteBase&amp;gt;[
    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;GoRoute&lt;/span&gt;(
      &lt;span class=&quot;hljs-attr&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;/search&#39;&lt;/span&gt;,
      &lt;span class=&quot;hljs-attr&quot;&gt;builder&lt;/span&gt;: (BuildContext context, GoRouterState state) {
        // 从 GoRouterState 中获取查询参数
        &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String? query = state.queryParams[&lt;span class=&quot;hljs-string&quot;&gt;&#39;q&#39;&lt;/span&gt;];
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;SearchPage&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;query&lt;/span&gt;: query);
      },
    ),
  ],
);

&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;main&lt;/span&gt;() {
  &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;runApp&lt;/span&gt;(
    MaterialApp.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;router&lt;/span&gt;(
      &lt;span class=&quot;hljs-attr&quot;&gt;routerConfig&lt;/span&gt;: _router,
    ),
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;导航到包含查询参数的路由&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-go&quot; lang=&quot;go&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 导航到包含查询参数的路由&lt;/span&gt;
GoRouter.of(context).&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;/search?q=flutter&#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 data-id=&quot;heading-5&quot;&gt;3、命名路由与参数传递&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-php&quot; lang=&quot;php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 定义带名称的路由，包含路径参数&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; GoRouter _router = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;GoRouter&lt;/span&gt;(
  &lt;span class=&quot;hljs-attr&quot;&gt;routes&lt;/span&gt;: &amp;lt;RouteBase&amp;gt;[
    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;GoRoute&lt;/span&gt;(
      &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;user&#39;&lt;/span&gt;,
      &lt;span class=&quot;hljs-attr&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;/users/:id&#39;&lt;/span&gt;,
      &lt;span class=&quot;hljs-attr&quot;&gt;builder&lt;/span&gt;: (BuildContext context, GoRouterState state) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String userId = state.params[&lt;span class=&quot;hljs-string&quot;&gt;&#39;id&#39;&lt;/span&gt;]!;
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;UserPage&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;userId&lt;/span&gt;: userId);
      },
    ),
  ],
);

&lt;span class=&quot;hljs-comment&quot;&gt;// 通过名称导航并传递路径参数&lt;/span&gt;
GoRouter.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;of&lt;/span&gt;(context).&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;goNamed&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;user&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;params&lt;/span&gt;: {&lt;span class=&quot;hljs-string&quot;&gt;&#39;id&#39;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;456&#39;&lt;/span&gt;});

&lt;span class=&quot;hljs-comment&quot;&gt;// 通过名称导航并传递查询参数&lt;/span&gt;
GoRouter.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;of&lt;/span&gt;(context).&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;goNamed&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;search&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;queryParams&lt;/span&gt;: {&lt;span class=&quot;hljs-string&quot;&gt;&#39;q&#39;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;dart&#39;&lt;/span&gt;});
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-6&quot;&gt;2、 导航方法&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-7&quot;&gt;基本配置&lt;/h4&gt;
&lt;h5 data-id=&quot;heading-8&quot;&gt;&lt;code&gt;context.go&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;直接导航到指定的路由，会替换当前的路由栈，即当前页面会被新页面替换。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-go&quot; lang=&quot;go&quot;&gt;context.&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;/details&#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 data-id=&quot;heading-9&quot;&gt;&lt;code&gt;context.push&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;将新的路由页面推送到路由栈中，当前页面不会被替换，用户可以通过返回操作回到上一个页面。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-arduino&quot; lang=&quot;arduino&quot;&gt;context.&lt;span class=&quot;hljs-built_in&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;/details&#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 data-id=&quot;heading-10&quot;&gt;&lt;code&gt;context.pop&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;从路由栈中弹出当前页面，返回到上一个页面。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ini&quot; lang=&quot;ini&quot;&gt;context.pop()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 data-id=&quot;heading-11&quot;&gt;&lt;code&gt;context.goNamed&lt;/code&gt; 和 &lt;code&gt;context.pushNamed&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;当你为路由配置了名称时，可以使用这两个方法通过名称进行导航。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-php&quot; lang=&quot;php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; GoRouter _router = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;GoRouter&lt;/span&gt;(
  &lt;span class=&quot;hljs-attr&quot;&gt;routes&lt;/span&gt;: &amp;lt;RouteBase&amp;gt;[
    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;GoRoute&lt;/span&gt;(
      &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;home&#39;&lt;/span&gt;,
      &lt;span class=&quot;hljs-attr&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;/&#39;&lt;/span&gt;,
      &lt;span class=&quot;hljs-attr&quot;&gt;builder&lt;/span&gt;: (BuildContext context, GoRouterState state) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;HomePage&lt;/span&gt;();
      },
      &lt;span class=&quot;hljs-attr&quot;&gt;routes&lt;/span&gt;: &amp;lt;RouteBase&amp;gt;[
        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;GoRoute&lt;/span&gt;(
          &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;details&#39;&lt;/span&gt;,
          &lt;span class=&quot;hljs-attr&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;details&#39;&lt;/span&gt;,
          &lt;span class=&quot;hljs-attr&quot;&gt;builder&lt;/span&gt;: (BuildContext context, GoRouterState state) {
            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;DetailsPage&lt;/span&gt;();
          },
        ),
      ],
    ),
  ],
);

&lt;span class=&quot;hljs-comment&quot;&gt;// 使用名称导航&lt;/span&gt;
context.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;goNamed&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;details&#39;&lt;/span&gt;);
context.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;pushNamed&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;details&#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-12&quot;&gt;嵌套导航 ShellRoute&lt;/h4&gt;
&lt;p&gt;在 &lt;code&gt;go_router&lt;/code&gt; 中，嵌套导航允许你在应用的某个部分实现独立的路由管理，例如在底部导航栏或者侧边栏的不同标签页内进行各自的路由切换。以下是关于 &lt;code&gt;go_router&lt;/code&gt; 嵌套导航的详细介绍和示例代码。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-less&quot; lang=&quot;less&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;ShellRoute&lt;/span&gt;(
  &lt;span class=&quot;hljs-attribute&quot;&gt;builder&lt;/span&gt;: (context, state, child) =&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Scaffold&lt;/span&gt;(
    &lt;span class=&quot;hljs-attribute&quot;&gt;body&lt;/span&gt;: child,
    &lt;span class=&quot;hljs-attribute&quot;&gt;bottomNavigationBar&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;BottomNavBar&lt;/span&gt;(),
  ),
  &lt;span class=&quot;hljs-attribute&quot;&gt;routes&lt;/span&gt;: [
    &lt;span class=&quot;hljs-built_in&quot;&gt;GoRoute&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;/books&#39;&lt;/span&gt;, ...),
    &lt;span class=&quot;hljs-built_in&quot;&gt;GoRoute&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;/movies&#39;&lt;/span&gt;, ...),
  ],
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-13&quot;&gt;实现思路&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;外层路由配置&lt;/strong&gt;：定义整个应用的主要路由结构，包含嵌套导航的父路由。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内层路由配置&lt;/strong&gt;：在父路由内部定义子路由，用于管理嵌套导航的页面。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用 &lt;code&gt;ShellRoute&lt;/code&gt;&lt;/strong&gt;：&lt;code&gt;ShellRoute&lt;/code&gt; 是 &lt;code&gt;go_router&lt;/code&gt; 中用于实现嵌套导航的关键组件，它可以包裹子路由，提供一个共享的布局。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-less&quot; lang=&quot;less&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;import&lt;/span&gt; &#39;&lt;span class=&quot;hljs-selector-tag&quot;&gt;package&lt;/span&gt;:&lt;span class=&quot;hljs-selector-tag&quot;&gt;flutter&lt;/span&gt;/&lt;span class=&quot;hljs-selector-tag&quot;&gt;material&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.dart&lt;/span&gt;&#39;;
&lt;span class=&quot;hljs-selector-tag&quot;&gt;import&lt;/span&gt; &#39;&lt;span class=&quot;hljs-selector-tag&quot;&gt;package&lt;/span&gt;:&lt;span class=&quot;hljs-selector-tag&quot;&gt;go_router&lt;/span&gt;/&lt;span class=&quot;hljs-selector-tag&quot;&gt;go_router&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.dart&lt;/span&gt;&#39;;

&lt;span class=&quot;hljs-comment&quot;&gt;// 定义页面&lt;/span&gt;
&lt;span class=&quot;hljs-selector-tag&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;HomePage&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;StatelessWidget&lt;/span&gt; {
  &lt;span class=&quot;hljs-selector-tag&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;HomePage&lt;/span&gt;({&lt;span class=&quot;hljs-selector-tag&quot;&gt;Key&lt;/span&gt;? &lt;span class=&quot;hljs-selector-tag&quot;&gt;key&lt;/span&gt;}) : &lt;span class=&quot;hljs-selector-tag&quot;&gt;super&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;key&lt;/span&gt;: key);

  @&lt;span class=&quot;hljs-selector-tag&quot;&gt;override&lt;/span&gt;
  &lt;span class=&quot;hljs-selector-tag&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;build&lt;/span&gt;(BuildContext context) {
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;Scaffold&lt;/span&gt;(
      &lt;span class=&quot;hljs-attribute&quot;&gt;appBar&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;AppBar&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;title&lt;/span&gt;: const &lt;span class=&quot;hljs-built_in&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Home&#39;&lt;/span&gt;)),
      &lt;span class=&quot;hljs-attribute&quot;&gt;body&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;Center&lt;/span&gt;(
        &lt;span class=&quot;hljs-attribute&quot;&gt;child&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;Column&lt;/span&gt;(
          &lt;span class=&quot;hljs-attribute&quot;&gt;mainAxisAlignment&lt;/span&gt;: MainAxisAlignment.center,
          &lt;span class=&quot;hljs-attribute&quot;&gt;children&lt;/span&gt;: [
            &lt;span class=&quot;hljs-built_in&quot;&gt;ElevatedButton&lt;/span&gt;(
              &lt;span class=&quot;hljs-attribute&quot;&gt;onPressed&lt;/span&gt;: () {
                context.&lt;span class=&quot;hljs-built_in&quot;&gt;go&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;/books&#39;&lt;/span&gt;);
              },
              &lt;span class=&quot;hljs-attribute&quot;&gt;child&lt;/span&gt;: const &lt;span class=&quot;hljs-built_in&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Go to Books&#39;&lt;/span&gt;),
            ),
            &lt;span class=&quot;hljs-built_in&quot;&gt;ElevatedButton&lt;/span&gt;(
              &lt;span class=&quot;hljs-attribute&quot;&gt;onPressed&lt;/span&gt;: () {
                context.&lt;span class=&quot;hljs-built_in&quot;&gt;go&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;/movies&#39;&lt;/span&gt;);
              },
              &lt;span class=&quot;hljs-attribute&quot;&gt;child&lt;/span&gt;: const &lt;span class=&quot;hljs-built_in&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Go to Movies&#39;&lt;/span&gt;),
            ),
          ],
        ),
      ),
    );
  }
}

&lt;span class=&quot;hljs-selector-tag&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;BooksPage&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;StatelessWidget&lt;/span&gt; {
  &lt;span class=&quot;hljs-selector-tag&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;BooksPage&lt;/span&gt;({&lt;span class=&quot;hljs-selector-tag&quot;&gt;Key&lt;/span&gt;? &lt;span class=&quot;hljs-selector-tag&quot;&gt;key&lt;/span&gt;}) : &lt;span class=&quot;hljs-selector-tag&quot;&gt;super&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;key&lt;/span&gt;: key);

  @&lt;span class=&quot;hljs-selector-tag&quot;&gt;override&lt;/span&gt;
  &lt;span class=&quot;hljs-selector-tag&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;build&lt;/span&gt;(BuildContext context) {
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;Scaffold&lt;/span&gt;(
      &lt;span class=&quot;hljs-attribute&quot;&gt;appBar&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;AppBar&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;title&lt;/span&gt;: const &lt;span class=&quot;hljs-built_in&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Books&#39;&lt;/span&gt;)),
      &lt;span class=&quot;hljs-attribute&quot;&gt;body&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;Center&lt;/span&gt;(
        &lt;span class=&quot;hljs-attribute&quot;&gt;child&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;ElevatedButton&lt;/span&gt;(
          &lt;span class=&quot;hljs-attribute&quot;&gt;onPressed&lt;/span&gt;: () {
            context.&lt;span class=&quot;hljs-built_in&quot;&gt;go&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;/books/details&#39;&lt;/span&gt;);
          },
          &lt;span class=&quot;hljs-attribute&quot;&gt;child&lt;/span&gt;: const &lt;span class=&quot;hljs-built_in&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Go to Book Details&#39;&lt;/span&gt;),
        ),
      ),
    );
  }
}

&lt;span class=&quot;hljs-selector-tag&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;BookDetailsPage&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;StatelessWidget&lt;/span&gt; {
  &lt;span class=&quot;hljs-selector-tag&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;BookDetailsPage&lt;/span&gt;({&lt;span class=&quot;hljs-selector-tag&quot;&gt;Key&lt;/span&gt;? &lt;span class=&quot;hljs-selector-tag&quot;&gt;key&lt;/span&gt;}) : &lt;span class=&quot;hljs-selector-tag&quot;&gt;super&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;key&lt;/span&gt;: key);

  @&lt;span class=&quot;hljs-selector-tag&quot;&gt;override&lt;/span&gt;
  &lt;span class=&quot;hljs-selector-tag&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;build&lt;/span&gt;(BuildContext context) {
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;Scaffold&lt;/span&gt;(
      &lt;span class=&quot;hljs-attribute&quot;&gt;appBar&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;AppBar&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;title&lt;/span&gt;: const &lt;span class=&quot;hljs-built_in&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Book Details&#39;&lt;/span&gt;)),
      &lt;span class=&quot;hljs-attribute&quot;&gt;body&lt;/span&gt;: const &lt;span class=&quot;hljs-built_in&quot;&gt;Center&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;child&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;This is the book details page.&#39;&lt;/span&gt;)),
    );
  }
}

&lt;span class=&quot;hljs-selector-tag&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;MoviesPage&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;StatelessWidget&lt;/span&gt; {
  &lt;span class=&quot;hljs-selector-tag&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;MoviesPage&lt;/span&gt;({&lt;span class=&quot;hljs-selector-tag&quot;&gt;Key&lt;/span&gt;? &lt;span class=&quot;hljs-selector-tag&quot;&gt;key&lt;/span&gt;}) : &lt;span class=&quot;hljs-selector-tag&quot;&gt;super&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;key&lt;/span&gt;: key);

  @&lt;span class=&quot;hljs-selector-tag&quot;&gt;override&lt;/span&gt;
  &lt;span class=&quot;hljs-selector-tag&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;build&lt;/span&gt;(BuildContext context) {
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;Scaffold&lt;/span&gt;(
      &lt;span class=&quot;hljs-attribute&quot;&gt;appBar&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;AppBar&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;title&lt;/span&gt;: const &lt;span class=&quot;hljs-built_in&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Movies&#39;&lt;/span&gt;)),
      &lt;span class=&quot;hljs-attribute&quot;&gt;body&lt;/span&gt;: const &lt;span class=&quot;hljs-built_in&quot;&gt;Center&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;child&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;This is the movies page.&#39;&lt;/span&gt;)),
    );
  }
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 配置路由&lt;/span&gt;
&lt;span class=&quot;hljs-selector-tag&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;GoRouter&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;_router&lt;/span&gt; = &lt;span class=&quot;hljs-selector-tag&quot;&gt;GoRouter&lt;/span&gt;(
  &lt;span class=&quot;hljs-attribute&quot;&gt;routes&lt;/span&gt;: [
    &lt;span class=&quot;hljs-built_in&quot;&gt;GoRoute&lt;/span&gt;(
      &lt;span class=&quot;hljs-attribute&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;/&#39;&lt;/span&gt;,
      &lt;span class=&quot;hljs-attribute&quot;&gt;builder&lt;/span&gt;: (context, state) =&amp;gt; const &lt;span class=&quot;hljs-built_in&quot;&gt;HomePage&lt;/span&gt;(),
    ),
    &lt;span class=&quot;hljs-built_in&quot;&gt;ShellRoute&lt;/span&gt;(
      &lt;span class=&quot;hljs-attribute&quot;&gt;builder&lt;/span&gt;: (context, state, child) {
        return &lt;span class=&quot;hljs-built_in&quot;&gt;Scaffold&lt;/span&gt;(
          &lt;span class=&quot;hljs-attribute&quot;&gt;body&lt;/span&gt;: child,
        );
      },
      &lt;span class=&quot;hljs-attribute&quot;&gt;routes&lt;/span&gt;: [
        &lt;span class=&quot;hljs-built_in&quot;&gt;GoRoute&lt;/span&gt;(
          &lt;span class=&quot;hljs-attribute&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;/books&#39;&lt;/span&gt;,
          &lt;span class=&quot;hljs-attribute&quot;&gt;builder&lt;/span&gt;: (context, state) =&amp;gt; const &lt;span class=&quot;hljs-built_in&quot;&gt;BooksPage&lt;/span&gt;(),
          &lt;span class=&quot;hljs-attribute&quot;&gt;routes&lt;/span&gt;: [
            &lt;span class=&quot;hljs-built_in&quot;&gt;GoRoute&lt;/span&gt;(
              &lt;span class=&quot;hljs-attribute&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;details&#39;&lt;/span&gt;,
              &lt;span class=&quot;hljs-attribute&quot;&gt;builder&lt;/span&gt;: (context, state) =&amp;gt; const &lt;span class=&quot;hljs-built_in&quot;&gt;BookDetailsPage&lt;/span&gt;(),
            ),
          ],
        ),
        &lt;span class=&quot;hljs-built_in&quot;&gt;GoRoute&lt;/span&gt;(
          &lt;span class=&quot;hljs-attribute&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;/movies&#39;&lt;/span&gt;,
          &lt;span class=&quot;hljs-attribute&quot;&gt;builder&lt;/span&gt;: (context, state) =&amp;gt; const &lt;span class=&quot;hljs-built_in&quot;&gt;MoviesPage&lt;/span&gt;(),
        ),
      ],
    ),
  ],
);

&lt;span class=&quot;hljs-selector-tag&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;main&lt;/span&gt;() {
  &lt;span class=&quot;hljs-selector-tag&quot;&gt;runApp&lt;/span&gt;(
    MaterialApp.&lt;span class=&quot;hljs-built_in&quot;&gt;router&lt;/span&gt;(
      &lt;span class=&quot;hljs-attribute&quot;&gt;routerConfig&lt;/span&gt;: _router,
    ),
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1、外层路由&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义了根路由 &lt;code&gt;/&lt;/code&gt;，对应 &lt;code&gt;HomePage&lt;/code&gt;，这是应用的起始页面。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2、&lt;code&gt;ShellRoute&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ShellRoute&lt;/code&gt; 包裹了两个子路由 &lt;code&gt;/books&lt;/code&gt; 和 &lt;code&gt;/movies&lt;/code&gt;，它的 &lt;code&gt;builder&lt;/code&gt; 方法返回一个 &lt;code&gt;Scaffold&lt;/code&gt;，用于提供一个共享的布局。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子路由的页面会显示在 &lt;code&gt;Scaffold&lt;/code&gt; 的 &lt;code&gt;body&lt;/code&gt; 中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内层路由&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/books&lt;/code&gt; 路由下还有一个子路由 &lt;code&gt;/books/details&lt;/code&gt;，对应 &lt;code&gt;BookDetailsPage&lt;/code&gt;，实现了在 &lt;code&gt;BooksPage&lt;/code&gt; 内部的嵌套导航。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-id=&quot;heading-14&quot;&gt;3、 路由守卫与拦截&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-php&quot; lang=&quot;php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 路由重定向函数&lt;/span&gt;
String? &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;redirectLogic&lt;/span&gt;(GoRouterState state) {
  &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt; isGoingToLogin = state.matchedLocation == &lt;span class=&quot;hljs-string&quot;&gt;&#39;/login&#39;&lt;/span&gt;;
  &lt;span class=&quot;hljs-comment&quot;&gt;// 如果用户未登录且不是前往登录页，则重定向到登录页&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!isUserLoggedIn &amp;amp;&amp;amp; !isGoingToLogin) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;/login&#39;&lt;/span&gt;;
  }
  &lt;span class=&quot;hljs-comment&quot;&gt;// 如果用户已登录且正在前往登录页，则重定向到仪表盘页&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isUserLoggedIn &amp;amp;&amp;amp; isGoingToLogin) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;/dashboard&#39;&lt;/span&gt;;
  }
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// 允许导航到目标路由&lt;/span&gt;
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 配置路由&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; GoRouter _router = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;GoRouter&lt;/span&gt;(
  &lt;span class=&quot;hljs-attr&quot;&gt;redirect&lt;/span&gt;: redirectLogic,
  &lt;span class=&quot;hljs-attr&quot;&gt;routes&lt;/span&gt;: [
    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;GoRoute&lt;/span&gt;(
      &lt;span class=&quot;hljs-attr&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;/login&#39;&lt;/span&gt;,
      &lt;span class=&quot;hljs-attr&quot;&gt;builder&lt;/span&gt;: (context, state) =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;LoginPage&lt;/span&gt;(),
    ),
    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;GoRoute&lt;/span&gt;(
      &lt;span class=&quot;hljs-attr&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;/dashboard&#39;&lt;/span&gt;,
      &lt;span class=&quot;hljs-attr&quot;&gt;builder&lt;/span&gt;: (context, state) =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;DashboardPage&lt;/span&gt;(),
    ),
  ],
);

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;模拟用户登录状态&lt;/strong&gt;：使用 &lt;code&gt;isUserLoggedIn&lt;/code&gt; 布尔变量来模拟用户的登录状态。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redirectLogic&lt;/code&gt; 函数
&lt;ul&gt;
&lt;li&gt;该函数接收 &lt;code&gt;GoRouterState&lt;/code&gt; 对象，该对象包含了当前导航的相关信息，如目标路由的路径。&lt;/li&gt;
&lt;li&gt;当用户未登录且尝试访问除登录页之外的页面时，函数返回 &lt;code&gt;/login&lt;/code&gt;，将用户重定向到登录页。&lt;/li&gt;
&lt;li&gt;当用户已登录且尝试访问登录页时，函数返回 &lt;code&gt;/dashboard&lt;/code&gt;，将用户重定向到仪表盘页。&lt;/li&gt;
&lt;li&gt;如果不需要重定向，函数返回 &lt;code&gt;null&lt;/code&gt;，允许用户正常导航到目标路由。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;GoRouter&lt;/code&gt; 配置&lt;/strong&gt;：在 &lt;code&gt;GoRouter&lt;/code&gt; 的构造函数中传入 &lt;code&gt;redirect&lt;/code&gt; 参数，将其设置为 &lt;code&gt;redirectLogic&lt;/code&gt; 函数，这样每次导航前都会执行该函数的逻辑。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-id=&quot;heading-15&quot;&gt;4、 错误处理&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-less&quot; lang=&quot;less&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;GoRouter&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;_router&lt;/span&gt; = &lt;span class=&quot;hljs-selector-tag&quot;&gt;GoRouter&lt;/span&gt;(
  &lt;span class=&quot;hljs-attribute&quot;&gt;routes&lt;/span&gt;: [
    &lt;span class=&quot;hljs-built_in&quot;&gt;GoRoute&lt;/span&gt;(
      &lt;span class=&quot;hljs-attribute&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;/&#39;&lt;/span&gt;,
      &lt;span class=&quot;hljs-attribute&quot;&gt;builder&lt;/span&gt;: (context, state) =&amp;gt; const &lt;span class=&quot;hljs-built_in&quot;&gt;HomePage&lt;/span&gt;(),
    ),
  ],
  &lt;span class=&quot;hljs-attribute&quot;&gt;errorBuilder&lt;/span&gt;: (context, state) {
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;ErrorPage&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;error&lt;/span&gt;: state.error);
  },
);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;errorBuilder&lt;/code&gt; 参数指定了一个函数，当导航出错时会调用这个函数。该函数接收 &lt;code&gt;context&lt;/code&gt; 和 &lt;code&gt;state&lt;/code&gt; 两个参数，&lt;code&gt;state.error&lt;/code&gt; 包含了具体的错误信息，我们将其传递给 &lt;code&gt;ErrorPage&lt;/code&gt; 来显示。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述示例主要处理了导航到不存在路由的情况，也就是 404 错误。当用户尝试访问未在 &lt;code&gt;routes&lt;/code&gt; 中定义的路由时，&lt;code&gt;go_router&lt;/code&gt; 会触发 &lt;code&gt;errorBuilder&lt;/code&gt; 来显示错误页面。&lt;/p&gt;
&lt;p&gt;除了 404 错误，在实际开发中还可能遇到其他类型的错误，比如在路由的 &lt;code&gt;builder&lt;/code&gt; 函数中抛出异常。这些错误同样会触发 &lt;code&gt;errorBuilder&lt;/code&gt;，你可以根据 &lt;code&gt;state.error&lt;/code&gt; 的具体类型进行不同的处理，例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-vbnet&quot; lang=&quot;vbnet&quot;&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;errorBuilder:&lt;/span&gt; (context, state) {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (state.&lt;span class=&quot;hljs-keyword&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;is&lt;/span&gt; SomeSpecificException) {
    // 处理特定类型的异常
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; SpecificErrorPage(&lt;span class=&quot;hljs-keyword&quot;&gt;error&lt;/span&gt;: state.&lt;span class=&quot;hljs-keyword&quot;&gt;error&lt;/span&gt;);
  }
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ErrorPage(&lt;span class=&quot;hljs-keyword&quot;&gt;error&lt;/span&gt;: state.&lt;span class=&quot;hljs-keyword&quot;&gt;error&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-16&quot;&gt;5、路由状态获取&lt;/h3&gt;
&lt;h5 data-id=&quot;heading-17&quot;&gt;1、在路由构建器中获取状态&lt;/h5&gt;
&lt;p&gt;在 &lt;code&gt;GoRoute&lt;/code&gt; 的 &lt;code&gt;builder&lt;/code&gt; 或 &lt;code&gt;pageBuilder&lt;/code&gt; 函数中，会传入一个 &lt;code&gt;GoRouterState&lt;/code&gt; 对象，你可以通过它来获取路由的相关信息。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ini&quot; lang=&quot;ini&quot;&gt;GoRoute(
  path: &#39;details/:id&#39;,
  builder: (BuildContext context, GoRouterState state) {
    // 获取路径参数
    final String &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt; = state.pathParameters[&lt;span class=&quot;hljs-string&quot;&gt;&#39;id&#39;&lt;/span&gt;]!&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;

    // 获取查询参数
    final String? &lt;span class=&quot;hljs-attr&quot;&gt;queryParam&lt;/span&gt; = state.queryParameters[&lt;span class=&quot;hljs-string&quot;&gt;&#39;param&#39;&lt;/span&gt;]&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;

    // 获取完整的 URI
    final Uri &lt;span class=&quot;hljs-attr&quot;&gt;uri&lt;/span&gt; = state.uri&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;

    return DetailsPage(id: id)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
  },
)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 data-id=&quot;heading-18&quot;&gt;2 在 Widget 中获取当前路由状态&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-scala&quot; lang=&quot;scala&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyWidget&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StatelessWidget&lt;/span&gt; &lt;/span&gt;{
  const &lt;span class=&quot;hljs-type&quot;&gt;MyWidget&lt;/span&gt;({&lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.key});

  &lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;hljs-type&quot;&gt;Widget&lt;/span&gt; build(&lt;span class=&quot;hljs-type&quot;&gt;BuildContext&lt;/span&gt; context) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;GoRouterState&lt;/span&gt; state = &lt;span class=&quot;hljs-type&quot;&gt;GoRouterState&lt;/span&gt;.of(context);
    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;? currentPath = state.matchedLocation;

    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Text&lt;/span&gt;(&#39;&lt;span class=&quot;hljs-type&quot;&gt;Current&lt;/span&gt; path: $currentPath&#39;);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-19&quot;&gt;6、监听路由变化&lt;/h3&gt;
&lt;h5 data-id=&quot;heading-20&quot;&gt;1、使用 &lt;code&gt;GoRouter&lt;/code&gt; &lt;strong&gt;的&lt;/strong&gt; &lt;code&gt;refreshListenable&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;GoRouter&lt;/code&gt; 提供了 &lt;code&gt;refreshListenable&lt;/code&gt; 选项，你可以传入一个 &lt;code&gt;Listenable&lt;/code&gt; 对象，当路由发生变化时，&lt;code&gt;GoRouter&lt;/code&gt; 会通知这个 &lt;code&gt;Listenable&lt;/code&gt;，进而触发更新。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-less&quot; lang=&quot;less&quot;&gt;/ 创建一个 &lt;span class=&quot;hljs-selector-tag&quot;&gt;ValueNotifier&lt;/span&gt; 作为可监听对象
&lt;span class=&quot;hljs-selector-tag&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;ValueNotifier&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;String&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;routeNotifier&lt;/span&gt; = &lt;span class=&quot;hljs-selector-tag&quot;&gt;ValueNotifier&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;String&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;&#39;&lt;/span&gt;);

&lt;span class=&quot;hljs-comment&quot;&gt;// 定义路由&lt;/span&gt;
&lt;span class=&quot;hljs-selector-tag&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;GoRouter&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;_router&lt;/span&gt; = &lt;span class=&quot;hljs-selector-tag&quot;&gt;GoRouter&lt;/span&gt;(
  &lt;span class=&quot;hljs-attribute&quot;&gt;refreshListenable&lt;/span&gt;: routeNotifier,
  &lt;span class=&quot;hljs-attribute&quot;&gt;routes&lt;/span&gt;: &amp;lt;GoRoute&amp;gt;[
    &lt;span class=&quot;hljs-built_in&quot;&gt;GoRoute&lt;/span&gt;(
      &lt;span class=&quot;hljs-attribute&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;/&#39;&lt;/span&gt;,
      &lt;span class=&quot;hljs-attribute&quot;&gt;builder&lt;/span&gt;: (BuildContext context, GoRouterState state) {
        &lt;span class=&quot;hljs-comment&quot;&gt;// 更新路由信息&lt;/span&gt;
        routeNotifier.value = state.matchedLocation;
        return const &lt;span class=&quot;hljs-built_in&quot;&gt;HomePage&lt;/span&gt;();
      },
      &lt;span class=&quot;hljs-attribute&quot;&gt;routes&lt;/span&gt;: &amp;lt;GoRoute&amp;gt;[
        &lt;span class=&quot;hljs-built_in&quot;&gt;GoRoute&lt;/span&gt;(
          &lt;span class=&quot;hljs-attribute&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;details/:id&#39;&lt;/span&gt;,
          &lt;span class=&quot;hljs-attribute&quot;&gt;builder&lt;/span&gt;: (BuildContext context, GoRouterState state) {
            &lt;span class=&quot;hljs-comment&quot;&gt;// 更新路由信息&lt;/span&gt;
            routeNotifier.value = state.matchedLocation;
            final String id = state.pathParameters[&lt;span class=&quot;hljs-string&quot;&gt;&#39;id&#39;&lt;/span&gt;]!;
            return &lt;span class=&quot;hljs-built_in&quot;&gt;DetailsPage&lt;/span&gt;(&lt;span class=&quot;hljs-attribute&quot;&gt;id&lt;/span&gt;: id);
          },
        ),
      ],
    ),
  ],
);



&lt;span class=&quot;hljs-comment&quot;&gt;// 监听路由变化的 Widget&lt;/span&gt;
&lt;span class=&quot;hljs-selector-tag&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;RouteListenerWidget&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;StatelessWidget&lt;/span&gt; {
  &lt;span class=&quot;hljs-selector-tag&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;RouteListenerWidget&lt;/span&gt;({&lt;span class=&quot;hljs-selector-tag&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.key&lt;/span&gt;});

  @&lt;span class=&quot;hljs-selector-tag&quot;&gt;override&lt;/span&gt;
  &lt;span class=&quot;hljs-selector-tag&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;build&lt;/span&gt;(BuildContext context) {
    &lt;span class=&quot;hljs-selector-tag&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;ValueListenableBuilder&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;String&lt;/span&gt;&amp;gt;(
      &lt;span class=&quot;hljs-attribute&quot;&gt;valueListenable&lt;/span&gt;: routeNotifier,
      &lt;span class=&quot;hljs-attribute&quot;&gt;builder&lt;/span&gt;: (BuildContext context, String value, Widget? child) {
        &lt;span class=&quot;hljs-selector-tag&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Current Route: $value&#39;&lt;/span&gt;);
      },
    );
  }
}

&lt;span class=&quot;hljs-selector-tag&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;main&lt;/span&gt;() {
  &lt;span class=&quot;hljs-selector-tag&quot;&gt;runApp&lt;/span&gt;(
    MaterialApp.&lt;span class=&quot;hljs-built_in&quot;&gt;router&lt;/span&gt;(
      &lt;span class=&quot;hljs-attribute&quot;&gt;routerConfig&lt;/span&gt;: _router,
      &lt;span class=&quot;hljs-attribute&quot;&gt;home&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;Column&lt;/span&gt;(
        &lt;span class=&quot;hljs-attribute&quot;&gt;children&lt;/span&gt;: [
          const &lt;span class=&quot;hljs-built_in&quot;&gt;RouteListenerWidget&lt;/span&gt;(),
          &lt;span class=&quot;hljs-built_in&quot;&gt;Expanded&lt;/span&gt;(
            &lt;span class=&quot;hljs-attribute&quot;&gt;child&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;Router&lt;/span&gt;(
              &lt;span class=&quot;hljs-attribute&quot;&gt;routerConfig&lt;/span&gt;: _router,
            ),
          ),
        ],
      ),
    ),
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;首先创建了一个 &lt;code&gt;ValueNotifier&amp;lt;String&amp;gt;&lt;/code&gt; 类型的 &lt;code&gt;routeNotifier&lt;/code&gt; 作为可监听对象，并将其传递给 &lt;code&gt;GoRouter&lt;/code&gt; 的 &lt;code&gt;refreshListenable&lt;/code&gt; 属性。&lt;/li&gt;
&lt;li&gt;在每个路由的 &lt;code&gt;builder&lt;/code&gt; 函数中，更新 &lt;code&gt;routeNotifier&lt;/code&gt; 的值为当前匹配的路径。&lt;/li&gt;
&lt;li&gt;创建了一个 &lt;code&gt;RouteListenerWidget&lt;/code&gt;，使用 &lt;code&gt;ValueListenableBuilder&lt;/code&gt; 监听 &lt;code&gt;routeNotifier&lt;/code&gt; 的变化，并在路由变化时更新显示的路由信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 data-id=&quot;heading-21&quot;&gt;2、使用 &lt;code&gt;GoRouter&lt;/code&gt; 的 &lt;code&gt;observers&lt;/code&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-dart&quot; lang=&quot;dart&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;RouterObserver&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;NavigatorObserver&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; log(value) =&amp;gt; debugPrint(&lt;span class=&quot;hljs-string&quot;&gt;&#39;MyNavObserver:&lt;span class=&quot;hljs-subst&quot;&gt;$value&lt;/span&gt;&#39;&lt;/span&gt;);

  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;当一个新的路由被推送到导航栈时，此方法会被调用。&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; didPush(Route&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt; route, Route&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt;? previousRoute) {
    log(&lt;span class=&quot;hljs-string&quot;&gt;&#39;新的路由被推送到导航栈: &lt;span class=&quot;hljs-subst&quot;&gt;${route.toString()}&lt;/span&gt;, previousRoute= &lt;span class=&quot;hljs-subst&quot;&gt;${previousRoute?.toString()}&lt;/span&gt;&#39;&lt;/span&gt;);
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;当一个路由从导航栈中弹出时，此方法会被调用。route 参数表示被弹出的路由，previousRoute 参数&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; didPop(Route&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt; route, Route&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt;? previousRoute) {
    log(&lt;span class=&quot;hljs-string&quot;&gt;&#39;路由从导航栈中弹出: &lt;span class=&quot;hljs-subst&quot;&gt;${route.toString()}&lt;/span&gt;, previousRoute= &lt;span class=&quot;hljs-subst&quot;&gt;${previousRoute?.toString()}&lt;/span&gt;&#39;&lt;/span&gt;);
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;当一个路由从导航栈中被移除时，此方法会被调用。移除路由和弹出路由不同，移除操作可以移除导航栈中任意位置的路由，而弹出操作只能移除栈顶的路由。&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;route 参数表示被移除的路由，previousRoute 参数表示在该路由移除后，其下一个路由（如果存在的话）。&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; didRemove(Route&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt; route, Route&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt;? previousRoute) {
    log(&lt;span class=&quot;hljs-string&quot;&gt;&#39;didRemove: &lt;span class=&quot;hljs-subst&quot;&gt;${route.toString()}&lt;/span&gt;, previousRoute= &lt;span class=&quot;hljs-subst&quot;&gt;${previousRoute?.toString()}&lt;/span&gt;&#39;&lt;/span&gt;);
  }

  &lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; didReplace({Route&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt;? newRoute, Route&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt;? oldRoute}) {
    log(&lt;span class=&quot;hljs-string&quot;&gt;&#39;didReplace: new= &lt;span class=&quot;hljs-subst&quot;&gt;${newRoute?.toString()}&lt;/span&gt;, old= &lt;span class=&quot;hljs-subst&quot;&gt;${oldRoute?.toString()}&lt;/span&gt;&#39;&lt;/span&gt;);
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;当用户开始进行一个导航手势（如在 iOS 上从屏幕边缘向左滑动返回上一页）时，此方法会被调用。&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;route 参数表示当前正在操作的路由，previousRoute 参数表示在手势操作后可能会显示的前一个路由（如果存在的话）。&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; didStartUserGesture(
      Route&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt; route, Route&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt;? previousRoute) {
    log(&lt;span class=&quot;hljs-string&quot;&gt;&#39;didStartUserGesture: &lt;span class=&quot;hljs-subst&quot;&gt;${route.toString()}&lt;/span&gt;, &#39;&lt;/span&gt;
        &lt;span class=&quot;hljs-string&quot;&gt;&#39;previousRoute= &lt;span class=&quot;hljs-subst&quot;&gt;${previousRoute?.toString()}&lt;/span&gt;&#39;&lt;/span&gt;);
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;/// &lt;span class=&quot;markdown&quot;&gt;用户结束导航手势时，此方法会被调用。无论手势是否成功完成导航操作，只要手势结束，就会触发这个方法。&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; didStopUserGesture() {
    log(&lt;span class=&quot;hljs-string&quot;&gt;&#39;didStopUserGesture&#39;&lt;/span&gt;);
  }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-id=&quot;heading-22&quot;&gt;7. 其他实用 API&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;刷新路由&lt;/strong&gt;：&lt;code&gt;router.refresh()&lt;/code&gt;（常用于登录状态变化后强制重定向）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;获取当前路径&lt;/strong&gt;：&lt;code&gt;final location = router.location();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;获取路由名称&lt;/strong&gt;：&lt;code&gt;final routeName = router.routeInformationProvider.value.name;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 data-id=&quot;heading-23&quot;&gt;路由封装&lt;/h2&gt;
&lt;p&gt;go_router是一个声明式的路由库，支持深度链接和导航，适合复杂的路由场景。用户可能已经了解了基础的路由配置，但现在需要将路由配置进行封装，以提高代码的可维护性和扩展性。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;路由配置集中管理&lt;/strong&gt;：将所有路由路径、名称定义在一个单独的类或文件中，避免在代码中散落字符串，减少错误。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模块化路由配置&lt;/strong&gt;：将不同功能模块的路由分别封装到不同的文件中，便于团队协作和模块化开发。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路由守卫封装&lt;/strong&gt;：统一处理路由跳转前的权限验证或条件检查，例如登录状态检查。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路由跳转方法封装&lt;/strong&gt;：提供统一的跳转方法，简化上下文的使用，特别是无需context的情况。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自定义路由过渡动画&lt;/strong&gt;：封装路由跳转的动画效果，保持应用内的一致性。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 data-id=&quot;heading-24&quot;&gt;&lt;strong&gt;1. 路由路径集中管理&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;将路由路径和名称统一管理，避免硬编码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-ini&quot; lang=&quot;ini&quot;&gt;// lib/routes/app_routes.dart

abstract class AppRoutes {
  static const &lt;span class=&quot;hljs-attr&quot;&gt;home&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
  static const &lt;span class=&quot;hljs-attr&quot;&gt;details&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&#39;/details&#39;&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
  static const &lt;span class=&quot;hljs-attr&quot;&gt;profile&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&#39;/profile&#39;&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
  static const &lt;span class=&quot;hljs-attr&quot;&gt;settings&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&#39;/settings&#39;&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-25&quot;&gt;&lt;strong&gt;2. 模块化路由配置&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;将不同模块的路由定义拆分到独立文件中：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-dart&quot; lang=&quot;dart&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// lib/routes/home_route.dart&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;package:go_router/go_router.dart&#39;&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;../pages/home_page.dart&#39;&lt;/span&gt;;

GoRoute &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; homeRoute =&amp;gt; GoRoute(
  path: AppRoutes.home,
  pageBuilder: (context, state) =&amp;gt; MaterialPage(
    key: state.pageKey,
    child: &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; HomePage(),
  ),
);

&lt;span class=&quot;hljs-comment&quot;&gt;// lib/routes/details_route.dart&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;package:go_router/go_router.dart&#39;&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;../pages/details_page.dart&#39;&lt;/span&gt;;

GoRoute &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; detailsRoute =&amp;gt; GoRoute(
  path: AppRoutes.details,
  pageBuilder: (context, state) =&amp;gt; MaterialPage(
    key: state.pageKey,
    child: &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; DetailsPage(),
  ),
);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-26&quot;&gt;&lt;strong&gt;3. 全局路由配置整合&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;统一整合所有模块路由：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-arduino&quot; lang=&quot;arduino&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// lib/routes/router_config.dart&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;package:go_router/go_router.dart&#39;&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;home_route.dart&#39;&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;details_route.dart&#39;&lt;/span&gt;;

&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; appRouter = &lt;span class=&quot;hljs-built_in&quot;&gt;GoRouter&lt;/span&gt;(
  initialLocation: AppRoutes.home,
  routes: [
    homeRoute,
    detailsRoute,
    &lt;span class=&quot;hljs-comment&quot;&gt;// 添加更多路由...&lt;/span&gt;
  ],
);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-27&quot;&gt;&lt;strong&gt;4. 路由守卫封装&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;实现全局路由守卫（例如登录验证）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-arduino&quot; lang=&quot;arduino&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// lib/routes/route_guard.dart&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;package:go_router/go_router.dart&#39;&lt;/span&gt;;

&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RouteGuard&lt;/span&gt; {
  &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; isLoggedIn = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;

  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; FutureOr&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;?&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;authGuard&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(
    BuildContext context,
    GoRouterState state,
  )&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; isLoginPage = state.location == AppRoutes.login;
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!isLoggedIn &amp;amp;&amp;amp; !isLoginPage) {
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; AppRoutes.login; &lt;span class=&quot;hljs-comment&quot;&gt;// 跳转登录页&lt;/span&gt;
    }
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isLoggedIn &amp;amp;&amp;amp; isLoginPage) {
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; AppRoutes.home; &lt;span class=&quot;hljs-comment&quot;&gt;// 已登录时禁止返回登录页&lt;/span&gt;
    }
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; null; &lt;span class=&quot;hljs-comment&quot;&gt;// 允许导航&lt;/span&gt;
  }
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 在路由配置中启用&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; appRouter = &lt;span class=&quot;hljs-built_in&quot;&gt;GoRouter&lt;/span&gt;(
  redirect: RouteGuard.authGuard,
  &lt;span class=&quot;hljs-comment&quot;&gt;// ...其他配置&lt;/span&gt;
);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-28&quot;&gt;&lt;strong&gt;5. 路由跳转工具类&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;封装无需 &lt;code&gt;context&lt;/code&gt; 的跳转方法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot; lang=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// lib/utils/navigation_service.dart&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;package:flutter/material.dart&#39;&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;package:go_router/go_router.dart&#39;&lt;/span&gt;;

&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NavigationService&lt;/span&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; final &lt;span class=&quot;hljs-title class_&quot;&gt;GlobalKey&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;NavigatorState&lt;/span&gt;&amp;gt; navigatorKey = 
    &lt;span class=&quot;hljs-title class_&quot;&gt;GlobalKey&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;NavigatorState&lt;/span&gt;&amp;gt;();

  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BuildContext&lt;/span&gt; get context =&amp;gt; 
    navigatorKey.&lt;span class=&quot;hljs-property&quot;&gt;currentState&lt;/span&gt;!.&lt;span class=&quot;hljs-property&quot;&gt;context&lt;/span&gt;;

  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;pushNamed&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; routeName, {&lt;span class=&quot;hljs-built_in&quot;&gt;Object&lt;/span&gt;? extra}&lt;/span&gt;) {
    context.&lt;span class=&quot;hljs-title function_&quot;&gt;pushNamed&lt;/span&gt;(routeName, &lt;span class=&quot;hljs-attr&quot;&gt;extra&lt;/span&gt;: extra);
  }

  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;goNamed&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; routeName, {&lt;span class=&quot;hljs-built_in&quot;&gt;Object&lt;/span&gt;? extra}&lt;/span&gt;) {
    context.&lt;span class=&quot;hljs-title function_&quot;&gt;goNamed&lt;/span&gt;(routeName, &lt;span class=&quot;hljs-attr&quot;&gt;extra&lt;/span&gt;: extra);
  }

  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;pop&lt;/span&gt;() =&amp;gt; context.&lt;span class=&quot;hljs-title function_&quot;&gt;pop&lt;/span&gt;();
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 在 MaterialApp 中注入&lt;/span&gt;
&lt;span class=&quot;hljs-title class_&quot;&gt;MaterialApp&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;router&lt;/span&gt;(
  &lt;span class=&quot;hljs-attr&quot;&gt;routerConfig&lt;/span&gt;: appRouter,
  &lt;span class=&quot;hljs-attr&quot;&gt;navigatorKey&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;NavigationService&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;navigatorKey&lt;/span&gt;,
);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-29&quot;&gt;&lt;strong&gt;6. 参数传递标准化&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;定义统一参数传递模型&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-kotlin&quot; lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// lib/models/route_args.dart&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DetailsPageArgs&lt;/span&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String id;
  &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String? source;

  DetailsPageArgs({
    required &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.id,
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.source,
  });
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 使用示例&lt;/span&gt;
NavigationService.pushNamed(
  AppRoutes.details,
  extra: DetailsPageArgs(id: &lt;span class=&quot;hljs-string&quot;&gt;&#39;123&#39;&lt;/span&gt;, source: &lt;span class=&quot;hljs-string&quot;&gt;&#39;home&#39;&lt;/span&gt;),
);

&lt;span class=&quot;hljs-comment&quot;&gt;// 在页面中获取参数&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; args = state.extra &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; DetailsPageArgs;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-30&quot;&gt;7 &lt;strong&gt;错误路由处理&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;统一404页面处理：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-less&quot; lang=&quot;less&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;appRouter&lt;/span&gt; = &lt;span class=&quot;hljs-selector-tag&quot;&gt;GoRouter&lt;/span&gt;(
  &lt;span class=&quot;hljs-attribute&quot;&gt;errorPageBuilder&lt;/span&gt;: (context, state) =&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MaterialPage&lt;/span&gt;(
    &lt;span class=&quot;hljs-attribute&quot;&gt;child&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;Scaffold&lt;/span&gt;(
      &lt;span class=&quot;hljs-attribute&quot;&gt;body&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;Center&lt;/span&gt;(
        &lt;span class=&quot;hljs-attribute&quot;&gt;child&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;Text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;页面不存在: ${state.location}&#39;&lt;/span&gt;),
      ),
    ),
  ),
  &lt;span class=&quot;hljs-comment&quot;&gt;// ...其他配置&lt;/span&gt;
);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-31&quot;&gt;8、 &lt;strong&gt;完整项目结构示例&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-bash&quot; lang=&quot;bash&quot;&gt;lib/
├── main.dart
├── routes/
│   ├── app_routes.dart      &lt;span class=&quot;hljs-comment&quot;&gt;# 路由路径常量&lt;/span&gt;
│   ├── router_config.dart   &lt;span class=&quot;hljs-comment&quot;&gt;# 路由配置入口&lt;/span&gt;
│   ├── home_route.dart      &lt;span class=&quot;hljs-comment&quot;&gt;# 首页路由配置&lt;/span&gt;
│   ├── details_route.dart   &lt;span class=&quot;hljs-comment&quot;&gt;# 详情页路由配置&lt;/span&gt;
│   └── route_guard.dart     &lt;span class=&quot;hljs-comment&quot;&gt;# 路由守卫&lt;/span&gt;
├── models/
│   └── route_args.dart      &lt;span class=&quot;hljs-comment&quot;&gt;# 路由参数模型&lt;/span&gt;
├── utils/
│   └── navigation_service.dart &lt;span class=&quot;hljs-comment&quot;&gt;# 导航服务&lt;/span&gt;
└── pages/
    ├── home_page.dart
    └── details_page.dart
&lt;/code&gt;&lt;/pre&gt;</description><link>https://juejin.cn/post/7472230420470759424</link><guid isPermaLink="false">https://juejin.cn/post/7472230420470759424</guid><pubDate>Mon, 17 Feb 2025 09:37:12 GMT</pubDate><author>SunshineBrother</author><category>iOS</category><category>Flutter</category><category>Android</category></item><item><title>C 语言是如何编译执行的？</title><description>&lt;p&gt;C 语言的编译和执行过程分为 &lt;strong&gt;预处理、编译、汇编、链接&lt;/strong&gt; 四个阶段，最终生成可执行文件。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-0&quot;&gt;&lt;strong&gt;1. 预处理（Preprocessing）&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：处理源代码中的预处理指令（如 &lt;code&gt;#include&lt;/code&gt;、&lt;code&gt;#define&lt;/code&gt; 等），生成纯 C 代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入文件&lt;/strong&gt;：&lt;code&gt;.c&lt;/code&gt;（源文件）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输出文件&lt;/strong&gt;：&lt;code&gt;.i&lt;/code&gt;（预处理后的文件）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;展开头文件（&lt;code&gt;#include&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;替换宏（&lt;code&gt;#define&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;条件编译（&lt;code&gt;#ifdef&lt;/code&gt;、&lt;code&gt;#ifndef&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;命令示例&lt;/strong&gt;：
&lt;pre&gt;&lt;code class=&quot;hljs language-bash&quot; lang=&quot;bash&quot;&gt;gcc -E main.c -o main.i
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-1&quot;&gt;&lt;strong&gt;2. 编译（Compilation）&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：将预处理后的代码转换为汇编代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入文件&lt;/strong&gt;：&lt;code&gt;.i&lt;/code&gt;（预处理后的文件）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输出文件&lt;/strong&gt;：&lt;code&gt;.s&lt;/code&gt;（汇编文件）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;词法分析 → 语法分析 → 语义分析 → 中间代码生成 → 代码优化 → 汇编代码生成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;命令示例&lt;/strong&gt;：
&lt;pre&gt;&lt;code class=&quot;hljs language-bash&quot; lang=&quot;bash&quot;&gt;gcc -S main.i -o main.s
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-2&quot;&gt;&lt;strong&gt;3. 汇编（Assembly）&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：将汇编代码转换为机器指令（目标文件）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入文件&lt;/strong&gt;：&lt;code&gt;.s&lt;/code&gt;（汇编文件）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输出文件&lt;/strong&gt;：&lt;code&gt;.o&lt;/code&gt;（目标文件）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;将汇编指令逐行翻译为机器码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;命令示例&lt;/strong&gt;：
&lt;pre&gt;&lt;code class=&quot;hljs language-bash&quot; lang=&quot;bash&quot;&gt;gcc -c main.s -o main.o
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-3&quot;&gt;&lt;strong&gt;4. 链接（Linking）&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：将多个目标文件（如库文件、其他模块）合并为最终可执行文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入文件&lt;/strong&gt;：&lt;code&gt;.o&lt;/code&gt;（目标文件） + 库文件（如 &lt;code&gt;libc.a&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输出文件&lt;/strong&gt;：可执行文件（如 &lt;code&gt;a.out&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;符号解析（解决函数和变量的引用）。&lt;/li&gt;
&lt;li&gt;地址重定位（分配内存地址）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;命令示例&lt;/strong&gt;：
&lt;pre&gt;&lt;code class=&quot;hljs language-bash&quot; lang=&quot;bash&quot;&gt;gcc main.o -o main
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-4&quot;&gt;&lt;strong&gt;完整流程&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-bash&quot; lang=&quot;bash&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# 一步完成所有阶段&lt;/span&gt;
gcc main.c -o main

&lt;span class=&quot;hljs-comment&quot;&gt;# 分步执行&lt;/span&gt;
gcc -E main.c -o main.i    &lt;span class=&quot;hljs-comment&quot;&gt;# 预处理&lt;/span&gt;
gcc -S main.i -o main.s    &lt;span class=&quot;hljs-comment&quot;&gt;# 编译&lt;/span&gt;
gcc -c main.s -o main.o    &lt;span class=&quot;hljs-comment&quot;&gt;# 汇编&lt;/span&gt;
gcc main.o -o main         &lt;span class=&quot;hljs-comment&quot;&gt;# 链接&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-5&quot;&gt;&lt;strong&gt;执行程序&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;运行可执行文件：
&lt;pre&gt;&lt;code class=&quot;hljs language-bash&quot; lang=&quot;bash&quot;&gt;./main
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;接下来演示如何将多个目标文件、静态库和动态库合并为最终的可执行文件。假设项目结构如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-csharp&quot; lang=&quot;csharp&quot;&gt;project/
├── main.c          &lt;span class=&quot;hljs-meta&quot;&gt;# 主程序&lt;/span&gt;
├── modules/
│   ├── utils.c     &lt;span class=&quot;hljs-meta&quot;&gt;# 工具模块&lt;/span&gt;
│   └── math.c      &lt;span class=&quot;hljs-meta&quot;&gt;# 数学模块&lt;/span&gt;
├── libs/
│   ├── &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt;/     &lt;span class=&quot;hljs-meta&quot;&gt;# 静态库源码&lt;/span&gt;
│   │   └── helper.c
│   └── &lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;/    &lt;span class=&quot;hljs-meta&quot;&gt;# 动态库源码&lt;/span&gt;
│       └── algo.c
└── headers/        &lt;span class=&quot;hljs-meta&quot;&gt;# 头文件&lt;/span&gt;
    ├── utils.h
    ├── math.h
    ├── helper.h
    └── algo.h
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-6&quot;&gt;&lt;strong&gt;步骤 1：编写代码&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-7&quot;&gt;1.1 &lt;code&gt;main.c&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-c&quot; lang=&quot;c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;utils.h&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;math.h&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;helper.h&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;algo.h&quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {
    print_message(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Starting complex example&quot;&lt;/span&gt;);
    
    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, b = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;
    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Add: %d\n&quot;&lt;/span&gt;, add(a, b));
    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Multiply: %d\n&quot;&lt;/span&gt;, multiply(a, b));
    
    static_function();    &lt;span class=&quot;hljs-comment&quot;&gt;// 来自静态库&lt;/span&gt;
    dynamic_function();   &lt;span class=&quot;hljs-comment&quot;&gt;// 来自动态库&lt;/span&gt;
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-8&quot;&gt;1.2 &lt;code&gt;modules/utils.c&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-c&quot; lang=&quot;c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;utils.h&quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;print_message&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* msg)&lt;/span&gt; {
    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[LOG] %s\n&quot;&lt;/span&gt;, msg);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-9&quot;&gt;1.3 &lt;code&gt;modules/math.c&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-c&quot; lang=&quot;c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;math.h&quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b)&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + b;
}

&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b)&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a * b;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-10&quot;&gt;1.4 &lt;code&gt;libs/static/helper.c&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-c&quot; lang=&quot;c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;helper.h&quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;static_function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {
    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;This is a static library function\n&quot;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-11&quot;&gt;1.5 &lt;code&gt;libs/dynamic/algo.c&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-c&quot; lang=&quot;c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;algo.h&quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;dynamic_function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {
    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;This is a dynamic library function\n&quot;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-12&quot;&gt;&lt;strong&gt;步骤 2：编译目标文件&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-bash&quot; lang=&quot;bash&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# 编译主程序和模块&lt;/span&gt;
gcc -c main.c -Iheaders -o main.o
gcc -c modules/utils.c -Iheaders -o utils.o
gcc -c modules/math.c -Iheaders -o math.o

&lt;span class=&quot;hljs-comment&quot;&gt;# 编译静态库&lt;/span&gt;
gcc -c libs/static/helper.c -Iheaders -o helper.o
ar rcs libhelper.a helper.o  &lt;span class=&quot;hljs-comment&quot;&gt;# 创建静态库 libhelper.a&lt;/span&gt;

&lt;span class=&quot;hljs-comment&quot;&gt;# 编译动态库&lt;/span&gt;
gcc -c -fPIC libs/dynamic/algo.c -Iheaders -o algo.o
gcc -shared algo.o -o libalgo.so  &lt;span class=&quot;hljs-comment&quot;&gt;# 创建动态库 libalgo.so&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-13&quot;&gt;&lt;strong&gt;步骤 3：链接所有文件&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-bash&quot; lang=&quot;bash&quot;&gt;gcc \
  main.o utils.o math.o \
  -L. -lhelper -L. -lalgo \
  -Iheaders \
  -Wl,-rpath=./  &lt;span class=&quot;hljs-comment&quot;&gt;# 指定运行时动态库搜索路径&lt;/span&gt;
  -o final_program
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;关键参数解释&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-L.&lt;/code&gt;：指定库文件的搜索路径（当前目录）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-lhelper&lt;/code&gt;：链接静态库 &lt;code&gt;libhelper.a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-lalgo&lt;/code&gt;：链接动态库 &lt;code&gt;libalgo.so&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-Wl,-rpath=./&lt;/code&gt;：告诉可执行文件运行时在 &lt;code&gt;./&lt;/code&gt; 目录查找动态库&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-14&quot;&gt;&lt;strong&gt;步骤 4：运行程序&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-bash&quot; lang=&quot;bash&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# 确保动态库路径可用&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;export&lt;/span&gt; LD_LIBRARY_PATH=./:&lt;span class=&quot;hljs-variable&quot;&gt;$LD_LIBRARY_PATH&lt;/span&gt;

&lt;span class=&quot;hljs-comment&quot;&gt;# 执行程序&lt;/span&gt;
./final_program
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;输出结果&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-vbnet&quot; lang=&quot;vbnet&quot;&gt;[LOG] Starting complex example
&lt;span class=&quot;hljs-symbol&quot;&gt;Add:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;hljs-symbol&quot;&gt;Multiply:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;
This &lt;span class=&quot;hljs-built_in&quot;&gt;is&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; library &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;
This &lt;span class=&quot;hljs-built_in&quot;&gt;is&lt;/span&gt; a dynamic library &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 data-id=&quot;heading-15&quot;&gt;如何自动化&lt;/h2&gt;
&lt;p&gt;自动化编译和链接可以通过多种工具和技术实现，以下是一些常见的方法，适用于不同规模和复杂度的项目。以之前的示例项目为基础，逐步说明如何实现自动化。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-16&quot;&gt;&lt;strong&gt;方法 1：使用 Makefile 自动化&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-17&quot;&gt;1.1 编写 &lt;code&gt;Makefile&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-makefile&quot; lang=&quot;makefile&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# 定义变量&lt;/span&gt;
CC = gcc
CFLAGS = -Iheaders -Wall -Wextra
LDFLAGS = -L. -lhelper -L. -lalgo -Wl,-rpath=./

&lt;span class=&quot;hljs-comment&quot;&gt;# 目标文件&lt;/span&gt;
OBJS = main.o utils.o math.o

&lt;span class=&quot;hljs-comment&quot;&gt;# 默认目标&lt;/span&gt;
&lt;span class=&quot;hljs-section&quot;&gt;all: final_program&lt;/span&gt;

&lt;span class=&quot;hljs-comment&quot;&gt;# 主程序依赖项&lt;/span&gt;
&lt;span class=&quot;hljs-section&quot;&gt;final_program: &lt;span class=&quot;hljs-variable&quot;&gt;$(OBJS)&lt;/span&gt; libhelper.a libalgo.so&lt;/span&gt;
&lt;span class=&quot;hljs-variable&quot;&gt;$(CC)&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$^&lt;/span&gt; -o &lt;span class=&quot;hljs-variable&quot;&gt;$@&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$(LDFLAGS)&lt;/span&gt;

&lt;span class=&quot;hljs-comment&quot;&gt;# 生成静态库&lt;/span&gt;
&lt;span class=&quot;hljs-section&quot;&gt;libhelper.a: helper.o&lt;/span&gt;
ar rcs &lt;span class=&quot;hljs-variable&quot;&gt;$@&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$^&lt;/span&gt;

&lt;span class=&quot;hljs-comment&quot;&gt;# 生成动态库&lt;/span&gt;
&lt;span class=&quot;hljs-section&quot;&gt;libalgo.so: algo.o&lt;/span&gt;
&lt;span class=&quot;hljs-variable&quot;&gt;$(CC)&lt;/span&gt; -shared &lt;span class=&quot;hljs-variable&quot;&gt;$^&lt;/span&gt; -o &lt;span class=&quot;hljs-variable&quot;&gt;$@&lt;/span&gt;

&lt;span class=&quot;hljs-comment&quot;&gt;# 通用编译规则（自动推导 .c → .o）&lt;/span&gt;
&lt;span class=&quot;hljs-section&quot;&gt;%.o: %.c&lt;/span&gt;
&lt;span class=&quot;hljs-variable&quot;&gt;$(CC)&lt;/span&gt; -c &lt;span class=&quot;hljs-variable&quot;&gt;$&amp;lt;&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$(CFLAGS)&lt;/span&gt; -o &lt;span class=&quot;hljs-variable&quot;&gt;$@&lt;/span&gt;

&lt;span class=&quot;hljs-comment&quot;&gt;# 清理生成文件&lt;/span&gt;
&lt;span class=&quot;hljs-section&quot;&gt;clean:&lt;/span&gt;
rm -f *.o *.a *.so final_program

&lt;span class=&quot;hljs-meta&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;.PHONY&lt;/span&gt;: all clean&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-18&quot;&gt;1.2 使用命令&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-bash&quot; lang=&quot;bash&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# 一键编译并链接&lt;/span&gt;
make

&lt;span class=&quot;hljs-comment&quot;&gt;# 清理生成的文件&lt;/span&gt;
make clean
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-19&quot;&gt;&lt;strong&gt;方法 2：使用 CMake 自动化（跨平台推荐）&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-20&quot;&gt;2.1 编写 &lt;code&gt;CMakeLists.txt&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-cmake&quot; lang=&quot;cmake&quot;&gt;cmake_minimum_required(VERSION 3.10)
project(ComplexExample)

# 设置头文件目录
include_directories(headers)

# 添加主程序和模块
add_executable(final_program
  main.c
  modules/utils.c
  modules/math.c
)

# 添加静态库（helper）
add_library(helper STATIC libs/static/helper.c)
target_link_libraries(final_program helper)

# 添加动态库（algo）
add_library(algo SHARED libs/dynamic/algo.c)
target_link_libraries(final_program algo)

# 设置动态库输出路径
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-21&quot;&gt;2.2 使用命令&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-bash&quot; lang=&quot;bash&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# 生成构建系统（如 Unix Makefiles）&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;mkdir&lt;/span&gt; build
&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; build
cmake ..

&lt;span class=&quot;hljs-comment&quot;&gt;# 编译和链接&lt;/span&gt;
make

&lt;span class=&quot;hljs-comment&quot;&gt;# 运行程序&lt;/span&gt;
./final_program
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-22&quot;&gt;&lt;strong&gt;方法 3：使用 Shell 脚本自动化&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-23&quot;&gt;3.1 编写 &lt;code&gt;build.sh&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-bash&quot; lang=&quot;bash&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;hljs-comment&quot;&gt;# 编译目标文件&lt;/span&gt;
gcc -c main.c -Iheaders -o main.o
gcc -c modules/utils.c -Iheaders -o utils.o
gcc -c modules/math.c -Iheaders -o math.o

&lt;span class=&quot;hljs-comment&quot;&gt;# 编译静态库&lt;/span&gt;
gcc -c libs/static/helper.c -Iheaders -o helper.o
ar rcs libhelper.a helper.o

&lt;span class=&quot;hljs-comment&quot;&gt;# 编译动态库&lt;/span&gt;
gcc -c -fPIC libs/dynamic/algo.c -Iheaders -o algo.o
gcc -shared algo.o -o libalgo.so

&lt;span class=&quot;hljs-comment&quot;&gt;# 链接所有文件&lt;/span&gt;
gcc main.o utils.o math.o -L. -lhelper -lalgo -Wl,-rpath=./ -o final_program

&lt;span class=&quot;hljs-comment&quot;&gt;# 清理中间文件（可选）&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;rm&lt;/span&gt; -f *.o

&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Build completed! Run with: ./final_program&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-id=&quot;heading-24&quot;&gt;3.2 使用命令&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-bash&quot; lang=&quot;bash&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# 赋予执行权限&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;chmod&lt;/span&gt; +x build.sh

&lt;span class=&quot;hljs-comment&quot;&gt;# 运行脚本&lt;/span&gt;
./build.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-25&quot;&gt;&lt;strong&gt;自动化工具对比&lt;/strong&gt;&lt;/h3&gt;





























&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;工具&lt;/th&gt;&lt;th&gt;适用场景&lt;/th&gt;&lt;th&gt;优点&lt;/th&gt;&lt;th&gt;缺点&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Makefile&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;中小型项目、Unix/Linux 环境&lt;/td&gt;&lt;td&gt;灵活、高度可配置&lt;/td&gt;&lt;td&gt;语法复杂，跨平台支持弱&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;CMake&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;跨平台项目、大型工程&lt;/td&gt;&lt;td&gt;支持多种生成器（如 VS、Xcode）&lt;/td&gt;&lt;td&gt;学习曲线较陡&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Shell&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;快速简单任务&lt;/td&gt;&lt;td&gt;无需额外工具&lt;/td&gt;&lt;td&gt;难以处理复杂依赖关系&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;hr&gt;
&lt;h3 data-id=&quot;heading-26&quot;&gt;&lt;strong&gt;扩展自动化场景&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自动测试集成&lt;/strong&gt;&lt;br&gt;
在 &lt;code&gt;Makefile&lt;/code&gt; 或 &lt;code&gt;CMakeLists.txt&lt;/code&gt; 中添加 &lt;code&gt;test&lt;/code&gt; 目标，运行单元测试：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-makefile&quot; lang=&quot;makefile&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;test: final_program&lt;/span&gt;
    ./final_program --test
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;版本控制集成&lt;/strong&gt;&lt;br&gt;
结合 Git Hook，在提交代码前自动编译验证：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-bash&quot; lang=&quot;bash&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# .git/hooks/pre-commit&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;#!/bin/sh&lt;/span&gt;
make &amp;amp;&amp;amp; ./final_program --smoke-test
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;持续集成（CI）&lt;/strong&gt;&lt;br&gt;
在 GitHub Actions 或 GitLab CI 中配置自动化流程：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-yaml&quot; lang=&quot;yaml&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# .github/workflows/build.yml&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;jobs:&lt;/span&gt;
  &lt;span class=&quot;hljs-attr&quot;&gt;build:&lt;/span&gt;
    &lt;span class=&quot;hljs-attr&quot;&gt;runs-on:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;hljs-attr&quot;&gt;steps:&lt;/span&gt;
      &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;uses:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;actions/checkout@v4&lt;/span&gt;
      &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;Build&lt;/span&gt;
        &lt;span class=&quot;hljs-attr&quot;&gt;run:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;|
          make
          ./final_program --test
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过以上方法，可以显著减少手动操作，提升开发效率并降低错误率。&lt;/p&gt;</description><link>https://juejin.cn/post/7471630643534610468</link><guid isPermaLink="false">https://juejin.cn/post/7471630643534610468</guid><pubDate>Sun, 16 Feb 2025 06:06:51 GMT</pubDate><author>庄周梦了个蝶</author><category>iOS</category><category>面试</category><category>全栈</category><category>编程语言</category></item></channel></rss>