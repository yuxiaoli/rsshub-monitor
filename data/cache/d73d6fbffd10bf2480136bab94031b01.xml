<?xml version="1.0" encoding="UTF-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" version="2.0"><channel><title>Real-time discussions in the developer community | daily.dev</title><link>https://app.daily.dev/posts/discussed</link><atom:link href="http://rsshub.rssforever.com/daily/discussed/30" rel="self" type="application/rss+xml"></atom:link><description>Stay on top of real-time developer discussions on daily.dev. Join conversations happening now and engage with the most active community members. - Powered by RSSHub</description><generator>RSSHub</generator><webMaster>contact@rsshub.app (RSSHub)</webMaster><language>en-us</language><lastBuildDate>Wed, 19 Mar 2025 23:21:04 GMT</lastBuildDate><ttl>5</ttl><item><title>This feature is going to change your life forever!!!!!!</title><description>&lt;img src=&quot;https://media.daily.dev/image/upload/s--AfKSTg3x--/f_auto/v1742384334/posts/lzh8p4ar2&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;   &lt;p&gt;See what we did there? That‚Äôs ‚ÄúClickbait‚Äù‚Äîan overexaggerated promise to get you clicking, even though the content itself isn‚Äôt necessarily very exciting (well, sometimes it is, but you get the point). Except this time, we are giving Plus subscribers some superpowers you never thought you‚Äôd have.&lt;/p&gt;&lt;br&gt;&lt;h2&gt;Introducing: Clickbait Shield (for daily.dev Plus users)&lt;/h2&gt;&lt;br&gt;&lt;p&gt;Clickbait Shield uses AI to automatically optimize post titles by fixing common problems like clickbait, lack of clarity, and overly promotional language. The result is clearer, more informative titles that help you quickly find the content you actually need. This is a massive upgrade for promoting your focus and reducing distraction.&lt;/p&gt;&lt;br&gt;&lt;p&gt;From now on, when we recognize the title of a post is likely to be Clickbait, a little shield will show up below it:&lt;/p&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;Green shield&lt;/strong&gt;: Clickbait Shield is activated, and the title has been modified to reduce Clickbait.&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;White shield&lt;/strong&gt;: You‚Äôre seeing the original title.&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;&lt;h2&gt;On/Off&lt;/h2&gt;&lt;br&gt;&lt;p&gt;You can toggle the Clickbait Shield on or off from the top-right corner, next to ‚ÄúFeed settings.‚Äù&lt;/p&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;Green shield&lt;/strong&gt;: Active.&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;Transparent shield&lt;/strong&gt;: Inactive.&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;&lt;p&gt;&lt;img src=&quot;https://media.daily.dev/image/upload/s--Jmpv320V--/f_auto/v1742384109/ugc/content_a413547d-a2b0-4d84-b3d8-0ecb5875100c&quot; alt=&quot;image3&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;h2&gt;Let‚Äôs see it in action&lt;/h2&gt;&lt;br&gt;&lt;p&gt;The green shield indicates Clickbait Shield is activated for this post. Let‚Äôs click it and reveal what the headline was originally.&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;img src=&quot;https://media.daily.dev/image/upload/s--hXTVYBy4--/f_auto/v1742384170/ugc/content_2fce8139-9518-4481-8ba4-6f35fbab8ac8&quot; alt=&quot;image2&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;Drumroll‚Ä¶ ü•Å&lt;/strong&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;img src=&quot;https://media.daily.dev/image/upload/s--UT76nuov--/f_auto/v1742384183/ugc/content_c500a401-8542-4523-833a-39fd4f2f84c6&quot; alt=&quot;image4&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Yes, we know. You‚Äôre mind-blown. ü§Ø&lt;/p&gt;&lt;br&gt;&lt;p&gt;Imagine if we could apply a Clickbait Shield to the entire Internet. Or to life in general?!&lt;/p&gt;&lt;br&gt;&lt;p&gt;Curious?! You get one taste for free: For non Plus developers: look out for a yellow shield on one of your posts, click it to see what life would be like with Clickbait shield. Level up to live like this forever.&lt;/p&gt;&lt;br&gt;&lt;p&gt;P.S Wondering about Clickbait and Blockwords? We analyze the original title to block words, not the modified one.&lt;/p&gt;&lt;br&gt; </description><link>https://app.daily.dev/posts/this-feature-is-going-to-change-your-life-forever--lzh8p4ar2</link><guid isPermaLink="false">https://api.daily.dev/r/lzh8p4ar2</guid><pubDate>Wed, 19 Mar 2025 11:38:53 GMT</pubDate><author>Denis Bolkovskis</author><itunes:image href="https://media.daily.dev/image/upload/s--AfKSTg3x--/f_auto/v1742384334/posts/lzh8p4ar2"></itunes:image><category>tech-news</category><category>ai</category><category>tools</category><category>productivity</category><category>content-creation</category></item><item><title>I dont know why i love linux.</title><description>&lt;img src=&quot;https://media.daily.dev/image/upload/s--JqohcaXb--/f_auto/v1742209793/posts/gieWKjdby&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;   &lt;p&gt;Had to switch to windows to work on something for a while, When i finaly was able to go back to pop os my brother asks me why i do this when it stops me from playing most online games, My answer was‚Ä¶idk.&lt;/p&gt;&lt;br&gt;&lt;p&gt;1.I like not having to have an anti virus (instead i like to bottle everything).&lt;br&gt;2.and being able to use terminal commands is alot easier than managing the system manually.&lt;/p&gt;&lt;br&gt;&lt;p&gt;Which are the reasons i give most the time but i don‚Äôt know exactly why i feel alot better with a linux distro than using windows.&lt;/p&gt;&lt;br&gt;&lt;p&gt;When i use windows i always feel annoyed even though everything works.&lt;/p&gt;&lt;br&gt;&lt;p&gt;When i use linux something breaks and i laugh then spend alot of time fixing it with a smile on my face.&lt;/p&gt;&lt;br&gt;&lt;p&gt;What kind of dilemma is this idk but maybe im not alone.&lt;/p&gt; </description><link>https://app.daily.dev/posts/i-dont-know-why-i-love-linux--46jqccgqg</link><guid isPermaLink="false">https://api.daily.dev/r/46jqccgQG</guid><pubDate>Mon, 17 Mar 2025 13:30:13 GMT</pubDate><author>Vana</author><itunes:image href="https://media.daily.dev/image/upload/s--JqohcaXb--/f_auto/v1742209793/posts/gieWKjdby"></itunes:image><category>linux</category><category>windows</category><category>cli</category></item><item><title>Announcing AI Tutor - Generate a free course on any topic and learn using AI</title><description>&lt;img src=&quot;https://media.daily.dev/image/upload/s--qPvKM23u--/f_auto/v1722860399/public/Placeholder%2009&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;  </description><link>https://app.daily.dev/posts/announcing-ai-tutor---generate-a-free-course-on-any-topic-and-learn-using-ai-0g3hiuyci</link><guid isPermaLink="false">https://api.daily.dev/r/0g3hiUYCI</guid><pubDate>Mon, 17 Mar 2025 12:21:32 GMT</pubDate><author>Kamran Ahmed</author><itunes:image href="https://media.daily.dev/image/upload/s--qPvKM23u--/f_auto/v1722860399/public/Placeholder%2009"></itunes:image><category>ai</category><category>machine-learning</category></item><item><title>Zed vs. VS Code: Which One Wins?</title><description>&lt;img src=&quot;https://media.daily.dev/image/upload/s--HcCtOOyw--/f_auto/v1742207245/posts/9X2jz71nu&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;   &lt;p&gt;Both Zed and VS Code are great editors, but they serve different needs:&lt;/p&gt;&lt;br&gt;&lt;p&gt;‚ö° Speed: Zed (built with Rust) is faster, while VS Code (Electron) can be heavy.&lt;/p&gt;&lt;br&gt;&lt;p&gt;üé® UI: Zed is minimal, VS Code is highly customizable.&lt;/p&gt;&lt;br&gt;&lt;p&gt;üõ†Ô∏è Extensions: VS Code wins with thousands of plugins.&lt;/p&gt;&lt;br&gt;&lt;p&gt;ü§ù Collaboration: Zed offers real-time multiplayer editing.&lt;/p&gt;&lt;br&gt;&lt;p&gt;üì° Remote Dev: VS Code supports SSH, WSL, and containers.&lt;/p&gt;&lt;br&gt;&lt;p&gt;üîå Git &amp;amp; Terminal: VS Code has built-in Git tools &amp;amp; terminal, Zed doesn‚Äôt.&lt;/p&gt;&lt;br&gt;&lt;p&gt;üëâ Zed for speed &amp;amp; teamwork. VS Code for flexibility &amp;amp; features.&lt;/p&gt;&lt;br&gt;&lt;p&gt;Which one do you prefer? üöÄ&lt;/p&gt; </description><link>https://app.daily.dev/posts/zed-vs-vs-code-which-one-wins--xlbnulmyk</link><guid isPermaLink="false">https://api.daily.dev/r/XlbNulMyK</guid><pubDate>Mon, 17 Mar 2025 09:19:19 GMT</pubDate><author>Shahid Aziz</author><itunes:image href="https://media.daily.dev/image/upload/s--HcCtOOyw--/f_auto/v1742207245/posts/9X2jz71nu"></itunes:image><category>devtools</category><category>rust</category><category>vscode</category><category>electron</category></item><item><title></title><description>&lt;img src=&quot;https://media.daily.dev/image/upload/s--HRgLpUt6--/f_auto/v1722860399/public/Placeholder%2003&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;  </description><link>https://app.daily.dev/posts/jv2tbooo0</link><guid isPermaLink="false">https://api.daily.dev/r/JV2tBoOO0</guid><pubDate>Mon, 17 Mar 2025 04:09:14 GMT</pubDate><author>Saif</author><itunes:image href="https://media.daily.dev/image/upload/s--HRgLpUt6--/f_auto/v1722860399/public/Placeholder%2003"></itunes:image><category>tech-news</category><category>webdev</category><category>productivity</category><category>future</category></item><item><title>Anticheat Discussion</title><description>&lt;p&gt;heya, for some time I‚Äôve been experimenting with a personal project of mine - trying to have an upper hand in the everlasting ‚Äúdev vs cheater‚Äù competition. this thread is more of a ‚Äúwould it work?‚Äù question I wish to discuss here.&lt;/p&gt;&lt;br&gt;&lt;p&gt;What I was trying to achieve - Find a way to filter virtual inputs (created by software, virtual devices and USB-plugged cheating devices). Deny any illegitimate inputs and fix some of the most popular triggerbot/antiaim (spinning) cheats.&lt;/p&gt;&lt;br&gt;&lt;p&gt;I‚Äôve made lots of dumb mistakes on the way and ended up with a working (to some extent) prototype - &lt;a href=&quot;https://github.com/smmac72/inputFilter&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;A small summary:&lt;/p&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt;Checking for LLMHF_INJECTED flag for the input - every message Windows sends can be verified (did some software tried to send the message or was it a legit one) via this flag. It‚Äôs the easiest one, but if we can tap into the messages, anyone with enough WinAPI knowledge can. I found a bypass made in 2021&lt;/li&gt;&lt;br&gt;&lt;li&gt;Windows message must come with a RawInput event - we‚Äôll tap into the raw data coming from our mouse. If Windows has our click, mouse should too. That would probably be enough for filtering out software inputs&lt;/li&gt;&lt;br&gt;&lt;li&gt;Checking for the virtual Generic HIDs - more of a hack to try to filter out the virtual devices which can be created by a cheat software. Our mice have legitimate info, usual virtual ones don‚Äôt (but it obviously can be bypassed, it‚Äôs just harder). I‚Äôll stick with having a ‚ÄúHID\VID‚Äù substring in the name of our device&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;&lt;p&gt;Probably a better fix for virtual/physical unwanted devices is having only one device for accepting inputs - usual competitive shooter player has only one mouse for playing. One keyboard, one mouse, one gamepad (gamepad‚Äôs probably bad sometimes, but obviously can be modified for coop stuff). Didn‚Äôt do anything with that, but would like to hear something about this idea&lt;/p&gt;&lt;br&gt;&lt;p&gt;Now the nerdy stuff‚Äôs out of the way, I just wanted to have some reflection on this. I‚Äôve spent lots of time to some really unnecessary stuff - hooked into Unreal Engine Enhanced Input (and lost my mind with compiling C++ UE code hundreds of times), tried to analyze the most basic vendorID/productID values, experimented with analyzing input patterns (leading to a handful of false positives), verified some of the main WinAPI functions checksums to find any outer interference. Was a mess TBH :(&lt;/p&gt;&lt;br&gt;&lt;p&gt;So, now I have done everything I wanted to. Would like to hear from professional anticheat developers (or cheat developers) about the effectiveness of my methods, maybe about something I forgot/neglected. Anyways, was a cool week!&lt;/p&gt; </description><link>https://app.daily.dev/posts/anticheat-discussion-3cc64aale</link><guid isPermaLink="false">https://api.daily.dev/r/3CC64aalE</guid><pubDate>Sun, 16 Mar 2025 23:58:13 GMT</pubDate><author>Oleg</author><category>c</category></item><item><title>I‚Äôve built an open source image blending tool that lets you create stunning image effects, generate Tailwind CSS code, and more!</title><description>&lt;img src=&quot;https://media.daily.dev/image/upload/s--dXM3_GJs--/f_auto/v1742113718/posts/Q9a6SLoVh&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;   &lt;p&gt;&lt;a href=&quot;https://imageblender.vercel.app/&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Live&lt;/a&gt; | &lt;a href=&quot;https://github.com/muhammadhafijur/image-blender&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;As a frontend developer, I have used blend modes in various projects. Previously, I had to check the output in DevTools multiple times. To make that process easier, I created an open-source project called Image Blender. However, I wasn‚Äôt happy with the UI/UX, so this time, I focused on improving it and added some new features as well.&lt;/p&gt;&lt;br&gt;&lt;p&gt;Features:&lt;/p&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt;Paste or Upload Images ‚Äì Quickly drag, drop, or paste image links to get started.&lt;/li&gt;&lt;br&gt;&lt;li&gt;Blend Effects ‚Äì Apply various CSS blend modes (Multiply, Screen, Overlay, and more) to create eye-catching effects.&lt;/li&gt;&lt;br&gt;&lt;li&gt;Gradient Effects ‚Äì Seamlessly blend colors with customizable gradient options.&lt;br&gt;Unique Presets ‚Äì Choose from a curated collection of preset styles for instant styling.&lt;/li&gt;&lt;br&gt;&lt;li&gt;Community Presets ‚Äì Explore and use presets contributed by the community.&lt;/li&gt;&lt;br&gt;&lt;li&gt;View &amp;amp; Copy Code ‚Äì Instantly generate Tailwind CSS code for your effects so you can integrate them into your projects.&lt;/li&gt;&lt;br&gt;&lt;li&gt;Download Modified Images ‚Äì Save your high-quality, blended images directly from the app.&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;&lt;p&gt;Do check this out and share your feedback! If you‚Äôre interested, you can contribute to community presets or any other improvements as well.&lt;/p&gt;&lt;br&gt;&lt;p&gt;#opensource #webdev #frontend #vue #react #imageblender #blendmodes #webdev #design #uiux&lt;/p&gt; </description><link>https://app.daily.dev/posts/i-ve-built-an-open-source-image-blending-tool-that-lets-you-create-stunning-image-effects-generate--higl9g8da</link><guid isPermaLink="false">https://api.daily.dev/r/HIGL9g8DA</guid><pubDate>Sun, 16 Mar 2025 23:19:58 GMT</pubDate><author>Hafijur Rahman</author><itunes:image href="https://media.daily.dev/image/upload/s--dXM3_GJs--/f_auto/v1742113718/posts/Q9a6SLoVh"></itunes:image><category>webdev</category><category>react</category><category>open-source</category><category>frontend</category><category>vuejs</category></item><item><title></title><description>&lt;img src=&quot;https://media.daily.dev/image/upload/s--P4t4XyoV--/f_auto/v1722860399/public/Placeholder%2001&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;  </description><link>https://app.daily.dev/posts/zz0peddud</link><guid isPermaLink="false">https://api.daily.dev/r/zz0PeDDud</guid><pubDate>Sun, 16 Mar 2025 21:05:36 GMT</pubDate><author>Michal Poczwardowski</author><itunes:image href="https://media.daily.dev/image/upload/s--P4t4XyoV--/f_auto/v1722860399/public/Placeholder%2001"></itunes:image><category>career</category><category>productivity</category><category>mental-health</category></item><item><title>Do you believe compounding is truly the eighth wonder of the world, or is it just the best-kept secret of the wealthy?</title><description>&lt;img src=&quot;https://media.daily.dev/image/upload/s--qPvKM23u--/f_auto/v1722860399/public/Placeholder%2009&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;  </description><link>https://app.daily.dev/posts/do-you-believe-compounding-is-truly-the-eighth-wonder-of-the-world-or-is-it-just-the-best-kept-secr-bjmm677zb</link><guid isPermaLink="false">https://api.daily.dev/r/bjMM677zb</guid><pubDate>Sun, 16 Mar 2025 16:19:08 GMT</pubDate><author>Master Mentee</author><itunes:image href="https://media.daily.dev/image/upload/s--qPvKM23u--/f_auto/v1722860399/public/Placeholder%2009"></itunes:image><category>career</category><category>productivity</category></item><item><title>üöÄ JavaScript‚Äôs Mind-Blowing `structuredClone()` ‚Äì The Clone Wars Are Over!</title><description>&lt;img src=&quot;https://media.daily.dev/image/upload/s--SeCpB2Vm--/f_auto/v1742134553/posts/uQqjuMq33&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;   &lt;p&gt;Deep cloning in JavaScript has always been a &lt;strong&gt;headache&lt;/strong&gt;. From &lt;code&gt;JSON.parse(JSON.stringify())&lt;/code&gt; breaking on functions, to libraries like &lt;code&gt;lodash.cloneDeep()&lt;/code&gt;, we‚Äôve had to rely on &lt;strong&gt;workarounds&lt;/strong&gt;.&lt;/p&gt;&lt;br&gt;&lt;p&gt;But now, JavaScript has a &lt;strong&gt;built-in deep cloning method&lt;/strong&gt;‚Äîmeet &lt;strong&gt;&lt;code&gt;structuredClone()&lt;/code&gt;&lt;/strong&gt;! üò±&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;h3&gt;üéØ &lt;strong&gt;What is &lt;code&gt;structuredClone()&lt;/code&gt;?&lt;/strong&gt;&lt;/h3&gt;&lt;br&gt;&lt;p&gt;It‚Äôs a &lt;strong&gt;native deep-cloning function&lt;/strong&gt; that copies objects &lt;strong&gt;without breaking data types&lt;/strong&gt;! Unlike &lt;code&gt;JSON.stringify()&lt;/code&gt;, it:&lt;/p&gt;&lt;br&gt;&lt;p&gt;‚úÖ &lt;strong&gt;Supports functions, Maps, Sets, Dates, TypedArrays&lt;/strong&gt;&lt;br&gt;&lt;br&gt;‚úÖ &lt;strong&gt;Handles circular references&lt;/strong&gt; üöÄ&lt;br&gt;&lt;br&gt;‚úÖ &lt;strong&gt;Works natively in modern browsers &amp;amp; Node.js (v17+)!&lt;/strong&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;h3&gt;üõ†Ô∏è &lt;strong&gt;Old vs New: Deep Cloning in Action&lt;/strong&gt;&lt;/h3&gt;&lt;br&gt;&lt;h4&gt;‚ùå &lt;strong&gt;Before (Using JSON.stringify) ‚Äì Broken Cloning&lt;/strong&gt;&lt;/h4&gt;&lt;br&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = { &lt;span class=&quot;hljs-attr&quot;&gt;date&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(), &lt;span class=&quot;hljs-attr&quot;&gt;func&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt; };&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; cloned = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj));&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(cloned.&lt;span class=&quot;hljs-property&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// ‚ùå false (Broken)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(cloned.&lt;span class=&quot;hljs-property&quot;&gt;func&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// ‚ùå undefined (Functions are lost!)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;h4&gt;‚úÖ &lt;strong&gt;Now (Using &lt;code&gt;structuredClone()&lt;/code&gt;) ‚Äì Works Perfectly!&lt;/strong&gt;&lt;/h4&gt;&lt;br&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = { &lt;span class=&quot;hljs-attr&quot;&gt;date&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(), &lt;span class=&quot;hljs-attr&quot;&gt;func&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt; };&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; cloned = &lt;span class=&quot;hljs-title function_&quot;&gt;structuredClone&lt;/span&gt;(obj);&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(cloned.&lt;span class=&quot;hljs-property&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// ‚úÖ true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(cloned.&lt;span class=&quot;hljs-property&quot;&gt;func&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// ‚ùå Still not cloned (Functions aren&#39;t serializable)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;üö® Note:&lt;/strong&gt; Functions &amp;amp; prototype chains aren‚Äôt cloned, but &lt;strong&gt;everything else is!&lt;/strong&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;h3&gt;üî• &lt;strong&gt;Why is &lt;code&gt;structuredClone()&lt;/code&gt; a Game-Changer?&lt;/strong&gt;&lt;/h3&gt;&lt;br&gt;&lt;p&gt;üìå &lt;strong&gt;No More Manual Workarounds&lt;/strong&gt; ‚Äì Forget third-party libraries!&lt;br&gt;&lt;br&gt;üìå &lt;strong&gt;Handles Circular References&lt;/strong&gt; ‚Äì &lt;code&gt;JSON.stringify()&lt;/code&gt; crashes, but &lt;code&gt;structuredClone()&lt;/code&gt; doesn‚Äôt!&lt;br&gt;&lt;br&gt;üìå &lt;strong&gt;Built-In Performance Boost&lt;/strong&gt; ‚Äì Uses optimized browser internals.&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;h3&gt;‚ö° &lt;strong&gt;Bonus: Cloning Objects with Circular References&lt;/strong&gt;&lt;/h3&gt;&lt;br&gt;&lt;h4&gt;‚ùå &lt;strong&gt;Old Method ‚Äì Throws an Error&lt;/strong&gt;&lt;/h4&gt;&lt;br&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {};&lt;br&gt;obj.&lt;span class=&quot;hljs-property&quot;&gt;self&lt;/span&gt; = obj; &lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj)); &lt;span class=&quot;hljs-comment&quot;&gt;// ‚ùå ERROR: Circular structure!&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;h4&gt;‚úÖ &lt;strong&gt;New Method ‚Äì No Errors!&lt;/strong&gt;&lt;/h4&gt;&lt;br&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {};&lt;br&gt;obj.&lt;span class=&quot;hljs-property&quot;&gt;self&lt;/span&gt; = obj;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; cloned = &lt;span class=&quot;hljs-title function_&quot;&gt;structuredClone&lt;/span&gt;(obj); &lt;span class=&quot;hljs-comment&quot;&gt;// ‚úÖ Works perfectly!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(cloned.&lt;span class=&quot;hljs-property&quot;&gt;self&lt;/span&gt; === cloned); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;p&gt;üöÄ &lt;strong&gt;This makes deep cloning much safer &amp;amp; more reliable!&lt;/strong&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;h3&gt;üéØ &lt;strong&gt;Final Takeaway&lt;/strong&gt;&lt;/h3&gt;&lt;br&gt;&lt;p&gt;If you‚Äôve been &lt;strong&gt;struggling with deep cloning&lt;/strong&gt;, JavaScript &lt;strong&gt;finally&lt;/strong&gt; has a native solution! &lt;strong&gt;&lt;code&gt;structuredClone()&lt;/code&gt; is the future&lt;/strong&gt;, and it‚Äôs time to embrace it. üöÄ&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;h3&gt;üåç &lt;strong&gt;Let‚Äôs Connect!&lt;/strong&gt;&lt;/h3&gt;&lt;br&gt;&lt;p&gt;üì¢ More JavaScript insights at &lt;a href=&quot;https://dly.to/mbsMLX6KLlk&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;React Nexus&lt;/a&gt;&lt;br&gt;&lt;br&gt;ü§ù Let‚Äôs chat on &lt;a href=&quot;https://www.linkedin.com/in/sanjay-gopinathan&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Tried &lt;code&gt;structuredClone()&lt;/code&gt; yet? Let‚Äôs discuss your thoughts! üî•&lt;/p&gt;&lt;br&gt; </description><link>https://app.daily.dev/posts/javascript-s-mind-blowing-structuredclone-the-clone-wars-are-over--uqqjumq33</link><guid isPermaLink="false">https://api.daily.dev/r/uQqjuMq33</guid><pubDate>Sun, 16 Mar 2025 14:15:53 GMT</pubDate><author>Sanjay Gopinathan</author><itunes:image href="https://media.daily.dev/image/upload/s--SeCpB2Vm--/f_auto/v1742134553/posts/uQqjuMq33"></itunes:image></item><item><title>Please post feedback for improving the daily.dev algorithm in replies. Be as specific as possible and include examples üôå</title><description></description><link>https://app.daily.dev/posts/please-post-feedback-for-improving-the-daily-dev-algorithm-in-replies-be-as-specific-as-possible-an-0tivp59gf</link><guid isPermaLink="false">https://api.daily.dev/r/0tIVp59GF</guid><pubDate>Sun, 16 Mar 2025 12:31:28 GMT</pubDate><author>Nimrod Kramer</author></item><item><title>üöÄ Just Launched My Brand-New Portfolio! üöÄ</title><description>&lt;img src=&quot;https://media.daily.dev/image/upload/s--UwJWdCa2--/f_auto/v1742067463/posts/U5CzPSJ0A&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;   &lt;p&gt;I‚Äôve finally completed building my personal portfolio, and I‚Äôd love to get your feedback! üéâ&lt;/p&gt;&lt;br&gt;&lt;p&gt;üîó Check it out here:&lt;br&gt;&lt;a href=&quot;https://www.manishtamang.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://www.manishtamang.com&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;üí° Some cool features:&lt;br&gt;‚úÖ Dark/Light Mode (toggle in the footer)&lt;/p&gt;&lt;br&gt;&lt;p&gt;‚úÖ Blog, Projects, About, Contact &amp;amp; Guestbook&lt;/p&gt;&lt;br&gt;&lt;p&gt;‚úÖ Now Playing on Spotify (footer)&lt;/p&gt;&lt;br&gt;&lt;p&gt;‚úÖ Interactive Dashboard (WakaTime, GitHub contributions, visitor sessions via Umami API)&lt;/p&gt;&lt;br&gt;&lt;p&gt;‚úÖ Beautiful Charts &amp;amp; Graphs for insights&lt;/p&gt;&lt;br&gt;&lt;p&gt;‚úÖ Comprehensive Blog Stats (likes, views, title, slug)&lt;/p&gt;&lt;br&gt;&lt;p&gt;‚úÖ City Temperature at Footer üå°Ô∏è&lt;/p&gt;&lt;br&gt;&lt;p&gt;‚úÖ Availability Status in Contact Page (time-based logic)&lt;/p&gt;&lt;br&gt;&lt;p&gt;‚úÖ Minimal &amp;amp; Beautiful Contact Form (Web3Forms integration)&lt;/p&gt;&lt;br&gt;&lt;p&gt;‚úÖ Bucket List &amp;amp; Wishlist (/manifest page)&lt;/p&gt;&lt;br&gt;&lt;p&gt;‚úÖ Dedicated Feedback Modal (feedback.fish)&lt;/p&gt;&lt;br&gt;&lt;p&gt;‚úÖ Smooth &amp;amp; Minimal Animations (Framer Motion)&lt;/p&gt;&lt;br&gt;&lt;p&gt;‚úÖ Tech Stack: Next.js 15, Sanity CMS, React, Tailwind, Shadcn UI, MDX for blogs&lt;/p&gt;&lt;br&gt;&lt;p&gt;I‚Äôd love to hear your thoughts! Rate it out of 10 &amp;amp; drop a review in my guestbook ‚úçÔ∏è:&lt;br&gt;‚û°Ô∏è &lt;a href=&quot;https://www.manishtamang.com/guestbook&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://www.manishtamang.com/guestbook&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Or check out my dashboard üìä:&lt;br&gt;‚û°Ô∏è &lt;a href=&quot;https://www.manishtamang.com/dashboard&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://www.manishtamang.com/dashboard&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Your feedback means a lot! Let me know what you think. üòÉ&lt;/p&gt;&lt;br&gt;&lt;p&gt;Here are some Quick Previews:&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;img src=&quot;https://media.daily.dev/image/upload/s--5kakAG5Q--/f_auto/v1742066948/ugc/content_855a474f-d505-41a3-8667-8930a36f7815&quot; alt=&quot;image&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;img src=&quot;https://media.daily.dev/image/upload/s--sNFFl3QE--/f_auto/v1742066993/ugc/content_9edcc139-5012-4f28-975a-15d7ce2053d2&quot; alt=&quot;image&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;img src=&quot;https://media.daily.dev/image/upload/s--oUAhfW-S--/f_auto/v1742067034/ugc/content_18761c5b-f1ed-4e73-b91c-97ea7a96a2c2&quot; alt=&quot;image&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;img src=&quot;https://media.daily.dev/image/upload/s--kFNsCYtk--/f_auto/v1742067011/ugc/content_d7b2a862-d482-4881-9be2-86be9bea84c6&quot; alt=&quot;image&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;&lt;br&gt; </description><link>https://app.daily.dev/posts/just-launched-my-brand-new-portfolio--u5czpsj0a</link><guid isPermaLink="false">https://api.daily.dev/r/U5CzPSJ0A</guid><pubDate>Sat, 15 Mar 2025 19:37:43 GMT</pubDate><author>Manish Tamang</author><itunes:image href="https://media.daily.dev/image/upload/s--UwJWdCa2--/f_auto/v1742067463/posts/U5CzPSJ0A"></itunes:image><category>webdev</category><category>react</category><category>nextjs</category><category>tailwind-css</category></item><item><title>üöÄ Just Launched My Brand-New Portfolio! üöÄ</title><description>&lt;img src=&quot;https://media.daily.dev/image/upload/s--nQZfHl7f--/f_auto/v1742067245/posts/fsrxWNJN9&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;   &lt;p&gt;I‚Äôve finally completed building my personal portfolio, and I‚Äôd love to get your feedback! üéâ&lt;/p&gt;&lt;br&gt;&lt;p&gt;üîó Check it out here: &lt;a href=&quot;https://www.manishtamang.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://www.manishtamang.com&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;üí° Some cool features:&lt;br&gt;‚úÖ Dark/Light Mode (toggle in the footer)&lt;/p&gt;&lt;br&gt;&lt;p&gt;‚úÖ Blog, Projects, About, Contact &amp;amp; Guestbook&lt;/p&gt;&lt;br&gt;&lt;p&gt;‚úÖ Now Playing on Spotify (footer)&lt;/p&gt;&lt;br&gt;&lt;p&gt;‚úÖ Interactive Dashboard (WakaTime, GitHub contributions, visitor sessions via Umami API)&lt;/p&gt;&lt;br&gt;&lt;p&gt;‚úÖ Beautiful Charts &amp;amp; Graphs for insights&lt;/p&gt;&lt;br&gt;&lt;p&gt;‚úÖ Comprehensive Blog Stats (likes, views, title, slug)&lt;/p&gt;&lt;br&gt;&lt;p&gt;‚úÖ City Temperature at Footer üå°Ô∏è&lt;/p&gt;&lt;br&gt;&lt;p&gt;‚úÖ Availability Status in Contact Page (time-based logic)&lt;/p&gt;&lt;br&gt;&lt;p&gt;‚úÖ Minimal &amp;amp; Beautiful Contact Form (Web3Forms integration)&lt;/p&gt;&lt;br&gt;&lt;p&gt;‚úÖ Bucket List &amp;amp; Wishlist (/manifest page)&lt;/p&gt;&lt;br&gt;&lt;p&gt;‚úÖ Dedicated Feedback Modal (feedback.fish)&lt;/p&gt;&lt;br&gt;&lt;p&gt;‚úÖ Smooth &amp;amp; Minimal Animations (Framer Motion)&lt;/p&gt;&lt;br&gt;&lt;p&gt;‚úÖ Tech Stack: Next.js 15, Sanity CMS, React, Tailwind, Shadcn UI, MDX for blogs&lt;/p&gt;&lt;br&gt;&lt;p&gt;I‚Äôd love to hear your thoughts! Rate it out of 10 &amp;amp; drop a review in my guestbook ‚úçÔ∏è:&lt;br&gt;‚û°Ô∏è &lt;a href=&quot;https://www.manishtamang.com/guestbook&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://www.manishtamang.com/guestbook&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Or check out my dashboard üìä:&lt;br&gt;‚û°Ô∏è &lt;a href=&quot;https://www.manishtamang.com/dashboard&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://www.manishtamang.com/dashboard&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Your feedback means a lot! Let me know what you think. üòÉ&lt;/p&gt;&lt;br&gt;&lt;p&gt;Here are some Quick Previews:&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;img src=&quot;https://media.daily.dev/image/upload/s--5kakAG5Q--/f_auto/v1742066948/ugc/content_855a474f-d505-41a3-8667-8930a36f7815&quot; alt=&quot;image&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;img src=&quot;https://media.daily.dev/image/upload/s--sNFFl3QE--/f_auto/v1742066993/ugc/content_9edcc139-5012-4f28-975a-15d7ce2053d2&quot; alt=&quot;image&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;img src=&quot;https://media.daily.dev/image/upload/s--oUAhfW-S--/f_auto/v1742067034/ugc/content_18761c5b-f1ed-4e73-b91c-97ea7a96a2c2&quot; alt=&quot;image&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;img src=&quot;https://media.daily.dev/image/upload/s--kFNsCYtk--/f_auto/v1742067011/ugc/content_d7b2a862-d482-4881-9be2-86be9bea84c6&quot; alt=&quot;image&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;&lt;br&gt; </description><link>https://app.daily.dev/posts/just-launched-my-brand-new-portfolio--fsrxwnjn9</link><guid isPermaLink="false">https://api.daily.dev/r/fsrxWNJN9</guid><pubDate>Sat, 15 Mar 2025 19:34:05 GMT</pubDate><author>Manish Tamang</author><itunes:image href="https://media.daily.dev/image/upload/s--nQZfHl7f--/f_auto/v1742067245/posts/fsrxWNJN9"></itunes:image><category>webdev</category><category>react</category><category>nextjs</category><category>tailwind-css</category></item><item><title>Google Being Forced To Sell Chrome is Not Good for the Web</title><description>&lt;img src=&quot;https://media.daily.dev/image/upload/f_auto,q_auto/v1/posts/0a394b78033ad5e041d827c9b9900dd9?_a=AQAEuj9&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;   The proposal to force Google to sell Chrome as a means to curb its monopoly is criticized as misguided. The core issue lies in Google paying for default search engine status. Instead, addressing this practice directly would be a more effective solution. The forced sale of Chrome could harm the web by diminishing investment in open web standards, ultimately benefitting proprietary systems over universal web development. </description><link>https://app.daily.dev/posts/google-being-forced-to-sell-chrome-is-not-good-for-the-web-jx4n6sjxi</link><guid isPermaLink="false">https://api.daily.dev/r/JX4n6SjXI</guid><pubDate>Sat, 15 Mar 2025 06:55:03 GMT</pubDate><itunes:image href="https://media.daily.dev/image/upload/f_auto,q_auto/v1/posts/0a394b78033ad5e041d827c9b9900dd9?_a=AQAEuj9"></itunes:image><category>tech-news</category><category>webdev</category><category>google</category><category>chromium</category></item><item><title></title><description>&lt;img src=&quot;https://media.daily.dev/image/upload/s--1KxV4ohY--/f_auto/v1722860400/public/Placeholder%2007&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;  </description><link>https://app.daily.dev/posts/k9tkjfv8f</link><guid isPermaLink="false">https://api.daily.dev/r/K9tKJfV8F</guid><pubDate>Sat, 15 Mar 2025 01:02:42 GMT</pubDate><author>Ali Nour Aldin</author><itunes:image href="https://media.daily.dev/image/upload/s--1KxV4ohY--/f_auto/v1722860400/public/Placeholder%2007"></itunes:image><category>microsoft</category><category>golang</category><category>typescript</category><category>rust</category></item><item><title>Terminal interactive portfolio</title><description>&lt;img src=&quot;https://media.daily.dev/image/upload/s--Xf3iEABz--/f_auto/v1741884730/posts/BGfvdSpb8&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;   &lt;p&gt;Hey everyone! üëã&lt;/p&gt;&lt;br&gt;&lt;p&gt;I recently built a terminal-inspired interactive portfolio from scratch using React, Framer Motion, and Tailwind CSS . As a self-taught developer, I wanted to create a unique CLI-style experience where users can explore my projects, skills, and contact details through simple commands.&lt;/p&gt;&lt;br&gt;&lt;p&gt;üîó &lt;a href=&quot;https://aakashap-terminal-portfolio.vercel.app/&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://aakashap-terminal-portfolio.vercel.app&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Let me know what you think! Any suggestions or ideas are more than welcome. üòä&lt;/p&gt;&lt;br&gt;&lt;p&gt;#ReactJS #Portfolio #WebDevelopment #TerminalUI #InteractivePortfolio #OpenSource&lt;/p&gt; </description><link>https://app.daily.dev/posts/terminal-interactive-portfolio-bcamlmgx0</link><guid isPermaLink="false">https://api.daily.dev/r/bCamlMGX0</guid><pubDate>Thu, 13 Mar 2025 20:44:41 GMT</pubDate><author>Aakash Prajapati</author><itunes:image href="https://media.daily.dev/image/upload/s--Xf3iEABz--/f_auto/v1741884730/posts/BGfvdSpb8"></itunes:image><category>webdev</category><category>react</category><category>open-source</category></item><item><title>Created a gallery webpage from cool website designs I hoarded over the years.</title><description>&lt;img src=&quot;https://media.daily.dev/image/upload/s--WCyixXWQ--/f_auto/v1741873441/posts/gOS20PcaA&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;   &lt;p&gt;I had a big list of links in Notion that I‚Äôd collected over the years and wanted a better way to display them‚Äîmy secret design stash! üòÉ&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;a href=&quot;https://webdesigninspiration.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Web Design Inspiration&lt;/a&gt;&lt;/p&gt;&lt;br&gt; </description><link>https://app.daily.dev/posts/created-a-gallery-webpage-from-cool-website-designs-i-hoarded-over-the-years--gos20pcaa</link><guid isPermaLink="false">https://api.daily.dev/r/gOS20PcaA</guid><pubDate>Thu, 13 Mar 2025 13:44:00 GMT</pubDate><author>Kristjan Retter</author><itunes:image href="https://media.daily.dev/image/upload/s--WCyixXWQ--/f_auto/v1741873441/posts/gOS20PcaA"></itunes:image><category>webdev</category><category>html</category><category>ui-design</category><category>notion</category></item><item><title>Best IDE?</title><description>&lt;p&gt;What are the most prafered IDE for you guys?&lt;/p&gt; </description><link>https://app.daily.dev/posts/best-ide--yarl5l3uk</link><guid isPermaLink="false">https://api.daily.dev/r/yarL5l3uK</guid><pubDate>Thu, 13 Mar 2025 11:32:04 GMT</pubDate><author>Minnie</author><category>webdev</category><category>tools</category><category>devtools</category></item><item><title>A Lightweight &amp; Smooth 5KB JavaScript Framework for Dynamic UI Experiences</title><description>&lt;img src=&quot;https://media.daily.dev/image/upload/s--dZn15x_5--/f_auto/v1741583448/posts/hk9ggHZoQ&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;   &lt;h1&gt;üöÄ Olova.js&lt;/h1&gt;&lt;br&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/olovajs/olova&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;a href=&quot;https://olova.js.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Olova Website&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;A lightweight, reactive JavaScript framework for building modern web&lt;br&gt;applications. Olova.js provides a simple yet powerful API for creating reactive&lt;br&gt;UIs with JSX support.&lt;/p&gt;&lt;br&gt;&lt;h2&gt;‚ú® Features&lt;/h2&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt;üéØ &lt;strong&gt;Signals&lt;/strong&gt; - Reactive state management&lt;/li&gt;&lt;br&gt;&lt;li&gt;üîÑ &lt;strong&gt;Effects&lt;/strong&gt; - Automatic dependency tracking and side effects&lt;/li&gt;&lt;br&gt;&lt;li&gt;üìù &lt;strong&gt;Memos&lt;/strong&gt; - Computed values with dependency tracking&lt;/li&gt;&lt;br&gt;&lt;li&gt;üé® &lt;strong&gt;JSX Support&lt;/strong&gt; - Write components using familiar JSX syntax&lt;/li&gt;&lt;br&gt;&lt;li&gt;üé≠ &lt;strong&gt;Components&lt;/strong&gt; - Function-based component system&lt;/li&gt;&lt;br&gt;&lt;li&gt;üîó &lt;strong&gt;Refs&lt;/strong&gt; - Direct DOM node references&lt;/li&gt;&lt;br&gt;&lt;li&gt;üé™ &lt;strong&gt;Lifecycle Hooks&lt;/strong&gt; - &lt;code&gt;onMount&lt;/code&gt; and &lt;code&gt;onUnmount&lt;/code&gt; for component lifecycle&lt;br&gt;management&lt;/li&gt;&lt;br&gt;&lt;li&gt;üß© &lt;strong&gt;Fragments&lt;/strong&gt; - Support for multiple root elements&lt;/li&gt;&lt;br&gt;&lt;li&gt;üé® &lt;strong&gt;SVG Support&lt;/strong&gt; - First-class SVG element support&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;&lt;h2&gt;üì¶ Installation&lt;/h2&gt;&lt;br&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Create a new project (recommended)&lt;/span&gt;&lt;br&gt;npm create vilo@latest&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Or install directly in an existing project&lt;/span&gt;&lt;br&gt;npm install olova&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;p&gt;For now, you can use it directly in your project by copying the core files.&lt;/p&gt;&lt;br&gt;&lt;h2&gt;üöÄ Quick Start Guide&lt;/h2&gt;&lt;br&gt;&lt;h3&gt;1. Basic Counter Example&lt;/h3&gt;&lt;br&gt;&lt;p&gt;A simple counter showing reactive state management:&lt;/p&gt;&lt;br&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { render, setSignal } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;./core/core.js&quot;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Counter&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [count, setCount] = &lt;span class=&quot;hljs-title function_&quot;&gt;setSignal&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;br&gt;    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;{() =&amp;gt; count()}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{()&lt;/span&gt; =&amp;gt;&lt;/span&gt; setCount(count() + 1)}&amp;gt;Increment&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  );&lt;br&gt;};&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;h3&gt;2. Multiple Elements with Fragment&lt;/h3&gt;&lt;br&gt;&lt;p&gt;Using fragments to render multiple elements:&lt;/p&gt;&lt;br&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { render, &lt;span class=&quot;hljs-title class_&quot;&gt;Fragment&lt;/span&gt; } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;./core/core.js&quot;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MultipleElements&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;br&gt;    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;First&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;Second&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  );&lt;br&gt;};&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;h3&gt;3. Effects and Reactivity&lt;/h3&gt;&lt;br&gt;&lt;p&gt;Demonstrating reactive effects:&lt;/p&gt;&lt;br&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { render, setSignal, setEffect } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;./core/core.js&quot;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;EffectsExample&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [name, setName] = &lt;span class=&quot;hljs-title function_&quot;&gt;setSignal&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;);&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;hljs-title function_&quot;&gt;setEffect&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {&lt;br&gt;    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`Name changed to: &lt;span class=&quot;hljs-subst&quot;&gt;${name()}&lt;/span&gt;`&lt;/span&gt;);&lt;br&gt;  });&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;br&gt;    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{()&lt;/span&gt; =&amp;gt;&lt;/span&gt; name()}&lt;br&gt;        onInput={(e) =&amp;gt; setName(e.target.value)}&lt;br&gt;        type=&quot;text&quot;&lt;br&gt;      /&amp;gt;&lt;br&gt;      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Current name: {() =&amp;gt; name()}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  );&lt;br&gt;};&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;h3&gt;4. Computed Values with Memos&lt;/h3&gt;&lt;br&gt;&lt;p&gt;Using memos for derived state:&lt;/p&gt;&lt;br&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { render, setSignal, setMemo } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;./core/core.js&quot;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MemoExample&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [firstName, setFirstName] = &lt;span class=&quot;hljs-title function_&quot;&gt;setSignal&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;);&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [lastName, setLastName] = &lt;span class=&quot;hljs-title function_&quot;&gt;setSignal&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Doe&quot;&lt;/span&gt;);&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; fullName = &lt;span class=&quot;hljs-title function_&quot;&gt;setMemo&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${firstName()}&lt;/span&gt; &lt;span class=&quot;hljs-subst&quot;&gt;${lastName()}&lt;/span&gt;`&lt;/span&gt;);&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;br&gt;    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{()&lt;/span&gt; =&amp;gt;&lt;/span&gt; firstName()}&lt;br&gt;        onInput={(e) =&amp;gt; setFirstName(e.target.value)}&lt;br&gt;        placeholder=&quot;First Name&quot;&lt;br&gt;      /&amp;gt;&lt;br&gt;      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{()&lt;/span&gt; =&amp;gt;&lt;/span&gt; lastName()}&lt;br&gt;        onInput={(e) =&amp;gt; setLastName(e.target.value)}&lt;br&gt;        placeholder=&quot;Last Name&quot;&lt;br&gt;      /&amp;gt;&lt;br&gt;      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Full name: {() =&amp;gt; fullName()}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  );&lt;br&gt;};&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;h3&gt;5. DOM References with Refs&lt;/h3&gt;&lt;br&gt;&lt;p&gt;Direct DOM manipulation using refs:&lt;/p&gt;&lt;br&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { render, setRef } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;./core/core.js&quot;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;RefsExample&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; inputRef = &lt;span class=&quot;hljs-title function_&quot;&gt;setRef&lt;/span&gt;();&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;br&gt;    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{inputRef}&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;placeholder&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Focus me!&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{()&lt;/span&gt; =&amp;gt;&lt;/span&gt; inputRef().focus()}&amp;gt;Focus Input&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  );&lt;br&gt;};&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;h3&gt;6. Component Lifecycle&lt;/h3&gt;&lt;br&gt;&lt;p&gt;Managing component lifecycle with hooks:&lt;/p&gt;&lt;br&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { render, setSignal, onMount, onUnmount } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;./core/core.js&quot;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;LifecycleExample&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [isVisible, setIsVisible] = &lt;span class=&quot;hljs-title function_&quot;&gt;setSignal&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ChildComponent&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {&lt;br&gt;    &lt;span class=&quot;hljs-title function_&quot;&gt;onMount&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {&lt;br&gt;      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Component mounted&quot;&lt;/span&gt;);&lt;br&gt;    });&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;hljs-title function_&quot;&gt;onUnmount&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {&lt;br&gt;      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Component will unmount&quot;&lt;/span&gt;);&lt;br&gt;    });&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;  };&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;br&gt;    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{()&lt;/span&gt; =&amp;gt;&lt;/span&gt; setIsVisible(!isVisible())}&amp;gt;&lt;br&gt;        {() =&amp;gt; (isVisible() ? &quot;Hide&quot; : &quot;Show&quot;)}&lt;br&gt;      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;      {() =&amp;gt; isVisible() &amp;amp;&amp;amp; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ChildComponent&lt;/span&gt; /&amp;gt;&lt;/span&gt;}&lt;br&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  );&lt;br&gt;};&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;h3&gt;7. List Rendering&lt;/h3&gt;&lt;br&gt;&lt;p&gt;Building a dynamic todo list:&lt;/p&gt;&lt;br&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { render, setSignal } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;./core/core.js&quot;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;TodoList&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [todos, setTodos] = &lt;span class=&quot;hljs-title function_&quot;&gt;setSignal&lt;/span&gt;([&lt;br&gt;    { &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;text&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Learn Olova.js&quot;&lt;/span&gt; },&lt;br&gt;    { &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;text&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Build an app&quot;&lt;/span&gt; },&lt;br&gt;  ]);&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [newTodo, setNewTodo] = &lt;span class=&quot;hljs-title function_&quot;&gt;setSignal&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addTodo&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;newTodo&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;trim&lt;/span&gt;()) {&lt;br&gt;      &lt;span class=&quot;hljs-title function_&quot;&gt;setTodos&lt;/span&gt;([...&lt;span class=&quot;hljs-title function_&quot;&gt;todos&lt;/span&gt;(), { &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;now&lt;/span&gt;(), &lt;span class=&quot;hljs-attr&quot;&gt;text&lt;/span&gt;: &lt;span class=&quot;hljs-title function_&quot;&gt;newTodo&lt;/span&gt;() }]);&lt;br&gt;      &lt;span class=&quot;hljs-title function_&quot;&gt;setNewTodo&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;br&gt;    }&lt;br&gt;  };&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;br&gt;    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{()&lt;/span&gt; =&amp;gt;&lt;/span&gt; newTodo()}&lt;br&gt;          onInput={(e) =&amp;gt; setNewTodo(e.target.value)}&lt;br&gt;          placeholder=&quot;New todo&quot;&lt;br&gt;        /&amp;gt;&lt;br&gt;        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{addTodo}&lt;/span&gt;&amp;gt;&lt;/span&gt;Add Todo&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        {() =&amp;gt;&lt;br&gt;          todos().map((todo) =&amp;gt; (&lt;br&gt;            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{todo.id}&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;              {todo.text}&lt;br&gt;              &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;hljs-attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{()&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;br&gt;                  setTodos(todos().filter((t) =&amp;gt; t.id !== todo.id))&lt;br&gt;                }&lt;br&gt;              &amp;gt;&lt;br&gt;                Delete&lt;br&gt;              &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;          ))&lt;br&gt;        }&lt;br&gt;      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  );&lt;br&gt;};&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;h3&gt;8. Conditional Rendering&lt;/h3&gt;&lt;br&gt;&lt;p&gt;Different patterns for conditional rendering:&lt;/p&gt;&lt;br&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { render, setSignal } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;./core/core.js&quot;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Conditional&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [show, setShow] = &lt;span class=&quot;hljs-title function_&quot;&gt;setSignal&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [theme, setTheme] = &lt;span class=&quot;hljs-title function_&quot;&gt;setSignal&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;light&quot;&lt;/span&gt;);&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;br&gt;    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{()&lt;/span&gt; =&amp;gt;&lt;/span&gt; setShow(!show())}&amp;gt;Toggle Content&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{()&lt;/span&gt; =&amp;gt;&lt;/span&gt; setTheme(theme() === &quot;light&quot; ? &quot;dark&quot; : &quot;light&quot;)}&amp;gt;&lt;br&gt;        Toggle Theme&lt;br&gt;      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;      {/* Simple conditional */}&lt;br&gt;      {() =&amp;gt; (show() ? &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Content is shown&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt; : &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Content is hidden&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;)}&lt;br&gt;&lt;br&gt;      {/* Conditional with multiple elements */}&lt;br&gt;      {() =&amp;gt;&lt;br&gt;        theme() === &quot;light&quot; ? (&lt;br&gt;          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;background:&lt;/span&gt; &quot;&lt;span class=&quot;hljs-attr&quot;&gt;white&lt;/span&gt;&quot;, &lt;span class=&quot;hljs-attr&quot;&gt;color:&lt;/span&gt; &quot;&lt;span class=&quot;hljs-attr&quot;&gt;black&lt;/span&gt;&quot; }}&amp;gt;&lt;/span&gt;Light Theme&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        ) : (&lt;br&gt;          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;background:&lt;/span&gt; &quot;&lt;span class=&quot;hljs-attr&quot;&gt;black&lt;/span&gt;&quot;, &lt;span class=&quot;hljs-attr&quot;&gt;color:&lt;/span&gt; &quot;&lt;span class=&quot;hljs-attr&quot;&gt;white&lt;/span&gt;&quot; }}&amp;gt;&lt;/span&gt;Dark Theme&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        )&lt;br&gt;      }&lt;br&gt;&lt;br&gt;      {/* Conditional rendering with &amp;amp;&amp;amp; operator */}&lt;br&gt;      {() =&amp;gt; show() &amp;amp;&amp;amp; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;This only shows when show is true&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;}&lt;br&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  );&lt;br&gt;};&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;h3&gt;9. Components and Props&lt;/h3&gt;&lt;br&gt;&lt;p&gt;Creating and using reusable components with props:&lt;/p&gt;&lt;br&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { render } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;./core/core.js&quot;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Button component with props&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Button&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;{ text, onClick }&lt;/span&gt;) =&amp;gt; {&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;br&gt;    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{onClick}&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;hljs-attr&quot;&gt;padding:&lt;/span&gt; &quot;&lt;span class=&quot;hljs-attr&quot;&gt;8px&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;16px&lt;/span&gt;&quot;,&lt;br&gt;        &lt;span class=&quot;hljs-attr&quot;&gt;borderRadius:&lt;/span&gt; &quot;&lt;span class=&quot;hljs-attr&quot;&gt;4px&lt;/span&gt;&quot;,&lt;br&gt;        &lt;span class=&quot;hljs-attr&quot;&gt;border:&lt;/span&gt; &quot;&lt;span class=&quot;hljs-attr&quot;&gt;none&lt;/span&gt;&quot;,&lt;br&gt;        &lt;span class=&quot;hljs-attr&quot;&gt;backgroundColor:&lt;/span&gt; &quot;#&lt;span class=&quot;hljs-attr&quot;&gt;0070f3&lt;/span&gt;&quot;,&lt;br&gt;        &lt;span class=&quot;hljs-attr&quot;&gt;color:&lt;/span&gt; &quot;&lt;span class=&quot;hljs-attr&quot;&gt;white&lt;/span&gt;&quot;,&lt;br&gt;        &lt;span class=&quot;hljs-attr&quot;&gt;cursor:&lt;/span&gt; &quot;&lt;span class=&quot;hljs-attr&quot;&gt;pointer&lt;/span&gt;&quot;,&lt;br&gt;      }}&lt;br&gt;    &amp;gt;&lt;/span&gt;&lt;br&gt;      {text}&lt;br&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  );&lt;br&gt;};&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Using the Button component&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;App&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;br&gt;    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Component Example&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;text&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Click me!&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{()&lt;/span&gt; =&amp;gt;&lt;/span&gt; alert(&quot;Button clicked!&quot;)} /&amp;gt;&lt;br&gt;      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Button&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;hljs-attr&quot;&gt;text&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Another button&quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;hljs-attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{()&lt;/span&gt; =&amp;gt;&lt;/span&gt; console.log(&quot;Second button clicked&quot;)}&lt;br&gt;      /&amp;gt;&lt;br&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  );&lt;br&gt;};&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;p&gt;This example shows:&lt;/p&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt;How to create a reusable component with props&lt;/li&gt;&lt;br&gt;&lt;li&gt;Passing different props to multiple instances&lt;/li&gt;&lt;br&gt;&lt;li&gt;Handling events through props&lt;/li&gt;&lt;br&gt;&lt;li&gt;Applying inline styles to components&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;&lt;h2&gt;üõ†Ô∏è API Reference&lt;/h2&gt;&lt;br&gt;&lt;h3&gt;Core Functions&lt;/h3&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Function&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;setSignal(initialValue)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Creates a reactive signal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;setEffect(effectFn)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Creates an effect that tracks dependencies&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;setMemo(computeFn)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Creates a computed value&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;setRef()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Creates a ref for DOM elements&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;render(component, root)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Renders a component to the DOM&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;onMount(callback)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Runs when component mounts&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;onUnmount(callback)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Runs when component unmounts&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;Fragment&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Wrapper for multiple elements&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;html&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Internal function for DOM creation&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;h2&gt;ü§ù Contributing&lt;/h2&gt;&lt;br&gt;&lt;p&gt;Contributions are welcome! Please feel free to submit a Pull Request.&lt;/p&gt;&lt;br&gt;&lt;h2&gt;üìÑ License&lt;/h2&gt;&lt;br&gt;&lt;p&gt;MIT License&lt;/p&gt;&lt;br&gt;&lt;h2&gt;üë®‚Äçüíª Author&lt;/h2&gt;&lt;br&gt;&lt;p&gt;Nazmul Hossain&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;p&gt;For more information and updates, please check back regularly as this framework&lt;br&gt;continues to evolve.&lt;/p&gt;&lt;br&gt;&lt;blockquote&gt;&lt;br&gt;&lt;p&gt;üí° &lt;strong&gt;Pro Tip&lt;/strong&gt;: Check out the &lt;code&gt;examples&lt;/code&gt; directory in the source code for more&lt;br&gt;detailed examples and best practices!&lt;/p&gt;&lt;br&gt;&lt;/blockquote&gt; </description><link>https://app.daily.dev/posts/a-lightweight-smooth-5kb-javascript-framework-for-dynamic-ui-experiences-qx4e815hf</link><guid isPermaLink="false">https://api.daily.dev/r/Qx4e815Hf</guid><pubDate>Thu, 13 Mar 2025 08:16:55 GMT</pubDate><author>Nazmul Hossain</author><itunes:image href="https://media.daily.dev/image/upload/s--dZn15x_5--/f_auto/v1741583448/posts/hk9ggHZoQ"></itunes:image></item><item><title>Software Engineer Roadmap 2025: The Complete Guide</title><description>&lt;img src=&quot;https://media.daily.dev/image/upload/f_auto,q_auto/v1/posts/82e8631d2defea7e0000dd994a750da4?_a=AQAEuj9&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;   The roadmap for becoming a software engineer in 2025 covers essential topics like AI tools, data structures and algorithms, testing, design patterns, cloud services, CI/CD pipelines, system design, performance optimization, and security best practices. Mastery of these areas will ensure you stay competitive in the tech industry. </description><link>https://app.daily.dev/posts/software-engineer-roadmap-2025-the-complete-guide-dojc693gs</link><guid isPermaLink="false">https://api.daily.dev/r/dOJc693gs</guid><pubDate>Thu, 13 Mar 2025 03:17:28 GMT</pubDate><itunes:image href="https://media.daily.dev/image/upload/f_auto,q_auto/v1/posts/82e8631d2defea7e0000dd994a750da4?_a=AQAEuj9"></itunes:image><category>ai</category><category>cloud</category><category>performance</category><category>career</category></item></channel></rss>