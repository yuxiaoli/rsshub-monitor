<?xml version="1.0" encoding="UTF-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>少数派专题-Magisk：每个 Android 玩家都不可错过的神器</title><link>https://sspai.com/topic/250</link><atom:link href="http://rsshub.rssforever.com/sspai/topic/250" rel="self" type="application/rss+xml"></atom:link><description>自定义和稳定性长久以来似乎都是「鱼与熊掌」，但对 Magisk 而言却不是如此。从基础知识到模块推荐再到高级玩法，这里有关于 Magisk 这款神器的一切。 - Powered by RSSHub</description><generator>RSSHub</generator><webMaster>contact@rsshub.app (RSSHub)</webMaster><language>en</language><lastBuildDate>Wed, 19 Mar 2025 23:12:47 GMT</lastBuildDate><ttl>5</ttl><item><title>开通 VoLTE 后发现 Pixel 手机不支持？装上这个 Magisk 模块就好了</title><description>&lt;img src=&quot;https://cdnfile.sspai.com/2019/04/10/2c7a24620b70e882983bf90b73365f59.png&quot; alt=&quot;Article Cover Image&quot; style=&quot;display: block; margin: 0 auto;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;font color=&quot;#808080&quot;&gt;注：本文首发于公众号&lt;a href=&quot;https://mp.weixin.qq.com/s/GzvzJ4OgiVRRAZ1sK5m9mg&quot; target=&quot;_blank&quot; class=&quot;insert-link&quot;&gt;「宁静之雨」&lt;/a&gt;，少数派经授权转载。为保证阅读效果，文章内容和排版有适量修改。&lt;/font&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;VoLTE 是 Voice&amp;nbsp;over&amp;nbsp;Long-Term&amp;nbsp;Evolution 的简称，是一种基于 4G 网络的高品质音、视频通话服务。和以往常规的语音通话相比，VoLTE 采用了高分辨率编解码技术，通话音质能提高 40% 左右，电话接入的延迟（拨号后的等待时间）相比则降低了 50%。&lt;br&gt;&lt;/p&gt;&lt;p&gt;更重要的是，如果你是一名手游玩家，VoLTE 可以避免通话时网络从 4G 回落到 3G 的现象，真正做到了边打电话边玩游戏的完美体验。&lt;/p&gt;&lt;p&gt;&lt;b&gt;那我们该如何才能用上 VoLTE 呢？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;想要用上 VoLTE 需要三个条件：具备支持 VoLTE 功能的手机、支持 VoLTE 的运营商和所在区域有 VoLTE 网络覆盖。截至目前，三大运营商均已开通了 VoLTE 业务。其中，步调最慢的中国联通也已经从 4 月 1 日起在北京、天津、上海、郑州、武汉、长沙、广州、济南、杭州、南京、重庆共 11 个城市开始了先行试商用，6 月 1 日起联通 VoLTE 还将全国试商用。&lt;/p&gt;&lt;figure tabindex=&quot;0&quot; draggable=&quot;false&quot; class=&quot;ss-img-wrapper custom-width&quot; contenteditable=&quot;false&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2019/04/10/92cf61ac6f52dd527e8195b038f0f7e2.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1/format/webp&quot; alt=&quot;&quot; width=&quot;350&quot; data-original=&quot;https://cdnfile.sspai.com/2019/04/10/92cf61ac6f52dd527e8195b038f0f7e2.png?imageView2/2/format/webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;&lt;p&gt;作为号码归属为上海联通的腾讯大王卡用户，我在看到这个消息后也第一时间尝试开通了 VoLTE。上述 11 个地方的开通方式可能不太一样，上海是发送短信&amp;nbsp;&lt;code&gt;DGVOLTE&lt;/code&gt;&amp;nbsp;到10010，有些地方可能是发送&amp;nbsp;&lt;code&gt;VBNCDGFBDE&lt;/code&gt;&amp;nbsp;到 10010，实在不行也可以通过营业厅应用或拨打 10010 人工客服咨询。&lt;/p&gt;&lt;p&gt;不过正如上面所提到的那样，服务开通后，即便所在地拥有 VoLTE 信号覆盖，也只满足了 VoLTE 三个必要条件中的两个——&lt;b&gt;是的，问题的关键在于我们需要一台支持 VoLTE 的手机&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;国行手机对移动和电信的 VoLTE 支持我不太清楚，就联通而言，因为 4 月 1 日才开始在 11 个城市试商用，当前官方支持的设备少得可怜。具体可以参考联通官方微博晒出的这份支持机型清单：
&lt;/p&gt;&lt;figure tabindex=&quot;0&quot; draggable=&quot;false&quot; class=&quot;ss-img-wrapper custom-width&quot; contenteditable=&quot;false&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2019/04/10/ab95b311f9f44fd34e496fdb53ca38c8.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1/format/webp&quot; alt=&quot;&quot; width=&quot;450&quot; data-original=&quot;https://cdnfile.sspai.com/2019/04/10/ab95b311f9f44fd34e496fdb53ca38c8.png?imageView2/2/format/webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;&lt;p&gt;可以看到，目前已支持中国联通 VoLTE 的机型仅有华为 P30 系列以及 OPPO&amp;nbsp;R17&amp;nbsp;Pro，而 OPPO、华为、荣耀、小米、vivo、三星部其他机型在近几个月内也可开通，iPhone 手机目前还没有官方消息，后面应该也会更新的。
&lt;/p&gt;&lt;p&gt;这可如何是好？服务好不容易开通了，人又在大城市里，但无奈手机不支持。&lt;/p&gt;&lt;p&gt;别急，我们是玩机的，还怕这个？先问万能的百度和谷歌，肯定有办法的。果然，一查就解决了，我随便翻了翻就查到了不少机型的解决方案，比如有人在红米 Note 5 的 MIUI 社区里直接放了联通 VoLTE 基带包，而我手里没有国行版本的 Pixel 2 XL 也有相应的解决方案。
&lt;/p&gt;&lt;p&gt;&lt;i&gt;注：不同机型的解决方式可能不太一样，实际还是要自己琢磨折腾，因为我手头只有Pixel&amp;nbsp;2&amp;nbsp;XL的缘故，仅作该机型的适配演示。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;首先我们需要使用 Magisk 获取 root 权限，没错，依然是我们此前介绍过的万能 Magisk 帮你搞定。如果你还没有了解过 Magisk，可以参考本系列早前的几篇文章。&lt;/p&gt;&lt;p&gt;保证手机开通 VoLTE 服务且位于 VoLTE 信号覆盖地区，对我手里这台 Pixel 2 XL 来说，满足这两个基本条件后我们在系统设置依然是找不到相关设置的。&lt;/p&gt;&lt;p&gt;别急，接下来我们打开 Magisk Manager 的模块仓库，搜索 &lt;b&gt;VoEnabler&lt;/b&gt; 模块：&lt;/p&gt;&lt;figure tabindex=&quot;0&quot; draggable=&quot;false&quot; class=&quot;ss-img-wrapper custom-width&quot; contenteditable=&quot;false&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2019/04/10/7c67814bfe317829a5b7130384c26604.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1/format/webp&quot; alt=&quot;&quot; width=&quot;350&quot; data-original=&quot;https://cdnfile.sspai.com/2019/04/10/7c67814bfe317829a5b7130384c26604.png?imageView2/2/format/webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;&lt;p&gt;装好模块后重启生效，随后我们就能在手机网络设置里看见一个多出来的 VoLTE 开关了，打开一下就好了。这里插一句题外话——有些手机其实也可以通过键盘输入类似&amp;nbsp;&lt;code&gt;*#*#4636#*#*&lt;/code&gt;&amp;nbsp;这样的指令来进行 VoLTE 设置，这个视手机机型而定，只能大家自己摸索了。&lt;/p&gt;&lt;figure tabindex=&quot;0&quot; draggable=&quot;false&quot; class=&quot;ss-img-wrapper custom-width&quot; contenteditable=&quot;false&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2019/04/10/2b195a2d49890435d036fe0806401f77.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1/format/webp&quot; alt=&quot;&quot; width=&quot;350&quot; data-original=&quot;https://cdnfile.sspai.com/2019/04/10/2b195a2d49890435d036fe0806401f77.png?imageView2/2/format/webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;&lt;p&gt;开通了 VoLTE 服务、借助 Magisk 模块调出了隐藏的 VoLTE 开关，在 Pixel 2 XL 这种没有国行版本的机型上，&lt;b&gt;你会发现这个开关也许并没有任何作用&lt;/b&gt;！&lt;/p&gt;&lt;p&gt;是的，距离享用 VoLTE 我们还差一点额外的工作，在 Pixel&amp;nbsp;2&amp;nbsp;XL 这样的手机上，默认的 VoLTE 配置里压根就没有中国地区的参数（下图的是我后来加进去的）。
&lt;/p&gt;&lt;figure tabindex=&quot;0&quot; draggable=&quot;false&quot; class=&quot;ss-img-wrapper custom-width&quot; contenteditable=&quot;false&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2019/04/10/55de431d3a162e15815ed50cc6b21eef.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1/format/webp&quot; alt=&quot;&quot; width=&quot;650&quot; data-original=&quot;https://cdnfile.sspai.com/2019/04/10/55de431d3a162e15815ed50cc6b21eef.png?imageView2/2/format/webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;&lt;p&gt;这里我们需要万能的百度和 Google 来解决问题了，在网友 @langwen828384 的&amp;nbsp;&lt;a href=&quot;http://bbs.gfan.com/android-9536094-1-1.html&quot; target=&quot;_blank&quot; class=&quot;insert-link&quot;&gt;教程&lt;/a&gt;&amp;nbsp;和 @beijing999923 提取小米手机运营商配置相关操作的启发下，我也尝试提取了国内运营商相关的 VoLTE 配置并直接做成了三网的 Magisk 模块：
&lt;/p&gt;&lt;figure tabindex=&quot;0&quot; draggable=&quot;false&quot; class=&quot;ss-img-wrapper custom-width&quot; contenteditable=&quot;false&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2019/04/10/d16fd4d732f7c7ad1eb3d6d78ea496f1.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1/format/webp&quot; alt=&quot;&quot; width=&quot;350&quot; data-original=&quot;https://cdnfile.sspai.com/2019/04/10/d16fd4d732f7c7ad1eb3d6d78ea496f1.png?imageView2/2/format/webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;&lt;p&gt;下载安装这个模块会向你的手机里写入三大运营商甚至中国移动香港的 VoLTE 配置，理论上来说甚至还能破解 Pixe&amp;nbsp;2&amp;nbsp;XL 的电信网络支持。&lt;/p&gt;&lt;p&gt;至此，我们就通过挂载两个 Magisk 模块的方式搞定了 Pixel 2 XL 的 VoLTE 支持。&lt;/p&gt;&lt;p&gt;你可以在「宁静之雨」公众号对话界面回复关键词&amp;nbsp;&lt;code&gt;三网VoLTE配置&lt;/code&gt;&amp;nbsp;下载文中涉及到的 Magisk 模块（注意不要错字漏字哦），&lt;b style=&quot;font-style: inherit; font-variant-ligatures: inherit; font-variant-caps: inherit;&quot;&gt;模块仅适用于 Pixel 2。&lt;/b&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;🤖️ 想要了解「神器」Magisk 的更多用法，请关注专题&lt;a href=&quot;https://sspai.com/topic/250&quot; target=&quot;_blank&quot; class=&quot;insert-link&quot;&gt;《Magisk：每个&amp;nbsp;Android&amp;nbsp;玩家都不可错过的神器》&lt;/a&gt;。&lt;/p&gt;&lt;div&gt;&amp;gt; 下载少数派&amp;nbsp;&lt;a href=&quot;https://sspai.com/page/client&quot;&gt;客户端&lt;/a&gt;、关注&amp;nbsp;&lt;a href=&quot;http://sspai.com/s/KEPQ&quot;&gt;少数派公众号&lt;/a&gt;，发现更多 Android 玩机技巧 😃&lt;br&gt;&amp;gt; 特惠、好用的硬件产品，尽在&amp;nbsp;&lt;a href=&quot;https://sspai.com/post/https-//shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc&quot;&gt;少数派sspai官方店铺&lt;/a&gt;&amp;nbsp;🛒&lt;/div&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;</description><link>https://sspai.com/post/53949</link><guid isPermaLink="false">https://sspai.com/post/53949</guid><pubDate>Wed, 10 Apr 2019 02:29:18 GMT</pubDate><author>宁静之雨</author></item><item><title>Magisk Manager 详解</title><description>&lt;img src=&quot;https://cdnfile.sspai.com/article/7b70798b-da2b-5190-8389-4b7b2ae24a11.jpg&quot; alt=&quot;Article Cover Image&quot; style=&quot;display: block; margin: 0 auto;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;&lt;p&gt;久等了。&lt;/p&gt;
&lt;p&gt;在本系列的前两篇文章中，我们介绍了 Magisk 这个（相对而言）兼具稳定性和可玩性的「神器」:作为一个 root 方案，它能在不破坏系统实现无痛 OTA，作为一个插件扩展平台，它又能提供丰富的自定义模块来满足多样化的定制需求。&lt;/p&gt;
&lt;p&gt;但也正如我们在本系列第一篇中所言， Magisk 本质上是一种文件挂载系统。我们大多数时候所接触到的那个图标为面具的应用，其实只是我们与之发生各种交互行为的「媒介」。&lt;/p&gt;
&lt;p&gt;今天我们就来介绍一下这个「媒介」的四大功能。&lt;/p&gt;
&lt;h2 id=&quot;ss-2-1554264202389&quot;&gt;隐藏 root 事实「无痛」玩机&lt;/h2&gt;
&lt;p&gt;从某种角度上来说，是 Magisk Hide 让「刷入 Magisk」这件事情从可选项变成了推荐项。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;大家好，我是一名 Android 玩家，自从看了少数派的文章给手机解 BL 锁、Root 了之后，奇怪的事情便接踵而至：没办法从 Play Store 中搜索到 Netflix、心爱的宝可梦走等一些游戏没办法玩耍、朋友推荐我下载的 App 居然提示不兼容此设备、看视频的时候清晰度死活上不去……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;难道是我的手机坏了？&lt;/p&gt;
&lt;p&gt;许多新手玩家都有这样的疑惑。事实上，包括谷歌服务在内的许多 Android 上的应用、游戏、服务都十分重视保护自己的版权内容，当这些软件检测到你的手机遭到「魔改」后，便会拒绝认证你的设备。&lt;/p&gt;
&lt;p&gt;好在道高一尺魔高一仗，我们现在可以通过 Magisk Hide 来绕过这些检测。&lt;/p&gt;
&lt;p&gt;在我们设置 Magisk Hide 前，先进入 Magisk Manager 检测是否通过了谷歌服务中的 SafetyNet 安全性测试。想要通过 SafetyNet 测试，最好使用原厂系统，或者是值得信赖的第三方 ROM 正式版（也就是 Official Builds），以减少不必要的麻烦。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;figure tabindex=&quot;0&quot; class=&quot;ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2019/03/31/33b4ff7cca69e217ae4e12e27d640165.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1/format/webp&quot; alt=&quot;主界面中的 SafetyNet 检测&quot; title=&quot;主界面中的 SafetyNet 检测&quot; width=&quot;450&quot; data-original=&quot;https://cdnfile.sspai.com/2019/03/31/33b4ff7cca69e217ae4e12e27d640165.png?imageView2/2/format/webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;figcaption class=&quot;ss-image-caption&quot;&gt;主界面中的 SafetyNet 检测&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;如果是 &lt;strong&gt;basic integrity&lt;/strong&gt; 这一项没有通过认证，那说明你遇到了大麻烦：试着开启「Magisk 核心功能模式」或者卸载所有模块，如果还是没有通过，那么你可能需要换一个系统或者第三方 ROM 了。&lt;/p&gt;
&lt;p&gt;如果是 &lt;strong&gt;ctsProfile&lt;/strong&gt; 这一项没有通过，那说明你的 ROM 没有通过其兼容性测试，一些 beta 版本或者国内厂商的 ROM 可能出现这种问题。这时我们下载使用 &lt;a href=&quot;https://forum.xda-developers.com/apps/magisk/module-magiskhide-props-config-t3789228&quot; title=&quot;MagiskHide Props Config&quot;&gt;MagiskHide Props Config&lt;/a&gt; 这个模块往往能够解决问题。&lt;/p&gt;
&lt;p&gt;确保 SafetyNet 检测无虞后，我们才能开始「蒙眼」行动，即对指定的某些 App 隐藏 Magisk 的存在。&lt;/p&gt;
&lt;p&gt;在 Magisk Manager 的侧边菜单中找到 Magisk Hide 项，选中我们想要隐藏的目标 App 即可。最近更新的 Magisk 19.0 版本还加入了「应用组件」层面进行 Magisk Hide 的功能。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;figure tabindex=&quot;0&quot; class=&quot;ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2019/03/31/f82b48893ee0033fc4248c97b7ceed25.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1/format/webp&quot; alt=&quot;Magisk Hide 界面&quot; title=&quot;Magisk Hide 界面&quot; width=&quot;450&quot; data-original=&quot;https://cdnfile.sspai.com/2019/03/31/f82b48893ee0033fc4248c97b7ceed25.png?imageView2/2/format/webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;figcaption class=&quot;ss-image-caption&quot;&gt;Magisk Hide 界面&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;至于对哪些应用进行 Magisk Hide，这个就要看每个读者的具体需要了。一般来说，Google Play 服务和商店是必须的，但也请注意这条来自开发者的注意事项：如无必要，不要&lt;strong&gt;随意&lt;/strong&gt;在 Magisk Hide 列表添加 App 而造成滥用（&lt;strong&gt;Do not abuse MagiskHide!&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;如果你还不放心，还可以去 Magisk Manager 的设置中打开「隐藏 Magisk Manager」。此时 Magisk Manager 将会进行一次重新安装，以便打乱软件包名来躲过对 Magisk Manager 的检测。&lt;/p&gt;
&lt;p&gt;至此，Magisk 已经能比较好地向那些对「系统完整性」有苛刻要求的应用隐藏自己。&lt;/p&gt;
&lt;h2 id=&quot;ss-2-1554264202389&quot;&gt;替代 SuperSU 进行 root 权限管理&lt;/h2&gt;
&lt;p&gt;大多数用户刷 Magisk ，就是奔着超级用户权限（Superuser）去的，这也是 Magisk 的核心功能。&lt;/p&gt;
&lt;p&gt;身兼 root 工具的 Magisk，在这方面的功能可以说是稳扎稳打。用户不必要过度操心，直接使用 Magisk Manager 中的默认设置就能用得舒心。App 向你提请超级用户权限的时候，用户可以选择永久同意、一定时间内同意或者是拒绝，超时之后没有进行选择，那么便会选择拒绝。&lt;/p&gt;
&lt;p&gt;进入菜单中的超级用户项，你还可以手动管理已经进行操作过的 App，进行通过或者拒绝，亦或者是删除操作让 App 在下次打开时再次弹窗申请权限。子项目里你可以关闭 App 在使用超级用户权限时的浮动提醒或者是记录。虽然我并不建议这么做，实在厌烦的话还是从心关闭提醒吧。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;figure tabindex=&quot;0&quot; class=&quot;ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2019/03/31/31c0bfe67eb16b3561b1bdfbd64fff1a.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1/format/webp&quot; alt=&quot;关于超级用户的设置&quot; title=&quot;关于超级用户的设置&quot; data-original=&quot;https://cdnfile.sspai.com/2019/03/31/31c0bfe67eb16b3561b1bdfbd64fff1a.png?imageView2/2/format/webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;figcaption class=&quot;ss-image-caption&quot;&gt;关于超级用户的设置&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Manager 设置中的关于超级用户的并不多，但是用户还是可以自定义请求权限弹窗的倒计时时长（默认 10 秒）、对于请求权限的默认处理、开启指纹认证等等。&lt;/p&gt;
&lt;h2 id=&quot;ss-2-1554264202389&quot;&gt;获取、管理 Magisk 模块&lt;/h2&gt;
&lt;p&gt;「模块」这个字眼，让许多用户把 Magisk 和 Xposed 这两件完全不同的工具混淆在了一起。&lt;/p&gt;
&lt;p&gt;模块的本质，是将原本需要玩家繁复操作的玩机过程与 Magisk「不改动系统」（Systemless-ly） 的特性结合在一起，并进行打包和分发。模块极大地简易了玩机操作，一个小小的 .zip 包文件可能包含了另一套全字重字体，可能囊括了一整套内核参数调教方案，可能附加了一些额外的小功能或是界面美化……模块只是简易了玩机操作的实践，但并没有将它无害化，该翻车的操作还是会翻车，这个时候模块的管理就变得尤其重要。&lt;/p&gt;
&lt;p&gt;从获取模块的角度来说，与 Xposed 类似，Magisk Manager 内集成了一个官方的模块仓库，用户在侧边菜单栏中切换到下载便可以查看这个模块仓库。最新更新的模块会显示在靠前位置，方便我们优先挑选那些仍在活跃更新的模块。但令人遗憾的是，模块仓库至今没有分类，你只能选择从这个单一的漫长的列表向下滑去，逐一阅读模块的简介（大多为英文）。&lt;/p&gt;
&lt;p&gt;这个时候，英语这门语言工具终于派上了用场，点击模块卡片会具现出模块开发者的说明，里面会标明这个模块的用途、&lt;strong&gt;要求&lt;/strong&gt;、&lt;strong&gt;用法&lt;/strong&gt;、更新说明、相关的帖子群组链接等等重要内容。我强烈建议&lt;strong&gt;对于未知的模块，应该先仔细完整地阅读一遍此说明&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;figure tabindex=&quot;0&quot; class=&quot;ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2019/03/31/afdb9b939382b1a92def9257a6cb559d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1/format/webp&quot; alt=&quot;以 NotoCJK 为例，仔细查看模块说明&quot; title=&quot;以 NotoCJK 为例，仔细查看模块说明&quot; width=&quot;450&quot; data-original=&quot;https://cdnfile.sspai.com/2019/03/31/afdb9b939382b1a92def9257a6cb559d.png?imageView2/2/format/webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;figcaption class=&quot;ss-image-caption&quot;&gt;以 NotoCJK 为例，仔细查看模块说明&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;当然了，任何有能力制作模块的开发者都能分发自己制作的模块，也可以选择是否提交到官方的模块仓库。玩机论坛里面你可以看到更多玩家的刷入反馈和测试，著名国外玩机论坛 XDA 还有专门的 Magisk 板块，国内的酷安等交流地也有不少活跃制作模块的开发者。&lt;/p&gt;
&lt;p&gt;知道模块可以从哪里得到后，我们要讨论的就是管理问题。管理主要是刷入和卸载两方面。广义地说，任何能给手机刷入 .zip 包的工具都可以进行模块的刷入，比如 TWRP、Magisk Manager 和 Franco Kernel Manager 等，操作也都简单得类似，刷入、重启生效。&lt;/p&gt;
&lt;p&gt;今次我们主要讲讲 Magisk Manager：在模块仓库中点击下载，便会自动开始下载、刷入的步骤，刷入完成后你可以选择关闭或者是直接重启生效。模块更新也是一样的步骤。但如果你是手动下载的模块 .zip 包，一切都需要手动。进入模块菜单项，点击下方的加号图标进入文件目录选取目标模块 .zip 包，即可开始模块的刷入或是更新。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;figure tabindex=&quot;0&quot; class=&quot;ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2019/03/31/0820b89096fa698160b078fcc0d91b18.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1/format/webp&quot; alt=&quot;对模块进行管理&quot; title=&quot;对模块进行管理&quot; width=&quot;450&quot; data-original=&quot;https://cdnfile.sspai.com/2019/03/31/0820b89096fa698160b078fcc0d91b18.png?imageView2/2/format/webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;figcaption class=&quot;ss-image-caption&quot;&gt;对模块进行管理&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;如果你刷入模块重启能顺利进入系统，那么意味着这个模块的刷入还算安全。在能够进入 Magisk Manager 的情况下，停用某个模块只需要把相应模块的钩子取消掉即可，如果你还想删掉这个模块，一并点击垃圾桶图标删除。停用和卸载都需要重启生效。&lt;/p&gt;
&lt;p&gt;可是如果「翻车」进不了系统，那该如何停用和卸载问题模块呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;无论是提前安装好，还是翻车后进入 TWRP 安装，你都需要用到 Magisk Manager for Recovery Mode 模块（仓库中搜索 mm 即可）。翻车后进入 TWRP 中的终端输入使用指令即可开始管理模块，详见该模块的使用说明。&lt;/li&gt;
&lt;li&gt;部分模块可以以「同样的模块包，再刷入一次便是卸载」的方式对应进行停用卸载。&lt;/li&gt;
&lt;li&gt;痛定思痛，进入 TWRP 刷入 Magisk 的卸载包，卸载一整个 Magisk。&lt;/li&gt;
&lt;li&gt;没有 TWRP，保留数据刷写当前系统的完整包。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;玩机千万条，数据第一条；模块不规范，机主两行泪。&lt;/p&gt;
&lt;h2 id=&quot;ss-2-1554264202390&quot;&gt;Magisk 安装与升级&lt;/h2&gt;
&lt;p&gt;Magisk Manager 不光是用于管理 Magisk 的功能行使，也时刻承载着其版本更迭。&lt;/p&gt;
&lt;p&gt;每当 Magisk 进行版本更迭的时候，用户就会在 Manager 收到更新推送，一般是先更新 Magisk Manager，再由其来更新 Magisk 本体。有趣的是，和 Google Chrome 类似，Magisk 也具有稳定版、beta 测试版和 Canary 金丝雀版三个版本，都是由开发者官方推出，用户可以根据自己的经验和需要选择对应的版本。&lt;/p&gt;
&lt;p&gt;同时，Magisk 是一个开源项目，不少开发者对它也有自己的想法和设计，比如开发 MD2 设计的 Manager，甚至是在 github 上维护一个自己的 Magisk 版本，提供更新链接供用户在 Manager 的设置中填入，从而跟随此版本的开发线。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;figure tabindex=&quot;0&quot; class=&quot;ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2019/03/31/574ad91c6d7c8caebb3bbf0106b2914a.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1/format/webp&quot; alt=&quot;由开发者 @vsmhell 制作的 MD2 风格的 Magisk Manager&quot; title=&quot;由开发者 @vsmhell 制作的 MD2 风格的 Magisk Manager&quot; data-original=&quot;https://cdnfile.sspai.com/2019/03/31/574ad91c6d7c8caebb3bbf0106b2914a.jpg?imageView2/2/format/webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;figcaption class=&quot;ss-image-caption&quot;&gt;由开发者 @vsmhell 制作的 MD2 风格的 Magisk Manager&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;没有刷入 Magisk 的时候，Manager 能做的事情很有限，主要功能就是将原厂的 boot 分区镜像打包成具有 root 权限的镜像，供玩家启动和刷入。详细的步骤已经在本系列第一篇 &lt;a href=&quot;https://sspai.com/post/53043&quot; title=&quot;《每个 Android 玩家都不可错过的神器（一）：Magisk 初识与安装》&quot;&gt;《每个 Android 玩家都不可错过的神器（一）：Magisk 初识与安装》&lt;/a&gt; 详细介绍，这里就不多赘述。&lt;/p&gt;
&lt;h2 id=&quot;ss-2-1554264202390&quot;&gt;结语&lt;/h2&gt;
&lt;p&gt;Magisk 的设计包含了许多奇妙的构想，呈现到功能上来让人惊呼 Magic。如果想要最大程度地对 Magisk 魔法般的功能善加利用，必须足够熟悉 Magisk Manager。大胆尝试、谨慎操作，补全系统的特性，或是增加自己想要的功能，让手中的设备成为一台梦想机，享受美好的数字生活。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关联阅读&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://sspai.com/post/53043&quot; title=&quot;每个 Android 玩家都不可错过的神器（一）：Magisk 初识与安装&quot;&gt;每个 Android 玩家都不可错过的神器（一）：Magisk 初识与安装&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;a href=&quot;https://sspai.com/post/53075&quot; title=&quot;每个 Android 玩家都不可错过的神器（二）：保留 Magisk 进行「无痛 OTA」&quot;&gt;每个 Android 玩家都不可错过的神器（二）：保留 Magisk 进行「无痛 OTA」&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;gt; 下载少数派 &lt;a href=&quot;https://sspai.com/page/client&quot; title=&quot;客户端&quot;&gt;客户端&lt;/a&gt;、关注 &lt;a href=&quot;http://sspai.com/s/KEPQ&quot; title=&quot;少数派公众号&quot;&gt;少数派公众号&lt;/a&gt;，发现更多 Android 玩机技巧 😃&lt;br&gt;&amp;gt; 特惠、好用的硬件产品，尽在 &lt;a href=&quot;https://sspai.com/post/https-//shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc&quot; title=&quot;少数派sspai官方店铺&quot;&gt;少数派sspai官方店铺&lt;/a&gt; 🛒&lt;/p&gt;
</description><link>https://sspai.com/post/53809</link><guid isPermaLink="false">https://sspai.com/post/53809</guid><pubDate>Sun, 31 Mar 2019 05:09:28 GMT</pubDate><author>路中南</author></item><item><title>Magisk 模块字体为什么这么好用，因为它有这些优点！</title><description>&lt;img src=&quot;https://cdnfile.sspai.com/article/d9ee2d91-4cda-6ede-d50a-ff2727fa9c39.jpg&quot; alt=&quot;Article Cover Image&quot; style=&quot;display: block; margin: 0 auto;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;&lt;p&gt;2018 年 5 月，SuperSU 的作者 Chainfire 正式宣布停止开发所有 root 相关的应用，这个消息曾一度让许多人认为是 Android 玩机时代的落幕。&lt;/p&gt;&lt;p&gt;用尘封之泪大神的话来说，就是：&lt;/p&gt;&lt;blockquote&gt;Chainfire 是真正的大神，能够做到像 Chainfire 这样的人并不多。&lt;/blockquote&gt;&lt;p&gt;但谁也没想到，此前一直不温不火的 Magisk 却在这个时候站了出来并成功扛过了 root 工具的重担。现在，Magisk 不仅做到了 Android Q 一问世就立即解决了 root 问题，还为玩机的朋友提供了挂载各种优化模块，甚至结合一些开发者的作品在 Androd 9 上实现了需要依赖 Xposed 框架才能实现的功能（在 Xposed 的作者 rovo89 自己都还没搞定 Android 9 适配的前提下，这是一件非常 amazing 的事情）。&lt;/p&gt;&lt;p&gt;不过，今天主要讲通过 Magisk 换字体的话题，Magisk 模块字体为什么这么好用？&lt;/p&gt;&lt;h2 id=&quot;ss-H2-1554369203803&quot;&gt;Android 是如何呈现字体的？&lt;/h2&gt;&lt;p&gt;要回答上面这个问题，得先从&amp;nbsp;&lt;strong&gt;Android 手机的字体调用规则&lt;/strong&gt;说起。&lt;/p&gt;&lt;p&gt;Android 5.0 之后，几乎整个手机的字体效果都由 &lt;i&gt;fonts.xml&lt;/i&gt; 这个配置文件来掌控，它位于&amp;nbsp;&lt;code&gt;system/etc&lt;/code&gt;&amp;nbsp;路径下，起到对&amp;nbsp;&lt;code&gt;system/fonts&lt;/code&gt;&amp;nbsp;路径下的字体文件进行全局调配的中枢级作用。&lt;/p&gt;&lt;p&gt;之所以用上「几乎」这个词，是因为 Android 手机环境复杂，各大厂商喜欢魔改系统，也难免动到和字体有关的地方。因此通过修改 &lt;i&gt;fonts.xml&lt;/i&gt; 这个配置文件以及&amp;nbsp;&lt;code&gt;system/fonts&lt;/code&gt;&amp;nbsp;这些字体文件也许只能实现 95% 左右的字体替换覆盖效果，只有在原生安卓系统上才能 100% 全局生效。&lt;/p&gt;&lt;p&gt;为什么要进行这样的修改呢？在 &lt;i&gt;fonts.xml&lt;/i&gt; 中，有一段很关键的代码：&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;family name=&quot;sans-serif&quot;&amp;gt;&lt;/code&gt;&lt;code&gt;    &amp;lt;font weight=&quot;100&quot; style=&quot;normal&quot;&amp;gt;Roboto-Thin.ttf&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;font&amp;nbsp;weight=&quot;100&quot;&amp;nbsp;style=&quot;italic&quot;&amp;gt;Roboto-ThinItalic.ttf&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;font&amp;nbsp;weight=&quot;300&quot;&amp;nbsp;style=&quot;normal&quot;&amp;gt;Roboto-Light.ttf&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;font&amp;nbsp;weight=&quot;300&quot;&amp;nbsp;style=&quot;italic&quot;&amp;gt;Roboto-LightItalic.ttf&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;font&amp;nbsp;weight=&quot;400&quot;&amp;nbsp;style=&quot;normal&quot;&amp;gt;Roboto-Regular.ttf&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;font&amp;nbsp;weight=&quot;400&quot;&amp;nbsp;style=&quot;italic&quot;&amp;gt;Roboto-Italic.ttf&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;font&amp;nbsp;weight=&quot;500&quot;&amp;nbsp;style=&quot;normal&quot;&amp;gt;Roboto-Medium.ttf&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;font&amp;nbsp;weight=&quot;500&quot;&amp;nbsp;style=&quot;italic&quot;&amp;gt;Roboto-MediumItalic.ttf&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;code&gt;    &amp;lt;font weight=&quot;900&quot; style=&quot;normal&quot;&amp;gt;Roboto-Black.ttf&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;code&gt;    &amp;lt;font weight=&quot;900&quot; style=&quot;italic&quot;&amp;gt;Roboto-BlackItalic.ttf&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;font&amp;nbsp;weight=&quot;700&quot;&amp;nbsp;style=&quot;normal&quot;&amp;gt;Roboto-Bold.ttf&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;code&gt;    &amp;lt;font weight=&quot;700&quot; style=&quot;italic&quot;&amp;gt;Roboto-BoldItalic.ttf&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;code&gt; &amp;lt;/family&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;即使没有什么程序员基础也不难看懂这段代码的意思，没错，&lt;b&gt;&lt;i&gt;font.xml&lt;/i&gt; 控制了 Android 操作系统在不同 UI 界面中的字体粗细，告诉系统该在哪些地方分别调用哪一款 Roboto 字体&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;Roboto 是 Google 为 Android 操作系统设计的一个无衬线字体家族，原本包含 Thin、Light、Regular 、Medium、Bold、Black 共计 6 套字重（即 weight），同时每个字重还有斜体版本（即 italic）。&lt;br&gt;&lt;/p&gt;&lt;p&gt;此外，Roboto 字体家族的部分字重还有窄版的 Condensed 及对应的斜体，它们在 Android 操作系统中通常用作桌面启动器应用抽屉的图标标签，保证在有限的空间内显示更完整的应用名称。这种设定同样在 &lt;i&gt;fonts.xml&lt;/i&gt;&amp;nbsp;这个文件里有所体现。&lt;/p&gt;&lt;p&gt;不难看出，&lt;i&gt;fonts.xml&lt;/i&gt; 就像是一本字典，Android 操作系统在需要调用某一个字体效果时就会在这当中进行查询，然后按图索骥，找到并调用 &lt;i&gt;system/fonts&lt;/i&gt; 下对应的字体文件，最后我们就在界面上看到了字体效果，是不是很简单？&lt;br&gt;&lt;/p&gt;&lt;h2 id=&quot;ss-H2-1554369737575&quot;&gt;你每天都在看的中文字体并不完美&lt;/h2&gt;&lt;p&gt;我们继续用这个思路继续往下看 Android 操作系统中中文字体的调用机制。&lt;br&gt;&lt;/p&gt;&lt;p&gt;在 Android 5.0 和 6.0 版本中，中文字体的控制代码如下：&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;family&amp;nbsp;lang=&quot;zh-Hans&quot;&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;font&amp;nbsp;weight=&quot;400&quot;&amp;nbsp;style=&quot;normal&quot;&amp;gt;NotoSansSC-Regular.otf&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;lt;/family&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;在 Android&amp;nbsp;7.0 到 8.1 版本中，中文字体的控制代码变成了这样：&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;family lang=&quot;zh-Hans&quot;&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;font&amp;nbsp;weight=&quot;400&quot;&amp;nbsp;style=&quot;normal&quot;&amp;nbsp;index=&quot;2&quot;&amp;gt;NotoSansCJK-Regular.ttc&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;lt;/family&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;而在 Android&amp;nbsp;9 之后，中文字体的控制代码改成了这样：&lt;br&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;family lang=&quot;zh-Hans&quot;&amp;gt;&lt;/code&gt;&lt;code&gt;    &amp;lt;font weight=&quot;400&quot; style=&quot;normal&quot; index=&quot;2&quot;&amp;gt;NotoSansCJK-Regular.ttc&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;code&gt;    &amp;lt;font weight=&quot;400&quot; style=&quot;normal&quot; index=&quot;2&quot; fallbackFor=&quot;serif&quot;&amp;gt;NotoSerifCJK-Regular.ttc&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;lt;/family&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;这三套代码基本大同小异，早期版本调用思源黑体的 OpenType 文件，后来改成了思源黑体的 TrueType Collection 文件，并且用额外的 index 代码指定了集成字库中的文件序号，再后来又追加了缺字回退机制（即思源黑体里没有的符号用思源宋体来显示）。&lt;/p&gt;&lt;p&gt;不过仔细观察和对比后却不难发现，Google 在中文字体调用机制上偷了懒：&lt;b&gt;和英文、数字字体中使用 6 套不同粗细字体并且还有斜体、窄版等做法不同，中文环境下 Google 仅用了 font&amp;nbsp;weight=400 来敷衍了事&lt;/b&gt;。&lt;br&gt;&lt;/p&gt;&lt;p&gt;这种区别对待给我们带来了什么问题呢？&lt;/p&gt;&lt;p&gt;我们以谷歌原生系统默认的「思源黑体单字重」效果和我优化后的「思源黑体多字重」效果作比较：&lt;/p&gt;&lt;figure tabindex=&quot;0&quot; draggable=&quot;false&quot; class=&quot;ss-img-wrapper&quot; contenteditable=&quot;false&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2019/03/30/1bd06749df07985b930cb0602bef66fa.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1/format/webp&quot; alt=&quot;&quot; data-original=&quot;https://cdnfile.sspai.com/2019/03/30/1bd06749df07985b930cb0602bef66fa.png?imageView2/2/format/webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;figcaption class=&quot;ss-image-caption&quot;&gt;&lt;p&gt;默认样式（左）和优化样式（右），均为思源黑&lt;/p&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;上图中，我们可以看出哪怕中文只有一个「font&amp;nbsp;weight=400」的配置，但界面上依然可以在标题部分显示粗体，但这个粗体似乎有些问题，我们从上图中截取两段，特写镜头对比一下：&lt;br&gt;&lt;/p&gt;&lt;figure tabindex=&quot;0&quot; draggable=&quot;false&quot; class=&quot;ss-img-wrapper custom-width&quot; contenteditable=&quot;false&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2019/03/30/0bacfcdf11ae46dd9055285dbb02c605.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1/format/webp&quot; alt=&quot;&quot; width=&quot;450&quot; data-original=&quot;https://cdnfile.sspai.com/2019/03/30/0bacfcdf11ae46dd9055285dbb02c605.png?imageView2/2/format/webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;figcaption class=&quot;ss-image-caption&quot;&gt;伪粗体和真粗体对比&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;不难发现，系统默认方案下出来的粗体，首先粗度上就有问题——它显然不够粗啊！如果你的观察力不是很强，觉得两个标题粗度差不多，不妨再观察一下上图「大东山谷」和「普洱歌剧猫」这两个 ID 的字重，差别会更加明显。&lt;/p&gt;&lt;p&gt;事实上，默认字体的粗体不仅粗度不够，渲染效果也非常糟糕，这种无中生有冒出来粗体，是 Android 系统自动把字体机械加粗显示出来的效果，Windows 下也有相似的机制，我称之为「&lt;strong&gt;伪粗体&lt;/strong&gt;」。「&lt;strong style=&quot;font-style: inherit; font-variant-ligatures: inherit; font-variant-caps: inherit;&quot;&gt;伪粗体&lt;/strong&gt;」机制会带来一些很糟糕的体验，很多手机现在主题商店里都能换字体了，但只能达到单字重效果，比如这样：&lt;/p&gt;&lt;figure tabindex=&quot;0&quot; draggable=&quot;false&quot; class=&quot;ss-img-wrapper custom-width&quot; contenteditable=&quot;false&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2019/03/30/8d083defe7721478c8ece9820dd6b45c.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1/format/webp&quot; alt=&quot;&quot; width=&quot;450&quot; data-original=&quot;https://cdnfile.sspai.com/2019/03/30/8d083defe7721478c8ece9820dd6b45c.jpg?imageView2/2/format/webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;figcaption class=&quot;ss-image-caption&quot;&gt;&lt;p&gt;行黑体，不好意思粗体糊了&lt;/p&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure tabindex=&quot;0&quot; draggable=&quot;false&quot; class=&quot;ss-img-wrapper custom-width&quot; contenteditable=&quot;false&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2019/03/30/515a8c19d49d39e9b735af38d4ceac56.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1/format/webp&quot; alt=&quot;&quot; width=&quot;450&quot; data-original=&quot;https://cdnfile.sspai.com/2019/03/30/515a8c19d49d39e9b735af38d4ceac56.jpg?imageView2/2/format/webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;figcaption class=&quot;ss-image-caption&quot;&gt;&lt;em&gt;阿丽达黑体，粗体笔画变形&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;上述这两个问题的锅，主要是安卓默认单字重的问题。粗体并不是独立的字体文件，而是系统自动机械加粗的「&lt;strong&gt;伪粗体&lt;/strong&gt;」。而「伪粗体」由于没有经过人工较准，难免出现笔画粘连、字体变形等问题。&lt;/p&gt;&lt;p&gt;&lt;i&gt;PS. 这里开发者也得背一部分锅，因为很多时候哪怕我们优化了多字重效果，这些问题还会或多或少遇到。而 App 开发者通常只会在系统自带的字体下测试，开发的时候也没严格调用多字重，非要用糟糕透顶的「&lt;strong style=&quot;font-variant-ligatures: inherit; font-variant-caps: inherit;&quot;&gt;伪粗体&lt;/strong&gt;」渲染。&lt;/i&gt;&lt;/p&gt;&lt;h2 id=&quot;ss-H2-1554370337249&quot;&gt;借 Magisk 用上多字重字体&lt;/h2&gt;&lt;p&gt;解决方法则很简单——开启多字重效果，让粗体单独使用一个优质的字体文件来显示。&lt;/p&gt;&lt;p&gt;这不仅能够解决我们在上面展示的大部分字体问题，除了常规和粗体，还有丰富的其他粗细档位显示效果（例如微信聊天界面左上角就应该是 Medium 中粗体）。&lt;/p&gt;&lt;figure tabindex=&quot;0&quot; draggable=&quot;false&quot; class=&quot;ss-img-wrapper custom-width&quot; contenteditable=&quot;false&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2019/04/04/a85363b7f0d2dc690bcf07d55d384325.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1/format/webp&quot; alt=&quot;&quot; width=&quot;450&quot; data-original=&quot;https://cdnfile.sspai.com/2019/04/04/a85363b7f0d2dc690bcf07d55d384325.jpg?imageView2/2/format/webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;figcaption class=&quot;ss-image-caption&quot;&gt;微信标题字体&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;这里插句题外话。我从 Android&amp;nbsp;&amp;nbsp;5.0 就开始制作多字重的 Android 字体，那时候只需简单仿写谷歌对英文字体的控制方法，然后手动扩展一下缺失的几个字重文件即可。而 Android&amp;nbsp; 7.0 之后，包括现在的 Android Q，虽然类似的方法可以继续用，但是得额外多一些 ttc 格式字体的制作成本，不然无法做到真正全局替换，某些顽固的 App 和系统界面还会强制调用 ttc。在这个过程中，我们还不能全都改用 TrueType Collection，因为旧系统只支持 OpenType 和 TrueType。&lt;/p&gt;&lt;p&gt;为了两全其美，我就继续在高版本系统用 otf，同时插一段 ttc 的代码做字体回退。&lt;/p&gt;&lt;p&gt;最终完美兼容 Android 5.0 到 Android Q 通用中文字体解决方案如下：&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;family lang=&quot;zh-Hans&quot;&amp;gt;&lt;/code&gt;&lt;code&gt;    &amp;lt;font weight=&quot;100&quot; style=&quot;normal&quot;&amp;gt;NotoSansSC-Thin.otf&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;font&amp;nbsp;weight=&quot;300&quot;&amp;nbsp;style=&quot;normal&quot;&amp;gt;NotoSansSC-Light.otf&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;code&gt;    &amp;lt;font weight=&quot;400&quot; style=&quot;normal&quot;&amp;gt;NotoSansSC-Regular.otf&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;code&gt;    &amp;lt;font weight=&quot;500&quot; style=&quot;normal&quot;&amp;gt;NotoSansSC-Medium.otf&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;code&gt;    &amp;lt;font weight=&quot;700&quot; style=&quot;normal&quot;&amp;gt;NotoSansSC-Bold.otf&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;lt;/family&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;lt;family lang=&quot;zh-Hans&quot;&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;font&amp;nbsp;weight=&quot;400&quot;&amp;nbsp;style=&quot;normal&quot;&amp;nbsp;index=&quot;2&quot;&amp;gt;NotoSansCJK-Regular.ttc&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;lt;/family&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;除了系统原有的 Regular，这套字体调用机制增加了包含 Thin、Light、Medium、Bold 在内的共计 5 套字重，没有加入 Black 的原因是中文环境基本没有用到那么粗的情况。事实上，大多数情况下我们连 Thin 也用不到，只不过我同时还要做 iOS 的字体，苹果系统的通知中心等 UI 界面需要这个Thin，就一起用了。&lt;/p&gt;&lt;p&gt;早些时候在我公众号以及极限、知乎等社区有分享过这个方案，现在看很多人的 Magisk 字体模块也都有我方案的影子。毕竟再怎么像，文件的命名规则、Android 7.0 之后仍然在用 otf 的奇怪思路、还有中文有 Thin 却没有 Bold 的诡异设置，别人不可能和我想得一模一样。&lt;/p&gt;&lt;p&gt;关于 ttc 格式字体的制作，限于篇幅我就不赘述了。需要涉及到 ttf name 和 Adobe Font Development Kit 及一定的脚本编写基础，而补字库和修改字型则可以用 font creator、font forge、font lab studio 等工具完成。&lt;/p&gt;&lt;p&gt;到这里，我们算是完成了&amp;nbsp;&lt;strong&gt;Android 字体调用规则&lt;/strong&gt;的科普，回顾一下，要想实现完美的中文字体效果，我们至少需要考虑这样几个问题：&lt;/p&gt;&lt;p id=&quot;ss-P-1554370879423&quot;&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;span style=&quot;font-family: &amp;quot;PingFang SC&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 16px;&quot;&gt;想要全局替换多字重的中英文，是不是要手动一个个换进去？&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-family: &amp;quot;PingFang SC&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 16px;&quot;&gt;中文字体的体积很大，手机的系统分区放不下那么多字重文件怎么办？&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-family: &amp;quot;PingFang SC&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 16px;&quot;&gt;每次换字体都要重新换一遍吗，有没有一键操作？&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;OK，我们来看下这两个问题的优先程度。&lt;/p&gt;&lt;p&gt;下图是我修改完成的思源黑体中文五字重以及 GoogleSans 英文数字 6 字重后，全部 39 个需要替换的文件。他们合计达到了 100MB：&lt;/p&gt;&lt;figure tabindex=&quot;0&quot; draggable=&quot;false&quot; class=&quot;ss-img-wrapper&quot; contenteditable=&quot;false&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2019/03/30/2aaec67700e05c18543eee924de6dc37.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1/format/webp&quot; alt=&quot;&quot; data-original=&quot;https://cdnfile.sspai.com/2019/03/30/2aaec67700e05c18543eee924de6dc37.png?imageView2/2/format/webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;figcaption class=&quot;ss-image-caption&quot;&gt;需要替换的素材合计达到了100MB&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;如果手动替换进系统，文件数量也忒多了一些，使用 TWRP 卡刷勉强能解决这个问题（直接开机状态用RE管理器覆盖的话，可能操作到一半系统发现原来的字体文件读取不到，可能就重启了，非常不方便）。&lt;/p&gt;&lt;p&gt;另一方面，也并不是所有机型都能额外塞下这 100M 大小的字体文件，我之前用一加 5T 的时候就发现，官方只留了大概 70~80M 的空间，不对系统组件进行精简的前提下很多字体都刷不进去。于是以上两个问题就引发了第三个问题：&lt;b style=&quot;font-style: inherit; font-variant-ligatures: inherit; font-variant-caps: inherit;&quot;&gt;换字体太麻烦了&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;&lt;b&gt;好在 Magisk 的模块挂载机制就能解决这所有的问题，而刷入字体模块几乎是一键完成，不占多余的系统分区空间，却能达到替换系统文件一样的效果&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;由于制作 Magisk 模块字体还会涉及到一些简单的代码，有兴趣的朋友可以自己研究。我在这里直接提供一个思源黑体模板，大家可以直接刷入实现多字重效果或按需进行手动修改——按照前文的教程修改&amp;nbsp;fonts.xml&amp;nbsp;这个配置并附上&amp;nbsp;system/fonts&amp;nbsp;的配套字体文件，即可换上自己想要的字体。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://pan.baidu.com/s/1KlCjk-qn_eA4mrfD0a8vGg&quot; target=&quot;_blank&quot; class=&quot;insert-link&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://pan.baidu.com/s/1KlCjk-qn_eA4mrfD0a8vGg&quot; target=&quot;_blank&quot; class=&quot;insert-link&quot;&gt;思源黑体5字重+GoogleSans英文6字重Magisk模块（V2.000）&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;提取码：njzy&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;另外在上面的 Magisk 模块模板中有一个 &lt;i style=&quot;font-variant-ligatures: inherit; font-variant-caps: inherit;&quot;&gt;module.prop&lt;/i&gt; 文件，里面有两行关键代码：&lt;br&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;id=201812012322&lt;/code&gt;&lt;code&gt;name=思源黑体5字重+GoogleSans英文【宁静之雨模板】&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;第一行表示独一无二的模块 id，相同 id 的模块刷入是会覆盖的，记得修改一下；第二行当然就是模块显示的名字了，按需调整即可。&lt;/p&gt;&lt;p&gt;做好 Magisk 字体模块后，在 Magisk 里刷上字体模块，勾选重启即可。唯一的注意事项就是不要同时选多个字体模块，否则系统会随机选其中一个生效。另外，有一些模块的作者也会修改字体配置文件：比如在任意手机上开启 Google Pixel 手机某些特性的模块里，作者可能就会加上 Google Sans 字体家族的扩展，这里就会和我们的字体模块产生冲突。&lt;/p&gt;&lt;p&gt;安装 Magisk 字体模块后我们可以随意勾选切换，重启即可生效。完美的多字重扩展且不占系统空间，灵活方便，这就是选则 Magisk 替换字体的原因！&lt;/p&gt;&lt;p&gt;关联阅读：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://sspai.com/post/53043&quot; target=&quot;_blank&quot; class=&quot;insert-link&quot;&gt;每个&amp;nbsp;Android&amp;nbsp;玩家都不可错过的神器（一）：Magisk&amp;nbsp;初识与安装&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://sspai.com/post/53075&quot; target=&quot;_blank&quot; class=&quot;insert-link&quot;&gt;每个&amp;nbsp;Android&amp;nbsp;玩家都不可错过的神器（二）：保留&amp;nbsp;Magisk&amp;nbsp;进行「无痛&amp;nbsp;OTA」&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://sspai.com/post/53809&quot; target=&quot;_blank&quot; class=&quot;insert-link&quot;&gt;每个&amp;nbsp;Android&amp;nbsp;玩家都不可错过的神器（三）：用好&amp;nbsp;Magisk&amp;nbsp;Manager，骗过特定应用的&amp;nbsp;root&amp;nbsp;检测&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;div&gt;&amp;gt; 下载少数派&amp;nbsp;&lt;a href=&quot;https://sspai.com/page/client&quot;&gt;客户端&lt;/a&gt;、关注&amp;nbsp;&lt;a href=&quot;http://sspai.com/s/KEPQ&quot;&gt;少数派公众号&lt;/a&gt;，发现更多 Android 玩机技巧 😃&lt;br&gt;&amp;gt; 特惠、好用的硬件产品，尽在&amp;nbsp;&lt;a href=&quot;https://sspai.com/post/https-//shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc&quot;&gt;少数派sspai官方店铺&lt;/a&gt;&amp;nbsp;🛒&lt;/div&gt;</description><link>https://sspai.com/post/53808</link><guid isPermaLink="false">https://sspai.com/post/53808</guid><pubDate>Sat, 30 Mar 2019 15:40:58 GMT</pubDate><author>宁静之雨</author></item><item><title>每个 Android 玩家都不可错过的神器（二）：保留 Magisk 进行「无痛 OTA」</title><description>&lt;img src=&quot;https://cdnfile.sspai.com/article/4516949e-bede-de4a-9c38-1c10b3b4d1ce.jpg&quot; alt=&quot;Article Cover Image&quot; style=&quot;display: block; margin: 0 auto;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;&lt;p&gt;无论从我平时接触到的 Android 用户还是从此前与 root 相关的讨论来看，很多人在要不要 root 这件事情上反复纠结的最大原因在于 OTA。&lt;/p&gt;&lt;p&gt;对移动平台操作系统而言，OTA 更新也许是最为常见也最为方便的系统升级方式，以 Google 自家的 Pixel 设备为例，一次没有太多功能更新的月度安全补丁推送也许只需要下载几十兆大小的更新包，与之形成对比的则是以 GB 为单位计算的全量工厂镜像。&lt;/p&gt;&lt;p&gt;因此无论从便利性还是从带宽、流量角度出发，为 OTA 而放弃 root 的行为都值得理解了：&lt;strong&gt;大部分 root 工具都会直接对系统分区内的文件进行修改，经过修改的系统文件显然是过不了 OTA 流程中「系统完整性验证」这一关的&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;而我们在 &lt;a href=&quot;https://sspai.com/post/53043&quot; target=&quot;_blank&quot;&gt;上一篇&lt;/a&gt; 中已经提到，得益于 systemless 特性，能够无痛 OTA 更新也是 Magisk 的一大优点。本文就将介绍如何在安装了 Magisk 的前提下进行无痛 OTA 系统更新。&lt;/p&gt;&lt;h2&gt;&lt;div&gt;确认 A/B 系统分区支持状态&lt;/div&gt;&lt;/h2&gt;&lt;p&gt;A/B 系统分区是 Google 在 Android 7.0 时代引入的新机制，顾名思义，采用这个机制的设备拥有 A、B 两套系统分区，用户数据则能够在这两套系统分区之间共用。&lt;/p&gt;&lt;p&gt;这种分区机制带来的最大好处，在于让无缝系统更新（seemless updates）成为了可能——举个例子，当我们在 A 系统中进行 OTA 更新时，接受更新的很有可能是当前并未启用的 B 系统。这样一来，OTA 更新的过程可以在不干扰当前使用的前提下顺利完成，手机重启后，系统分区从 A 切换到 B，用户自然也就用上了新系统。&lt;/p&gt;&lt;figure tabindex=&quot;0&quot; draggable=&quot;false&quot; class=&quot;ss-img-wrapper&quot; contenteditable=&quot;false&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2019/02/26/1efd3d6a9eb66f6f441e8695aa0c2a0f.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1/format/webp&quot; alt=&quot;&quot; data-original=&quot;https://cdnfile.sspai.com/2019/02/26/1efd3d6a9eb66f6f441e8695aa0c2a0f.jpg?imageView2/2/format/webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;figcaption class=&quot;ss-image-caption&quot;&gt;A/B 分区的系统更新流程&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;此外，采用 A/B 系统分区的设备在遭遇 OTA 事故时，还能在系统启动失败后自动切换回更新前能够正常工作的系统分区。得益于这些便利，Android 7.0 正式推出后的主流 Android 设备很多都已经支持了 A/B 系统分区方式。&lt;/p&gt;&lt;p&gt;A/B 分区同样也是安装了 Magisk 状态下进行无痛 OTA 系统更新的前提条件，&lt;strong&gt;那么该如何确定自己的设备支持这种分区方式呢？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;首先，如果你已经在电脑端正确配置好了 ADB 环境，不妨在手机端打开 USB 调试后将手机连上电脑，然后在电脑端按照下列步骤检查设备是否采用了支持无缝系统更新的 A/B 分区：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;运行 CMD 命令行工具或终端&lt;/li&gt;&lt;li&gt;执行 adb shell 指令，此处应返回 设备代号:/$&lt;/li&gt;&lt;li&gt;随后执行 getprop ro.build.ab_update 指令&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;返回结果为 true 则表示你的设备采用了 A/B 系统分区。&lt;/p&gt;&lt;figure tabindex=&quot;0&quot; draggable=&quot;false&quot; class=&quot;ss-img-wrapper&quot; contenteditable=&quot;false&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2019/02/26/7da9cffc4d86e47edbbc61bca4996bff.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1/format/webp&quot; alt=&quot;&quot; data-original=&quot;https://cdnfile.sspai.com/2019/02/26/7da9cffc4d86e47edbbc61bca4996bff.jpg?imageView2/2/format/webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;figcaption class=&quot;ss-image-caption&quot;&gt;使用 CMD 鉴定 A/B 分区兼容性&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;当然，你也可以通过 &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.kevintresuelo.treble&quot; target=&quot;_blank&quot;&gt;Treble Check&lt;/a&gt; 这款小应用来检测 Project Treble 和 A/B 系统分区的兼容性，这款工具无需 root，下载安装后直接运行即可看到结果。&lt;/p&gt;&lt;figure tabindex=&quot;0&quot; draggable=&quot;false&quot; class=&quot;ss-img-wrapper custom-width&quot; contenteditable=&quot;false&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2019/02/26/ca1602c05fdaa145d6a92eb0d290f891.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1/format/webp&quot; alt=&quot;&quot; width=&quot;400&quot; data-original=&quot;https://cdnfile.sspai.com/2019/02/26/ca1602c05fdaa145d6a92eb0d290f891.jpg?imageView2/2/format/webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/figure&gt;&lt;p&gt;确认设备支持 A/B 系统分区后，我们就可以接着进行下一步了。&lt;/p&gt;&lt;p&gt;&lt;span app-id=&quot;14430&quot; contenteditable=&quot;false&quot; class=&quot;ss-loading&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;div&gt;做好准备工作&lt;/div&gt;&lt;/h2&gt;&lt;p&gt;由于 A/B 分区在系统更新过程中几乎不会对用户造成打扰，一些 OEM 厂商也顺势将 OTA 更新做成了一个可以在后台自动完成的任务。&lt;/p&gt;&lt;p&gt;但问题在于，伴随着自动完成 OTA 更新后系统分区的切换，我们在更新前借助 Magisk 获取的 root 权限和已经安装过的 Magisk 模块都会一一失效。鉴于本文要讨论的 OTA 更新特指&lt;strong&gt;既能通过 OEM 官方通道进行 OTA 更新，又能在 OTA 更新后保留 Magisk 的 root 权限和已安装模块&lt;/strong&gt;。如果你想在安装了 Magisk 后的使用过程中均采用本文介绍的 OTA 方式，就必须做好一些事前准备，&lt;/p&gt;&lt;p&gt;首先，找到并关闭自动系统更新选项。这个选项位于开发者选项的第一部分设置当中，因此还算好找。&lt;/p&gt;&lt;figure tabindex=&quot;0&quot; draggable=&quot;false&quot; class=&quot;ss-img-wrapper&quot; contenteditable=&quot;false&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2019/02/26/1d30e9f6d787c9f115f9bc4815f9f0ac.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1/format/webp&quot; alt=&quot;&quot; data-original=&quot;https://cdnfile.sspai.com/2019/02/26/1d30e9f6d787c9f115f9bc4815f9f0ac.jpg?imageView2/2/format/webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;figcaption class=&quot;ss-image-caption&quot;&gt;关闭自动更新并还原原厂件镜像&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;然后，在厂商发布系统更新或确认能检测到 OTA 更新后，点击进入 Magisk Manager 应用，找到位于主界面的「卸载 Magisk」选项，然后点击「还原原厂镜像」。&lt;/p&gt;&lt;p&gt;注意，如果你在此时遇到了&amp;nbsp;&lt;code&gt;stock backup does not exist&lt;/code&gt;&amp;nbsp;这样的提示，则表明 Magisk 未能在安装时成功创建 boot 分区的备份（自然也就无法还原原厂镜像），此时建议使用我们在&lt;a href=&quot;https://sspai.com/post/53043&quot; target=&quot;_blank&quot; class=&quot;insert-link&quot;&gt; 第一篇&amp;nbsp;&lt;/a&gt;文章中提到的 boot 镜像修补法来重新安装 Magisk，这样就能保证原厂镜像得到正确备份了。&lt;/p&gt;&lt;p&gt;另外，和第一步操作不同的是，自动系统更新选项我们建议保持长期关闭，&lt;strong&gt;还原原厂镜像操作在每次进行 OTA 更新操作前都要执行&lt;/strong&gt;。&lt;/p&gt;&lt;h2&gt;&lt;div&gt;科学的 OTA 更新流程&lt;/div&gt;&lt;/h2&gt;&lt;p&gt;接下来我们要做的就是执行正常的 OTA 更新流程了。&lt;/p&gt;&lt;p&gt;在执行完毕「还原原厂镜像」操作后，大部分机型在系统设置中应该都能成功检测并安装来自 OEM 厂商的 OTA 更新了。&lt;/p&gt;&lt;p&gt;正如上文所言，OTA 更新流程结束后，系统应该会提示我们重启，重启后系统就自动切换到了更新过的另一个系统分区上。只是此时另一个系统分区并没有保留 Magisk 的安装和 root 状态，相关模块也无从启用。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;因此在安装完 OTA 更新后，请先不要重启&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;无视系统的重启提示，直接打开 Magisk Manager 应用，找到「安装」选项，然后在点击后的弹出菜单中选择「安装到未使用的槽位（Install to Inactive Slot）」。&lt;/p&gt;&lt;figure tabindex=&quot;0&quot; draggable=&quot;false&quot; class=&quot;ss-img-wrapper&quot; contenteditable=&quot;false&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2019/02/26/dcce1cda2e7fcff5adec87cc2c39e52a.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1/format/webp&quot; alt=&quot;&quot; data-original=&quot;https://cdnfile.sspai.com/2019/02/26/dcce1cda2e7fcff5adec87cc2c39e52a.jpg?imageView2/2/format/webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;figcaption class=&quot;ss-image-caption&quot;&gt;跳过重启并安装 Magisk 到另一分区&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;随后，Magisk 就会在已经顺利进行过 OTA 更新的另一系统分区中进行安装。安装完成后直接点击安装界面右下角的「重启」按钮，即可重启到既保留了 Magisk，又应用了 OTA 更新的另一系统分区了。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关联阅读：&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://source.android.com/devices/tech/ota/ab&quot; target=&quot;_blank&quot;&gt;A/B (Seamless) System Updates&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://topjohnwu.github.io/Magisk/tutorials.html#ota-installation&quot; target=&quot;_blank&quot;&gt;Magisk Tutorials - OTA Installation&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.xda-developers.com/how-to-check-android-device-supports-seamless-updates/&quot; target=&quot;_blank&quot;&gt;How to check if your Android device supports Seamless Updates&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://sspai.com/post/40737&quot; target=&quot;_blank&quot;&gt;无需重新 Root，让已 Root 的设备轻松升级 Android 8.0&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://sspai.com/post/53043&quot; target=&quot;_blank&quot;&gt;每个 Android 玩家都不可错过的神器（一）：Magisk 初识与安装&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;gt; 下载少数派&amp;nbsp;&lt;a href=&quot;https://sspai.com/page/client&quot;&gt;&lt;u&gt;客户端&lt;/u&gt;&lt;/a&gt;、关注&amp;nbsp;&lt;a href=&quot;http://sspai.com/s/KEPQ&quot;&gt;&lt;u&gt;少数派公众号&lt;/u&gt;&lt;/a&gt;&amp;nbsp;，发现更多 Android 玩机技巧 😃&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&amp;gt; 特惠、好用的硬件产品，尽在&amp;nbsp;&lt;a href=&quot;https://shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc&quot;&gt;&lt;u&gt;少数派sspai官方店铺&lt;/u&gt;&lt;/a&gt;&amp;nbsp;🛒&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;</description><link>https://sspai.com/post/53075</link><guid isPermaLink="false">https://sspai.com/post/53075</guid><pubDate>Tue, 26 Feb 2019 04:02:52 GMT</pubDate><author>克莱德</author></item><item><title>每个 Android 玩家都不可错过的神器（一）：Magisk 初识与安装</title><description>&lt;img src=&quot;https://cdnfile.sspai.com/2019/02/25/bb72ef405ed95d3d09cd7f60f9f88aa5.png&quot; alt=&quot;Article Cover Image&quot; style=&quot;display: block; margin: 0 auto;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;&lt;blockquote&gt;&lt;div&gt;Come together, not the same.&lt;/div&gt;&lt;/blockquote&gt;&lt;p&gt;选择 Android 的同时，我们也选择一种「可能性」。&lt;/p&gt;&lt;p&gt;今天厌倦了死板的默认字体我们可以更换，明天想在 MIUI 上试试颜值更高并且没有广告的索尼天气，我们也可以想办法突破 OEM 定制应用的机型限制……诸如&amp;nbsp;&lt;a href=&quot;https://sspai.com/post/42743&quot; target=&quot;_blank&quot; class=&quot;insert-link&quot;&gt;Xposed&lt;/a&gt;&amp;nbsp;这类不断涌现的「神器」在自定义这件事情上为 Android 插上了腾飞的翅膀，也让「千机千面」成为了可能。&lt;/p&gt;&lt;p&gt;只是美丽向来也伴随着风险：未获得 Google「认证」的设备无法从 Play 应用商店下载安装 Netflix，Google Pay、Pokémon Go 等应用不能在已 root 的设备上正常运行，改动过系统文件的 ROM 无法通过 OEM 渠道进行正常的 OTA 更新升级……&lt;/p&gt;&lt;p&gt;对 Android 生态而言，自定义和稳定性长久以来似乎都是「鱼与熊掌」——直到 Magisk 的横空出世。&lt;/p&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2 id=&quot;ss-H2-1551071250826&quot;&gt;&lt;b&gt;Magisk 是如何工作的？&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;在一些用户眼里，Magisk 与另一款名为 Xposed 的神器有着高度的相似性，部分群体当中甚至还存在着「Magisk 框架」这样的说法。&lt;/p&gt;&lt;p&gt;的确，二者的工作机制都是「拦截」。Xposed 通过劫持 Android 系统的 zygote 进程来加载自定义功能，这就像是半路截杀，在应用运行之前就已经将我们需要的自定义内容强加在了系统进程当中。&lt;/p&gt;&lt;p&gt;Magisk 则另辟蹊径，通过挂载一个与系统文件相隔离的文件系统来加载自定义内容，为系统分区打开了一个通往平行世界的入口，所有改动在那个世界（Magisk 分区）里发生，在必要的时候却又可以被认为是（从系统分区的角度而言）没有发生过。&lt;/p&gt;&lt;figure tabindex=&quot;0&quot; draggable=&quot;false&quot; class=&quot;ss-img-wrapper&quot; contenteditable=&quot;false&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2019/02/25/82c9c372a64d21dce9d813c2fe9dbd7f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1/format/webp&quot; alt=&quot;&quot; data-original=&quot;https://cdnfile.sspai.com/2019/02/25/82c9c372a64d21dce9d813c2fe9dbd7f.png?imageView2/2/format/webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;figcaption class=&quot;ss-image-caption&quot;&gt;Xposed/Magisk 原理示意图&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Magisk 的实现方式就像是一种魔法，当被挂载的 Magisk 分区被隐藏甚至被取消挂载时，原有系统分区的完整性丝毫未损，玩需要 root 验证的游戏、运行对设备认证状态有要求的应用甚至进行需要验证系统完整性的 OTA 更新&lt;strong&gt;都没有任何问题&lt;/strong&gt;。&lt;/p&gt;&lt;figure tabindex=&quot;0&quot; draggable=&quot;false&quot; class=&quot;ss-img-wrapper&quot; contenteditable=&quot;false&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2019/02/25/f9ba127eb6c341faadf8fbb3df725572.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1/format/webp&quot; alt=&quot;&quot; data-original=&quot;https://cdnfile.sspai.com/2019/02/25/f9ba127eb6c341faadf8fbb3df725572.jpeg?imageView2/2/format/webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;figcaption class=&quot;ss-image-caption&quot;&gt;可通过 SafetyNet 认证并有针对性地隐藏 root&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;因此严格来说 Magisk 可以被看作是一种文件系统，这种文件系统通过巧妙的实现方式避开了对系统文件的直接修改，从稳定性上来看要优于以往任何一种系统框架，这也是当前它在玩机社区广受认可和好评的原因所在。&lt;/p&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2 id=&quot;ss-H2-1551071255040&quot;&gt;&lt;b&gt;它的魔力不止于 root&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;很多人对 Magisk 的初步认识可能是 root ——在&amp;nbsp;&lt;a href=&quot;https://sspai.com/post/27521&quot; target=&quot;_blank&quot; class=&quot;insert-link&quot;&gt;SuperSU&lt;/a&gt;&amp;nbsp;销声匿迹之后，它自然而然就成为了当前 Android 社区用来获取 root 权限的主流方式。&lt;/p&gt;&lt;p&gt;不过 Magisk 特殊的运作机制还赋予了它相较于 Android 平台其他定制工具而言独一无二的特质——&lt;strong&gt;systemless&lt;/strong&gt;。这种 systemless 特质让 Magisk 拥有了获取 root 权限之外的诸多优势：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;一方面，得益于独特的挂载机制，使用 Magisk 时我们可以有针对性地隐藏 root，甚至暂时隐藏 Magisk 本身&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;如此一来，不仅「root 模式下使用特定应用」成为了可能，就连无缝 OTA 更新这种「魔改党」们想都不敢想的事也变得不再遥远。在 Magisk Manager 应用的设置中，我们甚至还可以用随机包名对 Magisk 进行重新安装，让它从其他应用的眼皮底下彻底消失——多么具有魔法特质的高明手段！&lt;/p&gt;&lt;p&gt;
        &lt;img src=&quot;https://cdnfile.sspai.com/2019/01/21/eb3e071124501d6c8fcd7a2aa7107693.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1/format/webp&quot; data-original=&quot;https://cdnfile.sspai.com/2019/01/21/eb3e071124501d6c8fcd7a2aa7107693.jpeg?imageView2/2/format/webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
      &lt;/p&gt;&lt;p&gt;&lt;strong&gt;另一方面，挂载系统的存在，也让 Magisk 拥有了多样的模块化生态系统。&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;既然用了「开外挂」的实现方式，那不妨就多挂载一些额外的东西，字体、音效、驱动……甚至 Xposed 本身。Magisk 提供了一个独立于系统分区以外的、可以随时隐形的「沙盒」，那自然不能将其才华禁锢于 root 这一件事上。在 Magisk 的模块仓库里，我们可以找到各式各样的模块（modules）来满足自己的定制化需求，借助这些模块，我们在 root 之后能做的事情其实也还有很多。&lt;/p&gt;&lt;p&gt;在这里的讨论语境下，Magisk 如何给人们留下「框架」这一认知误区的原因就浮出水面了。&lt;strong&gt;只是功能方面好不逊色的 Magisk，稳定性和上手门槛对大部分用户来说都更加友好&lt;/strong&gt;。&lt;/p&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2 id=&quot;ss-H2-1551071306252&quot;&gt;&lt;b&gt;如何安装 Magisk&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;作为一套复杂的文件系统，Magisk 的安装步骤却是十分简单。&lt;/p&gt;&lt;p id=&quot;ss-P-1551071595960&quot;&gt;在电脑上配置好&amp;nbsp;&lt;a href=&quot;https://sspai.com/post/40471&quot; target=&quot;_blank&quot; style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;adb 环境&amp;nbsp;&lt;/a&gt;并解开 Bootloader 锁后，如果你的设备有来自&amp;nbsp;&lt;a href=&quot;https://twrp.me/Devices/&quot; target=&quot;_blank&quot; style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;TWRP&lt;/a&gt;&amp;nbsp;的官方支持，只需在打开 USB 调试后将手机与电脑相连，然后&lt;span style=&quot;font-family: &amp;quot;PingFang SC&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 16px;&quot;&gt;打开电脑端的命令行窗口：&lt;/span&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;span style=&quot;font-family: &amp;quot;PingFang SC&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 16px;&quot;&gt;执行&amp;nbsp;&lt;/span&gt;&lt;code style=&quot;font-style: inherit; font-variant-ligatures: inherit; font-variant-caps: inherit;&quot;&gt;adb reboot bootloader&lt;/code&gt;&lt;span style=&quot;font-family: &amp;quot;PingFang SC&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 16px;&quot;&gt;&amp;nbsp;进入 Bootloader 界面&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-family: &amp;quot;PingFang SC&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 16px;&quot;&gt;执行&amp;nbsp;&lt;/span&gt;&lt;code style=&quot;font-style: inherit; font-variant-ligatures: inherit; font-variant-caps: inherit;&quot;&gt;fastboot boot TWRP.img&lt;/code&gt;&lt;span style=&quot;font-family: &amp;quot;PingFang SC&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 16px;&quot;&gt;&amp;nbsp;进入临时 TWRP&lt;br&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-family: &amp;quot;PingFang SC&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 16px;&quot;&gt;在 TWRP 中刷入你下载的 Magisk 安装包&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;没有官方 TWRP 支持的设备安装 Magisk 的步骤要稍微复杂一些：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;span style=&quot;font-family: &amp;quot;PingFang SC&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 16px;&quot;&gt;从你的刷机包中提取当前固件的 &lt;b&gt;boot.img&lt;/b&gt; 文件，将它传入到安装了 Magisk Manager 的手机中&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-family: &amp;quot;PingFang SC&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 16px;&quot;&gt;进入 Magisk Manager —— 安装（install）—— install —— 修补 boot 镜像文件&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-family: &amp;quot;PingFang SC&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 16px;&quot;&gt;然后选择传入的 boot.img 文件进行生成，并将生成后的 Patchedboot.img （姑且这么命名） 传输到电脑上。&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;figure tabindex=&quot;0&quot; draggable=&quot;false&quot; class=&quot;ss-img-wrapper custom-width&quot; contenteditable=&quot;false&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2019/02/25/d6c6262e70528a1126015ce8e993c26c.gif&quot; alt=&quot;&quot; width=&quot;400&quot; data-original=&quot;https://cdnfile.sspai.com/2019/02/25/d6c6262e70528a1126015ce8e993c26c.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;figcaption class=&quot;ss-image-caption&quot;&gt;修补 boot 镜像文件&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;p&gt;随后我们使用 Magisk 应用对 boot.img 进行重新打包：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;打开命令行窗口&lt;/li&gt;&lt;li&gt;执行&amp;nbsp;&lt;code&gt;adb reboot bootloader&lt;/code&gt;&amp;nbsp;进入 Bootloader 界面&lt;/li&gt;&lt;li&gt;执行&amp;nbsp;&lt;code&gt;fastboot boot Patchedboot.img&lt;/code&gt;&amp;nbsp;来加载生成后的 boot 分区文件获取&lt;b&gt;临时 root&lt;/b&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;此时进入系统，你会发现你已经成功安装了 Magisk（如果显示没有安装则为获取失败，请检查操作过程重新尝试），但这还不够，我们还得进入 Magisk Manager，选择安装（install）——install——Direct Install（直接安装）才能将临时 root 转换为永久 root。&lt;/p&gt;&lt;figure tabindex=&quot;0&quot; draggable=&quot;false&quot; class=&quot;ss-img-wrapper custom-width&quot; contenteditable=&quot;false&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2019/02/25/410506b237682cbcde5545bc4d313bd4.gif&quot; alt=&quot;&quot; width=&quot;400&quot; data-original=&quot;https://cdnfile.sspai.com/2019/02/25/410506b237682cbcde5545bc4d313bd4.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;figcaption class=&quot;ss-image-caption&quot;&gt;别忘了进行二次安装&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href=&quot;https://topjohnwu.github.io/Magisk/install.html#samsung-system-as-root&quot; target=&quot;_blank&quot; class=&quot;insert-link&quot; style=&quot;font-family: &amp;quot;PingFang SC&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 16px; font-style: inherit; font-variant-ligatures: inherit; font-variant-caps: inherit;&quot;&gt;三星&lt;/a&gt;、&lt;a href=&quot;https://topjohnwu.github.io/Magisk/install.html#huawei&quot; target=&quot;_blank&quot; class=&quot;insert-link&quot;&gt;华为&lt;/a&gt;等特殊机型的 Magisk 安装方法参见 Magisk 官方帮助文档。&lt;/p&gt;&lt;p&gt;安装完 Magisk 后，我们就可以通过 TWRP 或者 Magisk Manager 刷入获取到的模块了。模块的获取方式可以是 Magisk Manager 自带的模块仓库，也可以是其他第三方论坛（如酷安、XDA 等）。&lt;br&gt;&lt;/p&gt;&lt;p&gt;卸载 Magisk 最为彻底的方式就是在 Magisk Manager 中点击「卸载」、「完全卸载」，应用会自动下载刷完 uninstall.zip 卸载包、自动卸载它自己、自动重启。如果你无法进入系统，在 TWRP 中手动刷入 uninstall.zip 卸载包即可。&lt;/p&gt;&lt;p&gt;&lt;span&gt;至于哪些模块值得刷，就是完全看个人需求了。我们会在后续文章为大家推荐一些基础的必备模块，也欢迎 Magisk 的老玩家们向我们投稿分享。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文由 @&lt;/span&gt;&lt;a href=&quot;https://sspai.com/u/clyde/updates&quot; target=&quot;_blank&quot; class=&quot;insert-link&quot;&gt;Clyde&lt;/a&gt;&lt;span&gt;&amp;nbsp;和 @&lt;/span&gt;&lt;a href=&quot;https://sspai.com/u/LuZhNan/updates&quot; target=&quot;_blank&quot; class=&quot;insert-link&quot;&gt;路中南&lt;/a&gt;&lt;span&gt;&amp;nbsp;联合撰写。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&amp;gt; 下载少数派&amp;nbsp;&lt;a href=&quot;https://sspai.com/page/client&quot;&gt;&lt;u&gt;客户端&lt;/u&gt;&lt;/a&gt;、关注&amp;nbsp;&lt;a href=&quot;http://sspai.com/s/KEPQ&quot;&gt;&lt;u&gt;少数派公众号&lt;/u&gt;&lt;/a&gt;&amp;nbsp;，发现更多 Android 玩机技巧 😃&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&amp;gt; 特惠、好用的硬件产品，尽在&amp;nbsp;&lt;a href=&quot;https://shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc&quot;&gt;&lt;u&gt;少数派sspai官方店铺&lt;/u&gt;&lt;/a&gt;&amp;nbsp;🛒&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;</description><link>https://sspai.com/post/53043</link><guid isPermaLink="false">https://sspai.com/post/53043</guid><pubDate>Mon, 25 Feb 2019 01:26:38 GMT</pubDate><author>Android 派小队</author></item></channel></rss>