<?xml version="1.0" encoding="UTF-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>USENIX ;login:</title><link>https://www.usenix.org/publications/loginonline</link><atom:link href="http://rsshub.speednet.icu/usenix/loginonline" rel="self" type="application/rss+xml"></atom:link><description>An open access publication driven by the USENIX community - Powered by RSSHub</description><generator>RSSHub</generator><webMaster>contact@rsshub.app (RSSHub)</webMaster><language>en</language><lastBuildDate>Wed, 19 Mar 2025 23:14:11 GMT</lastBuildDate><ttl>5</ttl><item><title>Codon: Python Compiler Update</title><description>&lt;div class=&quot;field field-name-field-lv2-publication-date field-type-datetime field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;date-display-single&quot;&gt;March 10, 2025&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-article-type field-type-taxonomy-term-reference field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Musings&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-label-inline clearfix field-type-text-long field-pseudo-field field-pseudo-field--author-list&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Authors:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/codon-python-compiler-update#Rik%20Farrow&quot; title=&quot;Rik Farrow&quot;&gt;Rik Farrow&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-shepherds field-type-user-reference field-label-inline clearfix&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Article shepherded by:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;usenix-user-reference-names&quot;&gt;Rik Farrow&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraphs-items paragraphs-items-field-lv2-body paragraphs-items-field-lv2-body-full paragraphs-items-full&quot;&gt;
  &lt;div class=&quot;field field-name-field-lv2-body field-type-paragraphs field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8823 paragraphs-first-text&quot; id=&quot;single-column-text-8823&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;I first wrote about Codon back in &lt;a href=&quot;https://www.usenix.org/publications/loginonline/codon-python-compiler&quot; target=&quot;_blank&quot; title=&quot;Codon Python Compiler&quot;&gt;April 2023 in ;login:&lt;/a&gt;.&amp;nbsp;At the time, I was excited about the attempt to create a compiler for Python that could run programs much faster than the Python interpreter. Recently, the founders of Codon sent me a pointer to a &lt;a href=&quot;https://exaloop.io/blog/codon-2025&quot; target=&quot;_blank&quot; title=&quot;Codon 2025 blog post&quot;&gt;blog post&lt;/a&gt;&amp;nbsp;with updates to their project that I found important, in some ways, exciting.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;When I tried Codon before, I struggled to get a simple script that I use to summarize ;login: downloads to compile. This time around, Codon had none of the problems I encountered the first time around. I attribute this to work done by Codon committers to improve the compiler&#39;s ability to convert Python scripts into the intermediate language they then present to an LLVM backend. Not that my script seemed to benefit from being compiled by Codon, taking about as long to run. But my script doesn&#39;t do much more than fill up an associative array,&amp;nbsp; sum the keys, then print the sorted totals as output.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;In their blog post, the authors provide charts showing the improvement of Codon over regular Python when running the &lt;a href=&quot;https://github.com/spcl/npbench&quot; target=&quot;_blank&quot; title=&quot;NPBench on Github&quot;&gt;NPBench&lt;/a&gt;&amp;nbsp;NumPy benchmarks. The geometric mean of speedups is modest, 2.4x, but the maximum is crazy, at 900x. The reason for this is that the Codon team has ported NumPy, a Python library, directly into Codon.&lt;/p&gt;&lt;p&gt;&lt;span&gt;I assumed that the values shown in the chart were correct rather than trying to run the benchmarks myself. I learned a long time ago that attempting to duplicate someone else&#39;s benchmark results can be fool&#39;s errand: the people who created the hardware or software know much more about how to make it run fast. But I did want to try out a simple Python script that the blog&#39;s authors claimed could be speeded up 300x when using Codon-NumPy (in the Loops section of their blog):&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-code-excerpt paragraphs-item-code-excerpt paragraphs-item-full paragraphs-item-8824&quot; id=&quot;code-excerpt-8824&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-code-excerpt field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;import numpy as np&lt;br&gt;
import time&lt;/p&gt;
&lt;p&gt;a = np.empty((300, 300, 300), dtype=np.float32)&lt;br&gt;
t0 = time.time()&lt;/p&gt;
&lt;p&gt;for i in range(300):&lt;br&gt;
    for j in range(300):&lt;br&gt;
        for k in range(300):&lt;br&gt;
            a[i, j, k] = i + j + k&lt;/p&gt;
&lt;p&gt;t1 = time.time()&lt;br&gt;
print(a.mean())&lt;br&gt;
print(&#39;time:&#39;, t1 - t0)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-code-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;A simple, nested loop, using NumPy for creating the array object.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8825&quot; id=&quot;single-column-text-8825&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;When I first tried this on my modest Debian on x86 desktop, I didn&#39;t see much performance improvement.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-code-excerpt paragraphs-item-code-excerpt paragraphs-item-full paragraphs-item-8826&quot; id=&quot;code-excerpt-8826&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-code-excerpt field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;rik@nuke:~/C/Codon$ python3 loop.py&lt;br&gt;
448.50006&lt;br&gt;
time: 4.611926078796387&lt;br&gt;
rik@nuke:~/C/Codon$ codon build loop.py&lt;br&gt;
rik@nuke:~/C/Codon$ ./loop&lt;br&gt;
448.5&lt;br&gt;
time: 2.58449&lt;br&gt;
rik@nuke:~/C/Codon$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-code-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Using Codon seemed to cut execution time about in half...&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8827&quot; id=&quot;single-column-text-8827&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;I contacted Ariya Shajii, CEO of Exaloop, and he replied that I had forgotten to include the -release flag—something that&#39;s not mentioned in the blog post, so I really didn&#39;t forget about it. When I include -release, I do see a 115x improvement, and the size of the executable is much smaller. Apparently, without the -release flag, the regular NumPy library gets included instead of the Codon-NumPy, something I could guess because the size of the binary without -release is much larger and contains strings that appear to be hooks from Codon into NumPy.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-code-excerpt paragraphs-item-code-excerpt paragraphs-item-full paragraphs-item-8828&quot; id=&quot;code-excerpt-8828&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-code-excerpt field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;rik@nuke:~/C/Codon$ codon build -release loop.py&lt;br&gt;
rik@nuke:~/C/Codon$ ./loop&lt;br&gt;
448.5&lt;br&gt;
time: 0.0398803&lt;br&gt;
rik@nuke:~/C/Codon$ ls -l loop*&lt;br&gt;
-rwxrwxr-x 1 rik rik  16224 Mar  7 14:35 loop&lt;br&gt;
-rwxrwxr-x 1 rik rik 652688 Mar  5 18:07 loop-no&lt;br&gt;
-rw-rw-r-- 1 rik rik    267 Mar  5 18:06 loop.py&lt;br&gt;
rik@nuke:~/C/Codon$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-code-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Remembering to include the -release flag has dramatic results: 115x speedup and a much smaller binary (loop-no is the executable without using -release)&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8829&quot; id=&quot;single-column-text-8829&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;It&#39;s really important that you use -release when using Codon NumPy. I suggested that they make this the default.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;There&#39;s also support for using GPUs in Codon NumPy via decorators, as well as telling Codon how many threads you want to use in a loop.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8830&quot; id=&quot;single-column-text-8830&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Apache 2 License&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;That&#39;s two improvements, one in usability and another in performance that&#39;s a very big win for anyone using NumPy in Python scripts. As Python behaves like it is single-threaded because of the global interpreter lock (GIL), having Codon&#39;s ability to execute portions of loops in paralell is a big win, just as it is having compiled rather than interpreted code. Note that Codon does not currently run on Windows, just Linux and MacOS.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The other big news is that Exaloop, the company that is behind Codon, has changed their license to &lt;a href=&quot;https://opensource.org/license/apache-2-0&quot; target=&quot;_blank&quot; title=&quot;Apache 2 License&quot;&gt;Apache 2&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;one of the most liberal Open Source licenses. For example, commercial use, and derivations of Codon, are now permitted without licensing.&lt;/p&gt;&lt;p&gt;&lt;span&gt;The bottom line is simple: if you are using Python to process large amounts of data using NumPy, you really want to start using Codon. More trivial uses, like my own routine processing of weblogs, really don&#39;t benefit much from compiled Python. On the other hand, if you are constantly spinning up lamdas that run Python code, I imagine that starting up a compiled script will be much faster and certainly cheaper than invoking a Python interpreter and have it process a script for every lambda instance.&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</description><link>https://www.usenix.org/publications/loginonline/codon-python-compiler-update</link><guid isPermaLink="false">https://www.usenix.org/publications/loginonline/codon-python-compiler-update</guid><pubDate>Sun, 09 Mar 2025 16:00:00 GMT</pubDate><author>Rik Farrow</author></item><item><title>License to Observe: Why Observability Solutions Need Agents</title><description>&lt;div class=&quot;field field-name-field-lv2-publication-date field-type-datetime field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;date-display-single&quot;&gt;February 24, 2025&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-article-type field-type-taxonomy-term-reference field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Opinion&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-label-inline clearfix field-type-text-long field-pseudo-field field-pseudo-field--author-list&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Authors:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/license-observe#Dominik%20Suess&quot; title=&quot;Dominik Suess&quot;&gt;Dominik Suess&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-shepherds field-type-user-reference field-label-inline clearfix&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Article shepherded by:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;usenix-user-reference-names&quot;&gt;Laura Nolan&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraphs-items paragraphs-items-field-lv2-body paragraphs-items-field-lv2-body-full paragraphs-items-full&quot;&gt;
  &lt;div class=&quot;field field-name-field-lv2-body field-type-paragraphs field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8784 paragraphs-first-text&quot; id=&quot;single-column-text-8784&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;When architecting the flow of observability data such as Logs, Metrics, Traces or Profiles, you’ll most likely have seen most solutions ask you to deploy an agent or collector. Understandably, you might be hesitant to deploy yet another application just so you can get your data into the storage system of choice. In most cases, the target architecture looks something like this:&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8786&quot; id=&quot;article-image-8786&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/fig_1.png&quot; width=&quot;800&quot; height=&quot;119&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;The application sends telemetry data to a collector, which then sends it to storage.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8787&quot; id=&quot;single-column-text-8787&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;While this illustrates where this additional component comes into play, it fails to address why it is needed in the first place. Can&#39;t we just send data to the storage?&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8788&quot; id=&quot;single-column-text-8788&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Just send it!&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;Sending your application telemetry directly to the database is the simplest pattern. It gives developers the power to rapidly test out new configurations and SDKs but does not require additional infrastructure — what’s not to love?&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8789&quot; id=&quot;article-image-8789&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/fig_2.png&quot; width=&quot;800&quot; height=&quot;125&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;The application sends data to the Telemetry database directly.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8790&quot; id=&quot;single-column-text-8790&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;Well, there are a couple of things to consider. The first issue is vendor lock-in. Even though the &lt;a href=&quot;https://opentelemetry.io/&quot; target=&quot;_blank&quot;&gt;OpenTelemetry project&lt;/a&gt; is working on defining common API Specifications, protocols and tools, a plethora of competing protocols and SDKs still have valid use cases. With this approach, however, changing the database requires application developers to adapt every application to effectively communicate with the new backend. Reconfiguring the telemetry endpoints will require an application redeployment. Want to rotate credentials? That’s a restart as well. If the storage backend goes down, that’s another edge case for you to handle.&lt;/p&gt;&lt;p&gt;Another drawback is the limited enrichment capability. If you want your telemetry to contain information about where your application is running, you’ll need to implement this yourself. This either means adding redundant configuration fields or exposing potentially sensitive scheduling APIs to the application — a great way for an attacker to move around your system.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8791&quot; id=&quot;single-column-text-8791&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Let the storage pull telemetry&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;This approach is mostly based on Prometheus. If you’ve used Prometheus, you’ll know how it turns the data flow upside down and instead of sending your telemetry data to Prometheus, it will instead scrape metrics from your application. This allows for easy switching of the backend, as the application doesn’t need to know anything about the specifics. As the database needs to know where the application is running, this is also a good way to enrich metrics with information about the way the application is deployed.&amp;nbsp;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8792&quot; id=&quot;article-image-8792&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/fig_3.png&quot; width=&quot;800&quot; height=&quot;125&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;The database queries the application for telemetry data&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8793&quot; id=&quot;single-column-text-8793&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;Pulling telemetry is not a silver bullet though. Enrichment is usually limited to simple mapping of discovery values and, most importantly, this pattern is very tailored to metrics. Depending on the nature of the application, instances might be too short-lived, like Function-as-a-Service invocations or batch jobs, for the scraper to find them.&lt;/p&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8794&quot; id=&quot;single-column-text-8794&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;The best of both worlds&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;By adding a collector or agent in between the application and the storage, this component can then pull or receive data, enrich it and send it off to the database. It also completely decouples the application from the storage backend, allowing for seamless transition or reconfiguration without downtime. In some situations, such as with sampling of distributed traces, collectors are a requirement as no single application can make decisions without knowing about the rest of the application landscape.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8795&quot; id=&quot;article-image-8795&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/fig_4.png&quot; width=&quot;800&quot; height=&quot;138&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;The collector pulls and receives data from the application to send it to the database&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8796&quot; id=&quot;single-column-text-8796&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;This article focuses on distributions of the OpenTelemetry Collector. The upstream &lt;a href=&quot;https://github.com/open-telemetry/opentelemetry-collector&quot; target=&quot;_blank&quot;&gt;opentelemetry-collector&lt;/a&gt; is very minimal with only a small number of components, but it is designed to be extensible. This allows users and vendors to build their own versions with a specific set of components and configurations. While the feature sets can differ, the general principles covered in this article hold true for all variants.&amp;nbsp;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8797&quot; id=&quot;single-column-text-8797&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;What does a collector do?&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Collector activities can be summarized as Receive -&amp;gt; Process -&amp;gt; Export.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8798&quot; id=&quot;article-image-8798&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/fig_5.png&quot; width=&quot;800&quot; height=&quot;278&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Mapping of the data flow diagram to the telemetry pipeline&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8799&quot; id=&quot;single-column-text-8799&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;At the receiving end, the collector specifies on which endpoints to listen or which applications to scrape, combining the pull and push approach. Data is handed off to the processing stage, where it can be further refined, converted, or aggregated. After that, data is packaged and sent off using an exporter.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Taking a look at an example OpenTelemetry Collector configuration file, this structure is very explicit:&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-code-excerpt paragraphs-item-code-excerpt paragraphs-item-full paragraphs-item-8800&quot; id=&quot;code-excerpt-8800&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-code-excerpt field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;receivers:&lt;br&gt;
  otlp:&lt;br&gt;
protocols:&lt;br&gt;
  grpc:&lt;br&gt;
  http:&lt;br&gt;
processors:&lt;br&gt;
  batch:&lt;br&gt;
exporters:&lt;br&gt;
  otlp:&lt;br&gt;
endpoint: storage:4317&lt;br&gt;
service:&lt;br&gt;
  pipelines:&lt;br&gt;
traces:&lt;br&gt;
 receivers: [otlp]&lt;br&gt;
  processors: [batch]&lt;br&gt;
  exporters: [otlp]&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-code-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Example OpenTelemetry collector configuration file&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8801&quot; id=&quot;single-column-text-8801&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;Other software might be configured differently and provide more (or less) flexibility.&lt;/p&gt;&lt;h3&gt;&lt;span&gt;Receivers&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;At first glance, receivers look very uninteresting, as there isn’t much to consider when just configuring them to receive data. That’s not the only way to configure them, though. Many collectors can also extract data out of other systems. If you have been around the Prometheus ecosystem for some time, the concept of exporters might be familiar to you. They are small applications that talk to a system and export metrics in a way that’s understandable by Prometheus. The thing to note here is that oftentimes the collector supports getting this data directly. Taking a look at &lt;a href=&quot;https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver&quot; target=&quot;_blank&quot;&gt;opentelemetry-collector-contrib&lt;/a&gt; shows receivers for host metrics, Redis, GitHub, and more! There are also a variety of collectors supporting data gathering through eBPF, which is especially useful for applications you are unable to instrument yourself.&lt;/p&gt;&lt;h3&gt;&lt;span&gt;Processors&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;Once data has been received, the collector can then run various processors to enrich, filter, or manipulate the data. Common use cases include:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Adding/Removing/Editing attributes (e.g. this data point originates from node XYZ)&lt;/li&gt;&lt;li&gt;Redacting sensitive information from logs (e.g. replacing IP addresses in logs with a rough geographic area)&lt;/li&gt;&lt;li&gt;Generating metrics from traces or logs (e.g. log frequency to request rate)&amp;nbsp;&lt;/li&gt;&lt;li&gt;Sampling traces (e.g. only keep 10% of traces from successful requests)&lt;/li&gt;&lt;li&gt;Routing based on attributes (e.g. send data to different storages based on teams)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Routing to different exporters is a core method used to realize multi-tenancy. Depending on the emitting application, the data can be sent to different storage backends or in different locations.&lt;/p&gt;&lt;p&gt;Processors can also be used to improve performance and latency by batching writes and splitting the write path by separating the receiver from the exporter.&lt;/p&gt;&lt;h3&gt;&lt;span&gt;Exporters&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;Now that everything is processed, the data still needs to get to the backing storage somehow. As with receivers, many different solutions and protocols are supported. By adding authentication information at this layer, developers don’t need to concern themselves with properly authenticating as long as they send data to the collector. This is especially useful if you need to rotate credentials. Would you rather redeploy all applications, or just the collector? When evaluating new solutions, it is also possible to export the data to multiple locations simultaneously.&lt;/p&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8803&quot; id=&quot;single-column-text-8803&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;How to deploy a collector &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;With the functionality of collectors covered, it is time to look at how to deploy the collector. Depending on the data you wish to collect, your service architecture, and security requirements, different deployment methods may be more appropriate than others.&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;span&gt;Single instance collector&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8804&quot; id=&quot;article-image-8804&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/fig_6.png&quot; width=&quot;800&quot; height=&quot;113&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;The application sends telemetry data to a single collector instance.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8805&quot; id=&quot;single-column-text-8805&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Deploying the collector as a single instance service is the simplest approach. You could deploy one instance per team, namespace, cluster, or region depending on your scale and separation requirements. Many applications can send to the same collector with the same processing pipelines being applied to all of them. This allows for standardization very early on while still allowing for flexibility on the application developer side.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;Collector sidecar&lt;/span&gt;&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8806&quot; id=&quot;article-image-8806&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/fig_7.png&quot; width=&quot;800&quot; height=&quot;136&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;An additional collector, deployed alongside each application instance, is responsible for sending data.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8807&quot; id=&quot;single-column-text-8807&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Utilizing a single purpose collector with each application as a sidecar is common when dealing with legacy applications. For example, if the application writes logs to a specific file on disk, a collector sidecar running alongside the application can watch that file and send the logs using the OTLP format to another collector down the line. Another example would be an application that exposes metrics on an endpoint that should not be accessible outside the application context. With a collector in the same execution context, this endpoint can remain closed off to other systems while still allowing metrics to be extracted.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Another use case of the sidecar pattern would be as a simple way to scale up. When exceeding the limitations of a single collector, spawning a separate instance for each application can help alleviate resource pressure on a shared instance. These early layers can then do filtering and processing early on, reducing the system requirements for the next layer of collectors.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;When rolling out collector sidecars for all applications, you might want to look into something to manage your fleet of collectors to keep the configuration consistent.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;Node collector&lt;/span&gt;&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8817&quot; id=&quot;article-image-8817&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/fig_missing.png&quot; width=&quot;800&quot; height=&quot;245&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;todo&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8808&quot; id=&quot;single-column-text-8808&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;As with the sidecar pattern, deploying one collector per node can help with scalability. This is commonly used with logs. A single node collector scrapes all log files and sources on a node and sends the data off to the storage. This method of deploying can also come in handy when trying to minimize latency between the emitting application and the receiver, which can make a big difference in Function-as-a-Service environments.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Since the node collector is able to send data to different endpoints based on attributes, this approach can even be used when multiple teams share the same underlying node.&lt;/p&gt;&lt;h3&gt;&lt;span&gt;Scaling up&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/h3&gt;&lt;div&gt;&lt;div&gt;&lt;span&gt;In most cases, having a single replica of the collector is sufficient. In case you outgrow this, there are a few ways to scale the collector.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;h3&gt;&lt;span&gt;Push-based signals&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8809&quot; id=&quot;article-image-8809&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/fig_8.png&quot; width=&quot;800&quot; height=&quot;274&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;With equal load from each application, resource usage is roughly the same across all collectors.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8810&quot; id=&quot;single-column-text-8810&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;When utilizing push-based signals, the simplest approach to scaling is to load balance the requests made to the collector. Keep in mind, that this architecture is still not perfect, as distributing the load on the service layer can still lead to a single producer overloading a specific collector:&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8811&quot; id=&quot;article-image-8811&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/fig_9.png&quot; width=&quot;800&quot; height=&quot;274&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;A single application sending large amounts of data can overwhelm its backend while other backends are underutilized.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8812&quot; id=&quot;single-column-text-8812&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;The solution to this issue is to either deploy a gRPC aware load balancer or add another collector utilizing the loadbalancing exporter.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8813&quot; id=&quot;article-image-8813&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/fig_10.png&quot; width=&quot;800&quot; height=&quot;259&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;The requests are split evenly across all backends by the gRPC aware load balancer&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8814&quot; id=&quot;single-column-text-8814&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;h3&gt;&lt;span&gt;Pull-based signals&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;For pull-based signals, scaling needs to be done by splitting up the targets between the collectors. This applies to logs as well as traces. For logs, it is usually enough to deploy a single collector per node but utilizing the sidecar pattern is also a valid approach.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;When scaling up pull metrics, the collector instances need to be told which targets to scrape. In the Kubernetes ecosystem, the&lt;a href=&quot;https://github.com/open-telemetry/opentelemetry-operator/blob/main/cmd/otel-allocator/README.md&quot; target=&quot;_blank&quot;&gt; target allocator&lt;/a&gt; takes care of this. It’s an additional component that discovers endpoints and distributes them to a set of collectors.&lt;/p&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8815&quot; id=&quot;article-image-8815&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/fig_11.png&quot; width=&quot;800&quot; height=&quot;381&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;A pool of collectors is configured through the Target Allocator component, which dynamically discovers application endpoints&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8816&quot; id=&quot;single-column-text-8816&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Best Practices for implementing collectors&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;As you can see, there are many different ways to set up an effective telemetry pipeline. This flexibility comes at the expense of figuring out what you really want. To counteract this a bit, I’ll leave you with some recommendations to apply when designing your telemetry flow.&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;Separate telemetry types&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;Not all telemetry is created equally. An application might produce thousands of logs but only expose a few metrics. The same goes for traces. This also means that different signals scale differently. The good thing is you don’t have to decide on one deployment architecture for everything! A good starting point could be to have one collector per node taking care of logs, while deploying additional collectors per team or application taking care of traces and/or metrics.&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;Chain collectors&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;As you might have noticed, some patterns have multiple collectors chained one after another. This allows you to separate concerns between multiple layers of your stack, resulting in smaller and easier to digest configurations. This is especially useful if you need a centralized observability storage but are ingesting from multiple teams with different requirements. At each level, information can be added or removed.&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;Stay consistent&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;Yes, the collector supports many different protocols. This still doesn’t mean you should use all protocols available to you. By standardizing on a single protocol early, you remove the need for conversion and have a common terminology when talking about the data in flow. Ideally, you’ll only have to convert at the last step when sending the data off to your storage backend. Conversions work reasonably well but will introduce additional overhead and complexity since not every mapping is clean.&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;Instrument early&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;Think about observability from day one. It’s way easier to start building a well-instrumented application from scratch than grafting on libraries to an existing application. Obviously this is not applicable when tasked with modernizing an existing application, but by planning for observability from the beginning, you’ll help your future self during debugging.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;When starting out, focus on traces first. Especially with web applications, traces allow for a very detailed look into your application and can also be converted to logs or metrics down the line (at the storage layer or in a collector directly!).&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</description><link>https://www.usenix.org/publications/loginonline/license-observe</link><guid isPermaLink="false">https://www.usenix.org/publications/loginonline/license-observe</guid><pubDate>Sun, 23 Feb 2025 16:00:00 GMT</pubDate><author>Dominik Suess</author></item><item><title>NVLog: an Elegant Approach to Integrate NVM</title><description>&lt;div class=&quot;field field-name-field-lv2-publication-date field-type-datetime field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;date-display-single&quot;&gt;January 24, 2025&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-article-type field-type-taxonomy-term-reference field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Research&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-label-inline clearfix field-type-text-long field-pseudo-field field-pseudo-field--author-list&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Authors:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/nvlog-elegant-approach-integrate-nvm#Guoyu%20Wang&quot; title=&quot;Guoyu Wang&quot;&gt;Guoyu Wang&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/nvlog-elegant-approach-integrate-nvm#Juncheng%20Hu&quot; title=&quot;Juncheng Hu&quot;&gt;Juncheng Hu&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-shepherds field-type-user-reference field-label-inline clearfix&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Article shepherded by:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;usenix-user-reference-names&quot;&gt;Rik Farrow&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraphs-items paragraphs-items-field-lv2-body paragraphs-items-field-lv2-body-full paragraphs-items-full&quot;&gt;
  &lt;div class=&quot;field field-name-field-lv2-body field-type-paragraphs field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8721 paragraphs-first-text&quot; id=&quot;single-column-text-8721&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Block devices, including hard disk drives (HDDs) and solid-state drives (SSDs), have become the absolute dominant form of external storage. From hardware interfaces to system software stacks to user applications, everything is already well-established on block devices. Therefore, when non-volatile memory (NVM) emerged, its faster access speed and byte-level access granularity posed significant challenges for system design—everything seemed to need a complete redesign to accommodate these new features. But is redesigning everything really the only solution? Unlike most previous works based on NVM, we show [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/nvlog-elegant-approach-integrate-nvm#reference-7&quot;&gt;7&lt;/a&gt;] how to integrate NVM seamlessly and painlessly into the existing block device software stack, providing transparent acceleration to user applications without requiring any changes.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8722&quot; id=&quot;single-column-text-8722&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Storage Devices and File Systems&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;From punch cards to magnetic tapes and then to disks, external storage devices with persistence have continuously evolved toward miniaturization and higher speeds to meet the need for system state and data preservation in the event of power loss. Among these developments, the emergence of solid-state drives (SSDs) marks a groundbreaking milestone: by eliminating mechanical movement in storage devices, SSDs reduce access latency from the millisecond range to the microsecond range and significantly enhance random access performance.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Though storage devices have become faster and faster, accessing disks is still not as straightforward as accessing memory. Disks typically use larger read/write granularity (blocks, usually &amp;gt;= 512B) and have access latencies several orders of magnitude higher than that of DRAM. The development of file systems and associated infrastructure was aimed at addressing these challenges. Disk file systems are generally responsible for managing the layout of file data and metadata on the disk, while providing a certain level of crash consistency guarantees. In addition, systems implement caches (such as the file-backed page cache in Linux) in DRAM for disk files, significantly improving read and write efficiency.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Among the various system calls related to file systems, synchronous operations (such as sync, fsync, fdatasync, etc.) are particularly interesting. They emerged with the advent of DRAM file caches—while caching improves file system performance, it also means that writes may not immediately become persistent. To explicitly guarantee that written data has been persisted, users can invoke synchronous operations. This effectively issues a barrier that blocks the current process until the write is committed to disk. Of course, this also means that the cache is bypassed during the synchronous operation, and your process must endure the slow disk I/O. Synchronous operations are crucial for applications like databases that require consistency guarantees, and it is equally important for people like me who habitually save documents frequently.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8723&quot; id=&quot;single-column-text-8723&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Non-volatile Memory&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;As a new form of persistent storage, Non-Volatile Memory (NVM) offers nanosecond-level access latency and can be accessed at the byte granularity, much like DRAM. As a result, traditional storage software stacks designed for larger-granularity, slower devices seem ill-suited for NVM. This novel device has garnered significant attention: researchers have attempted to build new file systems and databases using NVM, or to extend memory space with it (since its single-chip capacity exceeds that of DRAM). For example, in the case of file systems, recent work on NVM largely seeks to bypass the DRAM cache and treat NVM as a directly accessible storage device (e.g., Ext4 DAX [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/nvlog-elegant-approach-integrate-nvm#reference-1&quot;&gt;1&lt;/a&gt;], NOVA [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/nvlog-elegant-approach-integrate-nvm#reference-6&quot;&gt;6&lt;/a&gt;], PMFS [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/nvlog-elegant-approach-integrate-nvm#reference-3&quot;&gt;3&lt;/a&gt;], etc.). By reducing the two-write operation to DRAM and NVM into a single write, these approaches lower the persistence latency of data. Such efforts have shown promising performance in certain workloads.&lt;/p&gt;&lt;p&gt;However, as we have observed, persistent memory has not seen widespread deployment, except in a few data centers, and Intel discontinued its Optane PMEM [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/nvlog-elegant-approach-integrate-nvm#reference-2&quot;&gt;2&lt;/a&gt;] a few years ago. Beyond commercial factors, we believe a key reason for the lack of large-scale success of persistent memory is that it has not been &quot;painlessly&quot; integrated into current systems. New applications designed for NVM often target two key characteristics: first, NVM&#39;s high-performance persistence capability, which has led to the development of NVM-based file systems (NVM FS) and databases (NVM DB); second, its large capacity and low cost-per-byte based on DIMM slots, which has inspired tiered memory research.&lt;/p&gt;&lt;p&gt;&lt;span&gt;For the first category of work, although NVM is fast, its performance is still several times lower than DRAM. As a result, while approaches like DAX FS optimize synchronous writes on NVM by bypassing DRAM, they significantly sacrifice the performance of asynchronous writes and reads. More importantly, the persistence process in almost all modern applications is optimized for asynchronous read/write operations, introducing synchronous operations only when consistency must be ensured. Therefore, the performance of NVM FS has not met expectations in most existing applications. For the second category of work, due to Intel&#39;s relatively high pricing for Optane, its cost advantage is not obvious, leading to its gradual replacement by memory expansion solutions based on RDMA or CXL.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Next, we will focus on discussing NVM&#39;s high-speed persistence capabilities.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8724&quot; id=&quot;single-column-text-8724&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;The Proper Way to Integrate NVM&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Although NVM offers relatively high persistence speeds, its performance is still lower than that of DRAM. Therefore, we believe that approaches like NOVA, which sacrifice conventional read/write performance to provide optimal synchronous write performance, are likely only suitable for a few specific use cases, such as write-heavy databases.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;At the same time, while NVM capacities typically range from several hundred GB to a few TB (e.g., with Optane), a single disk can easily offer tens of TB, and disk arrays can provide PB-level capacities at much lower cost-per-byte. Therefore, another issue with replacing disk file systems with NVM file systems is the reduction in available capacity, the significant increase in costs, and the overhead of migrating large amounts of existing data to a new file system.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;We conducted a performance analysis comparing current disk file systems and NVM file systems. The results in Figure 1 show that when data access is accelerated by DRAM (cache hit), disk file systems outperform NVM file systems. Generally, after an application has been running for a while, the cache hit rate tends to be high. As a result, the advantages of the NVM file system are mostly limited to synchronous write operations.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8725&quot; id=&quot;article-image-8725&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/plot0.png&quot; width=&quot;1440&quot; height=&quot;657&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 1. The throughput on different file systems and different storage devices, tested with FIO. C and H suffixes indicate that the page cache is cold (cache miss) or warm (cache hit). S means sync writes. Reads are not affected by sync.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8726&quot; id=&quot;single-column-text-8726&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Although synchronous write performance is crucial for applications like databases, asynchronous writes and reads often play a more significant role in practical use cases. Considering that disks, DRAM, and the current storage software stacks built on them still offer broad advantages in many tasks, we believe that retaining the existing mature disk file systems and leveraging NVM to transparently accelerate their synchronous writes may be the best way to seamlessly and painlessly integrate NVM into current systems.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Using NVM to accelerate disk file systems is not without precedent: SPFS [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/nvlog-elegant-approach-integrate-nvm#reference-5&quot;&gt;5&lt;/a&gt;] stacks a new NVM file system on top of a disk file system and predicts synchronous requests to transfer potentially synchronized data to NVM. P2CACHE [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/nvlog-elegant-approach-integrate-nvm#reference-4&quot;&gt;4&lt;/a&gt;] provides a strongly consistent file cache by writing all data simultaneously to both DRAM and NVM, thereby eliminating disk I/O for synchronous requests. However, the performance of these approaches may not fully meet expectations.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;span&gt;SPFS optimizes synchronous writes based on predicting consecutive synchronous requests, which makes it difficult to provide effective acceleration when faced with infrequent and irregular synchronous requests common in many applications. Furthermore, once synchronous writes are offloaded to NVM, the upper-level NVM file system takes over subsequent reads and writes for this data, meaning that the performance of subsequent asynchronous reads and writes will be slower than the performance provided by the DRAM cache in the original disk file system.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;P2CACHE retains the fast path for reading data from DRAM; however, it writes all data, whether synchronous or not, to both DRAM and NVM simultaneously. Since NVM write performance is lower than DRAM, the system’s performance actually degrades for the majority of applications that primarily perform asynchronous writes.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Meanwhile, both SPFS and P2CACHE are implemented in a manner similar to independent file systems: they establish and manage indexes for data at runtime, and once data is persisted to the upper-level NVM, it no longer interacts with disk data and can only be migrated to the underlying disk file system periodically and at a coarse granularity. We believe these designs fail to leverage NVM to transparently and efficiently accelerate existing disk file systems. Instead, they are merely another attempt, like NOVA, that optimizes synchronous writes but may slow down other read/write requests.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8727&quot; id=&quot;single-column-text-8727&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;NVLog: An Attempt to Elegantly Accelerate Disk File Systems&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;We believe that simply taking over data from the disk is not a wise choice. Our goal is to precisely accelerate the synchronous write operations that slow down the file system, while maintaining the high performance provided by the DRAM cache for other operations. At the same time, this acceleration should be transparent: it should not require changes to user programs or to the time-tested, robust disk file systems. However, this is not an easy task. After analyzing SPFS and P2CACHE, we have drawn the following two insights:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;First, the DRAM cache is sufficient and efficient to serve applications. Therefore, when persisting synchronized data to NVM, the focus should be on the efficiency of &lt;/span&gt;&lt;span&gt;recording&lt;/span&gt;&lt;span&gt;, rather than &lt;/span&gt;&lt;span&gt;data retrieval&lt;/span&gt;&lt;span&gt;. Due to neglecting this, both P2CACHE and SPFS have to create an index for data on NVM for subsequent reads, and have difficulty reducing the space usage on NVM.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Second, establishing a well-defined write timing between NVM and disk is crucial for ensuring crash consistency while minimizing the amount of data written to NVM. Due to neglecting this, SPFS and P2CACHE are forced to also redirect async writes to NVM when absorbing sync writes, in order to avoid inconsistencies between the data from sync writes (to NVM) and async writes (to disk).&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Drawing inspiration from database design, we believe that using NVM as a write-ahead log (WAL) for disk file systems is a more efficient solution. As shown in Figure 2, we designed NVLog to intercept (and only intercept) synchronous calls &lt;/span&gt;&lt;span&gt;before&lt;/span&gt;&lt;span&gt; the file system and write the synchronous data to NVM. Then, we transform synchronous write requests into asynchronous ones. This way, any (cache hit) operations on the file system no longer need to wait for disk I/O: for reads and asynchronous writes, data can still be provided by the DRAM cache; for synchronous writes, data is written to both DRAM and NVM in the foreground, while disk writes are offloaded to the background.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8728&quot; id=&quot;article-image-8728&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/arch_new-di__1_ye_new.png&quot; width=&quot;862&quot; height=&quot;502&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 2. NVLog Architecture. Figure shows the position and data flow of NVLog inside the Linux kernel.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8729&quot; id=&quot;single-column-text-8729&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;We focus on ensuring the &lt;/span&gt;&lt;span&gt;post-crash &lt;/span&gt;&lt;span&gt;persistence of data for synchronous operations. As such, we record synchronous &lt;/span&gt;&lt;span&gt;events&lt;/span&gt;&lt;span&gt; in NVM in an append-only manner &lt;/span&gt;&lt;span&gt;without indexing&lt;/span&gt;&lt;span&gt; the data. After a crash, we simply replay the recorded events to restore the data that was supposed to be on disk. This is a key distinction between NVLog and SPFS/P2CACHE: NVLog serves as a lightweight WAL for file system synchronous writes, while SPFS and P2CACHE are inherently heavier file systems. By getting rid of indexing, NVLog provides a higher performance; by only logging synchronous data and allowing us to reclaim expired records on NVM after data is written to disk, NVLog requires less NVM space compared to other approaches.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;While the write-ahead log concept may seem simple, a key difference from database WALs is that NVLog must account for the timing relationship between NVM and underlying disk writes. For databases, it is possible to strictly enforce writing to the WAL before writing to the data area. However, since NVLog is designed as a transparent &quot;intermediate layer&quot; to both the user and the file system, we cannot modify the user interface or the mechanisms for writing back to the disk. Furthermore, because user asynchronous writes, synchronous writes, and DRAM cache flushes to the disk may occur in any order, the data on the disk may be messed up if we simply replay all the NVM records to the disk. We hence provide a mechanism to ensure that data recovered from NVM is always more recent than the disk version, preventing the risk of older data overwriting newer data.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;In addition to the designs mentioned above, we also explore efficient log structure and fine-grained synchronous writes in NVLog. We encourage interested readers to refer to our &lt;a href=&quot;https://www.usenix.org/conference/fast25&quot; target=&quot;_blank&quot; title=&quot;FAST-25 conference site&quot;&gt;FAST &#39;25&lt;/a&gt; paper [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/nvlog-elegant-approach-integrate-nvm#reference-7&quot;&gt;7&lt;/a&gt;] for more details.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8730&quot; id=&quot;single-column-text-8730&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Evaluation&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;We implemented a prototype of NVLog and conducted a series of experiments based on it. The complete experimental results can be found in our FAST &#39;25 paper; here, we present two representative experiments.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;First, to demonstrate the applicability of NVLog across a wide range of application scenarios, we designed experiments with varying read-to-write ratios and synchronous-to-asynchronous write ratios under different file systems. We compared the performance of NOVA, SPFS, and NVLog (AS). Note that NVLog (AS) refers to using NVLog but forces all writes to be synchronous, which somewhat represents the performance of P2CACHE.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The results are shown in Figure 3. Thanks to our DRAM-NVM cooperative design, NVLog outperforms NVM FS, disk FS, and NVM-based FS accelerators in most cases. In non-sync workloads, by leveraging the DRAM page cache, NVLog performs similarly to its baseline disk FS, achieving speeds up to 3.72x, 2.93x, and 1.24x faster than NOVA, NVLog (AS), and SPFS, respectively. In partial-sync workloads, NVLog outperforms the disk FS, NOVA, and SPFS by up to 4.44x, 2.62x, and 324.11x, respectively. The results show that NVLog consistently maintains a good balance between DRAM and NVM access across various sync levels. Additionally, it is evident that NVLog is the only solution that does not introduce any slowdown to the legacy disk FS.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8731&quot; id=&quot;article-image-8731&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/perf1.png&quot; width=&quot;1440&quot; height=&quot;519&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 3. Read, write, and sync mixed tests under 4KB random access. AS: all writes are forced to be synchronized.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8732&quot; id=&quot;single-column-text-8732&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;Next, we tested NVLog&#39;s space usage with an 80GB fully synchronous write workload, and the results are shown in Figure 4. With garbage collection enabled, NVLog&#39;s space usage never exceeded 22GB and gradually dropped to near zero after the experiment finished. This temporary and relatively small space footprint is a result of our log-based design. In contrast, using NVM in the form of a file system would require NVM space equal to the entire volume of written data, i.e., 80GB. Our lightweight design demonstrates better suitability, especially in the context of Optane&#39;s discontinuation and the potential capacity limitations of other alternative products.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8733&quot; id=&quot;article-image-8733&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/gc-compact-all.png&quot; width=&quot;1440&quot; height=&quot;710&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 4. NVLog capacity usage and GC performance. The figure shows the NVM usage and the throughput of NVLog with or without garbage collection.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8734&quot; id=&quot;single-column-text-8734&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Conclusion and Discussion&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;In this paper, we propose NVLog, which uses NVM as a write-ahead log (WAL) for file system synchronous operations, enabling transparent acceleration of synchronous writes while preserving the benefits of DRAM caching for asynchronous writes and reads. Thanks to our efficient design, NVLog achieves higher performance and lower space usage across a broader range of application scenarios compared to previous work. More importantly, unlike prior solutions, NVLog does not introduce any slowdown to existing applications in any scenario. We believe this &quot;painless&quot; use of NVM is more likely to be widely accepted by users of legacy storage systems.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;fieldset class=&quot;group-appendix field-group-fieldset form-wrapper&quot;&gt;&lt;legend&gt;&lt;span class=&quot;fieldset-legend&quot;&gt;Appendix&lt;/span&gt;&lt;/legend&gt;&lt;div class=&quot;fieldset-wrapper&quot;&gt;&lt;div class=&quot;field field-name-field-lvl2-appendix-refs field-type-text field-label-above&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;References:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-1&quot;&gt;&lt;/a&gt;&lt;p&gt;[1] DAX. &lt;a href=&quot;https://www.kernel.org/doc/Documentation/filesystems/dax.txt&quot;&gt;https://www.kernel.org/doc/Documentation/filesystems/dax.txt&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-2&quot;&gt;&lt;/a&gt;&lt;p&gt;[2] Intel® Optane™ Persistent Memory. &lt;a href=&quot;https://www.intel.com/content/www/us/en/products/docs/memory-storage/optane-persistent-memory/overview.html&quot;&gt;https://www.intel.com/content/www/us/en/products/docs/memory-storage/opt...&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-3&quot;&gt;&lt;/a&gt;&lt;p&gt;[3] Subramanya R. Dulloor, Sanjay Kumar, Anil Keshava-murthy, Philip Lantz, Dheeraj Reddy, Rajesh Sankaran,and Jeff Jackson. System software for persistent memory. In Proceedings of the Ninth European Conference on Computer Systems - EuroSys ’14, pages 1–15, Amsterdam, The Netherlands, 2014. ACM Press.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-4&quot;&gt;&lt;/a&gt;&lt;p&gt;[4] Zhen Lin, Lingfeng Xiang, Jia Rao, and Hui Lu. P2CACHE: Exploring Tiered Memory for In-Kernel File Systems Caching. In 2023 USENIX Annual Technical Conference (USENIX ATC 23), pages 801–815, 2023.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-5&quot;&gt;&lt;/a&gt;&lt;p&gt;[5] Hobin Woo, Daegyu Han, Seungjoon Ha, Sam H. Noh, and Beomseok Nam. On Stacking a Persistent Memory File System on Legacy File Systems. In 21st USENIX Conference on File and Storage Technologies (FAST 23), pages 281–296, 2023.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-6&quot;&gt;&lt;/a&gt;&lt;p&gt;[6] Jian Xu and Steven Swanson. NOVA: a log-structured file system for hybrid volatile/non-volatile main memories. In Proceedings of the 14th Usenix Conference on File and Storage Technologies, FAST’16, pages 323–338, USA, February 2016. USENIX Association.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-7&quot;&gt;&lt;/a&gt;&lt;p&gt;[7] Guoyu Wang, Xilong Che, Haoyang Wei, Shuo Chen, Puyi He, and Juncheng Hu. Boosting File Systems Elegantly: A Transparent NVM Write-ahead Log for Disk File Systems. In 23rd USENIX Conference on File and Storage Technologies (FAST 25), February 2025. USENIX Association. &lt;a href=&quot;https://www.usenix.org/conference/fast25/presentation/wang&quot;&gt;https://www.usenix.org/conference/fast25/presentation/wang&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/fieldset&gt;
</description><link>https://www.usenix.org/publications/loginonline/nvlog-elegant-approach-integrate-nvm</link><guid isPermaLink="false">https://www.usenix.org/publications/loginonline/nvlog-elegant-approach-integrate-nvm</guid><pubDate>Thu, 23 Jan 2025 16:00:00 GMT</pubDate><author>Guoyu Wang, Juncheng Hu</author></item><item><title>Quantum Computing Notes: Why Is It Always Ten Years Away?</title><description>&lt;div class=&quot;field field-name-field-lv2-publication-date field-type-datetime field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;date-display-single&quot;&gt;January 13, 2025&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-article-type field-type-taxonomy-term-reference field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Research&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-label-inline clearfix field-type-text-long field-pseudo-field field-pseudo-field--author-list&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Authors:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#Konstantin%20V.%20Shvachko&quot; title=&quot;Konstantin V. Shvachko&quot;&gt;Konstantin V. Shvachko&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-shepherds field-type-user-reference field-label-inline clearfix&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Article shepherded by:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;usenix-user-reference-names&quot;&gt;Rik Farrow&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraphs-items paragraphs-items-field-lv2-body paragraphs-items-field-lv2-body-full paragraphs-items-full&quot;&gt;
  &lt;div class=&quot;field field-name-field-lv2-body field-type-paragraphs field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8687 paragraphs-first-text&quot; id=&quot;single-column-text-8687&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Busy, busy, busy. ... It’s what we Bokononists say, ... &lt;br&gt;when we feel that a lot of mysterious things are going on.&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Kurt Vonnegut&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt; &lt;/em&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8688&quot; id=&quot;single-column-text-8688&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Introduction&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Why do they always say that Quantum Computing is ten years away? I first heard this prognosis in the late nineties when the fundamental Shor’s algorithm was developed, and the first physical qubit was tested. A lot has changed in the field since then, but the ten-year horizon for practical Quantum Computing keeps sliding with its evolution.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Quantum computers promise execution of tasks beyond the capability of classical computers. Contemporary classical computer chips have already reached levels of density where quantum effects occur. Quantum computers should be a natural next step in miniaturization of chips where quantum effects are embraced rather than prevented.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The goal of this article is to understand why Quantum Computing is hard, what are its potential advantages, challenges, and boundaries. It reviews quantum computing via a prism of computer science and software engineering. In the end, as with traditional programming software engineers do not think about physical representation of bits, properties of transistors and integrated circuits, or Boolean gates. So as with Quantum Computing programmers should have a high enough level of abstraction to focus on computation rather than effects of quantum physics, principles of qubit implementation or even quantum gates.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8693&quot; id=&quot;single-column-text-8693&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Historical Notes&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;Quantum computing started in the early 1980s with the founding ideas of&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;p&gt;Paul Benioff, who in 1980 constructed a quantum mechanical model describing the computational process of Turing machines, which set the theoretical foundation of Quantum Computing [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-1&quot; title=&quot;P. Benioff, “The Computer as a Physical System,” J. Stat. Phys. 22, 563–591, 1980&quot;&gt;1&lt;/a&gt;],[&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-2&quot; title=&quot;P. Benioff, “Quantum mechanical Hamiltonian models of Turing machines,” J. Stat. Phys. 29, 515–546, 1982&quot;&gt;2&lt;/a&gt;].&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;Yuri Manin who recognized in 1980 that quantum states possess much larger capacity than classical and therefore a single quantum automaton can represent states of multiple classical automata simultaneously [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-3&quot; title=&quot;Yu. I. Manin, “Computable and Uncomputable,” Sovetskoye Radio, Moscow, 1980&quot;&gt;3&lt;/a&gt;].&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;Richard Feynman who in his influential keynote lecture “Simulating Physics with Computers” [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-4&quot; title=&quot;R. P. Feynman, “Simulating physics with computers,” Int. J. Theor. Phys. 21, 467–488, 1982&quot;&gt;4&lt;/a&gt;] in May 1981 stated that classic computers are inadequate to describe physical systems governed by the laws of quantum mechanics and that an exponentially larger computer is needed for the task – a quantum computer. He outlined the basis of the Quantum Computational model.&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; &lt;p&gt;Notable achievements in Quantum Computing include:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;p&gt;Early results in quantum computational complexity. Deutsch-Jozsa algorithm (1992) showed that quantum algorithms can be exponentially faster than any classical algorithm [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-6&quot; title=&quot;D. Deutsch R. Josza, “Rapid solutions of problems by quantum computation,” Proc. Roy. Soc. London Se. A 439, 553–558, 1992&quot;&gt;6&lt;/a&gt;]. This was an important separation result, but is of little practical use since the problem it solves is specifically designed for the benefit of quantum computation.&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;In 1994 Peter Shor published an integer factorization algorithm [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-7&quot; title=&quot;P. W. Shor, “Algorithms for quantum computation,” FOCS&#39;1994, 124-134, 1994&quot;&gt;7&lt;/a&gt;],[&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-8&quot; title=&quot;P. W. Shor, “Polynomial-Time Algorithms for Prime Factorization and Discrete Logarithms on a Quantum Computer,” SIAM J. Sci. Statist. Comput. 26, 1997&quot;&gt;8&lt;/a&gt;] known as Shor&#39;s algorithm. It showed that a quantum computer can find prime factors of an integer in polynomial-time. The practical importance of this algorithm is due to the fact that modern public-key cryptography heavily relies on the fact that the problem of integer factorization is exponentially hard, making decryption of a cipher without a private key impractical. Even though Shor&#39;s algorithm cannot be used today, since there aren&#39;t enough physical qubits manufactured so far, it possesses a real threat in the future due to the surveillance strategy known as Store-Now-Decrypt-Later. Shor&#39;s algorithm opened a new research branch of post-quantum cryptography, which designs alternative cryptographic schemes not relying on prime factorization.&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;Classic Fourier Transform is widely used in different areas of science. Don Coppersmith in 1994 developed Quantum Fourier Transform [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-10&quot; title=&quot;D. Coppersmith, “An approximate Fourier transform useful in quantum factoring,” IBM Research Report RC 19642, 1994&quot;&gt;10&lt;/a&gt;], which calculates Fourier transform of a quantum state in poly-logarithmic time – exponentially faster than classic algorithms.&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;Quantum error-correction was developed by Peter Shor in 1995 [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-9&quot; title=&quot;P. W. Shor, “Scheme for reducing decoherence in quantum computer memory,” Physics Review A 52 4, R2493–R2496, 1995&quot;&gt;9&lt;/a&gt;].&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;In 1995 Christopher Monroe and David Wineland following the Cirac-Zoller proposal built a physical system of two qubits implemented with trapped ions and demonstrated the operation of quantum logical gates on them including two-qubit CNOT gate [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-11&quot; title=&quot;C. Monroe, D. M. Meekhof, B. E. King, W. M. Itano, D. J. Wineland, “Demonstration of a Fundamental Quantum Logic Gate,” Phys. Rev. Lett. 75 25, 4714-4717, 1995&quot;&gt;11&lt;/a&gt;].&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;Lov Grover in 1996 developed a quantum algorithm known as Grover database search algorithm . This algorithm allows polynomial speedup of NP-complete problems. The speed up is not as drastic as Shor’s, but it has a wider application area.&lt;/p&gt; &lt;/li&gt;&lt;li&gt;First physical implementations of two quantum algorithms were demonstrated in 1998 on a 2-qubit nuclear magnetic resonance (NMR) quantum computer.&lt;/li&gt;&lt;li&gt;&lt;span&gt; &lt;/span&gt;Jonathan Jones and Michele Mosca implemented Deutsch&#39;s algorithm [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-13&quot; title=&quot;J A. Jones, M. Mosca, “Implementation of a quantum algorithm on a nuclear magnetic resonance quantum computer,” Chem. Phys. 109 5, 1648–1653, 1998&quot;&gt;13&lt;/a&gt;].&lt;/li&gt;&lt;li&gt;&lt;span&gt; &lt;/span&gt;Isaac Chuang, Neil Gershenfeld, and Mark Kubinec demonstrated Grover’s search algorithm [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-14&quot; title=&quot;I. L. Chuang, N. Gershenfeld, M. Kubinec, “Experimental Implementation of Fast Quantum Searching,” Phys. Rev. Lett. 80 15, 3408-3411, 1998&quot;&gt;14&lt;/a&gt;].&lt;/li&gt;&lt;li&gt;Michael Nielsen and Isaac Chuang published a prominent textbook (2000) on quantum computation and information [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-5&quot; title=&quot;M. A. Nielsen, I. L. Chuang, “Quantum Computation and Quantum Information,” Cambridge Univ. Press, Cambridge, 2000&quot;&gt;5&lt;/a&gt;].&lt;/li&gt;&lt;li&gt;&lt;p&gt;First experimental realization of Shor’s algorithm was done in 2001. Number 15 was factored on a 7-qubit NMR quantum computer [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-15&quot; title=&quot;L.M.K. Vandersypen, et al., “Experimental realization of Shor&#39;s quantum factoring algorithm using nuclear magnetic resonance,” Nature 414, 883–887, 2001&quot;&gt;15&lt;/a&gt;].&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;The Harrow–Hassidim–Lloyd algorithm or HHL algorithm (2009) is a quantum algorithm for numerically solving a system of linear equations – one of the key problems of linear algebra [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-16&quot; title=&quot;A. W. Harrow, A. Hassidim, S. Lloyd, “Quantum algorithm for linear systems of equations,” Phys. Rev. Lett. 103 15, 2009&quot;&gt;16&lt;/a&gt;]. Under specific restrictions the quantum algorithm solves the system in poly-log time – an exponential speedup over classic algorithms with the same restrictions. The HHL algorithm found applications in quantum machine learning [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-17&quot; title=&quot;S. Lloyd, et al., “Quantum algorithms for supervised and unsupervised machine learning,” arXiv, 2013&quot;&gt;17&lt;/a&gt;].&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8698&quot; id=&quot;single-column-text-8698&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Quantum Circuit Computational Model&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;In classical computation a bit represents a basic unit of information. A bit can be either 0 or 1. Quantum computers operate on &lt;/span&gt;&lt;em&gt;qubits&lt;/em&gt;&lt;span&gt; (quantum bits) &lt;/span&gt;&lt;span&gt;[&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-5&quot; title=&quot;M. A. Nielsen, I. L. Chuang, “Quantum Computation and Quantum Information,” Cambridge Univ. Press, Cambridge, 2000&quot;&gt;5&lt;/a&gt;]&lt;/span&gt;&lt;span&gt;,[&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-18&quot; title=&quot;R. Hundt, “Quantum Computing for Programmers,” Cambridge Univ. Press, Cambridge, 2022&quot;&gt;18&lt;/a&gt;].&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;Qubits&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;Qubit states are composed of two base logical states denoted |0⟩ and |1⟩. &lt;/span&gt;&lt;span&gt;A qubit state is a linear combination or a &lt;/span&gt;&lt;em&gt;superposition&lt;/em&gt;&lt;span&gt; of the base states: |ψ⟩ = α|0⟩ + β|1⟩, where α, β are complex numbers, called &lt;/span&gt;&lt;em&gt;amplitudes&lt;/em&gt;&lt;span&gt;, such that |α|&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; + |β|&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; = 1. Geometrically, quantum states are represented as points on the surface of a unit 3D sphere known as the &lt;em&gt;Bloch Sphere&lt;/em&gt; using spherical coordinates.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;A  qubit state can have infinitely many values compared to a binary  classical bit. But due to quantum mechanics principles one cannot  determine its quantum state at any given moment since measurement  destroys quantum state, which &lt;/span&gt;&lt;em&gt;collapses&lt;/em&gt;&lt;span&gt; into a base state |0⟩ or |1⟩ with probabilities &lt;/span&gt;&lt;span&gt;|α|&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; and &lt;/span&gt;&lt;span&gt;|β|&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;,  respectively. Note that measurement of a qubit state is probabilistic,  while for a classical bit you get the same value whenever you check it.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;For  a system with multiple qubits the number of base states increases  exponentially. For example, for a 2-qubit system there are 4 base states &lt;/span&gt;&lt;span&gt;|00⟩, |01⟩, |10⟩, |11⟩&lt;/span&gt;&lt;span&gt; and the system state is a superposition of the base states:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;|ψ⟩ = α&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;sub&gt;0&lt;/sub&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;|00⟩ + α&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;|01⟩ + α&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;|10⟩ + α&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;sub&gt;3&lt;/sub&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;|11⟩&lt;br&gt;Here the squared amplitudes &lt;/span&gt;&lt;span&gt;|α&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;sub&gt;x&lt;/sub&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; represent probabilities of the system to be in the respective states, and the sum of the probabilities equals to one:&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;|α&lt;sub&gt;0&lt;/sub&gt;|&lt;sup&gt;2&lt;/sup&gt; + |α&lt;sub&gt;1&lt;/sub&gt;|&lt;sup&gt;2&lt;/sup&gt; +  |α&lt;sub&gt;2&lt;/sub&gt;|&lt;sup&gt;2&lt;/sup&gt; +  |α&lt;sub&gt;3&lt;/sub&gt;|&lt;sup&gt;2&lt;/sup&gt; = 1&lt;/p&gt;&lt;p&gt;&lt;span&gt;In general, in a system of &lt;/span&gt;&lt;span&gt;n&lt;/span&gt;&lt;span&gt; qubits the number of amplitudes &lt;/span&gt;&lt;span&gt;{α&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;sub&gt;x&lt;/sub&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; describing the state is &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;sup&gt;n&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;. This number grows very fast. For&lt;/span&gt;&lt;span&gt; n=100&lt;/span&gt;&lt;span&gt; the number &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;sup&gt;100&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; of complex-number coefficients exceeds many times the size of today’s  Internet. Emulating a quantum computation with such a large amount of  data using classical computers would be infeasible.&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;Quantum Gates&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Even  though the qubit state cannot be known precisely, the state can be  modified using quantum operators. There are different ways of describing  quantum operations. The most traditional approach as of today uses &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;em&gt;quantum gates&lt;/em&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;.  This is analogous to classical logic gates such as NOT, AND, OR, which  can be combined to define an arbitrary Boolean function.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;As mentioned earlier quantum states can be viewed as points on a 3D unit sphere – the &lt;em&gt;Bloch Sphere&lt;/em&gt;.  Then 1-qubit gates represent different rotations on the sphere. For  example, X, Y, and Z gates known as Pauli gates define 180° rotations of  the state on the sphere around the corresponding axes. If the qubit  state is |ψ⟩ = α|0⟩ + β|1⟩, then&lt;br&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;X|ψ⟩ = β|0⟩ + α|1⟩&lt;br&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;Y|ψ⟩ = –iβ|0⟩ + iα|1⟩&lt;br&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;Z|ψ⟩ = α|0⟩ – β|1⟩&lt;br&gt;More complex rotations are presented by widely used Hadamard gate H and phase gate P:&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&lt;span&gt;H|ψ⟩ = (&lt;span&gt;&lt;span&gt;α + β&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)/&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;sup&gt;½&lt;/sup&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;|0⟩ + (&lt;span&gt;&lt;span&gt;α - β&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)/&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;sup&gt;½&lt;/sup&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;|1⟩&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;P|ψ⟩ = α|0⟩ + e&lt;/span&gt;&lt;/span&gt;&lt;sup&gt;&lt;span&gt;&lt;span&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/sup&gt;&lt;sup&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;φ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/sup&gt;&lt;span&gt;&lt;span&gt;β|1⟩, where &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;an angle φ &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;∈ &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;[0, 2π]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;An  example of a 2-qubit gate is the controlled-NOT or CNOT gate. It  transforms a 2-qubit state by swapping the last two coefficients. If&lt;br&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;|ψ⟩ = α|00⟩ + β|01⟩ + γ|10⟩ + δ|11⟩&lt;br&gt;then&lt;br&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;CNOT|ψ⟩ = α|00⟩ + β|01⟩ + δ|10⟩ + γ|11⟩&lt;/p&gt; &lt;p&gt;A  composition of quantum gates forms a quantum circuit, which is  represented as a directed acyclic graph. As traditional Boolean  circuits, quantum circuits define quantum computations.&lt;/p&gt; &lt;p&gt;Quantum  computing as quantum mechanics itself is alternatively expressed in the  linear algebra language of vectors, matrices and operations on them. In  linear algebra notation quantum states are described as vectors of  amplitudes&lt;br&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;|0⟩ = (1, 0)&lt;sup&gt;†&lt;/sup&gt;,&amp;nbsp;&amp;nbsp; |1⟩ = (0, 1)&lt;sup&gt;†&lt;/sup&gt;,&amp;nbsp;&amp;nbsp; α|0⟩ + β|1⟩ =&amp;nbsp; (α, β)&lt;sup&gt;†&lt;/sup&gt;&lt;br&gt;and  quantum operations are represented as unitary matrices. The unitary  constraint guarantees that quantum operators produce valid quantum  states.&lt;/p&gt;&lt;h2&gt;Universal Quantum Gates&lt;/h2&gt; &lt;p&gt;For classic logic gates one can select a finite set of gates called &lt;span&gt;universal&lt;/span&gt;,  e.g., {AND, OR, NOT}, composition of which allows defining any Boolean  function. The number of quantum gates is infinite, in fact uncountable.  In the quantum case a finite set of quantum gates is &lt;em&gt;universal&lt;/em&gt; if any quantum operation can be approximated with arbitrary accuracy by a  quantum circuit composed of the gates from this set. For example, the  set of 1-qubit gates listed earlier plus the CNOT gate is universal.&lt;/p&gt;&lt;h2&gt;Entangled Qubits&lt;/h2&gt; &lt;p&gt;Entanglement  is an intrinsic phenomenon of quantum physics and one of the key  features of quantum computing. In quantum computing qubits are &lt;em&gt;entangled&lt;/em&gt; if their states are correlated. That is, the states depend on each  other so that they cannot be changed independently. Rather the entire  entangled system evolves as a whole. Since the states of the entangled  qubits are correlated so are the results of measurements. Once one qubit  randomly collapses into a certain value the other qubits collapse as  well into values deterministically dependent on the former.&lt;/p&gt;&lt;p&gt;Unentangled states are called &lt;em&gt;separable&lt;/em&gt;.  Mathematically it means they can be represented as a product of  individual qubit states. Let&#39;s consider a two-qubit system and assume  that the qubits are in the following states, respectively&lt;br&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&lt;span&gt;|ψ&lt;sub&gt;1&lt;/sub&gt;⟩ = H|0⟩ = &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;2&lt;sup&gt;-&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;sup&gt;½&lt;/sup&gt;&lt;span&gt;&lt;span&gt;(|0⟩ + |1⟩)&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&lt;span&gt;|ψ&lt;sub&gt;2&lt;/sub&gt;⟩ = |0⟩&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Then the combined state of the system is the product of the two states and is therefore separable:&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;|ψ&lt;sub&gt;1&lt;/sub&gt;⟩ |ψ&lt;sub&gt;2&lt;/sub&gt;⟩ =&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;2&lt;sup&gt;-&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;sup&gt;½&lt;/sup&gt;&lt;span&gt;&lt;span&gt;(|0⟩ + |1⟩) |0⟩ =&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;2&lt;sup&gt;-&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;sup&gt;½&lt;/sup&gt;&lt;span&gt;&lt;span&gt;(|00⟩ + |10⟩)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Multi-qubit gates are used to entangle qubits. For example, if we apply CNOT gate to the above state:&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;CNOT &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;2&lt;sup&gt;-&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;sup&gt;½&lt;/sup&gt;&lt;span&gt;&lt;span&gt;(|00⟩ + |10⟩) = &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;2&lt;sup&gt;-&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;sup&gt;½&lt;/sup&gt;&lt;span&gt;&lt;span&gt;(|00⟩ + |11⟩)&lt;br&gt;the result is entangled, since it cannot be decomposed into a product of individual qubit states.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;The latter state is known as one the &lt;em&gt;Bell&#39;s states&lt;/em&gt;.  An intrinsic property of this Bell’s state is that when one of the  qubits is measured then both qubits collapse and into the same value,  which is either |0⟩ or |1⟩ with probability ½. For another entangled  Bell&#39;s state &lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;2&lt;sup&gt;-&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;sup&gt;½&lt;/sup&gt;&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;(|01⟩ + |10⟩) the qubits collapse into opposite states. In both cases the results of measurement are correlated.&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;Quantum Computation&lt;/h2&gt; &lt;p&gt;Conceptually the quantum computation process is similar to any computational model. It consists of the following steps&lt;/p&gt; &lt;ol&gt;&lt;li&gt;&lt;p&gt;Input: prepare qubits initial states. It suffices to initialize qubits into the same state first, say &lt;span&gt;|0⟩&lt;/span&gt;, and then transform each into a desired state by applying 1-qubit gates.&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;Compute:  apply a quantum circuit to the qubit system. The circuit is designed  to solve the target problem in the first place. Due to the  probabilistic nature of the model, it should also intend to maximize  the probability of the correct answer when measurements are performed.&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;Output:  measure the states of the qubits. This yields a classical result,  which could be passed to classic devices for further processing.&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;Error check: the obtained results are correct with a certain probability &lt;span&gt;p &amp;gt; ½&lt;/span&gt;,  which is sufficient in e.g., statistical analysis. If precise  computation is required then the obtained result should be verified and  if incorrect the quantum computation should be repeated. In practice  only a constant repetition of quantum runs is needed.&lt;/p&gt; &lt;/li&gt;&lt;/ol&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;The principles &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;of the quantum&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; computational model differ from the classical. They are different in many aspects including algorithmic and programmatic. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;From an algorithmic&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; perspective, a series of new algorithms&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; need to be invented, since quantum algorithms are based on different  principles and can be more powerful than the classical. From a  programming viewpoint, new high-level programming languages should be  developed. The traditional operators like assignments or condition  checking do not have &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;direct equivalents in the quantum world. Quantum principles do not allow duplicating a quantum state as in assignment. And &lt;span&gt;if&lt;/span&gt; conditions imply measurements, which destroy the state being measured.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8699&quot; id=&quot;single-column-text-8699&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Quantum Algorithms&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;The main advantage of quantum algorithms is that they provide  computation speedup compared to classical counterparts. Several quantum  algorithms were developed to demonstrate the advantage.&lt;/p&gt;&lt;h2&gt;Deutsch–Jozsa Algorithm&lt;/h2&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Deutsch–Jozsa algorithm &lt;/span&gt;&lt;/span&gt;[&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-6&quot; title=&quot;D. Deutsch R. Josza, “Rapid solutions of problems by quantum computation,” Proc. Roy. Soc. London Se. A 439, 553–558, 1992&quot;&gt;6&lt;/a&gt;]&lt;span&gt;&lt;span&gt; is one of the first algorithms that showed the high potential of Quantum Computing.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;div align=&quot;left&quot;&gt;&lt;em&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Consider a Boolean function f:{0,1}&lt;sup&gt;n&lt;/sup&gt; → {0,1}, which is either constant on all 2&lt;sup&gt;n&lt;/sup&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; inputs or is balanced. Balanced here means that f(x) = 0 on exactly  half of the&lt;/em&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;em&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/em&gt;&lt;em&gt;inputs and equals 1 on the other half. Determine if a given f  is constant or&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; balanced.&lt;/em&gt;&lt;/div&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;With a classical deterministic algorithm function &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;f&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; must be evaluated at least 2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;sup&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;n-1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; + 1 times. While a quantum algorithm needs only one evaluation of &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;f&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;. The quantum algorithm is based&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;on the technique known as &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;em&gt;quantum parallelism&lt;/em&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;, which allows computing f(x) for all input values x simultaneously.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;The  Deutsch–Jozsa algorithm shows exponential speedup of quantum  computation compared to classical deterministic algorithms. A  generalization of this algorithm called Simon&#39;s algorithm provides  exponential speedup compared to classical probabilistic computers as  well. Both algorithms, while theoretically important, have little if any  practical application.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;Quantum Fourier Transform&lt;/h2&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Traditional &lt;em&gt;Discrete Fourier Transform&lt;/em&gt; (DFT) is a linear transformation of a sequence of complex numbers {x&lt;sub&gt;k&lt;/sub&gt;} of length N to another sequence {y&lt;sub&gt;k&lt;/sub&gt;} of the same length. DFT has a lot of applications in different scientific areas. Algorithmic applications include fast m&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;ultiplication of matrices, large integers, polynomials.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;em&gt;Quantum Fourier Transform&lt;/em&gt; (QFT) is applied to an n-qubit state and transforms its amplitudes.&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; Given the state &lt;/span&gt;&lt;span&gt;&lt;span&gt;|&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;x&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;⟩&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;= ∑&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;sub&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;k&amp;lt;N &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;sub&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;k &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;|k⟩&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; with N = 2&lt;/span&gt;&lt;sup&gt;&lt;span&gt;n&lt;/span&gt;&lt;/sup&gt;&lt;span&gt; QFT transforms it to the state &lt;/span&gt;&lt;span&gt;&lt;span&gt;|&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;y&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;⟩&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;= ∑&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;sub&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;k&amp;lt;N &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;sub&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;k &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;|k⟩&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; where amplitudes y&lt;/span&gt;&lt;sub&gt;&lt;span&gt;k&lt;/span&gt;&lt;/sub&gt;&lt;span&gt; are calculated as&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;y&lt;/span&gt;&lt;sub&gt;&lt;span&gt;k&lt;/span&gt;&lt;/sub&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;= N&lt;/span&gt;&lt;sup&gt;&lt;span&gt;-½&lt;/span&gt;&lt;/sup&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;∑&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;sub&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;j&amp;lt;N &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;sub&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; w&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;sub&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;N&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/sub&gt;&lt;sup&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;kj&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/sup&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; f&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;or 0 ≤ k &amp;lt; N and w&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;sub&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;N&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;=e&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;sup&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;i2π/N&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The best classical algorithm, known as &lt;em&gt;Fast Fourier Transform&lt;/em&gt; (FFT), calculates DFT in time O(N log(N)). The quantum algorithm discovered by Don Coppersmith (1994) does it with O(log&lt;sup&gt;2&lt;/sup&gt;(N)) quantum gates, which constitutes an exponential speedup &lt;/span&gt;[&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-10&quot; title=&quot;D. Coppersmith, “An approximate Fourier transform useful in quantum factoring,” IBM Research Report RC 19642, 1994&quot;&gt;10&lt;/a&gt;]&lt;span&gt;. The algorithm also exploits quantum parallelism as the Deutsch–Jozsa algorithm. Thus, the latter can be considered as the predecessor of QFT, and QFT is the key building block of Shor’s algorithm.&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;Prime Factorization&lt;/h2&gt; &lt;p&gt;&lt;span&gt;&lt;em&gt;Prime factorization&lt;/em&gt; is the problem of decomposing an integer into a product of prime numbers. The problem is believed to be hard to solve for classic computational models. There is no known deterministic classic algorithm, which solves it in polynomial time, and the best known algorithms solve it in exponential time. The computational hardness of factorization made it a principal component of public-key cryptography, where encryption is performed using a public key known to anybody, but decryption is practically impossible without the private key kept in secret. “Practically impossible” here means that decryption without the private key will take millions of years and an enormous amount of compute resources.&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Shor’s Algorithm&lt;/h2&gt; &lt;p&gt;&lt;span&gt;In 1994 Peter Shor developed a quantum algorithm, which factors an integer with a polynomial runtime upper bound of O(n&lt;sup&gt;3&lt;/sup&gt;) where n is the bit length of the number being factored &lt;/span&gt;[&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-7&quot; title=&quot;P. W. Shor, “Algorithms for quantum computation,” FOCS&#39;1994, 124-134, 1994&quot;&gt;7&lt;/a&gt;],[&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-8&quot; title=&quot;P. W. Shor, “Polynomial-Time Algorithms for Prime Factorization and Discrete Logarithms on a Quantum Computer,” SIAM J. Sci. Statist. Comput. 26, 1997&quot;&gt;8&lt;/a&gt;]&lt;span&gt;. It is an exponential speedup compared to complexity O(c&lt;sup&gt;n&lt;/sup&gt;) of known classic deterministic algorithms.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;The efficiency of Shor’s algorithm raised alarm for cryptography and cryptocurrency. It spurred the development of new intractable (that is, hard to solve efficiently) problems and cryptographic standards. A new branch of cryptography was spawned known as &lt;em&gt;post-quantum cryptography&lt;/em&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;Shor’s factoring algorithm is a complex construct combining classical and quantum computation steps. Each step could require an entire article to fully explain it.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;It is also hard to implement. In practice Shor’s algorithm was used to factor numbers 15 and 21 with a handful of qubits. Factorization of larger numbers requires more qubits. Latest estimates [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-19&quot; title=&quot;[19] C. Gidney, M. Ekerå, “How to factor 2048 bit RSA integers in 8 hours using 20 million noisy qubits,” 2021&quot;&gt;19&lt;/a&gt;] show that factoring of 2048-bit RSA integers would take only 8 hours, but will require 20 million qubits. The World has not produced anywhere near that many qubits yet. In 2023 Atom Computing and IBM announced the first quantum computers with over 1000 qubits. It could be a while until people will be able to actually break meaningful ciphers.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;Grover’s Search Algorithm&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;Grover’s Algorithm &lt;/span&gt;&lt;/span&gt;[&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-12&quot; title=&quot;L. K. Grover, “A fast quantum mechanical algorithm for database search,” STOC &#39;96, 212-219, 1996&quot;&gt;12&lt;/a&gt;]&lt;span&gt;&lt;span&gt; solves the following problem:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p align=&quot;left&quot;&gt;&lt;em&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span&gt;&lt;span&gt;Given a Boolean function f:{0,1}&lt;sup&gt;n&lt;/sup&gt; → {0,1}, such that there is only one argument x&lt;br&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; for which f(x) = 1, find that argument.&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;This problem becomes a database search when arguments are treated as indexes in a database table and function f is a search criterion. The classic algorithm requires exhaustive search in the worst case to solve the problem and therefore has O(N) time complexity, where N = 2&lt;sup&gt;n&lt;/sup&gt;. A quantum algorithm proposed by Lov Grover in 1996 can obtain the solution with probability p &amp;gt; ½ in time . The algorithm can be run multiple times in order to increase the probability of the correct answer. On average it suffices to run it twice to obtain the correct result, so the complexity remains the same.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;Grover’s algorithm is still exponential but provides a polynomial speedup compared to the classical algorithm. It has a wide area of applications, since it can accelerate NP-complete problems.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Quantum Algorithms for Linear Algebra&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Linear algebra&lt;/em&gt; studies linear operations on vector spaces. As mentioned earlier, quantum states and computation can be expressed in linear algebra terms of vectors and matrices, where quantum states are vectors of amplitudes and quantum operations are unitary matrices.&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Intuitively, associating classic vectors with amplitudes of quantum states should convert a linear algebra problem into a quantum one. Such association provides an exponentially more compact representation of data, since a system of n qubits encodes 2&lt;sup&gt;n&lt;/sup&gt; amplitudes. This also prompts more efficient algorithms as a polynomial classic algorithm may translate into a quantum poly-logarithmic one.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Solving linear systems of equations is one of the common problems of linear algebra:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Given a N*N matrix A and a vector b find vector x such that Ax = b&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;A classic solution of this problem has lower bound Ω(N&lt;sup&gt;2&lt;/sup&gt;) and the best algorithm solves it in time O(N&lt;sup&gt;2.376&lt;/sup&gt;).&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Aram Harrow, Avinatan Hassidim, and Seth Lloyd in 2009 developed a quantum algorithm for this problem – the HHL algorithm &lt;/span&gt;&lt;/span&gt;[&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-16&quot; title=&quot;A. W. Harrow, A. Hassidim, S. Lloyd, “Quantum algorithm for linear systems of equations,” Phys. Rev. Lett. 103 15, 2009&quot;&gt;16&lt;/a&gt;]&lt;span&gt;&lt;span&gt;, which solves the problem in O(logN k&lt;sup&gt;2&lt;/sup&gt; / ε), where k is the condition number defined as the ratio of the largest and smallest eigenvalues of matrix A, and ε is the error parameter. The time bound holds under certain restrictions: the matrix A should be sparse, and if the condition number k is too large or the error parameter ε is too small the estimate degrades to linear O(N). The HHL algorithm calculates the solution x as amplitudes of a quantum state, which cannot be measured exactly. So instead of the exact value of x it produces a value of an operator on x such as x&lt;sup&gt;†&lt;/sup&gt;Mx for some matrix M.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;The HHL algorithm and its modifications found implementation in machine learning where training is reduced to solving linear systems of equations. Other applications include chemistry, and finance. &lt;em&gt;Quantum machine learning &lt;/em&gt;&lt;/span&gt;&lt;/span&gt;[&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-17&quot; title=&quot;S. Lloyd, et al., “Quantum algorithms for supervised and unsupervised machine learning,” arXiv, 2013&quot;&gt;17&lt;/a&gt;]&lt;span&gt;&lt;span&gt; is a new scientific field. Unlike classical machine learning it still remains purely theoretical and any significant practical results are yet to be demonstrated.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8700&quot; id=&quot;single-column-text-8700&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt; Quantum Turing Machines&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Another way to define a computational model is &lt;/span&gt;&lt;em&gt;Turing Machines&lt;/em&gt; (TM) introduced by Alan Turing in 1936. TM is a mathematical abstraction of a computational device. The simplicity of TMs makes them ideal to study theoretical computational problems. In computational complexity theory TMs are used to compare different complexity classes and computational models as shown in the next section.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;A TM consists&lt;span&gt; &lt;/span&gt;of&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;p&gt;an input-output tape,&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;a head that  can read from and write to the tape and moves along it in either direction one cell at a time,&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;an internal state that is modified according to a finite state transition table based on the current state and the observed symbol on the tape.&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;Some states are marked as final indicating that the machine must stop.&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; &lt;p&gt;The goal of a TM computation implementing a Boolean function is to accept or reject the input sequence initially written on the tape.&lt;/p&gt; &lt;p&gt;&lt;span&gt;There are many different variants of TMs. Four types or TMs considered here have different ways of defining their state transition tables.&lt;/span&gt;&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;In &lt;em&gt;deterministic Turing machines&lt;/em&gt; the state transition is a 1-1 mapping and is always deterministic.&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Nondeterministic Turing machines &lt;/em&gt;can have multiple choices to choose the next state. The machine accepts the input sequence if at least one of the series of choices accepts the input.&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Probabilistic Turing machines&lt;/em&gt;&lt;span&gt; (PTM) also have multiple choices for state transitions, but they choose the next step probabilistically. Probabilistic TMs produce correct results with a certain probability. The goal is to maximize that probability, otherwise computation is no better than tossing a coin.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Quantum Turing machines&lt;/em&gt;&lt;span&gt; (QTM) are similar to PTM, but the state transition is defined with unitary operators on a quantum state using amplitudes instead of probabilities.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;The &lt;span&gt;QTM was first defined by Paul Benioff in 1980 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;[&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-1&quot; title=&quot;P. Benioff, “The Computer as a Physical System,” J. Stat. Phys. 22, 563–591, 1980&quot;&gt;1&lt;/a&gt;],[&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-2&quot; title=&quot;P. Benioff, “Quantum mechanical Hamiltonian models of Turing machines,” J. Stat. Phys. 29, 515–546, 1982&quot;&gt;2&lt;/a&gt;]&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;. Here &lt;/span&gt;I&lt;span&gt; present a simplified description of QTMs. For in-depth details &lt;/span&gt;see&lt;span&gt; the Bernstein and Vazirani paper [&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-20&quot; title=&quot;[20] E. Bernstein, U. Vazirani, “Quantum Complexity Theory,” SIAM J. Comput. 26, 1411–1473, 1997&quot;&gt;20&lt;/a&gt;&lt;/span&gt;&lt;span&gt;].&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Let us consider a probabilistic TM first. The state transition can be viewed as a function P:&lt;br&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; P(a, q, b, r, m) → p &lt;/span&gt;&lt;span&gt;∈&lt;/span&gt;&lt;span&gt; [0,1]&lt;br&gt;where a – is the symbol PTM currently observes on the tape, q – is the machine’s current state, b – is the symbol it writes to the tape, r – is the new state the PTM transitions to, and m ∈ {-1, +1} defines whether the head moves left or &lt;/span&gt;right&lt;span&gt; on the tape. The result of the function p – is the probability of the transition. So, if there are two possible transitions from the current configuration (a,q) then&lt;br&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; P(a, q, b&lt;sub&gt;0&lt;/sub&gt;, r&lt;sub&gt;0&lt;/sub&gt;, m&lt;sub&gt;0&lt;/sub&gt;) + P(a, q, b&lt;sub&gt;1&lt;/sub&gt;, r&lt;sub&gt;1&lt;/sub&gt;, m&lt;sub&gt;1&lt;/sub&gt;) = 1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;For QTMs a similar function on state transitions is defined, but it maps transitions into complex numbers:&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;A(a, q, b, r, m) → α ∈ ℂ&lt;br&gt;Then transitions are viewed as base quantum states |a,q,b,r,m⟩, the values of function A are amplitudes, and the QTM’s quantum state is defined as a superposition:&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |ψ⟩ = α|a,q,b&lt;sub&gt;0&lt;/sub&gt;,r&lt;sub&gt;0&lt;/sub&gt;,m&lt;sub&gt;0&lt;/sub&gt;⟩ + β|a,q,b&lt;sub&gt;1&lt;/sub&gt;,r&lt;sub&gt;1&lt;/sub&gt;,m&lt;sub&gt;1&lt;/sub&gt;⟩, where |α|&lt;sup&gt;2&lt;/sup&gt; + |β|&lt;sup&gt;2&lt;/sup&gt; = 1&lt;br&gt;The QTM starts with an initial state |ψ&lt;sub&gt;0&lt;/sub&gt;⟩ and applies a &lt;span&gt;unitary operator &lt;/span&gt;&lt;span&gt;U&lt;/span&gt;&lt;span&gt; on each step to its quantum state. &lt;/span&gt;&lt;span&gt;U&lt;/span&gt;&lt;span&gt; defines the computation of the machine&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |ψ&lt;/span&gt;&lt;sub&gt;&lt;span&gt;n&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;⟩ = U&lt;/span&gt;&lt;sup&gt;&lt;span&gt;n&lt;/span&gt;&lt;/sup&gt;&lt;span&gt;|ψ&lt;/span&gt;&lt;sub&gt;&lt;span&gt;0&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;⟩&lt;br&gt;&lt;/span&gt;The unitary restriction on the operator &lt;span&gt;U&lt;/span&gt; guarantees that the resulting state &lt;span&gt;U|ψ⟩&lt;/span&gt;&lt;span&gt; &lt;/span&gt;remains quantum.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Quantum circuits and QTMs are different quantum computation models. They are equivalent in polynomial time [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-21&quot; title=&quot;A. C.-C. Yao, “Quantum circuit complexity,” FOCS&#39;93, 1993&quot;&gt;21&lt;/a&gt;] meaning that an algorithm expressed in one model can be simulated using another model in polynomial time.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8701&quot; id=&quot;single-column-text-8701&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Complexity Classes&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Theoretically, algorithms are classified using computation complexity classes. A complexity class asymptotically restricts the amount of compute resources: time or space, that can be used to solve a problem within a certain computational model. Thus, a complexity class combines all problems that can be solved by an algorithm with these restrictions. A computational model is customarily represented by a variant of Turing machines.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Fundamental complexity classes known in classic computing are:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;P&lt;/strong&gt; – polynomial time: class of problems that can be computed in polynomial time on deterministic Turing machines&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;NP&lt;/strong&gt; – nondeterministic polynomial time: class of problems computable in polynomial time on nondeterministic Turing machines&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;PSPACE&lt;/strong&gt; – polynomial space: class of problems computable with polynomial space on TMs. It is known that &lt;strong&gt;PSPACE&lt;/strong&gt; = &lt;strong&gt;NPSPACE&lt;/strong&gt;, so deterministic and nondeterministic space classes are indistinguishable.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; &lt;p&gt;&lt;span&gt;The relationship between the complexity classes is as follows:&lt;br&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;P &lt;/strong&gt;&lt;span&gt;&lt;span&gt;⊆ &lt;/span&gt;&lt;/span&gt;&lt;strong&gt;NP&lt;/strong&gt;&lt;span&gt;&lt;span&gt; ⊆ &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;PSPACE&lt;/strong&gt;&lt;br&gt;&lt;/span&gt;It is not known if any of the relations are strict. That is, if &lt;strong&gt;P&lt;/strong&gt; is strictly smaller than &lt;strong&gt;NP&lt;/strong&gt; or if any of the two is strictly smaller than &lt;strong&gt;PSPACE&lt;/strong&gt;. It is commonly believed that the three classes are separable and proving it is a fundamental unsolved problem.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;Probabilistic and quantum TMs need to additionally restrict the probability of an error. The corresponding classes&lt;span&gt; are called &lt;/span&gt;&lt;em&gt;Bounded-error Probabilistic Polynomial time&lt;/em&gt;&lt;span&gt; (&lt;/span&gt;&lt;strong&gt;BPP&lt;/strong&gt;&lt;span&gt;) and &lt;/span&gt;&lt;em&gt;Bounded-error Quantum Polynomial time&lt;/em&gt;&lt;span&gt; (&lt;/span&gt;&lt;strong&gt;BQP&lt;/strong&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;BPP&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; – class of problems computable in polynomial time on probabilistic Turing machines with the probability of an error &lt;/span&gt;&lt;span&gt;ε &amp;lt; ⅓&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;BQP&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; – class of problems computable in polynomial time on quantum Turing machines with the probability of an error &lt;/span&gt;&lt;span&gt;ε &amp;lt; ⅓&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; &lt;p&gt;&lt;span&gt;It is known that&lt;br&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;P &lt;/strong&gt;&lt;span&gt;&lt;span&gt;⊆ &lt;/span&gt;&lt;/span&gt;&lt;strong&gt;BPP &lt;/strong&gt;&lt;span&gt;&lt;span&gt;⊆ &lt;/span&gt;&lt;/span&gt;&lt;strong&gt;BQP&lt;/strong&gt;&lt;span&gt;&lt;span&gt; ⊆ &lt;/span&gt;&lt;/span&gt;&lt;strong&gt;PSPACE&lt;/strong&gt;&lt;br&gt;It is not known if any of the relations are strict. It is also not known how classes &lt;strong&gt;BPP &lt;/strong&gt;&lt;span&gt;&lt;span&gt;and &lt;/span&gt;&lt;/span&gt;&lt;strong&gt;BQP&lt;/strong&gt;&lt;span&gt;&lt;span&gt; are related to &lt;/span&gt;&lt;/span&gt;&lt;strong&gt;NP&lt;/strong&gt;&lt;span&gt;&lt;span&gt;. Shor’s algorithm shows that &lt;/span&gt;&lt;/span&gt;&lt;strong&gt;BQP&lt;/strong&gt;&lt;span&gt;&lt;span&gt; contains some hard problems from &lt;/span&gt;&lt;/span&gt;&lt;strong&gt;NP&lt;/strong&gt;&lt;span&gt;&lt;span&gt;, such as factorization, but since factorization is not NP-complete it &lt;/span&gt;&lt;/span&gt;does not&lt;span&gt;&lt;span&gt; imply that&lt;/span&gt;&lt;/span&gt;&lt;strong&gt; BQP&lt;/strong&gt;&lt;span&gt;&lt;span&gt; contains &lt;/span&gt;&lt;/span&gt;&lt;strong&gt;NP&lt;/strong&gt;&lt;span&gt;&lt;span&gt;. The reverse is also unknown.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;em&gt;The relations between complexity classes give us a good picture about the algorithmic power of quantum computing. They confirm common intuition that quantum algorithms &lt;strong&gt;BQP&lt;/strong&gt; should be more powerful than classic both deterministic &lt;strong&gt;P&lt;/strong&gt; and probabilistic &lt;strong&gt;BPP&lt;/strong&gt;.&lt;/em&gt;&lt;/h4&gt; &lt;p&gt;&lt;span&gt;Of course, if it would turn out to be, although unlikely, that &lt;span&gt;&lt;strong&gt;P&lt;/strong&gt; =&lt;/span&gt;&lt;strong&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;PSPACE&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;, then all these classes will collapse into one and will be equivalent.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8702&quot; id=&quot;single-column-text-8702&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Quantum Supremacy&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;em&gt;Quantum supremacy&lt;/em&gt; or &lt;em&gt;quantum advantage&lt;/em&gt; is an effort to build a programmable quantum computer, which would solve a problem that is not feasible for any classical computer. This is a practical challenge to prove the potential of current quantum computing, different from theoretical asymptotic complexity.&lt;/p&gt; &lt;p&gt;One of the first claims of quantum supremacy was made by Google in 2019. Its Sycamore processor was “used to perform a series of operations in 200 seconds that would take a supercomputer about 10,000 years to complete&quot;. The claim was challenged by IBM suggesting that their fastest at the time supercomputer Summit could perform the task in 2.5 days rather than thousands of years. Later, improvements in algorithms reduced the speed of classic execution and allowed it to match or even be less than the 200 seconds runtime of Google’s quantum implementation.&lt;/p&gt; &lt;p&gt;In 2020 a group in the University of Science and Technology of China (USTC) announced achieving quantum supremacy on the photonic quantum computer Jiuzhang. The computation performed on Jiuzhang in 200 seconds was estimated to take 600 million years on the fastest supercomputer of the time, Fugaku. The results were further improved later with the USTC’s next-generation quantum computers Jiuzhang 2.0 and Zuchongzhi.&lt;/p&gt; &lt;p&gt;Canadian Xanadu (2022) and US D-Wave Systems (2024) have also reported quantum supremacy. The latest Google’s quantum computer Willow (December 2024) achieved quantum supremacy with logical qubits and error correction.&lt;/p&gt; &lt;p&gt;These results show that quantum computing already demonstrates a tremendous computational power. Although critics of the effort note that the problems used in quantum supremacy experiments are not practical enough and that advancements in classical algorithms and hardware may diminish quantum advantage.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8703&quot; id=&quot;single-column-text-8703&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Quantum Hardware&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;Over the last four decades substantial efforts have been devoted to the experimental development of quantum computers. A number of physical realizations were proposed including nuclear magnetic resonance, superconducting, trapped ions, semiconductor quantum dots, photonic, topological quantum computation platforms, and more. Today &lt;span&gt;it is not clear which&amp;nbsp;physical implementation&amp;nbsp;will provide the best qubits and gates.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Common requirements for quantum hardware are&lt;/p&gt; &lt;ol&gt;&lt;li&gt;&lt;p&gt;Qubits: an adequate representation of quantum states.&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;An implementation of a universal set of quantum gates.&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;A reliable qubit state initialization.&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;Quantum state measurement.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Qubit Coherence&lt;/h2&gt; &lt;p&gt;Theoretical quantum computation deals with ideal qubits and genuine quantum operators, but in all current physical realizations qubits and quantum gates are unreliable due to &lt;em&gt;quantum noise&lt;/em&gt; and the law of &lt;span&gt;entropy&lt;/span&gt;. In quantum systems interaction with the environment causes state &lt;em&gt;decoherence&lt;/em&gt;, which leads to information loss and computation errors. This is similar to classic mechanical systems where energy is lost due to various types of friction being converted to heat. High coherence of qubits can be achieved by isolation of qubits. The majority of today&#39;s quantum computers run at cryogenic temperatures in order to minimize interaction with the environment. But they cannot be completely isolated since operations and measurements need to be performed on them. This is one of the tradeoffs of experimental quantum computers design.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Coherence rates&lt;/em&gt; of existing qubits range from fractions of a second to hours. This limits the computation time, since when qubits lose coherence their states become random i.e. meaningless. Individual quantum gate execution times also vary depending on the realization. Dividing the qubit coherence time by the gate execution latency gives us the number of operations that a quantum computer is limited to for meaningful results. The computational capability can be extended by increasing the lifetime of qubits and by optimizing gate latency.&lt;/p&gt; &lt;h2&gt;Quantum Gate Fidelity&lt;/h2&gt; &lt;p&gt;Physical quantum gates are devices that emit different types of fields depending on the hardware platform to alter the quantum state of qubits. Quantum gates are also prone to errors due to quantum noise. Gate &lt;em&gt;fidelity&lt;/em&gt; characterizes the reliability of quantum gates. It measures the precision of a physical gate compared to the ideal gate. Sequential execution of gates leads to error accumulation so that long chains of gates become unreliable. Therefore, shallow quantum circuits are preferred for lower error rates.&lt;/p&gt;&lt;h2&gt;Scalability&lt;/h2&gt; &lt;p&gt;The primary challenge of practical Quantum Computing is &lt;em&gt;scalability&lt;/em&gt;, that is the ability to connect a large number of qubits without losing system reliability / coherence. A reasonable application of Shor’s algorithm as stated earlier requires 20 million qubits &lt;span&gt;&lt;span&gt;&lt;span&gt;[&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-19&quot; title=&quot;[19] C. Gidney, M. Ekerå, “How to factor 2048 bit RSA integers in 8 hours using 20 million noisy qubits,” 2021&quot;&gt;19&lt;/a&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;. Keeping such a large number of qubits entangled, which provides parallelism in quantum computation, and being able to control them with low error rates is a hard engineering and scientific problem.&lt;/p&gt;&lt;h2&gt;Quantum Error Correction&lt;/h2&gt;&lt;p&gt;Mitigation &lt;span&gt;&lt;span&gt;of decoherence effects &lt;/span&gt;&lt;/span&gt;is possible with the &lt;em&gt;quantum error correction&lt;/em&gt; (QEC) technique introduced by Shor. In 1995 he presented a nine-qubit quantum error-correcting code [&lt;span&gt;9&lt;/span&gt;]. In classic computing, error correction can be done using redundancy. This is not possible in the quantum world due to the no-cloning theorem, which states that an arbitrary qubit state cannot be cloned.&lt;/p&gt; &lt;p&gt;An ensemble of error correcting physical qubits represents a single &lt;em&gt;logical qubit&lt;/em&gt;. The state of the logical qubit is shared between entangled physical qubits so that the logical state remains correct even if physical qubits are corrupted. Logical qubits are the building blocks of future fault tolerant quantum computing.&lt;/p&gt; &lt;p&gt;Critics of QEC raise concerns that logical qubits are still not perfect, that it requires too many physical qubits to mitigate errors with existing noisy quantum systems, and advocate for developing new QEC schemes.&lt;/p&gt; &lt;p&gt;Practical quantum computing has many fascinating hard problems that are being solved today or waiting to be solved or discovered. It is a fast evolving and well-funded area of research and engineering.&lt;/p&gt; &lt;h4&gt;&lt;em&gt;Low qubit coherence times and noisy quantum gates pose a major obstacle for practical quantum computing. Without reliable scalable hardware the progress of quantum computing is limited.&lt;/em&gt;&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8704&quot; id=&quot;single-column-text-8704&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Quantum Programming&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;Today’s quantum programming is based on the quantum circuit model. Constructing quantum circuits gate-by-gate is inefficient and error-prone. The gate-by-gate approach works for a small number of qubits, but for large scale computations with thousands or millions of qubits circuits become un&lt;span&gt;manageable.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;em&gt;Quantum programming languages&lt;/em&gt; (QPL) have been developed to offer higher-level programming instruments and facilitate productivity of quantum computing. Many present QPLs use traditional programming languages like Python, C, C++, Java augmented by qubit variables to hold quantum states and built-in constructs for quantum gates.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Qubit variables are of a special type in QPLs with restrictions intrinsic to quantum states. Particularly, their values cannot be reassigned or passed in a function by value due to the non-cloning theorem. Classical loops and if statements are used to control quantum computation and simplify the description of quantum circuits.&lt;/p&gt; &lt;p&gt;A quantum program is then compiled to a quantum circuit. Since different quantum processors have different sets of universal quantum gates, the compiled circuit is further translated into hardware supported quantum gates and instructions of the physical quantum device for execution. Quantum compilation is an active area of research as it can optimize quantum execution in many ways, including&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;p&gt;Optimally translate quantum gates used in the program into hardware supported gates.&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;Optimize the circuit by reducing its depth or taking advantage of the topology of qubit connectivity in the processor.&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; &lt;p&gt;&lt;span&gt;Some QPLs allow non-classic conditions on qubit variables in &lt;span&gt;if&lt;/span&gt; and &lt;span&gt;loop&lt;/span&gt; statements. This is not to be confused with classical Boolean conditions since a comparison of quantum states implies measurement, which collapses the states. Instead, quantum conditions are compiled into a composition of gates typically using CNOT gates.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;QPLs can be divided into two main groups: &lt;em&gt;imperative&lt;/em&gt; and &lt;em&gt;functional&lt;/em&gt;. Imperative are based on procedural programming languages – C, Java, Python. Python is dominant as a base language for imperative QPLs and quantum software development kits (SDK).&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;Functional QPLs employ the &lt;/span&gt;&lt;em&gt;&lt;span&gt;functional programming&lt;/span&gt;&lt;/em&gt;&lt;span&gt; paradigm and are based on Haskell-like languages or lambda-calculus. The advantage &lt;/span&gt;&lt;span&gt;of the functional&lt;/span&gt;&lt;span&gt; approach is that it does not have to deal with effects &lt;/span&gt;&lt;span&gt;of the no-cloning&lt;/span&gt;&lt;span&gt; theorem as there are no assignments. Examples &lt;/span&gt;&lt;span&gt;of functional&lt;/span&gt;&lt;span&gt; quantum languages include QPL [&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-22&quot; title=&quot;P. Selinger, “Towards a Quantum Programming Language,” Mathematical Structures in Computer Science 14 4, 2004&quot;&gt;22&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;], QML [&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-23&quot; title=&quot;T. Altenkirch, J. Grattage, “A functional quantum programming language,” LICS&#39;05, 2005&quot;&gt;23&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;], and &lt;/span&gt;&lt;a href=&quot;https://www.mathstat.dal.ca/~selinger/quipper/&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Quipper&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-24&quot; title=&quot;A. S. Green, et al. “Quipper A Scalable Quantum Programming Language,” ACM SIGPLAN, 2013&quot;&gt;24&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;].&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;Another interesting approach to quantum programming could be &lt;/span&gt;&lt;em&gt;&lt;span&gt;logic programming&lt;/span&gt;&lt;/em&gt;&lt;span&gt; using declarative languages like Prolog and Datalog, which define relations between objects and their properties, or facts and rules, rather than a step-by-step computational process.&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;/span&gt;Quantum Software&lt;/h2&gt;&lt;p&gt;&lt;span&gt;Some examples of QPLs and SDKs that are under active development and use include&lt;/span&gt;&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/openqasm/openqasm&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;OpenQASM&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt; is a descendant of Quantum Assembly Language (QASM). It is a part of IBM quantum SDK &lt;/span&gt;&lt;a href=&quot;https://www.ibm.com/quantum/qiskit&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Qiskit&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. See &lt;/span&gt;&lt;a href=&quot;https://openqasm.github.io/&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;documentation&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt; for more details.&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://quantumai.google/cirq&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Cirq &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;is an &lt;/span&gt;&lt;a href=&quot;https://github.com/quantumlib/cirq&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;open-source&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt; Python library for quantum circuits, part of Google Quantum AI.&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/azure/quantum/qsharp-overview&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Q#&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt; a high-level &lt;/span&gt;&lt;a href=&quot;https://github.com/microsoft/qsharp&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;open-source&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt; programming language for developing and running quantum algorithms. Part of the Microsoft Quantum Development Kit.&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/amazon-braket&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Amazon Braket SDK&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt; supports different languages and quantum &lt;/span&gt;&lt;a href=&quot;https://docs.aws.amazon.com/braket/latest/developerguide/braket-devices.html&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;hardware providers&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.pennylane.ai/en/stable/&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;PennyLane&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt; is a cross-platform Python &lt;/span&gt;&lt;a href=&quot;https://github.com/PennyLaneAI/pennylane&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;library&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt; for quantum computing, which integrates with various quantum frameworks, devices, and simulators.&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.qrisp.eu/general/tutorial/index.html&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Qrisp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt; is an &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/eclipse-qrisp/Qrisp&quot;&gt;&lt;span&gt;&lt;span&gt;open-source&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; Python framework supporting EU quantum computing.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;The q&lt;/span&gt;&lt;a href=&quot;https://docs.ocean.dwavesys.com/en/stable&quot;&gt;&lt;span&gt;uantum modeling language &lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;https://docs.classiq.io/latest/classiq_101/classiq_concepts/design/&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Qmod&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt; is a part &lt;/span&gt;&lt;span&gt;of the Classiq&lt;/span&gt;&lt;span&gt; quantum platform.&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.ocean.dwavesys.com/en/stable&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Ocean&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt; is an &lt;/span&gt;&lt;a href=&quot;https://github.com/dwavesystems/dwave-ocean-sdk/&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;open-source&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt; Python SDK for annealing quantum computing of D-Wave Systems.&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; &lt;p&gt;&lt;span&gt;As small-scale quantum computers become available for experiments and research, it is natural to see that the development of quantum software is more active within the systems that can and do provide access to live quantum equipment. Early QPLs such as cQASM, &lt;/span&gt;&lt;a href=&quot;http://tph.tuwien.ac.at/~oemer/qcl.html&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;QCL&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, QPL, QML, LanQ, &lt;/span&gt;&lt;a href=&quot;https://silq.ethz.ch/&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Silq&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, Scaffold, &lt;/span&gt;&lt;a href=&quot;https://www.mathstat.dal.ca/~selinger/quipper/&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Quipper&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt; were able to run primarily in simulated mode due to lack of quantum hardware.&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;/span&gt;Quantum Computing Simulation&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Quantum circuit simulator&lt;/em&gt; (QCS) is a software program that emulates execution of quantum circuits on traditional computers. QCSs were developed when physical quantum devices were unavailable. QCS uses brute-force calculation of the evolution of quantum states. Since the amount of information grows exponentially with the number of qubits, classical simulators are limited by the computational power of classic computers.&lt;/p&gt; &lt;p&gt;QCSs are not a replacement for a physical quantum computer, but they play an important role in quantum computing as they allow real-time debugging of quantum algorithms, which is problematic with real quantum devices since one cannot check qubit states in the middle of a quantum computation. QCSs are widely used for developing new algorithms, as well as testing, debugging, and education frameworks.&lt;/p&gt; &lt;p&gt;There are numerous quantum simulators out there. Examples of hardware-optimized simulators that utilize multi-core CPUs and GPUs are &lt;a href=&quot;https://github.com/iqusoft/intel-qs&quot;&gt;&lt;span&gt;&lt;span&gt;Intel-QS&lt;/span&gt;&lt;/span&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.nvidia.com/cuquantum-sdk&quot;&gt;&lt;span&gt;&lt;span&gt;NVIDIA cuQuantum&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;Quantum Memory and Storage&lt;/h2&gt;&lt;p&gt;In von Neumann’s architecture, traditional computers have the central processing unit (CPU), volatile random access memory (RAM), and persistent long-term storage. The quantum circuit model does not assume memory. Rather qubits’ initial states are set up on the initialization stage, then a quantum circuit is executed, and the output is obtained by measurements.&lt;/p&gt; &lt;p&gt;Quantum memory, that is a system for storing and retrieving quantum states, is hard to build because of the no-cloning theorem and short qubit coherence times. Classical RAM stores information by creating a copy of it, which is not possible for quantum states. Also, information in RAM lives as long as the computer is on, while qubits susceptible to decoherence cannot hold quantum states long.&lt;/p&gt; &lt;p&gt;In 2008 a technique for &lt;em&gt;Quantum Random Access Memory&lt;/em&gt; (QRAM) was suggested by V. Giovannetti, S. Lloyd, and L. Maccone called Bucket-Brigade [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-25&quot; title=&quot;V. Giovannetti, S. Lloyd, L. Maccone, “Quantum random access memory,” Physical review letters, 100 16, 2008&quot;&gt;&lt;span&gt;25&lt;/span&gt;&lt;/a&gt;], which uses a binary tree of qubits for addressing the memory with the leaf nodes serving as the memory cells. Error correction is used to increase coherence times.&lt;/p&gt; &lt;p&gt;Quantum long-term storage would be an interesting device. The amount of information stored in qubits grows exponentially on the number of qubits. “Quantum state drives” may be a very compact way of storing information. Unfortunately, such technology does not yet exist.&lt;/p&gt; &lt;p&gt;There is a vast amount of quantum software developed, which seems just waiting to be utilized when scalable and reliable quantum computers arrive. On the other hand,&lt;/p&gt; &lt;h4&gt;&lt;em&gt;The state of the art of quantum software for gate-model quantum computers is still at the level of an assembly language with evident enhancement features but provides little towards higher-level abstractions.&lt;br&gt;Further proliferation of quantum software is expected as high-level quantum programming languages are still yet to be developed.&lt;/em&gt;&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8705&quot; id=&quot;single-column-text-8705&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Challenges of Quantum Computing&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;So far it was shown that quantum computers are based on a more powerful computational model than classic computing, promising exponential acceleration in computational power for various tasks. Returning to the question raised in the beginning – why Quantum Computing is an elusive ever-shifting target, this section will summarize the main challenges of Quantum Computing and let you answer this question for yourself.&lt;/p&gt; &lt;h2&gt;Quantum Devices&lt;/h2&gt; &lt;p&gt;Production of physical quantum devices is a major theoretical and technological challenge. It faces the following major problems:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;em&gt;Reliability&lt;/em&gt;: lowering error rates, increasing qubit coherence time, and improving gate fidelity&lt;span&gt;.&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;em&gt;Scalability&lt;/em&gt;: practical quantum computation requires millions of qubits. More qubits mean higher compound error rates and the higher complexity of maintaining the state of interconnected qubits.&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;em&gt;Fault-Tolerance&lt;/em&gt;: error-correction is imperative for building logical qubits – the core building blocks of resilient quantum devices.&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;em&gt;Cost&lt;/em&gt;: present quantum computers are custom manufactured. Most of them operate at very low temperatures requiring costly cooling systems and use of other expensive equipment.&lt;/p&gt; &lt;/li&gt;&lt;/ol&gt; &lt;p&gt;Production of reliable quantum devices depends on solving these problems. Multiple approaches exist today for physical realization of quantum computers, each having its pros and cons. It may take time to find the winner and work out a mass-production technology.&lt;/p&gt;&lt;h2&gt;Quantum Algorithm Design&lt;/h2&gt;&lt;p&gt;&lt;span&gt;Existing quantum algorithms already show drastic acceleration of classic computing for several important classes of problems. Since quantum algorithms are based on different principles and can be more powerful than the classical, a new series of algorithms is still waiting to be invented that take advantage of properties of the quantum model. Not all algorithms will benefit from the quantum approach. For example, comparison-based quantum sorting will remain lower bounded by Ω(n log n) the same as in classic &lt;span&gt;[&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-26&quot; title=&quot;P. Høyer, J. Neerbek, Y. Shi, “Quantum Complexities of Ordered Searching, Sorting, and Element Distinctness,” ICALP&#39;01, 2001&quot;&gt;26&lt;/a&gt;]. In &lt;/span&gt;&lt;span&gt;perspective,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;a series of volumes&lt;/span&gt;&lt;span&gt; need to be written&lt;/span&gt;&lt;span&gt; of “&lt;/span&gt;&lt;span&gt;The Art of &lt;/span&gt;&lt;em&gt;&lt;span&gt;Quantum&lt;/span&gt;&lt;/em&gt;&lt;span&gt; Computer Programming” summarizing quantum algorithms [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-27&quot; title=&quot;S. Jordan, “Quantum algorithm zoo,”&quot;&gt;27&lt;/a&gt;], [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-28&quot; title=&quot;A. M. Childs, “Lecture Notes on Quantum Algorithms,” 2022&quot;&gt;28&lt;/a&gt;], [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-29&quot; title=&quot; Quantum Physics, 2023&quot;&gt;29&lt;/a&gt;] the way Donald Knuth does [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-30&quot; title=&quot;D. E. Knuth, “The Art of Computer Programming,” Addison-Wesley.&quot;&gt;30&lt;/a&gt;] for classic computing.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;High-Level Quantum Programming&lt;/h2&gt;&lt;p&gt;Today’s quantum programming is based on the quantum gate model, which is essentially a low-level assembler language since it is so closely tied up to the machine code instructions. Classic computing also started with &lt;span&gt;logic gates and relay switching circuits [&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/quantum-computing-notes#reference-31&quot; title=&quot;C. E. Shannon, “A Symbolic Analysis of Relay and Switching Circuits,” Trans. AIEE. 57 12, 713–723, 1938&quot;&gt;31&lt;/a&gt;&lt;/span&gt;&lt;span&gt;] before they were replaced by vacuum tubes, then transistors, and integrated circuits. It took decades to level up the abstractions. The same should inevitably happen with quantum programming. For example, one can fantasize that quantum parallelism will be represented with a special construct in the language, which will be compiled into a circuit entangling qubits with multi-qubit gates. Such high-level abstractions do not exist yet, &lt;/span&gt;and need&lt;span&gt; to be invented.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8706&quot; id=&quot;single-column-text-8706&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Conclusion&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;Quantum Computing is an exciting and fast evolving area of research, engineering, and technology. Quantum algorithms are powerful. Small scale quantum computations are already possible. But there is so much yet to be done and &lt;span&gt;discovered in the field before such computations become practical. Quantum computing is not expected to replace classic computing. More likely quantum chips will be used along with traditional computers as accelerators similar to how GPUs are used to accelerate graphics and machine learning.&lt;/span&gt;&lt;/p&gt; &lt;h4&gt;&lt;em&gt;Quantum Computing is upon us, but it is still ten years away&lt;/em&gt;&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;field field-name-field-lv2-pdf field-type-file field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;file&quot;&gt;&lt;img class=&quot;file-icon&quot; alt=&quot;PDF icon&quot; title=&quot;application/pdf&quot; src=&quot;https://www.usenix.org/core/modules/file/icons/application-pdf.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; &lt;a href=&quot;https://www.usenix.org/sites/default/files/quantumcomputingnotes-shvachko_1.pdf&quot; type=&quot;application/pdf; length=182931&quot; title=&quot;quantumcomputingnotes-shvachko.pdf&quot;&gt;Download PDF&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;fieldset class=&quot;group-appendix field-group-fieldset form-wrapper&quot;&gt;&lt;legend&gt;&lt;span class=&quot;fieldset-legend&quot;&gt;Appendix&lt;/span&gt;&lt;/legend&gt;&lt;div class=&quot;fieldset-wrapper&quot;&gt;&lt;div class=&quot;field field-name-field-lvl2-appendix-refs field-type-text field-label-above&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;References:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-1&quot;&gt;&lt;/a&gt;&lt;p&gt;[1] P. Benioff, “&lt;a href=&quot;https://www.researchgate.net/publication/226754042_The_computer_as_a_physical_system_A_microscopic_quantum_mechanical_Hamiltonian_model_of_computers_as_represented_by_Turing_machines&quot;&gt;The Computer as a Physical System: A Microscopic Quantum Mechanical Hamiltonian Model of Computers as Represented by Turing Machines&lt;/a&gt;,” &lt;em&gt;J. Stat. Phys. &lt;/em&gt;22, 563–591, 1980&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-2&quot;&gt;&lt;/a&gt;&lt;p&gt;[2] P. Benioff, “&lt;a href=&quot;https://www.researchgate.net/publication/227052453_Quantum_mechanical_Hamiltonian_models_of_Turing_machines&quot;&gt;Quantum mechanical Hamiltonian models of Turing machines&lt;/a&gt;,” &lt;em&gt;J. Stat. Phys. &lt;/em&gt;29, 515–546, 1982&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-3&quot;&gt;&lt;/a&gt;&lt;p&gt;[3] Yu. I. Manin, “Computable and Uncomputable,” &lt;em&gt;Sovetskoye Radio&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;Moscow, 1980&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-4&quot;&gt;&lt;/a&gt;&lt;p&gt;[4] R. P. Feynman, “Simulating physics with computers,”&lt;em&gt; Int. J. Theor. Phys.&lt;/em&gt; 21, 467–488, 1982&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-5&quot;&gt;&lt;/a&gt;&lt;p&gt;[5] M. A. Nielsen, I. L. Chuang, “&lt;a href=&quot;https://en.m.wikipedia.org/wiki/Quantum_Computation_and_Quantum_Information_(book)&quot;&gt;Quantum Computation and Quantum Information&lt;/a&gt;,” &lt;em&gt;Cambridge Univ. Press&lt;/em&gt;, Cambridge, 2000&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-6&quot;&gt;&lt;/a&gt;&lt;p&gt;[6] D. Deutsch R. Josza, “Rapid solutions of problems by quantum computation,” &lt;em&gt;Proc. Roy. Soc. London Se.&lt;/em&gt; A 439, 553–558, 1992&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-7&quot;&gt;&lt;/a&gt;&lt;p&gt;[7] P. W. Shor, “Algorithms for quantum computation: Discrete logarithms and factoring,” &lt;em&gt;35th Annual Symposium on Foundations of Computer Science&lt;/em&gt;, 124-134, 1994&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-8&quot;&gt;&lt;/a&gt;&lt;p&gt;[8] P. W. Shor, “&lt;a href=&quot;https://arxiv.org/abs/quant-ph/9508027&quot;&gt;Polynomial-Time Algorithms for Prime Factorization and Discrete Logarithms on a Quantum Computer&lt;/a&gt;,” &lt;em&gt;SIAM J. Sci. Statist. Comput.&lt;/em&gt; 26, 1997&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-9&quot;&gt;&lt;/a&gt;&lt;p&gt;[9] P. W. Shor, “Scheme for reducing decoherence in quantum computer memory,” &lt;em&gt;Physics Review A&lt;/em&gt; 52 4, R2493–R2496, 1995&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-10&quot;&gt;&lt;/a&gt;&lt;p&gt;[10] D. Coppersmith, “&lt;a href=&quot;https://arxiv.org/abs/quant-ph/0201067&quot;&gt;An approximate Fourier transform useful in quantum factoring&lt;/a&gt;,” &lt;em&gt;IBM Research Report&lt;/em&gt; RC 19642, 1994&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-11&quot;&gt;&lt;/a&gt;&lt;p&gt;[11] C. Monroe, D. M. Meekhof, B. E. King, W. M. Itano, D. J. Wineland, “&lt;a href=&quot;https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.75.4714&quot;&gt;Demonstration of a Fundamental Quantum Logic Gate&lt;/a&gt;,” &lt;em&gt;Phys. Rev. Lett.&lt;/em&gt; 75 25, 4714-4717, 1995&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-12&quot;&gt;&lt;/a&gt;&lt;p&gt;[12] L. K. Grover, “&lt;a href=&quot;https://arxiv.org/abs/quant-ph/9605043&quot;&gt;A fast quantum mechanical algorithm for database search&lt;/a&gt;,” &lt;em&gt;STOC &#39;96: 28th annual ACM symposium on Theory of Computing&lt;/em&gt;, 212-219, 1996&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-13&quot;&gt;&lt;/a&gt;&lt;p&gt;[13] J A. Jones, M. Mosca, “&lt;a href=&quot;https://arxiv.org/abs/quant-ph/9801027&quot;&gt;Implementation of a quantum algorithm on a nuclear magnetic resonance quantum computer&lt;/a&gt;,” &lt;em&gt;Chem. Phys.&lt;/em&gt; 109 5, 1648–1653, 1998&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-14&quot;&gt;&lt;/a&gt;&lt;p&gt;[14] I. L. Chuang, N. Gershenfeld, M. Kubinec, “Experimental Implementation of Fast Quantum Searching,” &lt;em&gt;Phys. Rev. Lett. &lt;/em&gt;80 15, 3408-3411, 1998&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-15&quot;&gt;&lt;/a&gt;&lt;p&gt;[15] L. M. K. Vandersypen, M. Steffen, G. Breyta, C. S. Yannoni, M. H. Sherwood, I. L. Chuang, “&lt;a href=&quot;https://arxiv.org/abs/quant-ph/0112176&quot;&gt;Experimental realization of Shor&#39;s quantum factoring algorithm using nuclear magnetic resonance&lt;/a&gt;,” &lt;em&gt;Nature &lt;/em&gt;414, 883–887, 2001&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-16&quot;&gt;&lt;/a&gt;&lt;p&gt;[16] A. W. Harrow, A. Hassidim, S. Lloyd, “&lt;a href=&quot;https://arxiv.org/abs/0811.3171&quot;&gt;Quantum algorithm for linear systems of equations&lt;/a&gt;,” &lt;em&gt;Phys. Rev. Lett. &lt;/em&gt;103 15, 2009&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-17&quot;&gt;&lt;/a&gt;&lt;p&gt;[17] S. Lloyd, M. Mohseni, P. Rebentrost, “&lt;a href=&quot;https://arxiv.org/pdf/1307.0411&quot;&gt;Quantum algorithms for supervised and unsupervised machine learning&lt;/a&gt;,” &lt;em&gt;arXiv: Quantum Physics&lt;/em&gt;, 2013&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-18&quot;&gt;&lt;/a&gt;&lt;p&gt;[18] R. Hundt, “Quantum Computing for Programmers,” &lt;em&gt;Cambridge Univ. Press&lt;/em&gt;, Cambridge, 2022&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-19&quot;&gt;&lt;/a&gt;&lt;p&gt;[19] C. Gidney, M. Ekerå, “&lt;a href=&quot;https://arxiv.org/abs/1905.09749&quot;&gt;How to factor 2048 bit RSA integers in 8 hours using 20 million noisy qubits&lt;/a&gt;,” &lt;em&gt;arXiv:1905.09749&lt;/em&gt;, 2021&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-20&quot;&gt;&lt;/a&gt;&lt;p&gt;[20] E. Bernstein, U. Vazirani, “Quantum Complexity Theory,” &lt;em&gt;SIAM J. Comput.&lt;/em&gt; 26, 1411–1473, 1997&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-21&quot;&gt;&lt;/a&gt;&lt;p&gt;[21] A. C.-C. Yao, “Quantum circuit complexity,” IEEE Annual Symposium on Foundations of Computer Science, 352–361, 1993&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-22&quot;&gt;&lt;/a&gt;&lt;p&gt;[22] P. Selinger, “Towards a Quantum Programming Language,” &lt;em&gt;Mathematical Structures in Computer Science&lt;/em&gt; 14 4, 527–586, 2004&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-23&quot;&gt;&lt;/a&gt;&lt;p&gt;[23] T. Altenkirch, J. Grattage, “&lt;a href=&quot;https://arxiv.org/pdf/quant-ph/0409065&quot;&gt;A functional quantum programming language&lt;/a&gt;,” &lt;em&gt;20th Annual IEEE Symposium on Logic in Computer Science (LICS&#39;05)&lt;/em&gt;, 249-258, 2005 &amp;nbsp;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-24&quot;&gt;&lt;/a&gt;&lt;p&gt;[24] A. S. Green, P. L. Lumsdaine, N. J. Ross, P. Selinger, B. Valiron, “&lt;a href=&quot;http://arxiv.org/abs/1304.3390&quot;&gt;Quipper: A Scalable Quantum Programming Language&lt;/a&gt;,” ACM SIGPLAN Conference on Programming Language Design and Implementation, 333–342, 2013 &amp;nbsp;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-25&quot;&gt;&lt;/a&gt;&lt;p&gt;[25] V. Giovannetti, S. Lloyd, L. Maccone, “&lt;a href=&quot;https://arxiv.org/abs/0708.1879&quot;&gt;Quantum random access memory&lt;/a&gt;,” Physical review letters, 100 16, 2008&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-26&quot;&gt;&lt;/a&gt;&lt;p&gt;[26] P. Høyer, J. Neerbek, Y. Shi, “&lt;a href=&quot;https://arxiv.org/abs/quant-ph/0102078&quot;&gt;Quantum Complexities of Ordered Searching, Sorting, and Element Distinctness&lt;/a&gt;,” ICALP 2001, Lecture Notes in Computer Science 2076, 346-359, Springer, 2001&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-27&quot;&gt;&lt;/a&gt;&lt;p&gt;[27] S. Jordan, “&lt;a href=&quot;http://math.nist.gov/quantum/zoo/&quot;&gt;Quantum algorithm zoo&lt;/a&gt;,” online&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-28&quot;&gt;&lt;/a&gt;&lt;p&gt;[28] A. M. Childs, “&lt;a href=&quot;http://www.cs.umd.edu/~amchilds/qa/qa.pdf&quot;&gt;Lecture Notes on Quantum Algorithms&lt;/a&gt;,” online, 2022&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-29&quot;&gt;&lt;/a&gt;&lt;p&gt;[29] R. de Wolf, “&lt;a href=&quot;https://arxiv.org/abs/1907.09415&quot;&gt;Quantum Computing: Lecture Notes&lt;/a&gt;,” arXiv: Quantum Physics, 2023&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-30&quot;&gt;&lt;/a&gt;&lt;p&gt;[30] D. E. Knuth, “&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Art_of_Computer_Programming&quot;&gt;The Art of Computer Programming&lt;/a&gt;,” Addison-Wesley. 1968-...&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-31&quot;&gt;&lt;/a&gt;&lt;p&gt;[31] C. E. Shannon, “&lt;a href=&quot;https://en.wikipedia.org/wiki/A_Symbolic_Analysis_of_Relay_and_Switching_Circuits&quot;&gt;A Symbolic Analysis of Relay and Switching Circuits&lt;/a&gt;,” Trans. AIEE. 57 12, 713–723, 1938&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/fieldset&gt;
</description><link>https://www.usenix.org/publications/loginonline/quantum-computing-notes</link><guid isPermaLink="false">https://www.usenix.org/publications/loginonline/quantum-computing-notes</guid><pubDate>Sun, 12 Jan 2025 16:00:00 GMT</pubDate><author>Konstantin V. Shvachko</author></item><item><title>The Evolution of SRE at Google</title><description>&lt;div class=&quot;field field-name-field-lv2-subtitle field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Using STAMP to improve resilience in Google production systems&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-publication-date field-type-datetime field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;date-display-single&quot;&gt;December 18, 2024&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-article-type field-type-taxonomy-term-reference field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Research&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-label-inline clearfix field-type-text-long field-pseudo-field field-pseudo-field--author-list&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Authors:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/evolution-sre-google#Tim%20Falzone&quot; title=&quot;Tim Falzone&quot;&gt;Tim Falzone&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/evolution-sre-google#Ben%20Treynor%20Sloss&quot; title=&quot;Ben Treynor Sloss&quot;&gt;Ben Treynor Sloss&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-shepherds field-type-user-reference field-label-inline clearfix&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Article shepherded by:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;usenix-user-reference-names&quot;&gt;Rik Farrow&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraphs-items paragraphs-items-field-lv2-body paragraphs-items-field-lv2-body-full paragraphs-items-full&quot;&gt;
  &lt;div class=&quot;field field-name-field-lv2-body field-type-paragraphs field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8577 paragraphs-first-text&quot; id=&quot;single-column-text-8577&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Billions of people around the world use Google’s products every day, and they count on those products to work reliably. Behind the scenes, Google’s services&amp;nbsp; have increased dramatically in scale over the last 25 years — and failures have become rarer even as the scale has grown. Google’s SRE team has pioneered methods to keep failures rare by engineering reliability into every part of the stack. SREs have scaled up methods that have gotten us very far—Service Level Objectives (SLOs), error budgets, isolation strategies, thorough postmortems, progressive rollouts, and other techniques. In the face of increasing system complexity and emerging challenges, we at Google are always asking ourselves: what&#39;s next? How can we continue to push the boundaries of reliability and safety?&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;To address these challenges, Google SRE has embraced systems theory and control theory. We have adopted the STAMP (System-Theoretic Accident Model and Processes) framework, developed by Professor Nancy Leveson at MIT, which shifts the focus from preventing individual component failures to understanding and managing complex system interactions. STAMP incorporates tools like Causal Analysis based on Systems Theory (CAST) for post-incident investigations and System-Theoretic Process Analysis (STPA) for hazard analysis.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;In this article, we will explore the limitations of our traditional approaches and introduce you to STAMP. Through a real-world case study and lessons learned, we&#39;ll show you why we believe STAMP represents the future of SRE not just at Google, but across the tech industry.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8578&quot; id=&quot;single-column-text-8578&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Making systems theory practical&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Ideas like error budgets worked well with products that were largely stateless web services, but today our products have losses that must &lt;/span&gt;&lt;span&gt;never&lt;/span&gt;&lt;span&gt; occur—error budgets of zero. The types of failures we need to prevent have evolved beyond what error budgets can effectively address. Issues like privacy breaches, data loss, and regulatory compliance demand absolute prevention, not just low frequency and rapid mitigation. In addition to&amp;nbsp; these elevated expectations, our systems also become more complex every year. Sophisticated automation has enabled us to scale, AI and ML are now core to almost every product we build, and cost and energy efficiency are as important as user-visible features.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;SRE has always worked to not simply react to failures, but to anticipate and prevent them. But anticipating failures has proven wickedly difficult at Google, a system defined by one of the largest codebases in history. And AI is only increasing this challenge. How can SREs comprehend and manage the ever-increasing complexity of our systems, anticipate potential failures before they occur, and design safer, more reliable systems from the ground up?&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The answer lies in a paradigm shift. Systems theory, control theory, and their application to solving problems through systems-thinking gives SREs a way to understand and manage complexity, all the way up to Google’s planet-scale systems. The future of SRE will use system-theoretic methods to provide comprehensive, efficient, and effective results in the AI-era.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The easiest way to introduce this new model is to contrast it with the way we traditionally thought about our systems. In general, any hazard analysis method consists of three parts:&lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;A way to model the system&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;A way to explain how problems occur (a theory of causation)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;A search algorithm&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;Although we never formalized it with theory, SRE has developed an effective method for analyzing hazards in our systems. Like every software engineering organization, we depend on accurate &lt;/span&gt;&lt;span&gt;software architecture models&lt;/span&gt;&lt;span&gt; to understand how things work. These models are often &lt;/span&gt;&lt;span&gt;data flow&lt;/span&gt;&lt;span&gt; models, showing how network requests or data move between different parts of the system.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;This modeling technique gives rise to a common default of &lt;/span&gt;&lt;span&gt;cause-and-effect reasoning &lt;/span&gt;&lt;span&gt;to explain how problems might occur. We think deeply about dependencies in a linear data flow model — reliable operations come from careful management of dependencies. We use SLOs to understand the reliability guarantees of different components in a system, and ensure that those guarantees meet or exceed the caller’s requirements.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Finally, we commonly use &lt;/span&gt;&lt;span&gt;induction&lt;/span&gt;&lt;span&gt; to search for hazards. Induction, or bottoms-up reasoning from discrete events to general patterns, is how we approach writing the action items in a postmortem. We ask postmortem authors to think beyond repairing the one incident to what might prevent an entire class of incidents. We leverage postmortems to identify patterns and trends across Google. We ask SRE teams to do the same thing with their operational interrupts. A goal of SRE is to transform discrete alerts into engineering solutions that eliminate the cause of the problem altogether.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;These practices have been instrumental in our ability to maintain reliability while scaling our operations to serve billions of users daily. They&#39;ve allowed us to learn from failures, improve our systems incrementally, and build a culture of reliability across the organization.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;However, we&#39;ve seen our systems get more complex every year, and data flow models don’t scale to our enormous complexity. Without a consistent way to use abstraction, RPC diagrams and software architecture models become too complex to analyze, and are almost always either incomplete or out of date.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;These kinds of models also provide no information about the dynamics of the system.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Which RPCs can initiate a flow?&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;How do errors propagate?&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Which components could cause a critical outage? Which can only cause minor issues?&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;What if one component interaction is safe in some contexts, but unsafe in others?&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;What is the overall goal that the system is trying to achieve?&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;What responsibility does each component in the system have with respect to that overall goal?&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;Looking at a data flow diagram with more than 100 nodes is overwhelming—where do you even begin to search for flaws? Even more insidious are flaws that occurred at the requirements definition phase of the system&#39;s construction. &lt;/span&gt;&lt;span&gt;A design might implement its requirements flawlessly. But what if requirements necessary for the system to be safe were incorrect or, even worse, missing altogether?&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Learning from failures doesn’t necessarily help you anticipate and prevent something that has never happened. Inductive reasoning is powerful when there is a lot of data to draw from, but we work very hard to &lt;/span&gt;&lt;span&gt;prevent&lt;/span&gt;&lt;span&gt; failures that are often the source of that data.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;In general, our approach to reliability over the last fifteen years has aimed at ensuring that our systems behave correctly and consistently according to the way we designed it.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The future of SRE, leveraging systems thinking, will address a second and even more fundamental question: is &lt;/span&gt;&lt;span&gt;“the way we designed it” &lt;/span&gt;&lt;span&gt;correct? Answering this question requires a new approach.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8579&quot; id=&quot;single-column-text-8579&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Overview of STAMP&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;The first time system designs challenged their creators&#39; ability to understand them was in the early twentieth century. Sophisticated guidance systems, electronic computers, rockets, and radars all pushed engineers beyond what the traditional tools of component analysis, manual adjustments based on observed outputs, and trial and error could handle. In response, a new field emerged at the intersection of mathematics, engineering, and systems thinking: control theory. Today, as we navigate an increasingly complex world of autonomous systems, adaptive networks, and AI- and ML-powered systems, the principles of control theory developed in those formative post-war years continue to provide the theoretical backbone for managing and optimizing systems across diverse fields.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Leveson&#39;s groundbreaking work on STAMP in the early 2000s represented a paradigm shift in system safety. Building upon the foundations laid by cybernetics pioneer Norbert Wiener and control theorists like Rudolf Kalman, Leveson recognized that safety is an emergent property that can only be analyzed at the system-level, rather than an attribute of individual system components. STAMP applies control theory principles to safety engineering, viewing accidents not as a chain of events, but as complex interactions between system components, including human operators and software. Today, Leveson&#39;s STAMP methodology offers a robust framework for understanding and mitigating risks in complex socio-technical systems, demonstrating the enduring relevance and adaptability of control theory principles in our rapidly evolving technological landscape.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8580&quot; id=&quot;single-column-text-8580&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Control Theory as a Foundation - The Four Conditions&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;In &quot;An Introduction to Cybernetics,&quot; W.R. Ashby lays out the fundamental requirements for control, which Leveson later incorporated into her STAMP methodology. Leveson recognized the relevance of these cybernetic principles to system safety and adapted them for use in analyzing system safety.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&quot;In order to control a process, four conditions are required:&lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Goal Condition: The controller must have a goal or goals (for example, to maintain the setpoint).&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Action Condition: The controller must be able to affect the state of the system. In engineering, actuators implement control actions.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Model Condition: The controller must be (or contain) a model of the system.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Observability Condition: The controller must be able to ascertain the state of the system. In engineering terminology, observation of the state of the system is provided by sensors.&quot;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;These four conditions provide a structured way to think about control in complex systems. When applying STAMP to our SRE practices, we can use these conditions as a checklist to ensure we have the necessary elements in place for effective control.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8581&quot; id=&quot;single-column-text-8581&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Treating Accidents as a Control Problem&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;A prevalent way of explaining the cause of an outage at Google is as a linear sequence of failures. As we&#39;ll show, this type of causality model has limitations when analyzing system safety. Sentences like, &quot;a bug combined with insufficient rate limits, caused thousands of servers to go offline&quot; abound in our postmortems. We don&#39;t explicitly call out our use of a linear chain causality model, but as Leveson writes, &quot;accident models explain why accidents occur, and they determine the approaches we take to prevent them. While you might not be consciously aware you are using a model when engaged in these activities, some (perhaps subconscious) model of the phenomenon is always part of the process.&quot; (Leveson 2012, 15)&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Many problems stem from choosing an inadequate causality model. If we see outages as the result of a branching chain of events then the obvious solution is to break the chain before the failure. This will inevitably lead us to look for where some component failed—where the software had a bug, or a server crashed, or was overloaded with traffic—and work to prevent that failure. We&#39;ll add redundancy, or rework the server to be more reliable, or introduce failure isolation, or add tests to catch problems. These techniques will all work, but only up to a point. We haven&#39;t addressed any of the larger systemic factors that might reintroduce the problems somewhere else. We have only looked at relationships that are directly related to the outage. Also, picking the first event in the chain (the &quot;root cause&quot;) is subjective. When did the outage really begin? When the servers went offline? Or when the rate limits were changed? Or when the bug was introduced? Or when the maintenance operation was first automated? There is an infinite regress problem here.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;STAMP shifts our perspective on accidents from a linear chain of failure events to a control problem. We want our model to explain accidents that result from component failures (like server crashes and buggy automation), but also external disturbances (environmental factors in our datacenters or subsea Internet cables), interactions between components of the system (including human-human, human-software, and software-software interactions), and also incorrect or inadequate behavior of individual system components—flawed algorithms or decision making.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Instead of asking &quot;What software service failed?&quot; we ask “What interactions between parts of the system were inadequately controlled?” In complex systems, most accidents result from interactions between components that are all functioning as designed, but collectively produce an unsafe state. &lt;/span&gt;&lt;span&gt;If this all seems abstract, don&#39;t worry&lt;/span&gt;&lt;span&gt;—&lt;/span&gt;&lt;span&gt;we&#39;re going to tie these concepts together with a real-life example.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8582&quot; id=&quot;single-column-text-8582&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Hazard states give you time&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;Another incredibly important implication of an accident model is that it helps you analyze the time dimension of an accident. In a linear chain, there is a sequence of events laid out over time, but it only describes two states that the system can be in—normal operations, before the last event in the chain occurs and the system has not yet had an accident, and loss operations, after the last event in the chain occurs and the accident begins.&amp;nbsp;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8583&quot; id=&quot;article-image-8583&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/1.png&quot; width=&quot;1248&quot; height=&quot;274&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Control flow of a system without hazard states&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8584&quot; id=&quot;single-column-text-8584&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;The transition from normal operations to loss operations is typically very sudden—there is almost no time to react to prevent it. This is one reason why SRE uses a combination of &lt;/span&gt;&lt;span&gt;fast burn&lt;/span&gt;&lt;span&gt; and &lt;/span&gt;&lt;span&gt;slow burn&lt;/span&gt;&lt;span&gt; SLOs for detecting problems that might be developing but aren&#39;t yet at the point of causing real harm. However, these SLOs are normally attributes of individual system components.&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;STAMP formalizes this concept at the system level as &lt;/span&gt;&lt;span&gt;hazard states&lt;/span&gt;&lt;span&gt;. &quot;A hazard is a system state or set of conditions that, together with a particular set of worst-case environmental conditions, will lead to a loss [for one or more stakeholders in the system].&quot;&lt;/span&gt;&lt;span&gt; (STPA Handbook, 17)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;Hazard states are not discrete events. They do not describe anything at the individual system component-level. A hazard state is a property of the system as a whole, and the system can be in a hazard state for a long period of time before an accident occurs. That gives engineers a much larger target to aim at when trying to prevent outages. Rather than trying to eliminate any single failure that could occur anywhere in the system, we work to prevent the system from entering a hazard state. And if we do enter a hazard state, &lt;/span&gt;&lt;span&gt;if we can detect it and take action to transition from the hazard state back to normal operations&lt;/span&gt;&lt;span&gt;, we can prevent any accident from occurring. In some cases, the system is in a hazard state for a long time—a bug is introduced but never triggered, an alert fires but no one receives it, a server is underprovisioned but suddenly receives traffic from a popular new product feature, etc. &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8585&quot; id=&quot;article-image-8585&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/2.png&quot; width=&quot;1248&quot; height=&quot;262&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Diagram showing process flow from Normal operations on left through Hazard state in center to Loss Operations on Right&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8586&quot; id=&quot;single-column-text-8586&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Making it concrete with a real example&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;An example of this phenomenon occurred at Google in 2021. We set and enforce resource quotas for some kinds of internal software running on our infrastructure. To maximize efficiency, we also monitor how much of its quota each software service uses. If a service consistently uses less resources than its quota, we automatically reduce the quota. In STPA terms, this quota rightsizer has a control action to reduce a service&#39;s quota. From a safety perspective, we then ask when this action would be unsafe. As one example, if the rightsizer&amp;nbsp; ever reduced a service&#39;s quota below the actual needs of that service, it would be unsafe—the service would be resource-starved. This is what STPA calls an &lt;/span&gt;&lt;span&gt;unsafe control action&lt;/span&gt;&lt;span&gt; (UCA).&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;STPA analyzes each interaction in a system to determine comprehensively how the interaction must be controlled in order for the system to be safe. Unsafe control actions lead to the system entering one or more hazard states. There are only four possible types of UCA:&lt;/span&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;A required control action is not provided.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;An incorrect or inadequate control action is provided.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;A control action is provided at the wrong time or in the wrong sequence.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;A control action is stopped too soon or applied for too long.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;This particular unsafe control action—reducing an assigned quota to be less than what the service requires—is an example of the second type of UCA.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Simply identifying this unsafe control action by itself is only partially useful. If &quot;quota rightsizer reduces the assigned quota under what the service requires&quot; is unsafe, then preventing that behavior is what the system must do, i.e. &quot;quota rightsizer must not reduce the assigned quota under what the service currently requires.&quot; This is a &lt;/span&gt;&lt;span&gt;safety requirement&lt;/span&gt;&lt;span&gt;. Safety requirements can be very useful for formulating future designs, elaborating testing plans, and helping people understand the system. And let’s be honest—even mature software systems can operate in ways that are undocumented, unclear, and surprising.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Nonetheless, what we really want is to anticipate all of the concrete scenarios that lead to a hazard state. Again, STPA has a simple and comprehensive way to structure an analysis to find all of the scenarios that could lead the quota rightsizer to violate this safety requirement.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;So in the case of the rightsizer, there are four archetypal scenarios that we can investigate.&lt;/span&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Scenarios in which the rightsizer has incorrect behavior.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Scenarios in which the rightsizer gets incorrect feedback (or no feedback at all).&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Scenarios in which the quota system never receives an action from the rightsizer (even though the rightsizer tried to send one).&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Scenarios in which the quota system has incorrect behavior.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;One specific scenario quickly jumped out to us when analyzing the rightsizer. It gets feedback on the current resource usage from the quota service. As implemented, the calculation of current resource usage is complicated, involving different data collectors and some tricky aggregation logic. What if something went wrong with this complex calculation, resulting in a value that was too low? In short, the rightsizer would react exactly as designed and reliably shrink a service’s quota to the incorrect lower usage level.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Exactly the disaster we wanted to prevent.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Up to this point, lots of attention had been paid to getting the quota adjustment algorithm right and reliably producing the correct outputs, namely, the action to adjust a service’s quota. However, the feedback path—including the service’s current resource usage—had been less well understood.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;This highlights a major advantage of STPA—by looking at the system level and by modeling the system in terms of control-feedback loops, we find issues both in the control path and the feedback path. As we run STPA on more and more systems, we see that the feedback path is often less well understood than the control path, but just as important from a system safety perspective.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;As we dug into the feedback paths for the rightsizer, we saw many opportunities to improve them. None of these changes looked like a traditional reliability solution—it didn’t boil down to managing the rightsizer with a different SLO and error budget. Instead, the solutions showed up in other parts of the system and involved redesigning parts of the stack that had previously appeared to be unrelated–again, an advantage of STPA’s system theory approach.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;In the 2021 incident, incorrect feedback about the resources used by a critical service in Google&#39;s infrastructure was sent to the rightsizer. The rightsizer calculated a new quota, allocating far fewer resources than the service was actually using. As a precautionary measure, this quota reduction was not immediately applied, but was held for several weeks to give time for someone to intervene in case the quota was wrong.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Of course, major incidents are never simple events—the next problem was that despite adding the delay as a safety feature, feedback about the pending change was never sent to anyone. The entire system was in a hazard state for weeks, but because we weren&#39;t looking for it, we missed our chance to prevent the loss that followed. After several weeks, the quota reduction was applied resulting in a significant outage. Using STPA, we have anticipated problems just like this one in many different systems across Google.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;As Leveson writes in &lt;/span&gt;&lt;span&gt;Engineering a Safer World&lt;/span&gt;&lt;span&gt;: &quot;In [STAMP], understanding why an accident occurred requires determining why the control was ineffective. Preventing future accidents requires shifting from a focus on preventing failures to the broader goal of designing and implementing controls that will enforce the necessary constraints.&quot;&lt;/span&gt;&lt;span&gt; This shift in perspective - from trying to prove the absence of problems to effectively managing known and potential hazards - is a key principle in our system safety approach.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8587&quot; id=&quot;article-image-8587&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/3.png&quot; width=&quot;500&quot; height=&quot;524&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Control Flow of The Rightsizer quota-management system&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8588&quot; id=&quot;single-column-text-8588&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Where We Are Heading&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Rather than seeing complexity as a bug, SRE teams at Google are leveraging control theory and methods like STPA and CAST to lead us to more comprehensive and proactive approaches to reliability, moving beyond simply reacting to failures to actively designing safer systems from the ground up.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;We have analyzed some of Google&#39;s most complex systems with STPA, and with relatively little effort (think: engineer-weeks of work per analysis), we have found hundreds of scenarios with a wide range of impacts. Because we found these scenarios before they led to an outage, we were able to mitigate them with a combination of quick &quot;band-aid&quot; fixes and much more carefully planned software engineering, leveraging the regular planning process across Google to make the system safer while also minimizing the costs and disruptions associated with the work. Our ongoing work is focused on extremely complex Google Cloud systems, Google&#39;s massive internal networking systems, and multiple Google products.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The success of SRE at Google has always been due to the amazingly talented engineers who have worked 24/7 to ensure that Google&#39;s products work at scale. Dedication, ingenuity, and lots of hard work have made Google&#39;s products the benchmark for high reliability and performance. The evolution of SRE towards system safety methods gives our engineers an entirely new way to understand the systems we build, and provides us even stronger guarantees about how they work. Complexity is increasing everywhere, and Google&#39;s engineers will be ready to face it in order to provide the same exceptional performance in the next era.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</description><link>https://www.usenix.org/publications/loginonline/evolution-sre-google</link><guid isPermaLink="false">https://www.usenix.org/publications/loginonline/evolution-sre-google</guid><pubDate>Tue, 17 Dec 2024 16:00:00 GMT</pubDate><author>Tim Falzone, Ben Treynor Sloss</author></item><item><title>Enabling Reproducibility through the SPHERE Research Infrastructure</title><description>&lt;div class=&quot;field field-name-field-lv2-publication-date field-type-datetime field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;date-display-single&quot;&gt;December 16, 2024&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-article-type field-type-taxonomy-term-reference field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Deployed System&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-label-inline clearfix field-type-text-long field-pseudo-field field-pseudo-field--author-list&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Authors:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/enabling-reproducibility-through-sphere-research-infrastructure#Jelena%20Mirkovic&quot; title=&quot;Jelena Mirkovic&quot;&gt;Jelena Mirkovic&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/enabling-reproducibility-through-sphere-research-infrastructure#Brian%20Kocoloski&quot; title=&quot;Brian Kocoloski&quot;&gt;Brian Kocoloski&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/enabling-reproducibility-through-sphere-research-infrastructure#David%20Balenson&quot; title=&quot;David Balenson&quot;&gt;David Balenson&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-shepherds field-type-user-reference field-label-inline clearfix&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Article shepherded by:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;usenix-user-reference-names&quot;&gt;Rik Farrow&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraphs-items paragraphs-items-field-lv2-body paragraphs-items-field-lv2-body-full paragraphs-items-full&quot;&gt;
  &lt;div class=&quot;field field-name-field-lv2-body field-type-paragraphs field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8612 paragraphs-first-text&quot; id=&quot;single-column-text-8612&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;In October 2023, the U.S. National Science Foundation (NSF) funded the Security and Privacy Heterogeneous Environment for Reproducible Experimentation (SPHERE) project via its mid-scale research infrastructure program. SPHERE is a four-year long construction project to build a modern, versatile, and usable common research infrastructure to support cybersecurity and privacy research and education. Led by USC Information Sciences Institute (PIs Jelena Mirkovic and Brian Kocoloski) and Northeastern University (PI David Choffnes), SPHERE aims to transform cybersecurity and privacy research, enabling representative, sophisticated, and reproducible experimentation that allows researchers to build on the work of their peers, thus supercharging scientific progress. The infrastructure is partially complete and already in operation for beta users.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;SPHERE also aims to provide usable infrastructure for various classes of users in cybersecurity and privacy areas: both novice and expert researchers, educators and students, investigators running human user studies, and artifact evaluation committees. SPHERE will further enable unprecedented access to hardware and software that is crucial to emerging cybersecurity and privacy fields, such as confidential computing, cyber-physical system security, IoT security and privacy, secure federated learning, etc.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;In this article, we describe motivation and need for SPHERE (Section 1), overall architecture, components and services (Section 2), and current status (Section 3). We also explain how using a common research infrastructure helps researchers and educators (Section 4) and enables faster research progress in the entire community. SPHERE is currently open for beta users at &lt;/span&gt;&lt;a href=&quot;https://sphere-testbed.net/&quot;&gt;&lt;span&gt;https://sphere-testbed.net&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. Our project page at &lt;/span&gt;&lt;a href=&quot;https://sphere-project.net/&quot;&gt;&lt;span&gt;https://sphere-project.net&lt;/span&gt;&lt;/a&gt;&lt;span&gt; provides up-to-date information about the project, describes opportunities for collaboration, and outlines plans for the future developments.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8613&quot; id=&quot;single-column-text-8613&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;1. Motivation and Need&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Over the past decade, and especially during the Covid-19 pandemic, our essential functions (e.g., work, school, entertainment, social, financial, critical infrastructure, and governance) moved increasingly online. This sharply increased society’s dependence on correct and reliable functioning of network and computing systems, and has led to increases in the frequency and impact of cybersecurity and privacy attacks. Recent years have seen unprecedented and record-breaking attacks, for example the Solar Winds supply-chain attack [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/enabling-reproducibility-through-sphere-research-infrastructure#reference-1&quot;&gt;1&lt;/a&gt;], which exposed confidential government data, and the Colonial Pipeline attack [&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/enabling-reproducibility-through-sphere-research-infrastructure#reference-2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;&lt;span&gt;], which shut down our major gas pipeline for several days. Ransomware attacks more than tripled [&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/enabling-reproducibility-through-sphere-research-infrastructure#reference-3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;&lt;span&gt;], DDoS attacks doubled [&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/enabling-reproducibility-through-sphere-research-infrastructure#reference-4&quot;&gt;4&lt;/a&gt;], and data breaches increased by 70% [&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/enabling-reproducibility-through-sphere-research-infrastructure#reference-5&quot;&gt;5&lt;/a&gt;]. We now live in a world where cybersecurity and privacy are intrinsically intertwined with everything we do, and failures in these domains can have far-reaching monetary and national security impacts, and even jeopardize human lives. Research progress in cybersecurity and privacy is thus of critical national importance, to ensure safety of people, infrastructure and data.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;USC Information Sciences Institute ran two workshops in 2022 to learn about community needs around cybersecurity and privacy research: the Cybersecurity Artifacts Workshop [&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/enabling-reproducibility-through-sphere-research-infrastructure#reference-6&quot;&gt;6&lt;/a&gt;] and the Cybersecurity Experimentation of the Future 2022 Workshop [&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/enabling-reproducibility-through-sphere-research-infrastructure#reference-7&quot;&gt;7&lt;/a&gt;]. &lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Cybersecurity and privacy researchers need common, rich, representative research infrastructure, which meets the needs across all members of the community, and facilitates reproducible science to move from piecemeal, opportunistic research to pursuing integrated, sophisticated, community-encompassing research. We also need a well-educated workforce that is knowledgeable about cyber threats, and that has mastery over practical skills to prevent, detect and recover from cyber attacks.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8614&quot; id=&quot;single-column-text-8614&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;2. SPHERE Architecture&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;The SPHERE project is building an advanced research infrastructure (see Figure 1) to support cybersecurity and privacy research and education. Led by the team that built and operated the Deterlab testbed, and supported more than 1,000 research users and more than 20,000 education users over two decades, the SPHERE project has an ambitious goal to meet needs of the broad and diverse research community through modern and diverse hardware, a suite of user portals geared towards different user communities, and a suite of reproducibility services coupled with community-wide efforts. SPHERE will offer free access to all researchers and educators, for non-profit use. Users will be able to remotely access the resources, using their browsers and terminals. Users will obtain exclusive, on-demand access to resources they reserve and will be allowed to keep resources for a user-specified period of time, to access them as superusers and configure them as needed, to organize these resources into mini-networks, with configurable network substrate, and to experiment with malicious software as needed, in a safe, contained setting.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8615&quot; id=&quot;article-image-8615&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/arch-sphere-nov2024.jpg&quot; width=&quot;1440&quot; height=&quot;718&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 1: The SPHERE research infrastructure will offer access to an unprecedented variety of user-configurable hardware, software, and network resources. It will offer six user portals geared toward different populations of users. And, it will support reproducible research via infrastructure services as well as community engagement activities.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8616&quot; id=&quot;single-column-text-8616&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;SPHERE facilities&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;At the lowest level in the architecture figure we show different classes of hardware nodes that support different research endeavors in cybersecurity and privacy, as summarized in Table 1.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-html-table paragraphs-item-html-table paragraphs-item-full paragraphs-item-8617&quot; id=&quot;html-table-8617&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-table-contents field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;
    &lt;th&gt;Hardware&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;    
    &lt;th&gt;Research Supported&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;General-compute&lt;/td&gt;
    &lt;td&gt;Around 200 server-class nodes, with Intel TDX, ARM CCA/TrustZone, and AMD SEV processor architectures
General-compute resources can be requested as bare metal nodes or as virtual machines, with configurable resources&lt;/td&gt;
    &lt;td&gt;Research on application, system and network security, research that requires measurement of security and privacy phenomena in the Internet, research that uses human user studies, research that requires large-scale experimentation, and research that leverages trustworthy computing.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Embedded-compute&lt;/td&gt;
    &lt;td&gt;Around 400 nodes with embedded CPUs and GPUs, such as Intel Atom, Intel Xeon D, ARM Cortex-A57, and NVIDIA Jetson NX Volta&lt;/td&gt;
    &lt;td&gt;Research on edge computing security, blockchain security, private computing, trustworthy edge computing, and federated learning&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Machine-learning&lt;/td&gt;
    &lt;td&gt;Around 10 servers with GPUs&lt;/td&gt;
    &lt;td&gt;Cybersecurity that includes machine-learning in the loop&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Cyber-physical&lt;/td&gt;
    &lt;td&gt;Several complete architectures to emulate industrial control systems, such as a water-treatment plant, a power plant and an oil and gas pipeline&lt;/td&gt;
    &lt;td&gt;Security of critical infrastructure&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Programmable&lt;/td&gt;
    &lt;td&gt;About 40 NetFPGA-equipped nodes&lt;/td&gt;
    &lt;td&gt;Research solutions that need dynamic (programmable) network security or solutions that investigate and improve SDN security&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;IoT&lt;/td&gt;
    &lt;td&gt;Around 500 IoT nodes (a variety of smart home, smart speaker, camera, doorbell, TV, appliance, medical, office, wearable, and miscellaneous devices)&lt;/td&gt;
    &lt;td&gt;IoT security and user privacy&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-table-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Table 1: SPHERE will provide multiple facilities equipped with various classes of hardware nodes, supporting diverse initiatives within the cybersecurity and privacy research community.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8618&quot; id=&quot;single-column-text-8618&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Merge software&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;SPHERE facilities are powered by USC-ISI’s Merge software for research infrastructure management, depicted in Figure 2.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8619&quot; id=&quot;article-image-8619&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/merge-sphere-dec2024.jpg&quot; width=&quot;1440&quot; height=&quot;698&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 2: Merge research infrastructure software is designed to operate mid-scale testbeds with hundreds of compute nodes and tens of switches.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8620&quot; id=&quot;single-column-text-8620&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;USC-ISI maintains reference implementations of the Merge Portal and Merge Facility code bases (&lt;/span&gt;&lt;a href=&quot;https://gitlab.com/mergetb&quot;&gt;&lt;span&gt;https://gitlab.com/mergetb&lt;/span&gt;&lt;/a&gt;&lt;span&gt;). The reference implementations use microservice architectures to flexibly integrate homegrown and third-party services to implement the Merge APIs. Both implementations target resilient operation at scale and strict adherence to user-defined performance requirements. The implementations were designed to operate mid-scale testbeds with hundreds of compute nodes and tens of switches, though they can be used to operate smaller scale testbeds if desired.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The &lt;/span&gt;&lt;strong&gt;&lt;span&gt;Merge Portal&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; implementation runs on Kubernetes, and provides two types of user services.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Core services&lt;/strong&gt;&lt;span&gt; implement the Merge Portal API, and provide a range of services in support of compiling, realizing, and materializing experiments.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;XDCs&lt;/strong&gt;&lt;span&gt; (Experiment Development Container) are spawned as pods on the Kubernetes platform. They run lightweight Linux-based containers and provide a gateway to the testbed for users. XDCs connect to backend Merge facilities through on-demand VPN tunnels. Users connect to XDCs either through SSH or Jupyter (web-based HTTP).&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;The &lt;/span&gt;&lt;strong&gt;Merge Facility&lt;/strong&gt;&lt;span&gt; implementation runs on a set of different testbed resources.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Infrastructure services&lt;/strong&gt;&lt;span&gt; host the Facility core services, testbed nodes providing virtual or bare metal device access to users, and switches that create virtual network segments to isolate user experiment traffic.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Core services&lt;/strong&gt;&lt;span&gt; run as containers on top of podman, RedHat&#39;s container platform. These services implement the Merge Facility API, which the portal uses to send experiment requests to the backend facilities.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hypervisor services&lt;/strong&gt;&lt;span&gt; use Qemu/KVM to instantiate virtual machines for user experiments.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Switches&lt;/strong&gt;&lt;span&gt; run on Cumulus Linux, a white-box switching platform provided by NVIDIA. The Merge canopy service runs on these switches to create isolated network segments through the VXLAN protocol.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Dedicated infrastructure (infra)&lt;/strong&gt;&lt;span&gt; and &lt;/span&gt;&lt;strong&gt;experiment (xp) &lt;/strong&gt;&lt;span&gt;networks isolate testbed control traffic from experiment traffic to prevent interference between the two.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;Merge supports multiple facilities, which may be managed by different teams and contain different hardware and software. Any compute/network infrastructure implementing the Merge Facility API can be commissioned as a Merge testbed facility.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;SPHERE enclaves will be connected via dedicated Layer 2 links, including a FABRIC connection [&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/enabling-reproducibility-through-sphere-research-infrastructure#reference-8&quot;&gt;8&lt;/a&gt;] between the IoT enclave at the Northeastern University and other enclaves at the USC-ISI and USC colocation facilities. Together, the Merge software and these connections will enable stitching of nodes from different enclaves into a single topology in an experiment.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8621&quot; id=&quot;single-column-text-8621&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;SPHERE portal and security policies&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;The SPHERE portal, shown in the middle level of Figure 1, is hosted on distributed server-class nodes for resiliency, and enables all user access to SPHERE and enforce access policies.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;At the same level, the right side of the figure illustrates different security policies that will be supported by SPHERE. Most experiments will be granted HTTP, HTTPS, and SSH access to the Internet, which is necessary for software installations and code downloads (e.g., from Github). Some experiments may need additional access, e.g., to facilitate Internet-wide measurements or risky interactions with malicious actors. These experiments will be supported through more open Internet access and additional, automated monitoring. Finally, some experiments may be so risky that they must be executed in full containment.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8622&quot; id=&quot;single-column-text-8622&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;User portals&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;There are six user portals that cater to different user populations (shown at the upper level of Figure 1). Three basic portals are the manual, Jupyter, and graphical portals. The &lt;/span&gt;&lt;strong&gt;manual portal (MAN)&lt;/strong&gt;&lt;span&gt; enables direct access to experimental nodes via SSH, which facilitates exploratory research by expert users. When experimental workflows mature they can be scripted via the &lt;/span&gt;&lt;strong&gt;Jupyter portal (JUP)&lt;/strong&gt;&lt;span&gt; to allow for repeatable and reproducible experiments. Novice users will be offered access via the &lt;/span&gt;&lt;strong&gt;graphical user interface (GUI) &lt;/strong&gt;&lt;span&gt;portal&lt;/span&gt;&lt;span&gt;, allowing them to draw and annotate experiment topologies and workflows. Users will be able to switch between these portals as needed, keeping the experiment state.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;SPHERE will also develop three specialized portals, to offer additional support to specific user populations. The &lt;/span&gt;&lt;strong&gt;education portal (EDU) &lt;/strong&gt;&lt;span&gt;enables teachers to create accounts for their students, to manage these accounts, to upload materials for class use, and to assign work to students to be completed on SPHERE. Such work usually comes in the form of homework assignments that require students to create attack and defense scenarios in mini-networks on SPHERE. This facilitates active learning, promotes student engagement and also teaches practical skills, which students will need in their future careers. Students also use the EDU portal to access materials for their class. The &lt;/span&gt;&lt;strong&gt;human study (HUM) &lt;/strong&gt;&lt;span&gt;portal &lt;/span&gt;&lt;span&gt;helps researchers that run human user studies to deploy their innovations on SPHERE, and create pathways for study participants to interact with these innovations and leave feedback for researchers. The &lt;/span&gt;&lt;span&gt;&lt;strong&gt;artifact evaluation committee (AEC)&lt;/strong&gt; portal&lt;/span&gt;&lt;span&gt; helps artifact authors and reviewers share and evaluate artifacts for a given paper on the same common infrastructure. Artifacts can then be archived for reuse by others. &lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8623&quot; id=&quot;single-column-text-8623&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Supporting reproducible experimentation&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;In addition to the physical architecture, SPHERE will offer a set of datasets and tools to facilitate representative, reproducible experimentation. First, it will enable and motivate users to package and archive their research artifacts into artifact libraries and make them available to others on the same platform. Second, it will actively work with artifact evaluation committees to support evaluation efforts on SPHERE and archive those artifacts that receive reproducibility badges. Third, SPHERE will crowdsource building of representative experimentation environments (REEs), which can serve as standards for evaluation in a given field of cybersecurity and privacy. SPHERE team will issue an annual call for mature research artifacts to be ported to SPHERE as REEs (please check our project page at &lt;/span&gt;&lt;a href=&quot;https://sphere-project.net/&quot;&gt;&lt;span&gt;https://sphere-project.net&lt;/span&gt;&lt;/a&gt;&lt;span&gt; for this call). Artifact authors will receive summer funding to work as virtual interns and port their artifacts to SPHERE. Fourth, SPHERE will offer built-in support for artifact packaging and sharing, including support for experimental workflows, and recording of user actions during exploratory research (manual access to nodes), which can be used to transform exploratory experiments into mature ones by scripting the user’s manual actions.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8624&quot; id=&quot;single-column-text-8624&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;3. Current Construction Status and Outreach&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;SPHERE construction has been ongoing for a year, and we are happy to report strong progress on all planned activities. We have procured and installed about one-third of the general-compute enclave and one-fifth of the IoT enclave. We have started design and purchasing of CPS, embedded compute and GPU enclaves. SPHERE portal and accompanying control, networking and storage infrastructure have been set up and SPHERE has officially opened to beta users in July 2024. Deterlab research and education users have also been migrated on to SPHERE and Deterlab has been decommissioned. The following table shows planned availability dates for different SPHERE enclaves.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-html-table paragraphs-item-html-table paragraphs-item-full paragraphs-item-8625&quot; id=&quot;html-table-8625&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-table-contents field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;Dev Started&lt;/th&gt;
    &lt;th&gt;Available for Use&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;SPHERE Infrastructure&lt;/td&gt;
    &lt;td&gt;Oct 2023&lt;/td&gt;
    &lt;td&gt;Mar 2024&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;General purpose nodes&lt;/td&gt;
    &lt;td&gt;May 2024&lt;/td&gt;
    &lt;td&gt;Oct 2025&lt;/td&gt;
    &lt;td&gt;* Old nodes available now&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;GPU nodes&lt;/td&gt;
    &lt;td&gt;Nov 2024&lt;/td&gt;
    &lt;td&gt;Apr 2025&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;CPS nodes&lt;/td&gt;
    &lt;td&gt;Nov 2024&lt;/td&gt;
    &lt;td&gt;Aug 2025&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Embedded compute nodes&lt;/td&gt;
    &lt;td&gt;May 2025&lt;/td&gt;
    &lt;td&gt;Jan 2026&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;IoT nodes&lt;/td&gt;
    &lt;td&gt;Oct 2023&lt;/td&gt;
    &lt;td&gt;Aug 2025&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Programmable nodes&lt;/td&gt;
    &lt;td&gt;Sep 2025&lt;/td&gt;
    &lt;td&gt;Mar 2026&lt;/td&gt;
    &lt;td&gt;* NICs available Fall 2025&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-table-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Table 2: SPHERE enclaves will be developed and available for use according to a staggered basis over the first three years of the four-year project. &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8626&quot; id=&quot;single-column-text-8626&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;We have developed four out of six of the planned portals - MAN, JUP, EDU, and AEC. SPHERE is currently in use by more than 100 researchers and more than 600 students (10-12 classes) per semester. We welcome new beta users! You can join us at &lt;/span&gt;&lt;a href=&quot;https://sphere-testbed.net/&quot;&gt;&lt;span&gt;https://sphere-testbed.net&lt;/span&gt;&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;As part of our community building and outreach efforts (spearheaded by Outreach Director David Balenson) we have engaged in extensive outreach at top cybersecurity conferences, symposia, and workshops, presenting posters and tutorials and leading birds-of-feather sessions. In 2024 we participated in the Internet Society Network and Distributed System Security (NDSS) Symposium, IEEE Symposium on Security and Privacy (S&amp;amp;P), IEEE European Symposium on Security and Privacy (EuroS&amp;amp;P), Cyber Security Experimentation and Test (CSET) Workshop, USENIX Security Symposium, ACM Conference on Computer and Communications Security (CCS), and Annual Computer Security Applications Conference (ACSAC). We also participated in two events that promote participation of underrepresented populations in computing, the CMD-IT/ACM Richard Tapia and SACNAS National Diversity in STEM (NDiSTEM) conferences.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;We further participated in professional meetings that gather researchers in cybersecurity and privacy and in cyberinfrastructure: the NSF Cyber Innovation for Cyberinfrastructure (CICI) and Secure and Trustworthy CYberspace (SaTC PI) meetings, the NSF Research Infrastructure Workshop (RIW), Mid-scale Experimental Research Infrastructure Forum (MERIF), the NSF Cybersecurity Summit, the FABRIC KNIT 8 workshop and Chameleon Community Workshop on Practical Reproducibility in HPC.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;In addition to in-person meetings we engage in e-mail-based outreach to researchers, looking to understand their experimental needs. We hope to reach every potential user and offer them a chance to provide feedback on their needs and our current plans. Researchers and educators can also provide such feedback via a survey form that is linked to our project’s page.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;We have also worked with NDSS and Conference on emerging Networking EXperiments and Technologies (CoNext) artifact evaluation committees, and have lined up collaborations with several more for the second year of the project. We hosted eight paid summer interns to help us build SPHERE. These interns were recruited from institutions that serve a large number of minority and first-generation college students. Interns worked on a variety of tasks, including software and hardware installation and testing, front end and back end development, documentation, and automation.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8627&quot; id=&quot;single-column-text-8627&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;4. Common vs. Private Research Infrastructure&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Many researchers today experiment using private infrastructure, such as personal devices or devices in their research group’s lab or their university. Even though some research solutions can be accurately evaluated in this setting, we argue that there are multiple reasons why evaluation on a common research infrastructure, such as SPHERE, brings substantial added benefits to the researcher and to the entire research community.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;First, SPHERE will offer the scale and diversity of hardware, including most modern devices, that are beyond reach of many labs and university datacenters, along with a dedicated, responsive staff to provide user support.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Second, SPHERE will offer reproducibility support and processes to promote wider artifact sharing and reuse. Thus users that release their artifacts on SPHERE are likely to see these artifacts reused by others, increasing visibility and impact of their research.&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Third, SPHERE will offer access to datasets, experimental tools, representative experimental scenarios and research artifacts shared by other users. These products will allow for easy experiment setup, where the researcher augments an existing, complex scenario instead of building the entire experiment from scratch. Artifact sharing further allows for head to head comparison between new and existing research products in same evaluation scenarios, which is necessary for research publications.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Finally, artifact sharing allows researchers to extend and enhance work of their peers, propelling the overall research community towards more sophisticated, more realistic and efficient solutions, which can more quickly transition to practice.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8628&quot; id=&quot;single-column-text-8628&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;5.     Conclusion&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;The SPHERE project is building a common, shared, community experimentation infrastructure for cybersecurity and privacy researchers and educators. We are excited to participate in its development, and we are working hard to learn about community research and education needs and incorporate these findings into our project plans. Please help us by collaborating with us —provide feedback, contribute research artifacts, become a beta user, or work as a SPHERE intern. This is your infrastructure—help us build it so we can all jointly benefit from it for many years to come!!&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8629&quot; id=&quot;single-column-text-8629&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Acknowledgement &amp;amp; Disclaimer&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;SPHERE is based upon work supported by the National Science Foundation under &lt;/span&gt;&lt;a href=&quot;https://www.nsf.gov/awardsearch/showAward?AWD_ID=2330066&quot;&gt;&lt;span&gt;Award #2330066&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;field field-name-field-lv2-pdf field-type-file field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;file&quot;&gt;&lt;img class=&quot;file-icon&quot; alt=&quot;PDF icon&quot; title=&quot;application/pdf&quot; src=&quot;https://www.usenix.org/core/modules/file/icons/application-pdf.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; &lt;a href=&quot;https://www.usenix.org/sites/default/files/sphere_article_for_login_magazine_20241216.pdf&quot; type=&quot;application/pdf; length=1735623&quot; title=&quot;sphere_article_for_login_magazine_20241216.pdf&quot;&gt;Download PDF&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;fieldset class=&quot;group-appendix field-group-fieldset form-wrapper&quot;&gt;&lt;legend&gt;&lt;span class=&quot;fieldset-legend&quot;&gt;Appendix&lt;/span&gt;&lt;/legend&gt;&lt;div class=&quot;fieldset-wrapper&quot;&gt;&lt;div class=&quot;field field-name-field-lvl2-appendix-refs field-type-text field-label-above&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;References:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-1&quot;&gt;&lt;/a&gt;&lt;p&gt;NPR. A ’Worst Nightmare’ Cyberattack: The Untold Story Of The SolarWinds Hack. &lt;a href=&quot;https://www.npr.org/2021/04/16/985439655/a-worst-nightmarecyberattack-The-untold-story-of-the-solarwinds-hack&quot;&gt;https://www.npr.org/2021/04/16/985439655/a-worst-nightmarecyberattack-The-untold-story-of-the-solarwinds-hack&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-2&quot;&gt;&lt;/a&gt;&lt;p&gt;TechTarget.com. Colonial Pipeline hack explained: Everything you need to know. &lt;a href=&quot;https://www.techtarget.com/whatis/feature/Colonial-Pipeline-hack-explained-Everything-you-need-to-know&quot;&gt;https://www.techtarget.com/whatis/feature/Colonial-Pipeline-hack-explained-Everything-you-need-to-know&lt;/a&gt;&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-3&quot;&gt;&lt;/a&gt;&lt;p&gt;Statista. Annual number of ransomware attacks worldwide from 2016 to first half 2022. &lt;a href=&quot;https://www.statista.com/statistics/494947/ransomware-attacks-per-yearworldwide/&quot;&gt;https://www.statista.com/statistics/494947/ransomware-attacks-per-yearworldwide/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-4&quot;&gt;&lt;/a&gt;&lt;p&gt;Government Technology. Hacktivism and DDOS Attacks Rise Dramatically in 2022. &lt;a href=&quot;https://www.govtech.com/blogs/lohrmann-on-cybersecurity/hacktivismand-ddos-attacks-rise-dramatically-in-2022&quot;&gt;https://www.govtech.com/blogs/lohrmann-on-cybersecurity/hacktivismand-ddos-attacks-rise-dramatically-in-2022&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-5&quot;&gt;&lt;/a&gt;&lt;p&gt;Sumeet Wadhwani, Spiceworks. Data Breaches Soared by 70% In Q3 2022 in an Otherwise Dull Year. &lt;a href=&quot;https://www.spiceworks.com/it-security/datasecurity/news/data-breach-report/&quot;&gt;https://www.spiceworks.com/it-security/datasecurity/news/data-breach-report/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-6&quot;&gt;&lt;/a&gt;&lt;p&gt;Balenson, D. et al. Cybersecurity artifacts workshop – report. &lt;a href=&quot;https://bit.ly/CyberArtifactsWkshp2022&quot;&gt;https://bit.ly/CyberArtifactsWkshp2022&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-7&quot;&gt;&lt;/a&gt;&lt;p&gt;Mirkovic, J., Balenson, D., Ravi, S., Garcia, L. &amp;amp; Benzel, T. Cybersecurity Experimentation Workshop – 2022 – Report. &lt;a href=&quot;https://bit.ly/CyberExperWkshp2022&quot;&gt;https://bit.ly/CyberExperWkshp2022&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-8&quot;&gt;&lt;/a&gt;&lt;p&gt;FABRIC (website). &lt;a href=&quot;https://portal.fabric-testbed.net/about/about-fabric&quot;&gt;https://portal.fabric-testbed.net/about/about-fabric&lt;/a&gt;&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/fieldset&gt;
</description><link>https://www.usenix.org/publications/loginonline/enabling-reproducibility-through-sphere-research-infrastructure</link><guid isPermaLink="false">https://www.usenix.org/publications/loginonline/enabling-reproducibility-through-sphere-research-infrastructure</guid><pubDate>Sun, 15 Dec 2024 16:00:00 GMT</pubDate><author>Jelena Mirkovic, Brian Kocoloski, David Balenson</author></item><item><title>Synthetic Monitoring &amp; End-to-End Testing: Two Sides of the Same Coin</title><description>&lt;div class=&quot;field field-name-field-lv2-publication-date field-type-datetime field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;date-display-single&quot;&gt;November 26, 2024&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-article-type field-type-taxonomy-term-reference field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Opinion&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-label-inline clearfix field-type-text-long field-pseudo-field field-pseudo-field--author-list&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Authors:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/synthetic-monitoring-e2e-testing-two-sides-same-coin#Carly%20Richmond&quot; title=&quot;Carly Richmond&quot;&gt;Carly Richmond&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-shepherds field-type-user-reference field-label-inline clearfix&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Article shepherded by:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;usenix-user-reference-names&quot;&gt;Laura Nolan&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraphs-items paragraphs-items-field-lv2-body paragraphs-items-field-lv2-body-full paragraphs-items-full&quot;&gt;
  &lt;div class=&quot;field field-name-field-lv2-body field-type-paragraphs field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8518 paragraphs-first-text&quot; id=&quot;single-column-text-8518&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Through using monitoring-as-code practices we can build common artefacts that validate documented application behaviour in both production and pre-production environments. Monitoring-as-code also provides a common definition of functionality, which can help to address cultural, prioritisation, and documentation issues.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8519&quot; id=&quot;single-column-text-8519&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;What is Synthetic Monitoring?&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Synthetic Monitoring is the use of automation frameworks to periodically check the availability of an application according to a fixed schedule. Traditionally, this has been implemented by probing production application services through health endpoints, or exercising key API calls and validating they are returning a 200 OK status. When errors are detected, alerts can be raised according to defined tolerance thresholds.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;In recent years, Synthetic Monitoring tools have gained the capability to automate user interface actions such as clicks and text entry against applications.&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8520&quot; id=&quot;article-image-8520&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/fig1_2.png&quot; width=&quot;1440&quot; height=&quot;808&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 1: Example of a modern synthetic monitoring tool (Elastic)&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8521&quot; id=&quot;single-column-text-8521&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;There are several types of Synthetic Monitoring tools:&lt;/span&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;span&gt;Probing tools that call application service endpoints for protocols such as HTTP, TCP and ICMP on a fixed schedule. The majority of monitoring tools provide some form of heartbeat capability using an agent running in a fixed location (or sometimes in the case of SaaS versions of these tools, from multiple locations).&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Recorder-based flows that capture browser activity and recreate that activity on a fixed schedule. Key examples include the browser-based monitors offered by Datadog and Splunk.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Web synthetic monitors that wrap modern automation libraries such as Playwright or Selenium where user workflows are simulated using code. Examples include Elastic Synthetics and Checkly, which use Playwright JS, and New Relic which has adopted Selenium.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8522&quot; id=&quot;single-column-text-8522&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;About End-to-End Testing &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;In End-to-End (E2E) Testing, developers and testers use automation frameworks to write tests that exercise the multiple steps users perform to achieve a particular goal in the application. This allows developers or dedicated testers to validate user interactions such as clicks and test entry will yield the expected results from the entire system. Modern examples include Playwright, Cypress, and Nightwatch, with the venerable Selenium also still widely used by testing teams.&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8523&quot; id=&quot;article-image-8523&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/fig2_1.png&quot; width=&quot;1440&quot; height=&quot;761&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 2: Example of a modern E2E testing tool (Cypress)&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8524&quot; id=&quot;single-column-text-8524&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;These tests are typically run as part of pre-production validation in Continuous Integration (CI) pipelines.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The key overlap between Synthetic Monitoring and E2E Testing is that they both automate the user workflow, albeit at different points in the software lifecycle. Specifically:&lt;/span&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;span&gt;E2E testing catches potential defects and incorrect behavioural assumptions in local development and merging stages via execution in CI pipelines. It can also be an indication of early performance issues if, for example, the duration of the suite or individual tests starts to increase without a known cause.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;Synthetic Monitoring is used to drive alerts to system operators of potential system unavailability, or, in some cases, incorrectness.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8525&quot; id=&quot;single-column-text-8525&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Challenges&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;In 2021, I struggled to understand why I, as a software engineer, was using Cypress for E2E tests on user features under development, while Site Reliability Engineer (SRE) colleagues were building similar workflows for synthetic monitors using Selenium. Since both of these tools are automation frameworks that can be used for monitoring and E2E testing, using two different tools doesn’t always make sense. In my case, testing of key user operations such as searching, filtering and selection cases were covered by both the software engineering team’s E2E test suite and the SRE team’s Synthetic Monitors. The differences in this case were the choice of tooling, the environment in which the tests were run, and the frequency of execution. For the SREs, Selenium fit with the tool they were using for monitoring production.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;There may not be 100% overlap in these tests used by developers and SREs. The suite of tests run as part of a CI pipeline to validate the application is generally much more comprehensive than a set of monitors. Despite that, it’s still possible to use a common toolchain. This allows for the sharing of application behaviour, testing scenarios, and monitoring between developers and SREs. Effectively, using monitoring-as-code shifts these monitors left, giving developers more responsibility for monitoring and availability. This is especially important in teams with developers on-call or, you-build-it-you-run-it practices. In subsequent sections we shall examine the main reasons why teams may use different tools for these related tasks, and also how using a common tool for both Synthetic Monitoring and E2E testing establishes benefits to these challenges.&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8526&quot; id=&quot;single-column-text-8526&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Lack of Common Monitoring and Testing Workflows&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Quite often it is assumed that using the monitor definitions as tests is not possible because the E2E suite may need to be more comprehensive to validate application functionality. Just because the workflows are different doesn&#39;t mean a common automation tool isn’t beneficial.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;There are some technical challenges to be overcome. Production data can be changed by tests, tests can contaminate analytics data, and side-effects in third party services (such as payments) can be triggered. These actions can be managed by the use of dedicated test accounts, by data cleanup tasks, and by test capabilities in third party services such as test cards. In the event that these mitigations are not possible, then E2E tests may not be suitable as monitors. E2E tests run in CI or pre-production environments can use mock or fake services to avoid many of these issues, which production systems cannot.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Some monitoring tools do support conditional disabling, allowing you to configure these specs as a local E2E test, or production monitor. This allows you to embrace monitoring-as-code practices and use production monitors as E2E tests with the same specification, while disabling execution of probing flows in production where needed.&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8527&quot; id=&quot;single-column-text-8527&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Execution Time &amp;amp; Storage&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Execution time of the test suite is also a challenge in both monitoring and testing scenarios. E2E test and monitoring suites do take considerable time to maintain and run, meaning that large suites can elongate the execution time of CI pipeline testing stages. Spikes in duration are a useful anomaly to be investigated, as shown in the Figure 3. But increased execution times can mean increased costs to run, and can be made worse if running in multiple locales.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8528&quot; id=&quot;article-image-8528&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/fig3_1.png&quot; width=&quot;1440&quot; height=&quot;394&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 3: Example monitor duration trend over time with 12h comparison (Elastic)&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8529&quot; id=&quot;single-column-text-8529&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;With the increasing focus on cost of software operations, minimising both the execution time of CI pipelines and monitor schedules running user workflows is an important consideration, as is minimising the number of failed runs due to configuration issues. By using monitoring-as-code, not only can we validate the monitors in a pre-production scenario to test them against the software, but it can help us identify key workflows of interest to potentially reduce the number of workflows in the CI pipeline too.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8530&quot; id=&quot;single-column-text-8530&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Enterprise Barriers&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Existing organisational structures in large enterprises foster disparate automation tools across development and operational spaces by making communication between teams more difficult. Conway&#39;s law makes it difficult to change organisational structures, as application ecosystems are tied to old structures. As a result, differing assumptions about application behaviour, user workflow, and performance are baked into the executed user workflows and need to be resolved between the developer and SRE-generated monitoring and test specifications.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;You could argue that moving to a you-build-it-you-run-it model, which is becoming more common, solves the issue. However, in some regulated areas that isn&#39;t possible due to segregation of development and operational roles. As a developer in banking, I wasn’t allowed to have persistent production access, only a carefully-monitored break glass option for emergency access. This made a dedicated operations team absolutely essential.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;SREs have a combination of engineering and production management skills that tend to make them good at writing monitoring-as-code. Specifically, SREs can encourage the rest of the organisation to converge on a common tool, potentially reducing cost and complexity for the entire organisation. However, a pitfall is that sharing a common tool does make it less clear who is responsible for maintaining the tool itself, along with any shared libraries and monitors. Collaboration and clarity around ownership are important.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Using the same automation tool for monitoring and testing also reduces the learning curve associated with teams making it easy to transfer not only knowledge of the tool, but knowledge of how applications function through the use of a common artefact. In this case the artefact is the monitor written using our automation tool of choice.&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8531&quot; id=&quot;single-column-text-8531&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Role Explosion&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;The rise of job titles such as SRE, DevOps Engineer, not to mention the emerging AI roles, make establishing a common understanding of user workflows difficult. While this allows for deep expertise in engineering, reliability and security practices, it also means we need to find common tools and artefacts that can help build a common understanding of how the product works.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Monitors-as-code use a common framework that can be understood by developers, testers and SREs, and document expectations on not just how a feature functions, but also availability expectations as the schedule metadata is included alongside the artefact.&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8532&quot; id=&quot;single-column-text-8532&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Poor Documentation&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Documentation is still an afterthought in software development. While comments, READMEs and practices such as Behaviour Driven Development (BDD) and Architecture-as-Code can give insight into the intended functionality, they can quickly become outdated.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Monitors built using the same automation tool can be used to document the intended user workflow, and the steps they are expected to take to navigate through the application. This can help support engineers understand what the steps are, and SREs can comment on availability expectations and error handling scenarios using a common artefact. Monitors are less likely to become outdated than documentation, as they are run frequently, either as part of CI, as part of production monitoring, or both.&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8533&quot; id=&quot;single-column-text-8533&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Conclusion&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;In recent years, tooling for E2E Testing and Synthetic Monitoring have converged on a common core of functionality. If SREs, developers, testers, and other groups who build and run monitors and E2E tests share the same tools, then this can support better communication and collaboration between these groups, as well as reducing cost and complexity.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</description><link>https://www.usenix.org/publications/loginonline/synthetic-monitoring-e2e-testing-two-sides-same-coin</link><guid isPermaLink="false">https://www.usenix.org/publications/loginonline/synthetic-monitoring-e2e-testing-two-sides-same-coin</guid><pubDate>Mon, 25 Nov 2024 16:00:00 GMT</pubDate><author>Carly Richmond</author></item><item><title>Sieve: Chaos Testing for Kubernetes Controllers</title><description>&lt;div class=&quot;field field-name-field-lv2-publication-date field-type-datetime field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;date-display-single&quot;&gt;November 14, 2024&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-article-type field-type-taxonomy-term-reference field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Research&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-label-inline clearfix field-type-text-long field-pseudo-field field-pseudo-field--author-list&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Authors:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/sieve-chaos-testing-kubernetes-controllers#Xudong%20Sun&quot; title=&quot;Xudong Sun&quot;&gt;Xudong Sun&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/sieve-chaos-testing-kubernetes-controllers#Wenqing%20Luo&quot; title=&quot;Wenqing Luo&quot;&gt;Wenqing Luo&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/sieve-chaos-testing-kubernetes-controllers#Jiawei%20Tyler%20Gu&quot; title=&quot;Jiawei Tyler Gu&quot;&gt;Jiawei Tyler Gu&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/sieve-chaos-testing-kubernetes-controllers#Aishwarya%20Ganesan&quot; title=&quot;Aishwarya Ganesan&quot;&gt;Aishwarya Ganesan&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/sieve-chaos-testing-kubernetes-controllers#Ramnatthan%20Alagappan&quot; title=&quot;Ramnatthan Alagappan&quot;&gt;Ramnatthan Alagappan&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/sieve-chaos-testing-kubernetes-controllers#Michael%20Gasch&quot; title=&quot;Michael Gasch&quot;&gt;Michael Gasch&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/sieve-chaos-testing-kubernetes-controllers#Lalith%20Suresh&quot; title=&quot;Lalith Suresh&quot;&gt;Lalith Suresh&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/sieve-chaos-testing-kubernetes-controllers#Tianyin%20Xu&quot; title=&quot;Tianyin Xu&quot;&gt;Tianyin Xu&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-shepherds field-type-user-reference field-label-inline clearfix&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Article shepherded by:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;usenix-user-reference-names&quot;&gt;Laura Nolan&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraphs-items paragraphs-items-field-lv2-body paragraphs-items-field-lv2-body-full paragraphs-items-full&quot;&gt;
  &lt;div class=&quot;field field-name-field-lv2-body field-type-paragraphs field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8497 paragraphs-first-text&quot; id=&quot;single-column-text-8497&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Modern cluster managers such as Kubernetes are architected as a cluster of loosely-coupled &lt;em&gt;controllers&lt;/em&gt;,&amp;nbsp;&lt;/span&gt;each running as a microservice. In Kubernetes, &lt;em&gt;all&lt;/em&gt; the cluster management logic is encoded in different controllers. These controllers include builtin controllers for managing cluster resources and providing management services (e.g., the Kubernetes StatefulSet controller and Pod autoscaler) and custom controllers for managing specific applications (e.g., a Cassandra controller). Today, thousands of controllers are implemented by commercial vendors and open-source communities to extend Kubernetes with new capabilities [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/sieve-chaos-testing-kubernetes-controllers#reference-8&quot;&gt;8&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/sieve-chaos-testing-kubernetes-controllers#reference-13&quot;&gt;13&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/sieve-chaos-testing-kubernetes-controllers#reference-15&quot;&gt;15&lt;/a&gt;]. All these controllers perform critical operations, such as resource provisioning, software upgrades, configuration updates, and autoscaling, making their correctness paramount.&lt;/p&gt;&lt;p&gt;&lt;span&gt;Achieving controller correctness is fundamentally challenging. Modern cluster managers follow the&amp;nbsp;&lt;/span&gt;&lt;em&gt;state-reconciliation principle&lt;/em&gt; that each controller continuously monitors a subset of the cluster state and reconciles the &lt;em&gt;current&lt;/em&gt; state of the cluster to match a &lt;em&gt;desired&lt;/em&gt; state. A reliable controller should reach the desired state starting from any potential cluster state while tolerating unexpected failures, networking interruptions, concurrency and asynchrony issues. Buggy controllers may cause severe failures, including application outage, data loss, and security issues.&lt;/p&gt;&lt;p&gt;For example, Figure 1 shows a bug in a Kubernetes controller for managing Cassandra [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/sieve-chaos-testing-kubernetes-controllers#reference-5&quot;&gt;5&lt;/a&gt;]. The bug&amp;nbsp;prevents the Cassandra cluster from auto-scaling and leaks storage resources (decommissioned volumes in gray are never deleted). This is because the controller lacks crash safety—it fails to recover from an intermediate state due to a crash between deleting a Cassandra pod and updating the Finalizing&amp;nbsp;phase.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8498&quot; id=&quot;article-image-8498&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/casskop_ds_1_1-1.png&quot; width=&quot;1440&quot; height=&quot;857&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 1: A bug in a Cassandra controller detected by Sieve [5]. The controller cannot recover from an intermediate state introduced by Sieve using a crash. As a consequence, the controller cannot auto-scale the Cassandra cluster and leaks storage resources. The bug has been fixed. The code snippet is significantly simplified for clarity; the real code spans 70+ functions and 2,000+ lines of Go.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8499&quot; id=&quot;single-column-text-8499&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;The above crash-safety bug is only one of the myriad kinds of reliability issues that affect controllers. We&amp;nbsp;&lt;/span&gt;find that controllers also experience bugs caused by state inconsistencies due to effects of asynchronous operations or uncoordinated concurrent interactions between controllers. For example, a controller might not always observe the latest version of the cluster state and might miss some version of the cluster state [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/sieve-chaos-testing-kubernetes-controllers#reference-19&quot;&gt;19&lt;/a&gt;].&lt;/p&gt;&lt;p&gt;&lt;span&gt;Sieve is a chaos testing tool for cluster management controllers. Sieve is powered by a fundamental&amp;nbsp;&lt;/span&gt;insight that a controller’s actions are strictly a function of its view of the current cluster state—a controller constructs its internal state and takes actions to achieve the desired state based on the cluster state it observes. Sieve drives unmodified controllers to their potentially buggy corners by systematically and extensively perturbing the controller’s view of the cluster state. Sieve’s perturbations are realized by injecting faults (e.g., crashes) that controllers should tolerate.&lt;/p&gt;&lt;p&gt;&lt;span&gt;Different from many existing chaos testing tools, Sieve performs &lt;em&gt;exhaustive&lt;/em&gt; testing without depending&amp;nbsp;&lt;/span&gt;on hypotheses about vulnerable regions in the code where bugs may lie. Sieve tests a controller by exhaustively introducing state perturbations through failures, delays, and reconfigurations. To detect &lt;em&gt;diverse&lt;/em&gt; bugs with different causes, Sieve supports three perturbation patterns that expose controllers to 1) intermediate &lt;span&gt;states (Figure 1), 2) stale states (or past cluster states), and 3) unobserved states due to missing some cluster&amp;nbsp;&lt;/span&gt;state transitions. Sieve detects both &lt;em&gt;safety&lt;/em&gt; and &lt;em&gt;liveness &lt;/em&gt;bugs using automatic differential oracles that compare the cluster-state transitions with and without perturbations. Sieve also deterministically reproduces the detected bugs to help developers localize bugs in the source code and continuously iterate on bug fixes.&lt;/p&gt;&lt;p&gt;&lt;span&gt;Sieve has detected 46 new bugs with serious consequences in ten popular Kubernetes controllers. These&amp;nbsp;&lt;/span&gt;controllers manage critical cloud applications, including Cassandra, MongoDB and ZooKeeper. For each tested controller, Sieve’s testing finishes within seven hours (a nightly run) on a cluster of 11 machines.&lt;/p&gt;&lt;p&gt;&lt;span&gt;Sieve is publicly available at &lt;a href=&quot;https://github.com/sieve-project/sieve&quot; target=&quot;_blank&quot; title=&quot;https://github.com/sieve-project/sieve&quot;&gt;https://github.com/sieve-project/sieve&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8500&quot; id=&quot;single-column-text-8500&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;1 The State-reconciliation Principle&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;All Kubernetes controllers follow the state-reconciliation principle. Concretely, in Kubernetes, the cluster&amp;nbsp;&lt;/span&gt;state is represented as a collection of objects stored in a distributed datastore, i.e., etcd in most cases. The datastore is logically centralized as it uses a consensus protocol to achieve consistency. Every entity in the cluster has a corresponding object in the cluster state, including pods, volumes, nodes, and groups of applications. All controllers interact with the cluster state via an ensemble of &lt;em&gt;API servers&lt;/em&gt; using a REST API. The controllers continuously monitor a part of the cluster state and perform state reconciliation whenever the current state does not match the desired state. The controllers perform reconciliation by querying and manipulating the state objects via an API server. When querying an object, a controller might issue a quorum read on etcd for consistency, or directly read from the API server’s local cache for performance. Figure 2 illustrates how a controller interacts with the cluster state typically.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8501&quot; id=&quot;article-image-8501&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/interaction-1.png&quot; width=&quot;1440&quot; height=&quot;379&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 2: How a controller interacts with the cluster state. The controller reads the objects from its local cache (which is populated by notifications from the API server) and updates the objects stored in etcd.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8502&quot; id=&quot;single-column-text-8502&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;2 Sieve’s Approach&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;The key idea of Sieve is to automatically and extensively perturb an unmodified controller’s view of the&amp;nbsp;&lt;/span&gt;cluster states in ways it is expected to tolerate. Sieve leverages the fundamental nature of state-reconciliation systems – these systems often have a simple and highly introspectable state-centric interface with which controllers interact with the cluster state. Such interfaces essentially do no more than reads and writes, or receive notifications regarding state-object changes. All objects share a common schema, which makes any arbitrary object highly introspectable. In Kubernetes, the state-centric interface is the REST API (in client-go [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/sieve-chaos-testing-kubernetes-controllers#reference-2&quot;&gt;2&lt;/a&gt;]) used by controllers to Get, List, Create, Update and Delete state objects, and all state objects have an identical set of fields representing their metadata (ObjectMeta). This enables a degree of automation that is hard to achieve otherwise.&lt;/p&gt;&lt;p&gt;&lt;span&gt;Sieve performs &lt;em&gt;exhaustive&lt;/em&gt; reliability testing. For each test workload, Sieve first generates a reference&amp;nbsp;&lt;/span&gt;run by running the workload without any perturbation. Sieve then analyzes the reference run to generate &lt;em&gt;test plans&lt;/em&gt;. A test plan describes a concrete perturbation, including &lt;em&gt;what&lt;/em&gt; faults to inject and &lt;em&gt;when&lt;/em&gt; to inject them to effectively drive the controller to see the target cluster state. For example, to test controllers against intermediate cluster states, Sieve generates test plans that encode each potential point to inject a controller crash. When testing the Cassandra controller in Figure 1, Sieve covers the crash points including after deleting the pod, updating the phase and deleting the volume.&lt;/p&gt;&lt;p&gt;&lt;span&gt;To achieve high test efficiency, Sieve prunes redundant or futile test plans. Sieve avoids a test plan&amp;nbsp;&lt;/span&gt;if it is clear that it cannot causally lead to a new target cluster state. As an example, when introducing intermediate states, Sieve crashes the controller &lt;em&gt;only&lt;/em&gt; after effective state updates – ineffective updates, such as deleting a non-existing object, do not introduce any new cluster state. Sieve’s test pruning technique reduces test plans by 46.7%–99.6% in our experience.&lt;/p&gt;&lt;p&gt;&lt;span&gt;To help developers debug test failures, Sieve &lt;em&gt;deterministically&lt;/em&gt; reproduces each bug triggered by its&amp;nbsp;&lt;/span&gt;perturbation by precisely replaying the bug-triggering fault injection. To reproduce the bug in Figure 1, Sieve injects a crash right after the controller deletes the pod and before it updates the phase to Finalizing in each repeated test run with the same test plan. Sieve’s reproducibility helps us localize the bug in the source code and develop a patch that fixes this bug. To precisely control the timing of fault injection, Sieve automatically instruments the client-go library and recompiles the controller with the instrumented library (for this reason, the controller source code must be available).&lt;/p&gt;&lt;p&gt;&lt;span&gt;The key techniques that power Sieve’s bug finding ability are its 1) perturbation patterns for triggering&amp;nbsp;&lt;/span&gt;&lt;em&gt;diverse&lt;/em&gt; bugs with different causes, and 2) differential test oracles for catching bugs that cause &lt;em&gt;safety&lt;/em&gt; and &lt;em&gt;liveness&lt;/em&gt; violations. We now present how Sieve’s perturbation patterns and differential test oracles work.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8503&quot; id=&quot;single-column-text-8503&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;h3&gt;&lt;span&gt;2.1 Perturbation Patterns&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;Sieve’s perturbations are produced by injecting targeted faults (e.g., crashes, delays, and connection changes)&amp;nbsp;&lt;/span&gt;when specific cluster-state changes (triggering conditions) happen. Notably, the perturbation strategy allows Sieve to &lt;em&gt;decouple policy from mechanism&lt;/em&gt;. The decoupling makes it easy to extend existing policies or add new policies by orchestrating the underlying perturbation mechanisms. Specifically, a policy defines a view Sieve exposes to the controller at a particular condition, while the mechanism specifies how to inject faults to create the view. Sieve automatically generates test plans for each policy; each test plan introduces a concrete perturbation based on a specification of a triggering condition and a fault to inject when that condition happens.&lt;/p&gt;&lt;p&gt;&lt;span&gt;Sieve currently supports three patterns (or policies) to perturb a controller’s view: &lt;/span&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;span&gt;intermediate states, &lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;stale&amp;nbsp;&lt;/span&gt;states, and&lt;/li&gt;&lt;li&gt;&lt;span&gt;unobserved states. &lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;They represent valid inconsistencies in the view that a controller could see&amp;nbsp;&lt;/span&gt;due to common faults as well as the inherent asynchrony of the overall distributed system. Note that these are not the only patterns in which faults can occur, but cover a broad range of faults that a component in a distributed system is expected to handle gracefully. Sieve can be extended to incorporate other patterns in the future.&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Intermediate states.&lt;/strong&gt; Intermediate states occur when controllers fail in the middle of a reconciliation&amp;nbsp;&lt;/span&gt;before finishing all the state updates they would have otherwise issued. After recovery (e.g., Kubernetes automatically starts a new instance of a crashed controller), the controller needs to resume reconciliation from the intermediate state left behind.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8504&quot; id=&quot;article-image-8504&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/rabbitmq_operator_ds_1-1.png&quot; width=&quot;1440&quot; height=&quot;760&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 3: An intermediate-state bug in a RabbitMQ controller detected by Sieve [14]. The controller fails to recover from the intermediate state introduced by Sieve; the controller does not successfully resize the storage volume.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8505&quot; id=&quot;single-column-text-8505&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Figure 3 illustrates how Sieve tests the official RabbitMQ controller with intermediate-state perturba&lt;/span&gt;tions and reveals a new bug. The test workload attempts to resize the storage volume from 10GB to 15GB. The resizing is implemented with two updates: 1) updating VolCur to 15GB; 2) updating VolReq to 15GB which triggers Kubernetes to resize the volume. The controller issues updates when VolCur is smaller than the desired volume size. During testing, Sieve crashes the controller between the two updates, which creates an intermediate state where VolCur is updated, but VolReq is not. The controller cannot recover from the intermediate state and the resizing never succeeds. The bug has been fixed with 700+ lines of Go code to revamp the volume resizing logic. In addition, the developers added eight new tests along with the fix to exercise how the controller handles different intermediate states, which is what Sieve performs automatically.&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Stale states.&lt;/strong&gt; Controllers often operate on stale states, due to asynchrony and the extensive uses of caches&amp;nbsp;&lt;/span&gt;for performance and scalability. As shown in Figure 2, controllers do not directly interact with the strongly consistent data stores, but are connected with API servers. The states cached at API servers could be stale due to delayed notifications. Controllers are expected to tolerate stale views that lag behind the latest states maintained in the data store.&lt;/p&gt;&lt;p&gt;&lt;span&gt;Tolerating stale views correctly is nontrivial. For example, a Kubernetes controller’s view may “time&amp;nbsp;&lt;/span&gt;travel” to a state it observed in the past. Time traveling occurs when there are multiple API servers operating in a high-availability setup, when the controller reconnects to a stale API server that has not yet seen some updates to the cluster state. The reconnection can be triggered by failover, load balancing, or reconfigurations. Controllers are expected to avoid updating the cluster state wrongly based on its stale view of the cluster state. For example, when sending a deletion request the controller can piggyback its most recently observed cluster state’s resource version (in the preconditions), and ask etcd to check the freshness of the resource version before the deletion takes effect.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8506&quot; id=&quot;article-image-8506&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/mongodb_operator_ss_1-1.png&quot; width=&quot;1440&quot; height=&quot;1039&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 4: A stale-state bug in a MongoDB controller detected by Sieve [10]. The controller experiences a “time-travel” and observes a stale state. It makes wrong reconciliation action based on the stale state (deleting all the pods and volumes) which leads to application outages and data loss.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8507&quot; id=&quot;single-column-text-8507&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Figure 4 illustrates how Sieve tests Percona’s MongoDB controller with stale-state perturbation and re&lt;/span&gt;veals a new bug that leads to both application outages and data loss. To support graceful MongoDB cluster shutdowns, the controller waits to see a non-nil deletion timestamp (DeletionTimestamp) field attached to the state object representing the MongoDB cluster (a common practice to give systems time to react to an impending deletion [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/sieve-chaos-testing-kubernetes-controllers#reference-3&quot;&gt;3&lt;/a&gt;]). When the controller sees this change, it deletes all the pods and volumes of the MongoDB cluster.&lt;/p&gt;&lt;p&gt;&lt;span&gt;Sieve drives the controller to mistakenly delete a live MongoDB cluster by introducing a time-travel&amp;nbsp;&lt;/span&gt;perturbation. With a workload that first shuts down a MongoDB cluster and then recreates a new instance of the same cluster, Sieve waits till the cluster is recreated and then introduces a time-travel perturbation. The perturbation causes the controller to see the deletion timestamp being applied to the &lt;em&gt;already-deleted&amp;nbsp;&lt;/em&gt;cluster. Consequently, the controller mistakenly shuts down the newly created cluster. This revealed that the controller should be checking for the UIDs of clusters, not just their names.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Unobserved states.&lt;/strong&gt; By design, controllers may not observe every cluster-state change in the system. The full history of changes made to the cluster state is prohibitively expensive to maintain and expose to clients [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/sieve-chaos-testing-kubernetes-controllers#reference-19&quot;&gt;19&lt;/a&gt;]. Controllers are hence expected to be designed as &lt;em&gt;level-triggered&lt;/em&gt; systems (opposed to being&amp;nbsp;&lt;em&gt;edge-triggered&lt;/em&gt;), i.e., a controller’s decision must be based on the currently observable cluster state (level) [9], not on seeing every single change to the cluster state (edge).&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8508&quot; id=&quot;article-image-8508&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/cassandra_operator_us_1-1.png&quot; width=&quot;1440&quot; height=&quot;842&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 5: An unobserved-state bug in a Cassandra controller detected by Sieve [4]. The controller misses a transient state where the pod has a non-nil deletion timestamp. It thus fails to delete the volumes, leaking storage resources. The bug also prevents new Cassandra pods from rejoining.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8509&quot; id=&quot;single-column-text-8509&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Figure 5 illustrates how Sieve tests Instaclustr’s Cassandra controller using unobserved-state perturba&lt;/span&gt;tions and reveals a new bug that leads to resource leaks and service failures. The test workload first scales down and then scales up storage volumes of the Cassandra cluster. During scale-down, the controller removes volumes when it learns that the corresponding pods were marked for deletion (a non-nil deletion timestamp field is set on the pod object, similar to the previous example). The pods’ lifecycles (including deletions) are managed by a built-in controller called a StatefulSet controller. Sieve pauses notifications to the Cassandra controller for a window such that it does not see these deletion marking events by the StatefulSet controller. This causes the Cassandra controller to not delete the corresponding volumes even though it has the right information to make that call (i.e., its view has volumes created by it that do not have pods attached to them).&lt;/p&gt;&lt;p&gt;&lt;span&gt;Hence, the volume never gets deleted, leaking the storage resource. The bug also prevents the controller&amp;nbsp;&lt;/span&gt;from scaling the Cassandra cluster – newly-created pods try to reuse the dangling volumes and cannot rejoin using the cluster metadata already in them (as it represents a node that was decommissioned). The bug has been fixed by adding finalizers – a coordination mechanism in Kubernetes that allows the Cassandra controller to complete the required cleanup operations before the pods can be deleted.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8510&quot; id=&quot;single-column-text-8510&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;h3&gt;&lt;span&gt;2.2 Differential Test Oracles&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;Sieve has generic, effective oracles to automatically detect safety and liveness issues. The oracles detect&amp;nbsp;&lt;/span&gt;buggy controller behavior based on the cluster states during and at the end of the test run.&lt;/p&gt;&lt;p&gt;&lt;span&gt;In our experience, many buggy controller behaviors do not show immediate or obvious symptoms (e.g.,&amp;nbsp;&lt;/span&gt;crashes, hangs, and error messages). Instead, they lead to data loss, security issues, resource leaks, and unexpected application behavior which is hard to check. We therefore develop differential test oracles that compare cluster states in a reference run versus those in test runs—with inconsistencies typically indicating buggy behavior.&lt;/p&gt;&lt;p&gt;&lt;span&gt;We found that Sieve’s differential oracles vastly outperform developer-written assertions in the test&amp;nbsp;&lt;/span&gt;suites of the controllers we evaluated, because Sieve’s oracles systematically examine all the state objects and their evolution during testing. It is challenging for developers to manually codify oracles that comprehensively consider the large number of relevant states.&lt;/p&gt;&lt;p&gt;&lt;span&gt;Note that Sieve also implements regular error checks for obvious anomalies, including exceptions, error&amp;nbsp;&lt;/span&gt;codes and timeouts. Developers can also add domain-specific oracles.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8511&quot; id=&quot;single-column-text-8511&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;h4&gt;&lt;span&gt;2.2.1 Checking End States&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;Sieve systematically checks the end state after running a workload. Specifically, our oracles check the count&amp;nbsp;&lt;/span&gt;of state objects by type and the field values of all the objects. It compares the end state of the test run versus the reference run. Sieve fails the test if it finds inconsistencies between the end states and prints human-readable messages to pinpoint inconsistencies.&lt;/p&gt;&lt;p&gt;For example, in a MongoDB controller bug [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/sieve-chaos-testing-kubernetes-controllers#reference-11&quot;&gt;11&lt;/a&gt;], the controller fails to create an SSL certificate used for&amp;nbsp;securing communications inside the MongoDB cluster. This causes the controller to fall back to insecure communications. Such security issues do not manifest in the form of crashes or error messages. Sieve however automatically catches the bug, because the certificate object in the faulty run does not exist in the cluster state, which is different from a normal run.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8512&quot; id=&quot;single-column-text-8512&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;h4&gt;&lt;span&gt;2.2.2 Checking State-Update Summaries&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;Besides the end state, Sieve also checks how the controller updates the cluster state over time. It does so by&amp;nbsp;&lt;/span&gt;comparing summaries of constructive and destructive state updates for each object (e.g., Create and Delete operations). Such checks are complementary to the end-state checks, because a correct end state does not imply that the controller behavior is always correct during the test. We find that buggy behavior can end in correct states (same as in the reference runs).&lt;/p&gt;&lt;p&gt;For example, a NiFi controller bug [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/sieve-chaos-testing-kubernetes-controllers#reference-12&quot;&gt;12&lt;/a&gt;] causes the controller to fail to reload configuration files, but the&amp;nbsp;end state is the same as a normal run. Sieve flags this by noting the NiFi pod receives a Create and a Delete operation (to reload the configuration) in the normal run, but neither appears in the faulty run.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8513&quot; id=&quot;single-column-text-8513&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;h4&gt;&lt;span&gt;2.2.3 Dealing with Nondeterminism&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;Sieve’s differential oracles can introduce false alarms because the shape of a state object (the set of fields&amp;nbsp;&lt;/span&gt;and their values) might be nondeterministic. Sieve identifies nondeterministic field values by running the test workloads without perturbation multiple times, and then comparing the values of each field in each state object. If a field has nondeterministic values (typically IP addresses, timestamps, or even random port numbers), Sieve masks the field values when comparing the states. Note that Sieve can still spot unexpected changes to the set of fields on the object (e.g., missing deletion timestamp fields).&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8514&quot; id=&quot;single-column-text-8514&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;3 Our Experience with Sieve&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;We have applied Sieve to ten popular controllers from the Kubernetes ecosystem for managing widely-used&amp;nbsp;&lt;/span&gt;cloud systems, including Cassandra, MongoDB and ZooKeeper. The controllers are either developed by the official development team of the corresponding system, or by companies that have production-grade offerings around said systems. To test each controller using Sieve, we provide 2–5 basic, representative end-to-end test workloads. Each workload exercises a feature of the controller (e.g., deployment, scaling, reconfiguration).&lt;/p&gt;&lt;p&gt;&lt;span&gt;Sieve finds a total of 46 new bugs in the evaluated controllers. Those bugs include 11 intermediate-&lt;/span&gt;state bugs, 19 stale-state bugs, 7 unobserved-state bugs, and 9 bugs indirectly detected by Sieve during testing. Sieve finds new bugs in all the evaluated controllers. We have reported all these bugs. So far, 35 of them have been confirmed and 22 have been fixed. No bug report was rejected. Many bugs have severe consequences, such as application outages, security issues, service failures, and data loss. The Sieve project maintains the list of found bugs [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/sieve-chaos-testing-kubernetes-controllers#reference-1&quot;&gt;1&lt;/a&gt;].&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8515&quot; id=&quot;single-column-text-8515&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;4 After Sieve&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;The original Sieve paper [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/sieve-chaos-testing-kubernetes-controllers#reference-17&quot;&gt;17&lt;/a&gt;] was published in 2022 and we have continued working on testing Kubernetes&amp;nbsp;controllers since that. After Sieve, we built Acto [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/sieve-chaos-testing-kubernetes-controllers#reference-6&quot;&gt;6&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/sieve-chaos-testing-kubernetes-controllers#reference-7&quot;&gt;7&lt;/a&gt;], an end-to-end functional testing tool for controllers. Acto does not perform fault injection testing, but it complements Sieve by automatically generating high-coverage, representative test workloads that can be used by Sieve.&lt;/p&gt;&lt;p&gt;&lt;span&gt;After seeing many bugs found by Sieve and Acto, we started to explore a new approach to guarantee&amp;nbsp;&lt;/span&gt;controller correctness and reliability. Anvil [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/sieve-chaos-testing-kubernetes-controllers#reference-16&quot;&gt;16&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/sieve-chaos-testing-kubernetes-controllers#reference-18&quot;&gt;18&lt;/a&gt;] is a framework that allows developers to use formal verification to build clean-slate controllers that are &lt;em&gt;proved&lt;/em&gt; to be free of many types of bugs found by Sieve and Acto. We used Sieve and Acto to empirically evaluate the verified controllers built using Anvil.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8516&quot; id=&quot;single-column-text-8516&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;5 Conclusion&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Ensuring the reliability of Kubernetes controllers is a pressing and challenging problem. We present Sieve,&amp;nbsp;&lt;/span&gt;a chaos testing technique for Kubernetes controllers. Sieve performs exhaustive and deterministic testing and is effective in finding bugs. Our goal is to make Sieve a part-and-parcel of every controller developers’ toolkit, and to harden the growing number of controllers that power today’s data centers. Sieve is publicly available at &lt;a href=&quot;https://github.com/sieve-project/sieve&quot; target=&quot;_blank&quot; title=&quot;https://github.com/sieve-project/sieve&quot;&gt;https://github.com/sieve-project/sieve&lt;/a&gt;. We refer readers interested in more technical details and evaluation results to the original paper which is available at &lt;a href=&quot;https://github.com/sieve-project/sieve/blob/main/docs/paper-osdi.pdf&quot; target=&quot;_blank&quot; title=&quot;https://github.com/sieve-project/sieve/blob/main/docs/paper-osdi.pdf&quot;&gt;https://github.com/sieve-project/sieve/blob/main/docs/paper-osdi.pdf&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;fieldset class=&quot;group-appendix field-group-fieldset form-wrapper&quot;&gt;&lt;legend&gt;&lt;span class=&quot;fieldset-legend&quot;&gt;Appendix&lt;/span&gt;&lt;/legend&gt;&lt;div class=&quot;fieldset-wrapper&quot;&gt;&lt;div class=&quot;field field-name-field-lvl2-appendix-refs field-type-text field-label-above&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;References:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-1&quot;&gt;&lt;/a&gt;&lt;p&gt;[1] Automatic Reliability Testing for Kubernetes Controllers.&lt;a href=&quot;https://github.com/sieve-project/sieve&quot; target=&quot;_blank&quot; title=&quot;//github.com/sieve-project/sieve&quot;&gt; https://github.com/sieve-project/sieve&lt;/a&gt;, 2024.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-2&quot;&gt;&lt;/a&gt;&lt;p&gt;[2] kubernetes/client-go. &lt;a href=&quot;https://github.com/kubernetes/client-go&quot; target=&quot;_blank&quot; title=&quot;https://github.com/kubernetes/client-go&quot;&gt;https://github.com/kubernetes/client-go&lt;/a&gt;, 2024.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-3&quot;&gt;&lt;/a&gt;&lt;p&gt;[3] ALPAR, A. Using Finalizers to Control Deletion. &lt;a href=&quot;https://kubernetes.io/blog/2021/05/14/using-finalizers-to-control-deletion/&quot; target=&quot;_blank&quot; title=&quot;https://kubernetes.io/blog/2021/05/14/using-finalizers-to-control-deletion/&quot;&gt;https://kubernetes.io/blog/2021/05/14/using-finalizers-to-control-deletion/&lt;/a&gt;, May 2021.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-4&quot;&gt;&lt;/a&gt;&lt;p&gt;[4] CASSANDRA-OPERATOR-398. Reconcile() fails to delete the corresponding pvc if missing deletionTimestamp ofCassandra pod. &lt;a href=&quot;https://github.com/instaclustr/cassandra-operator/issues/398&quot; target=&quot;_blank&quot; title=&quot;https://github.com/instaclustr/cassandra-operator/issues/398&quot;&gt;https://github.com/instaclustr/cassandra-operator/issues/398&lt;/a&gt;, Jan. 2021.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-5&quot;&gt;&lt;/a&gt;&lt;p&gt;[5] CASSKOP-370. [BUG] Casskop fails to clean up PVCs and refuses to handle user requests after crash and restart.&amp;nbsp;&lt;a href=&quot;https://github.com/Orange-OpenSource/casskop/issues/370&quot; target=&quot;_blank&quot; title=&quot;https://github.com/Orange-OpenSource/casskop/issues/370&quot;&gt;https://github.com/Orange-OpenSource/casskop/issues/370&lt;/a&gt;, 2021.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-6&quot;&gt;&lt;/a&gt;&lt;p&gt;[6] GU, J. T., SUN, X., TANG, Z., WANG, C., VAZIRI, M., LEGUNSEN, O., AND XU, T. Acto: Push-Button End-to-End&amp;nbsp;Testing for Operation Correctness of Kubernetes Operators. In USENIX ;login: (Aug. 2024).&amp;nbsp;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/acto-push-button-end-end-testing-operation-correctness-kubernetes-operators&quot; target=&quot;_blank&quot;&gt;https://www.usenix.org/publications/loginonline/acto-push-button-end-end-testing-operation-correctness-kubernetes-operators&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-7&quot;&gt;&lt;/a&gt;&lt;p&gt;[7] GU, J. T., SUN, X., ZHANG, W., JIANG, Y., WANG, C., VAZIRI, M., LEGUNSEN, O., AND XU, T. Acto: Automatic&amp;nbsp;End-to-End Testing for Operation Correctness of Cloud System Management. In Proceedings of the 29th ACM Symposium on Operating Systems Principles (SOSP’23) (Oct. 2023).&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-8&quot;&gt;&lt;/a&gt;&lt;p&gt;[8] HALL, C. AWS, Google, Microsoft, Red Hat’s New Registry to Act as Clearing House for Kubernetes Operators. &lt;a href=&quot;https://www.datacenterknowledge.com/open-source/aws-google-microsoft-red-hats-new-registry-act-clearing-house-kubernetes-operators&quot; target=&quot;_blank&quot; title=&quot;https://www.datacenterknowledge.com/open-source/aws-google-microsoft-red-hats-new-registry-act-clearing-house-kubernetes-operators&quot;&gt;https://www.datacenterknowledge.com/open-source/aws-google-microsoft-red-hats-new-registry-act-clearing-house-kubernetes-operators&lt;/a&gt;, Mar. 2019.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-9&quot;&gt;&lt;/a&gt;&lt;p&gt;[9] HOCKIN, T. Kubernetes: Edge vs. Level Triggered Logic. &lt;a href=&quot;https://speakerdeck.com/thockin/edge-vs-level-triggered-logic&quot; target=&quot;_blank&quot; title=&quot;https://speakerdeck.com/thockin/edge-vs-level-triggered-logic&quot;&gt;https://speakerdeck.com/thockin/edge-vs-level-&lt;/a&gt;&lt;a href=&quot;https://speakerdeck.com/thockin/edge-vs-level-triggered-logic&quot; target=&quot;_blank&quot; title=&quot;https://speakerdeck.com/thockin/edge-vs-level-triggered-logic&quot;&gt;triggered-logic&lt;/a&gt;, June 2017.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-10&quot;&gt;&lt;/a&gt;&lt;p&gt;[10] K8SPSMDB-430. [BUG] Stale deletion timestamps lead to undesired statefulset and PVC deletion. &lt;a href=&quot;https://jira.percona.com/browse/K8SPSMDB-430&quot; target=&quot;_blank&quot; title=&quot;https://jira.percona.com/browse/K8SPSMDB-430&quot;&gt;https://&lt;/a&gt;&lt;a href=&quot;https://jira.percona.com/browse/K8SPSMDB-430&quot; target=&quot;_blank&quot; title=&quot;https://jira.percona.com/browse/K8SPSMDB-430&quot;&gt;jira.percona.com/browse/K8SPSMDB-430&lt;/a&gt;, 2021.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-11&quot;&gt;&lt;/a&gt;&lt;p&gt;[11] K8SPSMDB-578. [BUG] Failure of creating SSL-internal certificates when the controller crashes and restarts at&amp;nbsp;some particular point. &lt;a href=&quot;https://jira.percona.com/browse/K8SPSMDB-578&quot; target=&quot;_blank&quot; title=&quot;https://jira.percona.com/browse/K8SPSMDB-578&quot;&gt;https://jira.percona.com/browse/K8SPSMDB-578&lt;/a&gt;, 2021.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-12&quot;&gt;&lt;/a&gt;&lt;p&gt;[12] NIFIKOP-49. [BUG] NiFi configuration cannot be reloaded if the controller crashes and restarts in the middle of a&amp;nbsp;reconciliation. &lt;a href=&quot;https://github.com/konpyutaika/nifikop/issues/49&quot; target=&quot;_blank&quot; title=&quot;https://github.com/konpyutaika/nifikop/issues/49&quot;&gt;https://github.com/konpyutaika/nifikop/issues/49&lt;/a&gt;, 2021.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-13&quot;&gt;&lt;/a&gt;&lt;p&gt;[13] PIPES, J., HAUSENBLAS, M., AND TABER, N. Introducing the AWS Controllers for Kubernetes (ACK). &lt;a href=&quot;https://aws.amazon.com/cn/blogs/containers/aws-controllers-for-kubernetes-ack/&quot; target=&quot;_blank&quot; title=&quot;https://aws.amazon.com/cn/blogs/containers/aws-controllers-for-kubernetes-ack/&quot;&gt;https://aws.amazon.com/cn/blogs/containers/aws-controllers-for-kubernetes-ack/&lt;/a&gt;, Aug. 2020.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-14&quot;&gt;&lt;/a&gt;&lt;p&gt;[14] RABBITMQ-OPERATOR-782. [BUG] PVC expansion fails if the controller crashes in the middle of a reconciliation.&amp;nbsp;&lt;a href=&quot;https://github.com/rabbitmq/cluster-operator/issues/782&quot; target=&quot;_blank&quot; title=&quot;https://github.com/rabbitmq/cluster-operator/issues/782&quot;&gt;https://github.com/rabbitmq/cluster-operator/issues/782&lt;/a&gt;, 2021.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-15&quot;&gt;&lt;/a&gt;&lt;p&gt;[15] SOSA, C., AND BHATIA, P. Application management made easier with Kubernetes Operators on GCP Marketplace. &lt;a href=&quot;https://cloud.google.com/blog/products/containers-kubernetes/application-management-made-easier-with-kubernete-operators-on-gcp-marketplace&quot; target=&quot;_blank&quot; title=&quot;https://cloud.google.com/blog/products/containers-kubernetes/application-management-made-easier-with-kubernete-operators-on-gcp-marketplace&quot;&gt;https://cloud.google.com/blog/products/containers-kubernetes/application-management-made-easier-with-kubernete-operators-on-gcp-marketplace&lt;/a&gt;, May 2019.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-16&quot;&gt;&lt;/a&gt;&lt;p&gt;[16] SUN, X., GU, J. T., RIVERA, C., CHAJED, T., HOWELL, J., LATTUADA, A., PADON, O., SURESH, L., SZEKERES,&amp;nbsp;A., AND XU, T. Anvil: Building Kubernetes Controllers That Do Not Break. In USENIX ;login: (June 2024).&amp;nbsp;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/anvil-building-formally-verified-kubernetes-controllers&quot; target=&quot;_blank&quot;&gt;https://www.usenix.org/publications/loginonline/anvil-building-formally-verified-kubernetes-controllers&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-17&quot;&gt;&lt;/a&gt;&lt;p&gt;[17] SUN, X., LUO, W., GU, J. T., GANESAN, A., ALAGAPPAN, R., GASCH, M., SURESH, L., AND XU, T. Automatic&amp;nbsp;Reliability Testing for Cluster Management Controllers. In Proceedings of the 16th USENIX Symposium on Operating Systems Design and Implementation (OSDI’22) (July 2022).&amp;nbsp;&lt;a href=&quot;https://www.usenix.org/system/files/osdi22-sun.pdf&quot; target=&quot;_blank&quot;&gt;https://www.usenix.org/system/files/osdi22-sun.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-18&quot;&gt;&lt;/a&gt;&lt;p&gt;[18] SUN, X., MA, W., GU, J. T., MA, Z., CHAJED, T., HOWELL, J., LATTUADA, A., PADON, O., SURESH, L., SZEKERES, A., AND XU, T. Anvil: Verifying Liveness of Cluster Management Controllers. In Proceedings of the 18th USENIX Symposium on Operating Systems Design and Implementation (OSDI’24) (July 2024).&amp;nbsp;&lt;a href=&quot;https://www.usenix.org/system/files/osdi24-sun-xudong.pdf&quot; target=&quot;_blank&quot;&gt;https://www.usenix.org/system/files/osdi24-sun-xudong.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-19&quot;&gt;&lt;/a&gt;&lt;p&gt;[19] SUN, X., SURESH, L., GANESAN, A., ALAGAPPAN, R., GASCH, M., TANG, L., AND XU, T. Reasoning about&amp;nbsp;Modern Datacenter Infrastructures Using Partial Histories. In Proceedings of the Workshop on Hot Topics in Operating Systems (HotOS’21) (June 2021).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/fieldset&gt;
</description><link>https://www.usenix.org/publications/loginonline/sieve-chaos-testing-kubernetes-controllers</link><guid isPermaLink="false">https://www.usenix.org/publications/loginonline/sieve-chaos-testing-kubernetes-controllers</guid><pubDate>Wed, 13 Nov 2024 16:00:00 GMT</pubDate><author>Xudong Sun, Wenqing Luo, Jiawei Tyler Gu, Aishwarya Ganesan, Ramnatthan Alagappan, Michael Gasch, Lalith Suresh, Tianyin Xu</author></item><item><title>Gear Shift Hacks: Uncovering the Security Risks of Wireless Technology in Professional Cycling</title><description>&lt;div class=&quot;field field-name-field-lv2-publication-date field-type-datetime field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;date-display-single&quot;&gt;October 11, 2024&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-article-type field-type-taxonomy-term-reference field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Research&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-label-inline clearfix field-type-text-long field-pseudo-field field-pseudo-field--author-list&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Authors:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/gear-shift-hacks-uncovering-security-risks-wireless-technology-professional#Maryam%20Motallebighomi&quot; title=&quot;Maryam Motallebighomi&quot;&gt;Maryam Motallebighomi&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/gear-shift-hacks-uncovering-security-risks-wireless-technology-professional#Earlence%20Fernandes&quot; title=&quot;Earlence Fernandes&quot;&gt;Earlence Fernandes&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/gear-shift-hacks-uncovering-security-risks-wireless-technology-professional#Aanjhan%20Ranganathan&quot; title=&quot;Aanjhan Ranganathan&quot;&gt;Aanjhan Ranganathan&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-shepherds field-type-user-reference field-label-inline clearfix&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Article shepherded by:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;usenix-user-reference-names&quot;&gt;Rik Farrow&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraphs-items paragraphs-items-field-lv2-body paragraphs-items-field-lv2-body-full paragraphs-items-full&quot;&gt;
  &lt;div class=&quot;field field-name-field-lv2-body field-type-paragraphs field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8478 paragraphs-first-text&quot; id=&quot;single-column-text-8478&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;In the heart of the Tour de France, arguably the most prestigious and challenging cycling race in the world, the race leader is climbing L’Alpe D’Huez, confidently ahead of the pack. But suddenly, the gear shifts up unexpectedly, slowing the rider and making them increase power to keep up their speed. No matter how much they adjust, the gears keep slipping into inefficient settings, disrupting their rhythm. At times, the gear shifters become entirely unresponsive.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-callout paragraphs-item-callout paragraphs-item-full paragraphs-item-8484&quot; id=&quot;callout-8484&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-callout-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Is this a simple mechanical malfunction, or could it be a sign of something more insidious—perhaps the emergence of high-tech, illegal manipulations in competitive cycling?&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8485&quot; id=&quot;single-column-text-8485&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;We researched what it would take to attack a wireless shifting system, and found that we could control a shifter or deny access to it. In this article, we explain how we did this and what shifter manufacturers might do to prevent these attacks.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8486&quot; id=&quot;article-image-8486&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/picture1.png&quot; width=&quot;670&quot; height=&quot;374&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;The attacker records and replays the wireless signals between the shifter and derailleur.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8479&quot; id=&quot;single-column-text-8479&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Modern bicycles are cyber-physical systems that contain embedded computers and wireless links to enable new types of telemetry and control. The key motivating factors for moving away from traditional mechanical systems are the ability to gain insights about a rider&#39;s physical performance, better responsiveness in gear shifting, customizability of how the gear shifters operate, and easier setup and maintenance.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;Among the latest innovations in cycling technology, wireless gear shifting stands out for its significant impact on bike control and rider safety. The system uses wireless links between the gear shifters and the derailleur&amp;nbsp;&lt;/span&gt;&lt;span&gt;—&amp;nbsp;&lt;/span&gt;an electro-mechanical component that uses motors to move the chain between gears. Electronic control provides increased precision in shifts and is less prone to issues like cable stretch and contamination that plague mechanical gear shifting systems.&lt;/p&gt;&lt;p&gt;While wired electronic gear-shifting systems exist, the trend in the cycling industry is rapidly moving toward fully wireless solutions. Major manufacturers like Shimano, SRAM, and Campagnolo now all offer wireless shifting options.&amp;nbsp;But now that the system is going wireless, we have new problems to contend with – particularly security risks. Any vulnerability in such a critical system can have serious consequences for rider safety and performance, especially in professional races. In high-speed events, where hundreds of riders are packed tightly in a peloton, sudden changes in a bike&#39;s performance can be catastrophic. If an attacker were to hack into the wireless shifting system of a subset of riders and shift the gears or jam the shifting operation, it could result in crashes and injuries. And in critical moments, such as steep climbs or rapid descents, losing control of gear shifting could mean losing not just the race, but control of the bike itself.&lt;/p&gt;&lt;p&gt;&lt;span&gt;It is important to note that the sport of professional cycling has long struggled with the use of illegal performance-enhancing drugs.&amp;nbsp;&lt;/span&gt;&lt;span&gt;Security vulnerabilities in one of the bike’s most critical components could offer an appealing alternative for those looking to compromise the integrity of&amp;nbsp;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;the sport. Unlike the physical evidence left by doping, wireless attacks can be almost impossible to trace. With the advent of wireless gear shifting, it&#39;s crucial to adopt an adversary&#39;s perspective — professional bike races are highly competitive and adversarial, and any technology used must be robust enough to withstand attacks from motivated individuals.&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;A TL;DR of the results&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;To explore potential vulnerabilities, we focused on the Shimano 105 Di2 and Shimano DURA-ACE Di2 wireless shifting systems [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/gear-shift-hacks-uncovering-security-risks-wireless-technology-professional#reference-9&quot;&gt;9&lt;/a&gt;]. Shimano, a leader in the bicycle control system industry with roughly 50% market share, provided an ideal case study for our investigation. We purchased a recent version of the control system and conducted a black box security analysis, capturing raw physical signals, observing their behavior during gear shifts, and analyzing the packet structure and content.&lt;/p&gt;&lt;p&gt;What we uncovered in our security analysis was surprising, especially considering the similarities to prior attacks on systems like passive keyless entry for cars [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/gear-shift-hacks-uncovering-security-risks-wireless-technology-professional#reference-1&quot;&gt;1&lt;/a&gt;] and garage door openers [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/gear-shift-hacks-uncovering-security-risks-wireless-technology-professional#reference-6&quot;&gt;6&lt;/a&gt;]. We discovered a record-and-replay attack that allows an unauthorized party to fully control gear shifting on a victim&#39;s bike from up to 10 meters away — without the need for any amplifiers. These attacks can trigger unexpected gear shifts in random patterns by manipulating the physical layer, completely bypassing the need to extract cryptographic secrets, making the attack independent of encryption.&amp;nbsp;&amp;nbsp;This attack can be realized using commercial-off-the-shelf software-defined radios (SDR). The attacker only needs to record two signals&amp;nbsp;—&amp;nbsp;an upshift and a downshift. Additionally, we found that targeted jamming attacks could disable gear shifting on a specific bicycle without affecting others nearby.&lt;/p&gt;&lt;p&gt;&lt;span&gt;The attacker only needs an SDR capable of transmitting and receiving signals in the 2.4 GHz band. All commercial off-the-shelf SDRs, such as the USRP B210, HackRF, PlutoSDR, and LimeSDR, are potential options for this purpose. In our proof-of-concept threat analysis, we used an USRP B210. An attacker may also opt for more advanced setup, e.g., using amplifiers to extend the attack range.&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;Responsible Disclosure and Disclaimer&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;We notified Shimano about the vulnerabilities, along with detailed information on replicating the attacks, part numbers of the devices we tested, and a description of countermeasures that might be helpful in this context. Shimano has acknowledged these vulnerabilities and has released fixes to both professional racing teams and to individual customers. We emphasize that these identified attacks are unlikely to impact amateur or commuter cyclists; the real concern arises in high-stakes, adversarial environments, such as professional racing.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8487&quot; id=&quot;article-image-8487&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/picture2.png&quot; width=&quot;556&quot; height=&quot;416&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Experimental setup comprising of the USRP B210, laptop, the Shimano gear shifters and derailleurs.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8480&quot; id=&quot;single-column-text-8480&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Attacker Strategy 1: Replay Attack&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;A replay attack in the wireless world is when an attacker intercepts and records signals during a legitimate action, then later retransmits them to carry out the same action on the system without authorization. Notably, the attacker does not need to understand the packet&#39;s format or contents to succeed. Replay attacks can even bypass encrypted protocols making them a versatile and concerning threat.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Therefore, to carry out a replay attack, the attacker only needs to capture the signal responsible for shifting gears. The key element of the attack is simply capturing a signal that corresponds to an upshift or downshift, which can then be retransmitted to force gear changes on the victim&#39;s bike.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Capturing these signals is straightforward. The attacker doesn’t need physical access to the bike; being within range is enough. In professional races, where riders are tightly packed, a bystander along the race route or even a team vehicle traveling alongside the peloton could easily record the gear-shifting signals in real time as the victim rider changes gears. In a matter of seconds, the attacker could capture both an upshift and a downshift signal, regardless of the current gear the bike is in, and later use them to trigger unauthorized shifts. The capture could also take place well before race day, such as during a team event or a practice session days or weeks in advance. This opens up various opportunities for an attacker to interfere with a rider’s performance using minimal equipment and without drawing attention. We note that the attack works irrespective of which gear the bike is currently in; thus, it is sufficient for the attacker to capture any upshift and any downshift signal.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;We conducted replay attack experiments by testing how far the attacker’s transmitter could be from the bike’s rear derailleur while still successfully shifting gears. In our tests, we shifted through all eleven gears, from the lowest to the highest, at various distances. The results showed that we could consistently trigger unintended gear shifts from up to 9 meters away without any failures. At 10 meters, we successfully shifted 10 out of 11 times. Beyond this range, the signal weakened and the attack became unreliable. Importantly, these tests were done without any signal amplifiers, meaning this range represents the lower bound for how far an attacker could be from the target.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8488&quot; id=&quot;article-image-8488&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/picture3.png&quot; width=&quot;846&quot; height=&quot;510&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Replay attack success rate vs distance from the target system.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8481&quot; id=&quot;single-column-text-8481&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Attacker Strategy 2: Targeted Jamming Attack&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;A jammer works by transmitting radio frequency noise that disrupts wireless communication. How effective the jamming is depending on several factors, like the power of the device, the type of signal being jammed, environmental conditions, and the distance between the jammer and the receiver. There are ways to make jamming more targeted and efficient. For example, using directional antennas can focus the jamming signal on a specific area, reducing its impact on other surroundings. The success of jamming often comes down to how well it’s designed and how strategically it’s used, especially when directionality is a key factor.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;We used the same SDR setup from our replay attack to transmit a jamming signal—specifically, a simple sinusoid—at 2.478 GHz, which is the frequency Shimano uses for its wireless communications. For our tests, we placed the shifter and derailleur one meter apart, which mirrors the typical setup on a bike, and then tested the jammer at different distances. When the jammer was within one meter of the derailleur, the gear-shifting system became completely non-functional, cutting off all communication. Beyond this range, the jammer still disrupted the signal, but didn’t fully disable the bike’s functionality.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;However, this type of attack would affect every bike in the vicinity operating on the same frequency. We then shifted our focus to see if we could target a specific bike while leaving others nearby unaffected. This approach mirrors a real-world race scenario, where an attacker might want to disrupt only a specific rider’s bike while ensuring that friendly bikes remain fully functional.&amp;nbsp;&lt;/span&gt;&lt;span&gt;In our study, we labeled two Shimano wireless gear-shifting sets as Bike1 and Bike2. We captured an upshifting signal from Bike1 and replayed it at different intervals using our USRP B210, while manually shifting gears on Bike2 nearby. Our results showed that when the interval was less than 112 µs (the length of one packet), Bike2 also stopped working due to interference. However, once the interval exceeded 112 µs, Bike2’s functionality returned, as there was enough time for command packets to transmit and receive acknowledgments. In short, when the attacker sends replay packets with a 112 µs interval, Bike1 is disabled while Bike2, or any other nearby bike, continues to function normally.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8489&quot; id=&quot;article-image-8489&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/picture4.png&quot; width=&quot;686&quot; height=&quot;412&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Gear Shifting Success Rate in Bike2 Relative to Packet Interval Timing from Bike1&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8482&quot; id=&quot;single-column-text-8482&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Discussion&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;h3&gt;&lt;span&gt;Attacker device form-factor and cost&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;In the current implementation of our signal capture and replay system, we utilize a setup comprising an SDR and a laptop. While effective, this configuration is not optimized for size or portability. However, with advancements in miniaturization and integrated circuit (IC) technology, it is feasible to reduce the size of the attack device significantly. By custom designing specific circuits, we can integrate a receiver, a modest amount of memory for signal storage, and a transmitter into a compact, single System on a Chip (SoC) or small circuit board. This miniaturization process makes the attack system more discreet and enhances its portability and deployment ease. For example, researchers demonstrated relay attacks [1] on passive keyless entry systems with SDRs costing more than $1500 in 2011. A few years later [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/gear-shift-hacks-uncovering-security-risks-wireless-technology-professional#reference-8&quot;&gt;8&lt;/a&gt;], the same attack was demonstrated using $22.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;Potential Countermeasures&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;To mitigate replay attacks, a basic measure is to add timestamps to wireless messages exchanged, as it restricts message validity to a specific timeframe, making older, replayed messages invalid. However, this approach comes with challenges, particularly the need for precise time synchronization between devices, which can be difficult when devices don’t have reliable access to shared time sources. Another common defense is rolling codes, where each transmitted signal includes a unique, one-time-use code. This makes it much harder for an attacker to reuse captured signals, as both devices move to the next code after each transmission. While rolling codes greatly raise the difficulty of executing replay attacks, they aren&#39;t entirely foolproof against more sophisticated methods like code grabbing or delayed playback [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/gear-shift-hacks-uncovering-security-risks-wireless-technology-professional#reference-3&quot;&gt;3&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/gear-shift-hacks-uncovering-security-risks-wireless-technology-professional#reference-5&quot;&gt;5&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/gear-shift-hacks-uncovering-security-risks-wireless-technology-professional#reference-7&quot;&gt;7&lt;/a&gt;].&amp;nbsp;&lt;/p&gt;&lt;p&gt;An alternate unconventional measure would be to implement distance-based restrictions that could add an important layer of security. Since legitimate interactions occur only between shifters and derailleurs within a limited range, restricting command acceptance to close proximity could be highly effective in reducing the likelihood of remote replay attacks. This method works on the assumption that attackers are more likely to operate from a distance. However, securely measuring distance poses its own challenges [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/gear-shift-hacks-uncovering-security-risks-wireless-technology-professional#reference-2&quot;&gt;2&lt;/a&gt;]. Techniques like signal strength estimation or time-of-flight can be unreliable, especially in the fast-paced environment of competitive cycling. While this approach can help reduce the risk of replay attacks, it should not be seen as a standalone solution. Instead, it should be used in combination with other security measures, such as rolling codes or timestamps, to provide more comprehensive protection.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8483&quot; id=&quot;single-column-text-8483&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Final Remarks&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;As technology continues to spread into the world of competitive sports, the need for robust security threat analysis becomes all the more critical. Our research shows just how easily wireless gear-shifting systems can be compromised, potentially turning the tide of a race with a well-timed attack. In an era where every bit of performance matters, it&#39;s not just about the athletes anymore — keeping tech secure is just as important to ensure fair competition and safety on the track. The future of sports could very well depend on staying one step ahead of these evolving threats.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;Acknowledgements and Proof-of-concept Video&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;The work was partially supported by NSF grant 2144914. We thank Keith Wakeham and Virgyl Fernandes for their technical expertise in cycling components, Andreas Noack for his expert suggestions on URH. A proof-of-concept demo video can be found here &amp;lt;&lt;/span&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=7Pgd-EpLtDg&quot;&gt;https://www.youtube.com/watch?v=7Pgd-EpLtDg&lt;/a&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;fieldset class=&quot;group-appendix field-group-fieldset form-wrapper&quot;&gt;&lt;legend&gt;&lt;span class=&quot;fieldset-legend&quot;&gt;Appendix&lt;/span&gt;&lt;/legend&gt;&lt;div class=&quot;fieldset-wrapper&quot;&gt;&lt;div class=&quot;field field-name-field-lvl2-appendix-refs field-type-text field-label-above&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;References:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-1&quot;&gt;&lt;/a&gt;&lt;p&gt;[1] Aurélien Francillon, Boris Danev, and Srdjan Capkun. &quot;Relay Attacks on Passive Keyless Entry and Start Systems in Modern Cars.&quot; In Network and Distributed System Security Symposium (NDSS), 2011.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-2&quot;&gt;&lt;/a&gt;&lt;p&gt;[2]&amp;nbsp;Aanjhan Ranganathan and Srdjan Capkun. &quot;Are We Really Close? Verifying Proximity in Wireless Systems.&quot; In&amp;nbsp;IEEE Security &amp;amp; Privacy Magazine, Vol. 15, No. 3, pages 52–58, 2017.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-3&quot;&gt;&lt;/a&gt;&lt;p&gt;[3]&amp;nbsp;Earlence Fernandes, Jaeyeon Jung, and Atul Prakash. &quot;Security Analysis of Emerging Smart Home Applications.&quot; In IEEE Symposium on Security and Privacy (S&amp;amp;P), 2016.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-4&quot;&gt;&lt;/a&gt;&lt;p&gt;[4] Johannes Pohl and Andreas Noack. &quot;Universal radio hacker: A suite for analyzing and attacking stateful wireless protocols.&quot; In&amp;nbsp;12th USENIX Workshop on Offensive Technologies (WOOT), 2018.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-5&quot;&gt;&lt;/a&gt;&lt;p&gt;[5] Flavio D Garcia, Gerhard de Koning Gans, Ruben Muijrers, Peter Van Rossum, Roel Verdult, Ronny Wichers Schreur, and Bart Jacobs. &quot;Dismantling MIFARE Classic.&quot; In&amp;nbsp;13th European Symposium on Research in Computer Security (ESORICS), 2008.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-6&quot;&gt;&lt;/a&gt;&lt;p&gt;[6] Ahmed Ghanem and Riham AlTawy. &quot;Garage Door Openers: A Rolling Code Protocol Case Study.&quot; In&amp;nbsp;19th Annual International Conference on Privacy, Security &amp;amp; Trust (PST), 2022.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-7&quot;&gt;&lt;/a&gt;&lt;p&gt;[7] Samy Kamkar. &quot;KeySweeper.&quot; 2015.&amp;nbsp;&lt;a href=&quot;https://samy.pl/keysweeper/&quot;&gt;https://samy.pl/keysweeper/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-8&quot;&gt;&lt;/a&gt;&lt;p&gt;[8] &quot;Just a Pair of These $11 Radio Gadgets Can Steal a Car.&quot; 2017.&amp;nbsp;&lt;a href=&quot;https://www.wired.com/2017/04/just-pair-11-radio-gadgets-can-steal-car/&quot;&gt;https://www.wired.com/2017/04/just-pair-11-radio-gadgets-can-steal-car/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-9&quot;&gt;&lt;/a&gt;&lt;p&gt;[9] Shimano.&amp;nbsp;&quot;New Shimano 105 Di2 Delivers 12-Speed, Shifting and Wireless Performance.&quot;&amp;nbsp;&lt;a href=&quot;https://bike.shimano.com/en-US/information/news/new-shimano-105-di2-delivers-12-speed--shifting-and-wireless-per.html&quot;&gt;https://bike.shimano.com/en-US/information/news/new-shimano-105-di2-delivers-12-speed--shifting-and-wireless-per.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/fieldset&gt;
</description><link>https://www.usenix.org/publications/loginonline/gear-shift-hacks-uncovering-security-risks-wireless-technology-professional</link><guid isPermaLink="false">https://www.usenix.org/publications/loginonline/gear-shift-hacks-uncovering-security-risks-wireless-technology-professional</guid><pubDate>Thu, 10 Oct 2024 16:00:00 GMT</pubDate><author>Maryam Motallebighomi, Earlence Fernandes, Aanjhan Ranganathan</author></item><item><title>Exploiting Smartphones</title><description>&lt;div class=&quot;field field-name-field-lv2-subtitle field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;No Computer is Secure, and that includes your smartphone&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-publication-date field-type-datetime field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;date-display-single&quot;&gt;October 7, 2024&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-article-type field-type-taxonomy-term-reference field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Opinion&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-label-inline clearfix field-type-text-long field-pseudo-field field-pseudo-field--author-list&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Authors:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/exploiting-smartphones#Rik%20Farrow&quot; title=&quot;Rik Farrow&quot;&gt;Rik Farrow&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-shepherds field-type-user-reference field-label-inline clearfix&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Article shepherded by:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;usenix-user-reference-names&quot;&gt;Rik Farrow&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraphs-items paragraphs-items-field-lv2-body paragraphs-items-field-lv2-body-full paragraphs-items-full&quot;&gt;
  &lt;div class=&quot;field field-name-field-lv2-body field-type-paragraphs field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8468 paragraphs-first-text&quot; id=&quot;single-column-text-8468&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;In my search to learn what people who visit usenix.org are most interested in, I noticed that a paper about Android was getting downloaded much more often than other Security&#39;24 papers.&amp;nbsp; Maar et al [1] describes three years of Linux kernel exploits that can work against Android phones—if they don&#39;t have the latest kernel patches. I&#39;ll share what I learned from reading their paper, but I also want to discuss some other smartphone weaknesses.&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;p&gt;&lt;span&gt;Shortly after the first iPhone came out in 2007, I was contacted by Adam Penenberg, a journalist working for Fast Company magazine, and asked if I could create a video of me hacking the new iPhone. They would supply the iPhone, but I&#39;d have to do the rest.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;span&gt;A quick online search determined that HD Moore&#39;s Metasploit, a pentesting set of applications, included a hack for Safari, the iPhone&#39;s (and Mac&#39;s) web browser. I taught myself how to use Metasploit and set up the attack. After running the exploit, I could watch Safari vanish from the iPhone&#39;s display when Safari visited the web interface setup with Metasploit. Then I could upload files and enter commands. The iPhone ran everything as root, so the remote access tool (RAT)&amp;nbsp; installed by exploit also ran as root.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; I installed the BSD shell utilities, and spent time looking around. As a proof-of-concept, I also wrote a very short Objective C program that recorded ten seconds of audio and saved it as a file that I could copy back to the attacking system.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Some people doubted that I had taken over my iPhone, and the disappearance of Safari from the display hardly seems like proof [2]. I wrote a rebuttal that pointed out that the iPhones, and phones like them, were ripe for spyware. I outlined an attack using a laptop posing as local WiFi access to insert backdoors in my fictional scenario. These descriptions appear in the Fast Company article attributed to other folks, but those people could easily have had the same ideas that I did.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8469&quot; id=&quot;single-column-text-8469&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;The NSO Group&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;A little less than a decade after my brief iPhone adventure, the NSO Group was in the news [3]. Their Pegasys software had been found on the iPhones of more than a hundred journalists and political opponents of dictators. The software had been installed over the network, a &#39;zero-touch&#39; attack, as the owner of the phone didn&#39;t need to participate by installing software or clicking on a link leading to malware. It&#39;s likely this was accomplished via a &#39;baseband&#39; attack.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Smartphones include dozens of chips, all with processors: even some lithium batteries include simple processors to control charging.&amp;nbsp; For an example, check out the teardown diagram of the Pixel 6 [4], with 24 ICs on the front and back of the main board. The Samsung Shannon baseband chip handles communication with cell networks for voice and data.&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;p&gt;&lt;span&gt;I watched Natalie Silvanvich lecturing about the work that Google&#39;s Project Zero had done on exploiting Shannon baseband [5]. Natalie begins by explaining how mobile calls get setup using SIP before SDP gets used to set up digital transfers, such as streaming videos or receiving a text. While SIP gets processed by carriers&#39; servers, essentially filtering or rewriting the protocols in use, SDP gets passed through to endpoints, and Natalie demonstrates how parsing SDP [6] can be exploited via simple overflows. She also mentions ways of disabling SELinux and no execution in read-only regions (R^X), defenses not covered in the Maar paper.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;I asked Natalie about the memory model of the smartphone that&#39;s the target in her talk. Natalies suggested that I take a look at a &lt;a href=&quot;https://googleprojectzero.blogspot.com/2017/10/over-air-vol-2-pt-3-exploiting-wi-fi.html&quot; target=&quot;_blank&quot; title=&quot;Project Zero blog post about iPhone 7&quot;&gt;Project Zero blog post&lt;/a&gt;, where they are exploring an iPhone 7 via a WiFi chip. Natalie told me that most smart phones have an IOMMU, that is, a device that manages access to main memory over a PCIe bus. If the IOMMU is properly configured, it permits DMA between each device (those 24 ICs mentioned eariler) and main memory. Natalie&#39;s talk is about how one might leverage what does get copied into main memory into an effective attack.&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;span&gt;It&#39;s likely that the NSO group used baseband attacks for installing Pegasys, but it&#39;s just as possible they were using another hack, a kernel hack.&amp;nbsp; And that brings us back to Maar&#39;s paper.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8470&quot; id=&quot;single-column-text-8470&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Exploiting Android&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;I had picked Maar&#39;s paper out of the over 400 accepted Security&#39;24 papers [7] as a possible candidate for a ;login: article, but passed over it because I found the first couple of sections of the paper too dry. I should have kept on reading.&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;p&gt;&lt;span&gt;Section 4, beginning on page 5, is where things started to get interesting to me. The authors describe what they call &#39;One-Day&#39; exploits, because, unlike zero-day exploits, one-day exploits are known. They downloaded the exploits from public sources, like Project Zero, Blackhat or Github, then proceeded to test them against versions of Android. They built scripts to collect Android versions, including both source code (it&#39;s Linux and so should be published) and firmware. Then they built the code and ran it, or the firmware, on QEMU and tried the exploits against the various versions.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;span&gt;In section 4.1, the authors present a series of exploit techniques (ETs), listing ten different techniques used in the 26 exploits (all represented by CVEs) that they had collected.&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;p&gt;&lt;span&gt;In the next section, they cover the defenses that have been added to the Linux kernel to prevent most of these exploits from succeeding.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;span&gt;I really enjoyed this portion of the paper. It reminded me of the &#39;old days&#39; in the 1990s where people commonly published exploits, including code and descriptions of them. In the paper, the descriptions are clear, and the explanations of the changes to the Linux kernel included to prevent these kernel exploits are also clearly written, sometimes including code examples.&amp;nbsp; Although I did have to read many parts of the paper more than once, I learned a lot about how exploits involving use-after-free (UAF), double-free (DF) or control flow work, and how simple changes can often, but not always, prevent these exploits from working.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8471&quot; id=&quot;single-column-text-8471&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Customized Android&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;The paper&#39;s authors’ main point was that most non-Google versions of Android are using much older versions of the Linux kernel that don&#39;t include these defense mechanisms. Vendors aren&#39;t using the latest Linux kernel because they have added their own customizations, often for security, that make upgrading to a current kernel version difficult. In a couple of cases, the processors included in the non-premium versions of Android phones are slow enough that key defenses, for example against using the unlink function of doubly-linked lists as a read or write gadget, slow down the working of the smartphone noticeably, so the vendors just leave this undone—opening up the smartphone to lots of older exploits in the name of performance.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;I suggest reading this paper. The attacks and defenses discussed are relevant to anyone who uses an older Linux kernel. I did attempt to contact the paper&#39;s presenter but never heard back from him.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8472&quot; id=&quot;single-column-text-8472&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Spyware&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Before you get too paranoid about your own phone, most countries, via their teams of hackers, are not going to be interested enough to install spyware on your precious smartphone. Your ex (if you have one), on the other hand, who has physical access to your phone is a more likely perpetrator.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;It&#39;s one thing to snoop on the Internet as the Chinese have allegedly been doing [8], as some of what one gets to collect is text that can be filtered for potentially interesting communications. But processing everything most people are doing on their smartphones would be an enormous waste of resources.&amp;nbsp; Targeted attacks, such as the ones used by owners of Pegasys, are on people of interest.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Smartphones, just like anything that has a processor and an operating system, are insecure. Computer scientists began working on security with MULTICS in the late 1960&#39;s, and operating systems and the hardware they run on have become increasingly complex over time. No one person can understand all of the Linux kernel, and forget about Windows being understandable. On top of that, operating systems are still written using insecure languages (C/C++), ones that allow manipulation of pointers (indirect memory access) by programmers, don&#39;t include array or string bound checking by default, and so on. Safe languages, like Rust and Go, are catching on, but are also harder to use than their unsafe brethren.&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;p&gt;&lt;span&gt;And then there&#39;s the hardware they run on, still patterned after the mainframe systems like MULTICS ran on. It&#39;s going to take time, and a lot of creative work, to have systems that might possibly be secure.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;fieldset class=&quot;group-appendix field-group-fieldset form-wrapper&quot;&gt;&lt;legend&gt;&lt;span class=&quot;fieldset-legend&quot;&gt;Appendix&lt;/span&gt;&lt;/legend&gt;&lt;div class=&quot;fieldset-wrapper&quot;&gt;&lt;div class=&quot;field field-name-field-lvl2-appendix-refs field-type-text field-label-above&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;References:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-1&quot;&gt;&lt;/a&gt;&lt;p&gt;[1] Maar, L, Draschbacher, F., Lamster, L., Mangard, S., Defects-in-Depth: Analyzing the Integration of Effective Defenses against One-Day Exploits in Android Kernels: 33rd USENIX Security Symposium (USENIX Security 24) 2024: &lt;a href=&quot;https://www.usenix.org/conference/usenixsecurity24/presentation/maar-defects&quot;&gt;https://www.usenix.org/conference/usenixsecurity24/presentation/maar-def...&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-2&quot;&gt;&lt;/a&gt;&lt;p&gt;[2] Penenberg, A., Hacking the iPhone: &lt;a href=&quot;https://www.fastcompany.com/77064/hacking-iphone;&quot;&gt;https://www.fastcompany.com/77064/hacking-iphone;&lt;/a&gt; accessed October 2024&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-3&quot;&gt;&lt;/a&gt;&lt;p&gt;[3] Amnesty International, Forensic Methodology Report: How to catch NSO Group’s Pegasus: &lt;a href=&quot;https://www.amnesty.org/en/latest/research/2021/07/forensic-methodology-report-how-to-catch-nso-groups-pegasus/&quot;&gt;https://www.amnesty.org/en/latest/research/2021/07/forensic-methodology-...&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-4&quot;&gt;&lt;/a&gt;&lt;p&gt;[4] Google Pixel 6 Pro teardown: &lt;a href=&quot;https://www.techinsights.com/blog/teardown/google-pixel-6-pro-teardown&quot;&gt;https://www.techinsights.com/blog/teardown/google-pixel-6-pro-teardown&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-5&quot;&gt;&lt;/a&gt;&lt;p&gt;[5] Natalie Silvanovich, Google Zero team, How to hack Shannon baseband: &lt;a href=&quot;https://www.youtube.com/watch?v=NnmAikOTHaA&quot;&gt;https://www.youtube.com/watch?v=NnmAikOTHaA&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-6&quot;&gt;&lt;/a&gt;&lt;p&gt;[6] &lt;a href=&quot;https://en.wikipedia.org/wiki/Session_Description_Protocol&quot;&gt;https://en.wikipedia.org/wiki/Session_Description_Protocol&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-7&quot;&gt;&lt;/a&gt;&lt;p&gt;[7] USENIX Security&#39;24 Technical Sessions: &lt;a href=&quot;https://www.usenix.org/conference/usenixsecurity24/technical-sessions&quot;&gt;https://www.usenix.org/conference/usenixsecurity24/technical-sessions&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-8&quot;&gt;&lt;/a&gt;&lt;p&gt;[8] Ilascu, I., AT&amp;amp;T, Verizon Hacked: &lt;a href=&quot;https://www.bleepingcomputer.com/news/security/atandt-verizon-reportedly-hacked-to-target-us-govt-wiretapping-platform/&quot;&gt;https://www.bleepingcomputer.com/news/security/atandt-verizon-reportedly...&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/fieldset&gt;
</description><link>https://www.usenix.org/publications/loginonline/exploiting-smartphones</link><guid isPermaLink="false">https://www.usenix.org/publications/loginonline/exploiting-smartphones</guid><pubDate>Sun, 06 Oct 2024 16:00:00 GMT</pubDate><author>Rik Farrow</author></item><item><title>Solving the First-Mile Problem</title><description>&lt;div class=&quot;field field-name-field-lv2-subtitle field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Addressing the unacknowledged difficulty of first getting into an air-gapped system—with no inside help, without any malware, without a network, and lacking USB&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-publication-date field-type-datetime field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;date-display-single&quot;&gt;September 30, 2024&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-article-type field-type-taxonomy-term-reference field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Research&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-label-inline clearfix field-type-text-long field-pseudo-field field-pseudo-field--author-list&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Authors:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/solving-first-mile-problem#Joe%20Loughry&quot; title=&quot;Joe Loughry&quot;&gt;Joe Loughry&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-shepherds field-type-user-reference field-label-inline clearfix&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Article shepherded by:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;usenix-user-reference-names&quot;&gt;Rik Farrow&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraphs-items paragraphs-items-field-lv2-body paragraphs-items-field-lv2-body-full paragraphs-items-full&quot;&gt;
  &lt;div class=&quot;field field-name-field-lv2-body field-type-paragraphs field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8442 paragraphs-first-text&quot; id=&quot;single-column-text-8442&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;We can take over control of a completely isolated—air gapped—computer from a distance. To do it, we used a very old idea: that flashes of light can disrupt electronics. The effect is controllable enough to execute arbitrary code on the target system, but a long way from being able to do it to an ordinary laptop. It solves a problem ignored by almost every report of defeat of air-gapped security: the problem of initial access. Think of Tom Cruise dangling from a wire in a computer room in the first &lt;em&gt;Mission Impossible&lt;/em&gt; movie.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;This article expands on the research paper presented at USENIX WOOT’24 [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/solving-first-mile-problem#reference-1&quot;&gt;1&lt;/a&gt;], which I collaborated with Kasper Rasmussen of the University of Oxford.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8443&quot; id=&quot;single-column-text-8443&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;(Impolite introduction)&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Every covert channel paper ever always seems to begin with the same implicit assumption:&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;“Grant us the inside man.”&lt;/blockquote&gt;&lt;div&gt;&lt;span&gt;We are asked to assume the system is already compromised. We’ve already bribed an operator, already tricked someone into plugging in a USB containing our malware—basically, assume we’ve already hacked into the system by conventional means first—and then after that, you can do the bit with the hovering drones.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;But that&#39;s begging the question. It doesn’t solve the first mile problem. How do you get into an air-gapped system that hasn&#39;t been gimmicked, one that wasn’t already listening for a signal?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Just an ordinary computer, minding its own business.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8444&quot; id=&quot;single-column-text-8444&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Background&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;What if you could do glitching attacks [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/solving-first-mile-problem#reference-2&quot;&gt;2&lt;/a&gt;] without access to the power supply? What if you could do laser fault injection [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/solving-first-mile-problem#reference-3&quot;&gt;3&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/solving-first-mile-problem#reference-4&quot;&gt;4&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/solving-first-mile-problem#reference-5&quot;&gt;5&lt;/a&gt;] without boiling nitric acid or grinding wheels, and no longer limited to a microscope stage?&lt;/p&gt;&lt;p&gt;We found this vulnerability because we went looking for it. Building on the long history of side channels [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/solving-first-mile-problem#reference-6&quot;&gt;6&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/solving-first-mile-problem#reference-7&quot;&gt;7&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/solving-first-mile-problem#reference-8&quot;&gt;8&lt;/a&gt;], it seemed reasonable that information might be able to flow into a system instead of leak out of it.&lt;/p&gt;&lt;p&gt;&lt;span&gt;We have not reached the stage of a practical attack yet. We can show remote code execution, but only on haywired hardware. Our&#39;s is a measurement paper.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;By way of analogy, if side channels are like mind reading, this is mind control.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8445&quot; id=&quot;single-column-text-8445&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Limitations and Impact&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;The vulnerability of inadvertently photosensitive electronic components directly connected to circuits carrying sensitive information is as old as the IBM 701 mainframe computer (in 1952) and as current as the Raspberry Pi 3 in 2016 [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/solving-first-mile-problem#reference-9&quot;&gt;9&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/solving-first-mile-problem#reference-10&quot;&gt;10&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/solving-first-mile-problem#reference-11&quot;&gt;11&lt;/a&gt;].&lt;/p&gt;&lt;blockquote&gt;&lt;em&gt;Things went pretty well at the dedication, until the photographers started taking pictures of the hardware. As soon as the flashbulbs went off, the whole system came down. Following a few tense moments on the part of the engineering crew, we realized with some consternation that the light from the flashbulbs was erasing the information in the CRT memory. Suffice it to say that shortly thereafter the doors to the CRT storage frame were made opaque to the offending wavelengths.&lt;/em&gt; [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/solving-first-mile-problem#reference-9&quot;&gt;9&lt;/a&gt;]&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;We began from only being able to crash the system, and extended it to take over control remotely. Our approach works, in general, on shared communication buses, and depends entirely on where the hardware designer decided to put components. The attacker needs line-of-sight and detailed knowledge of the hardware and software running on the target.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;It’s not the same as a classical covert channel, because there is no need to assume the existence of an insider threat; further, it eliminates any need to install malware on the target system ahead of time [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/solving-first-mile-problem#reference-12&quot;&gt;12&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/solving-first-mile-problem#reference-13&quot;&gt;13&lt;/a&gt;]. It’s not the same as optical fault injection, which is done under a microscope on decapped chips [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/solving-first-mile-problem#reference-3&quot;&gt;3&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/solving-first-mile-problem#reference-4&quot;&gt;4&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/solving-first-mile-problem#reference-5&quot;&gt;5&lt;/a&gt;]. Finally, it is not the same thing as Light Commands [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/solving-first-mile-problem#reference-14&quot;&gt;14&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/solving-first-mile-problem#reference-15&quot;&gt;15&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/solving-first-mile-problem#reference-16&quot;&gt;16&lt;/a&gt;], because we can take over control of a computer that wasn&#39;t already listening for a signal.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8446&quot; id=&quot;single-column-text-8446&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;(The headlines just write themselves.)&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;&quot;Critical Cybersecurity Vulnerability Found in Light-Up Dog Toys&quot;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;So far, the vulnerability is exploitable on only one commercially available device we&#39;ve found, a 5 mm RGB color changing LED commonly found in light-up toys [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/solving-first-mile-problem#reference-17&quot;&gt;17&lt;/a&gt;]. Hit it with a fast pulse of infrared at 900 nanometers, and it will reliably reset the sequence to red. The chip inside is believed to be a CDT3447 [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/solving-first-mile-problem#reference-18&quot;&gt;18&lt;/a&gt;] and it is not known whether the entry point is one of the RGB emitters or the silicon substrate of the chip itself, which is transparent to infrared wavelengths, as in the Raspberry Pi.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8457&quot; id=&quot;article-image-8457&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/check-engine-light.jpg&quot; width=&quot;250&quot; height=&quot;159&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 1: A typical status indicator lamp, this one from a car.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8447&quot; id=&quot;single-column-text-8447&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Context&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;So the context here is status indicator lamps (Figure 1).&lt;/p&gt;&lt;p&gt;&lt;span&gt;If you shine a &lt;em&gt;really&lt;/em&gt; bright light on one of them, all that energy has to go somewhere. Would you believe it flows backwards into the electronics? Effects range all the way up to remote code execution. There are at least two different physical effects at work: a photoelectric effect and a photoconductive effect. It takes a fairly powerful laser to do it, because in addition to information, you are also supplying all the &lt;strong&gt;energy&lt;/strong&gt; needed to run the electronics in reverse.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;That last point is important. The energy levels involved here are high. These are absolutely not eye safe lasers. We take elaborate precautions around them including interlocks, protective goggles, warning signs, and radiation shielding. Be careful.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8458&quot; id=&quot;article-image-8458&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/reachability.jpg&quot; width=&quot;1440&quot; height=&quot;660&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 2: Table 1 and Figure 17 from the paper [1], describing the architecture of an imaginary computer.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8448&quot; id=&quot;single-column-text-8448&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Arbitrary-ish Code&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;M5 is an imaginary computer with an extremely small instruction set, smaller even than RISC-V. In Figure 2, Table 1 shows the complete instruction set of this imaginary computer; on the right, Figure 17 shows which opcodes are reachable from other opcodes if you can only change binary zeros to ones.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The photoelectric effect lets us change a binary 0 to 1, but not to go the other way around. The photoconductive effect lets us change a binary 1 to 0—but not the other way around. This immediately suggests that the two effects might be used in concert, but there’s a problem: typically, electronic components respond only to one effect or the other, but not both.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;This places some &lt;em&gt;fascinating&lt;/em&gt; constraints on the attacker. Those binary numbers in Table 1 are all the possible assembly language instructions. If we assume the attacker can only change a binary 0 to 1, but can never go the other way around, then some of those instructions are reachable from other instructions, as you can tell from the graph on the right.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The attacker might be able to change a load instruction into a branch, or an add into a subtract, but can&#39;t change a branch into a store, or a divide into a compare, so we say the attacker can execute arbitrary-ish code. It’s a kind of weird machine. It’s easy to redirect a memory access up into high memory—just set the high bit of the address—so our attacker patiently watches the instruction stream go by, picking and choosing opcodes he can alter into the instructions he wants, slowly building up the desired program in high memory. Maybe it&#39;s not quite the program the attacker wanted, because certain bit patterns were unreachable, so the first thing the arbitrary-ish code does is run fixups on itself. Finally, we redirect a branch, and it&#39;s game over.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The attacker must be very careful not to crash the running program, because its memory accesses are needed for the subversion. If the target computer ever crashes, access is lost.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8459&quot; id=&quot;article-image-8459&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/m5.jpeg&quot; width=&quot;1440&quot; height=&quot;818&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 3: Here is a physical implementation of the M5 computer architecture in the figure above. The black rackmount box is the computer, with control switches on the left, green bus indicator LEDs right of center, and the accumulator display on the right. The bundle of wires on top is the attacker, with four powerful lasers aimed point blank at the green bus LEDs. An array of photosensors is mounted just below the accumulator display to let the attacker watch.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8449&quot; id=&quot;single-column-text-8449&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Running on a Real Computer (sort of)&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;M5 is a fairly simple computer, but it’s complex enough to illustrate the difficulty of the attack. It implements the instruction set shown above. It’s a four-bit CPU, load/store architecture with one register called the accumulator, which is visible on the front panel—which is important. It&#39;s not RISC-V because we wanted the instruction reachability graph above to be small enough to be grasped, not a plate full of spaghetti.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Think of it as a factory automation controller, reading temperatures and pressures, turning motors on and off to open and close valves in a chemical process plant. Normal operation is shown by a regular scanning pattern on the accumulator lamps.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;The attacker begins by watching the target system for a while, specifically the accumulator display (&lt;a href=&quot;https://youtu.be/O8yOomANDTk&quot; target=&quot;_blank&quot; title=&quot;Attack against the M5 computer using lasers&quot;&gt;video of the attack&lt;/a&gt;). Before the attack can proceed, the attacker needs to learn the timing and establish a phase lock on the internal state of the CPU. This is possible because the accumulator display always changes at a particular microcode cycle, which might be different for different instructions that can change the value in the accumulator, but the attacker can tell the difference between those instructions by observing the direction and magnitude of the change. We assume the attacker has complete knowledge of the computer&#39;s architecture and the program that is running, but needs to synchronize timing with that program, right down to the microcode cycle. It takes about ten iterations through the program (sweeps of the accumulator display shown in the right four LEDs) to get a phase lock.&lt;/p&gt;&lt;p&gt;&lt;span&gt;Timing is absolutely critical. Once the attacker has got a phase lock, the lasers begin firing, but at the green bus LEDs in the middle, not at the red accumulator LEDs on the right. This serves to illustrate the general principle that you’re not always watching the same LED you’re shooting at. It only takes a few seconds, but the regular scanning pattern on the accumulator LEDs is observed to have changed. It’s not doing the same regular left-to-right scanning pattern as before. That’s because the computer is now running a completely different program, one that we put there through the status indicator lamps.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8460&quot; id=&quot;article-image-8460&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/circuit_analysis.png&quot; width=&quot;1440&quot; height=&quot;563&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 4: Light emitting diode (LED) status indicators (left) can be reversed to drive the connected CMOS circuit low, in this case an I2C bus (right). In theory, CMOS logic levels always avoid the shaded area on the left side of the middle chart of voltage levels; in practice, we found the behavior of real CMOS devices to be more like the right side of the middle chart.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8450&quot; id=&quot;single-column-text-8450&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Circuit Analysis&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Analysis begins with the electrical schematic of the target device, looking for potentially susceptible components in electrically interesting places. This is another of the constraints on the attacker; we can&#39;t choose where LED indicators are or how they&#39;re connected, and that determines what the attacker can do. Not every indicator will do something useful if reversed.&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;p&gt;&lt;span&gt;Figure 4 shows one electronic component of interest. Light emitting diodes are interesting because they are a naked P–N junction, the basic building block of solid state electronics. The way they work is simple: you put electricity in, and light comes out—pink light, in this case. But there&#39;s a general principle in physics that any process that runs in one direction can usually be made to run in the other direction if you supply enough energy to make up for the difference in entropy.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;When you put light into an LED, it comes out as electricity but in the opposite direction from the usual current flow that makes it light up. This violates important assumptions made by the circuit designer. We can force the voltage on a communication bus low—or high, depending on how the LED is connected—by hitting it from a distance with a laser.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;If the eyes are the windows to the soul, then LED status indicators are a window into the electronics.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8461&quot; id=&quot;article-image-8461&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/measurement_apparatus.jpg&quot; width=&quot;1440&quot; height=&quot;792&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 5: Measurement apparatus. The orange acrylic is radiation shielding.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8451&quot; id=&quot;single-column-text-8451&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Measurements&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;The first question everyone always asks is, how far away can you do it? And the answer is, we don&#39;t know. Our&#39;s is a measurement paper, not developed into a practicable attack. We aimed it once, and then bolted everything down so it can&#39;t drift out of alignment. It&#39;s not my problem to figure out how to aim this thing. It&#39;s my problem to measure it.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;So we built this infernal machine (Figure 5). It consists of a pair of linear actuators, the x axis one bolted crosswise atop the carriage of the y axis one, which lets us raster scan a focused laser across any desired component on the circuit board, stopping every fiftieth of a millimeter to measure the voltage on the communication bus. There’s a live I&lt;sup&gt;2&lt;/sup&gt;C bus under there, and it’s communicating the whole time. Each linear actuator has a stepper motor, and there’s a bank of relays that lets us automatically vary the bus voltage and pull-up resistor value. Data collection is automatic, transmitted out by a serial connection over USB. The whole thing is controlled by an Arduino. I like Arduino; everything is C++, the hardware is bulletproof—it’s relatively difficult to accidentally fry the I/O pins—and it’s cheap.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8462&quot; id=&quot;article-image-8462&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/all_the_raw_data.png&quot; width=&quot;1440&quot; height=&quot;442&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 6: Raw data (left) from the apparatus in the previous figure. Each scan is 5 mm high and 5 mm wide, fifty lines of fifty samples per line. The color indicates voltage on the I2C bus when the laser is firing; blue is 3.3 V, red is 0 V. Isovoltage contours (middle) help visualize the active area; the critical value, 2.0 volts, is delineated by the single isovolt contour on the right. Any hit by a laser inside that contour impresses a bit on the I2C bus.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8452&quot; id=&quot;single-column-text-8452&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Data Collection&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Here&#39;s what the raw data from one of those scans looks like (Figure 6). You&#39;re looking straight on at the LED; the big blue square is exactly five millimeters across. The curvy arc on the right hand side is an artifact of the dome lens on the LED, we think.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;We can draw isovoltage contours (above, center) to begin to visualize how the voltage on the communication bus varies as the laser scans across the face of the LED. We&#39;re looking for the physical location where our laser can force the voltage on the circuit to go below the logic threshold.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The only one we&#39;re really interested in is the 2.0 volt contour line (Figure 6, right) because that&#39;s the value we found by experimentation to be the critical value.&amp;nbsp;&lt;/span&gt;This is the active area. Any hit by the laser inside that region alters the value of a bit. You can kind of see the outline of the square chip in the LED, or maybe that&#39;s just my imagination.&lt;/p&gt;&lt;p&gt;&lt;span&gt;Anything outside that region is a miss. The size of the active area, in square millimeters, is a direct measure of how hard the target is to hit.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;But there’s a problem.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8453&quot; id=&quot;single-column-text-8453&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;You can’t hit a target that isn’t there.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Blinky lights are cool, but the hardware designer might not have put one where we need it, on the communication bus. And you can&#39;t shoot lasers at an LED that isn&#39;t there.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8463&quot; id=&quot;article-image-8463&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/microphotograph.jpeg&quot; width=&quot;1440&quot; height=&quot;810&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 7: Electrostatic discharge (ESD) protection components on an I2C bus are similarly vulnerable, this time to an infrared laser. The microphotograph at upper left shows a magnified view of the tiny chip inside the board-mounted component at lower left, which is only 3 mm long. On the right is a complete set of scans made at 200 µm resolution of the ESD protection component shown here. Notice how the active area (in red) varies in size with logic family (5 V TTL in the top row, 1.8 V LVCMOS in the bottom row) and value of the pull-up resistor on the I2C bus (stronger pull-up to the left, weaker pull-up to the right).&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8454&quot; id=&quot;single-column-text-8454&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;It’s not only LEDs&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;But I don&#39;t want to give you the impression that it&#39;s only status indicators, or only LEDs; the definition of “accessible P–N junction” is wider than that. Figure 7 shows a microphotograph of the silicon chip inside an electrostatic discharge protection (ESD) component like the one at the lower left—which are found on shared communication buses, because they&#39;re susceptible to static electricity—and are even more sensitive than LEDs.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Here you can see the results of a lot of repeated runs against one of those. Notice how the active area, in red, gets larger as you move down the chart, and as you move toward the right. As the system voltage decreases, from 5 V TTL to 3.3 V CMOS, through 2.5 V low-voltage CMOS, by the time we get down to 1.8 volt LVCMOS, on the bottom row, we can force the value of a bit against any reasonable value of pull-up resistor. The values shown here bracket the range of pull-up resistor values, from 1 kΩ (fast, but power-hungry), to 2.2–4.7 kΩ (typical), to 10 kΩ (slow, but suitable for low-power devices that need to conserve battery).&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Now we have a model that makes testable predictions. For any combination of LED color, laser wavelength, logic family, and pull-up resistor value, we can predict if it&#39;s reversible.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Note that the active area on the ESD protection component is quite a bit smaller than an LED. The chip is only about 125 microns across, and it’s off-center in the gap. So it&#39;s a challenging target to hit.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8464&quot; id=&quot;article-image-8464&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/beam_axis_rotation.jpg&quot; width=&quot;1038&quot; height=&quot;954&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 8: Effect of elliptical beam axis rotation on the active area.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8465&quot; id=&quot;single-column-text-8465&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;It’s not isomorphic, either; Figure 8 shows the effect of elliptical beam axis rotation on the size of the active area. Recall from the microphotograph that the silicon chip is buried deep in a narrow slot between metal electrodes. Solid-state lasers emit an elliptical beam (corrected to circular with optics in more expensive lasers than the ones we have) and the semimajor axis of the elliptical beam pattern interacts with the narrow slot in interesting ways.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;By the way, LEDs tend to respond best to short wavelength visible lasers, but we found the most effective laser wavelengths for silicon ESD protection components to be in the invisible infrared, outside visual range. This means the attack is stealthy.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8455&quot; id=&quot;single-column-text-8455&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Proof of Concept&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://youtu.be/LgtlJqiiQAk&quot; target=&quot;_blank&quot; title=&quot;Video showing successful attack that changes the text output&quot;&gt;This video&lt;/a&gt; shows a working proof of concept, running on a live I&lt;sup&gt;2&lt;/sup&gt;C bus. The controller is trying to write the message NORMAL OPERATION on the display; the laser is trying to write the message PROOF OF CONCEPT. The laser and the bus controller are fighting over the bus, and the laser is generally winning.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8456&quot; id=&quot;single-column-text-8456&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Summary and Conclusions&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Our&#39;s is a measurement paper, not a practical attack. It opens a whole new area of reverse side channel analysis, extending the concept of glitching to ranged attack. The bar is set: remote code execution. But what did we overlook? How far away is practicable? Given a 50 W source at 405 nm, if you need to put 5 mW within a 5 mm circle at the target, that gives you 40 dB of link budget, for atmospheric attenuation, refraction through window glass, and angle of incidence.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;fieldset class=&quot;group-appendix field-group-fieldset form-wrapper&quot;&gt;&lt;legend&gt;&lt;span class=&quot;fieldset-legend&quot;&gt;Appendix&lt;/span&gt;&lt;/legend&gt;&lt;div class=&quot;fieldset-wrapper&quot;&gt;&lt;div class=&quot;field field-name-field-lvl2-appendix-refs field-type-text field-label-above&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;References:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-1&quot;&gt;&lt;/a&gt;&lt;p&gt;[1] Joe Loughry and Kasper Rasmussen. &quot;Basilisk: Remote code execution by laser excitation of P–N junctions without insider assistance”. In &lt;em&gt;18th USENIX WOOT Conference on Offensive Technologies (WOOT’24)&lt;/em&gt;, pages 245–261, Philadelphia, 12–13 August 2024. &lt;a href=&quot;https://www.usenix.org/conference/woot24/presentation/loughry&quot;&gt;https://www.usenix.org/conference/woot24/presentation/loughry&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-2&quot;&gt;&lt;/a&gt;&lt;p&gt;[2] Bret Giller. &quot;Implementing Practical Electrical Glitching Attacks&quot;. In &lt;em&gt;Black Hat Europe,&lt;/em&gt; Amsterdam, 10–13 November. &lt;a href=&quot;https://www.blackhat.com/docs/eu-15/materials/eu-15-Giller-Implementing-Electrical-Glitching-Attacks.pdf&quot;&gt;https://www.blackhat.com/docs/eu-15/materials/eu-15-Giller-Implementing-...&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-3&quot;&gt;&lt;/a&gt;&lt;p&gt;[3] D. H. Habing. “The use of lasers to simulate radiation-induced transients in semiconductor devices and circuits”. &lt;em&gt;IEEE Transactions on Nuclear Science&lt;/em&gt;, &lt;strong&gt;12&lt;/strong&gt;(5):91–100, 1965.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-4&quot;&gt;&lt;/a&gt;&lt;p&gt;[4] Sergei P. Skorobogatov and Ross J. Anderson. “Optical fault induction attacks”. In &lt;em&gt;4th International Workshop on Cryptographic Hardware and Embedded Systems (CHES)&lt;/em&gt;, Redwood Shores, California, USA, 13–15 August 2002.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-5&quot;&gt;&lt;/a&gt;&lt;p&gt;[5] Sam Beaumont and Larry Trowell. “Laser beams &amp;amp; light streams: Letting hackers go pew pew, building affordable light-based hardware security tooling”. In &lt;em&gt;Black Hat USA&lt;/em&gt;, Las Vegas, Nevada, 3–8 August 2024. https: //&lt;a href=&quot;http://www.blackhat.com/us-24/briefings/schedule/index.html#laser-beams--light-streams-letting-hackers-go-pew-pew-building-affordable-light-based-hardware-security-tooling-39708&quot;&gt;www.blackhat.com/us-24/briefings/schedule/index.html#laser-beams--light-...&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-6&quot;&gt;&lt;/a&gt;&lt;p&gt;[6] Peter Wright. &lt;em&gt;Spycatcher: the candid autobiography of a senior intelligence officer.&lt;/em&gt; New York: Viking Press, 1987. ISBN 978-0670820559&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-7&quot;&gt;&lt;/a&gt;&lt;p&gt;[7] National Security Agency. &quot;TEMPEST: a signal problem&quot;. &lt;em&gt;Cryptologic Spectrum&lt;/em&gt;, 1972. &lt;a href=&quot;https://web.archive.org/web/20130918021523/http://www.nsa.gov/public_info/_files/cryptologic_spectrum/tempest.pdf&quot;&gt;https://web.archive.org/web/20130918021523/http://www.nsa.gov/public_inf...&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-8&quot;&gt;&lt;/a&gt;&lt;p&gt;[8] Paul Kocher, Joshua Jaffe, and Benjamin Jun. &quot;Differential Power Analysis&quot;. In &lt;em&gt;Proceedings of the 19th Annual International Cryptology Conference on Advances in Cryptology (CRYPTO 99)&lt;/em&gt;, pages 388–398, Santa Barbara, California, 15–19 August 1999. &lt;a href=&quot;https://paulkocher.com/doc/DifferentialPowerAnalysis.pdf&quot;&gt;https://paulkocher.com/doc/DifferentialPowerAnalysis.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-9&quot;&gt;&lt;/a&gt;&lt;p&gt;[9] D. E. Rosenheim. &quot;Installation of the first production 701&quot;. &lt;em&gt;IEEE Annals of the History of Computing&lt;/em&gt;, &lt;strong&gt;5&lt;/strong&gt;(2):146–147, April–June 1983.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-10&quot;&gt;&lt;/a&gt;&lt;p&gt;[10] Kelly Fiveash. &quot;&#39;Camera-shy’ Raspberry Pi 2 suffers strange ‘XENON DEATH FLASH’ glitch. &lt;em&gt;The Register&lt;/em&gt;, 8 February 2015. &lt;a href=&quot;https://www.theregister.com/2015/02/08/raspberry_pi_2_camera_flash_glitch/&quot;&gt;https://www.theregister.com/2015/02/08/raspberry_pi_2_camera_flash_glitch/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-11&quot;&gt;&lt;/a&gt;&lt;p&gt;[11] Paul Rako. &quot;EEVblog #901 - Raspberry Pi 3 photoflash problem&quot;. 16 July 2016. &lt;a href=&quot;https://www.youtube.com/watch?v=dDcsTnqVgWc&quot;&gt;https://www.youtube.com/watch?v=dDcsTnqVgWc&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-12&quot;&gt;&lt;/a&gt;&lt;p&gt;[12] Niclas Kühnapfel, Stefan Preußler, Maximilian Noppel, Thomas Schneider, Konrad Rieck, and Christian Wressnegger. “LaserShark: Establishing Fast, Bidirectional Communication into Air-Gapped Systems”. In &lt;em&gt;Proceedings of the 37th Annual Computer Security Applications Conference (ACSAC)&lt;/em&gt;, pages 796–811, Online, 6–10 December 2021. DOI: 10.1145/3485832.348591.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-13&quot;&gt;&lt;/a&gt;&lt;p&gt;[13] Mordechai Guri. “Mind The Gap: Can Air-Gaps Keep Your Private Data Secure?”. 6 September 2024. DOI: 10.48550/arXiv.2409.04190, or arXiv:2409.04190 [cs.CR].&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-14&quot;&gt;&lt;/a&gt;&lt;p&gt;[14] Takeshi Sugawara, Benjamin Cyr, Sara Rampazzi, Daniel Genkin, and Kevin Fu. “Light Commands: Laser-Based Audio Injection Attacks on Voice-Controllable Systems”. Unpublished, 4 November, 2019. &lt;a href=&quot;https://lightcommands.com/&quot;&gt;https://lightcommands.com/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-15&quot;&gt;&lt;/a&gt;&lt;p&gt;[15] Sara Rampazzi, Benjamin Cyr, and Daniel Genkin. “Light Commands: Hacking Voice Assistants with Lasers”. In &lt;em&gt;Black Hat Europe 2020&lt;/em&gt;, Virtual, 7–10 December 2020. &lt;a href=&quot;https://www.blackhat.com/eu-20/briefings/schedule/index.html#light-commands-hacking-voice-assistants-with-lasers-21731&quot;&gt;https://www.blackhat.com/eu-20/briefings/schedule/index.html#light-comma...&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-16&quot;&gt;&lt;/a&gt;&lt;p&gt;[16] Andy Greenberg. “Hackers Can Use Lasers to ‘Speak’ to Your Amazon Echo or Google Home”. &lt;em&gt;Wired&lt;/em&gt;, 4 December 2019. &lt;a href=&quot;https://www.wired.com/story/lasers-hack-amazon-echo-google-home/&quot;&gt;https://www.wired.com/story/lasers-hack-amazon-echo-google-home/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-17&quot;&gt;&lt;/a&gt;&lt;p&gt;[17] Shenzhen Xuancai Electronic Co., Ltd. “Color Changing LED”. Shen Zhen, China, 2011. &lt;a href=&quot;http://cdn.sparkfun.com/datasheets/Components/LED/changingLED.pdf&quot;&gt;http://cdn.sparkfun.com/datasheets/Components/LED/changingLED.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-18&quot;&gt;&lt;/a&gt;&lt;p&gt;[18] Qipeng Semiconductor Co., Ltd. “CDT3447 3 LED Fade-in and fade-out output control IC, 2008”. &lt;a href=&quot;http://www.bowin-ic.com.hk/IC/LED%20flasher%20IC/CDT3447.pdf&quot;&gt;http://www.bowin-ic.com.hk/IC/LED%20flasher%20IC/CDT3447.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/fieldset&gt;
</description><link>https://www.usenix.org/publications/loginonline/solving-first-mile-problem</link><guid isPermaLink="false">https://www.usenix.org/publications/loginonline/solving-first-mile-problem</guid><pubDate>Sun, 29 Sep 2024 16:00:00 GMT</pubDate><author>Joe Loughry</author></item><item><title>Navigating the Kubernetes Odyssey</title><description>&lt;div class=&quot;field field-name-field-lv2-subtitle field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;A tale of early adoption and sustained modernization&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-publication-date field-type-datetime field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;date-display-single&quot;&gt;September 4, 2024&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-article-type field-type-taxonomy-term-reference field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Case Study&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-label-inline clearfix field-type-text-long field-pseudo-field field-pseudo-field--author-list&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Authors:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/navigating-kubernetes-odyssey#Ra%C3%BAl%20Benencia&quot; title=&quot;Raúl Benencia&quot;&gt;Raúl Benencia&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-shepherds field-type-user-reference field-label-inline clearfix&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Article shepherded by:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;usenix-user-reference-names&quot;&gt;Laura Nolan&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraphs-items paragraphs-items-field-lv2-body paragraphs-items-field-lv2-body-full paragraphs-items-full&quot;&gt;
  &lt;div class=&quot;field field-name-field-lv2-body field-type-paragraphs field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8411 paragraphs-first-text&quot; id=&quot;single-column-text-8411&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Bare Metal Days&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;ThousandEyes’ infrastructure has humble origins. Around the year 2010, our founders scavenged the first servers out of the recycling bins of bigger companies in Silicon Valley, and quickly set them to run in a garage in Mountain View. Against all odds, ThousandEyes grew: bigger customers, bigger contracts, and, of course, bigger reliability concerns. Having a proper infrastructure in place was in order, so the scavenged servers were repurposed and racked in a data center. A few years later, pricing and location compelled a migration to another data center close to the company&#39;s headquarters in downtown San Francisco.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Around 2015, ThousandEyes’s main infrastructure consisted of four racks with a bunch of servers, some of them running Xen on Debian, and our main application, a Software-as-a-Service (SaaS) offering, running on three Virtual Machines (VMs) behind a physical load balancer distributed between three of those racks–a standard setup at that time.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The company was growing faster than we could scale our infrastructure, so we had to design a solution for hyper-scaling. That&#39;s when Kubernetes came into the picture. Today, it sounds like the obvious solution, but when we started experimenting with it, we didn&#39;t know if it would live up to the hype. Our platform was made of, for the most part, monolithic applications. Our software footprint was small enough, and containerizing everything was a daunting but doable effort. This was our first big migration.&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8412&quot; id=&quot;single-column-text-8412&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;The First Cluster&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Our first iteration of the cluster was running the now defunct CoreOS, with Kubernetes version 1.1.2; we named it&lt;em&gt; k8s1&lt;/em&gt;. We hosted absolutely everything in our data center: Continuous Integration (CI) pipeline, Docker registry, etcd cluster, Kubernetes control plane. The original four racks expanded to a cage with ten racks. Each Kubernetes worker was a bare-metal server that had to be racked by our team and bootstrapped using &lt;a href=&quot;https://github.com/thousandeyes/shoelaces&quot;&gt;Shoelaces&lt;/a&gt;, an in-house server bootstrapping automation tool we open-sourced years ago.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CoreOS was new to us; the rest of our fleet was running Ubuntu 14.04 at that time, and servers were configured using Puppet 3. Being new to the Kubernetes world and running containerized applications, we took the bait and chose that OS. It made perfect sense in theory: a container-optimized Operating System (OS) for a container orchestration system such as Kubernetes. In practice, it was not the right fit for us, as we did not find it flexible enough. Most components were configured at boot time with a configuration file known as cloud-init, which meant we were not able to use our existing Puppet code base. Additionally, running custom processes and kernel modules was not straightforward; for example, we went through painful debugging sessions to integrate CoreOS with our network file system at that time, GlusterFS. We decided to migrate the cluster to Ubuntu, enabling us to use our then-modern Puppet 5 code base present in the rest of our infrastructure. It was early 2018, and we were running Kubernetes version 1.5.4.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;This migration was simple but painful. The preparation phase involved writing a few Puppet modules and rounding a few sharp edges in Ubuntu to befriend it with our Kubernetes setup. During the implementation phase, we had to remove each CoreOS worker from the load balancer, shut it down, and use Shoelaces to bootstrap the server again with the new operating system. Slowly but surely, we pulled the tablecloth out from under the dishes, and our developers barely felt it.&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8413&quot; id=&quot;single-column-text-8413&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Jumping Ships&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;We were a small team, busy and distracted by the myriad migrations and maintenance we were doing on the cluster itself, so we neglected to update &lt;em&gt;k8s1&lt;/em&gt; for several versions. We were stuck in 1.5 and upstream was already in 1.13&lt;/span&gt;&lt;span&gt;—&lt;/span&gt;a non-negligible version lag.&lt;/p&gt;&lt;p&gt;&lt;span&gt;Additionally, our Continuous Integration and Continuous Delivery (CI/CD) pipeline was not robust when it came to Kubernetes manifests. We used to have an internal tool, triggered by Jenkins, that would deploy manifests for us whenever there was a commit with a change in a given directory within each of our git repos. This approach made drift detection extremely challenging, as there was no way to visualize it. Additionally, the tool was not robust and it would fail to recognize some Kubernetes resources, or even crash when trying to parse a Git commit message–the kind of issues one typically deals with when building internal tools. In such situations, one encounters a build-versus-buy dilemma. However, in our case, being early adopters, we had no choice but to build as there were no strong solutions available in the market.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;These were some of the circumstances that propelled us to spin up a new cluster instead of updating the existing one. We named it &lt;em&gt;k8s2&lt;/em&gt;, and at bootstrap time, it was running version 1.15.3 in Ubuntu servers managed by Puppet 5.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;We decided to pair the migration to this cluster with a radical change in how we deployed our manifests. We switched to a GitOps-based approach using ArgoCD, choosing it due to its strong community and ease of visualizing and remediating drift. With the help of upper management, we recruited the whole engineering department for this effort. Each team owned its Kubernetes manifests in their own Git repositories with their own Git practices, making it impractical for a single team to do all the work. With this new approach, we moved Kubernetes manifests into a separate repository. Our workloads would now have an extra repository with just Kubernetes manifests—all of them buildable with kustomize, a Kubernetes native configuration management tool.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Mid-migration from &lt;em&gt;k8s1&lt;/em&gt; to &lt;em&gt;k8s2&lt;/em&gt;, we finally committed to something we knew had to happen sooner rather than later: migrating to a cloud provider.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8414&quot; id=&quot;single-column-text-8414&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Sailing to the Clouds&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Given the imminent expansion of our infrastructure, the need for another region in Europe, and a disaster recovery environment, using bare metal was no longer an option.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;We needed to consider whether this decision to migrate to a cloud provider would change the course of our migration from &lt;em&gt;k8s1&lt;/em&gt; to &lt;em&gt;k8s2&lt;/em&gt; or if we would keep it the same way and only think about it once we finished. It was a trade-off we needed to consider. We decided to complete the migration to &lt;em&gt;k8s2&lt;/em&gt; given that we had the momentum and know-how in place, and at that time, many things were unknown to us regarding Amazon Web Services (AWS), our chosen provider.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The main requirement was to use AWS &lt;em&gt;us-west-1&lt;/em&gt; as our main region, given its close proximity to our data center in downtown San Francisco. There were, however, a couple limiting factors. Elastic Kubernetes Service (EKS), AWS&#39; hosted Kubernetes product, was not available in that region, and the region only had two availability zones (AZs). Yet another trade-off to consider: do we wait for AWS to add EKS support? Or do we deploy our Puppet-managed cluster in Elastic Cloud Compute (EC2) instances?&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;We did not have a clear date from AWS and wanted a timeline we could control, so we decided to go via the difficult path and run Kubernetes directly on EC2s. We connected our data center and AWS &lt;em&gt;us-west-1&lt;/em&gt; with AWS Direct Connect (a product that connects private on-prem networks with Virtual Private Clouds) and added Kubernetes workers on AWS.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8415&quot; id=&quot;article-image-8415&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/fig1_1.png&quot; width=&quot;1440&quot; height=&quot;482&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 1. EC2 workers communicating with the data center Kubernetes cluster.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8416&quot; id=&quot;single-column-text-8416&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;The AWS workers had taints so that our workloads wouldn&#39;t indiscriminately run in a different environment. “Taints” are node repellents that prevent pods from landing in that node. The counterpart to taints are “Tolerations”, which allow for pods to get scheduled despite the taints. Taints are applied to nodes, and tolerations to pods.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-code-excerpt paragraphs-item-code-excerpt paragraphs-item-full paragraphs-item-8417&quot; id=&quot;code-excerpt-8417&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-code-excerpt field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;$ kubectl describe no k8s2-1-a&lt;br&gt;
Name:               k8s2-1-a&lt;br&gt;
&amp;lt;...&amp;gt;&lt;br&gt;
Taints:             site=sfo2:NoSchedule&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-code-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Code 1. A Kubernetes node with taints.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8418&quot; id=&quot;single-column-text-8418&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Our first EC2 workers connected to the data center Kubernetes control plane. We later added control plane nodes in AWS that maintained communication with the etcd cluster in the data center (etcd is a strongly-consistent distributed data store which the Kubernetes control plane uses to store critical state). The AWS-based Kubernetes workers connected to the new AWS control plane. Data center workers would still connect to the data center control plane. Under the hood, all the control plane nodes were connected to the etcd cluster, which was still running in the data center, but not for much longer.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8419&quot; id=&quot;article-image-8419&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/fig2_0.png&quot; width=&quot;1440&quot; height=&quot;482&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 2. EC2 workers and control plane nodes communicating with the etcd cluster in the data center.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8420&quot; id=&quot;single-column-text-8420&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Migrating the etcd cluster was a different dance. We only had two AZs, but we needed three to ensure high availability, proper quorum, and avoid split-brain situations.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;According to the etcd documentation [1], &lt;em&gt;&quot;an etcd cluster needs a majority of nodes, a quorum, to agree on updates to the cluster state. For a cluster with n members, quorum is (n/2)+1. For any odd-sized cluster, adding one node will always increase the number of nodes necessary for quorum. Although adding a node to an odd-sized cluster appears better since there are more machines, the fault tolerance is worse since exactly the same number of nodes may fail without losing quorum but there are more nodes that can fail. If the cluster is in a state where it can’t tolerate any more failures, adding a node before removing nodes is dangerous because if the new node fails to register with the cluster (e.g., the address is misconfigured), quorum will be permanently lost.&quot;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;We ended up bootstrapping one node in &lt;em&gt;us-west-2 &lt;/em&gt;and two nodes in each &lt;em&gt;us-west-1&lt;/em&gt; AZ, for a total of five. The Kubernetes control plane was configured to point only to the &lt;em&gt;us-west-1&lt;/em&gt; etcd nodes. The synchronization with the fifth node happened in the background. This was not an ideal solution, but it worked well enough for us without incurring noticeable latency. In the unlikely event of a &lt;em&gt;us-west-1&lt;/em&gt; AZ going down, latency would have slightly increased, especially under a constant stream of updates in the cluster. However, our cluster did not have that usage pattern, and ultimately, this increase would not have been significant enough to impact customers.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8421&quot; id=&quot;article-image-8421&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/fig3_0.png&quot; width=&quot;1440&quot; height=&quot;678&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 3. Using an AZ in the us-west-2 region to achieve High Availability (HA) in etcd.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8422&quot; id=&quot;single-column-text-8422&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;A notable difference in our AWS setup was the use of auto-scaling groups. We no longer had to rack and bootstrap new workers whenever we needed to scale. Instead, we decided to designate one ASG per team to segregate costs and noisy neighbors. We would control this behavior with node selectors and tolerations.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-code-excerpt paragraphs-item-code-excerpt paragraphs-item-full paragraphs-item-8423&quot; id=&quot;code-excerpt-8423&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-code-excerpt field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;nodeSelector:&lt;br&gt;
  asg: webapps&lt;br&gt;
tolerations:&lt;br&gt;
- key: &quot;asg&quot;&lt;br&gt;
  operator: &quot;Equal&quot;&lt;br&gt;
  value: &quot;webapps&quot;&lt;br&gt;
  effect: &quot;NoSchedule&quot;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-code-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Code 2. A workload specifying a node selector and tolerations.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8424&quot; id=&quot;single-column-text-8424&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;In retrospect, this might not have been the brightest idea. These requirements can easily metastasize, and we were now requiring team members to add node selectors and tolerations to all their workloads. A better approach would have been to compute these fields automatically based on, for example, the namespace to which they belong.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Workloads were migrated progressively at each team&#39;s discretion. Such was our luck that, when we were about 70% done, AWS announced EKS support in &lt;em&gt;us-west-1&lt;/em&gt;. We thought about bootstrapping a new managed cluster and completing the migration there, given that it could save us from throwaway work. However, we considered this tradeoff and decided to finish the existing migration, given that there were many uncertainties in how we would implement EKS. Additionally, our staging environment had already been migrated. Starting anew would mean an environmental disparity, putting us in a precarious situation. We concluded that sometimes it makes sense to do throwaway work in the name of reliability.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8425&quot; id=&quot;single-column-text-8425&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;New Waters&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;ThousandEyes was experiencing growth, with a significant portion of our customer base located in Europe. Thus, the latency we had to our platform in &lt;em&gt;us-west-1&lt;/em&gt; was unacceptable, and expanding to a new region became paramount. We chose &lt;em&gt;eu-central-1&lt;/em&gt;, a region with three AZs and full support for EKS.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;We developed Terraform code to bootstrap an EKS cluster and mimic the per-team Autoscaling Groups (ASGs) we had in &lt;em&gt;k8s2&lt;/em&gt;. Our vision was to spin up a ready-to-be-used cluster with a single pull request. In practice, we faced a few challenges that forced us to split the code into multiple layers: bootstrapping the cluster, installing core services via Terraform, and setting up load balancers.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;In a relatively short amount of time, we had our new cluster, &lt;em&gt;eks1&lt;/em&gt;, ready to be used. Our engineers were able to spin up their services, and shortly after, we started serving some of our customers in our EU region.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Shortly after our first EKS cluster was ready, we started receiving requests for more clusters: disaster recovery, team-specific, tool-specific, etc. We used each cluster to improve our bootstrapping process. Our Infrastructure as Code (IaC) modules allowed us to have cookie-cutter EKS clusters relatively quickly.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;It was clear that we needed to manage these clusters uniformly, and for the most part, we could do so. For example, if we needed to update cluster-autoscaler in all our clusters, a single commit would have sufficed. However, there was still one outlier.&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8426&quot; id=&quot;single-column-text-8426&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;The Anchor&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Even though we were running close to ten EKS clusters at that time, our main cluster, &lt;em&gt;k8s2&lt;/em&gt;, which hosted our SaaS platform, continued to serve customers. Our small team, responsible for all our Kubernetes infrastructure, shifted its focus to developing EKS modules. Consequently, the maintenance of &lt;em&gt;k8s2&lt;/em&gt; was relegated to a secondary priority. Once again, our main cluster became outdated, lagging several minor versions behind the EKS clusters.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Our ideal scenario was clear: we aimed to run everything seamlessly on EKS under uniform management. Faced with a new trade-off, we chose to focus our limited time on designing a migration to EKS rather than coordinating an upgrade in &lt;em&gt;k8s2&lt;/em&gt;. As a consequence, inconsistencies between our environments started pouring in like rain due to deprecated APIs and new features. We handled those inconsistencies with kustomize patches.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-code-excerpt paragraphs-item-code-excerpt paragraphs-item-full paragraphs-item-8427&quot; id=&quot;code-excerpt-8427&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-code-excerpt field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;patchesJson6902:&lt;br&gt;
  - target:&lt;br&gt;
      group: networking.k8s.io&lt;br&gt;
      version: v1&lt;br&gt;
      kind: &#39;Ingress&#39;&lt;br&gt;
      name: &#39;.*&#39;&lt;br&gt;
    patch: |-&lt;br&gt;
      - op: replace&lt;br&gt;
        path: &quot;/apiVersion&quot;&lt;br&gt;
        value: networking.k8s.io/v1beta1&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-code-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Code 3. Patching a manifest to use an earlier version of the Ingress API.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8428&quot; id=&quot;single-column-text-8428&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;This situation wasn’t sustainable and could quickly spiral out of control. Our main cluster, &lt;em&gt;k8s2&lt;/em&gt;, was anchoring us to technical debt.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;To compound the issue, &lt;em&gt;k8s2&lt;/em&gt; had a hard limit of 256 nodes. We were using Flannel as our network fabric, with the default size for its pod CIDR network:&amp;nbsp; /16.&amp;nbsp; Out of that network, each node would get its own /24, accounting for a total of 256 nodes. We were already using over 200, and although we had some room for growth, it was a looming concern.&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8429&quot; id=&quot;single-column-text-8429&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;The Gangway&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;There we were again, having to coordinate a new cluster-to-cluster migration. It felt like we had to migrate &lt;em&gt;k8s1&lt;/em&gt; to &lt;em&gt;k8s2&lt;/em&gt; all over again, but we were in a different state this time.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Throughout our Kubernetes journey, two important things happened. We scaled at a cluster level, running hundreds of services, and the teams using the cluster grew. We could not make this migration the same way because tracking execution across all our teams would have been a nightmare. Instead, we used this as an opportunity to create homegrown tooling and automate.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;We always lacked the right “excuse” to implement a service mesh, but we seized the migration as the perfect opportunity to do so. This change would allow our services to communicate with each other regardless of the cluster in which they reside. After a few weeks of research, we settled on using Istio.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;In our opinion, it had the right balance between project maturity and community support. We learned the ropes and installed it in &lt;em&gt;k8s2&lt;/em&gt;. Additionally, we bootstrapped a new EKS cluster, &lt;em&gt;eks1&lt;/em&gt;, in the same region and connected the clusters using an east-west gateway.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;However, we still had to incorporate our services into the mesh. We did this semi-manually, namespace by namespace:&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-code-excerpt paragraphs-item-code-excerpt paragraphs-item-full paragraphs-item-8430&quot; id=&quot;code-excerpt-8430&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-code-excerpt field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;if [ &quot;$OP&quot; == &quot;enable&quot; ]; then&lt;br&gt;
  kubectl label --overwrite ns &quot;$NS&quot; istio.io/rev=$ISTIO_REVISION&lt;br&gt;
elif  [ &quot;$OP&quot; == &quot;disable&quot; ]; then&lt;br&gt;
  kubectl label ns &quot;$NS&quot; istio.io/rev-&lt;br&gt;
fi&lt;/p&gt;
&lt;p&gt;if [ &quot;$RESTART&quot; == &quot;true&quot; ]; then&lt;br&gt;
  for i in $(kubectl -n &quot;$NS&quot; get deploy --no-headers | grep -v &#39;0/0&#39; | cut -d&#39; &#39; -f1); do&lt;br&gt;
    kubectl -n &quot;$NS&quot; rollout restart deploy &quot;$i&quot;&lt;br&gt;
  done&lt;br&gt;
fi&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-code-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Code 4. A script to enable/disable Istio and optionally restart workloads.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8431&quot; id=&quot;single-column-text-8431&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;We started parallel workloads in &lt;em&gt;eks1&lt;/em&gt;, but we needed to make sure validations were done before they started receiving traffic. To control these knobs, we leveraged Istio&#39;s traffic control primitives. We set a DestinationRule for each workload to define subsets based on the network they were part of.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-code-excerpt paragraphs-item-code-excerpt paragraphs-item-full paragraphs-item-8432&quot; id=&quot;code-excerpt-8432&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-code-excerpt field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;apiVersion: networking.istio.io/v1beta1&lt;br&gt;
kind: DestinationRule&lt;br&gt;
metadata:&lt;br&gt;
  name: webapps-ing-ctrl.webapps.svc.cluster.local&lt;br&gt;
spec:&lt;br&gt;
  host: webapps-ing-ctrl.webapps.svc.cluster.local&lt;br&gt;
  subsets:&lt;br&gt;
    - labels:&lt;br&gt;
        topology.istio.io/network: k8s2.prd.sfo2&lt;br&gt;
      name: k8s2&lt;br&gt;
    - labels:&lt;br&gt;
        topology.istio.io/network: eks1.prd.sfo2&lt;br&gt;
      name: eks1&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-code-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Code 5. A DestinationRule to define workload&#39;s subsets.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8433&quot; id=&quot;single-column-text-8433&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Additionally, we used a VirtualService for each workload to control which cluster was serving requests. This approach enabled us to slowly ramp up workloads into &lt;em&gt;eks1&lt;/em&gt; to validate that our platform was working as expected before committing all the traffic.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-code-excerpt paragraphs-item-code-excerpt paragraphs-item-full paragraphs-item-8434&quot; id=&quot;code-excerpt-8434&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-code-excerpt field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;apiVersion: networking.istio.io/v1beta1&lt;br&gt;
kind: VirtualService&lt;br&gt;
metadata:&lt;br&gt;
  name: webapps-ing-ctrl.webapps.svc.cluster.local&lt;br&gt;
spec:&lt;br&gt;
  hosts:&lt;br&gt;
    - webapps-ing-ctrl.webapps.svc.cluster.local&lt;br&gt;
  http:&lt;br&gt;
    - route:&lt;br&gt;
        - destination:&lt;br&gt;
            host: webapps-ing-ctrl.webapps.svc.cluster.local&lt;br&gt;
            subset: k8s2&lt;br&gt;
          weight: 0&lt;br&gt;
        - destination:&lt;br&gt;
            host: webapps-ing-ctrl.webapps.svc.cluster.local&lt;br&gt;
            subset: eks1&lt;br&gt;
          weight: 100&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-code-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Code 6. A VirtualService to control workload&#39;s traffic.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8435&quot; id=&quot;single-column-text-8435&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Given that we had to do this dance for each workload, we automated the process by generating these manifests programmatically.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-code-excerpt paragraphs-item-code-excerpt paragraphs-item-full paragraphs-item-8436&quot; id=&quot;code-excerpt-8436&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-code-excerpt field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;$ ./bin/generate-migration-manifests \&lt;br&gt;
    --src-env-dir environments/staging/us-west-1/k8s2/ \&lt;br&gt;
    --dst-env-dir environments/staging/us-west-1/eks1/ \&lt;br&gt;
    --kube-ctx k8s2.stg.sfo2 \&lt;br&gt;
    --ns agent --svc agent-service&lt;br&gt;
[+] Generating yaml for agent-service.agent in environments/staging/us-west-1/k8s2/agent/agent-service.yaml&lt;br&gt;
[+] Generating yaml for agent-service.agent in environments/staging/us-west-1/eks1/agent/agent-service.yaml&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-code-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Code 7. Automated generation of traffic control manifests.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8437&quot; id=&quot;single-column-text-8437&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;We executed this migration across several weeks, focusing on one namespace at a time. We decided not to do the entire migration in staging and to do it later in production instead because we knew it was a big effort that would span weeks if not months, and we could not afford to lose parity between our environments.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Instead, we migrated a namespace in staging, validated it, and then migrated the same namespace in production. Some namespaces were bigger and more difficult than others, and we would take several days to complete the migration safely. During a namespace migration, the owning team was interrupted minimally to validate that their services were acting normally. We were able to use Istio metrics to validate that the traffic was going to the new cluster, as shown in Figure 4.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8438&quot; id=&quot;article-image-8438&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/fig4_0.png&quot; width=&quot;1440&quot; height=&quot;681&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 4. Using Istio metrics to visualize the cluster switch.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-code-excerpt paragraphs-item-code-excerpt paragraphs-item-full paragraphs-item-8439&quot; id=&quot;code-excerpt-8439&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-code-excerpt field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;sum by (app, destination_cluster)(rate(istio_requests_total{destination_workload_namespace=&quot;accounting&quot;,dc=~&quot;dc1|sfo2&quot;}[1h]))&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-code-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Metrics query used to visualize the cluster switch.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8440&quot; id=&quot;single-column-text-8440&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Not everything was smooth sailing. On a few occasions, we had to revert a whole day’s worth of work due to problems running the workloads in &lt;em&gt;eks1&lt;/em&gt;. On one occasion, we noticed lag piling up on one of our Kafka clusters. Kafka, a distributed event streaming platform, was holding up events, and the just-migrated workloads in &lt;em&gt;eks1&lt;/em&gt; were not processing them fast enough. After rolling back and analyzing what went wrong, we realized that the ASG in &lt;em&gt;eks1&lt;/em&gt; had a weaker instance type than what we were using in &lt;em&gt;k8s2&lt;/em&gt;. Once fixed, we retried that migration, and the new workers in &lt;em&gt;eks1&lt;/em&gt; were able to withstand the pressure from the Kafka workloads.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Another issue arose due to mismatched configurations between the nodes. Our &lt;em&gt;k8s2 &lt;/em&gt;nodes had a specific TCP keepalive time that was required to interact with a database. That &lt;em&gt;k8s2&lt;/em&gt; configuration was deep in our Puppet code, and we missed setting it on our managed &lt;em&gt;eks1&lt;/em&gt; nodes. As a result, some pods were timing out in their connections to the database. Naturally, porting said configuration solved the issue.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;An additional mishap occurred due to mismatched security groups. A few pods needed to interact with parts of our infrastructure not hosted in Kubernetes and were failing to do so because we missed adding eks1 nodes to their allow-list. Once we identified this situation, we looked for all security groups where &lt;em&gt;k8s2&lt;/em&gt; nodes were being allowed, and we also added &lt;em&gt;eks1&lt;/em&gt; nodes to make sure that no other migrated workload would hit the same problem.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;And so, with this approach, even though we faced a few rough patches along the way, we were able to migrate a cluster used by 20+ teams with hundreds of workloads without involving the whole engineering department. We gracefully got away from the old cluster and docked into the safe harbor of our new infrastructure. We left &lt;em&gt;k8s2&lt;/em&gt; safely, which served us well until the very end.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8441&quot; id=&quot;single-column-text-8441&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Epilogue&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;In this article I presented a real-life scenario of an early Kubernetes adopter who significantly expanded their organization and workloads over time. If the team is small, a delicate balance must be kept between sustainably modernizing the infrastructure versus keeping the lights on with day-2 operations. Behind Kubernetes lies a sea of complexity. Managed clusters offer a degree of automation but do not serve as a panacea. Even with these, cluster administrators must ensure manifests remain valid across updates. In a small cluster with few users, the responsibility of updating these manifests can fall to their owners. In larger clusters, automation becomes crucial to avoid a coordination nightmare.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;I&#39;ve often read, with quiet envy, about people smoothly upgrading and migrating entire Kubernetes clusters using a blue-green approach or other sparkly techniques. While I&#39;m convinced of its feasibility, not every organization possesses the necessary maturity to do so. Ours certainly didn&#39;t. The trade-offs we chose were appropriate for our circumstances, considering the diversity of our workloads and the tools and techniques available to us at the time. As we navigate these complexities, we keep learning, improving, and moving forward—step by step, cluster by cluster.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;fieldset class=&quot;group-appendix field-group-fieldset form-wrapper&quot;&gt;&lt;legend&gt;&lt;span class=&quot;fieldset-legend&quot;&gt;Appendix&lt;/span&gt;&lt;/legend&gt;&lt;div class=&quot;fieldset-wrapper&quot;&gt;&lt;div class=&quot;field field-name-field-lvl2-appendix-refs field-type-text field-label-above&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;References:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-1&quot;&gt;&lt;/a&gt;&lt;p&gt;[1] etcd Frequently Asked Questions.&amp;nbsp;&lt;a href=&quot;https://etcd.io/docs/v3.3/faq/%C2%A0&quot;&gt;https://etcd.io/docs/v3.3/faq/&amp;nbsp;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/fieldset&gt;
</description><link>https://www.usenix.org/publications/loginonline/navigating-kubernetes-odyssey</link><guid isPermaLink="false">https://www.usenix.org/publications/loginonline/navigating-kubernetes-odyssey</guid><pubDate>Tue, 03 Sep 2024 16:00:00 GMT</pubDate><author>Raúl Benencia</author></item><item><title>Artificial Intelligence and the New Economics of Cyberattacks</title><description>&lt;div class=&quot;field field-name-field-lv2-publication-date field-type-datetime field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;date-display-single&quot;&gt;August 29, 2024&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-article-type field-type-taxonomy-term-reference field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Research&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-label-inline clearfix field-type-text-long field-pseudo-field field-pseudo-field--author-list&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Authors:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#Vaibhav%20Garg&quot; title=&quot;Vaibhav Garg&quot;&gt;Vaibhav Garg&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#Jayati%20Dev&quot; title=&quot;Jayati Dev&quot;&gt;Jayati Dev&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-shepherds field-type-user-reference field-label-inline clearfix&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Article shepherded by:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;usenix-user-reference-names&quot;&gt;Rik Farrow&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraphs-items paragraphs-items-field-lv2-body paragraphs-items-field-lv2-body-full paragraphs-items-full&quot;&gt;
  &lt;div class=&quot;field field-name-field-lv2-body field-type-paragraphs field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8397 paragraphs-first-text&quot; id=&quot;single-column-text-8397&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Information security is hard in part because of the underlying&lt;/span&gt;&amp;nbsp;economics of attack and defense. Different economic models result in distinct equilibria: some favor attackers, whereas others advantage defenders. These equilibrium positions&amp;nbsp;may change with the introduction of powerful new Large Language Models (LLMs).&lt;/p&gt;&lt;p&gt;In this&amp;nbsp;article we investigate three key impacts of these AI-based disruptions. First, emerging&amp;nbsp;Artificial Intelligence (AI) capabilities may increase both the number of attackers as well as&amp;nbsp;the types of cybercrime they engage in. Second, we discuss how these capabilities will be&amp;nbsp;developed by a small set of players, which will potentially increase concentration in&amp;nbsp;cybercriminal markets. Third, finally as both attackers and defenders attempt to use AI, the&amp;nbsp;asymmetry between attackers and defenders will decrease. Thus, we show how AI will&amp;nbsp;impact the economic functioning of cybercrime markets.&lt;/p&gt;&lt;h2&gt;1. Introduction&lt;/h2&gt;&lt;p&gt;In Isaac Asimov’s famous Foundation Series [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-1&quot; target=&quot;_blank&quot; title=&quot;1&quot;&gt;1&lt;/a&gt;], the protagonist Harry Sheldon was able to  model, and thus predict, humanity’s future until the emergence of a new unforeseen  ‘technology’ in the form of mutants. Similarly, the emergence of Generative AI and  associated Large Language Models (LLMs) threaten to disrupt our traditional understanding  of Cybersecurity Economics, particularly the models of cyberattack and cyber defense. AI  may therefore fundamentally reshape the structure of cybercriminal organizations and  markets.&lt;/p&gt;&lt;p&gt;This transformation may then in turn impinge or assist defender efforts. Consider that LLMs may be used to generate more convincing social engineering attacks  (e.g., phishing emails), reduce the effort to build malware (e.g., by automatically writing  code), or be used to generate attacks by highly sophisticated persistent threat actors,  previously exclusive in the domain of nation state attackers according to recent research by  Nickson Quak from the Cyber Threat Alliance [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-2&quot;&gt;2&lt;/a&gt;]. According to Lin et al., attackers may  jailbreak mainstream LLMs or alternatively they may leverage malicious LLMs designed for  nefarious purposes, e.g., WormGPT, FraudGPT [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-3&quot;&gt;3&lt;/a&gt;]. These developments create the  impression that AI fundamentally advantages the attacker.&lt;/p&gt;&lt;p&gt;Yet AI has traditionally been the  tool of cyber defenders. AI-based tools have been used in cybersecurity for spam/phishing  detection, intrusion detection, malware detection, vulnerability scanning and remediation,  etc. [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-4&quot;&gt;4&lt;/a&gt;]. The market for AI in cybersecurity, according to Taddeo et al., is expected to grow by  an order of magnitude by 2025 compared to 2016 [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-5&quot;&gt;5&lt;/a&gt;]. Prior work by Gupta et al. highlights  how emerging AI like LLMs also promise to advance defender capabilities [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-6&quot;&gt;6&lt;/a&gt;]. LLMs can be  used to reduce the amount of technical expertise needed by a Security Operations Center  (SOC) analyst by collating multiple indicators of compromise and providing the combined  intelligence in a human readable format. They can be used to conduct code reviews for  security. They can also be used to generate patches more quickly for known vulnerable code.  What then is the overall impact of AI on the dynamics between attackers and defenders?&lt;/p&gt;&lt;p&gt;In  this article we attempt to address this by looking at three questions. First, what is  the impact of AI on organized cybercrime? Second, what is the impact of AI on reliability of  cybercrime markets? Third, what is the impact of AI on attacker and defender capabilities? We make three corresponding contributions investigating the overall impact of AI on the  dynamics between attackers and defenders:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Exemplify how AI may increase both the number of cybercriminals and the types of  cybercrimes they engage in.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Demonstrate how economic forces of AI-powered tools may cause further concentration  of power in the cybercriminal market within an even smaller set of actors (i.e., cybercriminal organizations).&amp;nbsp;&lt;/li&gt;&lt;li&gt;Present a case of how AI may decrease the asymmetry between attackers and defenders  regardless of the model. &lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The rest of the article is organized as follows. Section 2 discusses organization in cybercrime.  In Section 3, we reframe the question of system reliability for cybercrime products through  relevant economic models. Section 4 presents the two canonical models of attack and defense. In section 5 we discuss how AI may inform the economic models discussed in  Sections 3 and 4. Section 6 concludes with a discussion of future work.&amp;nbsp;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8398&quot; id=&quot;single-column-text-8398&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;2. Rise of Organized Cybercrime &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;Why do individuals engage in cybercrime? One explanation is that the entry barrier for  engaging in criminal activity is lower than that for engaging in legitimate activity [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-7&quot;&gt;7&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-8&quot;&gt;8&lt;/a&gt;].  However, a recent report from the National Security Telecommunications Advisory  Committee (NSTAC) claims that investments in cybersecurity by defenders have made it  more difficult to engage in cybercrime [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-9&quot;&gt;9&lt;/a&gt;]. Consequently, while the marginal cost of  cybercrime has gone up the marginal benefits have gone down. It can then be argued that  cybercriminals have responded in line with Coase’s theory of the firm to become organized  and thus also become specialized [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/reference-10&quot;&gt;10&lt;/a&gt;].&lt;/p&gt;&lt;p&gt;Prior research by Garg et al. notes that cybercriminals typically organize as either gangs or  mobs [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-11&quot;&gt;11&lt;/a&gt;]. Gangs are characterized by a central leader. The organization size of gangs is  impinged by Dunbar limits [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-12&quot;&gt;12&lt;/a&gt;], which is typically 100-230 members. Such gangs specialize  in a narrow set of cybercrimes to leverage competitive advantage. In contrast, mobs are  characterized by a complex hierarchy with multiple leaders so that there is no single critical  link that can collapse. Organization size of mobs have a larger portfolio of cybercriminal  activity.&lt;/p&gt;&lt;p&gt;Additional organization and cooperation for these organized cybercrime enterprises are  driven by the technical complexity of conducting cybercrime. Consider that to run a  successful ransomware campaign, an attacker will need access to phishing infrastructure,  access to malware authors or pre-packaged ransomware along with decryption keys, and a  support service agent who can respond to queries from infected “customers”. Arguably, as  Collier et al. mention, running a cybercriminal enterprise is akin to running a standard IT  company [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-13&quot;&gt;13&lt;/a&gt;].&amp;nbsp;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8399&quot; id=&quot;single-column-text-8399&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;3. Cybercrime’s System Reliability Problem&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;Cybercriminal organizations can thus be treated as individual ‘companies’ that produce  competing or complementary products. In the former case, they may integrate horizontally  to increase market size and benefit from economies of scale. In the latter case they may  integrate vertically to benefit from process efficiencies. These integrations may allow  cybercriminal seller organizations in a cybercrime marketplace to differentiate their  products more easily to cybercriminal buyer organizations [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-14&quot;&gt;14&lt;/a&gt;].&lt;/p&gt;&lt;p&gt;The customer focus on these markets means that sellers need to ensure that the products  offered as Cybercrime-as-a-Service (CaaS) on sale are reliable [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-15&quot;&gt;15&lt;/a&gt;]. Considering these CaaS  offerings as a system, we can apply Varian’s [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-16&quot;&gt;16&lt;/a&gt;] three distinct models for system reliability.&lt;/p&gt;&lt;p&gt;Consider a market where various stages of a cybercrime product’s supply chain are  controlled by distinct agents. For example, for a ransomware product one agent may provide  the phishing infrastructure, another agent may provide the malware, and a third agent may  provide the customer service. The success of the ransomware product in this case would be  controlled by the least reliable element of the supply chain or the weakest link. In this  scenario the agent with the least benefit cost ratio controls the system reliability. More  importantly, as Varian [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-16&quot;&gt;16&lt;/a&gt;] notes, increasing the number of agents decreases the reliability  of the system. Thus, to produce a more reliable cybercriminal product – cybercriminal  organizations will aim to consolidate the various stages of cybercrime tools production and  absorb functions of two or more of its supply chain agents. This would lead to greater vertical  integration.&lt;/p&gt;&lt;p&gt;Consider a different market where products are vertically integrated; however, multiple  cybercriminal organizations offer competing products as Anderson et al. points out [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-17&quot;&gt;17&lt;/a&gt;]. In  this case the reliability of the cybercriminal product will be determined by the best effort  model, i.e., the product ecosystem is as reliable as the most reliable product on the  cybercriminal market. Unsurprisingly in this case reliability will be decided by the agent with  the highest benefit-cost ratio. Consequently, agents with a lower benefit-cost ratio will  produce a less reliable product or would not produce products at all. If they do produce a  less reliable product, due to its lower reliability, it will be ignored by the customers in lieu of  more reliable ones. This condition occurs assuming that there is no information asymmetry  between the seller and the buyer as well as equivalent pricing between the two products.  Hence, agents with a lower benefit-cost ratio will either leave the market or be absorbed by  more successful agents (in the best effort model) so that the latter has more buyers. The  cybercrime market will then gravitate towards horizontal integration.&lt;/p&gt;&lt;p&gt;Varian highlights a third model where individual cybercriminals may cooperate to peer  produce cybercriminal products. Like Langlois and Garzarelli’s discussion of open-source  production of tools for legitimate use cases [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-18&quot;&gt;18&lt;/a&gt;], system reliability in this case depends on  the total effort of all the cybercriminals, but it will be decided by the agent with the highest  benefit-cost ratio (the best effort case).&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8400&quot; id=&quot;single-column-text-8400&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;4. Attack versus Defense&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;In the previous section, we discussed how economic factors drive the evolution of organized  cybercrime and associated markets. Eventually these cybercriminals and their tools must  face defenders. The success of cybercriminals in this case is combination of the economics  of attack and defense. The consensus, as highlighted by Ross Anderson’s work [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-19&quot;&gt;19&lt;/a&gt;] before  LLMs were commonly available for cybercrime, was that the economics of cybercrime favors  the attacker.&lt;/p&gt;&lt;p&gt;Consider the ransomware example introduced in the earlier section. Let us assume a model  in which an attacker sends a phishing email to all the employees at a company. Any  employee who clicks on the link in the phishing email can cause the ransomware to execute  and cause a security incident at the company. The attacker in this case needs to only find  one employee who makes an error. The defender needs to make sure that all employees have  a 100% rate of finding and mitigating phishing emails. The attacker can concentrate its  resources, while the defender must spread them out. Thus, the advantage under this model  is to the attacker.&lt;/p&gt;&lt;p&gt;However, this model would also depend on an organization’s maturity. Let us consider a  different model in which an organization implements Zero Trust Architecture [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-28&quot;&gt;28&lt;/a&gt;], i.e., where  individuals are not trusted by default and verification is needed before anyone can access  the organization’s resources. For such an organization, errors on one employee’s end would  need to be supplemented with several other cyberattacks working in tandem to ensure the  whole organization falls victim. Indeed, most successful breaches require a sequence of  attacks to execute one after the other in what is often described as a Cyber Kill Chain [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-20&quot;&gt;20&lt;/a&gt;,  &lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-21&quot;&gt;21&lt;/a&gt;]. Thus, the attacker needs to get lucky multiple times in a row, while the defender needs  to get lucky once in the chain as Slayton points out [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-22&quot;&gt;22&lt;/a&gt;]. This is the economic argument to  support the implementation of Zero Trust.&amp;nbsp;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8401&quot; id=&quot;single-column-text-8401&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;5. AI Impacts&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;In the previous sections we discussed how Economics drives organization in cybercrime, the  reliability of cybercrime products, and the relative advantage between attackers and  defenders. While the insights from these models have been useful, they will need to be  reconsidered now to address the impact of AI.&lt;/p&gt;&lt;p&gt;It is clear from the rise of FraudGPT and WormGPT, alongside legitimate but jailbroken LLMs,  that AI will make it easier to engage in cybercrime. Chui et al. have argued that AI will lead to  greater productivity [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-23&quot;&gt;23&lt;/a&gt;]; surely, this may apply to cybercriminal productivity as well [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-24&quot;&gt;24&lt;/a&gt;].  First, AI may reduce the amount of technical sophistication that is required to conduct  cybercrime. For example, according to a recent survey paper, an attacker may use LLMs to  help them generate malware [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-25&quot;&gt;25&lt;/a&gt;]. Second, it may improve the effectiveness of certain  cyberattacks. For example, a recent report says that an attacker may use LLMs to generate  more targeted, and therefore more compelling, phishing lures [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-26&quot;&gt;26&lt;/a&gt;]. The former will reduce  the cost of doing cybercrime, while the latter will increase the benefits, i.e., AI may increase  overall profits from cybercrime. Thus, more individuals may be incentivized to engage in  cybercrime. Furthermore, as AI reduces the technical expertise to engage in cybercrime,  existing gangs and mobs may expand the types of cybercrime they engage in.&lt;/p&gt;&lt;p&gt;AI may even impact the evolution of cybercriminal markets. As noted in Section 3, longer  supply chains or increasing number of agents in a cybercriminal product supply chain may  reduce reliability. The current technological landscape has created the need for multiple  agents, as investments in cyber defense have made it harder for cyberattacks to succeed.  Cybercriminals must thus plan sophisticated campaigns, each stage of which requires a  specialized cybercriminal skill set. However, LLMs may reduce the amount of expertise  required going forward. Just as the advent of computers reduced the demand for typists,  LLMs will allow cybercriminal organizations to bring certain parts of the operation in-house.  For example, organized cybercrime – much like legitimate companies – may use LLMs to  provide customer support. Thus, AI may help drive vertical integration in cybercriminal  markets.&lt;/p&gt;&lt;p&gt;&amp;nbsp;With more cybercriminal organizations engaging in an ever-increasing number of  cybercriminal activities, with greater revenue enabled by greater system reliability and other  efficiencies enabled by vertical integration, we may witness an increase in competition  between these groups to grow their individual market shares. As Varian notes [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-16&quot;&gt;16&lt;/a&gt;], under this  dynamic system reliability depends on the agent with the highest benefit cost ratio while  other agents freeride. One way this outcome can materialize may be in the form of a small  set of cybercriminal organizations in the form of mobs. These mobs would provide a  comprehensive set of LLM-enabled cybercrime products, both capabilities and  infrastructure. The remaining vast majority of cybercriminal organizations stay at the level of  gangs who are just customers for the mob.&lt;/p&gt;&lt;p&gt;As these mobs and gangs use their AI and LLM enabled capabilities to conduct cyberattacks,  defenders will look to leverage the same technologies to scale defense. As noted in Section  4, the classical model of attack versus defense favors the attacker; the defender must  spread their resources to defend everywhere – the attacker need only find one undefended  resource. AI may help scale both defender and attacker capabilities. However, as the  attacker was already in an advantageous position any marginal gains for attack should be  less than the marginal gains for the defender.&lt;/p&gt;&lt;p&gt;The reverse may be true for a Zero Trust based attack versus defense model. Here the  defender has the advantage, as the attacker needs to get lucky multiple times, and the  defender needs to be lucky only once. In this case too AI may further both attacker as well  as defender capabilities. However, the marginal gains for the more favored party, i.e.,  attacker, should be greater than marginal gains for the less favored party, i.e., defender.  Overall, we hypothesize that the introduction of AI to attack and defense would reduce the  asymmetry between the two regardless of the underlying model.&amp;nbsp;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8402&quot; id=&quot;single-column-text-8402&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;6. Conclusion and Future Work&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;When it comes to cybersecurity, is AI good or bad? This is the question that everyone,  regulators, industry professionals, academics, and civil society hopes to answer. This is the  puzzle that the White House Executive Order on AI aims to solve when it asks the Department  of Homeland Security to conduct a cross-sector risk assessment on AI for critical  infrastructure [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks#reference-27&quot;&gt;27&lt;/a&gt;]. This is the worry that underlies viral coverage of FraudGPT and WormGPT.  This is the conundrum that keeps cyber executives open to receiving calls from vendors  promising the newest AI cure-all.&lt;/p&gt;&lt;p&gt;In this position paper we examine the impact of AI on cybercrime on three dimensions: (1)  cybercrime organization, (2) reliability of cybercrime markets, and 3) asymmetry between  attackers and defenders. Our initial examination suggests that AI may reduce the barrier to  engage in cybercrime; thus, we have more cybercriminals engaging in more kinds of  cybercrime. Furthermore, AI may increase concentration in cybercrime markets through  both vertical and horizontal integration. Finally, AI may reduce the asymmetry between  attackers and defenders due to the broad range of tools available to both groups.&lt;/p&gt;&lt;p&gt;In future, we intend to build on this initial observation through experimentation.  Furthermore, while there is an increasing interest in AI tools available to attackers, the utility  of such tools used by defenders is not measured as much. We would like to explore the  impact of AI on organization in defense and associated markets. Additionally, there is limited  modeling done on establishing how attackers are at an advantage in cybercrime  ecosystems. We also hope to increase the maturity of our analyses by including formal  mathematical models. Finally, we intend to include implications for technologists and policy  makers as AI changes the landscape of threats.&amp;nbsp;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;field field-name-field-lv2-pdf field-type-file field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;file&quot;&gt;&lt;img class=&quot;file-icon&quot; alt=&quot;PDF icon&quot; title=&quot;application/pdf&quot; src=&quot;https://www.usenix.org/core/modules/file/icons/application-pdf.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; &lt;a href=&quot;https://www.usenix.org/sites/default/files/login_final.pdf&quot; type=&quot;application/pdf; length=114951&quot; title=&quot;login_final.pdf&quot;&gt;Download PDF&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;fieldset class=&quot;group-appendix field-group-fieldset form-wrapper&quot;&gt;&lt;legend&gt;&lt;span class=&quot;fieldset-legend&quot;&gt;Appendix&lt;/span&gt;&lt;/legend&gt;&lt;div class=&quot;fieldset-wrapper&quot;&gt;&lt;div class=&quot;field field-name-field-lvl2-appendix-refs field-type-text field-label-above&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;References:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-1&quot;&gt;&lt;/a&gt;&lt;p&gt;[1] Asimov, I., 2010. Foundation, Foundation and Empire, Second Foundation: Introduction  by Michael Dirda. Everyman&#39;s Library.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-2&quot;&gt;&lt;/a&gt;&lt;p&gt;[2] Quak, N., 2023. How Emerging Technologies Threaten Our Cybersecurity. Cyber Threat  Alliance, White Paper.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-3&quot;&gt;&lt;/a&gt;&lt;p&gt;[3] Lin, Z., Cui, J., Liao, X. and Wang, X., 2024. Malla: Demystifying Real-world Large Language  Model Integrated Malicious Services. arXiv preprint arXiv:2401.03315.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-4&quot;&gt;&lt;/a&gt;&lt;p&gt;[4] Sarker, I.H., Furhad, M.H. and Nowrozy, R., 2021. AI-Driven Cybersecurity: An Overview,  Security Intelligence Modeling and Research Directions. SN Computer Science, 2(3), p.173.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-5&quot;&gt;&lt;/a&gt;&lt;p&gt;[5] Taddeo, M., McCutcheon, T. and Floridi, L., 2019. Trusting Artificial Intelligence in Cybersecurity Is a Double-Edged Sword. Nature Machine Intelligence, 1(12), pp.557-560.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-6&quot;&gt;&lt;/a&gt;&lt;p&gt;[6] Gupta, M., Akiri, C., Aryal, K., Parker, E. and Praharaj, L., 2023. From ChatGPT to ThreatGPT: Impact of Generative AI In Cybersecurity and Privacy. IEEE Access.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-7&quot;&gt;&lt;/a&gt;&lt;p&gt;[7] Garg, V. and Camp, L.J., 2015. Why Cybercrime? ACM SIGCAS Computers and  Society, 45(2), pp.20-28.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-8&quot;&gt;&lt;/a&gt;&lt;p&gt;[8] Garg, V., Husted, N. and Camp, J. 2011. The Smuggling Theory Approach to Organized  Digital Crime. In 2011 eCrime Researchers Summit (pp. 1-7). IEEE.&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-9&quot;&gt;&lt;/a&gt;&lt;p&gt;[9] 2024. Measuring and Incentivizing the Adoption of Cybersecurity Best Practices. National  Security Telecommunications Advisory Committee (NSTAC).&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-10&quot;&gt;&lt;/a&gt;&lt;p&gt;[10] Coase, R.H., 1937. The Nature of the Firm. Economica, 4(16), pp.386-405.&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-11&quot;&gt;&lt;/a&gt;&lt;p&gt;[11] Garg, V., Afroz, S., Overdorf, R. and Greenstadt, R., 2015. Computer-Supported  Cooperative Crime. In Financial Cryptography and Data Security: 19th International  Conference, FC 2015, San Juan, Puerto Rico, January 26-30, 2015, Revised Selected Papers  19 (pp. 32-43). Springer Berlin Heidelberg.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-12&quot;&gt;&lt;/a&gt;&lt;p&gt;[12] Brenner, S.W. 2002. Organized Cybercrime-How Cyberspace May Affect the Structure of Criminal Relationships. North Carolina Journal of Law &amp;amp; Technology 4, 1 (2002)&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-13&quot;&gt;&lt;/a&gt;&lt;p&gt;[13] Collier, B., Clayton, R., Hutchings, A. and Thomas, D., 2021. Cybercrime Is (Often)  Boring: Infrastructure and Alienation in a Deviant Subculture. The British Journal of  Criminology, 61(5), pp.1407-1423.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-14&quot;&gt;&lt;/a&gt;&lt;p&gt;[14] Van Wegberg, R., Miedema, F., Akyazi, U., Noroozian, A., Klievink, B. and van Eeten, M.  2020. Go See a Specialist? Predicting Cybercrime Sales on Online Anonymous Markets from Vendor and Product Characteristics. In Proceedings of the Web Conference 2020 (pp. 816- 826).&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-15&quot;&gt;&lt;/a&gt;&lt;p&gt;[15] Akyazi, U., van Eeten, M.J.G. and Ganan, C.H., 2021. Measuring Cybercrime as a Service  (CaaS) Offerings in A Cybercrime Forum. In Workshop on the Economics of Information  Security.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-16&quot;&gt;&lt;/a&gt;&lt;p&gt;[16] Varian, H., 2004. System Reliability and Free Riding. In Economics of information  security (pp. 1-15). Boston, MA: Springer US.&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-17&quot;&gt;&lt;/a&gt;&lt;p&gt;[17] Anderson, R., Clayton, R., Böhme, R. and Collier, B. 2021. Silicon Den: Cybercrime is  Entrepreneurship. In Workshop on the Economics of Information Security.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-18&quot;&gt;&lt;/a&gt;&lt;p&gt;[18] Langlois, R.N. and Garzarelli, G., 2014. Of Hackers and Hairdressers: Modularity and The  Organizational Economics of Open-Source Collaboration. In Online Communities and Open  Innovation (pp. 11-29). Routledge.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-19&quot;&gt;&lt;/a&gt;&lt;p&gt;[19] Anderson, R., 2001, December. Why Information Security is Hard - An Economic  Perspective. In Seventeenth Annual Computer Security Applications Conference (pp. 358- 365). IEEE.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-20&quot;&gt;&lt;/a&gt;&lt;p&gt;[20] 2011: The Cyber Kill Chain. Lockheed Martin. &lt;a href=&quot;https://www.lockheedmartin.com/en-us/capabilities/cyber/cyber-kill-chain.html&quot;&gt;https://www.lockheedmartin.com/en-us/capabilities/cyber/cyber-kill-chain...&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-21&quot;&gt;&lt;/a&gt;&lt;p&gt;[21] Dargahi, T., Dehghantanha, A., Bahrami, P.N., Conti, M., Bianchi, G. and Benedetto, L.,  2019. A Cyber-Kill-Chain based Taxonomy of Crypto-Ransomware Features. Journal of  Computer Virology and Hacking Techniques, 15, pp.277-305.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-22&quot;&gt;&lt;/a&gt;&lt;p&gt;[22] Slayton, R., 2016. What is the Cyber Offense-Defense Balance? Conceptions, Causes,  and Assessment. International Security, 41(3), pp.72-109.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-23&quot;&gt;&lt;/a&gt;&lt;p&gt;[23] Chui, M., Hazan, E., Roberts, R., Singla, A., Smaje, K., Sukharevsky, A., Yee, L. and  Zemmel, R., 2023. The Economic Potential of Generative AI: The Next Productivity Frontier.  McKinsey.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-24&quot;&gt;&lt;/a&gt;&lt;p&gt;[24] Torre, Richard De La. 2023. How AI is Shaping the Future of Cybercrime. Dark Reading. &lt;a href=&quot;https://www.darkreading.com/vulnerabilities-threats/how-ai-shaping-future-cybercrime&quot;&gt;https://www.darkreading.com/vulnerabilities-threats/how-ai-shaping-futur...&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-25&quot;&gt;&lt;/a&gt;&lt;p&gt;[25] Kaloudi, N. and Li, J., 2020. The AI-based Cyber Threat Landscape: A Survey. ACM  Computing Surveys (CSUR), 53(1), pp.1-34.&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-26&quot;&gt;&lt;/a&gt;&lt;p&gt;[26] Violino, B. 2023. AI Tools Such as ChatGPT Are Generating a Mammoth Increase in Malicious Phishing Emails. CNBC. &lt;a href=&quot;https://www.cnbc.com/2023/11/28/ai-like-chatgpt-is&quot;&gt;https://www.cnbc.com/2023/11/28/ai-like-chatgpt-is&lt;/a&gt;creating-huge-increase-in-malicious-phishing-email.html.&amp;nbsp;&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-27&quot;&gt;&lt;/a&gt;&lt;p&gt;[27] 2023: Executive Order on The Safe, Secure, And Trustworthy Development and Use of Artificial Intelligence. The White House. The United States Government.  &lt;a href=&quot;https://www.whitehouse.gov/briefing-room/presidential-actions/2023/10/30/executive&quot;&gt;https://www.whitehouse.gov/briefing-room/presidential-actions/2023/10/30...&lt;/a&gt;order-on-the-safe-secure-and-trustworthy-development-and-use-of-artificial-intelligence/.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-28&quot;&gt;&lt;/a&gt;&lt;p&gt;[28] Stafford, V.A., 2020. Zero Trust Architecture. NIST Special Publication, 800, p.207.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/fieldset&gt;
</description><link>https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks</link><guid isPermaLink="false">https://www.usenix.org/publications/loginonline/artificial-intelligence-and-new-economics-cyberattacks</guid><pubDate>Wed, 28 Aug 2024 16:00:00 GMT</pubDate><author>Vaibhav Garg, Jayati Dev</author></item><item><title>Measuring the Great Firewall&#39;s Multi-layered Web Filtering Apparatus</title><description>&lt;div class=&quot;field field-name-field-lv2-publication-date field-type-datetime field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;date-display-single&quot;&gt;August 15, 2024&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-article-type field-type-taxonomy-term-reference field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Research&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-label-inline clearfix field-type-text-long field-pseudo-field field-pseudo-field--author-list&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Authors:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus#Nguyen%20Phong%20Hoang&quot; title=&quot;Nguyen Phong Hoang&quot;&gt;Nguyen Phong Hoang&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus#Nick%20Feamster&quot; title=&quot;Nick Feamster&quot;&gt;Nick Feamster&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-shepherds field-type-user-reference field-label-inline clearfix&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Article shepherded by:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;usenix-user-reference-names&quot;&gt;Rik Farrow&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraphs-items paragraphs-items-field-lv2-body paragraphs-items-field-lv2-body-full paragraphs-items-full&quot;&gt;
  &lt;div class=&quot;field field-name-field-lv2-body field-type-paragraphs field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8339 paragraphs-first-text&quot; id=&quot;single-column-text-8339&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;We present GFWeb, a novel system designed for large-scale, longitudinal measurement of the Great Firewall (GFW) of China&#39;&lt;/span&gt;s Web censorship capabilities. GFWeb enables comprehensive, large-scale measurements of the GFW&#39;s HTTP and HTTPS blocking mechanisms over an extended period. Over 20 months, GFWeb tested 1.02 billion domains, detecting 943K and 55K pay-level domains (PLDs) censored by the GFW&#39;s HTTP and HTTPS filters, respectively. This represents the most extensive dataset of censored domains discovered to date, many of which had not been identified by previous studies. The findings from GFWeb highlight the need for comprehensive measurement systems that can capture the full spectrum of the GFW&#39;s censorship mechanisms. Systems relying on a single protocol or bidirectional interference may miss significant aspects of the GFW&#39;s operations. Future measurement efforts should consider testing from both sides of the GFW and across multiple protocols to obtain a complete picture of Web censorship.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8340&quot; id=&quot;single-column-text-8340&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Introduction&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;In the ever-evolving landscape of global Internet governance, the Great Firewall (GFW) of China stands as one of the most sophisticated and opaque systems of Web censorship [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus#reference-2&quot;&gt;2&lt;/a&gt;]. It employs an array of filtering mechanisms that continuously adapt to new evasion strategies and emerging technologies. This article expands on our research paper presented at USENIX Security &#39;24 [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus#reference-1&quot;&gt;1&lt;/a&gt;],&amp;nbsp;which introduces GFWeb—a novel system designed for large-scale, longitudinal measurement of the GFW&#39;s Web censorship capabilities. Analyzing measurement data collected by GFWeb over 20 months, from February 2022 to September 2023, our work provides a deeper understanding of the GFW&#39;s mechanisms, evolution, and the broader implications for Internet freedom.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8341&quot; id=&quot;single-column-text-8341&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;The Great Firewall - An Overview&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;The GFW is a multifaceted censorship apparatus deployed by the Chinese government to control the flow of information on the Internet. It employs various techniques, including DNS poisoning [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus#reference-3&quot;&gt;3&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus#reference-4&quot;&gt;4&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus#reference-5&quot;&gt;5&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus#reference-6&quot;&gt;6&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus#reference-7&quot;&gt;7&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus#reference-8&quot;&gt;8&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus#reference-9&quot;&gt;9&lt;/a&gt;], keyword filtering [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus#reference-10&quot;&gt;10&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus#reference-11&quot;&gt;11&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus#reference-12&quot;&gt;12&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus#reference-13&quot;&gt;13&lt;/a&gt;], and TCP/IP blocking [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus#reference-10&quot;&gt;10&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus#reference-14&quot;&gt;14&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus#reference-15&quot;&gt;15&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus#reference-16&quot;&gt;16&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus#reference-17&quot;&gt;17&lt;/a&gt;], to enforce its policies. Understanding the GFW&#39;s operational details is crucial for developing effective censorship circumvention tools and fostering a free and open Internet. China&#39;s Internet censorship framework, conceptualized in the late 1990s as part of the Golden Shield project [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus#reference-18&quot;&gt;18&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus#reference-19&quot;&gt;19&lt;/a&gt;], serves as the government&#39;s tool for controlling the flow of online information. Often dubbed &quot;the Great Firewall&quot;, this system comprises middleboxes distributed across border autonomous systems (ASes) and managed in a centralized manner [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus#reference-11&quot;&gt;11&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus#reference-13&quot;&gt;13&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus#reference-20&quot;&gt;20&lt;/a&gt;].&lt;/p&gt;&lt;p&gt;&lt;span&gt;The GFW&#39;s&lt;/span&gt;&amp;nbsp;on-path devices intercept and inspect network traffic, selectively blocking connections based on predefined blocklists. Its Web censorship mechanisms span multiple layers, covering all three fundamental protocols of the Web: DNS, HTTP, and HTTPS. DNS poisoning is done by exploiting the race condition of UDP-based DNS resolution, injecting false responses when it detects DNS queries for censored domains. HTTP filtering inspects unencrypted Web traffic and blocks connections based on specific keywords or host names. HTTPS filtering examines the Server Name Indication (SNI) field during the TLS handshake to block encrypted connections. The filtering middleboxes begin tracking a TCP connection&#39;s state when it sees the first SYN packet from the client and, upon detecting a censored domain in the HTTP Host header or the Server Name Indication (SNI) extension in the TLS Client Hello, tears down the connection by injecting RST/ACK packets to both the client and the server. Figure 1 illustrates the GFW&#39;s DNS, HTTP, and HTTPS filtering mechanisms.&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8342&quot; id=&quot;article-image-8342&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/fig1_gfw.png&quot; width=&quot;1440&quot; height=&quot;371&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 1: The DNS, HTTP, and HTTPS filtering mechanisms of the Great Firewall. SYN, ACK, PSH, and RST denote TCP synchronization, acknowledgement, push, and reset flags. A packet with the RST flag set is meant to terminate a TCP connection.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8343&quot; id=&quot;single-column-text-8343&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Challenges in Measuring the GFW&#39;s Censorship&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Measuring the GFW&#39;s&lt;/span&gt;&amp;nbsp;censorship presents significant challenges due to its sophisticated and evolving mechanisms. Prior measurement efforts have been limited by scope, time, and/or methodology. Most studies focused on specific aspects over short periods, leading to gaps in understanding the GFW&#39;s dynamic censorship landscape. The GFW&#39;s&amp;nbsp;stateful blocking, residual censorship, and asymmetric interference further complicate large-scale measurement efforts. Furthermore, relying on volunteers or public servers for data collection introduces potential risks, highlighting the need for innovative measurement approaches like GFWeb to continuously monitor the GFW&#39;s Web censorship at scale.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8344&quot; id=&quot;single-column-text-8344&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;GFWeb Design&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;GFWeb is designed to uncover the domain blocklists used by the GFW for Web censorship. It leverages the GFW&#39;s&lt;/span&gt;&amp;nbsp;bidirectional and loss-tolerant blocking behavior to test hundreds of millions of domains monthly.&lt;/p&gt;&lt;p&gt;The design of GFWeb is depicted in Figure 2, illustrating its probing approach using machines located at both sides of the GFW. The system initiates with the collection of domain test lists from various sources, including domain zone files, the Tranco list, the Citizen Lab test lists, and the Common Crawl dataset. These domains are used by probing machines located outside China to send SYN and PSH/ACK packet pairs towards controlled machines inside China. The loss-tolerant design of the GFW allows GFWeb to trigger censorship responses without completing the three-way TCP handshake, enabling efficient and scalable probing.&lt;/p&gt;&lt;p&gt;&lt;span&gt;When the GFW detects a censored domain in the HTTP or HTTPS request, it responds by injecting three RST/ACK packets to both the client (probing machines) and the server (controlled machines inside China). The responses help identify which domains are censored by observing these injected packets.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The probing process is continuous and iterative, with steps to analyze the fully qualified domain names (FQDNs) detected as censored and subsequently creating regular expressions to understand the blocking patterns. The system then performs additional probing to confirm the censorship of pay-level domains (PLDs) by sending more SYN and PSH/ACK packet pairs and observing for RST/ACK responses. The process is run from both sides of the GFW, allowing GFWeb to scale up its measurement and uncover the comprehensive set of domains censored by the GFW.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/span&gt;&lt;em&gt;:&lt;/em&gt; A pay-level domain (PLD) is the highest level of a domain name that can be directly registered and controlled by an individual or organization. It&#39;s typically the part of the domain name immediately below the public suffix. For example, in &lt;em&gt;&lt;a href=&quot;http://www.example.com/&quot;&gt;www.example.com&lt;/a&gt;&lt;/em&gt;, “&lt;em&gt;example&lt;/em&gt;” is the PLD, while in &lt;em&gt;&lt;a href=&quot;http://www.bbc.co.uk/&quot;&gt;www.bbc.co.uk&lt;/a&gt;&lt;/em&gt;, “&lt;em&gt;bbc&lt;/em&gt;” is the PLD. PLDs are used to identify the primary domain of a website and are more precise than second-level domains (SLDs) as they accommodate various global domain structures.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8345&quot; id=&quot;article-image-8345&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/fig2_gfweb.png&quot; width=&quot;686&quot; height=&quot;568&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 2: The design of GFWeb&#39;s probing approach, which does not rely on the completion of the three-way handshake for triggering the GFW&#39;s HTTP(S) filters.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8346&quot; id=&quot;single-column-text-8346&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Key Findings&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;Evolution of the GFW&lt;/strong&gt;&lt;/em&gt;: Our study reveals that the GFW has been upgraded to mitigate several issues previously identified by researchers, such as overblocking. More specifically, while developing GFWatch, our previous system for DNS censorship measurement presented at USENIX Security &#39;21, we observed that the GFW was using overly broad regular expressions to block domains, such as &lt;em&gt;&lt;strong&gt;*&lt;/strong&gt;torproject.org&lt;/em&gt;, which resulted in collateral damage by also inadvertently blocking unrelated domains that included the string “&lt;em&gt;torproject.org&lt;/em&gt;” within their names, such as &lt;em&gt;mentorproject.org&lt;/em&gt; and &lt;em&gt;ventilatorproject.org&lt;/em&gt;, which have no association with the Tor Project. This broad matching caused more than 41K innocuous websites to be inaccessible in China, highlighting a significant flaw in the GFW&#39;s&lt;/span&gt;&amp;nbsp;censorship mechanism. With our new system, GFWeb, we observed that the GFW has since addressed this issue indicating an ongoing evolution in its filtering policies.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8347&quot; id=&quot;single-column-text-8347&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;Cross-Protocol Blocking&lt;/strong&gt;&lt;/em&gt;: Our study also reveals significant insights into the cross-protocol blocking behavior of the GFW, showing that the blocklists for DNS, HTTP, and HTTPS are not identical but rather complementary. As shown in Figure 3, the GFW&#39;s&lt;/span&gt;&amp;nbsp;HTTP filter has the largest blocklist, followed by DNS and HTTPS filters. Each filter operates on different blocklists that complement each other, forming a comprehensive censorship framework. We find an average of 528K and 24K base censored domains per month for HTTP and HTTPS filters, respectively. GFWatch discovers an average of 247K base censored domains per month. The differing sizes of these can be attributed to the distinct technical characteristics, implementation costs, and strategic purposes of each protocol&#39;s filtering mechanism.&lt;/p&gt;&lt;p&gt;&lt;span&gt;Specifically, HTTP traffic is unencrypted, allowing for more granular content-based filtering using Deep Packet Inspection (DPI). This fine-grained control means the GFW can inspect the entire content of HTTP requests and responses, leading to a larger and more specific blocklist. HTTP filtering can block individual pages based on specific keywords, resulting in a higher number of blocked domains.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;DNS filtering operates at the forefront of the GFW, manipulating DNS queries to block access to certain domains even before any HTTP or HTTPS traffic is initiated. It is the least expensive in terms of resources because it involves simple on-path inspection and forgery of DNS responses. This mechanism blocks fewer domains compared to HTTP but still plays a critical role in the overall censorship strategy.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;HTTPS traffic is encrypted, limiting the GFW&#39;s&lt;/span&gt;&amp;nbsp;ability to inspect the content of Web communications. The GFW relies on the Server Name Indication (SNI) field in the TLS handshake to identify the domain of the visited website. This makes HTTPS filtering more complex and operationally expensive, as DPI techniques are less effective when it comes to parsing TLS packets with many more header fields compared to HTTP packets. Consequently, the HTTPS blocklist is smaller, focusing on high-priority domains that warrant the additional resource overhead.&lt;/p&gt;&lt;p&gt;&lt;span&gt;Our findings of different blocklists across protocols can lead to straightforward circumvention strategies. For example, if a domain is blocked only by the DNS filter, importing the domain&#39;s&lt;/span&gt;&amp;nbsp;IP address into the hosts file can bypass the DNS block. Similarly, if a domain is blocked by the HTTP filter, accessing the domain via HTTPS can circumvent the block. For instance, the domain &lt;em&gt;geti2p.net&lt;/em&gt; is blocked by the DNS and HTTP filters but not by the HTTPS filter. By (1) importing the domain&#39;s correct IP address into the hosts file to bypass the DNS filter and (2) accessing the domain via HTTPS, one can still reach the website. This underscores the importance of understanding the GFW&#39;s multi-layered filtering architecture for effective circumvention strategies.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8348&quot; id=&quot;article-image-8348&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/fig3_crossprotocol_blocking.png&quot; width=&quot;1069&quot; height=&quot;708&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 3: Number of HTTP(S) base censored domains (in log scale) detected over time by GFWeb compared to GFWatch. A base censored domain is the shortest domain name that matches the GFW&#39;s blocking rules. For example, if both &quot;en.wikipedia.org&quot; and &quot;zh.wikipedia.org&quot; are blocked, the base censored domain would be &quot;wikipedia.org&quot; because it is the common, shortest domain that is blocked.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8349&quot; id=&quot;single-column-text-8349&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;Asymmetric Interference and Prolonged Residual Censorship:&lt;/strong&gt;&lt;/em&gt; Our study also uncovered two new behaviors of the GFW&#39;s&lt;/span&gt;&amp;nbsp;Web censorship: asymmetric interference and prolonged residual censorship. Asymmetric interference refers to the GFW&#39;s blocking behavior that is not bidirectional and symmetric. We identified approximately 1,000 domains that trigger HTTPS filtering only when probed from inside China, but not from outside. This finding challenges the conventional belief that the GFW&#39;s filtering mechanisms are bidirectional and symmetric, posing a risk of false negatives in external measurement systems that do not account for this asymmetry. For instance, domains related to circumvention tools or sensitive content, such as &lt;em&gt;torproject.org&lt;/em&gt;, exhibit this selective blocking, thereby eluding detection when probed externally.&lt;/p&gt;&lt;p&gt;&lt;span&gt;Additionally, the GFW demonstrates prolonged residual censorship, wherein once a domain triggers asymmetric blocking, subsequent connections with the same three-tuple (source IP, destination IP, and destination port) are consistently dropped for an extended period—up to 350 seconds—rather than merely injecting reset packets. This behavior creates extended periods of unreachability for affected domains, complicating continuous probing strategies used by automated evasion tools like Geneva. The prolonged traffic dropping can mislead these tools into concluding that an evasion strategy is effective when the censorship still actually persists. These findings emphasize the need for comprehensive and nuanced approaches to measuring and circumventing the GFW&#39;s&lt;/span&gt;&amp;nbsp;evolving censorship tactics.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8350&quot; id=&quot;single-column-text-8350&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Localized Network Interference&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;While the ultimate goal of our study is to investigate the GFW&#39;s Web censorship, we encountered some interesting cases of localized network interference by major cloud providers and ISPs in China.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;Hosting Providers’ Redirection&lt;/strong&gt;&lt;/em&gt;: Our measurement machines in China are located in the data centers of two major cloud providers: Aliyun and QCloud. While analyzing network traffic collected by GFWeb, we found that both providers have deployed DPI middleboxes to interfere with HTTP connections and attempt to redirect users to warning pages when certain domains are requested despite the location of the request client (i.e., inside or outside China). Specifically, Aliyun injects a redirection to batit.aliyun.com/alww.html and QCloud injects a redirection to dnspod.qcloud.com/static/webblock.html as shown in Figure 4. These pages warn that the domain being requested is not registered with the Chinese government. For a domain to be hosted from within China, it needs to be registered with the Chinese Ministry of Industry and Information Technology (MIIT) and obtain an Internet Content Provider (ICP) license.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Both providers’ DPI middleboxes are deployed as on-path devices and intercept packets in a stateless manner. In other words, these redirection injections can be triggered without initiating a complete TCP handshake (i.e., packets ❶-❸ in Figure 1(b)). An HTTP PSH/ACK packet (❹) with the payload of a trigger domain is sufficient to prompt the middleboxes to inject a redirection towards the side of the connection that sends the PSH/ACK packet. Bock et al. recently found that this behavior could be weaponized for TCP-based amplification attacks since the injected warning pages are much larger compared to the original HTTP request.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Over the course of our study, Aliyun and QCloud middleboxes have interfered with 36.5M and 39.1M FQDNs, respectively. Clustering these domains by their PLDs, we find a total of 7.8M and 6.8M PLDs whose HTTP requests were redirected to Aliyun and QCloud ICP warning pages. It&#39;s worth noting that this interference is not caused by the GFW and should not be considered as nation-state censorship. Instead, they are caused by the hosting providers enforcing the ICP license requirements since a benign domain like example.com also triggers the redirection of QCloud&#39;s middleboxes.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8351&quot; id=&quot;article-image-8351&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/fig4_cloud_redirections.png&quot; width=&quot;1423&quot; height=&quot;339&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 4: Redirection injected by Aliyun and QCloud to warn about ICP license requirements.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8352&quot; id=&quot;single-column-text-8352&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;China&#39;s “Anti-Fraud&lt;/em&gt;&lt;em&gt;” Redirection&lt;/em&gt;&lt;em&gt;: &lt;/em&gt;&lt;/strong&gt;In late 2021, there were some anecdotal reports of new network interference events across major state-owned ISPs in China, including the three largest operators: China Telecom, China Unicom, and China Mobile [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus#reference-21&quot;&gt;21&lt;/a&gt;]. Many users reported that their browsing sessions were redirected to a warning page showing an “Anti-Fraud” message. As indicated in Figure 5, the warning page advises users that the site they are trying to access is suspected of fraud and asks them to install an app developed by the State Anti-Fraud Center from the Android or the Apple app stores.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8353&quot; id=&quot;article-image-8353&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/fig5_china_anti_fraud_0.png&quot; width=&quot;1234&quot; height=&quot;848&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 5: China&#39;s “Anti-Fraud” redirection.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8354&quot; id=&quot;single-column-text-8354&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;GFWeb has also observed this network interference. Applying the limited time-to-live (TTL) probing approach, we confirm that it is indeed caused by the ISPs. While we did not have direct access to vantage points within these ISPs, one of our measurement machines in China is in a data center whose upstream provider is China Telecom, allowing us to observe the redirection injected by this ISP&#39;s middleboxes. Similarly to the GFW, they can inspect and inject packets bidirectionally. They are also deployed as on-path devices and have a loss-tolerant design (i.e., can be triggered without a complete TCP handshake).&lt;/span&gt;&lt;/p&gt;&lt;p&gt;GFWeb observed a total of 2.3M redirection attempts caused by China Telecom&#39;s middleboxes. In addition to two URLs reported on the Tor Project&#39;s GitLab (i.e., URLs 1 and 2 in Table 1) [&lt;a href=&quot;https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus#reference-21&quot;&gt;21&lt;/a&gt;], we have also observed six other URLs that share the same pattern but were injected with lower frequency. Our data also indicates that URLs ending with parameter1 and parameter2 were not deployed until February 2023.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-html-table paragraphs-item-html-table paragraphs-item-full paragraphs-item-8355&quot; id=&quot;html-table-8355&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-table-contents field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;
    &lt;th&gt;Index&lt;/th&gt;
    &lt;th&gt;# Triggered&lt;/th&gt;
    &lt;th&gt;Redirection URLs&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;1.7M (75.2%)&lt;/td&gt;
    &lt;td&gt;182.43.124.6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;2&lt;/td&gt;
    &lt;td&gt;182K (7.9%)&lt;/td&gt;
    &lt;td&gt;182.43.124.6/fzyujing?parameter&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;3&lt;/td&gt;
    &lt;td&gt;123K (5.3%)&lt;/td&gt;
    &lt;td&gt;0.0.0.0/fzyujing?parameter1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;4&lt;/td&gt;
    &lt;td&gt;86K (3.7%)&lt;/td&gt;
    &lt;td&gt;0.0.0.0/fzyujing?parameter&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;5&lt;/td&gt;
    &lt;td&gt;74K (3.2%)&lt;/td&gt;
    &lt;td&gt;182.43.124.6/fzyujing?parameter1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;6&lt;/td&gt;
    &lt;td&gt;67K (2.9%)&lt;/td&gt;
    &lt;td&gt;182.43.124.6/fzyujing?parameter2&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;7&lt;/td&gt;
    &lt;td&gt;26K (1.1%)&lt;/td&gt;
    &lt;td&gt;0.0.0.0&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;8&lt;/td&gt;
    &lt;td&gt;6K (0.3%)&lt;/td&gt;
    &lt;td&gt;0.0.0.0124.6/fzyujing?parameter&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-table-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Table 1: Redirection URLs injected by China Telecom&#39;s middleboxes.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8356&quot; id=&quot;single-column-text-8356&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Table 1 also lists some injected URLs that we deem as “buggy” because they contain either an invalid or non-routable IP address (i.e., 0.0.0.*). We believe that these URLs are a result of misconfiguration because the injection of these URLs will not lead to any redirection, and thus they are not effective for the ISP&#39;s intended purpose.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;GFWeb observed 478K unique FQDNs that trigger these injections. Still, we could not find any patterns that could explain why these domains were targeted, since they only triggered the redirection for a short period of time. Looking up the IP addresses of these domains, we find that less than half of them are associated with an IP address, while the remaining are either not associated with any IP address or not existing (i.e., NXDOMAIN). Instead of targeting specific domains that are truly associated with fraud, this observation suggests that the redirection could have been randomly triggered in an opportunistic manner to redirect users to the warning page, persuading them to install the government&#39;s “anti-fraud” app. This is evident by the fact that one of the trigger domains was baidu.com, which is obviously not fraudulent.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The original anecdote also reported that OONI and Censored Planet observed this network interference happened via DNS injection as well. However, we could not reproduce redirection cases caused by DNS injection of 182.43.124.6 anymore. This strengthens our hypothesis that the redirection is performed in an opportunistic manner and does not target any particular domains for a long period of time. At the time of writing, we are still observing this network interference from China Telecom and will continue monitoring for any change in the future.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8357&quot; id=&quot;single-column-text-8357&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Suggestions for Future Efforts&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;Censorship Measurement&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;/em&gt; The discovery of asymmetric interference underscores the importance of conducting measurements from both sides of the GFW since filtering policies can be different depending on the probing direction and the domain being tested.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Furthermore, measurement systems that function based on continuous probing against remote servers using the same destination ports will need to be aware of the two different types of residual censorship (i.e., “keeps injecting” and “keeps dropping”) and take appropriate actions to avoid incorrect inferences. More specifically, the residual censorship that “keeps injecting” packets may cause false positives as subsequent benign probes would still trigger the GFW to emit forged packets, whereas the residual censorship that “keeps dropping” subsequent traffic may cause false negatives due to the absence of forged packets that are usually anticipated. The co-existence of these two types of residual censorship in HTTPS filtering also suggests that it is non-trivial to determine whether a domain is blocked or not based solely on the presence or absence of forged packets if residual censorship is not taken into account. To that end, it is important to design measurement approaches that can sidestep the residual censorship to avoid both false positives and false negatives.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;Censorship Circumvention: &lt;/strong&gt;&lt;/em&gt;The GFW&#39;s Web censorship is composed of multiple layers of filtering based on different blocklists and protocols. While various efforts have attempted to circumvent the GFW&#39;s Web censorship at different layers, an effective circumvention solution will need to tackle the GFW&#39;s multi-layered filtering architecture. Otherwise, circumvention solutions that only target a single filtering layer may not be sufficient to achieve the desired result.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Similarly to the suggestion for censorship measurement, probing-based evasion techniques like Geneva or DeResistor also need to be aware of the two different types of residual censorship to avoid being tricked into thinking that the censorship has been successfully evaded when it is actually not, especially when the residual censorship is of the “keeps dropping” type.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;em&gt;Using Measurement Data:&lt;/em&gt;&lt;/strong&gt; Internet censorship measurement is a challenging task. Each measurement system is designed with different resources and constraints. Consumers of censorship measurement data (e.g., journalists, researchers, and policymakers) should be aware of the strengths and drawbacks of each system and consider multiple measurement results from different protocols and data sources to obtain a more complete picture of the censorship landscape. When it comes to determining the censorship status of a domain, it is important to gather results from multiple systems and protocols to obtain a more conclusive result.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8358&quot; id=&quot;single-column-text-8358&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Conclusion&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;DNS, HTTP, and HTTPS filtering middleboxes together form the primary pillars of the GFW&#39;s Web censorship. In this work, we present GFWeb, a longitudinal measurement system designed to discover domain blocklists used by the GFW for censoring Web access. Over the course of 20 months, GFWeb has tested over a billion fully qualified domains, and detected 943K and 55K pay-level domains censored by the GFW&#39;s HTTP and HTTPS filtering middleboxes, respectively. Our study not only complements prior efforts by providing a more comprehensive view into the GFW&#39;s Web censorship over time, but also reveals several new findings, including the GFW&#39;s asymmetric blocking behavior and patches of overblocking. &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The implications of our investigation extend beyond academic circles, touching on the fabric of global Internet governance and the ongoing struggle for digital freedom. The adaptive nature of the GFW signals a future where Internet censorship will become more nuanced and technically complex, posing significant challenges for circumvention technologies and international policy efforts. &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;In light of these insights, our work underscores the need for a reinvigorated approach to understanding and combating Internet censorship. The dynamic between censorship and circumvention is not static; it evolves as part of a larger geopolitical and technological landscape, with implications for global Internet freedom, the free flow of information, and the resistance against digital authoritarianism. &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;As we keep operating GFWeb, we hope that our data will not only provide fresh insights into technical observations but also promptly update the public regarding changes in the GFW&#39;s blocking policies and support other initiatives, especially those focusing on censorship detection and circumvention.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;fieldset class=&quot;group-appendix field-group-fieldset form-wrapper&quot;&gt;&lt;legend&gt;&lt;span class=&quot;fieldset-legend&quot;&gt;Appendix&lt;/span&gt;&lt;/legend&gt;&lt;div class=&quot;fieldset-wrapper&quot;&gt;&lt;div class=&quot;field field-name-field-lvl2-appendix-refs field-type-text field-label-above&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;References:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-1&quot;&gt;&lt;/a&gt;&lt;p&gt;[1] Nguyen Phong Hoang, Jakub Dalek, Masashi Crete-Nishihata, Nicolas Christin, Vinod Yegneswaran, Michalis Polychronakis, and Nick Feamster. GFWeb: Measuring the Great Firewall&#39;s Web Censorship at Scale. In &lt;em&gt;Proceedings of the 33th USENIX Security Symposium (USENIX Security ’24), 2024.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-2&quot;&gt;&lt;/a&gt;&lt;p&gt;[2] Freedom House. Freedom in the World 2023 - China, 2023. &lt;em&gt;&lt;a href=&quot;https://freedomhouse.org/country/china/freedom-world/2023&quot;&gt;https://freedomhouse.org/country/china/freedom-world/2023&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-3&quot;&gt;&lt;/a&gt;&lt;p&gt;[3] Anonymous, Arian Akhavan Niaki, Nguyen Phong Hoang, Phillipa Gill, and Amir Houmansadr. Triplet censors: Demystifying Great Firewall&#39;s DNS censorship behavior. In &lt;em&gt;Proceedings of the USENIX Workshop on Free and Open Communications on the Internet (FOCI &#39;2&lt;/em&gt;&lt;em&gt;0), 2020.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-4&quot;&gt;&lt;/a&gt;&lt;p&gt;[4] Anonymous Author(s). Towards a comprehensive picture of the Great Firewall&#39;s DNS censorship. In&lt;em&gt; Proceedings of the USENIX Workshop on Free and Open Communications on the Internet (FOCI), 2014&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-5&quot;&gt;&lt;/a&gt;&lt;p&gt;[5] Haixin Duan, Nicholas Weaver, Zongxu Zhao, Meng Hu, Jinjin Liang, Jian Jiang, Kang Li, and Vern Paxson. Hold-On: Protecting against on-path DNS poisoning. In &lt;em&gt;Proceedings of the Conference on Securing and Trusting Internet Names (SATIN), 2012&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-6&quot;&gt;&lt;/a&gt;&lt;p&gt;[6] Oliver Farnan, Alexander Darer, and Joss Wright. Poisoning the well – exploring the Great Firewall&#39;s poisoned DNS responses. In &lt;em&gt;Proceedings of the ACM Workshop on Privacy in the Electronic Society (WPES), 2016&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-7&quot;&gt;&lt;/a&gt;&lt;p&gt;[7] Nguyen Phong Hoang, Arian Akhavan Niaki, Jakub Dalek, Jeffrey Knockel, Pellaeon Lin, Bill Marczak, Masashi Crete-Nishihata, Phillipa Gill, and Michalis Polychronakis. How great is the Great Firewall? Measuring China&#39;s DNS censorship. In &lt;em&gt;Proceedings of the 30th USENIX Security Symposium, 2021&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-8&quot;&gt;&lt;/a&gt;&lt;p&gt;[8] Graham Lowe, Patrick Winters, and Michael L. Marcus. The Great DNS Wall of China. &lt;em&gt;Technical report, New York University, 2007&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-9&quot;&gt;&lt;/a&gt;&lt;p&gt;[9] Sparks, Neo, Tank, Smith, and Dozer. The collateral damage of Internet censorship by DNS injection. &lt;em&gt;SIGCOMM Computer Communication Review, 42(3):21–27, 2012&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-10&quot;&gt;&lt;/a&gt;&lt;p&gt;[10] Richard Clayton, Steven J. Murdoch, and Robert N. M. Watson. Ignoring the Great Firewall of China. In &lt;em&gt;Proceedings of the 6th Workshop on Privacy Enhancing Technologies (PET), pages 20–35. Springer, 2006&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-11&quot;&gt;&lt;/a&gt;&lt;p&gt;[11] Geremie R. Barme And Sang Ye. The Great Firewall of China, 1997- 06-01. &lt;em&gt;&lt;a href=&quot;https://www.wired.com/1997/06/china-3/&quot;&gt;https://www.wired.com/1997/06/china-3/&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-12&quot;&gt;&lt;/a&gt;&lt;p&gt;[12] Raymond Rambert, Zachary Weinberg, Diogo Barradas, and Nicolas Christin. Chinese wall or Swiss cheese? keyword filtering in the Great Firewall of China. In &lt;em&gt;Proceedings of the ACM Web Conference (WWW), 2021&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-13&quot;&gt;&lt;/a&gt;&lt;p&gt;[13] Jonathan Zittrain and Benjamin Edelman. Internet filtering in China. &lt;em&gt;IEEE Internet Computing, 7(2):70–77, 2003&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-14&quot;&gt;&lt;/a&gt;&lt;p&gt;[14]&amp;nbsp;Nguyen Phong Hoang, Sadie Doreen, and Michalis Polychronakis. Measuring I2P censorship at a global scale. In &lt;em&gt;Proceedings of the USENIX Workshop on Free and Open Communications on the Internet (FOCI), 2019&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-15&quot;&gt;&lt;/a&gt;&lt;p&gt;[15] Jong Chun Park and Jedidiah R. Crandall. Empirical study of a nationalscale distributed intrusion detection system: Backbone-level filtering of HTML responses in China. In &lt;em&gt;Proceedings of the 30th International Conference on Distributed Computing Systems (ICDCS), pages 315– 326, 2010&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-16&quot;&gt;&lt;/a&gt;&lt;p&gt;[16] Zhongjie Wang, Yue Cao, Zhiyun Qian, Chengyu Song, and Srikanth V. Krishnamurthy. Your state is not mine: A closer look at evading stateful Internet censorship. In &lt;em&gt;Proceedings of the Internet Measurement Conference (IMC), 2017&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-17&quot;&gt;&lt;/a&gt;&lt;p&gt;[17] Mingshi Wu, Jackson Sippe, Danesh Sivakumar, Jack Burg, Peter Anderson, Xiaokang Wang, Kevin Bock, Amir Houmansadr, Dave Levin, and Eric Wustrow. How the Great Firewall of China detects and blocks fully encrypted traffic. In &lt;em&gt;Proceedings of the USENIX Security Symposium, 2023&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-18&quot;&gt;&lt;/a&gt;&lt;p&gt;[18] Lokman Tsui. An inadequate metaphor: the Great Firewall and Chinese internet censorship. &lt;em&gt;Global Dialogue, 9(1/2):60, 2007&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-19&quot;&gt;&lt;/a&gt;&lt;p&gt;[19] Young Xu. Deconstructing the Great Firewall of China. &lt;em&gt;Technical report, Thousand Eyes, 2016&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-20&quot;&gt;&lt;/a&gt;&lt;p&gt;[20] Ronald Deibert. China&#39;s Cyberspace Control Strategy: An Overview and Consideration of Issues for Canadian Policy, 2010.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-21&quot;&gt;&lt;/a&gt;&lt;p&gt;[21] ] Tor Project&#39;s Anti-Censorship Team. China Anti-Fraud Webpage Redirection Censorship, 2022-01-12. &lt;em&gt;&lt;a href=&quot;https://gitlab.torproject.org/tpo/anti-censorship/censorship-analysis/-/issues/40026&quot;&gt;https://gitlab.torproject.org/tpo/anti-censorship/censorship-analysis/-/...&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/fieldset&gt;
</description><link>https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus</link><guid isPermaLink="false">https://www.usenix.org/publications/loginonline/measuring-great-firewall%E2%80%99s-multi-layered-web-filtering-apparatus</guid><pubDate>Wed, 14 Aug 2024 16:00:00 GMT</pubDate><author>Nguyen Phong Hoang, Nick Feamster</author></item><item><title>Acto: Push-Button End-to-End Testing for Operation Correctness of Kubernetes Operators</title><description>&lt;div class=&quot;field field-name-field-lv2-publication-date field-type-datetime field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;date-display-single&quot;&gt;August 2, 2024&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-article-type field-type-taxonomy-term-reference field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Research&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-label-inline clearfix field-type-text-long field-pseudo-field field-pseudo-field--author-list&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Authors:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/acto-push-button-end-end-testing-operation-correctness-kubernetes-operators#Jiawei%20Tyler%20Gu&quot; title=&quot;Jiawei Tyler Gu&quot;&gt;Jiawei Tyler Gu&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/acto-push-button-end-end-testing-operation-correctness-kubernetes-operators#Xudong%20Sun&quot; title=&quot;Xudong Sun&quot;&gt;Xudong Sun&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/acto-push-button-end-end-testing-operation-correctness-kubernetes-operators#Zhen%20Tang&quot; title=&quot;Zhen Tang&quot;&gt;Zhen Tang&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/acto-push-button-end-end-testing-operation-correctness-kubernetes-operators#Chen%20Wang&quot; title=&quot;Chen Wang&quot;&gt;Chen Wang&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/acto-push-button-end-end-testing-operation-correctness-kubernetes-operators#Mandana%20Vaziri&quot; title=&quot;Mandana Vaziri&quot;&gt;Mandana Vaziri&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/acto-push-button-end-end-testing-operation-correctness-kubernetes-operators#Owolabi%20Legunsen&quot; title=&quot;Owolabi Legunsen&quot;&gt;Owolabi Legunsen&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/acto-push-button-end-end-testing-operation-correctness-kubernetes-operators#Tianyin%20Xu&quot; title=&quot;Tianyin Xu&quot;&gt;Tianyin Xu&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-shepherds field-type-user-reference field-label-inline clearfix&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Article shepherded by:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;usenix-user-reference-names&quot;&gt;Laura Nolan&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraphs-items paragraphs-items-field-lv2-body paragraphs-items-field-lv2-body-full paragraphs-items-full&quot;&gt;
  &lt;div class=&quot;field field-name-field-lv2-body field-type-paragraphs field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8250 paragraphs-first-text&quot; id=&quot;single-column-text-8250&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Acto is a push-button end-to-end testing technique for Kubernetes operators which are custom controllers for managing deployed systems atop Kubernetes. Acto uses a state-centric approach to test an operator together with its managed system. It checks if an operator satisfies three operation correctness properties: 1) always reconciling the managed system to the desired states, 2) always recovering the system from undesired or error states, and 3) always being resilient to misoperations. Acto has helped find more than 80 new bugs in popular Kubernetes operators and is maintained as an open-source project.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8251&quot; id=&quot;single-column-text-8251&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;1 Introduction &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Cloud systems are growing in scale and demand beyond what human-based operation can reliably, continuously, and efficiently manage. Today, cloud systems deployed on platforms such as Kubernetes are increasingly being managed by mechanical “operators” [1, 3, 12, 22] that automate labor-intensive operations. Kubernetes operators implement declarative interfaces which define the managed system resources and their properties [2]. An operation declares the &lt;em&gt;desired&lt;/em&gt; system state through the interface and the op- erator automatically reconciles the system from its current state to the declared state. This “cloud-native” operator pattern effectively simplifies operations and improves efficiency.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Today, there is a thriving ecosystem of high-quality, reusable operators on Kubernetes—almost all cloud- native systems have operators to manage them atop Kubernetes. These operators automate important management tasks like software upgrades, configuration updates, and autoscaling. Even for the same cloud system, multiple different operators are developed by commercial vendors and open-source communities, to support different operation practices and deployment environments.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The rapid development and deployment of operators make their quality assurance a pressing need—&lt;em&gt;operation correctness&lt;/em&gt; is critical to system reliability [6]. A buggy operator can impair correctly implemented systems in production. Compared with human operator mistakes—major causes of system failures [9,13,20, 21, 27]—bugs in operators have more magnified impacts due to the nature of automation and widespread software reuse. In fact, buggy operators caused many recent production incidents [11, 15, 17–19].&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Figure 1 depicts a safety bug that our tool detects in a Kubernetes operator for ZooKeeper [16]. When scaling down a ZooKeeper cluster, the operator only removes pods, but not the data volumes attached to the pods. If the operator later scales up the ZooKeeper cluster, the newly created pods will try to reuse the old volumes. Due to membership inconsistencies between the new pods and old volumes, the new ZooKeeper nodes fail to start. Moreover, all subsequent scaling operations hang inside the operator.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8252&quot; id=&quot;article-image-8252&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/figure1_0.jpg&quot; width=&quot;1440&quot; height=&quot;547&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt; Figure 1: A safety bug [7] in a ZooKeeper operator, detected by Acto. The bug manifests when the operator scales down and then scales up ZooKeeper. Newly created pods fall into crash loops; all subsequent scaling operations hang.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8253&quot; id=&quot;single-column-text-8253&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Compared with Kubernetes and the managed systems (e.g., ZooKeeper), operator code is often much less tested. For example, our study [14] shows that existing Kubernetes operators rely mostly on unit tests which cannot check operation correctness end to end, i.e., if an operator reconciles the managed system to&amp;nbsp;&lt;/span&gt;&lt;span&gt;desired states. Some operators have a few end-to-end (e2e) tests but only cover small parts of the enormous system state space and the complex operations exposed by declarative interfaces.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;We present Acto, the first automatic testing technique and a push-button tool for Kubernetes operators. Acto is fully automatic—it tests unmodified operators and requires no manual annotation, instrumenta- tion, or assertion. Acto uses a state-centric approach to test a given operator together with its managed system. Acto continuously instructs an operator to reconcile the system to different states and checks if the system successfully reaches those desired states during a test campaign. To do so, Acto models operations as state transitions and systematically realizes state-transition sequences to exercise supported operations in different scenarios. Acto checks three operation correctness properties: &lt;/span&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;span&gt;always reconciling the managed system to the desired states,&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;always recovering the system from undesired or error states, and&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;always being resilient to misoperations where the desired states are invalid, such as misconfigurations [23, 26].&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;Acto has helped find more than 80 new bugs (at least 62 were confirmed and 41 have been fixed) with few false alarms (less than 0.19%). Acto also found six bugs in Kubernetes and in the Go runtime that affected multiple operators (all have been confirmed or fixed). The detected bugs lead to severe safety and liveness issues, affecting not only the operators, but also the reliability and security of the managed systems. We also find that existing operators have poor resilience to misoperations which would render the system into unrecoverable states. For a given Kubernetes operator, Acto’s testing finishes within eight hours (a nightly run) on a cluster of eight machines; the majority of operators only need one machine.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The Acto project is open sourced at &lt;a href=&quot;https://github.com/xlab-uiuc/acto&quot; target=&quot;_blank&quot; title=&quot;https://github.com/xlab-uiuc/acto&quot;&gt;https://github.com/xlab-uiuc/acto&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8254&quot; id=&quot;single-column-text-8254&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;2 The Operator Pattern&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Kubernetes operators use a declarative, state-reconciliation design pattern [1, 3, 12, 22]. An operation declares a desired system state and the operator automatically reconciles the system to the declared state. This design pattern simplifies system management operations by removing the need to write ad hoc, imperative scripts for one-off tasks. The pattern also makes system management declarative and intent-driven.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;In Kubernetes, operators expose a declarative interface in the form of custom resources CRs [2]. A CR defines a system resource and its properties that can be modified to manage that resource. A state declaration specifies property values in a CR. Figure 2 shows an example of desired-state declarations for ZooKeeper; it specifies primitive properties like replicas and image, and composite properties like persistence which has sub-properties. A ZooKeeper operator reconciles a managed ZooKeeper cluster to satisfy the declared state. Management operations are expressed by changing one or more property values in a CR.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8255&quot; id=&quot;article-image-8255&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/figure2.jpg&quot; width=&quot;1440&quot; height=&quot;552&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 2: Scaling up a ZooKeeper system (from 2 to 3 replicas) with a new desired-state declaration (CR).&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8256&quot; id=&quot;single-column-text-8256&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Every Kubernetes operator continuously reconciles the managed system from its current state to a newly declared desired state, if the current state does not match the declared state. Kubernetes manages the current system states in a collection of state objects in etcd, a strongly consistent datastore. Every entity in the cluster, such as a pod, a volume, and a stateful application, has a corresponding state object. State objects have uniform APIs and consistent data schema, making them highly interpretable and extensible [10].&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8257&quot; id=&quot;single-column-text-8257&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;3 Technique&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Acto is a state-centric testing technique. It tests operation correctness by performing end-to-end (e2e) test- ing of Kubernetes operators together with the managed systems. To do so, Acto continuously generates new operations during a test campaign, and checks if the operator always correctly reconciles the system from each current state to the desired state, or raises an alarm otherwise.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Acto detects bugs when operation correctness is violated. Such bugs include those that 1) cause an operator not to reconcile the system to desired states, 2) crash the operator or the system, and 3) prevent the managed system from recovering from an error state. Acto also detects vulnerabilities to misoperations that can drive the systems into explicit error states.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Acto generates minimized e2e test code for every alarm that it raises. These generated tests can help developers reliably reproduce a bug or a vulnerability, without rerunning the entire test campaign. That is, generated e2e tests only run operations that are necessary to set up the state for reproducing a bug or a vulnerability. Developers can include the generated e2e test in their regression test suite.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8258&quot; id=&quot;single-column-text-8258&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;3.1 Operation Model&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;Acto models an operation as a pair, (&lt;em&gt;S&lt;sup&gt;c&lt;/sup&gt;, D&lt;/em&gt;), where &lt;em&gt;S&lt;sup&gt;c&lt;/sup&gt; &lt;/em&gt;denotes a current system state and &lt;em&gt;D&lt;/em&gt; is a declaration of a valid desired state. &lt;em&gt;D&lt;/em&gt; is constrained by the operation interface specification (CRD [2] in Kubernetes). If successful, an operation triggers a state transition, &lt;em&gt;S&lt;sup&gt;c&lt;/sup&gt;&lt;/em&gt;&amp;nbsp;to &lt;em&gt;S&lt;sup&gt;D&lt;/sup&gt;&lt;/em&gt; , where &lt;em&gt;S&lt;sup&gt;D&lt;/sup&gt;&lt;/em&gt;&amp;nbsp;satisfies &lt;em&gt;D&lt;/em&gt;.&amp;nbsp;&lt;em&gt;D&lt;/em&gt; often only specifies a (small) part of the system state. So, there are multiple possible system states that can satisfy &lt;em&gt;D&lt;/em&gt;, and, in practice, only a small part of &lt;em&gt;S&lt;/em&gt; needs to be examined to check if &lt;em&gt;S&lt;sup&gt;D&lt;/sup&gt;&lt;/em&gt;&amp;nbsp;satisfies &lt;em&gt;D&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;If an operation fails (e.g., due to bugs in operator code), the system enters an error state, &lt;em&gt;S&lt;sup&gt;e&lt;/sup&gt;&lt;/em&gt;, which does not satisfy the desired state &lt;em&gt;D&lt;/em&gt;. When &lt;em&gt;S&lt;sup&gt;e&lt;/sup&gt;&lt;/em&gt;&amp;nbsp;does not satisft &lt;em&gt;D&lt;/em&gt;, the operator should be able to recover the system back&amp;nbsp;to the previous healthy state from S&lt;sup&gt;e&amp;nbsp;&lt;/sup&gt;by means of a state transition using the desired-state declaration&amp;nbsp;&lt;em&gt;D&lt;sub&gt;i-1&lt;/sub&gt;&lt;/em&gt;&amp;nbsp;that previously triggered the transition to&amp;nbsp;&lt;em&gt;S&lt;sup&gt;c&lt;/sup&gt;&lt;/em&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;The fundamental challenge in testing operators is the prohibitive cost of testing all elements in the Cartesian product of &lt;em&gt;S&lt;/em&gt; =&lt;em&gt; S&lt;sup&gt;C&lt;/sup&gt; &lt;/em&gt;∪ &lt;em&gt;S&lt;sup&gt;E&lt;/sup&gt;&lt;/em&gt; and&amp;nbsp;&lt;em&gt;Ď&lt;/em&gt;, where S&lt;sup&gt;C&lt;/sup&gt; is the set of all possible valid system states (&lt;em&gt;S&lt;sup&gt;c&lt;/sup&gt;&lt;/em&gt; ∈ &lt;em&gt;S&lt;sup&gt;C&lt;/sup&gt;&lt;/em&gt; ), &lt;em&gt;S&lt;sup&gt;E&lt;/sup&gt;&lt;/em&gt; is the set of all possible error states (&lt;em&gt;S&lt;sup&gt;e&lt;/sup&gt;&lt;/em&gt; ∈ &lt;em&gt;S&lt;sup&gt;E&lt;/sup&gt;&lt;/em&gt;), and&amp;nbsp;&lt;em&gt;Ď&lt;/em&gt; is the set of all possible declarations of desired state (&lt;em&gt;D&lt;/em&gt; ∈ &lt;em&gt;Ď&lt;/em&gt;). There can be a large number of values for different properties that constitute the system state. Exhaustive testing could be prohibitively expensive, and any practical testing approach can only exercise a part of the state space, i.e., &lt;em&gt;S&lt;/em&gt; ×&amp;nbsp;&lt;em&gt;Ď&lt;/em&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8259&quot; id=&quot;single-column-text-8259&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;3.2 Test Strategy&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Acto systematically explores the state space using the following three test strategies (Figures 3a–c).&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8260&quot; id=&quot;article-image-8260&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/figure3.jpg&quot; width=&quot;1440&quot; height=&quot;944&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 3: State transitions of different test strategies.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8310&quot; id=&quot;single-column-text-8310&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;strong&gt;Single operation.&lt;/strong&gt; Acto generates a declaration of a desired state &lt;em&gt;D&lt;/em&gt;, triggers the operator to reconcile the current system state &lt;em&gt;S&lt;sup&gt;c&lt;/sup&gt;&lt;/em&gt; to the desired system state &lt;em&gt;S&lt;sup&gt;D&lt;/sup&gt;&lt;/em&gt;, and checks whether &lt;em&gt;S&lt;sup&gt;D&lt;/sup&gt;&lt;/em&gt; |= &lt;em&gt;D&lt;/em&gt;. The single operation is applied to the initial system state &lt;em&gt;S&lt;sup&gt;c&lt;/sup&gt;&lt;/em&gt; = &lt;em&gt;S&lt;sup&gt;0&lt;/sup&gt;&lt;/em&gt; (starting from a non-initial state requires more operations). The key challenge is how to explore an effective and representative subset of&amp;nbsp;&lt;em&gt;Ď&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Operation sequence.&lt;/strong&gt; Acto extends single operations into a test campaign, which consists of a sequence of operations. Test campaigns overcome the limitation of the single-operation strategy, which must always start from the initial state &lt;em&gt;S&lt;sup&gt;c&lt;/sup&gt;&lt;/em&gt; = &lt;em&gt;S&lt;sup&gt;0&lt;/sup&gt;&lt;/em&gt;. It is important to test whether an operator can reconcile the system to desired states from different, non-initial start states. Reaching an end state from different start states increases the chance of invoking different procedures in the operator code. In a test campaign, earlier operations take the system to new states which become the start states for subsequent operations.&lt;/p&gt;&lt;p&gt;Acto generates a test campaign by chaining the expected end states &lt;em&gt;{S&lt;sub&gt;i&lt;/sub&gt;}&lt;/em&gt; from the single-operation strategy, and generating a new &lt;em&gt;D&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt; after each successful reconciliation, as shown in Figure 3b. The result is a sequence of state transitions; after each transition Acto checks whether the expected end state&amp;nbsp;&lt;em&gt;S&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt;&amp;nbsp;satisfies the desired state &lt;em&gt;D&lt;sub&gt;i&lt;/sub&gt;.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Error-state recovery.&lt;/strong&gt; The operation-sequence strategy does not test whether an operator correctly restores&amp;nbsp;&lt;/span&gt;a system from implicit or explicit error states. If the system is in an error state &lt;em&gt;S&lt;sup&gt;e&lt;/sup&gt;&lt;/em&gt;, the operator is responsible for recovering from&amp;nbsp;&lt;em&gt;S&lt;sup&gt;e&lt;/sup&gt;&lt;/em&gt;&amp;nbsp;by reconciling the system from&amp;nbsp;&lt;em&gt;S&lt;sup&gt;e&lt;/sup&gt;&lt;/em&gt;&amp;nbsp;back to the prior healthy state&amp;nbsp;&lt;em&gt;S&lt;span&gt;&lt;sub&gt;i-1&lt;/sub&gt;&lt;/span&gt;&lt;/em&gt;. The subsequent operations start from&amp;nbsp;&lt;em&gt;S&lt;span&gt;&lt;sub&gt;i-1&lt;/sub&gt;&lt;/span&gt;&lt;/em&gt;, such as in the transition from&amp;nbsp;&lt;em&gt;S&lt;span&gt;&lt;sub&gt;i-1&lt;/sub&gt;&lt;/span&gt;&lt;/em&gt;&amp;nbsp;→&amp;nbsp;&lt;em&gt;S&lt;span&gt;&lt;sub&gt;i+1&lt;/sub&gt;&lt;/span&gt;&lt;/em&gt;, in Figure 3c. Error states can be reached because of operator bugs that reconcile the system to a state &lt;em&gt;S&lt;sup&gt;e&lt;/sup&gt;&lt;/em&gt; which does not satisfy desired state &lt;em&gt;D&lt;/em&gt;, or misoperations—semantic errors in &lt;em&gt;D&lt;/em&gt; that escape syntactic validation against the interface specification.&lt;/p&gt;&lt;p&gt;&lt;span&gt;Acto combines these three test exploration strategies (Figures 3a–c) to realize the state transition sequences in one test campaign, as shown in Figure 3d.&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8311&quot; id=&quot;single-column-text-8311&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;3.3 Example&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;We use the bug in Figure 1 as an example to illustrate Acto’s test strategy. When testing the ZooKeeper operator, as part of the operation sequence, Acto applies &lt;em&gt;D&lt;sub&gt;k&lt;/sub&gt;&lt;/em&gt; (a ZooKeeper CR) that desires five ZooKeeper replicas, triggering the operator to set up a ZooKeeper cluster with five replicas (pods) running. Acto then applies &lt;em&gt;D&lt;sub&gt;k+1&lt;/sub&gt;&lt;/em&gt; by reducing the desired replica number to three. The operator then scales down ZooKeeper by deleting two pods, but does not delete their volumes due to the bug. Finally, Acto applies D&lt;sub&gt;k+2&lt;/sub&gt; that raises the replica number back to five. The operator creates two pods directly reusing the old volumes. Due to the bug, ZooKeeper gets stuck in an error state: the membership configurations on the old volumes are not updated, and the newly created pods keep crashing. Acto flags this bug using its test oracles.&lt;/p&gt;&lt;p&gt;&lt;span&gt;To reproduce this bug without going through all the operations, Acto generates a minimized operation sequence&amp;nbsp;&lt;/span&gt;that deterministically triggers the bug.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8312&quot; id=&quot;single-column-text-8312&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;4 Design and Implementation&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;We describe the main components of Acto and how we implement them. These components embody Acto’s state-centric testing technique; they generate declarations of desired system states, execute test campaigns, and check reconciled states using automated test oracles.&lt;/p&gt;&lt;p&gt;&lt;span&gt;The Acto tool takes the following inputs: 1) a manifest for deploying the operator, 2) the specification of state declaration, i.e., the operator’s CRD [2], and 3) optionally the operator’s source code. Acto outputs test results, debugging information, and minimized test code that reproduces detected failures. Acto runs tests on virtualized Kubernetes clusters. It supports three backends: Kind, Minikube, and K3d.&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8313&quot; id=&quot;single-column-text-8313&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;4.1 Realizing State Transitions&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;During a test campaign (Figure 3d), Acto automatically generates a new state declaration &lt;em&gt;D&lt;sub&gt;i+1&lt;/sub&gt;&lt;/em&gt; based on the current system state &lt;em&gt;S&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt; to realize a state transition from &lt;em&gt;S&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt; →&amp;nbsp;&lt;em&gt;S&lt;sub&gt;i+1&lt;/sub&gt;&lt;/em&gt;. Test campaigns start from the initial state &lt;em&gt;S&lt;sub&gt;0&lt;/sub&gt;&lt;/em&gt;. Acto triggers state transitions with the goals to 1) cover all properties exposed by the operation interface, and 2) exercise representative operation scenarios based on property semantics.&lt;/p&gt;&lt;p&gt;Acto systematically exercises all the properties that are defined in the operation interface. Each new &lt;em&gt;D&lt;sub&gt;i+1&lt;/sub&gt;&lt;/em&gt; changes one property in the current state &lt;em&gt;S&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt; and any other properties that are needed to satisfy predicates on property relationships. Specifically, Acto selects a previously untested property and uses it to declare a new desired state. The end state after one transition becomes the start state for the next transition (Figure 3b). All state declarations collectively change every property at least once during a test campaign.&lt;/p&gt;&lt;p&gt;&lt;span&gt;Acto tests different scenarios based on the semantics of the changed properties. (Acto automatically infers these semantics). Table 1 gives a few such scenarios. For example, Acto tests the scale-up-and-scale- down and the scale-down-and-scale-up sequences if a property represents the number of replicas. Acto also tests different pod assignments that trigger the operator to re-configure or re-deploy managed systems differently. This scenario-driven approach allows Acto to focus on a small number of representative states, instead of the very large set of all possible property values. We implement the scenarios as plugins that can be extended or customized; users of Acto can implement more scenarios and support system-specific properties such as system configurations.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-html-table paragraphs-item-html-table paragraphs-item-full paragraphs-item-8314&quot; id=&quot;html-table-8314&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-table-contents field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;
    &lt;th&gt;Property&lt;/th&gt;
    &lt;th&gt;Scenarios&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replicas&lt;/td&gt;
    &lt;td&gt;Scale up and then down; scale down and then up;
upscale over system resource limit.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Affinity&lt;/td&gt;
    &lt;td&gt;Place all pods on one node; spread pods to different nodes; set unsatisfiable affinity rules.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Storage&lt;/td&gt;
    &lt;td&gt;Expand storage volumes; shrink storage volumes;
request more storage than is available in a cluster.&lt;/td&gt;
  &lt;/tr&gt;  
 &lt;tr&gt;
    &lt;td&gt;Access&lt;/td&gt;
    &lt;td&gt;Switch between normal and privileged roles.&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-table-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Table 1: Examples of built-in scenarios of Acto to generate new state declarations and trigger state transitions. Scenarios are created based on property semantics inferred by Acto and they can be extended or customized.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8315&quot; id=&quot;single-column-text-8315&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;Acto also generates misoperations, each of which triggers a state transition to an error state, &lt;em&gt;S&lt;sup&gt;e&lt;/sup&gt;&lt;/em&gt;. For ex- ample, Acto generates misoperations that 1) scale the replicas beyond the total number of available physical resources, and 2) set unsatisfiable affinity rules (Table 1). Acto uses misoperations to check if an operator 1) is resilient to operation errors and 2) can recover from undesired or error states. Acto’s oracles check the former (is the system in a state &lt;em&gt;S&lt;sup&gt;e&lt;/sup&gt;&lt;/em&gt;?). Acto checks the latter by rolling back &lt;em&gt;S&lt;sup&gt;e&lt;/sup&gt;&lt;/em&gt; to the most recent healthy state. Misoperations that declare semantically erroneous states could escape constraint validation. A correct operator should not carry out an erroneous operation or at least should recover from operation failures.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8316&quot; id=&quot;single-column-text-8316&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;4.2 Generating State Declarations&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;Acto generates desired-state declarations, &lt;em&gt;D&lt;/em&gt; ∈&amp;nbsp;&lt;em&gt;Ď&lt;/em&gt;&amp;nbsp;, that are syntactically valid, resemble real-world scenarios, and satisfy predicates on property relationships. Such desired states improve the effectiveness and efficiency of Acto’s state space exploration. End-to-end tests are expensive, so a &lt;em&gt;D&lt;/em&gt; that does not satisfy these conditions has a low chance of finding bugs.&lt;/p&gt;&lt;p&gt;&lt;span&gt;Acto ensures that all property values in declared desired states are syntactically valid using the opera- tion interface specification. (Invalid declarations would likely be directly rejected by the Kubernetes API servers before reaching the operator.) Kubernetes’ OpenAPISchema specification defines constraints on all supported properties. For composite properties, Acto uses composite constraints like required properties and also derives constraints from the sub-properties. For primitive properties, Acto uses constraints like the type, min/max values (for numeric types), length (for string type), regular-expression patterns, etc.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;To exercise various operation scenarios, Acto changes properties based on their semantics. Acto in- fers the semantics of a property in the interface specification by mapping it to a set of resource types in the Kubernetes core APIs. Such mapping is feasible because many operations for property changes are eventually delegated to Kubernetes core services. Acto exploits the insight that property structure is ef- fective for mapping to properties in the Kubernetes core resource specification. Specifically, all Kuber- netes core resource types have unique structures. Figure 4 exemplifies how Acto infers semantics from the property structure: CassOp has a &lt;em&gt;cassandraDataVolumeClaimSpec&lt;/em&gt; property with the same structure as the &lt;em&gt;VolumeClaimTemplates&lt;/em&gt; property in Kubernetes’ StatefulSet resource. Therefore, Acto infers the semantics of &lt;em&gt;cassandraDataVolumeClaimSpec &lt;/em&gt;using a structural mapping. When provided with operator source code, Acto can obtain more complete mapping via static program analysis that tracks how the property value is used in the operator code via its data flows.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;To generate values for properties with inferred semantics, Acto currently implements 57 property- specific generators based on Kubernetes resource semantics. Most of these properties are composite. The generators focus on high-level semantics to exercise different scenarios (Table 1). Each generator creates property values to realize a scenario. We find that most properties exposed by operation interfaces (83% on average in our evaluated operators) can be mapped to Kubernetes resources. For properties whose se- mantics Acto cannot infer, Acto mutates current values based on their data types while satisfying syntactic constraints. Acto only mutates primitive sub-properties of composite properties.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Lastly, the values Acto generates should satisfy predicates, in the form of property dependencies, for changed property values to trigger state transitions. Acto automatically infers property dependencies from naming convention. In Kubernetes, dependencies can be identified by feature toggles—each composite property has a Boolean sub-property named “enabled.” For example, operations that change PCN/MongoOp’s backup policy must also set Backup.Enabled to True. With operator source code, Acto can also detect&amp;nbsp;dependencies among property values by analyzing control-flow relationships among program variables.&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8317&quot; id=&quot;article-image-8317&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/figure4.jpg&quot; width=&quot;1440&quot; height=&quot;1062&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 4: Semantic analysis maps the properties in the CRD interface to the properties of a Kubernetes core resource.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8318&quot; id=&quot;single-column-text-8318&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;4.3 Test Oracles&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;Acto’s test oracles check if the system state after an operation matches the desired state. If there is a match, Acto reports the operation as successful. Otherwise, Acto signals an alarm that the user can inspect to find bugs. The complexity of Acto’s oracles depends on whether mismatches between reconciled and desired states manifest explicitly or implicitly. Acto implements oracles to check for state mismatches that manifest as explicit &lt;em&gt;error states&lt;/em&gt;, such as exceptions, error codes, and timeouts.&lt;/p&gt;&lt;p&gt;Acto also implements oracles to check if &lt;em&gt;S&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt; satisfies &lt;em&gt;D&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt; for each state transition, as many operator bugs manifest as implicit-state mismatches with no explicit symptoms. Checking whether &lt;em&gt;S&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt;&amp;nbsp;satisfies &lt;em&gt;D&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt; is challenging. First, &lt;em&gt;S&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt; and &lt;em&gt;D&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt; are represented differently: &lt;em&gt;D&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt; is a specification [2] and &lt;em&gt;S&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt; is embodied in state objects [4]. Second, satisfiability is domain-specific; its semantics may not be obvious. To address these challenges, Acto devises the consistency oracle and differential oracle.&lt;/p&gt;&lt;p&gt;&lt;span&gt;In addition, Acto also has an interface to allow users to add custom oracles with domain-specific knowledge, e.g., a probe that tries to set and get some path in ZooKeeper.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8319&quot; id=&quot;single-column-text-8319&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt; 4.3.1 Consistency Oracle&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;Some bugs occur if an operator stops reconciliation because the system is in state &lt;em&gt;S&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt;&amp;nbsp;which satisfies &lt;em&gt;D&lt;/em&gt; in the operator’s view, but which does not satisfy &lt;em&gt;D&lt;/em&gt; in Kubernetes’ view. To detect such bugs, Acto additionally checks whether the Kubernetes’ view matches &lt;em&gt;D&lt;/em&gt;; the Kubernetes’ view is encoded in spec sections of state objects, which are jointly maintained by all running controllers and operators. For each transition from &lt;em&gt;S&lt;sub&gt;i−1&lt;/sub&gt;&lt;/em&gt;&amp;nbsp;→&amp;nbsp;&lt;em&gt;S&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt;, Acto attempts to match each property &lt;em&gt;p&lt;/em&gt; (specified in &lt;em&gt;D&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt;) to the corresponding spec fields in the state objects. If a match is found, it indicates that Kubernetes agrees with the operator. Otherwise, Acto raises an alarm.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8320&quot; id=&quot;single-column-text-8320&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;4.3.2 Differential Oracle&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;The differential oracle does not check against &lt;em&gt;D&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt;; it checks that an operator 1) reconciles to the matching desired states from different existing states &lt;em&gt;S&lt;sub&gt;i−1&lt;/sub&gt;&lt;/em&gt; and &lt;em&gt;S&lt;sub&gt;0&lt;/sub&gt;&lt;/em&gt;, and 2) recovers the system from (implicit or explicit) error state &lt;em&gt;S&lt;sup&gt;e&lt;/sup&gt;&lt;/em&gt; to state &lt;em&gt;S&lt;sub&gt;i−1&lt;/sub&gt;&lt;/em&gt;. Acto rolls back to &lt;em&gt;S&lt;sub&gt;i−1&lt;/sub&gt;&lt;/em&gt; to continue exploration from a known good state. Figure 5 shows a bug detected by the differential oracle. There, the Boolean KnativeOp property contour.enabled enables or disables Contour (an ingress controller). But, a KnativeOp bug makes it fail to disable Contour once it is enabled. The consistency oracle does not detect this bug: it is hard to automat- ically map the Boolean property to the existence of a Contour pod. The differential oracle detects the bug because a Contour pod appears in &lt;em&gt;S&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt;, but not in &lt;em&gt;S&#39;&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt;.&lt;/p&gt;&lt;div&gt;&lt;p&gt;&lt;span&gt; Note that reporting alarms for any difference in the state objects of&amp;nbsp;&lt;/span&gt;&lt;em&gt;S&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;and &lt;/span&gt;&lt;em&gt;S&#39;&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt;would be brittle and lead to false positives, because execution-specific values like timestamps, IP addresses, and ports may change nondeterministically. Acto excludes execution-specific fields when comparing state objects. Acto automatically labels those fields by 1) running the transition &lt;em&gt;S&lt;sub&gt;0&amp;nbsp;&lt;/sub&gt;&lt;/em&gt;→ &lt;em&gt;S&lt;sub&gt;1&lt;/sub&gt;&lt;/em&gt; multiple times as a calibration and labeling fields with values varying across runs, and 2) running&amp;nbsp;&lt;em&gt;S&lt;sub&gt;0&amp;nbsp;&lt;/sub&gt;&lt;/em&gt;→&amp;nbsp;&lt;em&gt;S&lt;sub&gt;1&lt;/sub&gt;&lt;/em&gt;&amp;nbsp;multiple times, iff the differential oracle fires an alarm on &lt;em&gt;S&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt;, to ensure relevant fields are deterministic.&amp;nbsp;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8321&quot; id=&quot;article-image-8321&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/figure5.jpg&quot; width=&quot;1440&quot; height=&quot;602&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 5: A KnativeOp bug that is detected by Acto’s differential oracle [5]. Contour continues to manage ingress after an operation explicitly disables it.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8322&quot; id=&quot;single-column-text-8322&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;5 Evaluation and Experience&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;In our original SOSP paper [14], we rigorously evaluated Acto with eleven popular open-source Kubernetes operators which manage nine cloud systems. All evaluated operators were developed by the official teams of the managed systems, or by companies that sell services built around the managed systems. Acto found new bugs in every evaluated Kubernetes operator, and in total found 56 unknown bugs in all the evaluated operators. We had reported all these bugs. At that time, 42 were confirmed and 30 have been fixed. No bug report was rejected. Acto also finds six bugs in Kubernetes and in the Go runtime that affect multiple operators; all were confirmed or fixed.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Since then, we have been continuously developing the Acto project, and Acto has been used to test more Kubernetes operators. Recently, we designed an assignment on Kubernetes controller reliability based on the Acto project for CS 523 (Advanced Operating Systems) at the University of Illinois Urbana-Champaign and used it in the semester of Spring 2024, with the purpose of teaching cloud computing concepts and cloud-native technologies. Many students in the course have successfully applied Acto to more than 40 open-source Kubernetes operators. Most students find Acto easy (and fun) to use and effective in finding defects in existing operators. Students are encouraged to report the bugs they find back to the developers. So far, Acto has helped find more than 80 new bugs (at least 62 were confirmed and 41 have been fixed). The project maintains the list of bugs found by Acto [8].&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;During the process, students continuously improve Acto and add new features. For example, Acto now has support for Kubernetes operators written in Java and Rust, in addition to Go. Acto also starts to support simple crash testing [24]. Acto has also been used in other research projects on Kubernetes reliability. For example, Acto was used to empirically evaluate formally verified Kubernetes controllers [25].&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The original Acto paper is available at &lt;a href=&quot;https://github.com/xlab-uiuc/acto/blob/main/docs/acto-%20paper_sosp2023.pdf.&quot; target=&quot;_blank&quot; title=&quot;https://github.com/xlab-uiuc/acto/blob/main/docs/acto- paper_sosp2023.pdf.&quot;&gt;https://github.com/xlab-uiuc/acto/blob/main/docs/acto- paper_sosp2023.pdf.&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;fieldset class=&quot;group-appendix field-group-fieldset form-wrapper&quot;&gt;&lt;legend&gt;&lt;span class=&quot;fieldset-legend&quot;&gt;Appendix&lt;/span&gt;&lt;/legend&gt;&lt;div class=&quot;fieldset-wrapper&quot;&gt;&lt;div class=&quot;field field-name-field-lvl2-appendix-refs field-type-text field-label-above&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;References:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-1&quot;&gt;&lt;/a&gt;&lt;p&gt;[1] Cloud Native Computing Foundation Operator White Paper. &lt;a href=&quot;https://www.cncf.io/wp-content/uploads/%202021/07/CNCF_Operator_WhitePaper.pdf&quot; target=&quot;_blank&quot; title=&quot;https://www.cncf.io/wp-content/uploads/ 2021/07/CNCF_Operator_WhitePaper.pdf&quot;&gt;https://www.cncf.io/wp-content/uploads/ 2021/07/CNCF_Operator_WhitePaper.pdf&lt;/a&gt;.&amp;nbsp;&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-2&quot;&gt;&lt;/a&gt;&lt;p&gt;[2]&amp;nbsp;Custom Resources. &lt;a href=&quot;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-%20resources/&quot; target=&quot;_blank&quot; title=&quot;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom- resources/&quot;&gt;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom- resources/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-3&quot;&gt;&lt;/a&gt;&lt;p&gt;[3]&amp;nbsp;Operator Pattern. &lt;a href=&quot;https://kubernetes.io/docs/concepts/extend-kubernetes/operator/&quot; target=&quot;_blank&quot; title=&quot;https://kubernetes.io/docs/concepts/extend-kubernetes/operator/&quot;&gt;https://kubernetes.io/docs/concepts/extend-kubernetes/operator/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-4&quot;&gt;&lt;/a&gt;&lt;p&gt;[4]&amp;nbsp; Understanding Kubernetes Objects. &lt;a href=&quot;https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-%20objects/&quot; target=&quot;_blank&quot; title=&quot;https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes- objects/&quot;&gt;https://kubernetes.io/docs/concepts/overview/working-with-&lt;/a&gt;&lt;a href=&quot;https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-%20objects/&quot; target=&quot;_blank&quot; title=&quot;https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes- objects/&quot;&gt;objects/kubernetes- objects/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-5&quot;&gt;&lt;/a&gt;&lt;p&gt;[5] Contour pod is not deleted when disabled by user. &lt;a href=&quot;https://github.com/knative/operator/pull/1176,%202022.&quot; target=&quot;_blank&quot; title=&quot;//github.com/knative/operator/pull/1176, 2022.&quot;&gt;https://github.com/knative/operator/pull/1176&lt;/a&gt;, 2022.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-6&quot;&gt;&lt;/a&gt;&lt;p&gt;[6] Kubernetes and cloud native operations report 2022. &lt;a href=&quot;https://juju.is/cloud-native-kubernetes-usage-%20report-2022#kubernetes-operators&quot; target=&quot;_blank&quot; title=&quot;https://juju.is/cloud-native-kubernetes-usage- report-2022#kubernetes-operators&quot;&gt;https://juju.is/cloud-native-kubernetes-usage- report-2022#kubernetes-operators&lt;/a&gt;, 2022.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-7&quot;&gt;&lt;/a&gt;&lt;p&gt;[7] Zookeeper pod keeps crashing when scaling down and up. &lt;a href=&quot;https://github.com/pravega/zookeeper-%20operator/pull/526&quot; target=&quot;_blank&quot; title=&quot;https://github.com/pravega/zookeeper- operator/pull/526&quot;&gt;https://github.com/pravega/zookeeper- operator/pull/526&lt;/a&gt;, 2022.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-8&quot;&gt;&lt;/a&gt;&lt;p&gt;[8] Bugs found by Acto. &lt;a href=&quot;https://github.com/xlab-uiuc/acto/blob/main/bugs.md&quot; target=&quot;_blank&quot; title=&quot;https://github.com/xlab-uiuc/acto/blob/main/bugs.md&quot;&gt;https://github.com/xlab-uiuc/acto/blob/main/bugs.md&lt;/a&gt;, Apr. 2024.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-9&quot;&gt;&lt;/a&gt;&lt;p&gt;[9] BROWN, A. B., AND PATTERSON, D. A. Undo for Operators: Building an Undoable E-mail Store. In &lt;em&gt;Proceedings of the 2003 USENIX Annual Technical Conference (ATC’03)&lt;/em&gt; (June 2003).&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-10&quot;&gt;&lt;/a&gt;&lt;p&gt;[10] BURNS, B., GRANT, B., OPPENHEIMER, D., BREWER, E., AND WILKES, J. &lt;em&gt;Borg, Omega, and Kubernetes. Communications of the ACM 59,5&lt;/em&gt; (May 2016), 50–57.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-11&quot;&gt;&lt;/a&gt;&lt;p&gt;[11] CEBULA, M., AND SHERROD, B. 10 Weird Ways to Blow Up Your Kubernetes. In &lt;em&gt;KubeCon North America&lt;/em&gt; (Nov. 2019).&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-12&quot;&gt;&lt;/a&gt;&lt;p&gt;[12] DOBIES, J., AND WOOD, J. &lt;em&gt;Kubernetes Operators: Automating the Container Orchestration Platform.&lt;/em&gt; O’Reilly Media, Inc., 2020.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-13&quot;&gt;&lt;/a&gt;&lt;p&gt;[13] GRAY, J. Why Do Computers Stop and What Can Be Done About It? &lt;em&gt;Tandem Technical Report 85.7&lt;/em&gt; (June 1985).&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-14&quot;&gt;&lt;/a&gt;&lt;p&gt;[14] GU, J. T., SUN, X., ZHANG, W., JIANG, Y., WANG, C., VAZIRI, M., LEGUNSEN, O., AND XU, T. Acto: Automatic End-to-End Testing for Operation Correctness of Cloud System Management. In &lt;em&gt;Proceedings of the 29th ACM Symposium on Operating Systems Principles (SOSP’23) &lt;/em&gt;(Oct. 2023).&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-15&quot;&gt;&lt;/a&gt;&lt;p&gt;[15] GUILLOUX, S. Writing a Kubernetes Operator: the Hard Parts. In &lt;em&gt;KubeCon North America&lt;/em&gt; (Nov. 2019).&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-16&quot;&gt;&lt;/a&gt;&lt;p&gt;[16] HUNT, P., KONAR, M., JUNQUEIRA, F. P., AND REED, B. ZooKeeper: Wait-free coordination for Internet-scale&amp;nbsp;systems. In &lt;em&gt;Proceedings of the 2010 USENIX Annual Technical Conference (ATC’10) &lt;/em&gt;(June 2010).&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-17&quot;&gt;&lt;/a&gt;&lt;p&gt;[17] KUMAR,H., AND ŠAFRÁNEK, J.&amp;nbsp;Storage on Kubernetes - Learning From Failures. In &lt;em&gt;KubeCon North America&lt;/em&gt; (Nov. 2019).&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-18&quot;&gt;&lt;/a&gt;&lt;p&gt;[18] LAGRESLE, M. Moving to Kubernetes: the Bad and the Ugly. In &lt;em&gt;ContainerDays&lt;/em&gt; (June 2019).&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-19&quot;&gt;&lt;/a&gt;&lt;p&gt;[19] MADHU,C. Preventing Controller Sprawl From Taking Down Your Cluster. In &lt;em&gt;KubeCon North America&lt;/em&gt; (Oct.2022).&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-20&quot;&gt;&lt;/a&gt;&lt;p&gt;[20] NAGARAJA, K., OLIVEIRA, F., BIANCHINI, R., MARTIN, R. P., AND NGUYEN, T. D. Understanding and Dealing with Operator Mistakes in Internet Services. In &lt;em&gt;Proceedings of the 6th USENIX Conference on Operating Systems Design and Implementation (OSDI’04)&lt;/em&gt; (Dec. 2004).&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-21&quot;&gt;&lt;/a&gt;&lt;p&gt;[21] OPPENHEIMER, D., GANAPATHI, A., AND PATTERSON, D. A. Why Do Internet Services Fail, and What Can Be Done About It? In &lt;em&gt;Proceedings of the 4th USENIX Symposium on Internet Technologies and Systems (USITS’03)&lt;/em&gt; (Mar. 2003).&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-22&quot;&gt;&lt;/a&gt;&lt;p&gt;[22] RATIS, P. Lessons Learned Using the Operator Pattern to Build a Kubernetes Platform. In &lt;em&gt;SREcon21&lt;/em&gt; (Oct. 2021).&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-23&quot;&gt;&lt;/a&gt;&lt;p&gt;[23] SUN, X., CHENG, R., CHEN, J., ANG, E., LEGUNSEN, O., AND XU, T. Testing Configuration Changes in Context to Prevent Production Failures. In &lt;em&gt;Proceedings of the 14th USENIX Symposium on Operating Systems Design and Implementation (OSDI’20)&lt;/em&gt; (Nov. 2020).&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-24&quot;&gt;&lt;/a&gt;&lt;p&gt;[24] SUN, X., LUO, W., GU, J. T., GANESAN, A., ALAGAPPAN, R., GASCH, M., SURESH, L., AND XU, T. Automatic Reliability Testing for Cluster Management Controllers. In &lt;em&gt;Proceedings of the 16th USENIX Symposium on Operating Systems Design and Implementation (OSDI’22) &lt;/em&gt;(July 2022).&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-25&quot;&gt;&lt;/a&gt;&lt;p&gt;[25] SUN, X., MA, W., GU, J. T., MA, Z., CHAJED, T., HOWELL, J., LATTUADA, A., PADON, O., SURESH, L., SZEK- ERES, A., AND XU, T. Anvil: Verifying Liveness of Cluster Management Controllers. In &lt;em&gt;Proceedings of the 18th USENIX Symposium on Operating Systems Design and Implementation (OSDI’24)&lt;/em&gt; (July 2024).&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-26&quot;&gt;&lt;/a&gt;&lt;p&gt;[26] XU, T., JIN, X., HUANG, P., ZHOU, Y., LU, S., JIN, L., AND PASUPATHY, S. Early Detection of Configuration Errors to Reduce Failure Damage. In &lt;em&gt;Proceedings of the 12th USENIX Symposium on Operating Systems Design and Implementation (OSDI’16) &lt;/em&gt;(Nov. 2016).&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-27&quot;&gt;&lt;/a&gt;&lt;p&gt;[27] XU, T., ZHANG, J., HUANG, P., ZHENG, J., SHENG, T., YUAN, D., ZHOU, Y., AND PASUPATHY, S. Do Not Blame Users for Misconfigurations. In &lt;em&gt;Proceedings of the 24th Symposium on Operating System Principles (SOSP’13)&lt;/em&gt; (Nov. 2013).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/fieldset&gt;
</description><link>https://www.usenix.org/publications/loginonline/acto-push-button-end-end-testing-operation-correctness-kubernetes-operators</link><guid isPermaLink="false">https://www.usenix.org/publications/loginonline/acto-push-button-end-end-testing-operation-correctness-kubernetes-operators</guid><pubDate>Thu, 01 Aug 2024 16:00:00 GMT</pubDate><author>Jiawei Tyler Gu, Xudong Sun, Zhen Tang, Chen Wang, Mandana Vaziri, Owolabi Legunsen, Tianyin Xu</author></item><item><title>Analysis of USENIX Paper Downloads</title><description>&lt;div class=&quot;field field-name-field-lv2-publication-date field-type-datetime field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;date-display-single&quot;&gt;July 30, 2024&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-article-type field-type-taxonomy-term-reference field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Column&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-label-inline clearfix field-type-text-long field-pseudo-field field-pseudo-field--author-list&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Authors:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/analysis-usenix-paper-downloads#Rik%20Farrow&quot; title=&quot;Rik Farrow&quot;&gt;Rik Farrow&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraphs-items paragraphs-items-field-lv2-body paragraphs-items-field-lv2-body-full paragraphs-items-full&quot;&gt;
  &lt;div class=&quot;field field-name-field-lv2-body field-type-paragraphs field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8325 paragraphs-first-text&quot; id=&quot;single-column-text-8325&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;In September of 2022, I started receiving the web log files for usenix.org. I felt I needed to see what articles were being downloaded, and the current system didn&#39;t provide the insights I was looking for in a timely manner. I filtered out log entries for publications/login, counted the download frequencies, and sorted these with the most popular first.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;While I might think that a particular topic will be interesting to lots of people, I am not always right. And as an editor who doesn&#39;t pay authors, I really, really, want people to read the articles that they have taken the time to write. I have a responsibility to authors, one I only get to exercise by carefully curating the authors of papers about topics I think will be very popular.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Over time, I noticed a couple of things. Sometimes an article might remain popular for over a year, while other articles would suddenly become popular for a period of just weeks. In both cases, the initial surge in popularity often involves promotion by people other than the authors in places like Slashdot and HackerNews. And sometimes an article just fills a particular need through its thorough explanation of some technical topic.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;I noticed a prominent example of how promotion affects downloads the second time I took a look at papers. &lt;a href=&quot;https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-yuan.pdf&quot; target=&quot;_blank&quot; title=&quot;Simple Testing Can Prevent Most Critical Failures&quot;&gt;An OSDI paper&lt;/a&gt; had an unusually high number of downloads in the September-October 2023 timeframe: 1818. I asked Ding Yuan, the lead author, if he had any idea what might have caused this increase in activity. Ding discovered that a post on X by Kevlin Henney on September 6 had resulted in about 20% of his followers downloading the paper.&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;p&gt;&lt;span&gt;Besides papers and ;login: articles leaping in popularity because of promotion, some stay near the top for other reasons. I skimmed the top 20 papers from June 2024 trying to determine what it was about these papers that made them so popular. I first noticed that they were all well-written, but that&#39;s really not uncommon for highly-rated papers.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The other things all these papers had in common was that they weren&#39;t just introducing some new research or software: they did a great job of teaching about the issues involved. Usually, section two of a paper covers related-work, while section one provides motivation for why this particular work deserves to be published. Between these two sections, you can learn a lot about a topic. And that&#39;s why you find papers about Meta&#39;s Haystack, Google&#39;s Transformer, and Yahoo&#39;s ZooKeeper papers in the top 20 (Table 1).&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8331&quot; id=&quot;single-column-text-8331&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Table 1: Top paper downloads during the month of June 2024&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Index&lt;/td&gt;&lt;td&gt;Title&lt;/td&gt; &lt;td&gt;Description&lt;/td&gt;&lt;td&gt;Downloads&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://www.usenix.org/legacy/event/lisa98/full_papers/oetiker/oetiker.pdf&quot;&gt;The Multi Router Traffic Grapher and RRDtool&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Description of MRTG and RRDtool, a binary logging tool for time-sequence data&lt;/td&gt;&lt;td&gt;939&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://www.usenix.org/system/files/conference/nsdi13/nsdi13-final170_update.pdf&quot;&gt;Scaling Memcache at Facebook&lt;/a&gt;&lt;/td&gt;&lt;td&gt;How Facebook scaled memcached to thousands of servers&lt;/td&gt;&lt;td&gt;874&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://www.usenix.org/system/files/soups2019-busse.pdf&quot;&gt;Replication: No One Can Hack My Mind&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Survey of security advice from experts and non-experts&lt;/td&gt;&lt;td&gt;845&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://www.usenix.org/system/files/conference/usenixsecurity15/sec15-paper-pellegrino.pdf&quot;&gt;In the Compression Hornet’s Nest&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Denial of service attacks when Deflate is used in Apache HTTPD Tomcat and other services&lt;/td&gt;&lt;td&gt;772&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://www.usenix.org/legacy/events/sec10/tech/full_papers/Aggarwal.pdf&quot;&gt;An Analysis of Private Browsing Modes in Modern Browsers&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Evaluation of private browsing in four major browsers, inconsistencies and failures&lt;/td&gt;&lt;td&gt;743&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://www.usenix.org/system/files/sec23fall-prepub-234-wu-mingshi.pdf&quot;&gt;How the Great Firewall of China Detects and Blocks Fully Encrypted Traffic&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Blocking encrypted traffic based on passive traffic analysis&lt;/td&gt;&lt;td&gt;642&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://www.usenix.org/system/files/conference/osdi16/osdi16-porter.pdf&quot;&gt;REX: A Development Platform and Online Learning Approach&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Dana, a component-based programming language, an assembly and learning framework, and an online learning implementation that altogether allows for runtime optimization&lt;/td&gt;&lt;td&gt;533&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://www.usenix.org/system/files/sec21-carlini-extracting.pdf&quot;&gt;Extracting Training Data from Large Language Models&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Training data from LLMs (GPT2) can be recovered&lt;/td&gt;&lt;td&gt;540&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://www.usenix.org/system/files/conference/osdi16/osdi16-abadi.pdf&quot;&gt;TensorFlow: A System for Large-Scale Machine Learning&lt;/a&gt;&lt;/td&gt;&lt;td&gt;One of the foundational papers leading to LLMs: describes a dataflow graph to represent both the computation in an algorithm and the state&lt;/td&gt;&lt;td&gt;533&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://www.usenix.org//system/files/sec21-ulqinaku.pdf&quot;&gt;Is Real-time Phishing Eliminated with FIDO?&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Downgrade attack against the use of two-factor authentication that uses the FIDO protocol&lt;/td&gt;&lt;td&gt;493&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://www.usenix.org/system/files/conference/nsdi12/nsdi12-final138.pdf&quot;&gt;Resilient Distributed Datasets: A Fault-Tolerant Abstraction for In-Memory Cluster Computing&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Improvement to Hadoop by caching datasets, Spark&lt;/td&gt;&lt;td&gt;475&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://www.usenix.org//system/files/conference/woot12/woot12-final24.pdf&quot;&gt;Remote Exploitation of Memory Corruptions in Cellular Protocol Stacks&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Demonstration of attacks against the radio processor on smartphones&lt;/td&gt;&lt;td&gt;462&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://www.usenix.org//system/files/osdi22-yu.pdf&quot;&gt;Orca: A Distributed Serving System for Transformer-Based Generative Models&lt;/a&gt;&lt;/td&gt;&lt;td&gt;New scheduling mechanism improves performance of LLM inference procedures&lt;/td&gt;&lt;td&gt;459&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;14&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://www.usenix.org/legacy/event/hotcloud10/tech/full_papers/Zaharia.pdf&quot;&gt;Spark: Cluster Computing with Working Sets&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Adding of working sets for MapReduce and interactive analytics using a Dryad-like interface&lt;/td&gt;&lt;td&gt;451&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://www.usenix.org//system/files/conference/hotos15/hotos15-paper-mcsherry.pdf&quot;&gt;Scalability! But at what COST?&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Workshop paper that explains COST—the Configuration that Outperforms a Single Thread—showing that many data parallel systems are either slower than a single threaded solution or have high COST&lt;/td&gt;&lt;td&gt;440&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;16&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Beaver.pdf&quot;&gt;Finding a needle in Haystack: Facebook’s photo storage&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Facebook&#39;s Haystack photo storage system keeps metadata in memory&lt;/td&gt;&lt;td&gt;376&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;17&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://www.usenix.org/system/files/conference/nsdi18/nsdi18-dalton.pdf&quot;&gt;Andromeda: Performance, Isolation, and Velocity at Scale&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Google&#39;s Andromeda cloud network virtualization for isolation and performance&lt;/td&gt;&lt;td&gt;373&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;18&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://www.usenix.org/system/files/sec24summer-prepub-465-xue.pdf&quot;&gt;Fingerprinting Obfuscated Proxy Traffic with Encapsulated TLS Handshakes&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Uncovering obfuscated proxy traffic such is done by Great Firewall of China&lt;/td&gt;&lt;td&gt;373&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;19&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://www.usenix.org/legacy/event/atc10/tech/full_papers/Hunt.pdf&quot;&gt;Zookeeper&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Description of Yahoo&#39;s ZooKeeper system for coordinating distributed services&lt;/td&gt;&lt;td&gt;353&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/atc22-elhemali.pdf&quot;&gt;Amazon DynamoDB&lt;/a&gt;&lt;/td&gt;&lt;td&gt;A fully distributed NoSQL database supporting multiple tenants, limitless tables, predictable and reliable performance&lt;/td&gt;&lt;td&gt;343&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8332&quot; id=&quot;single-column-text-8332&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;At the end of this article, I&#39;ve included Table 2 with the top 100 paper downloads from July 2024. If you attend to the downloads column, you&#39;ll notice that there is a quick dropoff in number of downloads. I graphed the top 3000 downloads against their index numbers, and you can see (Figure 1) just how steeply downloads drop off. When you consider that there are nearly 31 thousand papers represented in the logfiles, this might seem very unfair that a relative handful appear the very popular. I suggest keeping in mind a couple of things: one, that papers about famous software are going to be downloaded more often, and two, that promotion can briefly push a paper to the top of the list.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8333&quot; id=&quot;article-image-8333&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/figure1_7.png&quot; width=&quot;1440&quot; height=&quot;1080&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 1: Download frequency vs paper index; relatively few papers get downloaded often.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8334&quot; id=&quot;single-column-text-8334&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;I produced two lists of the top 100 paper downloads, one from the end of 2023 and the other from July 2024, and only 31 papers are in both lists. In other words, there is a fair amount of churn happening over time.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;I didn&#39;t just look at the top papers either. I skimmed the paper with index number 3000, a workshop paper from &lt;a href=&quot;https://www.usenix.org/legacy/events/hotpar11/tech/final_files/Boehm.pdf&quot; target=&quot;_blank&quot; title=&quot;There are no benign data races&quot;&gt;HotPar&#39;11&lt;/a&gt; by Hans Boehm where he points out that there are no benign data races. A bit obscure, certainly, but still an interesting enough workshop paper.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;One of the last entries in the list was the slide deck from a &lt;a href=&quot;https://www.usenix.org/legacy/event/leet10/tech/slides/nunnery.pdf&quot; target=&quot;_blank&quot; title=&quot;Waledac botnet&quot;&gt;LEET&#39;10 presentation&lt;/a&gt;&amp;nbsp;about botnets. These days, it seems that no one talks about botnets, and looking at the web logs, only crawler bots actually visited this link. Still, I found the slides interesting as the botnot it described was very advanced compared to those from the 90s, with multiple tiers for command and control.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Papers with ten or less downloads, starting almost halfway down the list, are still being downloaded by other than bots. Unless the browser information has been falsified, that LEET presentation mentioned above was just downloaded by three bots, and nothing else.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Finally, there&#39;s the matter of conference popularity and how that affects the papers downloaded. If you go back to the early days of USENIX, there were just two conferences: USENIX Summer and USENIX Winter. All topics were included in those conferences, where the main difference between them, besides the season, is one happened near the East Coast and the other on the West Coast. Starting around 1990, conferences began appearing that covered a particular topic area, like system administration or security—&lt;/span&gt;&amp;nbsp;the first two new conferences. Figure 2 shows the binning of downloads when separated into conference categories.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8335&quot; id=&quot;article-image-8335&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/figure2_4.png&quot; width=&quot;1440&quot; height=&quot;1080&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 2: Downloads binned by conference.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8336&quot; id=&quot;single-column-text-8336&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;Security dwarfs all other categories. If you wonder why this is, just consider that there were over 400 papers at Security&#39;23, and Security&#39;24 has even more. Some conferences, like SRE, have no papers at all, but they do have some presentation slides and all presentations appear on YouTube as videos, data not included in this analysis. LISA had few papers, but one from LISA&#39;98 by Toby Oetiker about RRDTool is often in the top 100.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;I&#39;m closing this brief analysis with Table 2, the top 100 downloads during July 2024. When I compared this list to the one from June, 37 papers were the same. If you are wondering about the outlier,&amp;nbsp;&lt;span&gt;&lt;a href=&quot;https://www.usenix.org/system/files/sec24fall-prepub-93-dossche.pdf&quot; target=&quot;_blank&quot; title=&quot;Inference of Error Specifications and Bug Detection&quot;&gt;Inference of Error Specifications and Bug Detection Using Structural Similarities&lt;/a&gt; by Dossche and Coppens with over 10,000 downloads, I quickly found a posting on X by Winson Tang, referring to this paper.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8337&quot; id=&quot;single-column-text-8337&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Table 2: Top 100 downloads of papers the month of July 2024&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Index&lt;/td&gt;&lt;td&gt;URL&lt;/td&gt;&lt;td&gt;Downloads&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/sec24fall-prepub-93-dossche.pdf&quot;&gt;https://usenix.org/system/files/sec24fall-prepub-93-dossche.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;10060&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/osdi24-chen-haibo.pdf&quot;&gt;https://usenix.org/system/files/osdi24-chen-haibo.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;3225&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/atc24-li-hongyu.pdf&quot;&gt;https://usenix.org/system/files/atc24-li-hongyu.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;2168&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/events/osdi10/tech/full_papers/Xiong.pdf&quot;&gt;https://usenix.org/events/osdi10/tech/full_papers/Xiong.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;841&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/conference/usenixsecurity15/sec15-paper-pellegrino.pdf&quot;&gt;https://usenix.org/conference/usenixsecurity15/sec15-paper-pellegrino.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;684&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/conference/hotstorage18/hotstorage18-paper-raju.pdf&quot;&gt;https://usenix.org/conference/hotstorage18/hotstorage18-paper-raju.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;665&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/conference/usenixsecurity16/sec16_paper_saltaformaggio.pdf&quot;&gt;https://usenix.org/conference/usenixsecurity16/sec16_paper_saltaformaggio.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;545&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/osdi22-yu.pdf&quot;&gt;https://usenix.org/system/files/osdi22-yu.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;523&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/osdi24-sun-xudong.pdf&quot;&gt;https://usenix.org/system/files/osdi24-sun-xudong.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;513&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/conference/nsdi13/nsdi13-final170_update.pdf&quot;&gt;https://usenix.org/conference/nsdi13/nsdi13-final170_update.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;512&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/osdi24-choudhury.pdf&quot;&gt;https://usenix.org/system/files/osdi24-choudhury.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;497&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/conference/osdi16/osdi16-abadi.pdf&quot;&gt;https://usenix.org/conference/osdi16/osdi16-abadi.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;426&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/event/hotcloud10/tech/full_papers/Zaharia.pdf&quot;&gt;https://usenix.org/event/hotcloud10/tech/full_papers/Zaharia.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;390&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;14&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/conference/nsdi12/nsdi12-final138.pdf&quot;&gt;https://usenix.org/conference/nsdi12/nsdi12-final138.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;373&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/sec21-carlini-extracting.pdf&quot;&gt;https://usenix.org/system/files/sec21-carlini-extracting.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;372&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;16&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/event/osdi10/tech/full_papers/Beaver.pdf&quot;&gt;https://usenix.org/event/osdi10/tech/full_papers/Beaver.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;361&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;17&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/osdi24_full_proceedings.pdf&quot;&gt;https://usenix.org/system/files/osdi24_full_proceedings.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;352&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;18&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/osdi24-zhong-yuhong.pdf&quot;&gt;https://usenix.org/system/files/osdi24-zhong-yuhong.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;336&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;19&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/osdi24-skiadopoulos.pdf&quot;&gt;https://usenix.org/system/files/osdi24-skiadopoulos.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;320&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/osdi24-chow.pdf&quot;&gt;https://usenix.org/system/files/osdi24-chow.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;305&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;21&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/events/sec09/tech/full_papers/crosby.pdf&quot;&gt;https://usenix.org/events/sec09/tech/full_papers/crosby.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;302&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/conference/usenixsecurity18/sec18-staicu.pdf&quot;&gt;https://usenix.org/conference/usenixsecurity18/sec18-staicu.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;300&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/conference/nsdi18/nsdi18-dalton.pdf&quot;&gt;https://usenix.org/conference/nsdi18/nsdi18-dalton.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;297&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/conference/hotos15/hotos15-paper-mcsherry.pdf&quot;&gt;https://usenix.org/conference/hotos15/hotos15-paper-mcsherry.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;294&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;25&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/osdi24-lee.pdf&quot;&gt;https://usenix.org/system/files/osdi24-lee.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;294&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;26&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/events/sec03/tech/full_papers/crosby/crosby.pdf&quot;&gt;https://usenix.org/events/sec03/tech/full_papers/crosby/crosby.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;291&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;27&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/conference/usenixsecurity14/sec14-paper-yarom.pdf&quot;&gt;https://usenix.org/conference/usenixsecurity14/sec14-paper-yarom.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;290&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;28&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/conference/usenixsecurity17/sec17-tang.pdf&quot;&gt;https://usenix.org/conference/usenixsecurity17/sec17-tang.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;283&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;29&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/events/sec10/tech/full_papers/Aggarwal.pdf&quot;&gt;https://usenix.org/events/sec10/tech/full_papers/Aggarwal.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;277&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;30&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/login/articles/login_spring17_08_bratus.pdf&quot;&gt;https://usenix.org/system/files/login/articles/login_spring17_08_bratus.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;276&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;31&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/events/sec10/tech/full_papers/Felmetsger.pdf&quot;&gt;https://usenix.org/events/sec10/tech/full_papers/Felmetsger.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;270&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;32&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/sec20-lee-hyeonmin.pdf&quot;&gt;https://usenix.org/system/files/sec20-lee-hyeonmin.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;269&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;33&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/woot20-paper-obermaier.pdf&quot;&gt;https://usenix.org/system/files/woot20-paper-obermaier.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;266&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;34&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/sec20fall_lee_prepub_0.pdf&quot;&gt;https://usenix.org/system/files/sec20fall_lee_prepub_0.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;264&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;35&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/atc22-elhemali.pdf&quot;&gt;https://usenix.org/system/files/atc22-elhemali.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;263&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;36&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/events/fast11/tech/full_papers/Wei.pdf&quot;&gt;https://usenix.org/events/fast11/tech/full_papers/Wei.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;259&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;37&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/sec20fall_reichel_prepub.pdf&quot;&gt;https://usenix.org/system/files/sec20fall_reichel_prepub.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;256&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;38&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/sec19-cidon.pdf&quot;&gt;https://usenix.org/system/files/sec19-cidon.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;254&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;39&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/sec20-oleksenko.pdf&quot;&gt;https://usenix.org/system/files/sec20-oleksenko.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;254&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;40&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/usenixsecurity23-moghimi.pdf&quot;&gt;https://usenix.org/system/files/usenixsecurity23-moghimi.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;254&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;41&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/events/sec01/full_papers/gutmann/gutmann.pdf&quot;&gt;https://usenix.org/events/sec01/full_papers/gutmann/gutmann.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;254&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;42&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/usenixsecurity23-feng.pdf&quot;&gt;https://usenix.org/system/files/usenixsecurity23-feng.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;251&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;43&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/osdi24-sun-hao.pdf&quot;&gt;https://usenix.org/system/files/osdi24-sun-hao.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;248&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;44&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/event/atc10/tech/full_papers/Hunt.pdf&quot;&gt;https://usenix.org/event/atc10/tech/full_papers/Hunt.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;246&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;45&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/conference/usenixsecurity18/sec18-van_schaik.pdf&quot;&gt;https://usenix.org/conference/usenixsecurity18/sec18-van_schaik.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;245&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;46&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/sec21-ragab.pdf&quot;&gt;https://usenix.org/system/files/sec21-ragab.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;243&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;47&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/usenixsecurity23-ayalon.pdf&quot;&gt;https://usenix.org/system/files/usenixsecurity23-ayalon.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;233&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;48&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/conference/atc13/atc13-bronson.pdf&quot;&gt;https://usenix.org/conference/atc13/atc13-bronson.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;232&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;49&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/conference/usenixsecurity17/sec17-antonakakis.pdf&quot;&gt;https://usenix.org/conference/usenixsecurity17/sec17-antonakakis.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;230&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;50&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/sec23fall-prepub-234-wu-mingshi.pdf&quot;&gt;https://usenix.org/system/files/sec23fall-prepub-234-wu-mingshi.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;228&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;51&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/osdi24-shubha.pdf&quot;&gt;https://usenix.org/system/files/osdi24-shubha.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;219&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;52&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/osdi24-zhou.pdf&quot;&gt;https://usenix.org/system/files/osdi24-zhou.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;213&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;53&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/sec23winter-prepub-107-bouhoula.pdf&quot;&gt;https://usenix.org/system/files/sec23winter-prepub-107-bouhoula.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;208&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;54&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/sec21-hoang.pdf&quot;&gt;https://usenix.org/system/files/sec21-hoang.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;205&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;55&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/conference/woot15/woot15-paper-peles.pdf&quot;&gt;https://usenix.org/conference/woot15/woot15-paper-peles.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;200&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;56&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/event/osdi10/tech/full_papers/Peng.pdf&quot;&gt;https://usenix.org/event/osdi10/tech/full_papers/Peng.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;198&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;57&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/nsdi24-jiang-ziheng.pdf&quot;&gt;https://usenix.org/system/files/nsdi24-jiang-ziheng.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;195&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;58&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/osdi24-fu.pdf&quot;&gt;https://usenix.org/system/files/osdi24-fu.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;191&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;59&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/sec23fall-prepub-285_kim-jiwon.pdf&quot;&gt;https://usenix.org/system/files/sec23fall-prepub-285_kim-jiwon.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;188&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;60&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/event/atc10/tech/full_papers/Carroll.pdf&quot;&gt;https://usenix.org/event/atc10/tech/full_papers/Carroll.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;184&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;61&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/nsdi24-hu.pdf&quot;&gt;https://usenix.org/system/files/nsdi24-hu.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;183&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;62&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/atc24-xiong.pdf&quot;&gt;https://usenix.org/system/files/atc24-xiong.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;180&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;63&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/soups2019-busse.pdf&quot;&gt;https://usenix.org/system/files/soups2019-busse.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;178&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;64&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/events/usenix99/provos/provos.pdf&quot;&gt;https://usenix.org/events/usenix99/provos/provos.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;178&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;65&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/sec21-specter-keyforge.pdf&quot;&gt;https://usenix.org/system/files/sec21-specter-keyforge.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;176&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;66&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/sec20-bouwman.pdf&quot;&gt;https://usenix.org/system/files/sec20-bouwman.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;176&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;67&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/osdi24-agrawal.pdf&quot;&gt;https://usenix.org/system/files/osdi24-agrawal.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;174&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;68&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/atc24-ma.pdf&quot;&gt;https://usenix.org/system/files/atc24-ma.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;174&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;69&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/events/usenix05/tech/general/gray/gray.pdf&quot;&gt;https://usenix.org/events/usenix05/tech/general/gray/gray.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;172&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;70&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/nsdi20-paper-agache.pdf&quot;&gt;https://usenix.org/system/files/nsdi20-paper-agache.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;166&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;71&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/conference/usenixsecurity14/sec14-paper-marczak.pdf&quot;&gt;https://usenix.org/conference/usenixsecurity14/sec14-paper-marczak.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;165&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;72&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/sec23winter-prepub-490-jia.pdf&quot;&gt;https://usenix.org/system/files/sec23winter-prepub-490-jia.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;164&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;73&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/osdi18-chen.pdf&quot;&gt;https://usenix.org/system/files/osdi18-chen.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;162&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;74&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/sec24fall-prepub-1998-bocovich.pdf&quot;&gt;https://usenix.org/system/files/sec24fall-prepub-1998-bocovich.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;162&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;75&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/osdi24-ma-haoran.pdf&quot;&gt;https://usenix.org/system/files/osdi24-ma-haoran.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;159&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;76&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/osdi18-moritz.pdf&quot;&gt;https://usenix.org/system/files/osdi18-moritz.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;157&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;77&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/conference/atc17/atc17-hahn.pdf&quot;&gt;https://usenix.org/conference/atc17/atc17-hahn.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;157&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;78&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/osdi24-xiang.pdf&quot;&gt;https://usenix.org/system/files/osdi24-xiang.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;156&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;79&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/conference/hotcloud16/hotcloud16_burns.pdf&quot;&gt;https://usenix.org/conference/hotcloud16/hotcloud16_burns.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;155&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;80&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/woot19-paper_ovadia.pdf&quot;&gt;https://usenix.org/system/files/woot19-paper_ovadia.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;155&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;81&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/events/lisa98/lisa98.pdf&quot;&gt;https://usenix.org/events/lisa98/lisa98.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;155&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;82&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/usenixsecurity23-carlini.pdf&quot;&gt;https://usenix.org/system/files/usenixsecurity23-carlini.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;155&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;83&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/usenixsecurity23-deng-jiangyi-v-cloak.pdf&quot;&gt;https://usenix.org/system/files/usenixsecurity23-deng-jiangyi-v-cloak.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;152&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;84&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/woot19-paper_zhao.pdf&quot;&gt;https://usenix.org/system/files/woot19-paper_zhao.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;151&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;85&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/conference/fast16/fast16-papers-lu.pdf&quot;&gt;https://usenix.org/conference/fast16/fast16-papers-lu.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;149&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;86&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/atc21-chen.pdf&quot;&gt;https://usenix.org/system/files/atc21-chen.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;149&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;87&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/fast21-pan.pdf&quot;&gt;https://usenix.org/system/files/fast21-pan.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;148&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;88&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/event/usenix99/provos/provos.pdf&quot;&gt;https://usenix.org/event/usenix99/provos/provos.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;148&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;89&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/conference/atc12/atc12-final39.pdf&quot;&gt;https://usenix.org/conference/atc12/atc12-final39.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;146&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;90&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/conference/osdi14/osdi14-paper-yuan.pdf&quot;&gt;https://usenix.org/conference/osdi14/osdi14-paper-yuan.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;143&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;91&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/osdi22-zheng-lianmin.pdf&quot;&gt;https://usenix.org/system/files/osdi22-zheng-lianmin.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;142&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;92&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/osdi24-sun-biao.pdf&quot;&gt;https://usenix.org/system/files/osdi24-sun-biao.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;141&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;93&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/osdi24-lazarev_1.pdf&quot;&gt;https://usenix.org/system/files/osdi24-lazarev_1.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;141&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;94&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/osdi24-leblanc.pdf&quot;&gt;https://usenix.org/system/files/osdi24-leblanc.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;140&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;95&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/osdi24-zhong-yinmin.pdf&quot;&gt;https://usenix.org/system/files/osdi24-zhong-yinmin.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;138&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;96&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/sec19-reardon.pdf&quot;&gt;https://usenix.org/system/files/sec19-reardon.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;137&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;97&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/atc24-yuan.pdf&quot;&gt;https://usenix.org/system/files/atc24-yuan.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;137&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;98&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/sec22fall_senol.pdf&quot;&gt;https://usenix.org/system/files/sec22fall_senol.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;135&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;99&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/sec24fall-prepub-2205-fang.pdf&quot;&gt;https://usenix.org/system/files/sec24fall-prepub-2205-fang.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;134&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;100&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://usenix.org/system/files/sec24fall-prepub-1500-yu-zhiyuan.pdf&quot;&gt;https://usenix.org/system/files/sec24fall-prepub-1500-yu-zhiyuan.pdf&lt;/a&gt;&lt;/td&gt;&lt;td&gt;134&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</description><link>https://www.usenix.org/publications/loginonline/analysis-usenix-paper-downloads</link><guid isPermaLink="false">https://www.usenix.org/publications/loginonline/analysis-usenix-paper-downloads</guid><pubDate>Mon, 29 Jul 2024 16:00:00 GMT</pubDate><author>Rik Farrow</author></item><item><title>Consequences of Compliance: The CrowdStrike Outage of 19 July 2024</title><description>&lt;div class=&quot;field field-name-field-lv2-publication-date field-type-datetime field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;date-display-single&quot;&gt;July 29, 2024&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-article-type field-type-taxonomy-term-reference field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Opinion&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-label-inline clearfix field-type-text-long field-pseudo-field field-pseudo-field--author-list&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Authors:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/consequences-compliance-crowdstrike-outage-19-july-2024#Laura%20Nolan&quot; title=&quot;Laura Nolan&quot;&gt;Laura Nolan&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-shepherds field-type-user-reference field-label-inline clearfix&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Article shepherded by:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;usenix-user-reference-names&quot;&gt;Rik Farrow&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraphs-items paragraphs-items-field-lv2-body paragraphs-items-field-lv2-body-full paragraphs-items-full&quot;&gt;
  &lt;div class=&quot;field field-name-field-lv2-body field-type-paragraphs field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8324 paragraphs-first-text&quot; id=&quot;single-column-text-8324&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;The widespread outage that occurred on Friday 19 July as a result of a CrowdStrike configuration push that put Windows machines into a boot loop may well have been the largest digital systems availability incident that the world has ever seen. The event affected airlines, payment systems, hospitals, emergency phone services, and many more. Many people had a very bad day. It is likely some people may have died or suffered lasting harm as a result of the loss of hospital and emergency services capacity.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CrowdStrike posted a description of the event a few days after it occurred [1]. CrowdStrike Falcon Sensor is an&amp;nbsp; EDR (Endpoint Detection and Response) agent, which monitors devices for cybersecurity purposes. An invalid configuration file caused a crash in the CrowdStrike Falcon Sensor code, which runs during the Windows boot process, causing a boot loop. But, as is unfortunately common with such summaries, many questions are left unanswered. In particular, there is no real detail about how CrowdStrike tests changes to their configuration files before they are pushed, how this problem evaded their tests, and there is no discussion of CrowdStrike’s apparent decision to push such changes globally at a single point in time, rather than to use a more progressive rollout mechanism.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;A more gradual rollout would—of course—potentially increase the period of time that CrowdStrike’s customers might be unprotected from a novel attack. Using canarying or other forms of gradual rollout, it can be difficult to catch subtle regressions without a very long rollout duration (multiple hours at least), but severe issues like this one are generally visible quite quickly, within minutes. It is a tradeoff. A short delay can add a significant degree of reliability.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CrowdStrike’s preliminary incident report describes the buggy configuration file as “Rapid Response Content that is designed to respond to the changing threat landscape at operational speed” [1]. Rolling out these changes quickly is a key part of CrowdStrike’s value proposition, and it is normal work for engineers at CrowdStrike. Does CrowdStrike track the speed of such rollouts? Do staff have targets that must be met for getting such updates onto client machines? We may never know the answer to this question, but it would be very interesting to know if staff at CrowdStrike have ever advocated for a more gradual deployment mechanism for these configuration files, and, if so, how that discussion went.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Many readers of &lt;em&gt;;login:&lt;/em&gt; are likely primarily users of various flavours of Unix and may not be fans of Windows. However, those of us in the Linux world should not consider ourselves immune from this kind of event. As Mark Twain said, “history doesn’t repeat itself, but it often rhymes”. From a broad-strokes technical perspective, what happened on Friday wasn’t entirely different to the DataDog outage from March 2023 [2]. In both cases, an automatic update was pushed globally within a short timeframe, resulting in widespread unavailability of machines, and thus, the services that run on them, with an inability for the affected services to automatically recover themselves without significant intervention by operators. In both cases, it is the inability for services to self-heal that exacerbated the severity of the incident, a pattern which is common to most significant outages.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Of course, there are differences, too. Based on their report [2], DataDog seems to have left their “legacy security update channel” (the description of which matches the unattended-upgrade tool [3]) enabled as an oversight, rather than as a conscious decision. CrowdStrike appears to push its configuration updates immediately as a matter of design, and, furthermore, does not give local administrators any control over the timing of application of those configuration updates, and shipping configuration updates quickly is a key part of their value proposition.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The pattern of events that CrowdStrike encountered—a client crashing due to a bad configuration—is not new. I have seen this pattern play out, and I expect most other seasoned software engineers to have seen it. Andy Ellis has described how Akamai encountered a similar issue 20 years ago, and how they solved it with a technique they called crash rejection [9]. Of course, unlike many other professions, there is no agreed-upon body of knowledge for software engineers—we learn on the job, or from stories that other engineers tell us. If there were a standard body of knowledge, crash rejection should certainly be part of it. Lacking that standardised body of knowledge, it becomes difficult to blame engineers for failing to spot the potential for coordinated client failure, without the possibility of recovery.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Good Intentions&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;Of course, nobody at CrowdStrike intended this incident to occur. Nobody goes to work to write code that will make 8.5 million Windows machines inoperative [4], or to push an invalid configuration. People go to work and in general, they do their jobs as well as they can with the time and the resources and the knowledge that they have. I am sure that this is true of the engineers at CrowdStrike. But do those engineers have sufficient support—access to appropriate specialist expertise, dedicated testers, sufficient time to implement things such as static analysis and fuzz testing—to do the quality of work necessary to run their system well? It would not surprise me if CrowdStrike’s issue tracker held several items prior to July 19th that later appeared in their preliminary incident review as planned action items [1].&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Charles Perrow’s incredibly influential book &lt;em&gt;Normal Accidents&lt;/em&gt; [5] is 40 years old today, but the arguments Perrow makes remain relevant. Most people recall that Perrow argues that perfect reliability in complex systems is impossible, because such systems will occasionally exhibit unintended and surprising behaviour. However, Perrow had another thesis: that most accidents are not unpredictable N&lt;em&gt;ormal Accidents&lt;/em&gt;. Most serious accidents are a result of some combination of mismanagement, inadequate resourcing, and production pressure. Examples are numerous but include the Boeing 737 Max crashes [6], the Grenfell Tower fire [7], and the Deepwater Horizon blowout [8].&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;So was this a normal accident or a standard organisational accident? Software is a challenging domain for reliability. We can’t see our software’s internal state directly—we only have the observability that we have the foresight and the time to build in. Software has a lot of dependencies. The state of a digital system can change incredibly fast, before human operators have any hope of understanding and reacting. It’s also a young domain, and we are still building the techniques that allow us to run digital systems more reliably, and, as mentioned previously, we have not yet built a core body of knowledge that software engineers should possess. But still, many software outages (and many security issues) are avoidable and preventable, with sufficient investment, good management, and appropriate expertise—although sustaining these conditions over time, in the face of commercial pressures, is an enormous organisation challenge, at which many organisations have failed.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Regardless of whether the specific incident on July 19th was preventable or a Normal Accident, digital systems are and will remain complex systems with the potential for Normal Accidents. As organisations, and as societies, it would be wise to consider this when designing our systems. Any piece of software (or hardware) is potentially a failure domain. There is value in diversity. At a former employer, we used multiple kinds of routers in our networks, running with different chips, in order to ensure that a router-specific issue could not disable the entire network.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Mono-culture&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;A significant part of the issue on July 19th was that so many organisations in particular sectors, such as aviation and healthcare, were reliant on a single software stack. At the organisational level, it certainly adds cost and effort to run two sets of tools, so that may not make sense for some organisations. But does it make sense for all hospitals in a region to use the same software? Or does this create unnecessary risk, because neighbouring hospitals cannot assist in the event of system downtime? Similar arguments might be made with respect to other key systems, such as emergency telephone services: these seem critical enough to maintain fully-redundant backups. There are very real tradeoffs to be made here between costs and human lives and health.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Another aspect of the failure is that organisations can be remarkably resilient and can often do quite a bit without their usual IT systems. European budget airline Ryanair, for example, used paper manifests to board their planes. Organisations that prepare for these eventualities will be better able to cope when an outage strikes. The best way to understand the impact of the loss of IT systems and what would be needed to cope in their absence is to do drills, in as close to real-world conditions as possible. Drills train your staff in processes to follow in an outage, and, even more crucially, helps your organisation to find problems and gaps and ways to improve emergency plans. This, of course, has a cost in staff time, and potentially a cost in ongoing work, such as keeping printouts of essential data up-to-date.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Cutting staff to the bone, however, reduces resilience. A viral social media post on July 19th featured the plight of a solo DevOps engineer tasked with recovering 2000 servers affected by the issue as quickly as possible. Whether a real story or not, it is certainly the case that having extra colleagues to call upon to resolve major problems is extremely helpful in a crisis. Organisations that choose to run very lean on staff run the risk of extending outages. This is a subtle effect of layoffs that does not become apparent until a crisis occurs.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;One thing that is not likely to be the answer to fixing software availability issues is the knee-jerk creation of regulation. Consider the example of Crowdstrike—its major selling point is that it provides a turn-key solution for customers to use to comply with myriad certification and compliance requirements&lt;/span&gt;—which can be quite burdensome for organisations. The challenge of complying with certification requirements has effectively created a captive market for CrowdStrike and a few other competitors. This has systemic effects. Firstly, it creates centralisation, meaning that one large service having a problem creates many issues downstream. Secondly, it adds complexity to systems because of the addition of agents. This increases the potential for outages, and, paradoxically, even adds some new security risks. Think of the SolarWinds supply-chain attack.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Once an organisation has met a compliance requirement by installing an EDR solution, they may be less likely to consider solutions which do not add so much complexity and risk, such as design of networks into multiple zones, management of user permissions in line with the principle of least privilege, and the use of multi-factor authentication and zero-trust. The issue is that it is much more work to demonstrate the correct implementation of such organisation-specific interventions than it is to purchase and install a turnkey solution which regulators will be satisfied with.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Thanks to&amp;nbsp;&lt;/em&gt;&lt;em&gt;Eric Dobbs,&amp;nbsp;&lt;/em&gt;&lt;em&gt;Josh Kaderlan, and&amp;nbsp;&lt;/em&gt;&lt;em&gt;Alan Kraft&lt;/em&gt;&lt;em&gt;&amp;nbsp;for their thoughtful comments and review.&lt;/em&gt;&lt;/p&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;fieldset class=&quot;group-appendix field-group-fieldset form-wrapper&quot;&gt;&lt;legend&gt;&lt;span class=&quot;fieldset-legend&quot;&gt;Appendix&lt;/span&gt;&lt;/legend&gt;&lt;div class=&quot;fieldset-wrapper&quot;&gt;&lt;div class=&quot;field field-name-field-lvl2-appendix-refs field-type-text field-label-above&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;References:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-1&quot;&gt;&lt;/a&gt;&lt;p&gt;[1] CrowdStrike (204 July 2024). Preliminary Post Incident Review. &lt;a href=&quot;https://www.crowdstrike.com/falcon-content-update-remediation-and-guidance-hub/&quot; target=&quot;_blank&quot; title=&quot;https://www.crowdstrike.com/falcon-content-update-remediation-and-guidance-hub/&quot;&gt;https://www.crowdstrike.com/falcon-content-update-remediation-and-guidance-hub/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-2&quot;&gt;&lt;/a&gt;&lt;p&gt;[2] Lê-Quôc, Alexis (16 May 2023). 2023-03-08 Incident: Infrastructure connectivity issue affecting multiple regions. DataDog Engineering Blog. Accessed 29/07/2024:&lt;a href=&quot;https://www.datadoghq.com/blog/2023-03-08-multiregion-infrastructure-connectivity-issue/&quot; target=&quot;_blank&quot; title=&quot;//www.datadoghq.com/blog/2023-03-08-multiregion-infrastructure-connectivity-issue/&quot;&gt;&amp;nbsp;https://www.datadoghq.com/blog/2023-03-08-multiregion-infrastructure-connectivity-issue/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-3&quot;&gt;&lt;/a&gt;&lt;p&gt;[3] unattended-upgrade man page. &lt;a href=&quot;https://www.unix.com/man-page/linux/8/unattended-upgrade/&quot; target=&quot;_blank&quot; title=&quot;https://www.unix.com/man-page/linux/8/unattended-upgrade/&quot;&gt;https://www.unix.com/man-page/linux/8/unattended-upgrade/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-4&quot;&gt;&lt;/a&gt;&lt;p&gt;[4] Tidy, Joe (20 July 2024). CrowdStrike IT outage affected 8.5 million Windows devices, Microsoft says. BBC. &lt;a href=&quot;https://www.bbc.com/news/articles/cpe3zgznwjno&quot; target=&quot;_blank&quot; title=&quot;https://www.bbc.com/news/articles/cpe3zgznwjno&quot;&gt;https://www.bbc.com/news/articles/cpe3zgznwjno&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-5&quot;&gt;&lt;/a&gt;&lt;p&gt;[5] Perrow, Charles (1999). Normal Accidents: Living With High-Risk Technologies (Princeton University Press).&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-6&quot;&gt;&lt;/a&gt;&lt;p&gt;[6] Robison, Peter (2021). Flying Blind: The 737 Max Tragedy and the Fall of Boeing (Doubleday).&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-7&quot;&gt;&lt;/a&gt;&lt;p&gt;[7] Apps, Peter (2022). Show Me the Bodies: How We Let Grenfell Happen (Oneworld).&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-8&quot;&gt;&lt;/a&gt;&lt;p&gt;[8] Hopkins, Andrew (2012). Disastrous Decisions: The Human and Organisational Causes of the Gulf of Mexico Blowout (CCH).&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-9&quot;&gt;&lt;/a&gt;&lt;p&gt;[9] Andy Ellis (19 July 2024). Twitter post on the topic of crash rejection. h&lt;a href=&quot;https://x.com/csoandy/status/1814252032884146636&quot; target=&quot;_blank&quot; title=&quot;//x.com/csoandy/status/1814252032884146636 &quot;&gt;ttps://x.com/csoandy/status/1814252032884146636&amp;nbsp;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/fieldset&gt;
</description><link>https://www.usenix.org/publications/loginonline/consequences-compliance-crowdstrike-outage-19-july-2024</link><guid isPermaLink="false">https://www.usenix.org/publications/loginonline/consequences-compliance-crowdstrike-outage-19-july-2024</guid><pubDate>Sun, 28 Jul 2024 16:00:00 GMT</pubDate><author>Laura Nolan</author></item><item><title>Fuzzing BusyBox: Leveraging LLM and Crash Reuse for Embedded Bug Unearthing</title><description>&lt;div class=&quot;field field-name-field-lv2-publication-date field-type-datetime field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;date-display-single&quot;&gt;July 16, 2024&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-article-type field-type-taxonomy-term-reference field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Research&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-label-inline clearfix field-type-text-long field-pseudo-field field-pseudo-field--author-list&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Authors:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;a href=&quot;https://www.usenix.org/publications/loginonline/fuzzing-busybox-leveraging-llm-and-crash-reuse-embedded-bug-unearthing#Asmita&quot; title=&quot;Asmita&quot;&gt;Asmita&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/fuzzing-busybox-leveraging-llm-and-crash-reuse-embedded-bug-unearthing#Yaroslav%20Oliinyk&quot; title=&quot;Yaroslav Oliinyk&quot;&gt;Yaroslav Oliinyk&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/fuzzing-busybox-leveraging-llm-and-crash-reuse-embedded-bug-unearthing#Michael%20Scott&quot; title=&quot;Michael Scott&quot;&gt;Michael Scott&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/fuzzing-busybox-leveraging-llm-and-crash-reuse-embedded-bug-unearthing#Ryan%20Tsang&quot; title=&quot;Ryan Tsang&quot;&gt;Ryan Tsang&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/fuzzing-busybox-leveraging-llm-and-crash-reuse-embedded-bug-unearthing#Chongzhou%20Fang&quot; title=&quot;Chongzhou Fang&quot;&gt;Chongzhou Fang&lt;/a&gt;, &lt;a href=&quot;https://www.usenix.org/publications/loginonline/fuzzing-busybox-leveraging-llm-and-crash-reuse-embedded-bug-unearthing#Houman%20Homayoun&quot; title=&quot;Houman Homayoun&quot;&gt;Houman Homayoun&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-lv2-shepherds field-type-user-reference field-label-inline clearfix&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Article shepherded by:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;usenix-user-reference-names&quot;&gt;Rik Farrow&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraphs-items paragraphs-items-field-lv2-body paragraphs-items-field-lv2-body-full paragraphs-items-full&quot;&gt;
  &lt;div class=&quot;field field-name-field-lv2-body field-type-paragraphs field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8183 paragraphs-first-text&quot; id=&quot;single-column-text-8183&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;We explored two techniques for identifying vulnerabilities in embedded software. First, we used a Large Language Model (LLM) to generate initial seeds for fuzz testing, enhancing efficiency. Second, we reused crash data from previous fuzzing sessions to streamline testing on similar binaries. These methods improved coverage and crash detection, making fuzz testing faster and more effective than traditional approaches.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8184&quot; id=&quot;single-column-text-8184&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;There has been a significant increase in the number of IoT (Internet of Things) devices, and there has also been a resulting increase in the number of cyber attacks on these devices. Embedded devices are the core part of the IoT ecosystem with firmware being the main logic governing most aspects of a system’s behavior. Vulnerabilities in the firmware can indirectly impact the whole ecosystem. Firmware can be broadly classified into three categories: those based on modified generic operating systems (OS) like Linux, those based on real-time (RTOS) or custom operating systems, and those that do not have a formal operating system (non-OS or bare-metal). Each of these categories poses distinct challenges when it comes to security assessment [1]&amp;nbsp; and often requires different approaches. To that end, we focus our attention in this work on the largest subclass of OS-based firmware: embedded Linux. &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;As a critical set of commonly used utility programs in embedded Linux, BusyBox is a component of particular interest. It provides over 300 common Unix utilities within a single lightweight and compact executable, making it indispensable for resource-constrained Linux-based embedded devices. There are many IoT and OT (Operational Technology) devices running BusyBox, including remote terminal units (RTUs), human-machine interfaces (HMIs), and many others that are running on Linux. However, despite its many advantages, it can also present considerable risk, as it is often used with elevated privileges and provides multiple utilities that handle user input, which attackers have been able to exploit. 14 vulnerabilities were found in Busybox in 2021, some of which had the potential of remote code execution or denial of service attacks [2]. Despite this, in our investigation we have identified several real-world products that continue to use older versions of BusyBox that contain known vulnerabilities.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Fuzzing is a well-recognized software testing technique for uncovering vulnerabilities, but its effectiveness varies depending on the chosen target (i.e. firmware/software binary under test), each of which can present unique challenges. In this work, we propose and implement two techniques to assist software testing for embedded firmware. First, we leverage LLM-based seed generation, in which we utilize commercial large language models (LLMs) to generate the initial input seeds for mutation-based, coverage-guided fuzzing. In doing so, we take advantage of LLMs’ inherent capability to generate high-quality structured inputs that adhere to the input grammar of a target. Second, we employ a crash reuse strategy to identify crashes across similar binaries present in different embedded devices. This strategy is based on the intuition that an input that triggers a crashing vulnerability on one variant of a program is likely to trigger a crash on a different variant. This allows us to more efficiently determine if the same vulnerability is present on multiple program variants without performing fuzzing, thus saving significant time. When we mention a variant of a software component or similar binaries, we are referring to identical software components with varying version numbers or architectures or compiler optimization, or any custom modification by developers.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;This research was done in collaboration with NetRise’s [3] firmware security division. We sourced BusyBox ELFs from real-world embedded products collected from the company’s proprietary firmware dataset, which had been collected using in-house extraction tools. Figure 1 shows the overall pipeline of the proposed work where we collect crashes using LLM-based seed generation technique, and then reuse the collected crashes to test the new variant of a similar target.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8185&quot; id=&quot;article-image-8185&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/overview.png&quot; width=&quot;1440&quot; height=&quot;785&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 1 : Our work pipeline&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8186&quot; id=&quot;single-column-text-8186&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Leveraging LLM for initial seed generation&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;We evaluated the first technique, LLM-based seed generation, by comparing control runs that used randomly generated initial seeds, to experimental runs that used initial seeds generated using OpenAI’s GPT-4 LLM API. We observed a significant increase in crashes obtained when using LLM-generated seeds, demonstrating the potential for improving vulnerability detection. As a proof-of-concept, we demonstrate these techniques with AFL++ on BusyBox applets ‘awk’, ‘dc’, ‘man’, and ‘ash’.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;There are 2 scenarios under which initial seeds need to be generated: when the target input format is well-defined and/or standardized, and when the input format is loosely-defined or unknown. When the input format is well-defined, as would be the case for well-known programs like some BusyBox applets, we reason that LLM should not require additional training, as it already possesses knowledge of the expected input format through its initial training on the internet. This can also be determined empirically. However, when the input format of the target is ill-defined or unknown, as would be the case for custom communication protocols, LLM requires fine-tuning. In this scenario, LLM needs to be initially trained with known samples to develop an understanding of the expected input format. In the case of the BusyBox applets, we reason that GPT-4 should already be aware of the input format given the applet’s popularity. Hence, we did not apply fine-tuning. We provided the following prompt to guide the seed generation process for awk:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;role&lt;/span&gt;&lt;span&gt;&quot;: &quot;system&quot;, &quot;&lt;/span&gt;&lt;span&gt;content&lt;/span&gt;&lt;span&gt;&quot;: &quot;You are the initial seed generator for a fuzzer that has to fuzz BusyBox awk applet. In response only provide the list of awk scripts&quot;&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;role&lt;/span&gt;&lt;span&gt;&quot;: &quot;user&quot;, &quot;&lt;/span&gt;&lt;span&gt;content&lt;/span&gt;&lt;span&gt;&quot;: &quot;Generate initial seed to fuzz BusyBox awk applet&quot; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;The model responded with a list of commands relevant to the BusyBox awk applet as shown in Figure 2. These commands were then saved as .&lt;strong&gt;awk&lt;/strong&gt; scripts, which were subsequently integrated into the input corpus.&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;The generated corpus via LLM served as the set of initial seeds for the fuzzing process. We used &lt;strong&gt;afl-cmin&lt;/strong&gt; to minimize the input corpus before sending it to the fuzzer, which filters the LLM-generated input corpus to include only the seeds that are useful for fuzzing. &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;We observed that more crashes were identified during fuzzing when the initial seeds were generated by LLM compared to the ones with random seeds. Moreover, a similar pattern was observed in the case of the number of edges found during the fuzzing of each of the targets. Refer to our paper [4] for more insights about the result. Figure 3 shows a Venn diagram depicting the number of unique crashes found in each case and the number of crashes common in both cases. This emphasizes the importance of discovering a more significant number of crashes. When there are more crashes to work with, there are more opportunities to discover different failing execution paths, thereby increasing the likelihood of uncovering vulnerabilities. It&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;underscores this by revealing that more unique crashes were identified when utilizing LLM-generated initial seeds. AFL-Triage [5] was used to identify the unique crashes.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8187&quot; id=&quot;article-image-8187&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/screenshot_2024-06-29_at_8.53.33_am.png&quot; width=&quot;1184&quot; height=&quot;600&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 2 : Generated list of commands w.r.t BusyBox ‘awk’ applet using LLM &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8188&quot; id=&quot;article-image-8188&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/screenshot_2024-06-29_at_9.09.51_am.png&quot; width=&quot;940&quot; height=&quot;640&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 3 : No. of unique crashes  with vs without LLM based initial input seeds. Target : Network controller, Network switch, storage array controller, firewall&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8189&quot; id=&quot;single-column-text-8189&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Crash Reuse&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;Having completed our fuzz testing runs on individual BusyBox targets (i.e. on different versions/variants of BusyBox binaries), we turn our attention to triaging crashes and investigating the potential utility of crash reuse. To recap, we have hypothesized that we can leverage known crashing inputs for a given target to quickly determine if variants of that target contain a similar vulnerability or bug. &lt;em&gt;Crash Reuse&lt;/em&gt; provides advantages including efficiency, and performing blackbox testing. Initially testing the new variant of the target against the consolidated crash database offers the potential for significant time and resource savings. By capitalizing on the crashes identified during previous fuzz testing on similar targets, we can leverage the resources previously expended in fuzzing and accelerate the fuzzer’s coverage exploration by including it in future seeds. Hence, we can potentially identify previously discovered crashes in the new variant without extensive fuzz testing. Moreover, This technique is highly beneficial when conducting blackbox testing on new variants of a previously tested target. It is particularly advantageous in scenarios where the target utilizes accessible or open-source software components, even if further details are unavailable. By fuzzing open-source variants, we can gather crashing inputs to use as high-quality seeds that are likely to identify duplicate vulnerabilities. This is preferable to engaging in resource-intensive binary-only black-box fuzzing, which can be extremely difficult depending on the complexity of the system under test.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;We actively curated a database of crashes obtained from previously fuzzed software components. Then, when we encounter variants of these software components in the future, we leverage the collected crashes to identify potential issues in the new variant under test without fuzzing. This provides us with a rapid initial assessment of the new target, which can later undergo more thorough fuzzing for in-depth inspection. This technique is applicable to any target whose variant has undergone previous fuzzing, and for which we possess a corresponding collection of crashes. After we had amassed a substantial number of crashes from fuzzed BusyBox targets, our total collection amounted to 4540 crashes that likely map to a much smaller place in the binary where the crash happens. Subsequently, we subjected the latest BusyBox version (v1.36.1 at the time of experiment) to testing against all these pre-existing crashes. This endeavor discovered 97 crashes in the latest BusyBox, of which 19 were unique. Later, we conducted traditional fuzzing on the latest BusyBox using AFL++ QEMU mode, with initial seeds generated by LLM over 10 hours. This approach yielded 20 crashes, of which eight were unique. Remarkably, five of these eight unique crashes were also identified using the crash reuse technique. Figure 4&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;presents a graphical comparison of the number of unique crashes discovered using the crash reuse technique versus traditional fuzzing, as well as the common crashes between the two methods. These results underscore the potential utility of crash reuse in software testing. Hence, it can reduce substantial time and resource demands, and is a valuable tool for black box fuzzing when a comprehensive crash database is available.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;Additionally, it is essential to note that not all crashes indicate software bugs. Crashes can occur for various reasons, including invalid inputs, false positives, unreachable code, execution environment factors, platform-specific issues, and other non-bug-related causes. Reaching conclusive determinations often involves meticulous manual triaging, which can be time-consuming and intricate. As such, we limited our scope to identifying crashes, with triaging performed only on a subset of crashes found in the latest BusyBox version, more detail about crash analysis can be found in the paper [4]. However, as previously discussed, the quantity of crashes is a vital metric in fuzzing. A higher number of unique crashes equates to a more extensive array of test scenarios to explore during testing. Consequently, this increases the likelihood of identifying potential software vulnerabilities or bugs.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-article-image paragraphs-item-article-image paragraphs-item-full paragraphs-item-8190&quot; id=&quot;article-image-8190&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-article-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/article_embedded/public/screenshot_2024-06-29_at_9.10.10_am.png&quot; width=&quot;536&quot; height=&quot;438&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-article-image-caption field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Figure 4 : Comparison of number of unique crashes in the latest BusyBox using crash reuse technique vs 10-hours of fuzzing.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8191&quot; id=&quot;single-column-text-8191&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Applicability of proposed techniques&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;The LLM-based technique for generating initial seeds plays a supportive role in the fuzzing process, contributing quality and diverse seeds that enhance fuzzing performance. However, it is crucial to note that this technique alone is not the sole factor influencing the overall outcome. Various associated factors, contingent upon the specific target, must be considered. The effectiveness is contingent upon the target type and the extent to which the initially provided diverse inputs contribute to code coverage. The primary function of LLM in this proposed technique is to assist in producing high-quality and diversified initial seeds, thereby potentially enhancing fuzzing performance. The seed generation using LLM requires initial manual intervention to validate if the generated seeds align with the target’s requirements. In the case of a new target initially unknown to LLM, model training is essential for the target-specific seed format. However, this represents an initial, one-time effort; once the model learns the required seed format, it expedites the generation of diverse seeds suitable as potential initial seeds for fuzzing. Thus, we can leverage the knowledge base of LLM models, or train these models according to different target requirements. Therefore, this technique is not restricted to the BusyBox and can be adapted for use with different targets.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Similarly, the crash reuse technique proposed can be extended to various software components across different targets. The technique isn’t limited to a particular target but applies universally. It can be employed in any scenario where we have previously gathered crash data by fuzzing a target and aim to test the variant of that target by reusing those crashes. The primary goal is to convey that the crash reuse technique could be beneficial for the initial screening of a new variant of a software component without spending hours on fuzzing. However, this technique may not uncover all the vulnerabilities requiring fuzzing for a thorough analysis.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8192&quot; id=&quot;single-column-text-8192&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Conclusion&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;In our pursuit to enhance existing software testing methodologies, we emphasize the significance of our proposed techniques, particularly within the context of embedded systems. Firmware in embedded systems often consists of numerous third-party software components with custom implementations and unique input types, making it predominantly a black-box testing scenario. The techniques introduced in this work, namely leveraging LLM for initial seed generation and crash reuse, have exhibited promising outcomes that can significantly aid software testing efforts. While these techniques can be adapted for various targets, we have used them to analyze BusyBox for the proof of concept.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Nevertheless, it is essential to acknowledge certain limitations and challenges associated with these approaches. Utilizing LLM for initial seed generation may necessitate a significant initial effort, mainly when dealing with different targets, especially in the complex domain of embedded systems where a wide array of hardware protocols and custom input patterns are encountered. Furthermore, while the crash reuse technique represents a valuable first pass phase, it may not consistently identify all bugs, especially zero-day vulnerabilities. Hence, a traditional fuzzing technique remains a necessary complement for comprehensive testing. The crash reuse method primarily assists in determining whether previously identified crashes are applicable to a new target but does not guarantee the discovery of all potential bugs. However, while there are particular challenges and limitations, substantial research potential exists for harnessing these techniques to enhance and assist software testing endeavors. These approaches hold promise for improving the efficiency and effectiveness of testing procedures, particularly in the context of embedded systems and firmware analysis.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;div class=&quot;paragraphs-item paragraphs-item-single-column-text paragraphs-item-single-column-text paragraphs-item-full paragraphs-item-8193&quot; id=&quot;single-column-text-8193&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
    &lt;div class=&quot;field field-name-field-single-column-sub field-type-text field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;Acknowledgements&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-single-column-text field-type-text-long field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;We would like to acknowledge the NetRise[3] team for providing us with a real-world embedded firmware database and cloud resources to perform a part of these experiments. We would also like to thank NSF CHEST for funding this project &lt;/span&gt;&lt;span&gt;(Project # 1916741 industry funding)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;field field-name-field-lv2-pdf field-type-file field-label-hidden&quot;&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;span class=&quot;file&quot;&gt;&lt;img class=&quot;file-icon&quot; alt=&quot;PDF icon&quot; title=&quot;application/pdf&quot; src=&quot;https://www.usenix.org/core/modules/file/icons/application-pdf.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; &lt;a href=&quot;https://www.usenix.org/sites/default/files/fuzzingbusybox-article_0.pdf&quot; type=&quot;application/pdf; length=742949&quot; title=&quot;fuzzingbusybox-article.pdf&quot;&gt;Download PDF&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;fieldset class=&quot;group-appendix field-group-fieldset form-wrapper&quot;&gt;&lt;legend&gt;&lt;span class=&quot;fieldset-legend&quot;&gt;Appendix&lt;/span&gt;&lt;/legend&gt;&lt;div class=&quot;fieldset-wrapper&quot;&gt;&lt;div class=&quot;field field-name-field-lvl2-appendix-refs field-type-text field-label-above&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;References:&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;field-items field-items&quot;&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-1&quot;&gt;&lt;/a&gt;&lt;p&gt;[1] Marius Muench, Jan Stijohann, Frank Kargl, Aurelien Francillon, and Davide Balzarotti. What you corrupt is not what you crash: Challenges in fuzzing embedded devices. In Proceedings 2018 Network and Distributed System Security Symposium, San Diego, CA, 2018. Internet Society.&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-2&quot;&gt;&lt;/a&gt;&lt;p&gt;&amp;nbsp;[2] Lucian Constantin. BusyBox flaws highlight need for consistent IoT updates, September 2021.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-3&quot;&gt;&lt;/a&gt;&lt;p&gt;[3] netrise.io. Netrise | firmware security.&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-4&quot;&gt;&lt;/a&gt;&lt;p&gt;&amp;nbsp;[4] Asmita, Yaroslav Oliinyk, Michael Scott, Ryan Tsang, Chongzhou Fang, and Houman Homayoun. Fuzzing BusyBox: Leveraging LLM and Crash Reuse for Embedded Bug Unearthing. Usenix Security 2024 - &lt;a href=&quot;https://www.usenix.org/conference/usenixsecurity24/presentation/asmita&quot;&gt;Link&lt;/a&gt;&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a class=&quot;anchor&quot; name=&quot;reference-5&quot;&gt;&lt;/a&gt;&lt;p&gt;[5] Grant Hernandez. AFLTriage.&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/fieldset&gt;
</description><link>https://www.usenix.org/publications/loginonline/fuzzing-busybox-leveraging-llm-and-crash-reuse-embedded-bug-unearthing</link><guid isPermaLink="false">https://www.usenix.org/publications/loginonline/fuzzing-busybox-leveraging-llm-and-crash-reuse-embedded-bug-unearthing</guid><pubDate>Mon, 15 Jul 2024 16:00:00 GMT</pubDate><author>Asmita, Yaroslav Oliinyk, Michael Scott, Ryan Tsang, Chongzhou Fang, Houman Homayoun</author></item></channel></rss>