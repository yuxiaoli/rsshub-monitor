<?xml version="1.0" encoding="UTF-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>UNTAG</title><link>https://utgd.net</link><atom:link href="http://rsshub.isrss.com/utgd/timeline" rel="self" type="application/rss+xml"></atom:link><description>UNTAG - Powered by RSSHub</description><generator>RSSHub</generator><webMaster>contact@rsshub.app (RSSHub)</webMaster><language>en</language><lastBuildDate>Tue, 25 Mar 2025 00:49:20 GMT</lastBuildDate><ttl>5</ttl><item><title>分化：工具选择的一种可行模式</title><description>&lt;img src=&quot;https://cdn.utgd.net/images/banner_tools_DmsOzeh.jpeg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;   &lt;br&gt;UNTAG Premium   &lt;p&gt;“大一统”和“小而美”是工具——特别是软件——讨论中的一对热门概念。可惜因为种种历史原因，&lt;a href=&quot;https://www.youtube.com/watch?v=WSMFnJnY7EA&quot;&gt;大一统基本和“国产”划上等号&lt;/a&gt;，国内的严肃讨论者往往羞于推崇前者，躲进讨论小众软件的避风港。这实际上阻碍了工具讨论。&lt;/p&gt;
&lt;p&gt;奇怪的是，包括我在内，许多崇尚小而美之器的人士，不可避免地装了各种大型软件。通常，一句“dirty work，迫不得已”也就糊弄过去了。但本文不愿止步于此。如果能够往后退一步，在更长的时间跨度中观察工具变迁，我们将发现一种不必非此即彼、非黑即白的工具选择模式：&lt;strong&gt;分化&lt;/strong&gt;。这种模式就像雕塑或者绘画，你先凿出粗略轮廓，或者勾勒大致外形，然后慢慢添加细节。工具的选择也可以如此，一开始你可能会买个多功能工具或装一个大型软件凑合用，随着任务逐渐明确，再购添加买更专用的工具。&lt;/p&gt;
&lt;p&gt;碰巧，瑞士军刀和中华菜刀恰好可以代表两种典型的分化模式，并且在软件世界中也能找到对应的情况，从前面这些物理世界的工具切入，可以暂时避开软件圈子中的利益纠葛，减少讨论阻力。本文也尝试一种分化的写作方式，抛砖引玉，勾勒出分化模式的大致外形，留下的空间，还望读者不吝赐教。&lt;/p&gt;
&lt;h2&gt;两种经典的分化模式&lt;/h2&gt;
&lt;p&gt;分化是一个抽象说法，而角度不同，自然看到找到各种细分模式。本文取瑞士军刀和中华菜刀（tou）两种典型的多功能工具，尝试分析两种最常见的工具分化模式。&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://cdn.utgd.net/assets/uploads/2022/00/minja-1212164823.jpeg&quot; alt=&quot;Alt text&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
    &lt;figcaption&gt;Leatherman Charge TTi vs 一堆小工具&lt;/figcaption&gt;
&lt;/figure&gt; </description><link>https://utgd.net/article/21093</link><guid isPermaLink="false">https://utgd.net/article/21093</guid><pubDate>Mon, 24 Mar 2025 10:00:00 GMT</pubDate><category>UNTAG Premium</category><category>观点</category><category>效率思维</category><category>硬件</category></item><item><title>离职谈话的陷阱</title><description>&lt;img src=&quot;https://cdn.utgd.net/images/%E7%A6%BB%E8%81%8C%E8%B0%88%E8%AF%9D%E7%9A%84%E9%99%B7%E9%98%B1.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;    &lt;p&gt;&lt;a href=&quot;https://jacobian.org/2022/apr/4/exit-interviews-are-a-trap/&quot;&gt;🔗 原文链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你正在离职，突然收到一封“离职面谈”邀请，你会选择敞开心扉说出自己的离职原因吗？&lt;/p&gt;
&lt;p&gt;千万别！&lt;/p&gt;
&lt;p&gt;把离职面谈是一场“胜率极低的赌博”——你几乎赢不了，但可能输得很惨。&lt;/p&gt;
&lt;p&gt;为什么？&lt;/p&gt;
&lt;p&gt;假设你离职时憋了一肚子火：老板太烂、同事难搞、食堂难吃……这时候如果选择在面谈中说实话，最理想的结果是什么？公司痛改前非？&lt;/p&gt;
&lt;p&gt;醒醒吧！我们离职的往往是因为长期问题，而这些问题公司早就知道却懒得解决。比如某个讨厌的同事，所有人都知道他是个祸害，但人家是CEO的侄子；再比如食堂问题，HR可能早就被投诉到耳朵起茧子了。就算你的吐槽真能推动改变（概率堪比中彩票），好处也落不到已经离职的你头上。&lt;/p&gt;
&lt;p&gt;但风险可就大了去了！轻则被记仇、不给你写推荐信，重则被行业里传闲话，甚至有人遇到过前东家打电话给新公司造谣说你“因为诈骗被开除”。&lt;/p&gt;
&lt;p&gt;职场新人是最容易被坑的，而如果你在第一份工作就得罪了上司，接下来的求职路可能步步踩雷。&lt;/p&gt;
&lt;p&gt;那么应该如何应对？&lt;/p&gt;
&lt;p&gt;能躲就躲！躲开是最佳办法。比如假装日程冲突，拖到离职当天再哭诉“哎呀实在没时间”。&lt;/p&gt;
&lt;p&gt;实在躲不过的话，记住三字诀——装、糊、忍。问离职原因？就说“遇到了更好的机会”；要提建议？回“暂时想不到”；被逼着评价某同事？来一句万能话术：“我对TA没有任何负面评价”。&lt;/p&gt;
&lt;p&gt;哪怕HR举着20个问题的清单逼问，你也得忍住掏心窝子的冲动，毕竟面谈室里的每一秒尴尬，都比未来被穿小鞋强。&lt;/p&gt;
&lt;p&gt;不过凡事都有例外，当你到了某个 level，也可以在离职的时候尽情输出。原文作者 Jacob 有20年职场资历可以不靠推荐信、行业人脉能随时戳破不实的诽谤和谣言、新工作已经确认根本不慌，再加上和前团队信任度拉满，这才打破惯例输出了一把。&lt;/p&gt;
&lt;p&gt;但结果呢？老板客气听完……然后一切照旧。用他的话说：“你以为自己是投下真理炸弹的孤胆英雄？醒醒，公司连爆炸声都懒得听！”&lt;/p&gt;
 </description><link>https://utgd.net/article/21091</link><guid isPermaLink="false">https://utgd.net/article/21091</guid><pubDate>Fri, 21 Mar 2025 02:00:00 GMT</pubDate><category>每周消息</category><category>职场</category></item><item><title>Notion 官方推出 Notion 风格头像编辑器</title><description>&lt;img src=&quot;https://cdn.utgd.net/images/Snipaste_2025-03-16_21-36-07.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;    &lt;p&gt;我们曾经介绍过几款第三方的 Notion 风格头像编辑器——《&lt;a href=&quot;https://utgd.net/article/20425&quot;&gt;三款在线工具，快速设计 Notion 风格的头像&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;如今 Notion 官方推出了一个头像编辑器 Notion 脸谱，提供了非常丰富的选项和组合，且保持了较高的审美。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.notion.com/faces&quot;&gt;🔗 Notion 脸谱 | 头像编辑器&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果懒得组合，也可以不断地点击随机按钮找一个合适的。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://cdn.utgd.net/assets/uploads/2025/03/436d5e42cca83acfebcd716d0d013221.png&quot; alt=&quot;
&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;figcaption&gt;
&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;在我试用后发现，其他选项尤其是头发的选项非常多，可以决定整个头像的风格。就是脸型只有一种圆脸且不能调整。&lt;/p&gt;
&lt;p&gt;这一点从 Notion 提供的示例中也可以看出来，我猜测，也许是因为加入其他脸型不能完美适配那么多的其他元素。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://cdn.utgd.net/assets/uploads/2025/03/3bd23eef5e0e04294ac057b11094b70e.png&quot; alt=&quot;
&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;figcaption&gt;
&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;官方编辑器在风格一致性上保持了高度统一。如果你不断点击“随机”按钮，也许会出现一些搞怪的五官组合，但在设计上不会让人觉得“丑”。这是难能可贵的。&lt;/p&gt;
 </description><link>https://utgd.net/article/21092</link><guid isPermaLink="false">https://utgd.net/article/21092</guid><pubDate>Thu, 20 Mar 2025 10:00:00 GMT</pubDate><category>方法</category><category>生成工具</category></item><item><title>2024 年主动管理型共同基金还是跑不赢指数基金</title><description>&lt;img src=&quot;https://cdn.utgd.net/images/2024_%E5%B9%B4%E4%B8%BB%E5%8A%A8%E7%AE%A1%E7%90%86%E5%9E%8B%E5%85%B1%E5%90%8C%E5%9F%BA%E9%87%91%E8%BF%98%E6%98%AF%E8%B7%91%E4%B8%8D%E8%B5%A2%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;    &lt;p&gt;&lt;a href=&quot;https://www.latimes.com/business/story/2025-03-06/the-results-are-in-during-2024-actively-managed-mutual-funds-again-stank&quot;&gt;🔗 原文链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于普通投资者来说，股市投资有两条主要道路：主动管理型共同基金（由基金经理挑选股票）和被动管理型指数基金（简单复制市场指数）。从长期数据来看，&lt;strong&gt;指数基金的表现几乎一直优于主动管理基金&lt;/strong&gt;，这也是本文最核心的观点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2024年，65% 的美国大盘股主动管理基金未能跑赢标普500指数&lt;/strong&gt;，表现比2023年（60%）更差，甚至比过去25年的平均水平还低。而这一趋势并非新鲜事，指数基金自 1970 年代约翰·博格（John Bogle）推广以来，始终在业绩上领先主动管理基金。投资者也用资金投票，截至 2023 年底，指数基金的总资产达 &lt;strong&gt;13.29 万亿美元&lt;/strong&gt;，正式超过主动管理基金的 &lt;strong&gt;13.23 万亿美元&lt;/strong&gt;，成为市场主流。而在 1993 年，主动基金的资产规模为 &lt;strong&gt;1.25 万亿美元&lt;/strong&gt;，指数基金仅 &lt;strong&gt;210 亿美元&lt;/strong&gt;——短短三十年，市场格局已彻底改变。&lt;/p&gt;
&lt;p&gt;指数投资的优势很明显：&lt;strong&gt;长期回报更高、交易成本和税负更低、投资方式更简单&lt;/strong&gt;，并能避免普通投资者因情绪波动导致的投资错误。相比之下，主动管理基金的投资者往往在市场高点入场、低点离场，违背了“低买高卖”的原则。比如，如果有人在 &lt;strong&gt;2021 年初买入标准普尔500指数基金并持有至 2024 年底，年均回报为 13.6%&lt;/strong&gt;，相当于每 1 美元增长至 1.67 美元。而反观 2021 年的 GameStop 热潮，许多跟风者的投资在数日内亏损高达 &lt;strong&gt;90%&lt;/strong&gt;，到 2024 年底仍亏 &lt;strong&gt;60%&lt;/strong&gt;，投资 1 美元最后只剩 40 美分。&lt;/p&gt;
&lt;p&gt;当然，指数基金的流行也引发了新的争议。批评者担心，指数基金让市场投资权力过度集中，特别是 &lt;strong&gt;贝莱德（BlackRock）、先锋（Vanguard）和道富（State Street）三大基金公司&lt;/strong&gt;，它们合计成为 &lt;strong&gt;美国 250 家最大上市公司的最大股东&lt;/strong&gt;，并控制了 &lt;strong&gt;20.1% 的股份&lt;/strong&gt;。这种市场主导地位引发了监管者和学者的关注，部分观点认为，这可能导致市场竞争降低。此外，部分保守派人士批评指数基金管理公司推行 ESG（环境、社会责任和公司治理）理念，认为这与投资目标无关。但无论如何，普通投资者对指数基金的偏爱依然稳固。&lt;/p&gt;
&lt;p&gt;毕竟，对于大多数没有时间研究个股的投资者来说，他们可以选择信任主动基金经理，或者更简单地选择指数基金。而历史数据告诉我们，&lt;strong&gt;指数基金往往才是更聪明的选择&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“投资应该是无聊的，就像看油漆变干或草生长。如果想要刺激，那就拿 800 美元去拉斯维加斯。”——保罗·萨缪尔森（Paul Samuelson）&lt;/p&gt;
&lt;/blockquote&gt;
 </description><link>https://utgd.net/article/21090</link><guid isPermaLink="false">https://utgd.net/article/21090</guid><pubDate>Wed, 19 Mar 2025 02:00:00 GMT</pubDate><category>每周消息</category><category>数据</category></item><item><title>挖掘 LaunchBar 隐藏的聚合搜索功能</title><description>&lt;img src=&quot;https://cdn.utgd.net/images/banner_lb_multisearch.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;   &lt;br&gt;UNTAG Premium   &lt;p&gt;任何讲究的读者都不会满足于“百度一下”——or Google it，up to you——而信息源散落于网络各处，顺其自然，各类一次性搜索多个网站的工具应运而生。浏览器中早已有种种右键聚合搜索插件，我也曾为 macOS 上的主流自动化工具设计过一系列&lt;a href=&quot;https://utgd.net/article/20591/&quot;&gt;聚合搜索动作&lt;/a&gt;，不过，如果你的搜索模板足够多，想必已经遇到了管理难题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个常用的搜索模板，是单独使用，还是放在模板簇中？&lt;/li&gt;
&lt;li&gt;如果有很多组模板簇，一个既可以属于A也可以属于B的搜索模板，该如何管理？&lt;/li&gt;
&lt;li&gt;如果一个模板同时出现在多个模板簇中，日后更新 URL 时还要记得修改多处……&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我从事律师工作，也常常举棋不定。试看下面三个模板簇：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;写报告时常用：中国知网、中国哲学数据库、法信、北大法宝……&lt;/li&gt;
&lt;li&gt;做尽职调查时常用：天眼查、企查查、人民法院案例库、强制执行信息网……&lt;/li&gt;
&lt;li&gt;找案例时常用：法信、北大法宝、天眼查、企查查、人民法院案例库、强制执行信息网、某自购数据库、斯坦福法学院[^1]、中国—东盟法律研究中心……&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;font color=&quot;#008000&quot;&gt;注：我在实际工作中采用了大量付费服务和自建服务，不宜展示，故本文截图有所节略，和文字部分并不完全匹配。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;第一簇搜索模板和第三簇有所重叠，而第二簇更是完全属于第三簇。实际上，传统的排他性文件夹设计和真实工作完全不兼容，现实世界中，我往往流转于写报告、做尽调、找案例、查财产线索、分析股权架构等各类工作之间，每次用到的搜索模板都有所交叠。我逐渐意识到，需要一种&lt;strong&gt;非排他性&lt;/strong&gt;的搜索模板管理方式。&lt;/p&gt;
&lt;p&gt;一种经典思路是引入标签——一种几乎已经和文件夹成为二元对立的管理方式——恭喜你，你想到了一个很好的创业方向，只要再塞几个人工智能搜索 URL 进去，就可以哄骗投资人了。我对这种高射炮打蚊子的做法毫无兴趣。相反，我在自动化工具 LaunchBar 中发现了更简捷的路径：它默认可以一次性调用多个搜索模板（只需手动点击多选），而搜索模板又可借助 LaunchBar 的算法精准过滤。&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://cdn.utgd.net/assets/uploads/2022/00/minja-1030095812.png&quot; alt=&quot;Alt text&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
    &lt;figcaption&gt;LaunchBar 原生支持同时调用多个搜索模板&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;在此基础上，完全可以放弃文件夹或标签，依托&lt;strong&gt;层级编码&lt;/strong&gt;组织搜索模板。&lt;/p&gt;
 </description><link>https://utgd.net/article/21088</link><guid isPermaLink="false">https://utgd.net/article/21088</guid><pubDate>Tue, 18 Mar 2025 10:00:00 GMT</pubDate><category>UNTAG Premium</category><category>方法</category><category>LaunchBar</category><category>搜索</category><category>搜索工具</category></item><item><title>低技术，高烹饪（一）：排查单点故障</title><description>&lt;img src=&quot;https://cdn.utgd.net/images/banner_f000_01.jpeg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;    &lt;p&gt;&lt;font color=&quot;#008000&quot;&gt;烹饪很有趣，惜乎网上关于烹饪的文章和视频虽如过江之鲫。多数作品却没有解决最大的难题：如何让一个人迈出第一步？管见以为，恰恰是过于内卷的作品——越来越昂贵的食材、越来越花哨的手法、越来越尖端的设备和动辄硕士博士起步的人设——抬高了新手的门槛。吾辈作为局外人，毫无竞争之意，也无流量之忧，遂作本系列文章，试求取道低技术，重新解构烹饪。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;在多数烹饪网站或美食博主个人主页上，技巧合集的点击率总是靠前。但我对这类体裁兴趣不大，盖一百个技巧中，可能过半根本无法效仿，要么所涉食材难以取得，例如只能依赖进口的帕玛森奶酪&lt;a href=&quot;https://utgd.net/article/%E8%BF%99%E7%B1%BB%E4%BA%A7%E5%93%81%E5%BE%88%E6%B3%A8%E9%87%8D%E4%BA%A7%E5%9C%B0%EF%BC%8C%E5%8D%B3%E4%BE%BF%E6%98%AF%E9%9A%94%E5%A3%81%E4%BA%A7%E5%8C%BA%E7%94%A8%E5%90%8C%E7%A7%8D%E6%89%8B%E6%B3%95%E3%80%81%E5%90%8C%E7%B1%BB%E5%8E%9F%E6%96%99%E7%94%9F%E4%BA%A7%E7%9A%84%E5%A5%B6%E9%85%AA%EF%BC%8C%E6%A0%B9%E6%8D%AE%E6%B3%95%E5%BE%8B%E4%B9%9F%E4%B8%8D%E8%83%BD%E6%BB%A5%E7%94%A8%E5%95%86%E6%A0%87%E3%80%82%E5%B0%B1%E5%B8%95%E7%8E%9B%E6%A3%AE%E5%A5%B6%E9%85%AA%E8%80%8C%E8%A8%80%EF%BC%8C%E5%9B%BD%E5%86%85%E6%A0%B9%E6%9C%AC%E6%B2%A1%E6%9C%89%E6%9B%BF%E4%BB%A3%E5%93%81%E2%80%94%E2%80%94%E5%BD%93%E7%84%B6%EF%BC%8C%E8%BF%99%E6%98%AF%E6%96%87%E5%8C%96%E9%97%AE%E9%A2%98%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E6%88%91%E4%BB%AC%E7%94%9F%E4%BA%A7%E4%B8%8D%E4%BA%86%EF%BC%8C%E4%BD%95%E5%86%B5%E6%9C%AC%E6%9D%A5%E4%B9%9F%E5%B0%B1%E6%B2%A1%E6%9C%89%E5%A4%9A%E5%A4%A7%E7%9A%84%E5%B8%82%E5%9C%BA%E3%80%82&quot;&gt;^1&lt;/a&gt;，或一时间洛阳纸贵的橄榄油；要么所用手法无法效仿，例如动辄宽油预处理的中式炒菜。&lt;/p&gt;
&lt;p&gt;上述观察给了我两条线索：第一，貌似大杂烩的烹饪巧合，是否也可以遵循某一条（或几条）线路，不至于耐着性子看完视频，却发现大多数对自己没有意义？第二，对我暂无用处的技巧，本身就暗示了烹饪中的一类大问题：&lt;strong&gt;单点故障&lt;/strong&gt;。两条线索交汇之下，遂有本文。&lt;/p&gt;
&lt;p&gt;**单点故障（Single Point of Failure）**是一个常见的工程术语，通常指那些会导致整个系统歇业罢工的小小节点。烹饪多多少少可以看作一场工程，而那些很难对付的食材和手法，就像是烹饪工程中的故障点，很多新手的挫败感，也来源于这些单点。&lt;/p&gt;
&lt;p&gt;在工程管理中，处理单点故障的方法很多，最聪明的往往不是加固，而是消除或避开它们。类似的，除了砸钱海淘进口食材或购置厨房电器，也有很多处理烹饪单点的低技术思路，即反思特殊食材或手法的原理，并尝试绕开它们或者寻找替代品。&lt;/p&gt;
&lt;p&gt;让我们开始这场烹饪工程解构之旅。&lt;/p&gt;
&lt;h2&gt;食材单点：希腊酸奶&lt;/h2&gt;
&lt;p&gt;2024年的现象级网红食品——希腊酸奶，是思考烹饪单点的好切口。&lt;/p&gt;
&lt;p&gt;在三明治、汉堡、热狗乃至任何西洋肉夹馍中，大概都少不了蛋黄酱，但自从发现这玩意儿是热量核弹后，连最痴迷于此的日本人都开始寻找替代品。通常，我们会听到一个如雷贯耳的名字：希腊酸奶。&lt;/p&gt;
&lt;p&gt;国内买到的希腊酸奶和希腊基本没有关系，特别是那些小作坊——你也可以在家制作，问问 GPT 吧——凡是又稠又厚像胶水一样的玩意儿，基本都会被贴上希腊酸奶的标签。且不管正宗与否，这些（伪装 ）希腊酸奶乳香浓厚，关键是比蛋黄酱还黏糊，确实是理想的健康酱汁。&lt;/p&gt;
&lt;p&gt;——除了一件事：非常贵。基本上，小包装的希腊酸奶可以买到每百克十元以上，轻轻松松就能把一份鸡蛋蔬菜三明治的成本提升10倍，而且保质期只有几天，买了吃不完，要用的时候往往又没有，无形中拉高了成本。这是烹饪单点的一个典型例子。（我在国外旅居时，类似的东西折合人民币不过三四块钱一杯，可见舶来品是造成单点的原因之一。）&lt;/p&gt;
&lt;p&gt;如果抓住&lt;strong&gt;奶香&lt;/strong&gt;和&lt;strong&gt;粘稠&lt;/strong&gt;两个特点，希腊酸奶的廉价替代品其实不少，例如更容易买到的酸奶油，或者一种极具异域风情的奶制品：&lt;strong&gt;莱巴奶（Labneh）&lt;/strong&gt;。我在义乌出差期间，大啖中东美食（当地与中东贸易甚紧），碰巧吃过这种咸味酸奶，对于本就吃不出西方乳制品微妙区别的国人来说，大概等于加了一勺盐的希腊酸奶（所以不要再另外加盐了）。Serious Eats 上就有作者&lt;a href=&quot;https://www.seriouseats.com/labneh-tuna-salad-recipe-8765207&quot;&gt;用莱巴奶代替蛋黄酱&lt;/a&gt;，我试着做过，甚至好过蛋黄酱版或希腊酸奶版（途中的酱汁偏黄，因为加了伍斯特郡酱）。&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://cdn.utgd.net/assets/uploads/2022/00/minja-0214113820.jpeg&quot; alt=&quot;Alt text&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
    &lt;figcaption&gt;用莱巴奶代替蛋黄酱制作的三明治&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;仅仅只看单价，莱巴奶也比最便宜的希腊酸奶还实惠，但更关键的是其保质期：可保存半年到一年（视品牌而有所不同），打开后也能在冰箱里搁好几天，随取随用。当然，除了做三明治，任何你想用（但舍不得用）希腊酸奶之处，都可以试试莱巴奶，比如腌制鸡块，或者代替黄油鸡里剂量说出来骇人听闻的黄油。&lt;/p&gt;
&lt;p&gt;希腊酸奶是个经典例子，从中至少可以发现食材类烹饪单点的两个特征：本身贵，或因为进口而溢价，但缺了它，一道菜又不完整，或者根本无法下咽（你试试干吃沙拉里面的叶子？），不宜直接省略，此其一；储存难，保质期短，间接抬高成本。顺着这两条初步线索，我们可以找到很多类似的烹饪故障点。&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;#008000&quot;&gt;注意，莱巴奶不是“涂抹奶酪”，不含卡拉胶、琼脂、再制干酪等“科技”。&lt;/font&gt;&lt;/p&gt;
&lt;h2&gt;食材单点：橄榄油&lt;/h2&gt;
&lt;p&gt;橄榄油是另一个高价单点的例子，尤其是近两年，不知是天灾还是人祸，进口橄榄油价格飙升。我记得以前花50块钱就能买到一小瓶特级初榨橄榄油，还经常有促销，可现在基本都要三位数以上，毫不夸张地说，一份简简单单的夏季蔬菜意大利面（一根肉丝都没有的那种，例如 &lt;a href=&quot;https://www.seriouseats.com/sicilian-style-pasta-with-eggplant-tomatoes-ricotta-salata-pasta-alla-norma-recipe&quot;&gt;Pasta Alla Norma&lt;/a&gt;），就因为那两勺橄榄油，成本可能要加个零。&lt;/p&gt;
&lt;p&gt;事实上，橄榄油也有很多替代品。英国卫报就推荐过&lt;a href=&quot;https://www.theguardian.com/food/article/2024/jun/13/liquid-gold-olive-oil-is-soaring-in-price-heres-what-to-use-instead-in-10-classic-dishes&quot;&gt;一系列平替&lt;/a&gt;，连最讲究吃的英国人&lt;a href=&quot;https://utgd.net/article/%E7%9C%9F%E7%9A%84%E4%B8%8D%E6%98%AF%E6%98%8E%E8%A4%92%E6%9A%97%E8%B4%AC%E3%80%82%E9%A1%B6%E7%BA%A7%E5%8E%A8%E5%B8%88%E5%92%8C%E9%A1%B6%E7%BA%A7%E9%A4%90%E5%8E%85%E7%9A%84%E5%8D%8A%E5%A3%81%E6%B1%9F%E5%B1%B1%E9%83%BD%E5%9C%A8%E8%8B%B1%E5%9B%BD%E3%80%82%E8%BF%99%E7%B1%BB%E4%BC%BC%E4%BA%8E%E5%90%84%E5%9C%B0%E6%9C%8B%E5%8F%8B%E6%80%BB%E7%88%B1%E5%98%B2%E8%AE%BD%E9%84%99%E4%BA%BA%E8%80%81%E5%AE%B6%E6%9D%AD%E5%B7%9E%E6%98%AF%E7%BE%8E%E9%A3%9F%E8%8D%92%E6%BC%A0%EF%BC%8C%E4%BD%86%E4%BA%8B%E5%AE%9E%E4%B8%8A%E5%8F%AA%E6%98%AF%E6%9D%AD%E5%B7%9E%E7%9A%84%E9%83%A8%E5%88%86%E4%BB%A3%E8%A1%A8%E8%8F%9C%E9%9A%BE%E5%90%83%EF%BC%88%E8%A6%81%E6%80%AA%E5%81%9A%E4%BB%BF%E8%86%B3%E7%9A%84%E9%82%A3%E7%BE%A4%E4%B9%A6%E5%91%86%E5%AD%90%EF%BC%89%EF%BC%8C%E6%B2%BF%E8%A1%97%E5%8F%AF%E9%81%8D%E5%9C%B0%E6%98%AF%E7%BE%8E%E9%A3%9F%E3%80%82%E5%90%9B%E4%B8%8D%E8%A7%81%EF%BC%8C%E6%88%91%E5%AE%B6%E9%9A%94%E5%A3%81%E7%9A%84%E9%9D%A2%E9%A6%86%E5%92%8C%E7%94%9F%E7%85%8E%E5%8C%85%E9%93%BA%E5%AD%90%E4%B9%9F%E6%AF%8F%E5%A4%A9%E5%A4%A7%E6%8E%92%E9%95%BF%E9%BE%99%EF%BC%8C%E5%AE%B3%E6%88%91%E5%A4%9A%E5%B0%91%E5%B9%B4%E6%B2%A1%E5%90%83%E4%B8%8A%E4%B8%80%E5%8F%A3%E3%80%82&quot;&gt;^2&lt;/a&gt;都不绷着了，我们也没必要打肿脸非橄榄油不吃。橄榄油最大的特点恐怕不在于其营养价值，而是特殊的&lt;strong&gt;草木香味&lt;/strong&gt;，这赋予不少意大利菜和法国菜以地中海风味。&lt;a href=&quot;https://utgd.net/article/%E8%87%B3%E4%BA%8E%E8%90%A5%E5%85%BB%E6%88%90%E5%88%86%E5%B7%AE%E5%BC%82%EF%BC%8C%E8%BF%98%E6%98%AF%E9%82%A3%E5%8F%A5%E8%80%81%E8%AF%9D%EF%BC%8C%E4%B8%8E%E5%85%B6%E8%8A%B1%E5%8D%81%E5%80%8D%E4%B9%83%E8%87%B3%E4%B8%80%E7%99%BE%E5%80%8D%E7%9A%84%E4%BB%B7%E6%A0%BC%E4%B9%B0%E5%A4%A9%E4%BB%B7%E9%A3%9F%E7%89%A9%EF%BC%8C%E4%B8%8D%E5%A6%82%E8%8A%B1%E4%B8%A4%E5%80%8D%E7%9A%84%E9%92%B1%EF%BC%8C%E5%A4%9A%E5%90%83%E5%87%A0%E5%8B%BA%E5%B9%B3%E4%BB%B7%E9%A3%9F%E6%9D%90%E3%80%82&quot;&gt;^3&lt;/a&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://cdn.utgd.net/assets/uploads/2022/00/minja-0214103438.png&quot; alt=&quot;Alt text&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
    &lt;figcaption&gt;橄榄油的风味轮廓 图：[比]彼得‧庫奎特：《食物風味搭配科學》，采實文化2021年版&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;但橄榄油风味并非无可替代。喜欢吃橄榄油的人，不乏爱往里面加香草者，这本就很讽刺：用迷迭香或百里香增强橄榄油的“橄榄油味”（当然也带上了香草的其他风味）！在一场意式青酱（罗勒酱）的测试中，参与者虽然能够区分添加了优质橄榄油的酱汁，但他们&lt;a href=&quot;https://www.seriouseats.com/best-pesto-recipe&quot;&gt;误以为那是大蒜的功劳&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;品级越低的橄榄油，越是需要香草帮忙，反过来想，难道不能往中性食用油里加香草，大致替代橄榄油吗？确实，菜籽油或山茶油等中性油自身风味不强，倒是成了香草的容器，结果还不比中低端橄榄油差（香草可以自己种，成本无限趋于零）。&lt;/p&gt;
&lt;p&gt;如果读者本来就更习惯做中餐，只是偶尔想试试西式菜肴，那更没必要买橄榄油。&lt;/p&gt;
&lt;h2&gt;食材单点：奶酪（帕玛森为例）&lt;/h2&gt;
&lt;p&gt;类似于希腊酸奶，奶酪——不是再制干酪——在我国也贵得吓人，好不容易在进口柜里翻到，结果还没用两次就发霉了。不少西式菜肴偏偏离不开奶酪，抛开有些烂俗的拉丝效果不说，奶酪确实提供了不可或缺的香味，如果一盘意大利面不刨上或撒上一层奶酪，就像吃苏式汤面没有浇头或吃刀削面没加油泼辣子一样。&lt;/p&gt;
&lt;p&gt;我没有什么通用方法，毕竟奶酪品种太多，不过最常见的奶酪故障点——帕马森，就是那种要拿个刨子刨在面条或炖菜上面的玩意儿，倒很容易处理。就帕玛森而言，只需切成小块放在密封盒中冷冻，使用时取出来刨丝，基本就不用担心发霉变绿，而且冻过的帕玛森更硬，刨出来的丝更细密，接触面大，香味也更明显。&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://cdn.utgd.net/assets/uploads/2022/00/minja-0214104339.png&quot; alt=&quot;Alt text&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
    &lt;figcaption&gt;冷冻后刨出来的帕玛森奶酪反而更细密（右）&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;帕玛森之所以特殊，盖因其含水量少，冷冻后产生的冰晶不多，不容易破坏食材。不过，冷冻保存更适合二十块钱一两的便宜货，如果产区好或者年份足（一年半以上），风味确实会明显下降，最好尽快吃完——但，那更偏向一个艺术问题，而不是工程问题。Serious Eats 更保守一些，&lt;a href=&quot;https://www.seriouseats.com/essential-kitchen-tricks-and-tips&quot;&gt;仅建议冷冻保存奶酪皮&lt;/a&gt;，不过国内容易买到的奶酪大概率味道平庸，不必大费周章。&lt;/p&gt;
&lt;p&gt;奶酪的例子又提供了一条线索：是否可以用冰箱处理其他单点？有。&lt;/p&gt;
&lt;h2&gt;食材单点：用不完的蔬菜（香料）&lt;/h2&gt;
&lt;p&gt;国内读者通常因为难以买到进口货而遇到各种故障点，可即便是西方人在西方做西餐，也面临着类似的问题：香料蔬菜，每次用量通常很少，容易买多浪费，但如果平常不备好，临时去买又会手忙脚乱。&lt;a href=&quot;https://utgd.net/article/%E6%A0%B9%E6%8D%AE%E6%88%91%E5%9C%A8%E8%8A%9D%E5%8A%A0%E5%93%A5%E7%9A%84%E4%BA%B2%E6%88%9A%E4%BB%8B%E7%BB%8D%EF%BC%8C%E7%BE%8E%E5%9B%BD%E7%9A%84%E5%B0%8F%E8%8F%9C%E5%9C%BA%E5%92%8C%E8%8F%9C%E6%91%8A%E8%BF%9C%E8%BF%9C%E4%B8%8D%E5%A6%82%E5%9B%BD%E5%86%85%E9%82%A3%E4%B9%88%E6%99%AE%E5%8F%8A%EF%BC%8C%E9%80%9A%E5%B8%B8%E5%A5%B9%E4%BB%AC%E8%A6%81%E5%8E%BB%E5%A4%A7%E8%B6%85%E5%B8%82%E9%87%87%E8%B4%AD%EF%BC%8C%E8%80%8C%E8%B6%85%E5%B8%82%E5%AF%86%E5%BA%A6%E4%B9%9F%E4%B8%8D%E6%AF%94%E5%9B%BD%E5%86%85%E5%9F%8E%E5%B8%82%E3%80%82&quot;&gt;^4&lt;/a&gt;冷冻同样是它们处理这些单点问题的首选方案。&lt;/p&gt;
&lt;p&gt;本节所指的香料蔬菜，主要是各种&lt;a href=&quot;https://www.seriouseats.com/all-about-mirepoix&quot;&gt;含水量较高的风味或调味食材组合&lt;/a&gt;，例如法国菜中的洋葱、胡萝卜和芹菜，西班牙菜中的西红柿、甜椒和洋葱，以及亚洲菜中常见的葱姜蒜。贴心的超市推出了葱姜蒜小包组合，菜场上也可以只买一根葱，但如果没有这些服务呢？&lt;/p&gt;
&lt;p&gt;——用冰箱。Serious Eats &lt;a href=&quot;https://www.seriouseats.com/how-to-freeze-herbs-for-long-term-storage&quot;&gt;经测试发现&lt;/a&gt;，作为调味料或风味料的湿香料组合，完全不怕冰冻，因为你只需要最后的味道，而非保留蔬菜的完整形状。如果预处理得当（例如焯水），冷冻湿香料甚至比新鲜食材还要好。&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://cdn.utgd.net/assets/uploads/2022/00/minja-0214110144.jpg&quot; alt=&quot;Alt text&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
    &lt;figcaption&gt;你看不出哪个是冷冻过的 图：Serious Eats&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;知名博主 Ethan Chlebowski &lt;a href=&quot;https://www.youtube.com/watch?v=XlndcLo3j7I&quot;&gt;也是冷冻香料的拥趸&lt;/a&gt; 不吝于称这种方法为一场革命，环保论坛 r/ZeroWaste 上也多不少人&lt;a href=&quot;https://www.reddit.com/r/ZeroWaste/comments/1iqd53r/what_are_the_best_zero_waste_habits_youve/&quot;&gt;提名冷冻蔬菜为“最后悔没早点看到的技巧”&lt;/a&gt;。确实，如果把烹饪视作一项工程而非玄学，那么，冷冻保鲜技术就&lt;a href=&quot;https://www.theatlantic.com/culture/archive/2025/02/frozen-food-reputation/681710/?utm_source=feed&quot;&gt;不是烹饪的拐杖，而是美味的军火库&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;人为制造的食材单点：鸡胸肉、彩椒及其它&lt;/h2&gt;
&lt;p&gt;鸡肉在国内并不贵，但或许是受健康机构影响太深，现在不少食谱都默认使用鸡胸肉。抛开把自虐当作一种新风味的家伙不谈，当这股“健康烹饪”的风潮吹到传统菜肴上，结果就是一场灾难：仅仅因为几秒钟的误差，鸡胸肉就会在病原体培养皿和榨了两轮的甘蔗渣之间摇摆，为了避免两种惨剧，你最后只能插上探针式温度计，或者买一台低温慢煮泵。鸡胸肉简直就是家电行业和某些烹饪博主联手策划的一场旷世诈骗。&lt;/p&gt;
&lt;p&gt;（我无意探讨减肥话题，毕竟本文的重点是烹饪工程，我只想指出一点：要靠吃鸡胸肉减肥，基本就相当于到了要打留滞针的地步，身心都属于晚期。）&lt;/p&gt;
&lt;p&gt;考虑一下脑筋正常人士的选择：鸡腿肉。蛋白质含量低一些，稍微带点脂肪，加热时不那么容易收缩失水，你可以尽情煎，尽情烤，这是肉类食材该有的样子（鸡胸肉本就是饲料鸡身上最无聊的肉）。&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://cdn.utgd.net/assets/uploads/2022/00/minja-0214113003.jpeg&quot; alt=&quot;Alt text&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
    &lt;figcaption&gt;我制作的清真小吃拼盘，用到了鸡腿肉&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;类似的思路可以迁移到其他超级食物或减肥食物上。例如孪生蔬菜刺客红黄甜椒，往往比肉还贵，结帐的时候吓你一跳，其实可以考虑甜辣味的红尖椒（一定要问问店主，同一称谓在不同地区对应的辣椒可能千差万别！）。&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://cdn.utgd.net/assets/uploads/2022/00/minja-0214112852.jpeg&quot; alt=&quot;Alt text&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
    &lt;figcaption&gt;我在北非烩饭和南洋炒米粉中都用红尖椒取代了甜椒&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;又如花椰菜，贵倒是不贵，但很容易煮烂，不如在需要口感的菜式中换成中国花菜（白色的那种），经典川菜干煸花菜自然有其道理。再如，用火锅底料里的辣椒做墨西哥辣酱炖肉，虽然在国内很难买到墨西哥原产货，但四川辣椒本就来自南美，除了烟熏辣椒外（最后我在新疆买到了），其他辣酱炖肉所需材料都齐全。&lt;/p&gt;
&lt;p&gt;自然，取代不是那么容易，尚需考虑风味、口感、价格等因素，但这种烹饪推理，本就是最大的乐趣之一。&lt;/p&gt;
&lt;h2&gt;技术单点：中餐中的“宽油”&lt;/h2&gt;
&lt;p&gt;读到这里，读者可能已经发现，前面谈到的各种单点故障基本都是食材方面的，而且往往由文化差异造成。难道中餐里就不存在单故障了吗？有，而且不少，可惜我涉猎不广，只能浅谈一点：宽油。&lt;/p&gt;
&lt;p&gt;传统中餐就不吝啬加油，因为菜籽油榨取工艺在近几百年就很成熟，油并不贵。到了现代，餐厅为了追求上菜速度，更是把油当作主要的加热工具，甚至很多原本几乎不放油的菜，例如干煸四季豆（川菜），也要加半斤油先炸一炸。&lt;/p&gt;
&lt;p&gt;餐厅有必要追求出餐速度，而且油还可以反复，宽油无可非议。但自己做菜的话，随便炒个菜就要用掉半瓶油，毫无疑问会浇灭许多人学习烹饪的热情，这大概也是各种无油、少油烹饪大行其道的原因之一。&lt;/p&gt;
&lt;p&gt;说来好笑，我在排查西餐故障点，大洋彼岸也在挠破脑袋解决中餐的单点故障，宽油手法也令他们苦恼不宜。目前的几个替代方案都不错，例如借用烤箱或微波炉，同样可以达到乃至超过油温。Serious Eats 发现，&lt;a href=&quot;https://www.seriouseats.com/sichuan-dry-fried-green-bean-broiled-food-lab-recipe&quot;&gt;烤箱可以做出媲美油炸过的干煸四季豆&lt;/a&gt;&lt;a href=&quot;https://utgd.net/article/%E6%B2%B9%E7%82%B8%E5%B7%B2%E7%BB%8F%E6%88%90%E4%B8%BA%E8%BF%99%E9%81%93%E8%8F%9C%E7%9A%84%E6%A0%87%E5%87%86%E4%B8%AD%E5%BC%8F%E5%81%9A%E6%B3%95%EF%BC%8C%E5%B9%B2%E7%85%B8%E5%BE%92%E7%95%99%E8%99%9A%E5%90%8D&quot;&gt;^5&lt;/a&gt;。台湾也有留学归来的博主发现，&lt;a href=&quot;https://www.youtube.com/watch?v=FyzD_BHBt8U&quot;&gt;微波炉可以做出紫色浓郁的烤茄子&lt;/a&gt;，不输中餐馆大厨的油锅。&lt;/p&gt;
&lt;p&gt;说到底，宽油的本质是均匀传递高温，油相当于一种工具，最终不必吃进肚子。考虑原理后，就能化解单点，找到各种替代方案（你甚至可以尝试喷火枪）。&lt;/p&gt;
&lt;p&gt;对了，既然在家烹饪，自然也不必像餐馆那样追求速度，&lt;a href=&quot;https://www.youtube.com/watch?v=4WU7xDeRZQc&quot;&gt;传统的干煸手法值得回归&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;小结&lt;/h2&gt;
&lt;p&gt;在限定厨房，尤其是家庭厨房中，单点问题归根结底是我们如何体验烹饪的问题。食材或手法上的单点，常常成为拦路虎，一旦处理不好，一些本不那么复杂的菜也会给人泼冷水。其实传统也有原因，摸索原理，不难寻得更适合当地的替代品，从而解决单点故障。&lt;/p&gt;
&lt;p&gt;顺予指出，是否重视单点问题，也可以作为检验美食作家或博主水准的石蕊试纸，本文引用的 Serious Eats、Ethan Chlebowski、王刚和阿淇博士等媒体或个人，都不会把他（她）们所用的食材、道具和手法视作理所应当，几乎每次都会介绍替代方法和原因。&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;#008000&quot;&gt;本文主要的思路是化解单点，但在工程管理中，还有冗余、备份、灾难恢复等思路，可留作日后讨论。&lt;/font&gt;&lt;/p&gt;
 </description><link>https://utgd.net/article/21087</link><guid isPermaLink="false">https://utgd.net/article/21087</guid><pubDate>Mon, 17 Mar 2025 10:00:00 GMT</pubDate><category>观点</category><category>低技术</category><category>烹饪</category><category>生活</category><category>降低思维负荷</category></item><item><title>OpenAI 研究员发现最好的 AI 也无法解决大部分编程问题</title><description>&lt;img src=&quot;https://cdn.utgd.net/images/OpenAI_%E7%A0%94%E7%A9%B6%E5%91%98%E5%8F%91%E7%8E%B0%E6%9C%80%E5%A5%BD%E7%9A%84_AI_%E4%B9%9F%E6%97%A0%E6%B3%95%E8%A7%A3%E5%86%B3%E5%A4%A7%E9%83%A8%E5%88%86%E7%BC%96%E7%A8%8B%E9%97%AE%E9%A2%98.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;    &lt;p&gt;&lt;a href=&quot;https://www.solidot.org/story?sid=80627&quot;&gt;🔗 原文链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;生产力网红扎堆跃入 AI 赛道，过去说效率逆天改命，现在变成了 AI 逆天改命。但正如那句“古训”说的那样，真正能赚钱的方法是不会有人公开的。如果 AI 真的像他们说的那么强，他们可以用他们的 AI Agent 24 小时接开发外包。可以说有多强的服务器，就能有多大的收益。&lt;/p&gt;
&lt;p&gt;所以“AI 编程有多强”、“AI 潜力有多大”，和“AI 马上取代程序员”是完全不同的话题。如果我们谈论 AI 马上取代程序员，我们就得知道程序员每天都干什么。&lt;/p&gt;
&lt;p&gt;面试造核弹，入职读屎山。&lt;/p&gt;
&lt;p&gt;真实的编程工作从来都不是解一道算法题，也不是在单一文件中修复语法错误，而是在混乱中创造秩序：你需要理解庞大代码库的历史包袱、协调多个模块的交互、处理用户数据中的“脏输入”，和表达能力有问题的客户和管理人员沟通，甚至要在不完善的文档和模糊的需求中摸索解决方案。这种复杂性往往没有标准答案。&lt;/p&gt;
&lt;p&gt;那么这种能力应该怎么评估？&lt;/p&gt;
&lt;p&gt;作为尝试，OpenAI 在他们的最新研究里提出了一个新的测评基准 SWE-Lancer。他们从真实商业项目（上市公司Expensify的开源代码库）中提取了1,488个付费开发任务，覆盖从漏洞修复到功能开发的全场景。结果显示，即便是当前最强的Claude 3.5 Sonnet模型，在需要编写代码的任务中成功率仅有26.2%——这意味着超过七成的问题，AI给出的方案无法通过真实工作场景的验收。&lt;/p&gt;
&lt;p&gt;比如，一个价值1,000美元的“修复个人资料页与分享页头像不一致”任务，暴露了AI的典型短板。模型虽然能快速定位前端代码中的头像显示模块，却屡屡忽视三个关键点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户上传头像时可能触发多线程冲突&lt;/li&gt;
&lt;li&gt;第三方分享插件会缓存旧头像&lt;/li&gt;
&lt;li&gt;移动端和网页端的用户登录状态同步机制&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这种需要跨模块追溯因果关系的能力，恰是AI的致命弱点。人类工程师会通过日志排查、断点调试逐步缩小问题范围，而AI往往止步于“找到明显错误代码”的层面。&lt;/p&gt;
&lt;p&gt;另一个例子是复杂任务中的“拼图难题”。在价值1.6万美元的“应用内视频播放”开发任务中，成功方案需要同时修改11个文件，涉及浏览器事件循环、移动端硬件解码优化、跨平台API兼容性调整。&lt;/p&gt;
&lt;p&gt;AI在此类任务中的失败率高达89%，最常见的错误是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只修改了核心播放器模块，却忘记更新相关配置文件&lt;/li&gt;
&lt;li&gt;未能处理Android端特定机型的解码延迟&lt;/li&gt;
&lt;li&gt;忽视了用户从后台切换回应用时的播放状态恢复&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这就像要求AI拼好一幅1000块的拼图，但它只会盯着其中几十块反复调整。&lt;/p&gt;
&lt;p&gt;为什么模型会失败？&lt;/p&gt;
&lt;p&gt;因为 AI 被设计的工作方式和真实人类的工作方式不同。&lt;/p&gt;
&lt;p&gt;当任务描述是“用户有时无法保存修改后的邮编”（价值500美元），程序员会主动追问：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;具体发生在哪些国家？&lt;/li&gt;
&lt;li&gt;输入框是否有特殊格式限制？&lt;/li&gt;
&lt;li&gt;错误是否与浏览器类型相关？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而AI往往直接修改邮编验证函数，结果导致加拿大用户（邮编含字母）遭遇新问题。论文数据显示，涉及“需求澄清”的任务中，AI的二次修改请求率是人类的3.2倍。&lt;/p&gt;
&lt;p&gt;另一个问题是 AI 还没有系统级的思维。有时 AI 提交的方案虽然通过了网页端测试，却在 iOS 端因内存泄漏导致崩溃。它们擅长局部代码生成，却无法像人类一样预判“修改A模块会对B模块产生什么连锁反应”。&lt;/p&gt;
&lt;p&gt;AI 调试能力不足。当代码运行出错时，人类会通过控制台日志、性能监控工具甚至用户反馈逐步定位问题。但AI的“调试”更像是一次次重写代码的赌博。数据显示，在需要三次以上调试的任务中（例如“企业账户导出PDF崩溃”问题），AI的成功率骤降至7%，而人类工程师仍能保持34%的通过率。&lt;/p&gt;
&lt;p&gt;OpenAI的研究还揭示了一个更深层的结论：软件工程本质上是社会学问题。&lt;/p&gt;
&lt;p&gt;在一个价值2.4万美元的“重构过期支付模块”任务中，AI提交的方案虽然技术可行，却因不符合团队代码规范（如变量命名风格、文档格式）而被驳回。&lt;/p&gt;
&lt;p&gt;面对“选择iOS图片粘贴技术方案”的决策任务（价值3,200美元），AI能准确推荐“原生API+自定义剪贴板”的混合方案，却在后续沟通中无法解释“为什么这个方案比第三方库更适配现有架构”。&lt;/p&gt;
&lt;p&gt;也就是说，真实编程不仅需要正确性，还涉及与人的协作成本、技术债务管理、长期可维护性——这些无法被简化为代码行数的维度，构成了AI难以突破的“玻璃天花板”。&lt;/p&gt;
&lt;p&gt;《SWE-Lancer》的价值不在于证明AI的失败，而在于它用真实商业场景的数据，照亮了技术革命的现实边界。当最先进的模型在26%的任务中战胜人类时，我们看到的不是威胁，而是机遇：那些被AI攻克的26%，可能是工程师最不想处理的重复性工作；而那74%的失败案例，恰恰标定了人类创造力的不可替代性。&lt;/p&gt;
 </description><link>https://utgd.net/article/21089</link><guid isPermaLink="false">https://utgd.net/article/21089</guid><pubDate>Mon, 17 Mar 2025 02:00:00 GMT</pubDate><category>每周消息</category><category>AI</category><category>开发</category></item><item><title>因为 AI 而解雇程序员代价惨痛</title><description>&lt;img src=&quot;https://cdn.utgd.net/images/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9B%A0%E4%B8%BA%E6%9C%89%E4%BA%86%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%B0%B1%E8%A7%A3%E9%9B%87%E7%9C%9F%E6%AD%A3%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98%E6%98%AF%E6%84%9A%E8%A0%A2%E7%9A%84.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;    &lt;p&gt;&lt;a href=&quot;https://defragzone.substack.com/p/techs-dumbest-mistake-why-firing&quot;&gt;🔗 原文链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;曾几何时，程序员被视为科技行业的核心，如今却被许多公司视作“负担”。随着 AI 代码生成工具的进步，不少企业开始裁减程序员，甚至认为 AI 可以完全取代人类编写代码。然而，这种策略可能会很快让公司陷入困境。文章指出，至少有三个不可忽视的后果正在发生。&lt;/p&gt;
&lt;p&gt;首先，新一代程序员的能力会大幅下降。过去，初级程序员需要通过解决实际问题、优化代码、调试系统来成长。然而，随着企业越来越依赖 AI 编写代码，许多年轻工程师几乎没有机会接触真正的底层逻辑。他们习惯了让 AI 生成代码，而不是自己思考、优化和排错。最终，这批程序员将更像是“AI 操作员”，而不是具备完整工程思维的开发者。文章用一个比喻形象地描述了这个问题：就像让以后的司机只学自动驾驶模式，一旦系统失灵，他们根本不知道如何应对。&lt;/p&gt;
&lt;p&gt;其次，裁掉程序员的公司将很快后悔。一个现实的例子是，如果一家金融科技公司依赖 AI 代码，短时间内可能不会出问题，但随着时间推移，系统漏洞、性能瓶颈、安全隐患会逐步显现。AI 生成代码后不会主动发现错误、优化结构或修复漏洞，而没有程序员的公司只能眼睁睁看着故障频发。更糟糕的是，当公司意识到问题严重性，试图重新招聘程序员时，会发现优秀的工程师要么已经转行，要么不愿意回来。而企业留下的，只是一堆无从下手的 AI 生成“意大利面”代码。&lt;/p&gt;
&lt;p&gt;最后，真正优秀的程序员将变得更加稀缺，薪资水涨船高。那些没有盲目追随 AI 热潮的工程师，往往专注于高性能计算、底层架构或 AI 本身的研究。当企业发现自己仍然需要资深工程师时，才意识到这类人才要么已经创办了自己的公司，要么只愿意以高昂的咨询费用帮助企业解决问题。未来，优秀程序员的市场价值可能比现在高得多，而普通公司将很难负担得起。&lt;/p&gt;
&lt;p&gt;总体来看，科技公司过度依赖 AI 取代程序员，可能会对行业造成深远影响：初级开发者能力退化、企业因 AI 代码陷入混乱，而真正的技术高手反而变得更昂贵。作者讽刺地指出，如果科技公司真的想要挖坑给自己跳，那就让它们去吧，反正程序员们可以在一旁看戏，吃着爆米花等着它们回头求救。&lt;/p&gt;
 </description><link>https://utgd.net/article/21085</link><guid isPermaLink="false">https://utgd.net/article/21085</guid><pubDate>Fri, 14 Mar 2025 02:00:00 GMT</pubDate><category>每周消息</category><category>AI</category><category>开发</category><category>观点</category></item><item><title>孩子们喜欢座机</title><description>&lt;img src=&quot;https://cdn.utgd.net/images/%E4%B8%BA%E5%AF%B9%E6%8A%97%E6%89%8B%E6%9C%BA%E4%BE%9D%E8%B5%96%E7%97%87%E4%B8%80%E4%BD%8D%E6%96%B0%E5%8A%A0%E5%9D%A1%E5%A6%88%E5%A6%88%E8%AE%A9%E5%9B%BA%E5%AE%9A%E7%94%B5%E8%AF%9D%E5%9B%9E%E5%BD%92%E5%AE%B6%E5%BA%AD.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;    &lt;p&gt;&lt;a href=&quot;https://www.rnz.co.nz/news/national/542294/who-still-has-a-landline-phone&quot;&gt;🔗 原文链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在智能手机已成为日常生活标配的时代，一些家长开始重新安装座机电话，作为孩子与朋友交流的替代方式，同时延缓他们接触智能手机的时间。这股 “复古潮” 不仅让孩子们体验到了与众不同的通讯方式，也成为父母应对现代社交媒体挑战的一种新策略。&lt;/p&gt;
&lt;p&gt;四年前，奥克兰的 Summer Haycock 在家里安装了一部传统的有线座机，初衷是为孩子们提供紧急情况下的通讯工具，以防手机不在身边或电量耗尽。然而，没想到这部仅需每月 5 纽币的附加服务，逐渐成为她女儿及朋友之间的主要沟通方式。她表示，自己希望尽可能推迟给孩子配备智能手机，而孩子们却反而对座机的 “未知来电” 感到兴奋，甚至觉得这种体验很新奇。&lt;/p&gt;
&lt;p&gt;近年来，围绕孩子、智能手机和社交媒体的讨论愈发激烈。自 2024 年新西兰政府在学校禁止手机使用后，越来越多的研究也表明，智能手机与儿童心理健康之间存在联系。美国外科总医师 Vivek Murthy 曾表示，每天使用社交媒体超过三小时的年轻人，抑郁和焦虑症状的风险将增加一倍。而在新西兰，平均每人每天使用社交媒体的时间已达 2.5 小时，不少年轻人甚至超过 7 小时。&lt;/p&gt;
&lt;p&gt;一些家长开始寻找折中的解决方案。例如，育儿倡导者 Holly Jean Brooker 并未安装座机，而是在家中放置了一部 “傻瓜手机”，这款三星 Safe Surfer 只能用于拨打电话和发送短信，父母可以逐步解锁更多功能。Brooker 认为，给孩子配备智能手机只会增加干扰，因此她选择了一种更简单的方式让孩子与朋友联系。&lt;/p&gt;
&lt;p&gt;除了 Haycock，奥克兰的另一位母亲 Georgia 在六个月前也装了座机，既为家庭提供紧急联络方式，也作为孩子未来社交的工具。而另一位计划在新家安装座机的母亲，则是在奥克兰交通与科技博物馆参观电话展览时，发现孩子们对座机充满好奇，甚至不会正确握持话筒。这让她意识到，传统通讯方式或许能在孩子成长过程中发挥新的作用。&lt;/p&gt;
&lt;p&gt;Brooker 的另一项倡议 “Hold the Phone” 正在推广延迟儿童使用智能手机的观念，同时她也在推动新西兰政府加强网络内容过滤，以减少儿童接触不良信息的机会。育儿组织 “Parenting Place” 则建议，家长尽可能将孩子的第一部智能手机推迟到九年级（约 13 至 14 岁），但也承认并非所有家庭都能做到。&lt;/p&gt;
&lt;p&gt;当然，技术限制并非最终目标，家长们需要关注孩子们如何利用时间，例如是否有充足的社交互动、体育运动和家庭陪伴。如果这些方面平衡良好，那么适量的手机使用或在线游戏，并不一定是坏事。&lt;/p&gt;
 </description><link>https://utgd.net/article/21084</link><guid isPermaLink="false">https://utgd.net/article/21084</guid><pubDate>Thu, 13 Mar 2025 02:00:00 GMT</pubDate><category>每周消息</category><category>教育</category><category>生活</category></item><item><title>AI 提高了程序员们 5-10 倍生产力吗？</title><description>&lt;img src=&quot;https://cdn.utgd.net/images/AI_%E7%94%9F%E4%BA%A7%E5%8A%9B.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;    &lt;p&gt;&lt;a href=&quot;https://www.lesswrong.com/posts/tqmQTezvXGFmfSe7f/how-much-are-llms-actually-boosting-real-world-programmer&quot;&gt;🔗 原文链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;人们常说，大型语言模型（LLMs）显著提高了程序员的效率，有时甚至能达到五倍或十倍的提升。但这些故事往往很少伴随着明确的、具体的实例，让人难以判断这到底是现实还是一种错觉。&lt;/p&gt;
&lt;p&gt;最近，LessWrong上的一篇文章探讨了这个问题：LLM工具的真实生产力提升究竟有多少？作者和评论者一致认为，这种广泛流传的「5到10倍」提升大多是夸大的。实际情况更微妙一些：在某些特定场景下，LLM确实带来了显著提升，但这种情况并不普遍。&lt;/p&gt;
&lt;p&gt;首先，在小规模、孤立、明确定义的任务上，LLM的作用尤其突出。比如生成简单的脚本、快速写出一次性的工具脚本、处理不熟悉的技术栈、或构建初始的界面原型，这些任务往往能够迅速完成，节省大量时间。另一方面，涉及复杂架构设计、维护大型代码库、或需要深入理解和规划的任务，LLM却经常无能为力，甚至可能拖累进度。&lt;/p&gt;
&lt;p&gt;一个更具现实意义的估计可能是：整体开发效率提升大约在10%到30%左右，其中的大部分优势源于减少了学习和尝试错误的成本，而非全面彻底地改变了编程的核心流程。&lt;/p&gt;
&lt;p&gt;评论中也提到一些隐性成本：LLM生成的代码往往需要额外的修正和整理。这些成本容易被忽视，因为「快速生成代码」的快感掩盖了后续的调试与维护负担。一些公司和开发者未能系统地衡量这种隐性的损失，因此误以为自己的生产力大幅提升。&lt;/p&gt;
&lt;p&gt;另外，还有一个重要的观点是，生产力的瓶颈可能并非纯粹是编码本身，而是整个开发流程中的协调、沟通以及需求澄清。LLM可以加速编写代码，但无法缩短与客户和团队沟通需求的时间，无法缩短会议，无法解决反馈循环的延迟。这种情况意味着，即便某一环节速度提升了5倍，整体生产速度可能只会提高20%到30%。&lt;/p&gt;
&lt;p&gt;简而言之，大型语言模型的出现确实改善了开发者在某些具体任务上的效率，但远非普遍适用，也并未带来软件行业整体的显著加速。目前来看，它更像是一种实用的辅助工具，而非革命性的生产力飞跃。&lt;/p&gt;
 </description><link>https://utgd.net/article/21086</link><guid isPermaLink="false">https://utgd.net/article/21086</guid><pubDate>Wed, 12 Mar 2025 02:00:00 GMT</pubDate><category>每周消息</category><category>AI</category><category>开发</category><category>效率</category><category>观点</category></item><item><title>读懂狐狸的舞步：如何看懂 FoxTrot 的搜索结果</title><description>&lt;img src=&quot;https://cdn.utgd.net/images/banner_e6a14da1-47a1-41e6-88d6-bbc3d2d8c355.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;    &lt;p&gt;《小王子》的作者——他是一位飞行员——曾经设想，成熟的工具设计应当非常简约，没什么可以删除的。后半句在二十世纪下半叶开始得到了一众顶级设计师的回应，但是前半句却值得商榷（尽管这些设计师可能也同意前半句）：强大的工具可能并不总是呈现简单的面貌，它们也可能拥有&lt;strong&gt;必要的复杂&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;飞机仪表盘就是一种确有必要的复杂设计。真实情况比我们想象的还要夸张，阿帕奇直升飞机驾驶员不仅要面对一系列仪表盘，甚至还要佩戴专门设计的眼镜，以便一只眼镜看向前方、另一只望着头顶。有些可惜，真正必要的复杂在我们生活中很少见[^1]，以至于我们很难理解像 FoxTrot 这样的复杂工具。&lt;/p&gt;
&lt;p&gt;这类必要复杂的工具，就像新手很难跟上的探戈，或者令外行头晕目眩的爵士乐，但就其惊人的技术和艺术效果而言，足以把所谓的用户体验和极简主义踩个粉碎。如果我们把 FoxTrot 视作一场舞曲，那么最好的办法就是同时从音符（技术）和旋律（艺术）两个角度理解它。&lt;/p&gt;
&lt;h2&gt;两层搜索，左摇右摆&lt;/h2&gt;
&lt;p&gt;相比传统的搜索工具——从原生 Finder 到主流的第三方文件搜索软件——FoxTrot 最显著的特点是&lt;a href=&quot;https://utgd.net/article/20866/&quot;&gt;兼具文件层级的搜索和亚文件层级的搜索&lt;/a&gt;。前者帮你定位到文件，后者则列出文件中所有的相关句子。一旦带着这种分开观察的视角，FoxTrot 那乍看上去无从下手的界面，不过就是两种搜索界面的组合：左侧类似于 Finder 的搜索结果，右侧类似于许多 PDF 阅读器的内部搜索窗口。&lt;/p&gt;
&lt;p&gt;在我的工作中，二合一的搜索方式大大降低了思维负担。假设我想知道《中华人民共和国公司法》如何处理简易注销程序，鉴于该法刚刚施行不久，我不确定哪些解释、评注、专著或论文对此发表过看法，此时只好撒大网；而 FoxTrot 也不至于把凡是沾到一点边的文件都甩到我脸上[^2]，相反，它可以根据相关度排序搜索结果，如果搜索结果实在太多，最后几项明显没什么关联的可以略去不看（除非我在前几项中没有找到理想结果）。&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://cdn.utgd.net/assets/uploads/2022/00/minja-1114105400.png&quot; alt=&quot;Alt text&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
    &lt;figcaption&gt;文件层级的搜索&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;同时，你可能已经注意到亚文件搜索界面右侧的细线条，它们指示了各个关键词在文件中的位置分布，我可以大致判断一本书究竟是集中火力讨论简易注销程序，还是散于各章中零星提及。当搜索结果较多时，这些简单的可视化标记可以帮我更快地确定待读材料优先级。&lt;/p&gt;
&lt;p&gt;不过，正如爵士乐不是多塞了一些半音的流行乐&lt;a href=&quot;https://utgd.net/article/%E5%BD%93%E7%84%B6%E4%B8%8D%E6%98%AF%E3%80%82%E8%80%8C%E4%B8%94%E4%BB%8E%E5%8F%91%E5%B1%95%E8%84%89%E7%BB%9C%E4%B8%8A%E7%9C%8B%EF%BC%8C%E7%88%B5%E5%A3%AB%E5%BA%94%E8%AF%A5%E6%9B%B4%E6%97%A9%E3%80%82&quot;&gt;^3&lt;/a&gt;，FoxTrot 也不是加上了亚文件层级搜索和一些细碎功能的 Finder。当我们点开任意一个搜索结果，深入单文件搜索界面后，才会发现那些非嗜阅读如命之人不能体会的绝妙之处。&lt;/p&gt;
&lt;h2&gt;目录搜索，纲举目张&lt;/h2&gt;
&lt;p&gt;我的参考资料经常是动辄大几百页的书籍，阅读纸质书时，因为书籍有厚度，我大概可以知道自己所处的位置，但电子书没有这种空间属性，多数阅读器又没有进度条，我通常借助电子目录或其他手段粗略定位，避免翻来翻去逐渐不知自己去了哪个章节。&lt;/p&gt;
&lt;p&gt;多数 PDF 阅读器都可以显示书籍目录，但当你尝试搜索时，目录通常会被临时盖住，和搜索功能不能兼顾。实际使用时，很多章节的搜索结果毫无意义，例如教科书中带有一堆混淆项的习题栏目、某些法律注释书前后凑页数的法律条文汇编以及目录页本身&lt;a href=&quot;https://utgd.net/article/%E4%BE%8B%E5%A6%82%EF%BC%8C%E5%BD%93%E6%88%91%E6%90%9C%E7%B4%A2%E2%80%9C%E5%85%B1%E7%9B%8A%E5%80%BA%E5%8A%A1%E2%80%9D%E5%92%8C%E2%80%9C%E7%A0%B4%E4%BA%A7%E5%80%BA%E6%9D%83%E7%A1%AE%E8%AE%A4%E4%B9%8B%E8%AF%89%E2%80%9D%E6%97%B6%EF%BC%8C%E5%AE%83%E4%BB%AC%E5%8F%AF%E8%83%BD%E5%9C%A8%E7%9B%AE%E5%BD%95%E4%B8%8A%E4%BD%8D%E4%BA%8E%E5%90%8C%E4%B8%80%E9%A1%B5%EF%BC%8C%E5%9B%A0%E6%AD%A4%E7%9B%AE%E5%BD%95%E9%A1%B5%E4%B9%9F%E8%A2%AB%E5%8C%85%E5%90%AB%E5%9C%A8%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E5%86%85%EF%BC%8C%E4%BD%86%E5%AE%9E%E9%99%85%E4%B8%8A%EF%BC%8C%E6%AD%A3%E6%96%87%E5%90%8C%E6%97%B6%E8%B0%88%E5%88%B0%E4%B8%A4%E8%80%85%E7%9A%84%E6%AE%B5%E8%90%BD%E5%B9%B6%E4%B8%8D%E5%A4%9A%E3%80%82%E6%AD%A4%E6%97%B6%EF%BC%8C%E7%9B%AE%E5%BD%95%E9%A1%B5%E5%B0%B1%E6%98%AF%E6%97%A0%E7%94%A8%E9%A1%B9%E3%80%82&quot;&gt;^4&lt;/a&gt;。如果没有目录，我可能会浪费时间在这些章节或页面上。&lt;/p&gt;
&lt;p&gt;而 FoxTrot 则可以同时显示搜索结果和目录，并在目录的每一项后面显示有多少个匹配结果，降低了排查搜索结果的压力。&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://cdn.utgd.net/assets/uploads/2022/00/minja-1114105407.png&quot; alt=&quot;Alt text&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
    &lt;figcaption&gt;亚文件层级的搜索之目录&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;继续前文关于简易注销的例子，首先我可以把注意力集中在“公司解散和清算”一章，不看目录和条文汇编部分，接着，我注意到相关内容集中的“简易注销”和“强制注销”两节，而后者是我并不关注的一种程序，姑且可以不看。这样步步挑拣，可节省不少力气，重点研读最有可能派上用场的部分。&lt;/p&gt;
&lt;h2&gt;缩略页面，蜻蜓点水&lt;/h2&gt;
&lt;p&gt;单文件搜索界面中还有一个让人会心一笑的设计：&lt;strong&gt;缩略图视图&lt;/strong&gt;。FoxTrot 可以把所有命中的页面拎出来，同时在角落上标出各个关键词的命中次数。这绝非产品经理为了增加软件功能数量而拍脑袋加上的功能，如果你对比一下 FoxTrot 的默认搜索界面和单文件搜索界面，不难发现缩略图视图节省了多少排查工作量。&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://cdn.utgd.net/assets/uploads/2022/00/minja-1202153818.png&quot; alt=&quot;Alt text&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
    &lt;figcaption&gt;结果列表中的近百个项目，在缩略图中可能不过区区几页&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;默认搜索界面和原生预览工具类似，只是以列表形式罗列所有匹配项，即便你没有用过 FoxTrot，大概也有过类似的吃力经验：匹配项目粗看上去非常多，开开心心点进去，结果发现连续好几十个命中项竟然都在同一页，几乎要把方向箭头按到冒烟，才翻到下一页。这种默认设计非常机械，明显没有意识到关键词分布并不均匀。&lt;/p&gt;
&lt;p&gt;（如果你在 Microsoft Word 中搜索关键词，情况会更糟，如果你按回车键稍快一些，Word 就会真的以为你要换行，不知不觉中，好端端的文本被删掉一大截，而你急着点击下一项搜索结果，并未意识到异常。不用害羞，这完全是设计者的问题，不是你的。）&lt;/p&gt;
&lt;p&gt;现在回到 FoxTrot 的缩略图视图，你就知道为什么需要那么多貌似复杂且平行的搜索结果呈现方式。列表视图中的搜索结果可能多达几十项甚至上百项，但如果取出相关页面，或许不过寥寥数页。&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://cdn.utgd.net/assets/uploads/2022/00/minja-1114105411.png&quot; alt=&quot;Alt text&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
    &lt;figcaption&gt;亚文件层级的搜索之缩略图&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;貌似复杂的交互界面，不仅不会徒增压力、虚张声势，相反，它旨在降低认知负荷。这就像钢琴上的黑键或者萨克斯中的特殊交叉指法，它们的存在不是为了为难你，而是在当你希望表演更微妙的旋律时，全力支持你。&lt;/p&gt;
&lt;p&gt;[^1]: 必要复杂的例子太少了。许多我们习以为常的复杂设计，其实都不必要。对比一下越南战争时期美军配发的手表——特别是 MK1 型——和现在流行的 CASIO 运动表，后者貌似功能丰富，实则其指针、数字表盘和表冠的功能往往重复，大可不必（抛开美学不谈）。反人类的离合器被骂了那么多年，电动汽车横空出世之后，即便是天天嚷嚷着手动挡才算开车的大男子主义者也纷纷掉转风向。Microsoft 的办公软件设计混乱，没有逻辑，甚至三件套之间的交互都不统一，仿佛是学生们的恶作剧火锅：每个学生带一样食材，各怀鬼胎，最终煮成一锅黑暗料理。&lt;/p&gt;
&lt;p&gt;[^2]: 反观 Finder，简直像 ChatGPT 一样，不管对不对，先给你一大堆结果。假设你搜索关键词“ABC”，你搜到的某本书可能第一页有“A”，最后一页有“B”，整本书都没有出现过“C”，但 Finder 依然会把它拎出来。&lt;/p&gt;
 </description><link>https://utgd.net/article/21083</link><guid isPermaLink="false">https://utgd.net/article/21083</guid><pubDate>Tue, 11 Mar 2025 10:00:00 GMT</pubDate><category>方法</category><category>FoxTrot</category><category>全文搜索</category><category>搜索</category><category>搜索工具</category></item><item><title>标签大爆炸：一种低技术的标签管理方案</title><description>&lt;img src=&quot;https://cdn.utgd.net/images/banner_km_tag_pane.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;   &lt;br&gt;UNTAG Premium   &lt;p&gt;在诸多延续物理世界书桌隐喻的信息技术中，标签地位特殊，它与其纸质前身并不那么相像。一个或一组标签可以过滤出相应的文件，这赋予了标签非排他的容器属性——而在文件夹那里，事情更贴近物理世界，严格意义上，你不能同时把一个文件放在两个文件夹中。以这种特殊的容器属性为契机，标签的信息管理中逐渐占据了重要地位。&lt;/p&gt;
&lt;p&gt;但标签的灵活却逐渐变成了诅咒。种种标签管理方法论日益复杂，使用者的负担堪比图书管理员，反倒是生产力网红，在这场标签郁金香狂热中大赚一笔。本方案尝试取道低技术方案，避开过于复杂的体系，降低标签管理的负担，尝试回归标签的本质。&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://cdn.utgd.net/assets/uploads/2022/00/minja-0205160243.gif&quot; alt=&quot;Alt text&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
    &lt;figcaption&gt;自制的标签面板，点击即可呈现相关文件&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2&gt;标签的经院哲学化&lt;/h2&gt;
&lt;p&gt;中世纪时，阿奎那博士在当事期间主持过两百多场宗教辩论，从上帝何以存在到针尖上能站多少天使无所不包[^1]。这些辩论被后世当作笑话[^2]，“经院哲学”也成了空想游戏的代称。&lt;/p&gt;
&lt;p&gt;Pocket 等阅读器完全抛弃文件夹、拥抱标签，可能已经让部分读者感到不适。&lt;a href=&quot;https://www.devontechnologies.com/blog/20220809-nested-tags&quot;&gt;DEVONthink 引入嵌套标签&lt;/a&gt;，更是需要摸索方能理解。甚至&lt;a href=&quot;https://discuss.logseq.com/t/what-are-the-biggest-differences-between-tana-and-logeq/13579/6&quot;&gt;还有软件引入了编程中的继承思想&lt;/a&gt;，赋予标签更复杂的动态功能。&lt;/p&gt;
&lt;p&gt;在这股标签的经院哲学化浪潮下，Tiago Forte 以一篇 &lt;a href=&quot;https://medium.com/praxis-blog/tagging-is-broken-11e46eb24979&quot;&gt;&lt;strong&gt;Tagging is Broken&lt;/strong&gt;&lt;/a&gt; 激起千层浪，但他的举动或许更诚实：发明一套复杂度远超前述所有软件总和的标签管理方法论，然后作为付费课程售卖。&lt;/p&gt;
&lt;p&gt;其实，批评也好，鼓吹也罢，绝大多数参与者都默认标签具有不可撼动的地位，就像笛卡尔也不怀疑上帝存在一样。我&lt;a href=&quot;https://utgd.net/article/20482/&quot;&gt;曾怀着最大恶意揣测&lt;/a&gt;，开发商（和生产力网红）之所以热衷于叠床架屋的标签方法论，无法想用一套人造稀缺物将你困住，让你不断购买“赎罪券”：交订阅费。&lt;/p&gt;
&lt;h2&gt;标签必须死&lt;/h2&gt;
&lt;p&gt;有没有可能，&lt;a href=&quot;https://utgd.net/article/20482/&quot;&gt;标签必须死&lt;/a&gt;？&lt;/p&gt;
 </description><link>https://utgd.net/article/21082</link><guid isPermaLink="false">https://utgd.net/article/21082</guid><pubDate>Mon, 10 Mar 2025 10:00:00 GMT</pubDate><category>UNTAG Premium</category><category>方法</category><category>Keyboard Maestro</category><category>低技术</category><category>文件管理</category></item><item><title>META：没抓到我做种就不算盗版</title><description>&lt;img src=&quot;https://cdn.utgd.net/images/META_%E6%B2%A1%E6%8A%93%E5%88%B0%E6%88%91%E5%81%9A%E7%A7%8D%E5%B0%B1%E4%B8%8D%E7%AE%97%E7%9B%97%E7%89%88.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;    &lt;p&gt;&lt;a href=&quot;https://arstechnica.com/tech-policy/2025/02/meta-defends-its-vast-book-torrenting-were-just-a-leech-no-proof-of-seeding/&quot;&gt;🔗 原文链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;多位知名作家指控 Facebook 母公司 META 通过 BitTorrent（BT）技术非法下载超过 80TB 的盗版电子书，用于训练人工智能模型。&lt;/p&gt;
&lt;h3&gt;事件核心：下载盗版书训练 AI&lt;/h3&gt;
&lt;p&gt;2025 年 2 月，作家理查德・卡德里（《暗黑奇幻》系列作者）、莎拉・斯尔弗曼（喜剧演员兼作家）等人向法院提交诉讼，指控 Meta 从 LibGen、Z-Library 等盗版电子书平台下载大量书籍，用于训练其大型语言模型（如 Llama 系列）。Meta 虽承认下载行为，但强调 “未分享文件”，试图规避非法传播指控。&lt;/p&gt;
&lt;p&gt;BT 技术的特点在于用户下载时同时上传数据（即 “做种”）。但 Meta 在法庭文件中辩称：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公司采取了 “预防措施”，确保下载完成后立即停止分享文件。&lt;/li&gt;
&lt;li&gt;数据来自 “公开的在线资源”，相当于 “从数字图书馆借书”。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然而，原告方提交的内部证据显示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Meta 员工调整 BT 设置 “将做种量降至最低”。&lt;/li&gt;
&lt;li&gt;为避免追踪，下载时未使用公司服务器，转而通过第三方网络进行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;“这就像下载盗版电影后立刻关闭软件，但技术上讲，下载过程中仍会短暂分享数据。” 网络安全专家指出。&lt;/p&gt;
&lt;h3&gt;法律争议：盗版数据训练 AI 是否双重违法？&lt;/h3&gt;
&lt;p&gt;原告提出两项核心指控：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;版权侵权&lt;/strong&gt;：未经许可将书籍用于 AI 训练。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;违反加州数据法（CDAFA）&lt;/strong&gt;：非法获取受保护的数字内容。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Meta 的反驳策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将争议限制在版权法框架内，主张 “下载≠传播”。&lt;/li&gt;
&lt;li&gt;强调书籍内容本身可通过公共图书馆获取，不存在 “非法入侵数据库” 行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作家阵营则强调：“如果 AI 公司都通过盗版数据省钱，创作者将失去合理收入。” 数据显示，涉案数据集包含数百万本书，涵盖文学、学术、畅销小说等多类别。&lt;/p&gt;
&lt;h3&gt;行业震动：AI 训练数据合规性遭质疑&lt;/h3&gt;
&lt;p&gt;此案暴露 AI 行业的 “数据荒” 困境。为训练更强大的模型，科技公司需海量文本，但获取正版授权成本高昂。2024 年的一项研究显示，主流 AI 训练数据中约 30% 可能涉及版权争议。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;潜在影响：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若法院认定 “下载即违法”，AI 公司需彻底重构数据获取方式。&lt;/li&gt;
&lt;li&gt;若 Meta 胜诉，可能催生 “盗版数据洗白” 产业链，通过技术手段规避法律风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;尽管案件聚焦书籍版权，但普通用户也需警惕：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内容创作者风险&lt;/strong&gt;：社交媒体帖子、博客文章可能成为 AI 训练素材。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;正版权益削弱&lt;/strong&gt;：盗版数据泛滥或导致原创内容价值下降。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AI 服务质量&lt;/strong&gt;：基于低质盗版数据训练的模型，可能输出错误信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;“这不仅是作家的战斗，更关乎数字时代的知识产权规则。” 法律学者评论道。&lt;/p&gt;
&lt;h3&gt;案件下一步：证据博弈与行业观望&lt;/h3&gt;
&lt;p&gt;目前 Meta 已要求法院驳回 CDAFA 指控，主张版权法优先。原告律师则表示将深入调查 Meta 的内部通信，寻找 “做种” 证据。法庭预计在 2025 年秋季听取双方辩论。&lt;/p&gt;
&lt;p&gt;与此同时，微软、谷歌等公司正密切关注此案。某 AI 初创公司负责人坦言：“判决结果将决定我们每年数百万美元的数据预算该投向何处。”&lt;/p&gt;
&lt;p&gt;这场法律拉锯战，或将成为 AI 发展史上的标志性事件。而对于普通用户而言，它正悄然重塑人类与机器 “学习” 知识的规则边界。&lt;/p&gt;
 </description><link>https://utgd.net/article/21081</link><guid isPermaLink="false">https://utgd.net/article/21081</guid><pubDate>Fri, 07 Mar 2025 02:00:00 GMT</pubDate><category>每周消息</category><category>AI</category><category>META</category><category>法律</category><category>版权</category></item><item><title>AI 搞死技术面试</title><description>&lt;img src=&quot;https://cdn.utgd.net/images/AI_%E6%90%9E%E6%AD%BB%E6%8A%80%E6%9C%AF%E9%9D%A2%E8%AF%95.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;    &lt;p&gt;&lt;a href=&quot;https://kanenarraway.com/posts/ai-killed-the-tech-interview-now-what/&quot;&gt;🔗 原文链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;你不难想象，AI 会重塑技术招聘的格局。&lt;/p&gt;
&lt;p&gt;但你很难想象，现在已经夸张到了什么地步。&lt;/p&gt;
&lt;p&gt;程序员们用 GitHub Copilot 自动补全代码，用 Claude 解答算法难题，传统技术面试的防线正在全面崩塌。这不仅暴露了现行招聘体系的脆弱性，更迫使整个行业重新思考人才评估的本质。&lt;/p&gt;
&lt;p&gt;实际上，AI 时代以前也有技术面试的困境。要求应届生推导红黑树时间复杂度，让资深工程师在白板上手写冒泡排序，这些脱离实际工作场景的考核方式引发广泛诟病。而远程面试的普及直接打开了潘多拉魔盒：摄像头关闭状态下的代考服务、用AI换脸来面试录取后员工声音和面试时不同、自动化脚本海投简历防不胜防。&lt;/p&gt;
&lt;p&gt;AI 生产代码和问题解答唾手可得，原本用于筛选人才的 HackerRank 测试和算法轮次，反而成了检验候选人AI使用能力的另类考场（倒也不失为一项技能）。&lt;/p&gt;
&lt;p&gt;AI 对技术面试的冲击呈现出清晰的递进轨迹。首先是在线编程测试，任何掌握基础 prompt engineering 的学习者都能轻松通关。随后，在线算法面试的防线也在快速瓦解，大型语言模型不仅能准确解答90%的常规题目，甚至开始展现处理复杂递归问题的能力。即便是相对安全的系统设计面试，其优势地位也岌岌可危——&lt;strong&gt;面试官们发现，越来越多的候选人在回答时会突然陷入诡异的沉默，随后输出结构完美但缺乏深度的标准化答案&lt;/strong&gt;，这种典型的AI辅助特征正在模糊真实能力与机器代答的界限。&lt;/p&gt;
&lt;p&gt;面对如此情形，企业也不得不灵活应对。混合面试模式逐渐成为主流：允许候选人在初筛阶段使用AI工具完成基础编码任务，但在复试环节设置现场编程考核。考核重点从&quot;能否写出正确代码&quot;转向&quot;如何有效驾驭AI工具&quot;，面试题目开始要求构建完整的应用程序体系，并在此过程中考察版本控制、代码重构和系统扩展能力。某硅谷科技公司的实验性面试流程显示，让候选人在两小时内用AI协作开发可扩展的微服务架构，能更真实地反映其工程化思维和问题解决能力。&lt;/p&gt;
&lt;p&gt;行业正在被重塑。短期来看，AI 辅助导致的面试通过率虚高与试用期离职率攀升形成鲜明对比，暴露出单纯依赖技术考核的局限性。教育体系与职场需求的断层愈发明显，初级工程师既要快速掌握AI协作开发的新范式，又需补足传统计算机科学基础，这种双重压力正在制造新的职业壁垒。更值得警惕的是，社交媒体上疯传的&quot;零基础通关FAANG面试&quot;教程，正在催生投机取巧的恶性循环。&lt;/p&gt;
&lt;p&gt;未来的技术招聘必将走向人机协同的新范式。面试官需要修炼新的&quot;识人术&quot;：在允许使用AI工具的前提下，通过代码演进轨迹分析、实时协作调试、架构决策推演等方式，穿透技术表象洞察工程思维的本质。企业的人才培养体系也需相应调整，将 AI 协作能力纳入核心技能矩阵。&lt;/p&gt;
&lt;p&gt;这场由 AI 引发的招聘革命，终将倒逼整个行业回归人才评估的本质——不再关注候选人能否复现标准答案，而是检验其运用工具解决复杂工程问题的真实创造力。&lt;/p&gt;
 </description><link>https://utgd.net/article/21079</link><guid isPermaLink="false">https://utgd.net/article/21079</guid><pubDate>Thu, 06 Mar 2025 02:00:00 GMT</pubDate><category>每周消息</category><category>AI</category><category>开发</category></item><item><title>[编译]万行代码贡献，成维护者噩梦</title><description>&lt;img src=&quot;https://cdn.utgd.net/images/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%87%E8%A1%8C%E4%BB%A3%E7%A0%81%E8%B4%A1%E7%8C%AE%E5%8D%B4%E6%88%90%E7%BB%B4%E6%8A%A4%E8%80%85%E5%8D%81%E5%B9%B4%E5%99%A9%E6%A2%A6.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;    &lt;p&gt;前些日子，我读到&lt;a href=&quot;https://arstechnica.com/gadgets/2025/02/asahi-linux-lead-resigns-from-mac-based-distro-after-tumultuous-kernel-debate/&quot;&gt;关于 Linux 内核的一场争议&lt;/a&gt;（坦白说，我认为双方的处理方式都不尽妥当），由此引发了我的一个思考：很少有人真正理解长期维护庞大软件项目的艰辛。无论是非技术人员，还是初出茅庐的开发者，都难以体会其中的辛苦；而令人讶异的是，甚至那些能够编写出庞大复杂代码的资深程序员，也往往未必能深刻领会这一点。这种认识上的不足，正是那次 Linux 内核争论背后部分原因之一（尽管其中还涉及其他多重因素）。&lt;/p&gt;
&lt;p&gt;这也解释了软件开发领域中常听到的一些评论，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“我周末就能写完这个！”（通常指对 Dropbox 这样重要产品的轻视）&lt;/li&gt;
&lt;li&gt;“只要集成&amp;lt;某个库&amp;gt;就行了——它能替你实现这个功能”&lt;/li&gt;
&lt;li&gt;“我这儿做了个原型，拿去直接集成到你们的产品里吧！”&lt;/li&gt;
&lt;li&gt;“我做了个很酷的插件，为什么不把它直接并入核心产品？”&lt;/li&gt;
&lt;li&gt;“为什么这个开源项目不接受我那一万行的代码补丁？我可是做了所有艰难的工作！”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现实是，如果你需要在长达数年的时间里维护一个庞大而复杂的软件项目，你会渐渐明白：实现一个功能的最初编码，仅仅是全部工作量的一小部分。因为随之而来的还有测试、排查并修复错误、性能优化、适应其他变化的升级、重构、客户支持、文档编写与不断更新，甚至可能还要彻底重写代码——所有这一切构成了后续长期维护的庞大工程。就我看来，除非你在职业生涯中曾负责维护一个至少 10 万行代码且不断演进的项目长达五年以上，否则很难体会到其中独有的挑战。&lt;/p&gt;
&lt;h2&gt;我们的经验&lt;/h2&gt;
&lt;p&gt;以我们为例，基于浏览器的游戏与动画工具 Construct 的代码量现已达到约 75 万行，而最初的代码正是在十年前奠定的基础。（事实上，这已是我们的第三代产品，此前还有 Construct 2 与 Construct Classic —— 我们大约始于 2007 年。）我估计，一个新功能最初代码的编写，大约只占该功能整体工作量的 25%。其余的 75%则是后续维护：包括测试、诊断与修复 Bug、性能调优、使功能适应其他改动、代码重构、客户支持、文档编写及后续修订，甚至有时需要彻底重写代码——而重写后的维护工作依然绵延不断。&lt;/p&gt;
&lt;p&gt;放到更大范围来看，Construct 也并不算多么庞大——浏览器、如 Linux 这样的操作系统，甚至其他不少项目，其代码行数均以百万计。对于这些项目，新功能最初编码所占比例可能仅为 10%，甚至更低。&lt;/p&gt;
&lt;p&gt;当你屡屡&lt;a href=&quot;https://www.construct.net/en/blogs/ashleys-blog-2/unexpected-complications-1535&quot;&gt;因一处小改动而不得不付出大量额外劳动&lt;/a&gt;，或是在计划一个令人激动的新升级时忽然发现某个功能成为了升级的巨大障碍，又或者不得不完全重写一个重大功能（还要处理引用了他人代码而产生的各种复杂问题）——这些情形我们都曾深切体会过——你就会对这种现实有更深的理解。许多人（包括资深开发者）往往把软件开发看成是单纯地编写所需代码，然后任务结束。也许在某些岗位上确实如此！但对于我们这样的项目来说，情况远非如此简单。&lt;/p&gt;
&lt;h2&gt;维护者的心声&lt;/h2&gt;
&lt;p&gt;当你真正明白这一切时，视角便会截然不同。外行人看到某人在开源项目中一次性提交了一万行新代码时，往往会觉得这是多么慷慨而又乐于助人的行为，从而对其表示尊重与配合。但那些肩负着维护整个代码库重任的资深开发者深知，这位“慷慨”的贡献者可能会突然消失得无影无踪——而长远来看，他们实际上把自己所写代码工作量的 4 到 10 倍，转嫁给了项目其他开发者。如果对方理所当然地决定不再承担这份后续责任，那么问题就变得棘手：如何礼貌而坚决地拒绝一个看似慷慨的人？在那次 Linux 内核争议中，这似乎正是内核开发者试图表达的一部分观点。（不过，他们使用了我认为极不委婉的语言，这似乎加剧了矛盾。）&lt;/p&gt;
&lt;h2&gt;建筑类比&lt;/h2&gt;
&lt;p&gt;软件本质上是一个高度抽象的事物，这使得我们很难形成直观的理解。为帮助大家从维护者的角度理解这种情况，我打了个比方，用建造房屋来类比。虽说任何比喻都有不尽完善之处，而且我本人并无建筑经验，但毕竟人人都对真实世界的物质事物有所感触，希望这能较好地传达我的观点。&lt;/p&gt;
&lt;h3&gt;志愿的建筑工人&lt;/h3&gt;
&lt;p&gt;假设你是一位经验丰富的建筑师，决心亲手打造一座坚固耐用、可使用数十年的新房。你精心挑选最优质的材料与工艺，以期建成一座经得起时间考验的房屋。&lt;/p&gt;
&lt;p&gt;正当此时，一位刚刚踏入建筑行业的年轻亲戚向你提出建议：他愿意免费为你的房屋建造一处扩建部分，不但能让你出租赚取租金，他自己也能积累实战经验、丰富履历。大家纷纷称赞这是一份多么慷慨的好意，于是你欣然接受，让他动工建造扩建部分。&lt;/p&gt;
&lt;p&gt;然而，随着工程进行，你渐渐发现，这位亲戚施工速度虽然很快，但所用的材料廉价、工艺简陋。你深知，要建造一座经久耐用的房屋必须精益求精，而他只做足及格线。虽然两部分之间需要进行复杂的管道、电线、暖气等系统的衔接，可毕竟对方是免费劳务，你只好将就。&lt;/p&gt;
&lt;p&gt;工程竣工后，整体看来，两部分无论在水电、隔水、居住条件或符合规范上，都算得上“过得去”。你与亲戚相互击掌致意，对方则轻描淡写地说或许你还欠他点什么，随后便销声匿迹，投向了自己的未来。&lt;/p&gt;
&lt;h3&gt;维护难题接踵而至&lt;/h3&gt;
&lt;p&gt;快进十年。你的主屋依然坚固如初，然而那处扩建部分却问题频出：屋顶漏水、保温效果差导致暖气账单高企、电路频频跳闸，种种瑕疵不仅影响扩建区，也波及到主屋。尽管你靠出租赚得一笔租金，但租户们却不断抱怨这些故障。你不得不不断投入维修精力，勉力维持运营，但最终事实摆在眼前：这部分建筑明显难以长久维持。问题日益恶化，迫使你必须进行彻底的整修：屋顶需要重修、电路得重新布线，甚至墙体标准也该追上主屋的水准……但眼下租户的权益不容侵犯，不能轻易将他们迁出。长期以来，租户们对不断出现的维修问题怨声载道，这无疑令你压力重重。&lt;/p&gt;
&lt;h3&gt;维护者的噩梦&lt;/h3&gt;
&lt;p&gt;此时，你正处于维护者的噩梦之中。最简单的解决方案似乎是拆除扩建部分，弃之不顾；然而在软件领域，为了保持向后兼容，往往无法简单地舍弃已有功能。因此，在此比喻中，你又不得不顾及租户的居住需求。此时你面临一系列棘手选择：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;持续不断地做临时修补，但你明白这样只会让问题愈演愈烈，耗费更多时间、金钱与精力，终究无济于事。&lt;/li&gt;
&lt;li&gt;再次请求那位亲戚无偿出力，然而很可能他会以“我已经付出足够了”为由拒绝，或者早已物归原主，再也难以找到。&lt;/li&gt;
&lt;li&gt;拆除重建扩建部分，但这需要你在施工期间另寻他处安置租户，成本大增。（在软件中，这可能对应于采用复杂的变通方案或编写专门的过渡代码。）&lt;/li&gt;
&lt;li&gt;另起新建一处扩建区，将租户搬迁过去后再拆除旧有部分。虽是个不错的方案，但前提是你得有足够的空间，并确保新扩建部分既具备旧有功能又能做到更高质量。与此同时，旧区的种种问题仍旧挥之不去，必然使情况在短期内进一步恶化。（在软件上，这类似于开发全新的功能模块，再将所有用户迁移过去，且整个过程往往异常棘手。）&lt;/li&gt;
&lt;li&gt;分阶段重建扩建部分，在租户继续居住的同时逐步改造。这虽然能避免搬迁之苦，但工地环境难免影响租户生活，并且由于每个阶段都要确保房屋始终可居住，因此工作复杂度和费用均大幅攀升，这往往成为最慢、最昂贵的方案——但在其他方案皆不可行的情况下，或许不得不如此。（在软件中，这对应于在确保向后兼容的前提下，逐步升级现有代码。）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;无论你选择哪一种方案，经过漫长而昂贵的重建工程后，一个令人痛心的事实会浮现：你所投入的时间与金钱早已抵消了多年来的所有租金收入，甚至在未来数年内也难有回报。最终，你只能无奈地承认：如果当初不让那位亲戚帮忙建造扩建部分，或是干脆自己动手，情况或许会好得多——省下的钱与减少的麻烦，远比事后弥补来的轻松。&lt;/p&gt;
&lt;p&gt;这就是你对外部贡献心生警觉的时刻。你渐渐明白：虽然别人建造了那部分结构，但最终长久的维护重担却落到了你的肩上，而这份负担远超最初施工的工作量，最终带来的麻烦与花销，足以让你宁愿从未接受过外援。&lt;/p&gt;
&lt;h2&gt;软件实例&lt;/h2&gt;
&lt;p&gt;回到软件领域，即便是在我们的 Construct 产品中，也曾多次遇到类似状况，尽管我们的产品并非开源。以下是一些真实案例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;社区插件的遗留问题：&lt;/strong&gt;&lt;br&gt;
Construct 2 曾采用一位社区成员贡献的存储插件。几年后，我们用自主研发的插件取而代之，但出于向后兼容的考虑，客户项目依然可以继续使用旧版插件。尽管这事发生在大约 10 年前，而此后我们又推出了全新的 Construct 3，客户依旧会因旧版社区插件产生兼容性问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;外包开发带来的隐患：&lt;/strong&gt;&lt;br&gt;
曾有建议认为，通过外包给第三方开发者，可以更快地加入新功能。我们尝试了这种方式，为官方 Sprite Font 插件外包开发。然而，原开发者渐行渐远，当涉及到 Bug 修复与功能需求时，他面对另一位编码风格截然不同的开发者时，困难重重。最终，我们不得不为 Construct 3 重写所有插件，结果反复验证：最好还是使用我们自己完全理解的代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;第三方库的长期问题：&lt;/strong&gt;&lt;br&gt;
有时，为实现某项功能，我们会引入第三方库。该库的开发者可能会持续维护约 5 年，然后便转身离去。十年后，我们依旧被迫面对该库的 Bug 修复与性能改进问题，不得不考虑是自行重写，还是迁移至另一库（而另一库未来也可能不再维护）。以 Construct 为例，我们至今已更换了四个用于压缩 JavaScript 代码的库，而每一次切换都伴随着痛苦且耗时的项目重构。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;原型示范的误区：&lt;/strong&gt;&lt;br&gt;
有时有人仅用一两天时间做了一个原型或概念验证，就急于说服我们在 Construct 中实现该功能。然而，他们所展示的仅仅是冰山一角，而你知道真正的工作量远远超出眼前这点代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;直接侵入代码的代价：&lt;/strong&gt;&lt;br&gt;
也有人利用开发工具或突破封装限制，直接将某个功能硬塞进代码库，然后质问为何不将其正式支持。殊不知，长期维护这种“临时方案”会引发一系列升级问题，而未来计划中的改动可能与之冲突，最终导致严重的向后兼容性危机。贡献者通常只关注眼前的功能能否顺利运行，而我们则必须为日后潜在的种种后果买单。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在开源项目中，这样的问题可能更为严峻——理论上，任何人都可以直接贡献大量代码，且许多项目还鼓励这种做法。我猜，如果对外来代码毫无筛选地全盘接受，整个项目不久便会陷入混乱，因此项目负责人必然会设定一定的提交要求。不过，关于这方面我并无太多开源经验，因此仅能旁观指出，这正是 Linux 内核争论中部分问题的症结所在。&lt;/p&gt;
&lt;h2&gt;结语&lt;/h2&gt;
&lt;p&gt;软件作为一种抽象的产物，往往难以直观把握其内在机理。我相信，在业界中，能连续 5 年以上维护一个庞大而不断演进的代码库的人并不多——正如我所说，有的开发者似乎能轻松写出大量复杂代码，但对后续维护所需的付出却缺乏足够的认识。长期软件维护，其实与维护一栋建筑颇为相似：无论是房屋还是代码，时间总会带来各种磨损，需要不断的维修、更换部分零件，甚至在某个时点可能需要彻底改造。尽管数字与二进制不会像物理材料那样自然衰退，但“软件腐烂”这一说法恰如其分地描述了未经维护的软件随着时间推移而不断恶化的状态，就好似有机体逐渐腐败一般。作为一名软件开发者，你往往得在长时间的磨炼中，亲眼见证代码腐朽、总结教训，并逐渐领悟长期维护的深刻道理。&lt;/p&gt;
&lt;p&gt;我不禁想起&lt;a href=&quot;https://www.goodreads.com/quotes/835238-indeed-the-ratio-of-time-spent-reading-versus-writing-is&quot;&gt; Robert C. Martin 关于编程的那句名言&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;阅读代码所花时间远超书写代码的时间，比例大概在 10:1 以上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这在一定程度上揭示了一个事实：在大型、长期的软件项目中，新功能最初的编码仅仅是冰山一角，而随之而来的维护工作才是主要部分，而这份重担，最终都落在了项目维护者的肩上。太多时候，一个提议采用某段代码，实际上是将大部分后续工作无形中转嫁给了别人，即便出发点再如何良好。试问，当你建议在某个软件项目中使用一段代码时——你是否有决心在十年后仍然亲自处理由此引发的所有问题？答案通常是否定的，而维护者却明白，这最终会落到他们头上。正因如此，Linux 内核开发者在面对贡献代码时，往往偏爱那些长期持续贡献的老面孔，而对新来者的代码则持极度谨慎的态度。这种做法虽然可能使社区看起来过于严苛、难以接近，但却体现了长期维护一个项目所需的那份超乎寻常的责任感和承诺，而这正是现实中并非人人都能承担的重任，即便他们初衷再好。&lt;/p&gt;
&lt;p&gt;希望通过这一比喻，我们能够以更现实的角度讨论软件改进的问题，更好地平衡在大型项目中提出与采纳改进建议时那错综复杂的人际与技术挑战——无论是在 Construct 还是 Linux 内核中，都是如此。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;全文编译自：&lt;a href=&quot;https://www.construct.net/en/blogs/ashleys-blog-2/reality-long-term-software-1892&quot;&gt;The reality of long-term software maintenance from the maintainer&#39;s perspective&lt;/a&gt;&lt;/p&gt;
 </description><link>https://utgd.net/article/21076</link><guid isPermaLink="false">https://utgd.net/article/21076</guid><pubDate>Wed, 05 Mar 2025 03:00:00 GMT</pubDate><category>每周消息</category><category>Long Term Development</category><category>Software Maintenance</category><category>Technical Debt</category></item><item><title>浏览文件信息的另一种轻量化思路（macOS）</title><description>&lt;img src=&quot;https://cdn.utgd.net/images/_e689f4bd-223c-4dce-a88f-a23b908b923e.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;   &lt;br&gt;UNTAG Premium   &lt;p&gt;对进阶用户而言，查看文件信息，就像外科医生打开胸腔一样司空见惯*；而在 macOS 上，浏览文件信息却不见得轻松。原生系统下主要有两种方式，一种是调整文件视图，可惜信息越多，越占位置；另一种则是直接打开文件信息窗口，但这玩意儿非常反人类，关闭时往往会把 Finder 窗口关了，信息窗口却保留不动。&lt;/p&gt;
&lt;p&gt;曾几何时，QuickLook 插件本是理想选择，我以前就装过一款显示图片信息的插件，轻按空格键一览信息，再按一次则退出。无奈 Apple 对开发者的限制与日俱增，大量插件因无法获得验证而报废。&lt;/p&gt;
&lt;p&gt;所幸……&lt;/p&gt;
 </description><link>https://utgd.net/article/20422</link><guid isPermaLink="false">https://utgd.net/article/20422</guid><pubDate>Wed, 05 Mar 2025 02:58:49 GMT</pubDate><category>方法</category><category>UNTAG Premium</category><category>LaunchBar</category><category>文件管理</category></item><item><title>在 LaunchBar 中浏览文件时自定义重新排序</title><description>&lt;img src=&quot;https://cdn.utgd.net/images/banner_lb_resort.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;   &lt;br&gt;UNTAG Premium   &lt;p&gt;多数参与效率工具与方法论讨论的人，喜欢说“文件管理”，并热衷于谈论种种 Finder 增强插件乃至其替代品。其实，Finder 为代表的一批管理工具在西方名为“browser”，即浏览器，此称谓更能体现一类工具的本质：不是居高临下、不可一世、排他性的管理者，而是多元、多视角的浏览工具。文件还是那些文件，不同的浏览器只是开了不同的窗子，各个视角各有千秋。&lt;/p&gt;
&lt;p&gt;一旦这样想，文件管理工具（文件浏览器）的范畴将大大拓展[^1]，乃至 LaunchBar 这类启动器（launcher）工具也不妨视作文件关键的一环。事实上，我已经用它&lt;a href=&quot;https://utgd.net/article/20422&quot;&gt;轻度浏览文件&lt;/a&gt;、&lt;a href=&quot;https://utgd.net/article/20420&quot;&gt;重命名文件&lt;/a&gt;以及&lt;a href=&quot;https://github.com/BlackwinMin/LaunchBar-gallery/tree/master&quot;&gt;触发各类批量自动化动作&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;但，就文件浏览而言，很遗憾，LaunchBar 默认仅支持根据字母顺序排序，这在西文统治的欧美没什么问题，但对东亚文字使用者而言恐有不便。[^2]&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://cdn.utgd.net/assets/uploads/2022/00/minja-0919121459.png&quot; alt=&quot;Alt text&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
    &lt;figcaption&gt;LaunchBar 默认只支持字母表顺序排序&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;退而求其次，至少能不能像 Finder 那样，按照文件拓展名（类似于文件类型）、大小或日期排序？&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://cdn.utgd.net/assets/uploads/2022/00/minja-0919121451.png&quot; alt=&quot;Alt text&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
    &lt;figcaption&gt;Finder 拥有丰富的排序方式&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;LaunchBar 本身也做不到，不过，本文找到了突破口，并且设计了纯 LaunchBar 方案和配合 Keyboard Maestro 的操作简化版。&lt;/p&gt;
&lt;img src=&quot;https://cdn.utgd.net/assets/uploads/2022/00/minja-0919122240.png&quot; alt=&quot;Alt text&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
    &lt;figcaption&gt;按不同的方式排序文件&lt;/figcaption&gt;
 </description><link>https://utgd.net/article/21078</link><guid isPermaLink="false">https://utgd.net/article/21078</guid><pubDate>Tue, 04 Mar 2025 10:00:00 GMT</pubDate><category>UNTAG Premium</category><category>方法</category><category>LaunchBar</category><category>文件处理</category><category>文件管理</category></item><item><title>日常工具包：关于通用生产环境的讨论</title><description>&lt;img src=&quot;https://cdn.utgd.net/images/banner_tools.jpeg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;    &lt;p&gt;我们偶尔有这样的经历：长时间胶着于一个技术难题上，突然有人说，你按一下某某快捷键，或者把那堆乱糟糟的数据丢到文本编辑器里&lt;a href=&quot;https://utgd.net/article/%E8%AF%B7%E5%9B%9E%E5%BF%86%E4%B8%80%E4%B8%8B%E2%80%9C%E5%A6%82%E4%BD%95%E7%A7%BB%E9%99%A4%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F%E2%80%9D%E8%BF%99%E4%B8%AA%E5%8F%A4%E8%80%81%E7%9A%84%E9%97%AE%E9%A2%98%E3%80%82%E5%A6%82%E6%9E%9C%E4%BD%A0%E4%B8%8D%E8%A7%89%E5%BE%97%E5%AE%83%E5%8F%A4%E8%80%81%EF%BC%8C%E9%82%A3%E4%B9%88%E5%A4%AA%E5%A5%BD%E4%BA%86%E3%80%82%E8%AF%B7%E8%AF%95%E7%9D%80%E8%A7%A3%E5%86%B3%E4%B8%80%E4%B8%8B%E8%BF%99%E4%B8%AA%E9%97%AE%E9%A2%98%E3%80%82&quot;&gt;^1&lt;/a&gt;……忽然，所有问题迎刃而解。这就像你买了瓶瓶罐罐试图洗掉浴室台面上的污渍却无功而返，突然间有网友提议用牙膏抹在上面试试，随后一切势如破竹。每逢此际，我总会感叹：人们总是&lt;strong&gt;忘了自己所处的日常环境&lt;/strong&gt;，忽视了许多唾手可得的工具与方法。&lt;/p&gt;
&lt;p&gt;同时，我们又常常&lt;strong&gt;质疑别人所处的环境&lt;/strong&gt;，结果陷入了消费主义和过激的反消费主义应激之中：一个人推荐了一款A软件，马上有另一个人跳出来说，为什么不尝试一下B软件呢？难道C软件不香吗？D软件不了解一下？此时，通常又会有第三个人跳出来，痛批前面的人中了消费主义的陷阱，只知道买买买。最后，争论变成政治意见的垃圾场，大家只是丢出不健康的情绪，却得不出任何有益的结论。任何一种立场，任何一个标签，如果推行到极致，结果就是什么事情都做不了。若不停购买工具，最后就容易陷入娱乐主义，&lt;a href=&quot;https://utgd.net/article/20104/&quot;&gt;娱乐至上，把玩弄工具当成了目的&lt;/a&gt;；而什么都不买实际上根本不可能，因为一个人只要在网上发表了这个言论，就意味着他买了一台电脑或手机——起码也是租的——那他就没有资格反对消费（尽管可以反对消费主义）。&lt;/p&gt;
&lt;p&gt;以上种种弊端，根源在于讨论参与者只是闷头相斗，没有抬起头来尝试观察&lt;strong&gt;日常环境&lt;/strong&gt;。此处的“日常”难有严格标准，盖各人各异，就像北方人所谓的家常菜，在南方人看来或许就丰盛如年夜饭（至少就食材用量而言）。但如果继续深挖，则不难发现，所谓的日常环境，其实是&lt;strong&gt;由一系列物质材料组成的&lt;/strong&gt;，而不是一堆小工具的简单拼凑。如果我们放弃把电脑看作软件缝合怪，转而把它当作一个堆满了原材料的游乐场，那么你就可以针对材料选择工具。在这种&lt;a href=&quot;https://utgd.net/article/20714&quot;&gt;基于材料的视角下&lt;/a&gt;，各方不必剑拔弩张，不用诘屈聱牙，因为只要&lt;strong&gt;大家在处理的同一个问题、面对同一类材料&lt;/strong&gt;，双方就有继续沟通的基础。&lt;/p&gt;
&lt;p&gt;我们不妨试着从材料视角出发，看看我们平时在&lt;strong&gt;处理什么东西&lt;/strong&gt;，然后再反过来确定用什么工具。我惊讶于事情之简单：大多数工作其实不用花钱，真的可以放心交给日常工具——通常是原生软件和常见的开源软件——而相当一部分稍微棘手一些的材料，一般也只需要购买少数工具或服务。&lt;/p&gt;
&lt;p&gt;久之，我尝试用&lt;strong&gt;日常工具包&lt;/strong&gt;来描述一个理想中的&lt;strong&gt;通用生产环境&lt;/strong&gt;，以期消除中文圈——或许也包括欧美互联网——讨论中的隔阂，建立新的交流基础；即便做不到这一切，在最差的情况下，想必读完本文后，读者多多少少也能掌握一些零散但实用的技巧。&lt;/p&gt;
&lt;h2&gt;处理文本的工具&lt;/h2&gt;
&lt;p&gt;正如一个家里肯定能翻出剪刀或刻刀等最基础的工具，电脑上也必定安装了文本处理工具，无论是 Windows 上的写字版还是 macOS 上的文本编辑器，通常足以处理大部分的纯文本和富文本。&lt;/p&gt;
&lt;p&gt;——文本编辑器有什么好谈的？看上去如此简陋，像是上个世纪的古董，没有时髦笔记软件中的按钮，更没有在线服务的同步和分享功能，何必费口舌？有这种想法的人，大概率根本就不知道怎么用文本编辑器。不妨做个测试：假设有几行文本，现需在每一行前面加上项目符号，让文本看上去整洁一点，你会怎么做？在文本编辑器中，有个又快又准且不用写代码的方法：按住 &lt;code&gt;⌥Option&lt;/code&gt; 键，进入&lt;a href=&quot;https://utgd.net/article/20485/&quot;&gt;列编辑模式&lt;/a&gt;，在各行开头竖着拉一下，就能同时在各行开头输入符号。&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://cdn.utgd.net/assets/uploads/2022/00/minja-0225160525.gif&quot; alt=&quot;Alt text&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
    &lt;figcaption&gt;批量插入文本&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;拓展阅读：&lt;a href=&quot;https://utgd.net/article/20485/&quot;&gt;工具论ABC：普通用户也用得上的列编辑&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;再做一个测试：假设你从某个不太讲究的微信公众号上复制了一篇文章，发现里面全是手打的换行符号，现在需要将其批量清楚，如何最简单？答案依旧是文本编辑器：启用查找和替换，插入一个换行符号，接着将其消除掉或者缩减到只留一个。&lt;/p&gt;
&lt;p&gt;以上都只是文本编辑器的初级用法，如果你懂一点正则表达式或者愿意稍微了解一下&lt;a href=&quot;https://utgd.net/article/20313/&quot;&gt;轻量级代码编辑器&lt;/a&gt;——如果你害怕写代码，大不了把代码高亮功能关掉，那么这些代码编辑器看上去就和系统自带的文本编辑器差不多——你几乎可以对文本做任何事，无论是&lt;a href=&quot;https://utgd.net/article/20536/&quot;&gt;一键修整全文格式&lt;/a&gt;、&lt;a href=&quot;https://utgd.net/article/20473/&quot;&gt;修改网页的原始代码&lt;/a&gt;、&lt;a href=&quot;https://utgd.net/article/20555/&quot;&gt;超越系统限制打造自定义多文件夹搜索&lt;/a&gt;甚至批量改动 Shortcuts 动作中的细节，只要你想处理的东西是一段文本或者可以转化成文本格式，那么文本编辑器就是解牛的利刃。&lt;/p&gt;
&lt;p&gt;拓展阅读：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://utgd.net/article/20536/&quot;&gt;为什么，以及如何制作 Markdown 版民法典&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://utgd.net/article/20473/&quot;&gt;如何修正对照翻译中的排版瑕疵：修复数学公式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://utgd.net/article/20529/&quot;&gt;Hum：同时在 Finder 里搜索几个指定文件夹里的文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://utgd.net/article/20555/&quot;&gt;如何在 Finder 中同时搜索多个文件夹（附自动化）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相反，如果没有意识到眼前之物实则是文本，而是把它们看作代码、智能文件夹、Shortcuts 动作或连打开方式都搞不清的配置文件，那么这些纸老虎确实会膨胀成拦路虎。&lt;/p&gt;
&lt;p&gt;持材料和功能两种视角的人，就像一个熟练使用少数几把菜刀的厨师，和一个被淹没在花式切菜新奇特小工具堆里的新手，两者差距，不可谓不大。&lt;/p&gt;
&lt;h2&gt;现代的浏览器&lt;/h2&gt;
&lt;p&gt;文本编辑器自然见于每台电脑——但不包括 iPad，所以&lt;a href=&quot;https://utgd.net/article/20432/&quot;&gt;我不用 iPad&lt;/a&gt;——还有另一个工具，相信没有哪台电脑敢不预装的：&lt;strong&gt;浏览器&lt;/strong&gt;。且让我们抛开各种意识形态不谈，以免被浏览器圣战的战火波及，至少可以就浏览器之常见达成共识：macOS 上的 Safari 和 Windows 自带的 Edge 都不算太糟糕，如果你实在受不了，大不了装一个免费的 Chrome 或 Firefox，总之，鉴于现代的主流浏览器如此易得，我们大可将现代浏览器也视作生产环境的一部分。&lt;/p&gt;
&lt;p&gt;紧随其后，便轮到材料视角的转换：&lt;strong&gt;谁说浏览器只能浏览网页&lt;/strong&gt;？几乎所有浏览器也可以查看各类本地文件，并且常常带来惊喜。较早版本的 Edge 就可以阅览 EPUB 电子书，很多人在电脑上没有装专门的阅读器，结果发现自带的浏览器可以看书，还挺流畅（但是更换内核后似乎不行了）。事实上，相当一部分本地文件都可以用浏览器打开，包括 PDF 文档、图片当然还有 HTML 文件。&lt;/p&gt;
&lt;p&gt;PDF 阅读器倒也是日常工具包的一员，不过我偶尔还是会用 Safari 浏览器检索 PDF，因为它可以高亮当前文档中的全部搜索结果，而不仅限于当前这一页。在浏览一份较长的陌生文件时，我通常会先确定几个关键词，然后用 Safari 快速扫一眼。[^2]&lt;/p&gt;
&lt;p&gt;浏览器在处理图片时也有奇效。我曾摸索到&lt;a href=&quot;https://utgd.net/article/20655&quot;&gt;一套打印长截图的方法&lt;/a&gt;，原理很简单，无非用浏览器打开图片，再尝试打印它，其间只需微调参数，原本细细长长的截图就会被自动分割在几个页面里，打印后不至于细小到连内容都看不清。&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://cdn.utgd.net/assets/uploads/2022/00/minja-0225160535.png&quot; alt=&quot;Alt text&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
    &lt;figcaption&gt;直接打印的长截图（左）和通过浏览器打印的长截图（右）&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;拓展阅读：&lt;a href=&quot;https://utgd.net/article/20655/&quot;&gt;更漂亮地打印长截图，一种低技术方案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTML 文件更是潜力无限。在&lt;a href=&quot;https://utgd.net/article/4991&quot;&gt;很早的文章里&lt;/a&gt;，我就将想要翻译的文章或书籍弄成 HTML 格式，然后丢给 Safari 翻译，借用浏览器自带的翻译功能，免费、无限量翻译外文资料。后来我又继续薅羊毛，用 Safari 批量翻译 RSS 文章的标题，配合适当的自动化工具，&lt;a href=&quot;https://utgd.net/article/20659&quot;&gt;几秒钟就能翻译成百上千篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://cdn.utgd.net/assets/uploads/2022/00/minja-0225160544.jpg&quot; alt=&quot;Alt text&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
    &lt;figcaption&gt;在 Kindle 上阅读对照翻译后的电子书 图：我自己&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;拓展阅读：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://utgd.net/article/4991&quot;&gt;一种几乎永不失效的网页中英对照翻译方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://utgd.net/article/10001&quot;&gt;将外文电子书翻译成双语对照版本，并在任何设备上阅读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://utgd.net/article/20659/&quot;&gt;本地 RSS 标题翻译高速方案（DEVONthink 版）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上种种做法，固然不是浏览器的“正确打开方式”，然而我们要抛弃的恰恰是功能主义，不要认为浏览器只能浏览网页——它还可以处理本地文档。在北美曾有过一阵子关于&lt;a href=&quot;https://maggieappleton.com/folk-interfaces&quot;&gt;用户端编程&lt;/a&gt;的讨论，浏览器就是重要案例，有人发现，部分初学者或业余玩家并不使用专门的代码编辑器，而是直接在网页控制台里面运行 Javascript 代码，肯定不“正统”，但往往非常有效。这就好比，如果你恰好能够用刀背刮掉鱼鳞并且不算费力，那么为什么非得买一个专门的刮刀呢？&lt;/p&gt;
&lt;h2&gt;一款主流的免费自动化工具&lt;/h2&gt;
&lt;p&gt;所谓环境，并不完全自然生成，使用者也在改造环境。对于稍微有一些动手能力的读者来说，&lt;strong&gt;自动化工具&lt;/strong&gt;恐怕也如自然环境中的山川湖海一样稀松平常。&lt;/p&gt;
&lt;p&gt;在 Apple 环境中，“日常”“自然”就意味着你起码要掌握 Shortcuts 和 Automator 两款免费工具（都是原生的），如果有可能的话，最好再学习一下 Keyboard Maestro 等人气较高的工具。这几款软件都积累了几年甚至十几二十年的素材，小到&lt;a href=&quot;https://utgd.net/article/8374&quot;&gt;扫码&lt;/a&gt;，（貌似）复杂如&lt;a href=&quot;https://utgd.net/article/9180&quot;&gt;从网页上扒图片&lt;/a&gt;，你找到的热门方案很可能就是一个 Shortcuts 动作或 Automator 工作流。&lt;/p&gt;
&lt;p&gt;拓展阅读：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://utgd.net/article/8374&quot;&gt;一键打开健康码，以及更多：Shortcuts 的物理外挂&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://utgd.net/article/9180&quot;&gt;用 Automator 批量下载 Safari 网页图片&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://utgd.net/product/17&quot;&gt;独辟蹊径：Shortcuts 设计之道 | 产品详情 - #UNTAG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://utgd.net/article/20178/&quot;&gt;Automator 手册序章：人人都有机会成为 macOS 高手&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是，常见或主流并不代表着就得限于这些工具。正如买菜一样，你可以找个水龙头洗干净直接吃，也可以带回去精心烹调。自动化动作说到底也&lt;strong&gt;只是一系列材料&lt;/strong&gt;，你可以从 Shortcuts 动作或 Automator 工作流中挖出你所需要的那部分。其实，很多自动化动作都是脚本套壳，特别是不及第三方软件那么灵活的 Shortcuts 和 Automator，往往稍微进阶一些的功能就要依靠脚本，此时你就可以挖出里面的核心代码，塞到其他更顺手的工具里。&lt;/p&gt;
&lt;h2&gt;运行脚本的工具&lt;/h2&gt;
&lt;p&gt;既然谈到自动化工具，就不得不提及&lt;a href=&quot;https://utgd.net/article/9583&quot;&gt;自动化的两种主要方式&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在设计自动化动作时，还会权衡一下哪种方案最省力，一般来说，我会面临两类自动化方案：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;第一，GUI Scripting，即基于 GUI（图形界面）的自动化，主要是模拟键鼠操作，需要懂点脑筋、观察一下实际操作，把人的动作翻译成有规律的键鼠操作，交给电脑执行。多数场合下，GUI Scripting 往往简单有效，而且不需要深层的编程知识。这类自动化中最常用的工具就是 Keyboard Maestro。不过，GUI Scripting 恐有临时建筑之嫌，盖其并不需要了解软件背后做了什么，纯粹模仿使用者的动作，你甚至有机会看到光标自己在屏幕上跳动，绝对和“优雅”二字沾不上边。随着软件界面本身的改动，原先的 GUI Scripting 自动化动作也很可能失效，毕竟它们本身就仪仗图形界面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;第二类是更底层的脚本，直接和软件交流。比如写一个 AppleScript 脚本用于开关暗色模式，就不需要模拟键鼠操作，速度更快、更无痕。显然，这类自动化门槛也更高，前述 AppleScript 就有专门字典（Dictionary），以便使用者可以掌握自动化工具的“方言”。在发现自动化可能性的时候，我会预估一下以后遇到类似问题的概率如何，若是很可能还要打照面，我会写一个相对底层的脚本，尽量确保长期有效；但很多时候，如果只是想临时凑合用，或者任务太急、没工夫打磨自动化动作，这时候就倾向于使用 GUI Scripting。相较于动辄几百上千个可用元素的脚本，制作 GUI Scripting 动作只需要知道两类操作：鼠标点击，以及键盘按键，因为我们和电脑交互时，基本也只涉及这两类输入方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本节关注第二类。日常的自动化工具方便我们获得现成资源，而其中偶尔有代码，与之配套，就需要准备一款跑代码的工具——在 macOS 的环境里面，你可能会遇到 AppleScript、Shell Script、Python 和 JavaScript。&lt;/p&gt;
&lt;p&gt;——但，不用把事情想得太复杂，本文无意讨论如何编写自动化动作（或代码），此处只考虑更日常、更简单的情况：你得到一串代码，想微调其中几个参数。通常，你只需要文本编辑器；若有不愔代码的读者还想顺便掌握一点代码技巧，或起码和这些花花绿绿的玩意儿混个脸熟，则可以趁机用一用&lt;a href=&quot;https://utgd.net/article/20313/&quot;&gt;轻量级代码编辑器&lt;/a&gt;。&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://cdn.utgd.net/assets/uploads/2022/00/minja-0225160556.png&quot; alt=&quot;Alt text&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
    &lt;figcaption&gt;用 BBEdit 高亮显示简单的代码片段&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;免费的编辑器甚至不能直接跑代码——例如我在用 CotEditor——但无妨，毕竟本节也不考虑调试代码的复杂情况。所谓日常环境中的“编程”，其实是一道缓冲地带，在这里，你只需修改现有材料，就像拧松自行车上的螺丝而不是从头开始造一辆车。不过，这恰恰可以让编程门外汉若有所得，并愿意稍稍往日常地带之外迈步。&lt;/p&gt;
&lt;p&gt;材料视角之下，自动化语境中的代码片段并无神秘之处。&lt;/p&gt;
&lt;h2&gt;模拟键鼠的工具&lt;/h2&gt;
&lt;p&gt;即便是一个接受了材料视角的人，恐怕也要稍微做些心理工作，才能接受如下事实：在数字世界中，&lt;strong&gt;屏幕上的每一个像素点，以及几乎任何键盘和鼠标操作&lt;/strong&gt;，也都可以作为自动化的材料。这一路径就是上一节提及的 GUI Scripting。&lt;/p&gt;
&lt;p&gt;GUI Scripting 一般不需要太复杂的代码知识，而在 Keyboard Maestro 之类的软件中，你压根就不用写代码。一个经典用例即模拟输入信用卡信息，老外经常在网上报税，而网页千变万化，写代码反而把简单问题复杂化，不如直接模拟键鼠操作；类似的，在国内登录校园网或公司内网，也可以取道 GUI Scripting。[^3]&lt;/p&gt;
&lt;p&gt;在暂时找不到其他方法，或者情况紧急、无暇细细设计自动化动作时，键鼠模拟常常最直接、最有效。我在工作中常和 PDF 文件打交道，但 macOS 上的进阶编辑工具——不考虑天价的 Adobe Acrobat Pro——屈指可数，而且不少已经停止更新或沦为跨平台的套壳玩具。不过，我借助 GUI Scripting，还是完成了&lt;a href=&quot;https://utgd.net/article/20515/&quot;&gt;编页码&lt;/a&gt;和加目录的辛苦活，虽说和成熟的商业软件不可同日而语，但是原本半个小时的工作如今被被压缩到去一趟洗手间的时间，也非常划算。&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://cdn.utgd.net/assets/uploads/2022/00/minja-0225160607.gif&quot; alt=&quot;Alt text&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
    &lt;figcaption&gt;让 Keyboard Maestro 代替人工编页码&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;关键在于，要学会把抽象的操作视作具体的材料。&lt;/p&gt;
&lt;h2&gt;图片、PDF 和其他：作为瑞士军刀的预览工具&lt;/h2&gt;
&lt;p&gt;上一节提到了用 Keyboard Maestro 制作 PDF 加工工具，这也要归功于系统自带的预览工具：它本身就是一个多功能 PDF 阅读器和轻量级编辑器。&lt;/p&gt;
&lt;p&gt;同时，预览工具还有常见的图片标注功能，可以简单拼接、叠放图片，这貌似简单的特性，实则打开了全新的窗口——&lt;strong&gt;自定义图片标注&lt;/strong&gt;。我曾编写过一个轻量级标注工具，原理很简单，无非实现准备一些个性化的标注素材，再叠放在图片上，随后调整一下位置、拉伸一下尺寸、旋转一下角度，就实现了那些时髦标注工具中的大部分功能。类似的事情在 Shortcuts 中也可以完成。&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://cdn.utgd.net/assets/uploads/2022/00/minja-0225160613.png&quot; alt=&quot;Alt text&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
    &lt;figcaption&gt;用 Keyboard Maestro 自定义图片标注&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;拓展阅读：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://utgd.net/article/20123/&quot;&gt;轻量级图片标注方案：Keyboard Maestro 篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://utgd.net/article/20118/&quot;&gt;轻量级图片标注方案：Shortcuts 篇&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当你眼中是一系列&lt;strong&gt;可随意处置的原材料&lt;/strong&gt;时，就不会被局限在专有工具的固有概念里。&lt;/p&gt;
&lt;h2&gt;小结&lt;/h2&gt;
&lt;p&gt;从文本编辑器、浏览器、轻代码编辑器、Shortcuts、Automator、Keyboard Maestro 到预览工具，本文尝试勾勒了一个 macOS 下的日常工具包，描摹了一种相对容易打造的通用生产环境，而这些简单的工具——只有 Keyboard Maestro 需要付费——足以完成相当一部分任务。&lt;/p&gt;
&lt;p&gt;我对工具包概念的重新关注源自技术作家 Venkatesh Rao 的&lt;a href=&quot;https://www.ribbonfarm.com/2022/04/21/the-ribbonfarm-lab/&quot;&gt;启发&lt;/a&gt;，他除了写代码，平时还喜欢做木工或摆弄电子小玩具，在刻板印象中，他这样的 Geek 想必拥有挂满了工具的工作间吧——就像那些 YouTube 网红一样？事实完全相反，Rao 并没有购置那些所谓的专业工具包，相反，他用厨房、浴室和汽车后备箱中的常见工具完成了大部分工作（包括一个拿了奖的机器人）。这些小东西，或许你家现在没有，但只要去楼下转一转，半个小时内基本就可以采购齐全，而且花不了两顿饭钱。何为“日常”，莫过于此。&lt;/p&gt;
&lt;p&gt;[^2]: 好吧，后来我用 FoxTrot 了。不过，尚未收入数据库、未经 FoxTrot 索引的 PDF 文件，我还是习惯用 Safari 浏览。&lt;/p&gt;
&lt;p&gt;[^3]: 有能力的读者可以看看那些古董政务网站的登录界面，你既不能指望现代的密码管理器兼容它们，也不太有希望自己写一个填充工具。&lt;/p&gt;
 </description><link>https://utgd.net/article/21077</link><guid isPermaLink="false">https://utgd.net/article/21077</guid><pubDate>Mon, 03 Mar 2025 10:00:00 GMT</pubDate><category>观点</category><category>Essentials</category><category>Keyboard Maestro</category><category>PDF</category><category>低技术</category><category>效率思维</category><category>降低思维负荷</category></item><item><title>DEVONthink 这样的软件是“要灭绝恐龙”吗？</title><description>&lt;img src=&quot;https://cdn.utgd.net/images/DEVONthink_%E8%AE%BA%E5%9D%9B%E7%9A%84%E4%BA%89%E8%AE%BA%E6%9C%89%E4%BA%BA%E8%AF%B4%E5%AE%83%E6%98%AF%E5%B0%86%E6%AD%BB%E7%9A%84%E6%81%90%E9%BE%99.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;    &lt;p&gt;&lt;a href=&quot;https://discourse.devontechnologies.com/t/devonthink-a-dying-dino/81693/23&quot;&gt;🔗 原帖链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原贴出自 DEVONThink 论坛。原帖作者 AndreasEbner 表达了对 DEVONthink 的不满，尤其是网页剪辑工具的问题、扩展功能失效，以及认为 DEVONthink 没有听取用户反馈，导致他转向其他工具如 Obsidian。他提到 PKM（个人知识管理）功能不符合需求，并宣布将停止使用 DEVONthink。&lt;/p&gt;
&lt;p&gt;接下来，其他用户对此进行了回应。一部分用户支持 DEVONthink，认为它稳定可靠，文档管理能力强，支持多种格式，同步功能优秀，并且开发团队响应迅速。他们指出网页剪辑的问题可能源于 Chrome 的更新，而非软件本身，并建议使用打印为 PDF 的替代方法。&lt;/p&gt;
&lt;p&gt;同时，有用户质疑 AndreasEbner 是否代表大多数用户，强调 DEVONthink 在满足他们的需求方面表现出色。&lt;/p&gt;
&lt;p&gt;讨论中还涉及其他知识管理工具如 Notion、Tana、Logseq 和 Obsidian 的比较。支持者认为这些工具在某些方面更灵活，尤其是支持块级数据管理，适合诗歌创作等特定需求。但反对者指出这些工具存在数据锁定、导出困难等问题，而 DEVONthink 的可靠性和灵活性更胜一筹。&lt;/p&gt;
&lt;p&gt;此外，用户们讨论了个人知识管理系统的不同需求，有些人偏好 Markdown 和高度链接的系统，而另一些人则更看重 DEVONthink 的多格式支持和强大的搜索功能。还有用户提到长期使用 DEVONthink 的经验，认为其稳定性和持续更新是主要优势，尽管可能缺乏某些新功能。&lt;/p&gt;
&lt;p&gt;许多用户使用 DEVONthink 超过 10 年，称赞其同步能力（WebDAV/Bonjour）、与 Scrivener 等工具的兼容性，以及开发团队的持续优化（如移动端支持）。&lt;/p&gt;
&lt;p&gt;用户比喻 DEVONthink 为 “数字文件柜” 和 “信任的斯巴鲁汽车”，强调其 “可忽略性”（无需频繁维护仍能高效运作）。&lt;/p&gt;
&lt;p&gt;帖子反映了用户对生产力工具的不同需求：部分人追求新功能与灵活性，另一些人则更看重稳定性和多场景适用性。尽管存在批评，DEVONthink 仍因其强大的文档管理能力和用户忠诚度被视为 “不可替代的工具”。&lt;/p&gt;
 </description><link>https://utgd.net/article/21069</link><guid isPermaLink="false">https://utgd.net/article/21069</guid><pubDate>Fri, 28 Feb 2025 02:00:00 GMT</pubDate><category>每周消息</category><category>DEVONthink</category><category>个人知识管理</category><category>效率</category></item><item><title>AI 提示词为什么不是越长越好？</title><description>&lt;img src=&quot;https://cdn.utgd.net/images/AI_%E6%8F%90%E7%A4%BA%E8%AF%8D%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%98%AF%E8%B6%8A%E9%95%BF%E8%B6%8A%E5%A5%BD.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;   &lt;br&gt;UNTAG Premium   &lt;p&gt;你是否有过这样的经历？为了让 AI 画出 “阳光透过梧桐叶洒在石板路” 的意境，写了三百字描述，结果它却交出一张梧桐树照片；但当你只说 “法式梧桐斑驳光影”，生成质量反而提升。&lt;/p&gt;
&lt;p&gt;这个现象其实在大语言模型和 AI 绘图方面都有体现。网上有些教程会给一大段玄而又玄的 Prompt，但效果未必比一句简短的“人话”输出结果更好。甚至稍微多问几次就完全不按照要求执行了。&lt;/p&gt;
&lt;p&gt;所以本文想用尽量通俗的语言聊聊“AI 提示词为什么不是越长越好？”这个话题。&lt;/p&gt;
&lt;h3&gt;注意力蛋糕理论&lt;/h3&gt;
&lt;p&gt;想象 AI 大脑里有一块固定大小的蛋糕，每个字都在瓜分这块蛋糕。当我们输入 “请用幽默的口吻，以三个分论点，对比分析新能源汽车和燃油车的优缺点，控制在 800 字以内” 时，“幽默”“三个分论点”“对比分析”“800 字” 这些关键词都在争夺蛋糕 —— 最终每个词分到的注意力可能不足 20%。&lt;/p&gt;
&lt;p&gt;最新研究显示，当提示词包含超过 5 个非核心要素时，AI 对主任务的关注度会骤降 37%。这就像同时给厨师下达 “做川菜”“少放盐”“用青花瓷盘装”“摆成心形”“五分钟完成” 等等细节指令，甚至写一篇小作文细化所有细节，反而容易得到一盘四不像的菜品。&lt;/p&gt;
&lt;p&gt;而“做一份微辣的麻婆豆腐”这样的明确指令，反而可以让厨师（AI）有更明确的目标，用户也能获得更符合预期的效果。&lt;/p&gt;
&lt;h3&gt;上下文窗口限制&lt;/h3&gt;
&lt;p&gt;你可能听说过 AI 有 “上下文窗口”，通俗的讲，上下文窗口就像哆啦 A 梦的记忆面包（只要把内容印在面包上，再吃下去，就能记住内容）。但这块面包的容量是有限的：当前最先进的模型能记住约 30 万汉字（128K Token），不过面包的新鲜度会从第一口开始递减。&lt;/p&gt;
 </description><link>https://utgd.net/article/21075</link><guid isPermaLink="false">https://utgd.net/article/21075</guid><pubDate>Thu, 27 Feb 2025 10:00:00 GMT</pubDate><category>观点</category><category>AI</category><category>观点</category></item></channel></rss>