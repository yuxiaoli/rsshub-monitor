<?xml version="1.0" encoding="UTF-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>SYCL.tech news</title><link>https://feeds.sycl.tech/news/feed.json</link><atom:link href="http://rsshub.henry.wang/sycl/news" rel="self" type="application/rss+xml"></atom:link><description>SYCL.tech news - Powered by RSSHub</description><generator>RSSHub</generator><webMaster>contact@rsshub.app (RSSHub)</webMaster><language>en</language><lastBuildDate>Tue, 25 Mar 2025 00:46:58 GMT</lastBuildDate><ttl>14</ttl><item><title>Open3D v0.19 Brings Cross-Platform GPU Support Via SYCL</title><description>&lt;p&gt;Open3D v0.19 is out as the newest feature release to this open-source library
for 3D data processing in C++ and Python. Open3D provides various 3D data structures,
processing algorithms, 3D visualizations, physically based GPU rendering,
and machine learning integration with the likes of PyTorch and TensorFlow to offer
powerful 3D data processing capabilities.&lt;/p&gt;</description><link>https://www.phoronix.com/news/Open3D-v0.19-Released</link><guid isPermaLink="false">https://www.phoronix.com/news/Open3D-v0.19-Released</guid><pubDate>Wed, 08 Jan 2025 06:10:22 GMT</pubDate><author>Max Brunton</author></item><item><title>Migrating High-performance Flood Modelling Software from CUDA to SYCL with oneAPI</title><description>&lt;p&gt;Floods cause enormous damage each year, posing significant threats to people and infrastructure. Due to climate change,
we are seeing more frequent and severe flood events around the world. Hydrodynamic flood models are powerful tools to
help with reducing flood risks. They can simulate the behaviour of water flow and the extent of flooding during a flood
event. These models are essential for predicting floods and understanding flood risks, and ultimately help increase
societal resilience.&lt;/p&gt;</description><link>https://community.intel.com/t5/Blogs/Tech-Innovation/Tools/Migrating-High-performance-Flood-Modelling-Software-from-CUDA-to/post/1630530</link><guid isPermaLink="false">https://community.intel.com/t5/Blogs/Tech-Innovation/Tools/Migrating-High-performance-Flood-Modelling-Software-from-CUDA-to/post/1630530</guid><pubDate>Thu, 19 Sep 2024 06:10:22 GMT</pubDate><author>Rod Burns</author></item><item><title>oneAPI Construction Kit 4.0 Brings RISC-V Host CPU Support</title><description>&lt;p&gt;Last year the oneAPI Construction Kit was introduced by Intel-owned Codeplay Software for bringing SYCL to new hardware
even for hardware outside of Intel&#39;s offerings. One of the early targets of this oneAPI Construction Kit support was for
RISC-V processors and now with today&#39;s release of oneAPI Construction Kit 4.0 there is finally RISC-V host CPU support.&lt;/p&gt;</description><link>https://www.phoronix.com/news/oneAPI-Construction-Kit-4.0</link><guid isPermaLink="false">https://www.phoronix.com/news/oneAPI-Construction-Kit-4.0</guid><pubDate>Tue, 30 Jul 2024 06:10:22 GMT</pubDate><author>Max Brunton</author></item><item><title>AdaptiveCpp 24.06 Released As &quot;The Fastest Heterogeneous C++ Compiler&quot;</title><description>&lt;p&gt;AdaptiveCpp as the open-source compiler formerly known as hypSYCL and Open SYCL is out with a new feature release for
this C++ heterogeneous compiler supporting all major CPUs and GPUs.&lt;/p&gt;</description><link>https://www.phoronix.com/news/AdaptiveCpp-24.06-Released</link><guid isPermaLink="false">https://www.phoronix.com/news/AdaptiveCpp-24.06-Released</guid><pubDate>Tue, 30 Jul 2024 06:10:22 GMT</pubDate><author>Max Brunton</author></item><item><title>Learn SYCL* in an Hour (Maybe Less)</title><description>&lt;p&gt;In this piece, I will introduce all the key things to know to program in C++ with SYCL.&lt;/p&gt;
&lt;p&gt;I obviously will cover only the bare essentials; therefore, I&#39;m not teaching everything that you would find in a 
500-page book on SYCL. If you tell me that surprises you, I will assume you are joking.&lt;/p&gt;
&lt;p&gt;We will learn the basics (1-2-3) and have a small working program that we can use to explore more as we wish.&lt;/p&gt;</description><link>https://www.intel.com/content/www/us/en/developer/articles/technical/learn-sycl-in-an-hour-maybe-less.html</link><guid isPermaLink="false">https://www.intel.com/content/www/us/en/developer/articles/technical/learn-sycl-in-an-hour-maybe-less.html</guid><pubDate>Thu, 20 Jun 2024 06:20:58 GMT</pubDate><author>Rod Burns</author></item><item><title>Portable SYCL Code Using oneMKL on AMD, Intel, and Nvidia GPUs</title><description>&lt;p&gt;Portable SYCL code using oneMKL on AMD, Intel, and Nvidia GPUs, presented by Codeplay and Intel, is part of the
Performance Portability training series. Offered by NERSC, OLCF, and ALCF, the series features training sessions on
various performance portable programming solutions to help ease developer transitions between current and emerging
high-performance computing (HPC) systems, such as the NERSC Perlmutter and ALCF Polaris (AMD CPU and Nvidia GPU), OLCF
Frontier (AMD CPU and GPU), and ALCF Aurora (Intel CPU and GPU).&lt;/p&gt;</description><link>https://www.alcf.anl.gov/events/portable-sycl-code-using-onemkl-amd-intel-and-nvidia-gpus</link><guid isPermaLink="false">https://www.alcf.anl.gov/events/portable-sycl-code-using-onemkl-amd-intel-and-nvidia-gpus</guid><pubDate>Thu, 20 Jun 2024 06:10:22 GMT</pubDate><author>Max Brunton</author></item><item><title>UXL Foundation and Khronos Collaborate on the SYCL Open Standard for C++ Programming</title><description>&lt;p&gt;In a world where AI, HPC and Safety-Critical acceleration is shifting toward heterogeneous architectures that
integrate processors with different architectures from multiple vendors, the need for seamless interoperability and
shared open standards has never been more critical. That&#39;s why the UXL Foundation (Unified Acceleration) and the
Khronos Group have entered into a liaison agreement to help accelerate the evolution of open accelerated
heterogeneous programming.&lt;/p&gt;
&lt;p&gt;At the heart of the UXL-Khronos liaison is a mutual desire for cooperation and synergy to help foster the rapid
evolution of a vibrant and open ecosystem to support heterogeneous programming. Both organizations aim to align
their strengths, particularly in how SYCL from Khronos evolves to meet developer requirements and supporting
and complementing the UXL Foundation libraries, and open source projects—and vice versa.&lt;/p&gt;</description><link>https://www.khronos.org/blog/uxl-foundation-khronos-liaison-on-the-sycl-and-safety-critical-systems</link><guid isPermaLink="false">https://www.khronos.org/blog/uxl-foundation-khronos-liaison-on-the-sycl-and-safety-critical-systems</guid><pubDate>Thu, 20 Jun 2024 06:10:22 GMT</pubDate><author>Rod Burns</author></item><item><title>SYCL in the edge: performance and energy evaluation for heterogeneous acceleration</title><description>&lt;p&gt;Edge computing is essential to handle increasing data volumes and processing capacities. It provides real-time and
secure data processing near data sources, like smart devices, alleviating cloud computing energy use, and saving
network bandwidth. Specialized accelerators, like GPUs and FPGAs, are vital for low-latency edge computing but the
requirements to customized code for different hardware and vendors suppose important compatibility issues.&lt;/p&gt;
&lt;p&gt;This paper evaluates the potential of SYCL in addressing code portability issues encountered in edge computing. We
employed the Polybench suite to compare various SYCL implementations, specifically DPC++ and AdaptiveCpp, with the
native solution, CUDA. The disparity between SYCL implementations was negligible, at just 5%. Furthermore, we
evaluated SYCL in the context of specific edge computing applications such as video processing using three different
optical flow algorithms. The results revealed a slight performance gap of 3% when transitioning from CUDA to SYCL.&lt;/p&gt;
&lt;p&gt;Upon evaluating energy consumption, the observed difference ranged from, depending on the application utilized. These
gaps are the price one may need to pay when achieving the ability to successfully run the same code on two distinct
edge boards. These findings underscore SYCL’s capacity to increase productivity in terms of development costs and
facilitate IoT deployment without being locked into a particular platform or manufacturer.&lt;/p&gt;</description><link>https://link.springer.com/article/10.1007/s11227-024-05957-6</link><guid isPermaLink="false">https://link.springer.com/article/10.1007/s11227-024-05957-6</guid><pubDate>Thu, 20 Jun 2024 05:59:34 GMT</pubDate><author>Rod Burns</author></item><item><title>Teaching SYCL at Durham University, Department of Computer Science</title><description>&lt;p&gt;Professor Tobias Weinzierl from our Durham University Department of Computer Science talks about integrating SYCL
training into the teaching curriculum to equip students with deep understanding of GPU technology.  &lt;/p&gt;</description><link>https://www.durham.ac.uk/research/current/thought-leadership/2024/01/teaching-sycl-at-durham-embedding-a-key-gpu-technology-into-university-curriculum/</link><guid isPermaLink="false">https://www.durham.ac.uk/research/current/thought-leadership/2024/01/teaching-sycl-at-durham-embedding-a-key-gpu-technology-into-university-curriculum/</guid><pubDate>Tue, 06 Feb 2024 03:40:10 GMT</pubDate><author>Rod Burns</author></item><item><title>SYCL Graphs</title><description>&lt;p&gt;Ben Tracy, a Senior Software Engineer at Codeplay, has prepared this blog that introduces SYCL Graphs. This has
recently been introduced in Codeplay&#39;s plugins for oneAPI, and you can read about the feature here.&lt;/p&gt;
&lt;p&gt;&quot;When working with accelerated applications, such as when using GPUs, developers write &lt;strong&gt;compute kernels&lt;/strong&gt; that
are executed one by one on the accelerator. This is called “offloading”, as in, developers are moving computation
off the CPU onto the GPU. Typically, computational kernels operate on data that is coming from the host,
perform some manipulation with that data, and then data goes back to the host CPU so that the application can
continue. However, as more workloads are offloaded to accelerators, it has become increasingly common to offload
multiple kernels that operate with data to the device...&quot;  &lt;/p&gt;</description><link>https://codeplay.com/portal/blogs/2024/01/22/sycl-graphs</link><guid isPermaLink="false">https://codeplay.com/portal/blogs/2024/01/22/sycl-graphs</guid><pubDate>Wed, 31 Jan 2024 03:24:13 GMT</pubDate><author>Rod Burns</author></item><item><title>C-DAC Achieves 1.75x Performance Improvement on Seismic Code Migration</title><description>&lt;p&gt;The India-based premier R&amp;amp;D organization used tools in the Intel® oneAPI Base Toolkit to free itself from vendor
hardware lock-in by migrating its open-source seismic modeling application from CUDA to SYCL. As a result, application
performance improved by 1.75x
on &lt;a href=&quot;https://www.intel.com/content/www/us/en/products/sku/232873/intel-data-center-gpu-max-1550/specifications.html&quot;&gt;Intel® Datacenter GPU Max 1550&lt;/a&gt;
when compared to NVIDIA A100 platform performance.  &lt;/p&gt;</description><link>https://www.intel.com/content/www/us/en/developer/articles/case-study/c-dac-achieves-1-75x-performance-improvement.html</link><guid isPermaLink="false">https://www.intel.com/content/www/us/en/developer/articles/case-study/c-dac-achieves-1-75x-performance-improvement.html</guid><pubDate>Wed, 31 Jan 2024 03:11:59 GMT</pubDate><author>Anonymous</author></item><item><title>Exascale Computing Project at the University of Cambridge uses Khronos SYCL Standard</title><description>&lt;p&gt;Exascale Computing Project at the University of Cambridge uses Khronos SYCL Standard to Develop Performance Portable
FEniCS Libraries for the Finite Element Method.&lt;/p&gt;
&lt;p&gt;Researchers from the University of Cambridge use SYCL™ as a high-performance language for solving differential equations
with the finite element method. SYCL is an open, non-proprietary, royalty-free programming language developed and
maintained by the Khronos® Group open standards consortium, with multiple compiler implementations that enable
performance portable code on new-generation and multi-vendor hardware.   &lt;/p&gt;</description><link>https://www.khronos.org/blog/exascale-computing-project-at-the-university-of-cambridge-uses-sycl-to-develop-performance-portable-fenics-libraries-for-the-finite-element-method</link><guid isPermaLink="false">https://www.khronos.org/blog/exascale-computing-project-at-the-university-of-cambridge-uses-sycl-to-develop-performance-portable-fenics-libraries-for-the-finite-element-method</guid><pubDate>Mon, 13 Nov 2023 03:20:38 GMT</pubDate><author>Max Brunton</author></item><item><title>Samsung SYCL-PIM Processing in Memory Technology at Hot Chips 2023</title><description>&lt;p&gt;At Hot Chips 2023 (35) Samsung is talking about its processing-in-memory(PIM) again with new research and a new twist.
We have covered this previously, for example in our Hot Chips
33 &lt;a href=&quot;https://www.servethehome.com/samsung-hbm2-pim-and-aquabolt-xl-at-hot-chips-33/&quot;&gt;Samsung HBM2-PIM and Aquabolt-XL&lt;/a&gt;.
Now, Samsung is showing this in the context of AI.&lt;/p&gt;
&lt;p&gt;PIM has been made programmable using SYCL through the SYCL-PIM implementation work.  &lt;/p&gt;</description><link>https://www.servethehome.com/samsung-processing-in-memory-technology-at-hot-chips-2023/</link><guid isPermaLink="false">https://www.servethehome.com/samsung-processing-in-memory-technology-at-hot-chips-2023/</guid><pubDate>Thu, 31 Aug 2023 06:37:53 GMT</pubDate><author>Max Brunton</author></item><item><title>8 Leading European Organisations Join Forces to Bring Together RISC-V and SYCL Standards</title><description>&lt;p&gt;8 leading European organisations join forces to bring together RISC-V and SYCL standards to demonstrate ground-breaking
advances in scalability of extreme data analytics via fully-open AI acceleration&lt;/p&gt;
&lt;p&gt;The wide-spread adoption of AI has resulted in a market for novel hardware accelerators that can efficiently process AI
workloads. Unfortunately, all popular AI accelerators today use proprietary hardware—software stacks, leading to a
monopolization of the acceleration market by a few large industry players.&lt;/p&gt;
&lt;p&gt;Eight leading European organizations have joined in an effort to break this monopoly via Horizon Europe project
SYCLOPS (Scaling extreme analytics with Cross-architecture acceleration based on Open Standards). &lt;strong&gt;The vision of
SYCLOPS is to democratize AI acceleration using open standards, and enabling a healthy, competitive, innovation-driven
ecosystem for Europe and beyond&lt;/strong&gt;. This vision relies on the convergence of two important trends in the industry: (i)
the standardization and adoption of RISC-V®, a free, open Instruction Set Architecture(ISA), for AI and analytics
acceleration, and (ii) the emergence and growth of SYCL™ as a cross-vendor, cross-architecture, data parallel
programming model for all types of accelerators, including RISC-V.&lt;/p&gt;</description><link>https://www.syclops.org/updates/2023/05/10/launch-of-the-new-horizon-europe-project-syclops</link><guid isPermaLink="false">https://www.syclops.org/updates/2023/05/10/launch-of-the-new-horizon-europe-project-syclops</guid><pubDate>Thu, 11 May 2023 10:43:59 GMT</pubDate><author>Anonymous</author></item><item><title>SYCL Performance for Nvidia and AMD GPUs Matches Native System Language</title><description>&lt;p&gt;Benchmarks executing workloads using DPC++, oneAPI’s implementation of SYCL achieves close to native performance on
Nvidia and AMD GPUs, when comparing to the same benchmarks run with CUDA® and HIP, respectively.&lt;/p&gt;</description><link>https://codeplay.com/portal/blogs/2023/04/06/sycl-performance-for-nvidia-and-amd-gpus-matches-native-system-language</link><guid isPermaLink="false">https://codeplay.com/portal/blogs/2023/04/06/sycl-performance-for-nvidia-and-amd-gpus-matches-native-system-language</guid><pubDate>Fri, 07 Apr 2023 12:19:27 GMT</pubDate><author>Max Brunton</author></item><item><title>User-driven Kernel Fusion</title><description>&lt;p&gt;The overhead linked to offloading work to an accelerator can be problematic, especially for short-running device
kernels. Fusing multiple smaller kernels into one can be a solution to this problem, but manual implementation of fused
kernels is tedious work, as it needs to be repeated for each potential combination of kernels. Codeplay have therefore
developed an extension for the SYCL standard for user-driven, automatic kernel fusion. If you want to learn how to
instruct the SYCL runtime to perform kernel fusion automatically for you, look no further and dive into this blog-post,
which explains the extension and demonstrates its use on a simple example.&lt;/p&gt;</description><link>https://codeplay.com/portal/blogs/2023/03/20/user-driven-kernel-fusion</link><guid isPermaLink="false">https://codeplay.com/portal/blogs/2023/03/20/user-driven-kernel-fusion</guid><pubDate>Fri, 07 Apr 2023 12:12:48 GMT</pubDate><author>Rod Burns</author></item><item><title>Khronos to Create SYCL SC Open Standard for Safety-Critical C++ Based Heterogeneous Compute</title><description>&lt;p&gt;New Working Group designing derivative of the SYCL framework for high-level parallel programming to streamline safety
certification in automotive, avionics, industrial, and medical markets; Open call for industry participation.&lt;/p&gt;
&lt;p&gt;Today, The Khronos® Group, an open consortium of industry-leading companies creating advanced interoperability
standards, announces the creation of the &lt;a href=&quot;https://www.khronos.org/syclsc&quot;&gt;SYCL™ SC Working Group&lt;/a&gt;to create a high-level
heterogeneous computing framework for streamlining certification of safety-critical systems in automotive, avionics,
medical, and industrial markets. SYCL SC will leverage the proven SYCL 2020 standard for parallel programming of diverse
computing devices using standard C++17. Over the past year, the safety-critical community has gathered in the Khronos
SYCL Safety-Critical Exploratory Forum to build consensus on use cases and industry requirements to catalyze and guide
the design of this new open standard. The SYCL SC Working Group is open to any Khronos member, and Khronos membership is
open to any company.&lt;/p&gt;</description><link>https://www.khronos.org/news/press/khronos-to-create-sycl-sc-open-standard-for-safety-critical-c-based-heterogeneous-compute</link><guid isPermaLink="false">https://www.khronos.org/news/press/khronos-to-create-sycl-sc-open-standard-for-safety-critical-c-based-heterogeneous-compute</guid><pubDate>Thu, 16 Mar 2023 08:57:40 GMT</pubDate><author>Rod Burns</author></item><item><title>ECP BoF Showcases SYCL</title><description>&lt;p&gt;Enabling interoperability across U.S. exascale supercomputers is one of the chief goals for the U.S. Exascale Computing
Project (&lt;a href=&quot;https://www.exascaleproject.org/&quot;&gt;ECP&lt;/a&gt;), which has broadly overseen development of the early software
ecosystem needed to support the new class of supercomputers. Earlier this month, ECP held its annual
community &lt;a href=&quot;https://www.exascaleproject.org/event/2023-ecp-community-bof-days/#sycl-state-of-the-union&quot;&gt;BOF days&lt;/a&gt;, a
virtual event spanning a wide range of topics – including a session on SYCL, which has been gaining momentum as a
programming framework for heterogeneous computing.&lt;/p&gt;</description><link>https://www.hpcwire.com/2023/02/28/state-of-sycl-ecp-bof-showcases-progress-and-performance/</link><guid isPermaLink="false">https://www.hpcwire.com/2023/02/28/state-of-sycl-ecp-bof-showcases-progress-and-performance/</guid><pubDate>Thu, 02 Mar 2023 09:14:42 GMT</pubDate><author>Scott Straughan</author></item><item><title>The Evolution of Different SYCL Implementations</title><description>&lt;p&gt;A GPU-accelerated Parallel Least Squares Support Vector Machine (PLSSVM) was developed to classify dense datasets
with hundreds of thousands data points and more than a thousand features. It beats the state-of-the-art sequential
minimal optimization (SMO) implementations like LIBSVM.&lt;/p&gt;
&lt;p&gt;PLSSVM supports many different hardware architectures that include any Intel CPU and GPUs, and NVIDIA and AMD
GPUs that use different back ends written in OpenMP, CUDA, HIP, OpenCL™ code, and SYCL. This talk compares
these back ends on different architectures in relation to their implementation and performance characteristics.&lt;/p&gt;</description><link>https://www.intel.com/content/www/us/en/developer/videos/the-evolution-of-different-sycl-implementations.html</link><guid isPermaLink="false">https://www.intel.com/content/www/us/en/developer/videos/the-evolution-of-different-sycl-implementations.html</guid><pubDate>Fri, 24 Feb 2023 08:57:40 GMT</pubDate><author>Max Brunton</author></item><item><title>Code Together Podcast: Developing SYCL for Next-Generation Supercomputers</title><description>&lt;p&gt;&lt;strong&gt;ALCF&#39;s Nevin Liber joins the Code Together podcast to discuss SYCL, a key programming model for Aurora.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;GPU accelerators continue to evolve, both in features and capabilities as well as vendor varieties. Simultaneously,
supercomputers (which are enormous users of GPUs) also continue to evolve, setting up he very real design challenge of
enabling code performance and portability across current and future accelerators.&lt;/p&gt;
&lt;p&gt;In this episode of Intel&#39;s Code Together podcast, ALCF&#39;s Nevin Liber joins Intel&#39;s James Reinders and Tony Mongkolsmai
to discuss this dilemma, including several possible ways through it, and how researchers are preparing for Argonne&#39;s
Aurora exascale supercomputer by using C++, Kokkos, and SYCL to enable exascale workloads that are performant now and
into the future.&lt;/p&gt;</description><link>https://www.alcf.anl.gov/news/code-together-podcast-developing-sycl-next-generation-supercomputers</link><guid isPermaLink="false">https://www.alcf.anl.gov/news/code-together-podcast-developing-sycl-next-generation-supercomputers</guid><pubDate>Fri, 24 Feb 2023 08:57:40 GMT</pubDate><author>Anonymous</author></item><item><title>hipSYCL Becomes Open SYCL For Targeting All Major CPUs &amp; GPUs</title><description>&lt;p&gt;The past few years there has been hipSYCL as an open-source project for not only taking SYCL codes to Radeon ROCm with
HIP but also NVIDIA CUDA and other targets. The hipSYCL project has now decided to rename itself to Open SYCL to reflect
its broader focus on supporting CPUs and GPUs from all major vendors and not being limited to just AMD&#39;s HIP interface.&lt;/p&gt;</description><link>https://www.phoronix.com/news/hipSYCL-Becomes-Open-SYCL</link><guid isPermaLink="false">https://www.phoronix.com/news/hipSYCL-Becomes-Open-SYCL</guid><pubDate>Fri, 24 Feb 2023 08:57:40 GMT</pubDate><author>Scott Straughan</author></item><item><title>GROMACS 2023 Released With Better SYCL For Intel / AMD / NVIDIA</title><description>&lt;p&gt;GROMACS as the widely-used molecular dynamics software issued its stable v2023 release this week with improved GPU
support via SYCL. Most significant to the GROMACS 2023 feature release is improving its SYCL implementation that
provides production-rated support not only for Intel Arc Graphics but also AMD Radeon graphics with ROCm + hipSYCL.
There is also non-production-rated NVIDIA SYCL support as an alternative to GROMACS&#39; CUDA support.&lt;/p&gt;</description><link>https://www.phoronix.com/news/GROMACS-2023-Released</link><guid isPermaLink="false">https://www.phoronix.com/news/GROMACS-2023-Released</guid><pubDate>Thu, 23 Feb 2023 17:20:35 GMT</pubDate><author>Rod Burns</author></item><item><title>STFC to Accelerate Exascale Software in Computational Fluid Dynamics and Code Coupling using SYCL</title><description>&lt;p&gt;The Science and Technology Facilities Council (STFC) Scientific Computing Department (SCD) has established a new oneAPI
Centre of Excellence in collaboration
with Intel.&lt;/p&gt;
&lt;p&gt;This will accelerate exascale software development on multi-architecture systems using the Khronos SYCL standard and the
oneAPI open, cross-architecture programming model. A team of computational scientists within SCD will lead and develop
the Centre and its activities.&lt;/p&gt;
&lt;p&gt;The new Centre, which will be based at STFC&#39;s Daresbury Laboratory, will focus on optimising two prominent open source
HPC software codes: a C++ coupling library called the Multiscale Universal Interface (MUI); and a high-fidelity
Computational Fluid Dynamics code called Xcompact3d. Both are integral within the UK&#39;s ExCALIBUR exascale programme and
are part of its landscape for developing future exascale computing capabilities, providing accelerated computing
platforms able to handle upwards of a trillion of calculations per second.&lt;/p&gt;</description><link>https://www.scd.stfc.ac.uk/Pages/STFC-oneAPI-Centre.aspx</link><guid isPermaLink="false">https://www.scd.stfc.ac.uk/Pages/STFC-oneAPI-Centre.aspx</guid><pubDate>Thu, 05 Jan 2023 09:46:08 GMT</pubDate><author>Scott Straughan</author></item><item><title>Write SYCL: Code and Use oneAPI to Target Nvidia and AMD GPUs with Free Binary Plugins</title><description>&lt;p&gt;This release provides plugins for the Intel® DPC++/C++ Compiler using the oneAPI Toolkits to enable Nvidia and AMD GPU
platform targets. Although support for Nvidia and AMD GPUs has been available in the DPC++ open-source repository for a
while now, this is the first official binary release. Together with this release, Codeplay is providing a commercial
“Priority Support” package for customers who want quick answers to technical problems and general support for their
oneAPI deployment on Nvidia platforms directly with our team.&lt;/p&gt;</description><link>https://codeplay.com/portal/blogs/2022/12/16/bringing-nvidia-and-amd-support-to-oneapi.html</link><guid isPermaLink="false">https://codeplay.com/portal/blogs/2022/12/16/bringing-nvidia-and-amd-support-to-oneapi.html</guid><pubDate>Mon, 19 Dec 2022 15:13:47 GMT</pubDate><author>Scott Straughan</author></item><item><title>Open Source SYCLomatic Tool for Converting CUDA to SYCL</title><description>&lt;p&gt;SYCLomatic aims to ease the transition of NVIDIA CUDA code-bases over to C++17-based SYCL as the Khronos API single
source standard. This joins the likes of AMD&#39;s hipSYCL and other projects over the years working to support SYCL
integration with their compute stacks. The hope on Intel&#39;s side is to make CUDA code-bases more portable for running
across Intel CPUs, GPUs, FPGAs, and other XPUs.&lt;/p&gt;</description><link>https://www.phoronix.com/news/Intel-SYCLomatic-20220829</link><guid isPermaLink="false">https://www.phoronix.com/news/Intel-SYCLomatic-20220829</guid><pubDate>Tue, 06 Sep 2022 16:26:27 GMT</pubDate><author>Max Brunton</author></item><item><title>The Game of Life: An Example of Local Memory Usage and Hierarchical Kernels in SYCL</title><description>&lt;p&gt;John Conway’s cellular automaton, the Game of Life, has long been a staple project for those learning to code. It is
also an “embarrassingly parallel” problem, making it a great learning tool for teaching ourselves how to parallelize
processes using SYCL™. You will find that even the simplest parallel implementation of the Game of Life will yield a
significant performance boost, however there are even more optimizations we can apply to squeeze as much performance out
of our code.&lt;/p&gt;
&lt;p&gt;One such optimization is the use of local memory.&lt;/p&gt;</description><link>https://www.codeplay.com/portal/blogs/2022/09/05/the-game-of-life-an-example-of-local-memory-usage-and-hierarchical-kernels-in-sycl.html</link><guid isPermaLink="false">https://www.codeplay.com/portal/blogs/2022/09/05/the-game-of-life-an-example-of-local-memory-usage-and-hierarchical-kernels-in-sycl.html</guid><pubDate>Tue, 06 Sep 2022 16:13:40 GMT</pubDate><author>Anonymous</author></item><item><title>How Open Acceleration Standards are Driving Safety-Critical Development</title><description>&lt;p&gt;The need for graphics and compute acceleration in embedded markets is growing. Cameras and sensor arrays are
increasingly central to many use cases in diverse industries ranging from automotive to industrial and are generating
increasingly rich data streams that require sophisticated processing.&lt;/p&gt;</description><link>https://embeddedcomputing.com/technology/open-source/board-system-standards/how-open-acceleration-standards-are-driving-safety-critical-development</link><guid isPermaLink="false">https://embeddedcomputing.com/technology/open-source/board-system-standards/how-open-acceleration-standards-are-driving-safety-critical-development</guid><pubDate>Tue, 09 Aug 2022 12:29:45 GMT</pubDate><author>Rod Burns</author></item><item><title>Intel Arc GPUs and oneAPI: Do They SYCL?</title><description>&lt;p&gt;oneAPI, featuring C++ with SYCL, enables the same accelerator code to run on a variety of GPU and CPU architectures. As
promised in
my &lt;a href=&quot;https://betterprogramming.pub/cuda-sycl-codeplay-and-oneapi-accelerators-for-everyone-4603fee0421&quot;&gt;last post&lt;/a&gt; about
heterogeneous computing, this time we are going to use the new Intel® Arc™ GPU and oneAPI to see how SYCL plays with
Intel Arc.&lt;/p&gt;</description><link>https://betterprogramming.pub/intel-arc-gpus-and-oneapi-do-they-sycl-9b3ba7c888b8</link><guid isPermaLink="false">https://betterprogramming.pub/intel-arc-gpus-and-oneapi-do-they-sycl-9b3ba7c888b8</guid><pubDate>Mon, 25 Jul 2022 10:09:00 GMT</pubDate><author>Scott Straughan</author></item><item><title>Accelerating Made Simpler With Celerity</title><description>&lt;p&gt;On page 31 of the hiPEAC magazine is an article by Biagio Cosenza and Peter Thoman who are part of the Celerity project.&lt;/p&gt;
&lt;p&gt;‘Several of those of us working on Celerity have worked with GPUs for many years,’ explains Biagio. ‘What we saw was
that existing technologies made an already difficult task – writing and maintaining efficient software for distributed
compute clusters – even more challenging: now you not only needed to manage the distribution of data and work across
cluster nodes,but also to GPUs on each individual node, generally using a completely separate technology. An example
would be an MPI+ CUDA hybrid program, or MPI + OpenCL if you planned to support vendor-agnostic technologies.’‘However,
we also had previous experience with academic projects seeking to automate this entire stack and saw how ultimately they
fell short of their goals,’ adds Peter. ‘So when SYCL™ was released as a vendor-agnostic, high-level standard for
writing single-node applications targeting heterogeneous hardware, we asked ourselves whether it would be possible to
extend it to clusters of GPUs and accelerators with minimal code changes. We had one key idea – the concept of range
mappers – and Celerity was born.’&lt;/p&gt;</description><link>https://www.hipeac.net/magazine/7162/</link><guid isPermaLink="false">https://www.hipeac.net/magazine/7162/</guid><pubDate>Mon, 18 Jul 2022 15:15:31 GMT</pubDate><author>Max Brunton</author></item><item><title>How to Port Your Code From CUDA to SYCL, Targeting Nvidia GPUs and More</title><description>&lt;p&gt;Codeplay’s contributions are helping developers target Nvidia GPUs, using SYCL and oneAPI, and researchers using the
pre-exascale supercomputer Perlmutter are developing software using SYCL and oneAPI.&lt;/p&gt;
&lt;p&gt;By using SYCL and oneAPI developers can widen their targets, with Nvidia GPUs, Intel GPUs, and AMD GPUs supported by the
DPC++ compiler project.&lt;/p&gt;
&lt;p&gt;This session will help you to understand how you can port your CUDA code to SYCL and continue to target Nvidia GPUs and
retain a good level of performance. Using nbody simulation project code written in CUDA we will show how the code is
automatically translated to SYCL and then compiled using the DPC++ compiler. Furthermore we will present some
performance tips and tricks to ensure you can get the best performance from your SYCL code on Nvidia GPUs.&lt;/p&gt;</description><link>https://www.oneapi.io/event-sessions/how-to-port-your-code-from-cuda-to-sycl-targeting-nvidia-gpus-and-more-isc-2022/</link><guid isPermaLink="false">https://www.oneapi.io/event-sessions/how-to-port-your-code-from-cuda-to-sycl-targeting-nvidia-gpus-and-more-isc-2022/</guid><pubDate>Wed, 29 Jun 2022 12:52:27 GMT</pubDate><author>Anonymous</author></item><item><title>Podcast: SYCL Empowering Developers in Academia and Enterprise</title><description>&lt;p&gt;Ever since its introduction in 2014, SYCL has grown in popularity and adoption. It is a royalty-free, cross-platform
abstraction layer that enables code for heterogeneous processors, written in a “single-source” style using C++
standards.&lt;/p&gt;
&lt;p&gt;The flexibility to deploy across multiple platforms, reuse code helps enable advanced hardware features that can be used
by developers. This allows develops the flexibility that they are looking for.&lt;/p&gt;
&lt;p&gt;Today’s conversation with our guests touches upon SYCL’s evolution and its adoption both in academia and in enterprise
applications. We will discuss how academia and enterprise are learning how to program with SYCL in addition to what the
future holds for this open standard.&lt;/p&gt;</description><link>https://player.fm/series/intel/sycl-empowering-developers-in-academia-and-enterprise</link><guid isPermaLink="false">https://player.fm/series/intel/sycl-empowering-developers-in-academia-and-enterprise</guid><pubDate>Tue, 14 Jun 2022 16:30:00 GMT</pubDate><author>Rod Burns</author></item><item><title>ENCC SYCL Workshop Videos now Available</title><description>&lt;p&gt;SYCL is a C++ abstraction layer for programming heterogeneous hardware with a single-source approach. SYCL is
high-level, cross-platform, and extends standard ISO C++17.&lt;/p&gt;
&lt;p&gt;In this workshop you will learn to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use the hipSYCL compiler to generate executables for multiple hardware targets.&lt;/li&gt;
&lt;li&gt;Write hardware-agnostic code to express parallelism using the queue, command group, and kernel abstractions.&lt;/li&gt;
&lt;li&gt;Use buffer and accessors to handle memory across devices.&lt;/li&gt;
&lt;li&gt;Evaluate drawbacks and advantages of unified shared memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The EuroCC National Competence Center Sweden (ENCCS) provides high-performance computing training and support for
industry, academia and public administration for free.&lt;/p&gt;</description><link>https://www.youtube.com/watch?v=1hjQGEZftqY&amp;list=PL2GgjY1xUzfANp_kApcsnbZxbXxKVcNMT</link><guid isPermaLink="false">https://www.youtube.com/watch?v=1hjQGEZftqY&amp;list=PL2GgjY1xUzfANp_kApcsnbZxbXxKVcNMT</guid><pubDate>Tue, 14 Jun 2022 16:28:03 GMT</pubDate><author>Rod Burns</author></item><item><title>Complete the SYCL Developer Survey</title><description>&lt;p&gt;Help us understand more about the SYCL community and how we can help you be more successful with SYCL by 
&lt;a href=&quot;https://www.surveymonkey.com/r/J6HWMQ2&quot;&gt;completing the SYCL developer survey&lt;/a&gt;.  &lt;/p&gt;</description><link>https://www.surveymonkey.com/r/J6HWMQ2</link><guid isPermaLink="false">https://www.surveymonkey.com/r/J6HWMQ2</guid><pubDate>Mon, 06 Jun 2022 13:43:15 GMT</pubDate><author>Max Brunton</author></item><item><title>Intel Takes The SYCL To Nvidia&#39;s CUDA With Migration Tool</title><description>&lt;p&gt;“To prepare for Aurora, the Intel DPC++ Compatibility Tool allowed us to quickly migrate over 20 kernels to SYCL,”
Esteban Rangel, a computer scientist at Argonne, explains. “Since the current version of the code migration tool does
not support migration to functors, we wrote a simple clang tool to refactor the resulting SYCL source code to meet our
needs. With the open-source SYCLomatic project, we plan to integrate our previous work for a more robust solution and
contribute to making functors part of the available migration options.”&lt;/p&gt;</description><link>https://www.nextplatform.com/2022/05/20/intel-takes-the-sycl-to-nvidias-cuda-with-migration-tool/</link><guid isPermaLink="false">https://www.nextplatform.com/2022/05/20/intel-takes-the-sycl-to-nvidias-cuda-with-migration-tool/</guid><pubDate>Mon, 30 May 2022 17:27:22 GMT</pubDate><author>Scott Straughan</author></item><item><title>SYCLcon Presentations are Available on Demand</title><description>&lt;p&gt;IWOCL &amp;amp; SYCLcon 2022 marks the &lt;strong&gt;10th Anniversary&lt;/strong&gt; of the annual gathering of the international community of
developers, researchers, suppliers, and Khronos Working Group members to share best practice, and to advance the use and
evolution of the OpenCL and SYCL standards for programming heterogeneous platforms.&lt;/p&gt;
&lt;p&gt;All the presentations are now available on demand, simple register &lt;a href=&quot;https://www.iwocl.org/&quot;&gt;through the website&lt;/a&gt;.  &lt;/p&gt;</description><link>https://www.iwocl.org/</link><guid isPermaLink="false">https://www.iwocl.org/</guid><pubDate>Thu, 12 May 2022 11:04:26 GMT</pubDate><author>Max Brunton</author></item><item><title>GROMACS 2022 Advances Open Source Drug Discovery with SYCL and oneAPI</title><description>&lt;p&gt;&lt;a href=&quot;https://www.gromacs.org/&quot;&gt;GROMACS&lt;/a&gt;, a molecular dynamics package designed for simulations of proteins, lipids and
nucleic acids used to design new pharmaceuticals. Recently released GROMACS 2022, developed using SYCL and oneAPI,
exhibits strong performance running on multiple architectures, including Intel Xe architecture-based GPUs.&lt;/p&gt;</description><link>https://www.hpcwire.com/off-the-wire/gromacs-2022-advances-open-source-drug-discovery-with-oneapi/</link><guid isPermaLink="false">https://www.hpcwire.com/off-the-wire/gromacs-2022-advances-open-source-drug-discovery-with-oneapi/</guid><pubDate>Tue, 10 May 2022 13:13:33 GMT</pubDate><author>Anonymous</author></item><item><title>Migrating the Jacobi Iterative Method from CUDA to SYCL</title><description>&lt;p&gt;The Jacobi iterative method is used to find approximate numerical solutions for systems of linear equations of the form
Ax = b in numerical linear algebra, which is diagonally dominant. The algorithm starts with an initial estimate for x
and iteratively updates it until convergence. The Jacobi method is guaranteed to converge if matrix A is diagonally
dominant.&lt;/p&gt;
&lt;h2&gt;CUDA to SYCL migration approach&lt;/h2&gt;
&lt;p&gt;This document covers two approaches for CUDA to SYCL migration:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first approach is manual migration by analyzing CUDA source and replacing all CUDA-specific calls with equivalent
  SYCL calls. This approach helps a CUDA developer to understand SYCL programming. Once the migration is complete, we do
  performance analysis using VTuneTM Profiler and Intel® Advisor Roofline to understand the performance bottlenecks. We
  then look at optimizing the code for performance.&lt;/li&gt;
&lt;li&gt;The second approach is using Intel® oneAPI Data Parallel C++ Compatibility Tool (DPCT) to automatically migrate CUDA
  source to SYCL source. The tool migrates 80–90 percent of the code and generates a warning for the rest, which has to
  be manually migrated to SYCL. We look at DPCT generated warnings and learn how to migrate the code that was not
  migrated by the DPCT. This approach helps to accelerate the migration of CUDA source to SYCL and has proven especially
  helpful for large code bases.&lt;/li&gt;
&lt;/ul&gt;</description><link>https://www.intel.com/content/www/us/en/developer/articles/technical/cuda-sycl-migration-jacobi-iterative-method.html</link><guid isPermaLink="false">https://www.intel.com/content/www/us/en/developer/articles/technical/cuda-sycl-migration-jacobi-iterative-method.html</guid><pubDate>Tue, 10 May 2022 12:58:35 GMT</pubDate><author>Max Brunton</author></item><item><title>SYCL Support in Blender Under Review</title><description>&lt;p&gt;Opened up at the end of March is the work-in-progress Intel oneAPI back-end for Blender&#39;s Cycles renderer. This Intel
GPU back-end focused for supporting the company&#39;s forthcoming Intel Arc graphics cards is targeting the open-source
oneAPI Base Toolkit and making use of SYCL.&lt;/p&gt;
&lt;p&gt;There still is more code work needed, but it&#39;s good to see this coming together to complement Blender&#39;s NVIDIA CUDA and
AMD HIP support.&lt;/p&gt;</description><link>https://www.phoronix.com/scan.php?page=news_item&amp;px=Intel-Blender-Backend-Review</link><guid isPermaLink="false">https://www.phoronix.com/scan.php?page=news_item&amp;px=Intel-Blender-Backend-Review</guid><pubDate>Thu, 14 Apr 2022 07:44:41 GMT</pubDate><author>Anonymous</author></item><item><title>Raytracing From CUDA to SYCL 2020</title><description>&lt;p&gt;A walkthrough of converting a code from parallel C++ ray-tracing code to CUDA, and the work needed to make that CUDA
code run on CPU using parallel &lt;code&gt;for_each()&lt;/code&gt; and then converted the code to SYCL 2020.&lt;/p&gt;
&lt;p&gt;In this article, we will port &lt;a href=&quot;https://raytracing.github.io/&quot;&gt;Raytracing in One Weekend&lt;/a&gt;, the already converted parallel
code to CUDA, make CUDA run on CPU and then port again to SYCL 2020
via &lt;a href=&quot;https://software.intel.com/content/www/us/en/develop/tools/oneapi/data-parallel-c-plus-plus.html&quot;&gt;Intel® Data-Parallel C++ (DPC++)&lt;/a&gt;
toolkit. DPC++ is ISO C++ plus Khronos SYCL with community extensions eventually making their way into the final
standard. As time of article writing, the SYCL 2020 specification has been released for public review as a provisional
specification for developers to provide their valuable feedback before the final version is published and ratified.&lt;/p&gt;</description><link>https://www.codeproject.com/Articles/5292398/Raytracing-From-CUDA-to-SYCL-2020-via-DPCplusplus</link><guid isPermaLink="false">https://www.codeproject.com/Articles/5292398/Raytracing-From-CUDA-to-SYCL-2020-via-DPCplusplus</guid><pubDate>Fri, 25 Mar 2022 10:43:40 GMT</pubDate><author>Scott Straughan</author></item><item><title>An Introduction to Programming with SYCL on Perlmutter and Beyond</title><description>&lt;p&gt;SYCL is an open standard programming model that allows developers to use standard C++ code to program for a range of
GPUs and other accelerator processors. This means that it is possible to develop using modern C++ code and target
Nvidia, AMD and Intel GPUs from a single code base. To enable SYCL on the latest supercomputers, Codeplay has been
working in partnership with different National Laboratories to bring SYCL support to Perlmutter, Polaris and Frontier.&lt;/p&gt;
&lt;p&gt;Watch the half day hands-on workshop that walks through the fundamentals of SYCL programming using practical examples
and exercises to help reinforce the learning. Attendees will also learn how to compile their SYCL code using the DPC++
compiler to target Nvidia GPUs including those on the Perlmutter supercomputer. Lastly, we’ll talk about some of the
things you need to know to achieve good performance, including best practices for memory management, with free time for
questions and discussions.&lt;/p&gt;</description><link>https://www.nersc.gov/users/training/events/an-introduction-to-programming-with-sycl-on-perlmutter-and-beyond-march2022/</link><guid isPermaLink="false">https://www.nersc.gov/users/training/events/an-introduction-to-programming-with-sycl-on-perlmutter-and-beyond-march2022/</guid><pubDate>Tue, 22 Mar 2022 17:27:22 GMT</pubDate><author>Scott Straughan</author></item><item><title>SYCL Session Episode 1 - Accelerating simulations for the Large Hadron Collider</title><description>&lt;p&gt;Vincent is a physicist turned Computational Scientist and is working in conjunction with researchers at CERN who run
experiments with the &lt;a href=&quot;https://home.cern/science/accelerators/large-hadron-collider&quot;&gt;Large Hadron Collider (LHC)&lt;/a&gt;. As a
physicist he is of course very interested in the results from these experiments. His work focuses on the ATLAS detector,
one of the general purpose experiments stationed along the LHC ring, that is designed for particle physics research and
it is hoped will make physics discoveries beyond the Standard Model like supersymmetry (SUSY), graviton or Dark Matter.
The LHC has been built to facilitate experiments and research for at least a decade to come, so software written to run
and simulate research must be maintained for more than 10 years.&lt;/p&gt;
&lt;p&gt;Hear the latest SYCL news, projects and research, and watch Vincent&#39;s presentation and conversation about his work.  &lt;/p&gt;</description><link>https://www.codeplay.com/portal/blogs/2022/02/21/sycl-session-episode-1-sycl-helping-to-accelerate-simulation-for-cern-researchers.html</link><guid isPermaLink="false">https://www.codeplay.com/portal/blogs/2022/02/21/sycl-session-episode-1-sycl-helping-to-accelerate-simulation-for-cern-researchers.html</guid><pubDate>Tue, 22 Feb 2022 10:54:27 GMT</pubDate><author>Anonymous</author></item><item><title>Heterogeneous Hardware Needs Universal Software</title><description>&lt;p&gt;As hardware advances and diversifies, we’re entering what many see as a new golden age of computer architecture.
However, the idea of an ever-expanding &lt;a href=&quot;https://devops.com/?s=hardware&quot;&gt;hardware&lt;/a&gt; landscape can be daunting for software
developers, because while hardware diversity is wonderful for price and innovation, it can lead to spiraling software
complexity on the back end. So many software tools are specific to the hardware they run on that a world where CPUs,
GPUs, FPGAs, ASICs, DSPs and more are freely intermingled feels overwhelming; an invitation to interoperability
headaches and spiraling tech overhead.&lt;/p&gt;
&lt;p&gt;The question on the minds of developers is how to navigate this constantly changing ecosystem to take advantage of the
new world of hardware acceleration without driving themselves crazy in the process.&lt;/p&gt;</description><link>https://devops.com/heterogeneous-hardware-needs-universal-software/</link><guid isPermaLink="false">https://devops.com/heterogeneous-hardware-needs-universal-software/</guid><pubDate>Thu, 10 Feb 2022 17:28:46 GMT</pubDate><author>Scott Straughan</author></item><item><title>Getting Started With Cross-Platform Heterogeneous Computing using SYCL</title><description>&lt;p&gt;Heterogeneous computing is here to stay, and it is becoming more diverse and increasingly important for all programmers
to understand. Fortunately, the key concepts are easy to grasp. In this Refcard, we will walk through a thorough
introduction to cross-platform heterogeneous computing, its benefits, and how to get started setting up your
environment.   &lt;/p&gt;</description><link>https://dzone.com/refcardz/getting-started-with-cross-platform-heterogeneous</link><guid isPermaLink="false">https://dzone.com/refcardz/getting-started-with-cross-platform-heterogeneous</guid><pubDate>Thu, 10 Feb 2022 14:05:41 GMT</pubDate><author>Rod Burns</author></item><item><title>Using Supercomputers To Understand Biomolecular Properties</title><description>&lt;p&gt;The team performs large-scale molecular dynamics (MD) simulations using
the &lt;a href=&quot;http://www.ks.uiuc.edu/Research/namd/&quot;&gt;Nanoscale Molecular Dynamics (NAMD) program&lt;/a&gt; in their research. 7 NAMD is a
parallel MD code designed for high performance simulation of large biomolecular systems. NAMD supports biological
research measuring the dynamics of cellular processes at atomic and sub-nanosecond resolution not achievable by
experimental methods.&lt;/p&gt;
&lt;p&gt;The Roux team started NAMD code migration on the Joint Laboratory for System Evaluation testbed systems at Argonne for
Aurora. Aurora will incorporate new Intel technologies such as the Intel Xe-HPC GPUs (codename Ponte Vecchio) and the
Next Generation Intel Xeon Scalable processor (codename Sapphire Rapids), both equipped
with &lt;a href=&quot;https://www.intel.com/content/www/us/en/newsroom/opinion/supercomputing-for-all-closer-than-you-think.html&quot;&gt;high bandwidth memory&lt;/a&gt;
designed to improve memory usage. The team uses SYCL compiled by
the &lt;a href=&quot;https://techdecoded.intel.io/essentials/dpc-part-1-an-introduction-to-the-new-programming-model/#gs.x5jiih&quot;&gt;Data Parallel C++ (DPC++)&lt;/a&gt;
compiler&lt;/p&gt;</description><link>https://www.technologynetworks.com/informatics/articles/using-supercomputers-to-understand-biomolecular-properties-358159</link><guid isPermaLink="false">https://www.technologynetworks.com/informatics/articles/using-supercomputers-to-understand-biomolecular-properties-358159</guid><pubDate>Tue, 08 Feb 2022 13:02:52 GMT</pubDate><author>Anonymous</author></item><item><title>SYCL - the heart of oneAPI</title><description>&lt;p&gt;SYCL is the heart of oneAPI, enabling cross-platform data parallel programming in modern C++. SYCL is a Khronos standard
with broad participation across research institutions and companies. Intel contributes to the development of SYCL by
participating in the SYCL standard committee and
contributing &lt;a href=&quot;https://github.com/intel/llvm/tree/sycl&quot;&gt;SYCL support to the LLVM&lt;/a&gt;project. The SYCL support, combined with
LLVM’s SPIR-V, PTX, and CPU backends enable targeting SYCL programs to a wide variety of CPUs and accelerators. SYCL is
augmented with the &lt;a href=&quot;https://github.com/oneapi-src/oneDPL&quot;&gt;oneAPI DPC++ Library (oneDPL)&lt;/a&gt;, which provides STL-like
capabilities for programming accelerators. When you need high performance math,
the &lt;a href=&quot;https://github.com/oneapi-src/onemkl&quot;&gt;oneAPI Math Kernel Library (oneMKL)&lt;/a&gt;includes BLAS, LAPACK, FFTs, and random
number generation. There are many good math libraries out there already, and open source oneMKL provides a common
SYCL-based interface that lets you integrate low-level proprietary and open-source libraries.&lt;/p&gt;</description><link>https://medium.com/intel-tech/oneapi-as-a-catalyst-for-open-innovation-59904a602e</link><guid isPermaLink="false">https://medium.com/intel-tech/oneapi-as-a-catalyst-for-open-innovation-59904a602e</guid><pubDate>Tue, 08 Feb 2022 10:27:22 GMT</pubDate><author>Anonymous</author></item><item><title>Five Outstanding Additions found in SYCL 2020</title><description>&lt;p&gt;SYCL 2020 is an exciting update for C++ programmers looking to take advantage of accelerators. We have both had the
pleasure of contributing to the SYCL specification,
a &lt;a href=&quot;http://link.springer.com/book/10.1007/978-1-4842-5574-2&quot;&gt;book on SYCL&lt;/a&gt;, and
the &lt;a href=&quot;https://intel.github.io/llvm-docs/GetStartedGuide.html&quot;&gt;DPC++ open source project&lt;/a&gt; to implement SYCL into LLVM. We
would like to share our pick for our favorite new features added to SYCL in
the &lt;a href=&quot;http://www.khronos.org/registry/SYCL/&quot;&gt;SYCL 2020&lt;/a&gt; specification. We offer these as our opinions as Intel engineers,
not on behalf of Khronos.&lt;/p&gt;</description><link>https://www.intel.com/content/www/us/en/developer/articles/technical/five-outstanding-additions-sycl2020.html</link><guid isPermaLink="false">https://www.intel.com/content/www/us/en/developer/articles/technical/five-outstanding-additions-sycl2020.html</guid><pubDate>Wed, 02 Feb 2022 09:15:21 GMT</pubDate><author>Scott Straughan</author></item><item><title>Developing the BLAKE3 hashing algorithm with SYCL</title><description>&lt;p&gt;Last week I implemented multiple variants of highly parallelizable cryptographic hash function BLAKE3 using SYCL and
today I&#39;d like to present my collective understanding, which I gained while implementing/benchmarking BLAKE3, targeting
heterogeneous accelerator platform(s). BLAKE3 cryptographic hash function easily lends itself well to data parallel
execution environments like SYCL/ OpenCL.&lt;/p&gt;</description><link>https://itzmeanjan.in/pages/blake3-on-gpgpu.html</link><guid isPermaLink="false">https://itzmeanjan.in/pages/blake3-on-gpgpu.html</guid><pubDate>Fri, 21 Jan 2022 09:14:04 GMT</pubDate><author>Max Brunton</author></item><item><title>IWOCL &amp; SYCLcon Call For Presentations and Poster Sessions</title><description>&lt;p&gt;Given the continued uncertainty surrounding the current COVID-19 situation and worldwide travel precautions, IWOCL and
SYCLcon is prioritizing the health and safety of the global OpenCL and SYCL community and will now proceed as a *
&lt;em&gt;virtual-only event&lt;/em&gt;&lt;em&gt;. This year we expect add to the number of live sessions we host during the event, as well as the
usual “can’t miss” scheduled and on-demand sessions. We have also taken this opportunity to move the event into May, and
have extended the &lt;a href=&quot;https://www.iwocl.org/call-for-submissions&quot;&gt;call for submissions&lt;/a&gt; deadline to: &lt;/em&gt;&lt;em&gt;Friday February 25, 2022&lt;/em&gt;*&lt;/p&gt;</description><link>https://www.iwocl.org/call-for-submissions/</link><guid isPermaLink="false">https://www.iwocl.org/call-for-submissions/</guid><pubDate>Tue, 18 Jan 2022 09:40:28 GMT</pubDate><author>Scott Straughan</author></item><item><title>Exascale: ALCF and Intel to Host Aurora Learning Paths Series</title><description>&lt;p&gt;The Argonne Leadership Computing Facility (ALCF) in partnership with Intel will host
the &lt;a href=&quot;https://events.cels.anl.gov/event/183/&quot;&gt;ALCF Aurora Learning Paths&lt;/a&gt; learning seriesto explore use of oneAPI and
Data Parallel C++ (DPC++), Intel’s open-source implementation of SYCL, to demonstrate methods to achieve performant,
portable code across five platforms available on the Intel Devcloud.&lt;/p&gt;
&lt;p&gt;There are four modules within the series.&lt;/p&gt;
&lt;h2&gt;Module 1: Introduction to Performance, Portability, and Productivity for HPC&lt;/h2&gt;
&lt;p&gt;This session will introduce Data Parallel C++ and the importance of performance, portability, and productivity for HPC
development. There will be a Jupyter Lab environment for training, which will allow hands-on compilation and execution
of simple DPC++ code samples.&lt;/p&gt;
&lt;h2&gt;Module 2: Optimization Best Practices Using SYCL/DPC++&lt;/h2&gt;
&lt;p&gt;This session will present a DPC++ code walk-through of simple matrix multiplication example, and look at how to optimize
the code for performance using various features of DPC++ and to compare the execution times of various optimizations.&lt;/p&gt;
&lt;h2&gt;Module 3: Using Analysis Tools for Portable Offload to CPU or GPU&lt;/h2&gt;
&lt;p&gt;This session will examine how to optimize the code for performance portability to get the best performance regardless of
whether the code is offloaded to GPU or CPU, and look at Intel VTune and Intel Advisor Roofline analysis for various
optimizations.&lt;/p&gt;
&lt;h2&gt;Module 4: Mini Hackathon&lt;/h2&gt;
&lt;p&gt;Attendees are encouraged to bring their own code; staff will be on hand to assist.&lt;/p&gt;</description><link>https://insidehpc.com/2022/01/exascale-alcf-and-intel-to-host-aurora-learning-paths-series/</link><guid isPermaLink="false">https://insidehpc.com/2022/01/exascale-alcf-and-intel-to-host-aurora-learning-paths-series/</guid><pubDate>Wed, 05 Jan 2022 15:19:02 GMT</pubDate><author>Max Brunton</author></item><item><title>Aurora SYCL Hands on Sessions Announced</title><description>&lt;p&gt;The Argonne Leadership Computing Facility (ALCF) in partnership with Intel will host a hands-on learning series that
will explore the use of oneAPI and Data Parallel C++ (DPC++), Intel&#39;s open-source implementation of SYCL, to demonstrate
methods to achieve performant, portable code across five different platforms available on the Intel Devcloud.&lt;/p&gt;</description><link>https://events.cels.anl.gov/event/183/</link><guid isPermaLink="false">https://events.cels.anl.gov/event/183/</guid><pubDate>Wed, 22 Dec 2021 09:04:42 GMT</pubDate><author>Scott Straughan</author></item><item><title>Write Your First SYCL App in Less than 30 Minutes</title><description>&lt;p&gt;Follow along with this video tutorial to write your first SYCL app in less than 30 minutes using the DevCloud
environment.  &lt;/p&gt;</description><link>https://www.intel.com/content/www/us/en/events/developer/devfest-2021.html?videoId=6279837092001</link><guid isPermaLink="false">https://www.intel.com/content/www/us/en/events/developer/devfest-2021.html?videoId=6279837092001</guid><pubDate>Fri, 17 Dec 2021 09:05:10 GMT</pubDate><author>Rod Burns</author></item><item><title>An introduction to SYCL programming</title><description>&lt;p&gt;A 30 minute presentation was made at the Intel DevFest on how to grasp the fundamentals of SYCL programming.  &lt;/p&gt;</description><link>https://www.intel.com/content/www/us/en/events/developer/devfest-2021.html?videoId=6279812552001</link><guid isPermaLink="false">https://www.intel.com/content/www/us/en/events/developer/devfest-2021.html?videoId=6279812552001</guid><pubDate>Fri, 17 Dec 2021 09:02:28 GMT</pubDate><author>Rod Burns</author></item><item><title>Solving Heterogeneous Programming Challenges with SYCL</title><description>&lt;p&gt;In the first of a series of guest posts on heterogenous computing, James Reinders, considers how SYCL will contribute to
a heterogeneous future for C++.&lt;/p&gt;
&lt;p&gt;“SYCL is not a cure-all; SYCL is a solution to one aspect of a larger problem: how do we enable programming in the face
of an explosion of hardware diversity that is coming?”&lt;/p&gt;</description><link>https://www.hpcwire.com/2021/12/08/solving-heterogeneous-programming-challenges-with-sycl/</link><guid isPermaLink="false">https://www.hpcwire.com/2021/12/08/solving-heterogeneous-programming-challenges-with-sycl/</guid><pubDate>Thu, 09 Dec 2021 09:15:46 GMT</pubDate><author>Rod Burns</author></item><item><title>Researchers Migrating to SYCL at SC21</title><description>&lt;p&gt;The &lt;a href=&quot;https://sc21.supercomputing.org/&quot;&gt;SuperComputing SC21&lt;/a&gt;conference is over, and I&#39;ve been eager to see all the SYCL
papers and presentations published on various topics. I wrote about all the SYCL activities at SC21 in my previous blog
post, and now I want to pick out some of the highlights.&lt;/p&gt;</description><link>https://www.codeplay.com/portal/news/2021/11/29/researchers-migrating-to-sycl-at-sc21.html</link><guid isPermaLink="false">https://www.codeplay.com/portal/news/2021/11/29/researchers-migrating-to-sycl-at-sc21.html</guid><pubDate>Mon, 29 Nov 2021 15:15:13 GMT</pubDate><author>Max Brunton</author></item><item><title>Performance-Portable Distributed KNN Using LSH and SYCL</title><description>&lt;p&gt;In the age of artificial intelligence, algorithms must efficiently cope with vast datasets. We propose a
performance-portable implementation of locality-sensitive hashing (LSH), which is an approximate k-nearest neighbor (
KNN) algorithm to speed up the classification on heterogeneous hardware.&lt;/p&gt;
&lt;p&gt;Our new library provides a hardware independent, yet efficient and distributed implementation of the LSH algorithm using
SYCL and message passing interface (MPI).&lt;/p&gt;
&lt;p&gt;The results show that our library can scale on multiple GPUs, achieving a speedup of up to 7.6x on eight GPUs. It
supports different SYCL implementations—ComputeCpp, hipSYCL, DPC++—to target different hardware.&lt;/p&gt;</description><link>https://www.intel.com/content/www/us/en/developer/videos/performance-portable-distributed-k-nn-lsh-sycl.html</link><guid isPermaLink="false">https://www.intel.com/content/www/us/en/developer/videos/performance-portable-distributed-k-nn-lsh-sycl.html</guid><pubDate>Mon, 29 Nov 2021 12:10:39 GMT</pubDate><author>Scott Straughan</author></item><item><title>Videos from the oneAPI Developer Summit</title><description>&lt;p&gt;Watch hands-on tutorials, tech talks, and panels focused on SYCL development with global Industry experts from Berkeley,
Argonne, NASA, Codeplay, University of Lisbon, University of Edinburgh and more.&lt;/p&gt;</description><link>https://www.oneapi.io/events/oneapi-developer-summit-at-sc</link><guid isPermaLink="false">https://www.oneapi.io/events/oneapi-developer-summit-at-sc</guid><pubDate>Wed, 24 Nov 2021 13:46:28 GMT</pubDate><author>Max Brunton</author></item><item><title>Bringing the Latest SYCL Research to SC21</title><description>&lt;p&gt;The &lt;a href=&quot;https://sc21.supercomputing.org/&quot;&gt;SuperComputing Conference (SC21)&lt;/a&gt; is the largest gathering of HPC professionals
in the world and this year is being held as a hybrid event with both online and in person activities happening. One of
the benefits I have found from online events is that it&#39;s possible to bring together a much wider group of experts with
specific competencies. The SYCL tutorials that I have organized this year have been able to feature individuals from a
wide range of organizations which just would not be possible if these were held physically.&lt;/p&gt;
&lt;p&gt;This year there are lots of sessions that are highly relevant for SYCL developers and the wider community&lt;/p&gt;</description><link>https://www.codeplay.com/portal/blogs/2021/11/10/bringing-the-latest-sycl-research-to-sc21.html</link><guid isPermaLink="false">https://www.codeplay.com/portal/blogs/2021/11/10/bringing-the-latest-sycl-research-to-sc21.html</guid><pubDate>Wed, 24 Nov 2021 11:45:39 GMT</pubDate><author>Max Brunton</author></item><item><title>Join the oneAPI Developer Summit at SC21</title><description>&lt;p&gt;&lt;strong&gt;The Final Global oneAPI DevSummit of 2021 is here!&lt;/strong&gt; Listen to and learn from developers who are using SYCL to develop
with oneAPI.  &lt;/p&gt;</description><link>https://software.seek.intel.com/devsummit2021sc?</link><guid isPermaLink="false">https://software.seek.intel.com/devsummit2021sc?</guid><pubDate>Tue, 09 Nov 2021 20:35:38 GMT</pubDate><author>Scott Straughan</author></item><item><title>ENCCS SYCL Workshop</title><description>&lt;p&gt;Welcome to this ENCCS workshop, in collaboration with &lt;a href=&quot;https://www.csc.fi/&quot;&gt;CSC Finland&lt;/a&gt;
and &lt;a href=&quot;https://izum.si/en/home/&quot;&gt;Izum, Slovenia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;SYCL is a C++ abstraction layer for programming heterogeneous hardware with a single-source approach. SYCL is
high-level, cross-platform, and extends standard ISO C++17. You will learn to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use the hipSYCL compiler to generate executable for multiple hardware targets.&lt;/li&gt;
&lt;li&gt;Write hardware-agnostic code to express parallelism using the queue, command group, and kernel abstractions.&lt;/li&gt;
&lt;li&gt;Use buffer and accessors to handle memory across devices.&lt;/li&gt;
&lt;li&gt;Evaluate drawbacks and advantages of unified shared memory.&lt;/li&gt;
&lt;/ul&gt;</description><link>https://enccs.se/events/2021/11/sycl-workshop/</link><guid isPermaLink="false">https://enccs.se/events/2021/11/sycl-workshop/</guid><pubDate>Tue, 09 Nov 2021 20:26:42 GMT</pubDate><author>Scott Straughan</author></item><item><title>SYCL Summer Sessions Videos Live</title><description>&lt;p&gt;Earlier this month Codeplay hosted talks by expert SYCL developers on some key topics. The video recordings are now live
on the SYCL website &lt;a href=&quot;https://t.co/AjA6YGtway?amp=1&quot;&gt;https://sycl.tech/sessions/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Find out how to use SYCL Contexts, migrate from CUDA to SYCL and write a large simulation app using SYCL. &lt;/p&gt;</description><link>https://sycl.tech/sessions/</link><guid isPermaLink="false">https://sycl.tech/sessions/</guid><pubDate>Tue, 05 Oct 2021 08:16:06 GMT</pubDate><author>Max Brunton</author></item><item><title>Huawei releases the Beiming Architecture with SYCL</title><description>&lt;p&gt;Xiong Yan pointed out that the basic enabling software of Beiming architecture, that is, through Bisheng C++ programming
language, Bisheng compiler, and Beiming fusion acceleration library, provides versatile, efficient and high-performance
development capabilities for diverse computing systems.&lt;/p&gt;
&lt;p&gt;Among them, Bisheng C++ supports the SYCL heterogeneous programming standard, and realizes a language to program
Kunpeng, Shengteng and mainstream computing power in the industry. Beiming Fusion Acceleration Library provides
API-based programming calls for key functions in the field, is compatible with mainstream application frameworks,
provides a unified API interface for multiple computing power, and supports AI + big data, HPC + AI, HPDA and other
fusion applications.&lt;/p&gt;</description><link>https://www.huaweiupdate.com/huawei-releases-the-beiming-architecture/</link><guid isPermaLink="false">https://www.huaweiupdate.com/huawei-releases-the-beiming-architecture/</guid><pubDate>Mon, 04 Oct 2021 19:04:22 GMT</pubDate><author>Anonymous</author></item><item><title>GROMACS Adopts hipSYCL for Future AMD GPU Support</title><description>&lt;p&gt;It was attractive to consider using SYCL in GROMACS also for AMD GPUs, since there was already effort underway in
GROMACS in that direction targeting Intel GPUs. The hipSYCL (&lt;a href=&quot;https://github.com/illuhad/hipSYCL&quot;&gt;https://github.com/illuhad/hipSYCL&lt;/a&gt;) open-source project
run at Heidelberg University already supported CPUs, as well as Nvidia and AMD GPUs in SYCL by extending existing clang
toolchains, and was also funded by Intel to support the recent SYCL 2020 standard. We already wanted to use hipSYCL as
our portability check of the DPC++ code for Intel GPUs. We built a working relationship with the hipSYCL team led by
Aksel Alpay.&lt;/p&gt;</description><link>https://enccs.se/news/2021/09/gromacs-adopts-hipsycl-for-amd-gpu-support/</link><guid isPermaLink="false">https://enccs.se/news/2021/09/gromacs-adopts-hipsycl-for-amd-gpu-support/</guid><pubDate>Thu, 23 Sep 2021 13:02:15 GMT</pubDate><author>Rod Burns</author></item><item><title>Argonne&#39;s 44-Petaflops Polaris Supercomputer Will Support SYCL</title><description>&lt;p&gt;A new 44-petaflops (theoretical peak) supercomputer is under construction at the Department of Energy’s Argonne National
Laboratory. Called Polaris, this new supercomputing star has been selected to light the way to exascale and to Aurora,
the exascale-class Intel-HPE system that’s had its delivery pushed to next year (2022).&lt;/p&gt;
&lt;p&gt;&quot;We looked at many possible solutions with Aurora in the back of our mind&quot;, said Kumaran of the technology selection
process. &quot;We wanted something with multi-GPU node support. And we wanted something that would support some of the key
programming models on Aurora, which is MPI, OpenMP, and also &lt;a href=&quot;https://www.khronos.org/registry/SYCL/&quot;&gt;SYCL&lt;/a&gt;
in &lt;a href=&quot;https://software.intel.com/content/www/us/en/develop/documentation/oneapi-programming-guide/top/oneapi-programming-model/data-parallel-c-dpc.html&quot;&gt;DPC++&lt;/a&gt; (
the SYCL 2020 variant from Intel). We wanted these programming models supported, and Polaris offered that solution&quot;.&lt;/p&gt;</description><link>https://www.hpcwire.com/2021/08/25/argonnes-44-petaflops-polaris-system-will-be-testbed-for-aurora-exascale-era/</link><guid isPermaLink="false">https://www.hpcwire.com/2021/08/25/argonnes-44-petaflops-polaris-system-will-be-testbed-for-aurora-exascale-era/</guid><pubDate>Mon, 13 Sep 2021 15:18:58 GMT</pubDate><author>Rod Burns</author></item><item><title>A Big Step Forward: Moving Ginkgo to SYCL</title><description>&lt;p&gt;Ginkgo is a production-ready, sparse linear algebra library used for HPC on GPU architectures. It’s now using oneAPI
cross-architecture programming to support its foundational design with a high level of performance portability, and
focus on software sustainability. ExpertsHartwig Anzt at Karlsruhe Institute of Technology (KIT) and Univ. of Tennessee,
and Terry Cojean of KIT provide their insights on lessons learned moving CUDA code to other hardware architectures, and
tools that help smooth that transition. “…The oneAPI ecosystem has proven to be a very powerful and useful option for us
to actually target different architectures that are all supported by oneAPI…”&lt;/p&gt;</description><link>https://connectedsocialmedia.com/19598/a-big-step-forward-moving-ginkgo-to-oneapi/</link><guid isPermaLink="false">https://connectedsocialmedia.com/19598/a-big-step-forward-moving-ginkgo-to-oneapi/</guid><pubDate>Thu, 12 Aug 2021 16:26:19 GMT</pubDate><author>Anonymous</author></item><item><title>oneAPI Developer Summit Videos Available</title><description>&lt;p&gt;All the presentations including many from developers using SYCL are now available on the website.  &lt;/p&gt;</description><link>https://www.oneapi.com/events/devcon2021isc</link><guid isPermaLink="false">https://www.oneapi.com/events/devcon2021isc</guid><pubDate>Fri, 09 Jul 2021 11:20:38 GMT</pubDate><author>Rod Burns</author></item><item><title>SYCL Summer Sessions Call for Presentations</title><description>&lt;p&gt;In 2020 we launched &quot;SYCL Summer Sessions,&quot; an online event series designed to help you learn how to write better code
using SYCL. Last year we brought expert SYCL developers together to share their in depth knowledge of developing highly
parallel software. The videos from last year are online and available on demand and cover some great topics useful for
both experienced and new SYCL developers.&lt;/p&gt;
&lt;p&gt;We have opened a call for presentations for the event this year which closes on July 23rd. All submissions will be
reviewed by prominent members of the SYCL developer community.&lt;/p&gt;</description><link>https://sycl.tech/sessions/2021/</link><guid isPermaLink="false">https://sycl.tech/sessions/2021/</guid><pubDate>Mon, 05 Jul 2021 17:16:35 GMT</pubDate><author>Anonymous</author></item><item><title>Argonne, ORNL Award Codeplay Contract to Strengthen SYCL Support for AMD GPUs</title><description>&lt;p&gt;Argonne National Laboratory (Argonne) in collaboration with Oak Ridge National Laboratory (ORNL), has awarded Codeplay
Software a contract implementing the oneAPI DPC++ compiler, an implementation of the SYCL open standard software, to
support AMD GPU-based high-performance compute (HPC) supercomputers.&lt;/p&gt;</description><link>https://www.hpcwire.com/off-the-wire/argonne-ornl-award-codeplay-contract-to-strengthen-sycl-support-for-amd-gpus/</link><guid isPermaLink="false">https://www.hpcwire.com/off-the-wire/argonne-ornl-award-codeplay-contract-to-strengthen-sycl-support-for-amd-gpus/</guid><pubDate>Mon, 21 Jun 2021 08:07:53 GMT</pubDate><author>Rod Burns</author></item><item><title>Porting a Particle-in-Cell Code to Exascale Architectures</title><description>&lt;p&gt;As part of a series aimed at sharing best practices in preparing applications for Aurora, we highlight researchers’
efforts to optimize codes to run efficiently on graphics processing units.&lt;/p&gt;
&lt;p&gt;&quot;Moreover, without making any changes to their code, the team will be able to take advantage of the upcoming SYCL/DPC++
implementation of Kokkos—which is expected to be highly performant and broadly portable across architectures—immediately
at the time of its release.&quot;&lt;/p&gt;</description><link>https://insidehpc.com/2021/04/porting-a-particle-in-cell-code-to-exascale-architectures/</link><guid isPermaLink="false">https://insidehpc.com/2021/04/porting-a-particle-in-cell-code-to-exascale-architectures/</guid><pubDate>Tue, 18 May 2021 09:21:06 GMT</pubDate><author>Rod Burns</author></item><item><title>Sylkan: Towards a Vulkan Compute Target Platform for SYCL</title><description>&lt;p&gt;In this paper, we discuss the opportunities and challenges of mapping SYCL to Vulkan, a low-level explicit programming
model for GPUs. This includes an analysis of the potential semantic mismatch between each respective standard, as well
as approaches to work around some of these issues. Additionally, we present a prototype research implementation of
Sylkan, a SYCL compiler and runtime targeting Vulkan. In order to evaluate our prototype qualitatively and
quantitatively, we chose a variety of functional tests as well as three performance benchmarks. For the functional
tests, we discuss and categorize the failures of the current prototype, noting which semantic mismatch or missing
implementation causes them. For the performance benchmarks, we compare execution times against a OpenCL-based SYCL
implementation and a native Vulkan version of each benchmark, on two hardware platforms.&lt;/p&gt;</description><link>https://hgpu.org/?p=24964</link><guid isPermaLink="false">https://hgpu.org/?p=24964</guid><pubDate>Thu, 13 May 2021 16:00:41 GMT</pubDate><author>Rod Burns</author></item><item><title>Porting a Lattice QCD Code-Suite to Exascale Architectures</title><description>&lt;p&gt;The fundamental interactions between the quarks and gluons that constitute protons and nuclei can be calculated
systematically by the physics theory known as lattice quantum chromodynamics (LQCD). These interactions account for 99
percent of the mass in the visible universe, but they can only be simulated with powerful computer systems such as those
housed at the U.S. Department of Energy’s (DOE) Argonne Leadership Computing Facility (ALCF).&lt;/p&gt;
&lt;p&gt;As part of the effort to move operations to the backend and generalize the code, the developers are constructing
a &lt;a href=&quot;https://software.intel.com/content/www/us/en/develop/tools/oneapi.html?cid=sem&amp;amp;source=sa360&amp;amp;campid=2021_q1_iags_us_iagsoapi_iagsoapiee_awa_text-link_generic_exact_cd_dpd-oneapi-dpc-comp_O-2J3MV_google_div_oos_non-pbm&amp;amp;ad_group=generic_oneapi-dpc-compatibility_awa&amp;amp;intel_term=sycl&amp;amp;sa360id=43700053515352181&amp;amp;gclid=EAIaIQobChMItoSVyOLe7wIVhIJbCh0bMQgHEAAYASAAEgIMS_D_BwE&amp;amp;gclsrc=aw.ds&quot;&gt;SYCL backend&lt;/a&gt;;
Intel, likewise, is adding an extension that expands SYCL’s functions with APIs similar to those of CUDA to make porting
as easy as possible for users.&lt;/p&gt;
&lt;p&gt;As the other two applications, &lt;a href=&quot;https://github.com/paboyle/Grid/tree/develop/Grid&quot;&gt;Grid&lt;/a&gt; and HotQCD, already had
vendor-independent programming interfaces, the work being done to them is backend-intensive.&lt;/p&gt;</description><link>https://www.hpcwire.com/off-the-wire/porting-a-lattice-qcd-code-suite-to-exascale-architectures/</link><guid isPermaLink="false">https://www.hpcwire.com/off-the-wire/porting-a-lattice-qcd-code-suite-to-exascale-architectures/</guid><pubDate>Tue, 04 May 2021 15:16:50 GMT</pubDate><author>Scott Straughan</author></item><item><title>IWOCL + SYCLcon 2021 Slides/Videos Published For Lots Of OpenCL, SYCL Technical Talks</title><description>&lt;p&gt;IWOCL and SYCLcon 2021 featured talks on Intel&#39;s oneAPI, OpenCL improvements, the state of SYCL, Sylkan as a Vulkan
compute implementation of SYCL, hipSYCL, OpenCL and SYCL for RISC-V, and more. &lt;/p&gt;
&lt;p&gt;Videos from these events have been uploaded to YouTube while the slide decks for most of the presentations are also 
available.&lt;/p&gt;</description><link>https://www.phoronix.com/scan.php?page=news_item&amp;px=IWOCL-SYCLcon-2021</link><guid isPermaLink="false">https://www.phoronix.com/scan.php?page=news_item&amp;px=IWOCL-SYCLcon-2021</guid><pubDate>Mon, 03 May 2021 10:45:47 GMT</pubDate><author>Rod Burns</author></item><item><title>What to See Online at IWOCL &amp; SYCLcon 2021</title><description>&lt;p&gt;This year is expected to be the biggest IWOCL &amp;amp; SYCLcon conference of all time and Codeplay is contributing with various
sessions over 4 days from &lt;strong&gt;26-29 April&lt;/strong&gt;. The conference is online for the second year in a row and couldn&#39;t be easier
to attend - it&#39;s free and on demand with some live elements. Register now on
the &lt;a href=&quot;https://www.iwocl.org/&quot;&gt;conference website&lt;/a&gt;.&lt;/p&gt;</description><link>https://www.codeplay.com/portal/blogs/2021/04/23/join-codeplay-online-at-iwocl-syclcon-2021.html</link><guid isPermaLink="false">https://www.codeplay.com/portal/blogs/2021/04/23/join-codeplay-online-at-iwocl-syclcon-2021.html</guid><pubDate>Tue, 27 Apr 2021 15:49:36 GMT</pubDate><author>Rod Burns</author></item><item><title>Heterogeneous Processing Requires Data Parallelization: SYCL and DPC++ are a Good Start</title><description>&lt;p&gt;The learnings from both CUDA and OpenCL set the stage for the emergence of a truly popular and open solution for data
parallelism based on C++ for heterogeneous systems. That solution is SYCL, which is a higher-level programming model to
improve programming productivity on multiple hardware accelerators. It has quickly gained broad multivendor support,
widespread interest and the support of multiple serious compiler projects.&lt;/p&gt;</description><link>https://thenewstack.io/heterogeneous-processing-requires-data-parallelization-tools-sycl-and-dpc-are-a-good-start/</link><guid isPermaLink="false">https://thenewstack.io/heterogeneous-processing-requires-data-parallelization-tools-sycl-and-dpc-are-a-good-start/</guid><pubDate>Tue, 27 Apr 2021 15:44:45 GMT</pubDate><author>Rod Burns</author></item><item><title>XPU Blog: Hello SYCL and DPC++</title><description>&lt;p&gt;&lt;strong&gt;In this&lt;a href=&quot;https://twitter.com/search?q=%23xpublog&quot;&gt;#xpublog&lt;/a&gt; post, I cover three things:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is an XPU - and why should I care?&lt;/li&gt;
&lt;li&gt;What is SYCL?, and how can it be used to make our neurotic kitten lighten up (you won&#39;t want to miss that)&lt;/li&gt;
&lt;li&gt;How can I try it out for myself using the Intel DevCloud for oneAPI (all free, easy, and very cool)&lt;/li&gt;
&lt;/ul&gt;</description><link>https://software.intel.com/content/www/us/en/develop/articles/xpublog0001-hello-sycl-and-dpcpp.html</link><guid isPermaLink="false">https://software.intel.com/content/www/us/en/develop/articles/xpublog0001-hello-sycl-and-dpcpp.html</guid><pubDate>Thu, 15 Apr 2021 07:31:38 GMT</pubDate><author>Max Brunton</author></item><item><title>Acceleration at the Edge Podcast</title><description>&lt;p&gt;This episode was really inspired when I saw a recent blog that John authored. It really caught my attention. While
ArrayFire has expertise in CUDA and OpenCL, in this blog, John writes about the open SYCL standard and its
implementations.  &lt;/p&gt;</description><link>https://connectedsocialmedia.com/19446/acceleration-at-the-edge/</link><guid isPermaLink="false">https://connectedsocialmedia.com/19446/acceleration-at-the-edge/</guid><pubDate>Thu, 15 Apr 2021 07:28:47 GMT</pubDate><author>Rod Burns</author></item><item><title>TaskFlow v3.1: A New Tasking Model to Program SYCL</title><description>&lt;p&gt;Taskflow 3.1.0 is the 2nd release in the 3.x line! This release includes several new changes such as CPU-GPU tasking,
algorithm collection, enhanced web-based profiler, documentation, and unit tests.&lt;/p&gt;</description><link>https://taskflow.github.io/taskflow/release-3-1-0.html</link><guid isPermaLink="false">https://taskflow.github.io/taskflow/release-3-1-0.html</guid><pubDate>Thu, 15 Apr 2021 07:22:24 GMT</pubDate><author>Max Brunton</author></item><item><title>hipSYCL 0.9.0 - SYCL 2020 features coming to hipSYCL</title><description>&lt;p&gt;hipSYCL 0.9.0 is the first release that incorporates &lt;a href=&quot;https://github.com/hipSYCL/featuresupport&quot;&gt;features&lt;/a&gt; from the SYCL
2020 specification.&lt;/p&gt;
&lt;p&gt;SYCL 2020 is a major update on the older SYCL 1.2.1. Its highlights include a substantial amount of features that
originally came from oneAPI DPC++ and have since been contributed to the SYCL 2020 specification.&lt;/p&gt;</description><link>https://hipsycl.github.io/hipsycl/sycl2020/release/hipsycl-0.9/</link><guid isPermaLink="false">https://hipsycl.github.io/hipsycl/sycl2020/release/hipsycl-0.9/</guid><pubDate>Wed, 24 Feb 2021 09:42:15 GMT</pubDate><author>Max Brunton</author></item><item><title>Using the new features of SYCL 2020 in BabelStream</title><description>&lt;p&gt;This article explores some of the new features of SYCL 2020 and how the BabelStream benchmark has been adapted to use
these features. This is a great resource if you are planning to migrate your code to the new specification version.  &lt;/p&gt;</description><link>http://uob-hpc.github.io/2021/02/09/SYCL-2020.html</link><guid isPermaLink="false">http://uob-hpc.github.io/2021/02/09/SYCL-2020.html</guid><pubDate>Tue, 16 Feb 2021 16:28:09 GMT</pubDate><author>Rod Burns</author></item><item><title>Podcast: Exascale Earthquake Simulator with SYCL</title><description>&lt;p&gt;We introduce the first in a special series based on an effort aimed at sharing best practices in preparing applications
for the upcoming Aurora exascale supercomputer at the US Department of Energy’s Argonne National Laboratory. The
application uses RAJA as a framework to harness the acceleration of the supercomputer, and RAJA is being developed to
run on GPUs using DPC++. That is part of Intel’s oneAPI, and it’s an implementation of the SYCL programming model.&lt;/p&gt;</description><link>https://www.codeplay.com/</link><guid isPermaLink="false">https://www.codeplay.com/</guid><pubDate>Tue, 16 Feb 2021 16:15:38 GMT</pubDate><author>Max Brunton</author></item><item><title>SYCL 2020 Update: Includes dozens of new features and closer alignment with ISO C++</title><description>&lt;p&gt;&lt;strong&gt;Beaverton, OR – February 9, 2021 –&lt;/strong&gt; Today, &lt;a href=&quot;https://www.khronos.org/&quot;&gt;The Khronos® Group&lt;/a&gt;, an open consortium of
industry-leading companies creating advanced interoperability standards, announces the ratification and public release
of the &lt;a href=&quot;https://www.khronos.org/registry/SYCL/&quot;&gt;SYCL™ 2020 final specification&lt;/a&gt;—the open standard for single source C++
parallel programming. A major milestone encompassing years of specification
development, &lt;a href=&quot;https://www.khronos.org/registry/SYCL/&quot;&gt;SYCL 2020&lt;/a&gt;builds on the functionality of SYCL 1.2.1 to provide
improved programmability, smaller code size and increased performance. Based on C++17, SYCL 2020 enables easier
acceleration of standard C++ applications and drives a closer alignment with the ISO C++ roadmap.&lt;/p&gt;</description><link>https://www.khronos.org/news/press/khronos-releases-sycl-2020-final-specification</link><guid isPermaLink="false">https://www.khronos.org/news/press/khronos-releases-sycl-2020-final-specification</guid><pubDate>Wed, 10 Feb 2021 08:21:23 GMT</pubDate><author>Anonymous</author></item><item><title>NERSC, ALCF, Codeplay Partner on SYCL for Next-generation Supercomputers</title><description>&lt;p&gt;The National Energy Research Scientific Computing Center (NERSC) at Lawrence Berkeley National Laboratory (Berkeley
Lab), in collaboration with the Argonne Leadership Computing Facility (ALCF)at Argonne National Laboratory, has signed a
contract with Codeplay Software to enhance the LLVM SYCL™ GPU compiler capabilities for NVIDIA® A100 GPUs.&lt;/p&gt;
&lt;p&gt;This collaboration will help NERSC and ALCF users, along with the high-performance computing community in general,
produce high-performance applications that are portable across compute architectures from multiple vendors.&lt;/p&gt;
&lt;p&gt;Codeplay is a software company based in the U.K. that has a long history of developing compilers and tools for different
hardware architectures. The company has been the lead implementor of SYCL compilers and a main contributor to the
existing open source support for NVIDIA V100 GPUs through the DPC++ project. NVIDIA A100 GPUs are available in the
ThetaGPU extension of ALCF’s Theta and will power NERSC’s next-generation supercomputer, Perlmutter.&lt;/p&gt;</description><link>https://www.codeplay.com/portal/press-releases/2021/02/02/nersc-alcf-codeplay-partner-on-sycl-for-next-generation-supercomputers.html</link><guid isPermaLink="false">https://www.codeplay.com/portal/press-releases/2021/02/02/nersc-alcf-codeplay-partner-on-sycl-for-next-generation-supercomputers.html</guid><pubDate>Wed, 03 Feb 2021 17:46:22 GMT</pubDate><author>Rod Burns</author></item><item><title>Expanding the SYCL 2020 Ecosystem Podcast</title><description>&lt;p&gt;Open standards underpin the future of heterogeneous programming, and as Intel Principal Engineer Jeff Hammond points
out, SYCL has proven in many ways that &quot;standards don’t cost you a thing, and you get portability.&quot; A modern C++
language, SYCL has demonstrated amazing growth and now boasts four implementations—ComputeCpp, triSYCL, hipSYCL and
DPC++. hipSYCL Creator Aksel Alpay explains some of the differences between these implementations, and how hipSYCL is
evolving to incorporate DPC++ features contributed to the SYCL 2020 specification, including unified shared memory (
USM), reductions, group algorithms and subgroups. The two also dive into a discussion of buffers and accessors, and
Aksel debunks a few myths around hipSYCL.&lt;/p&gt;</description><link>https://connectedsocialmedia.com/19103/expanding-the-sycl-2020-ecosystem-with-hipsycl-and-dpc/</link><guid isPermaLink="false">https://connectedsocialmedia.com/19103/expanding-the-sycl-2020-ecosystem-with-hipsycl-and-dpc/</guid><pubDate>Mon, 01 Feb 2021 15:48:01 GMT</pubDate><author>Max Brunton</author></item><item><title>Solving a 2D Heat Equation Using SYCL and DPC++</title><description>&lt;p&gt;The heat equation is a problem commonly used in parallel computing tutorials. In fact, we start from one such exercise
published by the Partnership for Advanced Computing in Europe (PRACE). The original code1 describes a C and MPI
implementation of a 2D heat equation, discretized into a single point stencil.&lt;/p&gt;
&lt;p&gt;The 2D plane is divided into cells, with each cell being updated every timestep based on the previous values of itself
and its four neighbours.&lt;/p&gt;
&lt;p&gt;A more detailed explanation of the problem can be found on the PRACE repository.&lt;/p&gt;</description><link>https://techdecoded.intel.io/resources/solving-a-2d-heat-equation-using-data-parallel-c-dpc/?linkId=100000027947363#gs.qinbf4</link><guid isPermaLink="false">https://techdecoded.intel.io/resources/solving-a-2d-heat-equation-using-data-parallel-c-dpc/?linkId=100000027947363#gs.qinbf4</guid><pubDate>Wed, 20 Jan 2021 08:17:24 GMT</pubDate><author>Max Brunton</author></item><item><title>Raytracing From CUDA to SYCL 2020</title><description>&lt;p&gt;How to convert a code from parallel C++ ray-tracing code to CUDA.&lt;/p&gt;
&lt;p&gt;A walkthrough of converting a code from parallel C++ ray-tracing code to CUDA, and the work needed to make that CUDA
code run on CPU using parallel &lt;code&gt;for_each()&lt;/code&gt; and then converted the code to SYCL 2020 via Intel® DPC++.   &lt;/p&gt;</description><link>https://www.codeproject.com/Articles/5292398/Raytracing-From-CUDA-to-SYCL-2020-via-DPCplusplus#cuda</link><guid isPermaLink="false">https://www.codeproject.com/Articles/5292398/Raytracing-From-CUDA-to-SYCL-2020-via-DPCplusplus#cuda</guid><pubDate>Wed, 20 Jan 2021 08:15:02 GMT</pubDate><author>Max Brunton</author></item><item><title>Preparing an Earthquake Risk Assessment Application for Exascale</title><description>&lt;p&gt;As part of a new series aimed at sharing best practices in preparing applications for Aurora, we highlight researchers&#39;
efforts to optimize codes to run efficiently on graphics processing units (GPUs).&lt;/p&gt;
&lt;p&gt;So as to prepare for next-generation systems like Aurora, developers at the U.S. Department of Energy’s (DOE) Argonne
National Laboratory are working to port the SW4 application—a multidisciplinary simulation code for earthquake hazard
and risk assessment—to run on GPU-based Intel machines. As part of the EQSIM project supported by DOE&#39;s Exascale
Computing Project, Brian Homerding of the Argonne Leadership Computing Facility (ALCF) and Houjun Tang of Lawrence
Berkeley National Laboratory are leading an effort to use the C++ abstraction library RAJA, whose SYCL backend is
currently being written. &lt;/p&gt;</description><link>https://www.alcf.anl.gov/news/preparing-earthquake-risk-assessment-application-exascale-0</link><guid isPermaLink="false">https://www.alcf.anl.gov/news/preparing-earthquake-risk-assessment-application-exascale-0</guid><pubDate>Wed, 13 Jan 2021 13:42:31 GMT</pubDate><author>Scott Straughan</author></item><item><title>The Great Cross Architecture Challenge</title><description>&lt;p&gt;&lt;strong&gt;Calling all C++, DPC++ and CUDA developers:&lt;/strong&gt; You write awesome code, but does your code take full advantage of all
the CPUs, GPUs, FPGA and other accelerators you have? This challenge will focus on &lt;strong&gt;fast, efficient future-ready
cross-architecture development using SYCL with Data Parallel C++(DPC++)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;No more being tied to proprietary languages that limit your ability to innovate on new hardware.&lt;/p&gt;
&lt;p&gt;CodeProject.com, through sponsorship from Intel, is offering &lt;strong&gt;over $40,000 in prizes&lt;/strong&gt; for the &lt;strong&gt;oneAPI Cross
Architecture challenge&lt;/strong&gt; as well as once in a lifetime opportunities like CERN openlab Internship and a chance to work
on a project with Argonne National Laboratory.&lt;/p&gt;</description><link>https://www.codeproject.com/Competitions/1098/The-Great-Cross-Architecture-Challenge</link><guid isPermaLink="false">https://www.codeproject.com/Competitions/1098/The-Great-Cross-Architecture-Challenge</guid><pubDate>Tue, 15 Dec 2020 13:42:15 GMT</pubDate><author>Anonymous</author></item><item><title>A Vendor-Neutral Path to Math Acceleration</title><description>&lt;p&gt;Bringing Standardized APIs Across Multiple Math Domains Using SYCL and the oneAPI Math Kernel Library.&lt;/p&gt;
&lt;p&gt;The Basic Linear Algebra Subprograms (BLAS) provide key functionality across CPUs, GPUs, and other accelerators for
high-performance computing and artificial intelligence. Historically, developers needed to write code for each hardware
platform. And there was no easy way to port source code from one accelerator to another.&lt;/p&gt;</description><link>https://techdecoded.intel.io/</link><guid isPermaLink="false">https://techdecoded.intel.io/</guid><pubDate>Tue, 15 Dec 2020 13:27:40 GMT</pubDate><author>Max Brunton</author></item><item><title>A Guide to Migrating OpenCL Code to SYCL</title><description>&lt;p&gt;This document explores the similarities and differences between the Khronos OpenCL™ and the Data Parallel C++ (DPC++)
SYCL implementation, so developers will be able to transition existing OpenCL applications to DPC++ easily. This
document assumes proficiency in OpenCL.&lt;/p&gt;</description><link>https://software.intel.com/content/www/us/en/develop/articles/migrating-opencl-designs-to-dpcpp.html</link><guid isPermaLink="false">https://software.intel.com/content/www/us/en/develop/articles/migrating-opencl-designs-to-dpcpp.html</guid><pubDate>Mon, 14 Dec 2020 14:33:53 GMT</pubDate><author>Scott Straughan</author></item><item><title>New SYCL Ray Tracer Project</title><description>&lt;p&gt;Explore this ray tracer project implemented using SYCL with inspiration from &quot;Ray Tracing in one weekend&quot; and help to
contribute to this project.  &lt;/p&gt;</description><link>https://github.com/triSYCL/ray_tracer</link><guid isPermaLink="false">https://github.com/triSYCL/ray_tracer</guid><pubDate>Mon, 14 Dec 2020 14:19:27 GMT</pubDate><author>Anonymous</author></item><item><title>A Step-by-step Tutorial for Developing SYCL with DPC++</title><description>&lt;p&gt;This is an introduction to the 
&lt;a href=&quot;https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/dpc-compiler.html&quot;&gt;Data Parallel C++&lt;/a&gt;
programming model, or DPC++ for short. DPC++ is based on Khronos SYCL, which means it’s a modern C++ parallel
programming model. SYCL 1.2.1 is the latest Khronos standard, although the SYCL 2020 provisional specific is available
for review. Intel and other members of the SYCL working group are finalizing the next version of the language
specification. DPC++ contains extensions that make SYCL easier to use, although many of these are expected to be part of
SYCL 2020. Implementing extensions in the DPC++ compiler helps the community evaluate their effectiveness before
standardization.&lt;/p&gt;</description><link>https://techdecoded.intel.io/resources/programming-data-parallel-c/#gs.mflkxv</link><guid isPermaLink="false">https://techdecoded.intel.io/resources/programming-data-parallel-c/#gs.mflkxv</guid><pubDate>Thu, 03 Dec 2020 18:48:36 GMT</pubDate><author>Rod Burns</author></item><item><title>Migrating CUDA Stencil code to SYCL Video</title><description>&lt;p&gt;Data Parallel C++ (DPC++), the C++- and SYCL-based programming language of choice in the oneAPI programming environment,
promises to have a single source code that addresses multiple hardware architectures. However, starting from scratch or
rewriting existing application is tedious if not out of question in most cases. The Intel® DPC++ Compatibility Tool
addresses this issue by assisting in the migration from CUDA to DPC++. In this talk, we share our experiences with
migrating a typical CUDA stencil application code to DPC++ with the help of the tool. The presentation addresses the
basic porting process, required manual steps, and issues we faced with the tsunami simulation code easyWave. Besides
these procedural steps, we point out performance numbers of the hardware devices supported by oneAPI and its evolving
ecosystem. This is not limited to devices like Intel CPUs and GPUs, but includes promising numbers for NVIDIA hardware
as well. We also demonstrate what needs to be done to execute the migrated, CUDA-originated code on FPGAs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Steffen Christgau, Zuse Institute Berlin&lt;/strong&gt;&lt;/p&gt;</description><link>https://sc20.gallery.video/detail/videos/sc20/video/6208394344001/developing-a-cross-architecture-dpc-application-using-migrated-cuda-stencil-code</link><guid isPermaLink="false">https://sc20.gallery.video/detail/videos/sc20/video/6208394344001/developing-a-cross-architecture-dpc-application-using-migrated-cuda-stencil-code</guid><pubDate>Tue, 24 Nov 2020 09:18:13 GMT</pubDate><author>Max Brunton</author></item><item><title>Intel Debuts oneAPI Gold and Provides More Details on GPU Roadmap</title><description>&lt;p&gt;Intel today provided greater detail around its plans to bring a full line of GPUs (Xe) and associated programming
environment to market. The biggest news from an HPC perspective was introduction of oneAPI Gold, the first productized
version of Intel’s programming platform for the Xe GPU line.&lt;/p&gt;</description><link>https://www.hpcwire.com/2020/11/11/intel-debuts-oneapi-gold-and-provides-more-details-on-gpu-roadmap/</link><guid isPermaLink="false">https://www.hpcwire.com/2020/11/11/intel-debuts-oneapi-gold-and-provides-more-details-on-gpu-roadmap/</guid><pubDate>Mon, 16 Nov 2020 18:44:12 GMT</pubDate><author>Rod Burns</author></item><item><title>A Sobel Convolution using SYCL</title><description>&lt;p&gt;The Sobel operator is a simple edge-detection filter that, when convolved with an image, produces a corresponding image
with the edges emphasized. It is used primarily in computer vision or rendering applications as a precursor to
downstream pipeline stages that perform inference or render various visual effects.  &lt;/p&gt;</description><link>https://www.codeproject.com/Articles/5284847/5-Minutes-to-Your-First-oneAPI-App-on-DevCloud</link><guid isPermaLink="false">https://www.codeproject.com/Articles/5284847/5-Minutes-to-Your-First-oneAPI-App-on-DevCloud</guid><pubDate>Mon, 16 Nov 2020 18:42:49 GMT</pubDate><author>Anonymous</author></item><item><title>Use oneAPI to Make Your C++ Application GPU Aware</title><description>&lt;p&gt;In this article, we&#39;ll be accelerating an existing C++ program with GPUs.&lt;/p&gt;</description><link>https://www.codeproject.com/Articles/5284853/Use-oneAPI-to-Make-Your-Cplusplus-Application-GPU</link><guid isPermaLink="false">https://www.codeproject.com/Articles/5284853/Use-oneAPI-to-Make-Your-Cplusplus-Application-GPU</guid><pubDate>Mon, 16 Nov 2020 18:40:27 GMT</pubDate><author>Max Brunton</author></item><item><title>Develop with SYCL on a RaspberryPi</title><description>&lt;p&gt;Building and running a parallel code in C++17, implemented using Khronos CL/SYCL-model specification, on Raspberry Pi 
IoT boards.&lt;/p&gt;</description><link>https://www.hackster.io/artvratz/parallel-computing-on-raspberry-pi-4b-iot-boards-made-easy-2628a5</link><guid isPermaLink="false">https://www.hackster.io/artvratz/parallel-computing-on-raspberry-pi-4b-iot-boards-made-easy-2628a5</guid><pubDate>Wed, 11 Nov 2020 09:23:49 GMT</pubDate><author>Anonymous</author></item><item><title>Khronos SYCL 2020 Release and ISO C++ 20 status and future directions @ SC20</title><description>&lt;p&gt;SYCL is an open standard framework using standard ISO C++ with heterogeneous computing. SYCL 2020 is planned to be
released with updates suitable for HPC. and enabling multiple backends. SYCL through Intel’s OneAPI and DPC++ is adopted
to be the programming model for AURORA, the first CORAL exascale computer using Intel processors. Frontier and El
Capitan will be delivered with AMD processors. HipSYCL is suited to run on ROCM as one of our implementations. There is
also an Nvidia backend for some of our implementations suitable for Perlmutter.&lt;/p&gt;
&lt;p&gt;After last three year’s (SC17, SC18, SC19) successful Heterogeneous &amp;amp; Distributed Computing in C++ for HPC BoF,
and SC19&#39;s SYCL BoF, there was popular demand for updates on these features added to SYCL 2020 and C++ 20. We have
integrated the C++ and SYCL BoF as many members attend both committees.&lt;/p&gt;
&lt;p&gt;We will be answering audience questions using a bank of questions contributed in real-time by the audience and helping
audience members to understand how to experiment with SYCL and how to join the expanding SYCL community.&lt;/p&gt;
&lt;p&gt;The session will begin with a presentation from the panel members followed by a live Q&amp;amp;A for 45 minutes.&lt;/p&gt;
&lt;p&gt;Find out how to join this session through 
&lt;a href=&quot;https://www.eventscribe.net/2020/SC20/&quot;&gt;the SC 20 website schedule&lt;/a&gt;, the session will be live on 19th November at 
10:00AM EST.&lt;/p&gt;
&lt;h2&gt;Group Leaders&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Simon McIntosh-Smith, University of Bristol&lt;/li&gt;
&lt;li&gt;Michael Wong, Codeplay Software Ltd&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Panel Members&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Geoff Lowny, Intel&lt;/li&gt;
&lt;li&gt;Bjarne Stroustrup, Columbia University/Morgan Stanley&lt;/li&gt;
&lt;li&gt;Aksel Alpay, Heidelberg University&lt;/li&gt;
&lt;li&gt;Tom Deakin, University of Bristol&lt;/li&gt;
&lt;li&gt;Ronan Kereyell, Xilinx&lt;/li&gt;
&lt;li&gt;Nevin Liber, ANL&lt;/li&gt;
&lt;li&gt;Brandon Cook: LBNL&lt;/li&gt;
&lt;li&gt;Hal Finkel, Office of Sciences&lt;/li&gt;
&lt;li&gt;Medhi Goli, Codeplay  &lt;/li&gt;
&lt;/ul&gt;</description><link>https://www.eventscribe.net/2020/SC20/</link><guid isPermaLink="false">https://www.eventscribe.net/2020/SC20/</guid><pubDate>Tue, 10 Nov 2020 16:40:35 GMT</pubDate><author>Anonymous</author></item><item><title>Read the SYCL Book for Free</title><description>&lt;p&gt;Read this new publication &quot;Mastering DPC++ for Programming of Heterogeneous Systems using C++ and SYCL&quot; from Apress and
get a &lt;a href=&quot;https://www.apress.com/gp/book/9781484255735&quot;&gt;free version from their website&lt;/a&gt;.  &lt;/p&gt;</description><link>https://www.apress.com/gp/book/9781484255735</link><guid isPermaLink="false">https://www.apress.com/gp/book/9781484255735</guid><pubDate>Thu, 05 Nov 2020 18:03:46 GMT</pubDate><author>Scott Straughan</author></item><item><title>In Pursuit of the Holy Grail: Portable, Performant Programming</title><description>&lt;p&gt;Dr. Tom Deakin, senior research associate and lecturer in the High-Performance Computing Research Group at the
University of Bristol, and Dr. James Brodman, software engineer at Intel, unpack the tricky topic of performance
portability to reveal what this concept truly means and ways to achieve it. As contributors to the Khronos SYCL Working
Group—from the user and implementer perspectives—they talk about the exciting growth of the SYCL community, marked, in
part, by its implementations that now support a variety of hardware architectures, including DPC++ and hipSYCL.&lt;/p&gt;</description><link>https://connectedsocialmedia.com/18937/in-pursuit-of-the-holy-grail-portable-performant-programming/</link><guid isPermaLink="false">https://connectedsocialmedia.com/18937/in-pursuit-of-the-holy-grail-portable-performant-programming/</guid><pubDate>Thu, 05 Nov 2020 18:01:37 GMT</pubDate><author>Max Brunton</author></item><item><title>oneAPI Academic Center of Excellence Opened at Heidelberg University</title><description>&lt;p&gt;A oneAPI Academic Center of Excellence (CoE) is now established at
the &lt;a href=&quot;https://www.urz.uni-heidelberg.de/en&quot;&gt;Heidelberg University Computing Center&lt;/a&gt; (URZ). The CoE will conduct research
supporting the oneAPI industry initiative to create a uniform, open programming model for heterogeneous computer
architectures.&lt;/p&gt;
&lt;p&gt;URZ’s work as a oneAPI CoE will add advanced DPC++ capabilities
into &lt;a href=&quot;https://github.com/illuhad/hipSYCL&quot;&gt;hipSYCL&lt;/a&gt;, which supports systems based on AMD GPUs, NVIDIA GPUs, and CPUs. New
DPC++ extensions are part of the SYCL 2020 provisional specification that brings features such as unified &lt;strong&gt;shared&lt;/strong&gt;
memory &lt;strong&gt;to hipSYCL&lt;/strong&gt; and the platforms it supports – furthering the promise of oneAPI application support across
system architectures and vendors.&lt;/p&gt;</description><link>https://insidehpc.com/2020/09/oneapi-academic-center-of-excellence-established-at-the-heidelberg-university-computing-center-for-hardware-heterogeneity/</link><guid isPermaLink="false">https://insidehpc.com/2020/09/oneapi-academic-center-of-excellence-established-at-the-heidelberg-university-computing-center-for-hardware-heterogeneity/</guid><pubDate>Thu, 01 Oct 2020 10:47:42 GMT</pubDate><author>Scott Straughan</author></item><item><title>Bringing SYCL to Supercomputers with Celerity</title><description>&lt;p&gt;This is where Celerity comes in. It is an open source project which focuses on providing a way of scaling applications
to a cluster of accelerators without having to be an expert in distributed memory programming. In fact, the Celerity API
does not make it apparent that a program is running on many nodes at all.&lt;/p&gt;</description><link>https://www.khronos.org/blog/bringing-sycl-to-supercomputers-with-celerity</link><guid isPermaLink="false">https://www.khronos.org/blog/bringing-sycl-to-supercomputers-with-celerity</guid><pubDate>Fri, 11 Sep 2020 08:40:14 GMT</pubDate><author>Max Brunton</author></item></channel></rss>